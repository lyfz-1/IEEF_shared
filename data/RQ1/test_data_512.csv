diff,msg,isGood
mmm UIServiceImpl . java <nl> ppp UIServiceImpl . java <nl> - import java . awt . Component ; <nl> - import java . util . ArrayList ; <nl> - import java . util . Collections ; <nl> - import java . util . Hashtable ; <nl> - import java . util . Iterator ; <nl> + import java . awt . * ; <nl> + import java . util . * ; <nl> - import java . util . Map ; <nl> - import java . util . Vector ; <nl> - import javax . swing . JFrame ; <nl>,"implement plugincomponentlistener in the call history panel , in order to activate plugin component add",1
"mmm ServerStoredContactListIcqImpl . java <nl> ppp ServerStoredContactListIcqImpl . java <nl> - ServerStoredContactListIcqImpl() <nl> + ServerStoredContactListIcqImpl( <nl> + OperationSetPersistentPresenceIcqImpl parentOperationSet, <nl> + ProtocolProviderServiceIcqImpl        icqProvider) <nl> + this . parentOperationSet = parentOperationSet ; <nl> + this . icqProvider = icqProvider ; <nl> + if(parentOperationSet == null){ <nl> + logger . debug(""No presence op .  set available .  Bailing out . "") ; <nl> + return ; <nl> + } <nl> - void init(  SsiService joustSimSsiService, <nl> - OperationSetPersistentPresenceIcqImpl parentOperationSet, <nl> - ProtocolProviderServiceIcqImpl icqProvider) <nl> + void init(  SsiService joustSimSsiService ) <nl>",take callback to providet and opset during construction so that they could be available for all unresolved contact before registration,1
"mmm MatchCaseNodeContainsCondition . java <nl> ppp MatchCaseNodeContainsCondition . java <nl> - final String text = NodeTextConditionController . getItemForComparison(nodeItem, node) . toString() ; <nl> - return text != null && checkText(text) ; <nl> + final Object content = NodeTextConditionController . getItemForComparison(nodeItem, node) ; <nl> + return content != null && checkText(content . toString()) ; <nl> mmm NodeContainsCondition . java <nl> ppp NodeContainsCondition . java <nl> - final String text = NodeTextConditionController . getItemForComparison(nodeItem, node) . toString() ; <nl> - return checkText(text) ; <nl> + final Object content = NodeTextConditionController . getItemForComparison(nodeItem, node) ; <nl> + return content != null && <nl>",auto bug report fix,0
mmm AccountsConfigurationForm . java <nl> ppp AccountsConfigurationForm . java <nl> - ListSelectionModel . SINGLE_SELECTION) ;     <nl> + ListSelectionModel . SINGLE_SELECTION) ; <nl> - public void actionPerformed(ActionEvent e) { <nl> - JButton sourceButton = (JButton)e . getSource() ; <nl> + public void actionPerformed(ActionEvent evt) { <nl> + JButton sourceButton = (JButton)evt . getSource() ; <nl> - Toolkit . getDefaultToolkit() . getScreenSize() . width/2  <nl> + Toolkit . getDefaultToolkit() . getScreenSize() . width/2 <nl> - Toolkit . getDefaultToolkit() . getScreenSize() . height/2  <nl> + Toolkit . getDefaultToolkit() . getScreenSize() . height/2 <nl> - ProtocolProviderFactory providerFactory <nl>,before retrieve a service from a reference make sure that the corresponding bundle be not in the stopping state in order to avoid illegalstateexceptions,1
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> - String connectionUrl = appendProxyUserToURL(url, user, dbPrefix) ; <nl> + url = appendProxyUserToURL(url, user, dbPrefix) ; <nl> + String connectionUrl = appendTagsToURL(url, context) ; <nl> + final String finalUser = user ; <nl> - getConnectionFromPool(connectionUrl, user, poolKey, properties)) ; <nl> + getConnectionFromPool(connectionUrl, finalUser, poolKey, properties)) ; <nl> + private String appendTagsToURL(String url, InterpreterContext context) { <nl> + StringBuilder builder = new StringBuilder(url) ; <nl> + if (url . startsWith(""jdbc:hive2:"")) { <nl> + Integer lastIndexOfQMark = builder . indexOf(""?"") ; <nl> + if (lastIndexOfQMark == -1) { <nl> + builder <nl>",improve the logic of extract hive job url in jdbcinterpreter,0
"mmm ZeppelinSparkClusterTest . java <nl> ppp ZeppelinSparkClusterTest . java <nl> + Paragraph p2 = note . addNewParagraph(anonymous) ; <nl> + p2 . setText(""%spark . pyspark\nimport sys\nsys . path"") ; <nl> + note . run(p2 . getId(), true) ; <nl> + assertEquals(Status . FINISHED, p2 . getStatus()) ; <nl> + assertTrue(p2 . getReturn() . toString() . contains(""databricks_spark"")) ; <nl> + Paragraph p3 = note . addNewParagraph(anonymous) ; <nl> + p3 . setText(""%spark . ipyspark\nimport sys\nsys . path"") ; <nl> + note . run(p3 . getId(), true) ; <nl> + assertEquals(Status . FINISHED, p3 . getStatus()) ; <nl> + assertTrue(p3 . <nl>",add jar to sys.path a do in pyspark shell,0
"mmm SIPCommTabbedPane . java <nl> ppp SIPCommTabbedPane . java <nl> + import net . java . sip . communicator . util . * ; <nl> + this . setForeground( <nl> + new Color(UtilActivator . getResources() <nl> +  . getColor(""service . gui . TAB_TITLE""))) ; <nl> mmm SIPCommTabbedPaneEnhancedUI . java <nl> ppp SIPCommTabbedPaneEnhancedUI . java <nl> + y++ ; <nl> + if (!isSelected) <nl> + y+=2 ; <nl>",chat tabbed pane look modify in order to help good distinguish select and unselected tab,1
"mmm ChatRoomMessageReceivedEvent . java <nl> ppp ChatRoomMessageReceivedEvent . java <nl> + private int eventType = -1 ; <nl> + public static final int CONVERSATION_MESSAGE_RECEIVED = 1 ; <nl> + public static final int ACTION_MESSAGE_RECEIVED = 2 ; <nl> + public static final int SYSTEM_MESSAGE_RECEIVED = 3 ; <nl> + { <nl> + this(source, from, timestamp, message, CONVERSATION_MESSAGE_RECEIVED) ; <nl> + } <nl> + public ChatRoomMessageReceivedEvent(ChatRoom        source, <nl> + ChatRoomMember  from, <nl> + Date            timestamp, <nl> + Message    <nl>",add event type in order to allow distinguish action and system message,1
mmm Entity . java <nl> ppp Entity . java <nl> - public void setX(double x) { <nl> - this . x = x ; <nl> - } <nl> - public void setY(double y) { <nl> - this . y = y ; <nl> - } <nl> - public void setZ(double z) { <nl> - this . z = z ; <nl> - } <nl> mmm EntityCreature . java <nl> ppp EntityCreature . java <nl> + import fr . themode . minestom . net . packet . server . ServerPacket ; <nl> + import fr . themode . minestom . <nl>,improve thread safety,0
"mmm RocketFigure3d . java <nl> ppp RocketFigure3d . java <nl> - log . debug(""unselecting"") ; <nl> - this . roll = MathUtil . reduce360(rot) ; <nl> + this . roll = MathUtil . reduce2PI(rot) ; <nl> - this . yaw = MathUtil . reduce360(rot) ; <nl> + this . yaw = MathUtil . reduce2PI(rot) ; <nl>",change function name : 'reduce360 ' to 'reduce2pi ' because the number be in radian,1
mmm ThrustCurveMotorPlaceholder . java <nl> ppp ThrustCurveMotorPlaceholder . java <nl> + long temp ; <nl> + temp = Double . doubleToLongBits(delay) ; <nl> + result = prime * result (int) (temp ^ (temp >>> 32)) ; <nl> + result = prime * result <nl> + ((designation == null) ? 0 : designation . hashCode()) ; <nl> + temp = Double . doubleToLongBits(diameter) ; <nl> + result = prime * result (int) (temp ^ (temp >>> 32)) ; <nl> + temp = Double . doubleToLongBits(emptyMass) ; <nl> + result = prime * result (int) (temp ^ (temp >>> 32)) ; <nl>,change hashcode and equal to use all field old format of ork file do not include digest so that be not enough to compare placeholder,1
"mmm ClientPlayPacketsHandler . java <nl> ppp ClientPlayPacketsHandler . java <nl> + register(0x01, ClientQueryBlockNbtPacket::new) ; <nl> - register(0x08, ClientClickWindowButtonPacket::new) ; // Marked as 0x07 on wiki . vg <nl> + register(0x08, ClientClickWindowButtonPacket::new) ; <nl> + register(0x0C, ClientEditBookPacket::new) ; <nl> + register(0x0D, ClientQueryEntityNbtPacket::new) ; <nl> - register(0x0F, ClientKeepAlivePacket::new) ; <nl> + register(0x0F, ClientGenerateStructurePacket::new) ; <nl> + register(0x24, ClientSetBeaconEffectPacket::new) ; <nl> new file <nl> ppp ClientEditBookPacket . java <nl> + package net . minestom . server . network . packet . client . play ; <nl> + import net . minestom . server . entity . Player ; <nl> + import net <nl>",a bunch of client packet,0
"mmm FlinkShims . java <nl> ppp FlinkShims . java <nl> + import org . apache . zeppelin . flink . sql . SqlCommandParser ; <nl> + import org . jline . utils . AttributedString ; <nl> + import org . jline . utils . AttributedStringBuilder ; <nl> + import org . jline . utils . AttributedStyle ; <nl> + import java . util . Optional ; <nl> + protected static AttributedString formatCommand(SqlCommandParser . SqlCommand cmd, String description) { <nl> + return new AttributedStringBuilder() <nl> +  . style(AttributedStyle . DEFAULT . bold()) <nl> +  . append(cmd . toString()) <nl>",support all sql of flink 1.11,0
"mmm PlayerInit . java <nl> ppp PlayerInit . java <nl> + connectionManager . setPacketConsumer((player, packet) -> { <nl> + return false ; <nl> + }) ; <nl> new file <nl> ppp PacketConsumer . java <nl> + package fr . themode . minestom . listener . manager ; <nl> + import fr . themode . minestom . entity . Player ; <nl> + import fr . themode . minestom . net . packet . client . ClientPacket ; <nl> + @FunctionalInterface <nl> + public interface PacketConsumer { <nl> + boolean accept(Player player, ClientPacket packet) ; <nl> + } <nl> mmm <nl>",add a packet listener,0
"mmm FileAccessServiceImpl . java <nl> ppp FileAccessServiceImpl . java <nl> - private static Logger logger = Logger <nl> -  . getLogger(FileAccessServiceImpl . class) ; <nl> - public static final String TEMP_FILE_PREFIX = ""SIPCOMM"" ; <nl> - public static final String TEMP_FILE_SUFFIX = ""TEMP"" ; <nl> + private static Logger logger = Logger <nl> +  . getLogger(FileAccessServiceImpl . class) ; <nl> + public static final String TEMP_FILE_PREFIX = ""SIPCOMM"" ; <nl> + public static final String TEMP_FILE_SUFFIX = ""TEMP"" ; <nl> + -     *  <nl> - ConfigurationService configurationService) <nl> - {   <nl>",sip-comm 's directory should start with a dot so that it be hide for unix system,1
mmm VCardTempXUpdatePresenceExtension . java <nl> ppp VCardTempXUpdatePresenceExtension . java <nl> - import javax . xml . bind . annotation . adapters . * ; <nl> + import org . jivesoftware . smack . util . * ; <nl> - HexBinaryAdapter hexBinaryAdapter = new HexBinaryAdapter() ; <nl> - imageSha1 = hexBinaryAdapter . marshal( <nl> - messageDigest . digest(image)) ; <nl> + imageSha1 = StringUtils . encodeHex(messageDigest . digest(image)) ; <nl>,replaces usage of javax.xml.bind.annotation.adapters.hexbinaryadapter by org.jivesoftware.smack.util.stringutils in order to remain java 1.5 compatible,1
"mmm SparkIntegrationTest . java <nl> ppp SparkIntegrationTest . java <nl> - import java . util . Map ; <nl> - public SparkIntegrationTest(String sparkVersion) { <nl> - LOGGER . info(""Testing SparkVersion: "" + sparkVersion) ; <nl> + public SparkIntegrationTest(String sparkVersion, String hadoopVersion) { <nl> + LOGGER . info(""Testing Spark Version: "" sparkVersion) ; <nl> + LOGGER . info(""Testing Hadoop Version: "" hadoopVersion) ; <nl> - this . sparkHome = DownloadUtils . downloadSpark(sparkVersion) ; <nl> + this . sparkHome = DownloadUtils . downloadSpark(sparkVersion, hadoopVersion) ; <nl> + protected void setUpSparkInterpreterSetting(InterpreterSetting interpreterSetting) { <nl> + } <nl> - if (isSpark2()) { <nl> <nl>",upgrade to spark 3.0.0,0
mmm MutePushBufferDataSource . java <nl> ppp MutePushBufferDataSource . java <nl> - extends CaptureDeviceDelegatePushBufferDataSource <nl> + extends PushBufferDataSourceDelegate<PushBufferDataSource> <nl> - private final PushBufferDataSource dataSource ; <nl> - super( <nl> - (dataSource instanceof CaptureDevice) <nl> - ? (CaptureDevice) dataSource <nl> - : null) ; <nl> - this . dataSource = dataSource ; <nl> - } <nl> - @Override <nl> - public void connect() <nl> - throws IOException <nl> - { <nl> - dataSource . connect() ; <nl> - } <nl> - @Override <nl> - public void disconnect() <nl> - { <nl> - dataSource . disconnect() ; <nl> - } <nl> - <nl>,implement a mechanism to translate pullbufferdatasource into pushbufferdatasource because portaudio provide a `` pull '' capturedevice and neomedia relies on the `` push '' interface,1
mmm AgentTasksEnhancer . java <nl> ppp AgentTasksEnhancer . java <nl> + import java . net . URISyntaxException ; <nl> - return new File(source . getLocation() . getFile()) ; <nl> + File agent ; <nl> + try { <nl> + agent = new File(source . getLocation() . toURI()) ; <nl> + } <nl> + catch (URISyntaxException ex) { <nl> + agent = new File(source . getLocation() . getPath()) ; <nl> + } <nl> + return agent ; <nl>,convert url to file use a uri so that url-encoding be remove,1
mmm ConditionalStyleModel . java <nl> ppp ConditionalStyleModel . java <nl> + import java . util . Collections ; <nl> - return null ; <nl> + return Collections . emptyList() ; <nl>,bug fix : npe,0
"mmm ContactFacebookImpl . java <nl> ppp ContactFacebookImpl . java <nl> - return getDefaultAvatar() ; <nl> + return null ; <nl> + image = byteArrayOS . toByteArray() ; <nl> - return getDefaultAvatar() ; <nl> - catch (IOException e) <nl> + catch (IOException ioe) <nl> - e . printStackTrace() ; <nl> + logger <nl> +  . warn(""Failed to close avatar ByteArrayOutputStream"", ioe) ; <nl> - image = byteArrayOS . toByteArray() ; <nl> - if (image == null) <nl> - return getDefaultAvatar() ; <nl> - return getDefaultAvatar() ; <nl> + return null ; <nl> - private static byte[] getDefaultAvatar() <nl> - <nl>",remove default avatar for facebook because we do not seem to do it for other protocol and it get call too often,1
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> + import org . apache . zeppelin . tabledata . TableDataUtils ; <nl> - msg . append(removeTablePrefix(replaceReservedChars(md . getColumnLabel(i)))) ; <nl> + msg . append(removeTablePrefix(replaceReservedChars( <nl> + TableDataUtils . normalizeColumn(md . getColumnLabel(i))))) ; <nl> - msg . append(removeTablePrefix(replaceReservedChars(md . getColumnName(i)))) ; <nl> + msg . append(removeTablePrefix(replaceReservedChars( <nl> + TableDataUtils . normalizeColumn(md . getColumnName(i))))) ; <nl> - msg . append(replaceReservedChars(resultValue)) ; <nl> + msg . append(replaceReservedChars(TableDataUtils . normalizeColumn(resultValue))) ; <nl> mmm BasePythonInterpreterTest . java <nl> ppp BasePythonInterpreterTest . java <nl> - ""df = pd . DataFrame({'id':[1,2,3], 'name':['a','b','c']})\nz . show(df)"", context) <nl>",fetch row with newline character break entire table,0
"mmm Lucene90HnswVectorsReader . java <nl> ppp Lucene90HnswVectorsReader . java <nl> + import org . apache . lucene . index . FloatVectorValues ; <nl> - import org . apache . lucene . index . VectorValues ; <nl> - public VectorValues getVectorValues(String field) throws IOException { <nl> + public FloatVectorValues getFloatVectorValues(String field) throws IOException { <nl> - OffHeapVectorValues vectorValues = getOffHeapVectorValues(fieldEntry) ; <nl> + OffHeapFloatVectorValues vectorValues = getOffHeapVectorValues(fieldEntry) ; <nl> - private OffHeapVectorValues getOffHeapVectorValues(FieldEntry fieldEntry) throws IOException { <nl> + private OffHeapFloatVectorValues getOffHeapVectorValues(FieldEntry fieldEntry) <nl> + throws IOException { <nl> - return new OffHeapVectorValues(fieldEntry . dimension, fieldEntry . ordToDoc, bytesSlice) ; <nl>",rename vector float class and method,0
new file <nl> ppp Wizard . java <nl> + package net . java . sip . communicator . impl . gui . customcontrols . wizard ; <nl> + import java . awt . BorderLayout ; <nl> + import java . awt . CardLayout ; <nl> + import java . awt . Component ; <nl> + import java . awt . Dialog ; <nl> + import java . awt . FlowLayout ; <nl> + import java . awt . Frame ; <nl> + import java . awt . Insets ; <nl> + import java . awt . event . WindowAdapter <nl>,wizard control change in order to be use for the account registration wizard,1
"mmm IRInterpreter . java <nl> ppp IRInterpreter . java <nl> + import java . nio . charset . StandardCharsets ; <nl> - String code = IOUtils . toString(input) <nl> + String code = IOUtils . toString(input, StandardCharsets . UTF_8) <nl> - LOGGER . debug(""Init IRKernel via script:\n"" + code) ; <nl> + LOGGER . debug(""Init IRKernel via script:\n{}"", code) ; <nl> - FileWriter writer = null ; <nl> - try { <nl> - writer = new FileWriter(serverFile) ; <nl> + try (FileWriter writer = new FileWriter(serverFile) ;){ <nl> - } finally { <nl> - if (writer != null) { <nl>",jupyter conda python package,0
"mmm JobManagerService . java <nl> ppp JobManagerService . java <nl> + import org . apache . zeppelin . notebook . AuthorizationService ; <nl> + import java . util . stream . Collectors ; <nl> + private AuthorizationService authorizationService ; <nl> - public JobManagerService(Notebook notebook, ZeppelinConfiguration conf) { <nl> + public JobManagerService(Notebook notebook, <nl> + AuthorizationService authorizationService, <nl> + ZeppelinConfiguration conf) { <nl> + this . authorizationService = authorizationService ; <nl> - notebook . getNoteStream() . forEach(note -> { <nl> - NoteJobInfo noteJobInfo = new NoteJobInfo(note) ; <nl> - if (noteJobInfo . unixTimeLastRun > lastUpdateServerUnixTime) { <nl> - notesJobInfo . <nl>",only display note job info for owner,0
mmm Note . java <nl> ppp Note . java <nl> + private transient ZeppelinConfiguration zConf = ZeppelinConfiguration . create() ; <nl> - setCronSupported(ZeppelinConfiguration . create()) ; <nl> + setCronSupported(zConf) ; <nl> + if (p . getStatus() == Status . RUNNING && !zConf . isRecoveryEnabled()) { <nl> + p . setStatus(Status . ABORT) ; <nl> + } <nl>,set paragraph status to be abort when recovery be disabled,0
mmm NotificationConfigurationActivator . java <nl> ppp NotificationConfigurationActivator . java <nl> - public class NotificationConfigurationActivator implements BundleActivator <nl> + public class NotificationConfigurationActivator <nl> + implements BundleActivator <nl> - public void start(BundleContext bc) throws Exception <nl> + public void start(BundleContext bc) <nl> + throws Exception <nl> - public void stop(BundleContext arg0) throws Exception <nl> + public void stop(BundleContext bc) <nl> + throws Exception <nl> - ServiceReference audioReference  <nl> - = bundleContext . getServiceReference( <nl> - AudioNotifierService . class . getName()) ; <nl> - audioService = (AudioNotifierService) bundleContext . getService( <nl> - audioReference) ; <nl> + audioService <nl> + = ServiceUtils <nl>,display the description of the notification event in the event page of tool > option.. with space so that they look less geeky,1
"mmm MenuBuildProcessFactory . java <nl> ppp MenuBuildProcessFactory . java <nl> - actionBuilder . addBuilder(""ignore"", new ChildEntryFilter() { <nl> + actionBuilder . addBuilderPair(""ignore"", new ChildEntryFilter() { <nl> - }) ; <nl> + }, EntryVisitor . EMTPY) ; <nl> - actionBuilder . addBuilder(""removeOnMac"", new ChildEntryFilter() { <nl> + actionBuilder . addBuilderPair(""removeOnMac"", new ChildEntryFilter() { <nl> - }) ; <nl> + }, EntryVisitor . EMTPY) ; <nl> mmm PopupMenuListenerForEntry . java <nl> ppp PopupMenuListenerForEntry . java <nl> + import java . awt . event . ActionEvent ; <nl> + import java . awt . event . ActionListener ; <nl> + import javax <nl>",delay destroying of menu for macos so that action can be perform,1
mmm ToggleDetailsAction . java <nl> ppp ToggleDetailsAction . java <nl> - @EnabledAction(checkOnNodeChange=true),toggledetailsaction always enable,0
"mmm CertificateStatus . java <nl> ppp CertificateStatus . java <nl> - throw new IllegalArgumentException(""'statusType' is an unsupported value"") ; <nl> + throw new IllegalArgumentException(""'statusType' is an unsupported CertificateStatusType"") ; <nl> mmm CertificateStatusRequest . java <nl> ppp CertificateStatusRequest . java <nl> - throw new IllegalArgumentException(""'statusType' is an unsupported value"") ; <nl> + throw new IllegalArgumentException(""'statusType' is an unsupported CertificateStatusType"") ; <nl> mmm ServerName . java <nl> ppp ServerName . java <nl> - throw new IllegalArgumentException(""'name' is an unsupported value"") ; <nl> + throw new IllegalArgumentException(""'nameType' is an unsupported NameType"") ; <nl> mmm CertificateStatus . java <nl> ppp CertificateStatus . java <nl>",improve exception message,0
"mmm JobManager . java <nl> ppp JobManager . java <nl> + if (previousJobClient != null) { <nl> + LOGGER . warn(""There's another Job {} that is associated with paragraph {}"", <nl> + jobClient . getJobID(), paragraphId) ; <nl> + return ; <nl> + } <nl> - if (previousJobClient != null) { <nl> - LOGGER . warn(""There's another Job {} that is associated with paragraph {}"", <nl> - jobClient . getJobID(), paragraphId) ; <nl> - } <nl> + if (jobProgressPoller == null) { <nl> + LOGGER . warn(""Unable to remove poller, because no poller is associated with paragraph: "" <nl> <nl>",leakage in jobmanager of flink interpreter,0
mmm LoginStartPacket . java <nl> ppp LoginStartPacket . java <nl> + import fr . themode . minestom . net . packet . server . play . ChunkDataPacket ; <nl> - joinGamePacket . gameMode = GameMode . SURVIVAL ; <nl> + joinGamePacket . gameMode = GameMode . CREATIVE ; <nl> + for (int x = 0 ; x < 8 ; x++) { <nl> + for (int z = 0 ; z < 8 ; z++) { <nl> + ChunkDataPacket . ChunkSection chunkSection = new ChunkDataPacket . ChunkSection() ; <nl> + chunkSection . bitsPerBlock = 13 ; <nl> + chunkSection <nl>,wip chunk packet,0
"mmm SM2Signer . java <nl> ppp SM2Signer . java <nl> + import org . bouncycastle . math . ec . ECAlgorithms ; <nl> - import org . bouncycastle . util . BigIntegers ; <nl> - private int curveLength ; <nl> - pubPoint = ecParams . getG() . multiply(((ECPrivateKeyParameters)ecKey) . getD()) . normalize() ; <nl> + pubPoint = createBasePointMultiplier() . multiply(ecParams . getG(), ((ECPrivateKeyParameters)ecKey) . getD()) . normalize() ; <nl> - curveLength = (ecParams . getCurve() . getFieldSize() + 7) / 8 ; <nl> + digest . reset() ; <nl> - reset() ; <nl> + digest . update(z, 0, z <nl>",a few improvement to sm2signer,0
"mmm AccountSelectorBox . java <nl> ppp AccountSelectorBox . java <nl> - private Hashtable accountsTable = new Hashtable() ; <nl> + private final Map<ProtocolProviderService, JMenuItem> accountsTable = <nl> + new Hashtable<ProtocolProviderService, JMenuItem>() ; <nl> - private SIPCommMenu menu = new SIPCommMenu() ; <nl> + private final SIPCommMenu menu = new SIPCommMenu() ; <nl> - private MainCallPanel parentCallPanel ; <nl> + private final MainCallPanel parentCallPanel ; <nl> - Enumeration i = accountsTable . keys() ; <nl> - while (i . hasMoreElements()) <nl> + for (Map . Entry<ProtocolProviderService, JMenuItem> entry : accountsTable <nl> +  . entrySet()) <nl> - ProtocolProviderService pps = <nl>","minor optimization toimpl.gui.main.call wrt map iteration , memory consumption because of field",1
mmm NotebookServiceTest . java <nl> ppp NotebookServiceTest . java <nl> + private SearchService searchService ; <nl> - SearchService searchService = new LuceneSearch(zeppelinConfiguration) ; <nl> + searchService = new LuceneSearch(zeppelinConfiguration) ; <nl> + searchService . close() ; <nl> mmm NoteEventAsyncListener . java <nl> ppp NoteEventAsyncListener . java <nl> + import org . apache . zeppelin . scheduler . SchedulerThreadFactory ; <nl> + import org . apache . zeppelin . util . ExecutorUtil ; <nl> - import java . util . concurrent . BlockingQueue ; <nl> + import java . io . Closeable ; <nl> + import java . util . <nl>,remove lucene writer lock during shutdown,0
"mmm VideoMediaStreamImpl . java <nl> ppp VideoMediaStreamImpl . java <nl> - private final VideoListener deviceSessionVideoListener <nl> - = new VideoListener() <nl> - { <nl> - public void videoAdded(VideoEvent e) <nl> - { <nl> - fireVideoEvent( <nl> - e . getType(), <nl> - e . getVisualComponent(), <nl> - e . getOrigin()) ; <nl> - } <nl> - public void videoRemoved(VideoEvent e) <nl> - { <nl> - fireVideoEvent( <nl> - e . getType(), <nl> - e . getVisualComponent(), <nl> - e . getOrigin()) ; <nl> - } <nl> - } ; <nl> + private VideoListener deviceSessionVideoListener ; <nl> - if (oldValue <nl>","in neomedia , fix notrealizederror thrown because mediadevicesesion do not wait for realize on processor report by emil ivov",1
mmm ChangeEventDispatcher . java <nl> ppp ChangeEventDispatcher . java <nl> + import net . java . sip . communicator . util . * ; <nl> mmm MainFrame . java <nl> ppp MainFrame . java <nl> - import java . beans . * ; <nl> + import java . beans . PropertyChangeEvent ; <nl> mmm ChatPanel . java <nl> ppp ChatPanel . java <nl> - import java . beans . * ; <nl> + import java . beans . PropertyChangeEvent ; <nl> + import java . beans . PropertyChangeListener ; <nl> mmm ConfigurationManager . java <nl> ppp ConfigurationManager . java <nl>,move propertychangelistener/event fromconfiguration.event toutil because they 're generic and of interest to other use case,1
mmm BasicErrorControllerIntegrationTests . java <nl> ppp BasicErrorControllerIntegrationTests . java <nl> - public class BasicErrorControllerIntegrationTest { <nl> + public class BasicErrorControllerIntegrationTests { <nl> mmm SampleDataGemFireApplicationTest . java <nl> ppp SampleDataGemFireApplicationTest . java <nl> - public class SampleDataGemFireApplicationTest { <nl> + public class SampleDataGemFireApplicationTests { <nl> mmm ByteArrayRandomAccessDataTest . java <nl> ppp ByteArrayRandomAccessDataTest . java <nl> - public class ByteArrayRandomAccessDataTest { <nl> + public class ByteArrayRandomAccessDataTests { <nl> mmm AnsiOutputTest . java <nl> ppp AnsiOutputTest . java <nl> - public class AnsiOutputTest { <nl> + public class AnsiOutputTests { <nl>,rename test class so that their test be run by maven,1
"mmm ClickHouseStatementImpl . java <nl> ppp ClickHouseStatementImpl . java <nl> + import java . util . Locale ; <nl> - return withoutStrings . toLowerCase() . contains("" with totals"") ; <nl> + return withoutStrings . toLowerCase(Locale . ROOT) . contains("" with totals"") ; <nl> mmm ClickHouseSqlStatement . java <nl> ppp ClickHouseSqlStatement . java <nl> + import java . util . Locale ; <nl> - p . put(keyword . toUpperCase(), position) ; <nl> + p . put(keyword . toUpperCase(Locale . ROOT), position) ; <nl> - Integer p = this . positions . get(keyword . toUpperCase()) ; <nl> + Integer p = <nl>",enhance the parser so that it can deal with test case from clickhouse repo,1
"mmm RemoteInterpreterServer . java <nl> ppp RemoteInterpreterServer . java <nl> - private static final int DEFAULT_SHUTDOWN_TIMEOUT = 2000 ; <nl> + public static final int DEFAULT_SHUTDOWN_TIMEOUT = 2000 ; <nl> mmm ProcessLauncher . java <nl> ppp ProcessLauncher . java <nl> - e . printStackTrace() ; <nl> + LOGGER . error(""unable to write to redirectedContext"", e) ; <nl> mmm ClusterInterpreterProcess . java <nl> ppp ClusterInterpreterProcess . java <nl> - import org . apache . zeppelin . interpreter . remote . RemoteInterpreterManagedProcess ; <nl> + import org . apache . zeppelin . interpreter . remote . ExecRemoteInterpreterProcess ; <nl> - public <nl>",remote interpreter soft shutdown,0
mmm ConjunctConditions . java <nl> ppp ConjunctConditions . java <nl> - JComponent rendererComponent = cond . getListCellRendererComponent() ;,related bug fix,0
mmm DependencySelection . java <nl> ppp DependencySelection . java <nl> - if (visibleOrigin == null  || visibleTarget == null || visibleOrigin . equals(visibleTarget)) <nl> + if (visibleOrigin == null  || visibleTarget == null <nl> + || visibleOrigin ==visibleTarget ) <nl> + return false ; <nl> + NodeModel selectionRoot = selection . getSelectionRoot() ; <nl> + if (visibleOrigin == selectionRoot || visibleTarget == selectionRoot) <nl> - } <nl> + } <nl>,ignore dependency if root be the only visible ancestor because of the,1
mmm WebMvcAutoConfiguration . java <nl> ppp WebMvcAutoConfiguration . java <nl> + import javax . servlet . http . HttpServletRequest ; <nl> + import org . springframework . http . HttpHeaders ; <nl> - import org . springframework . web . servlet . config . annotation . ViewControllerRegistry ; <nl> + import org . springframework . web . servlet . handler . AbstractUrlHandlerMapping ; <nl> + import org . springframework . web . servlet . mvc . ParameterizableViewController ; <nl> + @Bean <nl> + public WelcomePageHandlerMapping welcomePageHandlerMapping( <nl> + ResourceProperties resourceProperties) { <nl> + return new WelcomePageHandlerMapping(resourceProperties . getWelcomePage()) ; <nl>,rework welcome page so that it only handle reqs that accept text/html,1
mmm ChatConversationPanel . java <nl> ppp ChatConversationPanel . java <nl> - import java . util . Map . Entry ; <nl> - import java . util . Map ; <nl> + import org . jitsi . service . configuration . * ; <nl> - = (String) lastMsgElement . getAttributes() <nl> -  . getAttribute(Attribute . NAME) ; <nl> + = (String) lastMsgElement . getAttributes() . getAttribute( <nl> + Attribute . NAME) ; <nl> - && (chatMessage . getDate() lastMessageTimestamp <nl> - < 60000)) <nl> + && ((chatMessage . getDate() - lastMessageTimestamp) < 60000)) <nl> - Element elem = document <nl>,refactors the utility class swingworker to perform thread pooling because it be extensively use during chat,1
"mmm FlinkShims . java <nl> ppp FlinkShims . java <nl> + } else if (flinkVersion . getMajorVersion() == 1 && flinkVersion . getMinorVersion() == 13) { <nl> + LOGGER . info(""Initializing shims for Flink 1 . 13"") ; <nl> + flinkShimsClass = Class . forName(""org . apache . zeppelin . flink . Flink113Shims"") ; <nl> + public void setBatchRuntimeMode(Object tableConfig) { <nl> + } <nl> + public void setOldPlanner(Object tableConfig) { <nl> + } <nl> mmm Flink112Shims . java <nl> ppp Flink112Shims . java <nl> - import org . apache . flink . api . common . ExecutionConfig ; <nl>",support flink 1.13,0
mmm AbstractMongodbQuery . java <nl> ppp AbstractMongodbQuery . java <nl> - QueryMixin<Q> getQueryMixin() { <nl> + protected QueryMixin<Q> getQueryMixin() { <nl> - MongodbDocumentSerializer getSerializer() { <nl> + protected MongodbDocumentSerializer getSerializer() { <nl> - ReadPreference getReadPreference() { <nl> + protected ReadPreference getReadPreference() { <nl>,change visibility of package private method in abstractmongodbquery,0
mmm OperationSetBasicTelephonyJabberImpl . java <nl> ppp OperationSetBasicTelephonyJabberImpl . java <nl> + import org . jivesoftware . smackx . * ; <nl> + import org . jivesoftware . smackx . packet . * ; <nl> mmm JingleIQProvider . java <nl> ppp JingleIQProvider . java <nl> - import org . jivesoftware . smack . * ; <nl> - import org . jivesoftware . smack . packet . * ; <nl> - public IQ parseIQ(XmlPullParser parser) throws Exception <nl> + public JingleIQ parseIQ(XmlPullParser parser) <nl> + throws Exception <nl> - JingleIQ jingleIQ = new JingleIQ() ; <nl> - String sessionID = null <nl>,patch thing so that we would be able to commit the beginning of our jingle implementation and the xep-0115 support,1
"mmm Color . java <nl> ppp Color . java <nl> + import static sf . util . Utility . isBlank ; <nl> + public static Color fromHTMLColor(final String htmlColor) <nl> + { <nl> + if (isBlank(htmlColor)) <nl> + { <nl> + throw new IllegalArgumentException(""No color provided, "" htmlColor) ; <nl> + } <nl> + if (htmlColor . length() != 7 || !htmlColor . startsWith(""#"")) <nl> + { <nl> + throw new IllegalArgumentException(""Bad color provided, "" htmlColor) ; <nl> + } <nl> + try <nl> + { <nl> + final int r = Integer . parseInt(htmlColor . substring(1, 3), 16) <nl>","add a level of indirection to color-maps , so that they can be specify by the user in the future",1
"mmm IPySparkInterpreter . java <nl> ppp IPySparkInterpreter . java <nl> - import org . apache . zeppelin . interpreter . util . InterpreterOutputStream ; <nl> - if (!conf . contains(""spark . submit . deployMode"") || <nl> - !conf . get(""spark . submit . deployMode"") . equals(""cluster"")) { <nl> + if (!conf . contains(SparkStringConstants . SUBMIT_DEPLOY_MODE_PROP_NAME) || <nl> + !conf . get(SparkStringConstants . SUBMIT_DEPLOY_MODE_PROP_NAME) . equals(""cluster"")) { <nl> mmm SparkInterpreter . java <nl> ppp SparkInterpreter . java <nl> - conf . set(""spark . scheduler . mode"", ""FAIR"") ; <nl> + conf . set(SparkStringConstants . SCHEDULER_MODE_PROP_NAME, ""FAIR"") ; <nl> - conf <nl>",spark interpreter use incorrect property name,0
"mmm OutgoingFileTransferJabberImpl . java <nl> ppp OutgoingFileTransferJabberImpl . java <nl> - protocolProvider . getConnection() . addPacketWriterInterceptor( <nl> + protocolProvider . getConnection() . addPacketInterceptor( <nl> - protocolProvider . getConnection() . removePacketWriterInterceptor(this) ; <nl> + protocolProvider . getConnection() . removePacketInterceptor(this) ; <nl> mmm ScServiceDiscoveryManager . java <nl> ppp ScServiceDiscoveryManager . java <nl> + -        connection . addPacketWriterInterceptor( <nl> - this, capsPacketFilter) ; <nl> + connection . addPacketInterceptor(this, capsPacketFilter) ; <nl> mmm AbstractPacketExtension . java <nl> ppp AbstractPacketExtension . java <nl> + private List<PacketExtension> childExtensions <nl> + = new ArrayList<PacketExtension>() ; <nl> - List<? extends <nl>",add a default packet extension provider refactors a few more packet extension so that they would extend abstractpacketextension,1
"mmm SchemaTextFormatter . java <nl> ppp SchemaTextFormatter . java <nl> + boolean emphasize = false ; <nl> + emphasize = column . isPartOfPrimaryKey() ; <nl> - columnDetails)) ; <nl> + columnDetails, <nl> + emphasize)) ; <nl> mmm BaseTextFormattingHelper . java <nl> ppp BaseTextFormattingHelper . java <nl> - static final String DASHED_SEPARATOR = separator(""-"") ; <nl> + static final String DASHED_SEPARATOR = separator(""-"") ; <nl> + { <nl> + return createDetailRow(ordinal, subName, type, false) ; <nl> + } <nl> + @Override <nl> + public String createDetailRow(final String ordinal, <nl> + final String subName, <nl> + final String type, <nl> + <nl>","emphasize primary key in html output , so that they be consistent",1
"mmm APTOptions . java <nl> ppp APTOptions . java <nl> + public static final String QUERYDSL_GENERATED_ANNOTATION_CLASS = ""querydsl . generatedAnnotationClass"" ; <nl> mmm DefaultConfiguration . java <nl> ppp DefaultConfiguration . java <nl> + import com . querydsl . codegen . GeneratedAnnotationResolver ; <nl> + import static com . querydsl . apt . APTOptions . QUERYDSL_GENERATED_ANNOTATION_CLASS ; <nl> + Class<? extends Annotation> generatedAnnotationClass = GeneratedAnnotationResolver . resolve(options . get(QUERYDSL_GENERATED_ANNOTATION_CLASS)) ; <nl> + module . bindInstance(CodegenModule . GENERATED_ANNOTATION_CLASS, generatedAnnotationClass) ; <nl> mmm BeanSerializer . java <nl> ppp BeanSerializer . java <nl> - import javax . annotation . Generated ; <nl> + <nl>",allow alternative generated annotation to be provide,0
"mmm JabberStatusEnum . java <nl> ppp JabberStatusEnum . java <nl> - = new JabberStatusEnum(70, ""Free For Chat"", <nl> + = new JabberStatusEnum(85, ""Free For Chat"", <nl> - } catch (IOException e) { <nl> - logger . error(""Failed to load icon: "" + imagePath, e) ; <nl> + } catch (IOException exc) { <nl> + logger . error(""Failed to load icon: "" imagePath, exc) ; <nl>",changed free for chat status to be over 80 so that our default online status be available,1
"mmm AddContactWizardPage1 . java <nl> ppp AddContactWizardPage1 . java <nl> - import net . java . sip . communicator . impl . gui . main . customcontrols . wizard . WizardPanelDescriptor ; <nl> + import net . java . sip . communicator . service . gui . WizardContainer ; <nl> + import net . java . sip . communicator . service . gui . WizardPage ; <nl> - public class AddContactWizardPage1  <nl> - extends WizardPanelDescriptor  <nl> - implements CellEditorListener { <nl> + public class AddContactWizardPage1 <nl> + implements WizardPage, CellEditorListener { <nl> + private WizardContainer wizard ; <nl>",wizard control change in order to be use for the account registration wizard,1
"mmm CollQueryStandardTest . java <nl> ppp CollQueryStandardTest . java <nl> - private QueryExecution standardTest = new QueryExecution(Module . COLLECTIONS, Target . MEM) { <nl> + private QueryExecution standardTest = new QueryExecution(QuerydslModule . COLLECTIONS, Target . MEM) { <nl> mmm CaseBuilder . java <nl> ppp CaseBuilder . java <nl>  <nl> mmm CoverageTest . java <nl> ppp CoverageTest . java <nl> - private MatchingFiltersFactory matchers = new MatchingFiltersFactory(Module . COLLECTIONS, Target . MEM) ; <nl> + private MatchingFiltersFactory matchers = new MatchingFiltersFactory(QuerydslModule . COLLECTIONS, Target . MEM) ; <nl> - private ProjectionsFactory projections = new ProjectionsFactory(Module . COLLECTIONS, Target . <nl>",compile under java 11,0
new file <nl> ppp ChartFactory . java <nl> + package org . achartengine ;,add source code for achartengine 1.0.0 in order to apply patch to make it work well,1
mmm NodeViewLayoutAdapter . java <nl> ppp NodeViewLayoutAdapter . java <nl> - final boolean isItem = ! (isSummary && i > 0) ;,fix for layout with cloud and for summary node first,0
new file <nl> ppp FlinkCmdInterpreter . java <nl> + package org . apache . zeppelin . flink ; <nl> + import org . apache . hadoop . yarn . api . records . ApplicationReport ; <nl> + import org . apache . hadoop . yarn . client . api . YarnClient ; <nl> + import org . apache . hadoop . yarn . conf . YarnConfiguration ; <nl> + import org . apache . hadoop . yarn . util . ConverterUtils ; <nl> + import org . apache . zeppelin . interpreter . InterpreterContext ; <nl> + import org <nl>,support flink command in flink interpreter,0
"mmm OrdinalMappingAtomicReader . java <nl> ppp OrdinalMappingAtomicReader . java <nl>  <nl> mmm TaxonomyMergeUtils . java <nl> ppp TaxonomyMergeUtils . java <nl> - public class TaxonomyMergeUtils { <nl> + public abstract class TaxonomyMergeUtils { <nl> + private TaxonomyMergeUtils() {} <nl> - public static void merge(Directory srcIndexDir, Directory srcTaxDir, OrdinalMap map, IndexWriter destIndexWriter,  <nl> - DirectoryTaxonomyWriter destTaxWriter) throws IOException { <nl> + public static void merge(Directory srcIndexDir, Directory srcTaxoDir, OrdinalMap map, IndexWriter destIndexWriter, <nl> + DirectoryTaxonomyWriter destTaxoWriter) throws IOException { <nl> - destTaxWriter . addTaxonomy(srcTaxDir, map) ; <nl> + destTaxoWriter . addTaxonomy(srcTaxoDir, map) ; <nl> - List<AtomicReaderContext> leaves = <nl>","rename test var , class and add miss ctor",0
"mmm SimpleTextFieldInfosFormat . java <nl> ppp SimpleTextFieldInfosFormat . java <nl> - static final BytesRef VECTOR_SCORE_FUNC = new BytesRef(""  vector score function "") ; <nl> + static final BytesRef VECTOR_SEARCH_STRATEGY = new BytesRef(""  vector search strategy "") ; <nl> - assert StringHelper . startsWith(scratch . get(), VECTOR_SCORE_FUNC) ; <nl> - String scoreFunction = readString(VECTOR_SCORE_FUNC . length, scratch) ; <nl> - VectorValues . ScoreFunction vectorDistFunc = distanceFunction(scoreFunction) ; <nl> + assert StringHelper . startsWith(scratch . get(), VECTOR_SEARCH_STRATEGY) ; <nl> + String scoreFunction = readString(VECTOR_SEARCH_STRATEGY . length, scratch) ; <nl> + VectorValues . SearchStrategy vectorDistFunc = distanceFunction(scoreFunction) ; <nl> - <nl>",rename vectorvalues.scorefunction to searchstrategy,0
"mmm ESTAuth . java <nl> ppp ESTAuth . java <nl> - ESTRequest applyAuth(ESTRequest request) ; <nl> + void applyAuth(ESTRequestBuilder reqBldr) ; <nl> mmm ESTRequest . java <nl> ppp ESTRequest . java <nl> - final HttpUtil . Headers headers = new HttpUtil . Headers() ; <nl> - final byte[] readAheadBuf = new byte[1024] ; <nl> + HttpUtil . Headers headers = new HttpUtil . Headers() ; <nl> - public ESTRequest addHeader(String key, String value) <nl> + ESTRequest(String method, URL url, ESTClientRequestIdempotentInputSource writer, ESTHijacker hijacker, ESTSourceConnectionListener listener, HttpUtil . Headers headers) <nl> - headers . add(key, value) ; <nl> - return <nl>",partial refactoring of estrequest,0
"mmm PlayerInit . java <nl> ppp PlayerInit . java <nl> + import fr . themode . demo . entity . ChickenCreature ; <nl> + import fr . themode . minestom . benchmark . ThreadResult ; <nl> + import fr . themode . minestom . utils . MathUtils ; <nl> + import java . util . Map ; <nl> - player . sendHeaderFooter(""RAM USAGE: "" + ramUsage + "" MB"", """", '&') ; <nl> + player . sendHeaderFooter(""RAM USAGE: "" ramUsage "" MB"", benchmarkMessage, '&') ; <nl> + ChickenCreature chickenCreature = new ChickenCreature(player . getPosition()) ; <nl> + chickenCreature . <nl>",switch to netty rewrite,0
mmm NodeView . java <nl> ppp NodeView . java <nl> - DetailsView detailContent ;,bug fix : in nodeview : wrong mouse listener be attach to detailsview,0
deleted file <nl> mmm ContactListPanel . java . orig <nl> - package net . java . sip . communicator . impl . gui . main . contactlist ; <nl> - import java . awt . * ; <nl> - import java . awt . event . * ; <nl> - import java . awt . image . * ; <nl> - import java . util . * ; <nl> - import javax . swing . * ; <nl> - import javax . swing . Timer ; <nl> - import net . java . sip . communicator . impl . <nl>,deletes contactlistpanel.java.orig because it do not seem to be necessary,1
"mmm HadoopUtils . java <nl> ppp HadoopUtils . java <nl> + import com . google . common . io . Files ; <nl> + import java . io . File ; <nl> + public static String downloadJar(String jarOnHdfs) throws IOException { <nl> + File tmpDir = Files . createTempDir() ; <nl> + FileSystem fs = FileSystem . get(new Configuration()) ; <nl> + Path sourcePath = fs . makeQualified(new Path(jarOnHdfs)) ; <nl> + Path destPath = new Path(tmpDir . getAbsolutePath() ""/"" sourcePath . getName()) ; <nl> + fs . copyToLocalFile(sourcePath, destPath) ; <nl> + return new File(destPath . toString()) . <nl>",support hdfs jar for flink.execution.jars & flink.udf.jars,0
mmm Lucene70Codec . java <nl> ppp Lucene70Codec . java <nl> + import org . apache . lucene . codecs . KnnVectorsFormat ; <nl> - import org . apache . lucene . codecs . VectorFormat ; <nl> - public VectorFormat vectorFormat() { <nl> - return VectorFormat . EMPTY ; <nl> + public KnnVectorsFormat knnVectorsFormat() { <nl> + return KnnVectorsFormat . EMPTY ; <nl> mmm Lucene80Codec . java <nl> ppp Lucene80Codec . java <nl> + import org . apache . lucene . codecs . KnnVectorsFormat ; <nl> - import org . apache . lucene . codecs . VectorFormat ; <nl> - <nl>,rename knn search vector format,0
"deleted file <nl> mmm StunServer . java <nl> - package net . java . sip . communicator . plugin . jabberaccregwizz ; <nl> - public class StunServer <nl> - { <nl> - private String ipAddress ; <nl> - private String port ; <nl> - private boolean supportTurn ; <nl> - private String username ; <nl> - private char[] password ; <nl> - private int index ; <nl> - public StunServer(  String ipAddress, <nl> - String port, <nl> - boolean supportTurn, <nl> - String username, <nl> - char[] password, <nl> - int index) <nl> - { <nl> - this <nl>",modifies the stun form in the xmpp wizard so that it would use a share stun server descriptor,1
"mmm FlinkShims . java <nl> ppp FlinkShims . java <nl> + public abstract String explain(Object tableEnv, String sql) ; <nl> mmm SqlCommandParser . java <nl> ppp SqlCommandParser . java <nl> - ""EXPLAIN\\s+( . *)"", <nl> - SINGLE_OPERAND), <nl> + ""EXPLAIN\\s+(SELECT|INSERT)\\s+( . *)"", <nl> + (operands) -> { <nl> + return Optional . of(new String[] { operands[0], operands[1] }) ; <nl> + }), <nl> mmm Flink110Shims . java <nl> ppp Flink110Shims . java <nl> - import org . apache . zeppelin . flink . shims111 . CollectStreamTableSink ; <nl> - import org . apache . zeppelin . flink . shims111 <nl>",explain statement be break in flink interpreter,0
"mmm FlinkIntegrationTest . java <nl> ppp FlinkIntegrationTest . java <nl> - import org . apache . zeppelin . interpreter . ExecutionContext ; <nl> + import org . apache . zeppelin . interpreter . ExecutionContextBuilder ; <nl> - Interpreter flinkInterpreter = interpreterFactory . getInterpreter(""flink"", new ExecutionContext(""user1"", ""note1"", ""flink"")) ; <nl> + Interpreter flinkInterpreter = interpreterFactory . getInterpreter(""flink"", new ExecutionContextBuilder() . setUser(""user1"") . setNoteId(""note1"") . setDefaultInterpreterGroup(""flink"") . createExecutionContext()) ; <nl> mmm JdbcIntegrationTest . java <nl> ppp JdbcIntegrationTest . java <nl> - import org . apache . zeppelin . interpreter . ExecutionContext ; <nl> + import org . apache . zeppelin . <nl>",support to run note in isolated mode in rest api,0
"mmm MongodbExpressions . java <nl> ppp MongodbExpressions . java <nl> + public static BooleanExpression geoIntersects(Expression<Double[]> expr, double latVal, double longVal) { <nl> + return Expressions . booleanOperation(MongodbOps . GEO_INTERSECTS, expr, ConstantImpl . create(new Double[]{latVal, longVal})) ; <nl> + } <nl> mmm MongodbOps . java <nl> ppp MongodbOps . java <nl> - NEAR_SPHERE(Boolean . class) ; <nl> + NEAR_SPHERE(Boolean . class), <nl> + GEO_INTERSECTS(Boolean . class) ; <nl> mmm MongodbSerializer . java <nl> ppp MongodbSerializer . java <nl> + } else if (op == MongodbOps . GEO_INTERSECTS) { <nl> + return asDBObject(asDBKey(expr, 0), asDBObject( <nl> + ""$geoIntersects"", <nl> + asDBObject(""$geometry"", <nl>",add $ geointersects,0
"mmm IRInterpreter . java <nl> ppp IRInterpreter . java <nl> - return 20403 ; <nl> + return 20404 ; <nl> mmm SparkIntegrationTest24 . java <nl> ppp SparkIntegrationTest24 . java <nl> - {""2 . 4 . 3""} <nl> + {""2 . 4 . 4""} <nl> mmm ZeppelinSparkClusterTest24 . java <nl> ppp ZeppelinSparkClusterTest24 . java <nl> - {""2 . 4 . 3""} <nl> + {""2 . 4 . 4""} <nl>",use spark-2.4 a the default profile,0
new file <nl> ppp AccountManagerImpl . java <nl> + package net . java . sip . communicator . impl . protocol ;,"when start the application , load the stored account in the background in order to allow the ui to appear as soon a possible",1
mmm NodeView . java <nl> ppp NodeView . java <nl> - if (!node . isRoot() && node . getParent() == null || mainView == null) {,fix in nodeview.nodechanged,0
mmm NetworkAddressManagerServiceImpl . java <nl> ppp NetworkAddressManagerServiceImpl . java <nl> - import org . ice4j . ice . harvest . * ; <nl> + import net . java . sip . communicator . util . NetworkUtils ;//disambiguates with ice4j's <nl> mmm IceUdpTransportManager . java <nl> ppp IceUdpTransportManager . java <nl> + import org . ice4j . ice . * ; <nl> + import net . java . sip . communicator . impl . protocol . jabber . extensions . jingle . CandidateType ; <nl> + import net . java . sip . communicator . service . netaddr . * <nl>,modifies the stun form in the xmpp wizard so that it would use a share stun server descriptor,1
mmm MindMapHTMLWriter . java <nl> ppp MindMapHTMLWriter . java <nl> - final Collection<MindIcon> icons = IconController . getIcons(model) ;,iconcontroller.geticons should not be static,0
mmm NodeContainsCondition . java <nl> ppp NodeContainsCondition . java <nl> - return plainTextContent . indexOf(value) > -1 ;,bug fix in text condition,0
mmm BlockEnumGenerator . java <nl> ppp BlockEnumGenerator . java <nl> - private CodeBlock . Builder staticBlock = CodeBlock . builder() ; <nl> + private final CodeBlock . Builder staticBlock = CodeBlock . builder() ; <nl> - } catch (IOException e) { <nl> - throw e ; <nl> - } catch (IOException e) { <nl> - throw e ; <nl> mmm ItemEnumGenerator . java <nl> ppp ItemEnumGenerator . java <nl> - } catch (IOException e) { <nl> - throw e ; <nl> mmm CommandSender . java <nl> ppp CommandSender . java <nl> - ((Player) this) . sendMessage((JsonMessage) text) ; <nl> <nl>,prefer nullable over optional,0
"mmm SparkIntegrationTest . java <nl> ppp SparkIntegrationTest . java <nl> + sparkInterpreterSetting . setProperty(""zeppelin . spark . run . asLoginUser"", ""false"") ; <nl> + sparkInterpreterSetting . setProperty(""zeppelin . spark . run . asLoginUser"", ""false"") ; <nl> mmm SparkInterpreterLauncher . java <nl> ppp SparkInterpreterLauncher . java <nl> + if (isYarnMode()) { <nl> + boolean runAsLoginUser = Boolean . parseBoolean(context <nl> +  . getProperties() <nl> +  . getProperty(""zeppelin . spark . run . asLoginUser"", ""true"")) ; <nl> + String userName = context . getUserName() ; <nl> + if (runAsLoginUser && !""anonymous"" . equals(userName)) { <nl> + env . put(""HADOOP_USER_NAME"", <nl>",run spark job a the login user in yarn mode,0
"mmm MclStorageManager . java <nl> ppp MclStorageManager . java <nl> - Hashtable<String, List<String>> details = <nl> - new Hashtable<String, List<String>>() ; <nl> + Map<String, List<String>> details = null ; <nl> - for (Element e : detailsNodes) <nl> + if (detailsNodes . size() > 0) <nl> - String name = e . getAttribute(DETAIL_NAME_ATTR_NAME) ; <nl> - String value = e . getAttribute(DETAIL_VALUE_ATTR_NAME) ; <nl> - List<String> detailsObj = details . get(name) ; <nl> - if (detailsObj == null) <nl> + details = new Hashtable<String, List<String>>() ; <nl> + for (Element e : detailsNodes) <nl> - List<String> ds = new ArrayList<String>() <nl>",reduce the shallow and retain runtime size of metacontactimpl because it be not unlikely to have hundred of instance,1
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> + public String getOSSBucketName() { <nl> + return getString(ConfVars . ZEPPELIN_NOTEBOOK_OSS_BUCKET) ; <nl> + } <nl> + public String getOSSEndpoint() { <nl> + return getString(ConfVars . ZEPPELIN_NOTEBOOK_OSS_ENDPOINT) ; <nl> + } <nl> + public String getOSSAccessKeyId() { <nl> + return getString(ConfVars . ZEPPELIN_NOTEBOOK_OSS_ACCESSKEYID) ; <nl> + } <nl> + public String getOSSAccessKeySecret() { <nl> + return getString(ConfVars . ZEPPELIN_NOTEBOOK_OSS_ACCESSKEYSECRET) ; <nl> + } <nl> + ZEPPELIN_NOTEBOOK_OSS_BUCKET(""zeppelin . notebook . oss . bucket"", ""zeppelin""), <nl> + ZEPPELIN_NOTEBOOK_OSS_ENDPOINT(""zeppelin . notebook . oss . endpoint"", ""http://oss-cn-hangzhou . aliyuncs . com""), <nl> + <nl>",support ossnotebookrepo of aliyun,0
"mmm FlinkBatchSqlInterpreter . java <nl> ppp FlinkBatchSqlInterpreter . java <nl> - import com . google . common . collect . Lists ; <nl> + import org . apache . flink . table . api . config . ExecutionConfigOptions ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> + @Override <nl> + protected boolean isBatch() { <nl> + return true ; <nl> + } <nl> - this . tbenv = flinkInterpreter . getBatchTableEnvironment() ; <nl> + this . tbenv = flinkInterpreter . getJavaBatchTableEnvironment(""blink"") ; <nl> + this . tbenv_2 <nl>",support flink 1.10,0
"mmm RemoteInterpreterServer . java <nl> ppp RemoteInterpreterServer . java <nl> - logger . info(""Shutting down .  .  . "") ; <nl> - deleteClusterMeta() ; <nl> + Thread shutDownThread = new Thread(() -> { <nl> + logger . info(""Shutting down .  .  . "") ; <nl> + deleteClusterMeta() ; <nl> - if (interpreterGroup != null) { <nl> - synchronized (interpreterGroup) { <nl> - for (List<Interpreter> session : interpreterGroup . values()) { <nl> - for (Interpreter interpreter : session) { <nl> - try { <nl> - interpreter . close() ; <nl> - } catch (InterpreterException e) { <nl>",remove annoy exception when shut down interpreter,0
"mmm CommandRegistry . java <nl> ppp CommandRegistry . java <nl> + import schemacrawler . tools . text . operation . Operation ; <nl> + import schemacrawler . tools . text . schema . SchemaTextDetailType ; <nl> - final List<CommandProvider> commandProviders = new ArrayList<CommandProvider>(Arrays <nl> -  . asList(new SchemaExecutableCommandProvider(""list""), <nl> - new SchemaExecutableCommandProvider(""brief""), <nl> - new SchemaExecutableCommandProvider(""schema""), <nl> - new SchemaExecutableCommandProvider(""details""), <nl> - new ExecutableCommandProvider(""count"", <nl> - ""schemacrawler . tools . text . operation . OperationExecutable""), <nl> - new ExecutableCommandProvider(""dump"", <nl> - ""schemacrawler . tools . text . operation . OperationExecutable""), <nl> - new ExecutableCommandProvider(""script"", <nl> + final List<CommandProvider> <nl>","add new quickdump command , which be quick because it can be use with -infolevel=minimum , though row order be not guarantee",1
mmm JFreeplaneCustomizableFileChooser . java <nl> ppp JFreeplaneCustomizableFileChooser . java <nl> + import org . freeplane . core . util . LogUtils ; <nl> - return ; <nl> + return ; <nl> + catch(IllegalAccessError e) { <nl> + LogUtils . severe(e) ; <nl> + } <nl>,catch illegalaccesserror because it seem to happen sometimes,1
mmm FilterComposerDialog . java <nl> ppp FilterComposerDialog . java <nl> - class FilterComposerDialog extends JDialog implements IMapSelectionListener {,refactor filtercomposerdialog so that it can be use not only for filtertoolbar model,1
"mmm StatusSelectorBox . java <nl> ppp StatusSelectorBox . java <nl> + import net . java . sip . communicator . impl . gui . main . customcontrols . SIPCommSelectorBox ; <nl> - public class StatusSelectorBox extends JLabel <nl> - implements MouseListener { <nl> - private JPopupMenu popup ; <nl> - private Map itemsMap ; <nl> + public class StatusSelectorBox extends SIPCommSelectorBox{ <nl> - private Image backgroundImage = ImageLoader <nl> -  . getImage(ImageLoader . STATUS_SELECTOR_BOX) ; <nl> + private Map itemsMap ; <nl> + super() ; <nl> - this . setPreferredSize(new Dimension( <nl> - this . backgroundImage . getWidth(this), <nl>","statusselectorbox component generalize in sipcommselectorbox , in order to be use a a common control in other place in the gui",1
"mmm MTextController . java <nl> ppp MTextController . java <nl> - final KeyStroke keyStroke = KeyStroke . getKeyStrokeForEvent(e) ; <nl> - final IUserInputListenerFactory userInputListenerFactory = modeController . getUserInputListenerFactory() ; <nl> - final MenuBuilder menuBuilder = userInputListenerFactory . getMenuBuilder() ; <nl> - final Map<KeyStroke, Node> acceleratorMap = menuBuilder . getAcceleratorMap() ; <nl> - return acceleratorMap . containsKey(keyStroke) ; <nl> + if(! editLong){ <nl> + final String editLongKeyStrokeProperty = ResourceController . getResourceController() . getProperty(""acceleratorForMindMap/$EditLongAction$0"", null) ; <nl> + if(editLongKeyStrokeProperty != null){ <nl> + final KeyStroke editLongKeyStroke = UITools . getKeyStroke(editLongKeyStrokeProperty) ; <nl> + if(editLongKeyStroke != null){ <nl> + final KeyStroke keyStroke <nl>","limit action to editlong because of collision with enter , tab , insert",1
"mmm TriggerContextFactory . java <nl> ppp TriggerContextFactory . java <nl> - class TriggerContextFactory<W extends BoundedWindow> { <nl> + public class TriggerContextFactory<W extends BoundedWindow> { <nl> - TriggerContextFactory(WindowingStrategy<?, W> windowingStrategy, StateInternals stateInternals, <nl> - ActiveWindowSet<W> activeWindows) { <nl> + public TriggerContextFactory(WindowingStrategy<?, W> windowingStrategy, <nl> + StateInternals stateInternals, ActiveWindowSet<W> activeWindows) { <nl> mmm AfterAllTest . java <nl> ppp AfterAllTest . java <nl> + import com . google . cloud . dataflow . sdk . util . ReduceFnTester ; <nl> - import com . google . cloud . dataflow . sdk . util . TriggerTester ; <nl> - private TriggerTester<Integer, Iterable<Integer>, IntervalWindow> <nl>",rename triggertester to reducefntester,0
"mmm ExtendedTypeFactory . java <nl> ppp ExtendedTypeFactory . java <nl> - default: throw new IllegalArgumentException(""Illegal type "" + typeElement) ; <nl> + default: { <nl> + if (typeElement . getKind() . name() . equals(""RECORD"")) { <nl> + return createClassType(declaredType, typeElement, p) ; <nl> + } <nl> + throw new IllegalArgumentException(""Illegal type "" typeElement) ; <nl> + } <nl>",add record support to extendedtypefactory.java,0
"mmm SCScrollPane . java <nl> ppp SCScrollPane . java <nl> - private BufferedImage bgImage ; <nl> - private TexturePaint texture ; <nl> - private boolean isTextureBackground ; <nl> - boolean isWindowImageBgEnabled ; <nl> - super() ; <nl> - String windowImageBackgroundProperty <nl> - = ""impl . gui . IS_WINDOW_BACKGROUND_ENABLED"" ; <nl> - isWindowImageBgEnabled = new Boolean(GuiActivator . getResources() <nl> -  . getSettingsString(windowImageBackgroundProperty)) . booleanValue() ; <nl> - if (isWindowImageBgEnabled) <nl> - this . initBackgroundImage() ; <nl> - } <nl> - private void initBackgroundImage() <nl> - { <nl> - isTextureBackground = new Boolean(GuiActivator . getResources() <nl> -  . getSettingsString(""impl <nl>","optimizes sipcommframe and scscrollpane wrt memory consumption , garbage creation and , hopefully , execution speed because they 're frequently use",1
"mmm AudioMediaStreamImpl . java <nl> ppp AudioMediaStreamImpl . java <nl> - getCsrcEngine() . setCsrcAudioLevelAudioLevelExtensionID(extensionID) ; <nl> + { <nl> + getCsrcEngine() . setCsrcAudioLevelAudioLevelExtensionID( <nl> + extensionID, rtpExtension . getDirection()) ; <nl> + } <nl> mmm CsrcTransformEngine . java <nl> ppp CsrcTransformEngine . java <nl> + import net . java . sip . communicator . service . neomedia . * ; <nl> + private MediaDirection audioLevelDirection = MediaDirection . INACTIVE ; <nl> - if (csrcAudioLevelExtID > 0) <nl> + if (csrcAudioLevelExtID > 0 && audioLevelDirection . allowsReceiving()) <nl> + && audioLevelDirection . allowsSending() <nl> - public void setCsrcAudioLevelAudioLevelExtensionID(byte extID) <nl> <nl>",add equal and hashcode method to rtpextension so that they could properly be use a key in a map,1
"mmm NodeProxy . java <nl> ppp NodeProxy . java <nl> - public void moveTo(final Proxy . Node parentNode) { <nl> - final NodeProxy parentNodeProxy = (NodeProxy) parentNode ; <nl> - final MMapController mapController = (MMapController) getModeController() . getMapController() ; <nl> - mapController . moveNodeAsChild(getDelegate(), parentNodeProxy . getDelegate(), getDelegate() . isLeft(), false) ; <nl> + public void moveTo(final Proxy . Node parentNodeProxy) { <nl> + final NodeModel parentNode = ((NodeProxy) parentNodeProxy) . getDelegate() ; <nl> + final NodeModel movedNode = getDelegate() ; <nl> + final MMapController mapController = (MMapController) getModeController() . getMapController() ; <nl> + mapController . moveNodeAsChild(movedNode, parentNode, movedNode <nl>",bug fix for change side when node be move by script,0
"mmm EmbeddedSolrServer . java <nl> ppp EmbeddedSolrServer . java <nl> - import com . google . common . base . Strings ; <nl> - if (Strings . isNullOrEmpty(coreName)) <nl> - throw new SolrException(SolrException . ErrorCode . SERVER_ERROR, ""Core name cannot be empty"") ; <nl> - if (coreName == null) <nl> + if (coreName == null) { <nl> + if (coreName == null) { <nl> + throw new SolrException(SolrException . ErrorCode . BAD_REQUEST, <nl> + ""No core specified on request and no default core has been set . "") ; <nl> + } <nl> + } <nl> mmm CoreContainer . <nl>",embeddedsolrserver corename optional,0
"mmm JupyterUtil . java <nl> ppp JupyterUtil . java <nl> - import java . util . UUID ; <nl> + private static Gson Pretty_Gson = new GsonBuilder() . setPrettyPrinting() . create() ; <nl> - return nbformat . toString() ; <nl> + return Pretty_Gson . toJson(nbformat) ; <nl> mmm NotebookServer . java <nl> ppp NotebookServer . java <nl> - String note = gson . toJson(fromMessage . get(""note"")) ; <nl> - Message resp = new Message(OP . CONVERT_NOTE_NBFORMAT) <nl> -  . put(""nbformat"", new JupyterUtil() . getNbformat(note)) <nl> -  . put(""name"", fromMessage . get(""name"")) ; <nl> - conn . send(serializeMessage(resp)) <nl>",export note json be not pretty print,0
"mmm HibernateHandler . java <nl> ppp HibernateHandler . java <nl> - org . hibernate . query . Query unwrappedQuery = query . unwrap(org . hibernate . query . Query . class) ; <nl> + org . hibernate . query . Query<?> unwrappedQuery = query . unwrap(org . hibernate . query . Query . class) ; <nl> + @SuppressWarnings({""unchecked"", ""rawtypes""}) <nl> - @SuppressWarnings(""deprecation"") <nl> mmm AbstractHibernateQuery . java <nl> ppp AbstractHibernateQuery . java <nl> - import org . hibernate . Query ; <nl> + import org . hibernate . query . Query ; <nl> mmm DefaultSessionHolder . java <nl> ppp <nl>",remove deprecate hibernate api usage,0
mmm Neo4jConnectionManager . java <nl> ppp Neo4jConnectionManager . java <nl> - import org . neo4j . driver . v1 . AuthToken ; <nl> - import org . neo4j . driver . v1 . AuthTokens ; <nl> - import org . neo4j . driver . v1 . Config ; <nl> - import org . neo4j . driver . v1 . Driver ; <nl> - import org . neo4j . driver . v1 . GraphDatabase ; <nl> - import org . neo4j . driver . v1 . Session ; <nl> - import org . neo4j . driver . v1 . StatementResult <nl>,update neo4j driver,0
"mmm TestOperationSetBasicTelephonySipImpl . java <nl> ppp TestOperationSetBasicTelephonySipImpl . java <nl> - stateCollectorForPp1 . waitForEvent(10000) ; <nl> - stateCollectorForPp2 . waitForEvent(10000) ; <nl> + stateCollectorForPp1 . waitForEvent(10000, true) ; <nl> + stateCollectorForPp2 . waitForEvent(10000, true) ; <nl> - stateCollectorForPp1 . waitForEvent(10000) ; <nl> - stateCollectorForPp2 . waitForEvent(10000) ; <nl> + stateCollectorForPp1 . waitForEvent(10000, true) ; <nl> + stateCollectorForPp2 . waitForEvent(10000, true) ; <nl> - this . collectedEvents . add(event) ; <nl> + this . collectedEvents . add(event) ; <nl> - this . collectedEvents . add(event) ; <nl> + this . collectedEvents . add(event) ; <nl>","do not insist on get state change event for call participant when they get create , because we might have miss them",1
mmm NodeUpdateChangeListener . java <nl> ppp NodeUpdateChangeListener . java <nl> - if (NodeModel . NODE_TEXT . equals(property) || NodeAttributeTableModel . class . equals(property) <nl> - || NodeModel . NOTE_TEXT . equals(property)) { <nl> + if (NodeModel . NODE_TEXT . equals(property)) { <nl>,only node text change be relevant,0
"mmm Scanner . java <nl> ppp Scanner . java <nl> + private static final String ELEM_SCANNER = ""scanner"" ; <nl> + private static final String ATTRIB_LOCALE = ""locale"" ; <nl> + private static final String ATTRIB_DEFAULT = ""default"" ; <nl> + private static final String ELEM_CHECKFIRSTCHAR = ""checkfirstchar"" ; <nl> + private static final String ATTRIB_DISABLED = ""disabled"" ; <nl> + private static final String ATTRIB_CHARS = ""chars"" ; <nl> - throw new IllegalArgumentException(""illegal "") ; <nl> + throw new IllegalArgumentException(""attribute "" ATTRIB_LOCALE "" is mandatory and may not be empty"") ; <nl> - final XMLElement xmlElement = new <nl>",fix default setting of parser,0
"mmm AbstractTextTransformer . java <nl> ppp AbstractTextTransformer . java <nl> - import java . awt . event . KeyEvent ; <nl> - import org . freeplane . features . common . map . NodeModel ; <nl> - import org . freeplane . features . mindmapmode . text . EditNodeBase ; <nl> - import org . freeplane . features . mindmapmode . text . EditNodeBase . IEditControl ; <nl> - public EditNodeBase createEditNodeBase(NodeModel nodeModel, String text, IEditControl editControl, <nl> - KeyEvent firstEvent, boolean isNewNode, boolean editLong) { <nl> - return null ; <nl> - } <nl> mmm FormulaTextTransformer . java <nl>",bug fix for open formula editor,0
"mmm Main . java <nl> ppp Main . java <nl> + import fr . themode . minestom . utils . time . TimeUnit ; <nl> + import fr . themode . minestom . utils . time . UpdateOption ; <nl> + MinecraftServer . getBenchmarkManager() . enable(new UpdateOption(2500, TimeUnit . MILLISECOND)) ; <nl> mmm PlayerInit . java <nl> ppp PlayerInit . java <nl> + import fr . themode . demo . entity . ChickenCreature ; <nl> + import fr . themode . minestom . benchmark . BenchmarkManager ; <nl> + import fr . themode . minestom . benchmark . ThreadResult <nl>",update + add benchmark tool,0
mmm Dialect . java <nl> ppp Dialect . java <nl> - import java . sql . Types ; <nl> mmm Projection . java <nl> ppp Projection . java <nl>  <nl> mmm SumOver . java <nl> ppp SumOver . java <nl>  <nl>,add some todo comment,0
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> + public String getPemKeyFile() { <nl> + return getString(ConfVars . ZEPPELIN_SSL_PEM_KEY) ; <nl> + } <nl> + public String getPemKeyPassword() { <nl> + return getString(ConfVars . ZEPPELIN_SSL_PEM_KEY_PASSWORD) ; <nl> + } <nl> + public String getPemCertFile() { <nl> + return getString(ConfVars . ZEPPELIN_SSL_PEM_CERT) ; <nl> + } <nl> + public String getPemCAFile() { <nl> + return getString(ConfVars . ZEPPELIN_SSL_PEM_CA) ; <nl> + } <nl> + ZEPPELIN_SSL_PEM_KEY(""zeppelin . ssl . pem . key"", null), <nl> + ZEPPELIN_SSL_PEM_KEY_PASSWORD(""zeppelin . ssl . pem . key . password"", """"), <nl> + ZEPPELIN_SSL_PEM_CERT(""zeppelin . <nl>",tl create keystores with pem file,0
mmm ConnectionManager . java <nl> ppp ConnectionManager . java <nl> - while ((waitingPlayer = waitingPlayers . remove()) != null) { <nl> + while ((waitingPlayer = waitingPlayers . poll()) != null) { <nl>,change remove to poll,0
"mmm AbstractDateTimeType . java <nl> ppp AbstractDateTimeType . java <nl> + protected static final DateTimeFormatter dateTimeOffsetFormatter = DateTimeFormatter . ofPattern(""yyyy-MM-dd HH:mm:ss xxx"") ; <nl> + protected static final DateTimeFormatter dateTimeZoneFormatter = DateTimeFormatter . ofPattern(""yyyy-MM-dd HH:mm:ss VV"") ; <nl> + protected static final DateTimeFormatter timeOffsetFormatter = DateTimeFormatter . ofPattern(""HH:mm:ss xxx"") ; <nl> mmm JSR310InstantType . java <nl> ppp JSR310InstantType . java <nl> - import java . time . LocalDateTime ; <nl> - import java . time . ZoneId ; <nl> - return dateTimeFormatter . format(LocalDateTime . ofInstant(value, ZoneId . of(""Z""))) ; <nl> + return dateTimeFormatter . format(Timestamp . from(value) . <nl>",more improvement base on the actual jdbc driver,0
mmm BoundedReadFromUnboundedSourceTest . java <nl> ppp BoundedReadFromUnboundedSourceTest . java <nl> - import com . google . cloud . dataflow . sdk . runners . dataflow . CountingSource ; <nl> + import com . google . cloud . dataflow . sdk . runners . dataflow . TestCountingSource ; <nl> - CountingSource . setFinalizeTracker(finalizeTracker) ; <nl> + TestCountingSource . setFinalizeTracker(finalizeTracker) ; <nl> - CountingSource source = new CountingSource(Integer . MAX_VALUE) ; <nl> + TestCountingSource source = new TestCountingSource(Integer . MAX_VALUE) ; <nl> mmm DataflowPipelineRunnerTest . java <nl> ppp DataflowPipelineRunnerTest . java <nl> - import com . google . cloud . dataflow <nl>,rename to testcountingsource,0
deleted file <nl> mmm ContactItem . java <nl> - package net . java . sip . communicator . impl . gui . main ; <nl> - import java . awt . Image ; <nl> - import javax . swing . Icon ; <nl> - public class ContactItem { <nl> - private String 		nickname ; <nl> - private Image 		photo ; <nl> - private String[] 	protocolList ; <nl> - private String 		status ; <nl> - private Icon		userIcon ; <nl> - public ContactItem(String nickname){ <nl> - this . nickname = nickname ; <nl> - } <nl> - public String getNickName() { <nl>,"remove , because of the integration of metacontactlistservice",1
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> + LOGGER . debug(""Trying relogin from keytab"") ; <nl> + LOGGER . debug(""Trying relogin from ticket cache"") ; <nl> + LOGGER . debug(""Neither Keytab nor ticket based login .  "" + <nl> + ""runKerberosLogin() returning false"") ; <nl> + LOGGER . debug(""Calling createSecureConfiguration() ; this will do "" + <nl> + ""loginUserFromKeytab() if required"") ; <nl> + LOGGER . debug(""createSecureConfiguration() returned"") ; <nl> mmm KerberosInterpreter . java <nl> ppp KerberosInterpreter . java <nl> - private static Logger logger = LoggerFactory . getLogger(KerberosInterpreter . class) ; <nl> + private <nl>",improve kerberos debug message,0
"mmm IUndoHandler . java <nl> ppp IUndoHandler . java <nl> + public int getTransactionLevel() ; <nl> mmm UndoHandler . java <nl> ppp UndoHandler . java <nl> + public int getTransactionLevel() { <nl> + return transactionList . size() ; <nl> + } <nl> mmm ControllerProxy . java <nl> ppp ControllerProxy . java <nl> + import org . freeplane . core . ui . components . UITools ; <nl> - commitTransaction(Controller . getCurrentController() . getMap()) ; <nl> + final MapModel oldMap = Controller . getCurrentController() . getMap() ; <nl> - startTransaction(newMap) ; <nl> + restartTransaction(oldMap, newMap) ; <nl> - commitTransaction(Controller . <nl>",attempt to fix java.util.nosuchelementexception,0
"mmm JavaPluginAction . java <nl> ppp JavaPluginAction . java <nl> + @SuppressWarnings(""unchecked"") <nl> - run . getConventionMapping() . map(""jvmArgs"", () -> { <nl> + run . setJvmArgs(project . provider(() -> { <nl> - return project . property(""applicationDefaultJvmArgs"") ; <nl> + return (List<String>) project . property(""applicationDefaultJvmArgs"") ; <nl> - }) ; <nl> - run . conventionMapping(""main"", <nl> - new MainClassConvention(project, run::getClasspath)) ; <nl> + })) ; <nl> + run . setMain( <nl> + project . provider(new MainClassConvention(project, run::getClasspath))) ; <nl> mmm MainClassConvention . java <nl> ppp MainClassConvention . java <nl> - final class MainClassConvention implements Callable<Object> { <nl> + final <nl>",rework bootrun so that it do not subclass javaexec,1
mmm PlayerInventory . java <nl> ppp PlayerInventory . java <nl> - player . syncEquipment(EntityEquipmentPacket . Slot . MAIN_HAND) ; <nl> - player . syncEquipment(EntityEquipmentPacket . Slot . OFF_HAND) ; <nl> - player . syncEquipment(EntityEquipmentPacket . Slot . HELMET) ; <nl> - player . syncEquipment(EntityEquipmentPacket . Slot . CHESTPLATE) ; <nl> - player . syncEquipment(EntityEquipmentPacket . Slot . LEGGINGS) ; <nl> - player . syncEquipment(EntityEquipmentPacket . Slot . BOOTS) ; <nl>,remove useless equipment sync,0
"mmm FlinkIntegrationTest . java <nl> ppp FlinkIntegrationTest . java <nl> - import org . apache . zeppelin . interpreter . ExecutionContextBuilder ; <nl> + import org . apache . zeppelin . interpreter . ExecutionContext ; <nl> - Interpreter flinkInterpreter = interpreterFactory . getInterpreter(""flink"", new ExecutionContextBuilder() . setUser(""user1"") . setNoteId(""note1"") . setDefaultInterpreterGroup(""flink"") . createExecutionContext()) ; <nl> + Interpreter flinkInterpreter = interpreterFactory . getInterpreter(""flink"", new ExecutionContext(""user1"", ""note1"", ""flink"")) ; <nl> - Interpreter flinkCmdInterpreter = interpreterFactory . getInterpreter(""flink-cmd"", new ExecutionContextBuilder() . setUser(""user1"") . setNoteId(""note1"") . setDefaultInterpreterGroup(""flink"") . createExecutionContext()) ; <nl> + Interpreter flinkCmdInterpreter = interpreterFactory . getInterpreter(""flink-cmd"", new ExecutionContext(""user1"", ""note1"", ""flink"")) ; <nl>",refactoring of executioncontext,0
deleted file <nl> mmm BaseConfigOptions . java <nl> - package schemacrawler . schemacrawler ; <nl> - public abstract class BaseConfigOptions <nl> - implements Options <nl> - { <nl> - private static final long serialVersionUID = -8133661515343358712L ; <nl> - private final Config config ; <nl> - protected BaseConfigOptions() <nl> - { <nl> - config = new Config() ; <nl> - } <nl> - public Config toConfig() <nl> - { <nl> - return new Config(config) ; <nl> - } <nl> - @Override <nl> - public String toString() <nl> - { <nl> - return config . toString() ; <nl> - } <nl>,"`` config '' base option should use a builder pattern , so that we can separate logic for convert option to and from a map",1
"mmm IPySparkInterpreterTest . java <nl> ppp IPySparkInterpreterTest . java <nl> + result = interpreter . interpret(""df . explain()"", context) ; <nl> + assertEquals(InterpreterResult . Code . SUCCESS, result . code()) ; <nl>",add miss java_import 's to pyspark bootstrapping,0
"mmm Data . java <nl> ppp Data . java <nl>  <nl> mmm Player . java <nl> ppp Player . java <nl> - import java . io . File ; <nl> - instanceContainer = Main . getInstanceManager() . createInstanceContainer(new File(""C:\\Users\\themo\\OneDrive\\Bureau\\Minestom data"")) ; <nl> + instanceContainer = Main . getInstanceManager() . createInstanceContainer() ; <nl> - getInstance() . saveToFolder(() -> { <nl> - sendMessage(""SAVED"") ; <nl> - }) ; <nl> - sendMessage(""DATA NULL"") ; <nl> + sendMessage(""DATA IS NULL"") ; <nl> - sendMessage(""BLOCK DATA: "" + data . get(""x"")) ; <nl> + sendMessage(""BLOCK DATA: "" data . get(""value"")) ; <nl> mmm <nl>",wip block update,0
mmm JSR310LocalDateTimeTypeTest . java <nl> ppp JSR310LocalDateTimeTypeTest . java <nl> - Timestamp ts = Timestamp . from(value . toInstant(ZoneOffset . UTC)) ; <nl> + Timestamp ts = new Timestamp(value . toInstant(ZoneOffset . UTC) . toEpochMilli()) ; <nl> mmm JSR310OffsetDateTimeTypeTest . java <nl> ppp JSR310OffsetDateTimeTypeTest . java <nl> - Timestamp ts = Timestamp . from(value . toInstant()) ; <nl> + Timestamp ts = new Timestamp(value . toInstant() . toEpochMilli()) ; <nl> mmm JSR310ZonedDateTimeTypeTest . java <nl> ppp JSR310ZonedDateTimeTypeTest . java <nl> - Timestamp ts = Timestamp . from(value . toInstant()) ; <nl> + Timestamp ts = new Timestamp(value . toInstant() <nl>,ignore nanos for joda,0
"mmm FilesStream . java <nl> ppp FilesStream . java <nl> - public class FilesStream extends TupleStream implements Expressible { <nl> + public class CatStream extends TupleStream implements Expressible { <nl> - public FilesStream(StreamExpression expression, StreamFactory factory) throws IOException { <nl> + public CatStream(StreamExpression expression, StreamFactory factory) throws IOException { <nl> - public FilesStream(String commaDelimitedFilepaths, int maxLines) { <nl> + public CatStream(String commaDelimitedFilepaths, int maxLines) { <nl> mmm SolrDefaultStreamFactory . java <nl> ppp SolrDefaultStreamFactory . java <nl> - this . withFunctionName(""files"", FilesStream . class) ; <nl> + this . withFunctionName(""cat"", CatStream . class) ; <nl> mmm StreamExpressionTest . java <nl> <nl>",rename filesstream - > catstream,0
mmm AfterDelayFromFirstElement . java <nl> ppp AfterDelayFromFirstElement . java <nl> - import com . google . cloud . dataflow . sdk . util . state . MergingStateContext ; <nl> - import com . google . cloud . dataflow . sdk . util . state . StateContext ; <nl> + import com . google . cloud . dataflow . sdk . util . state . MergingStateAccessor ; <nl> + import com . google . cloud . dataflow . sdk . util . state . StateAccessor ; <nl> - public void prefetchOnElement(StateContext<?> state) { <nl> + public void prefetchOnElement(StateAccessor<?> state) { <nl>,rename statecontext to stateaccessor,0
"mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> + private static final String SPARK_CONTAINER_IMAGE = ""zeppelin . k8s . spark . container . image"" ; <nl> - options . append("" --conf spark . kubernetes . container . image="") . append(sparkImage) ; <nl> + String sparkContainerImage = properties . containsKey(SPARK_CONTAINER_IMAGE) ? properties . getProperty(SPARK_CONTAINER_IMAGE) : sparkImage ; <nl> + options . append("" --conf spark . kubernetes . container . image="") . append(sparkContainerImage) ; <nl>",can not specify the spark image from the interpreter setting,0
"mmm SchemaCrawlerMain . java <nl> ppp SchemaCrawlerMain . java <nl> + import schemacrawler . tools . options . BundledDriverOptions ; <nl> - main(args, new HelpOptions(""""), null) ; <nl> + main(args, new BundledDriverOptions() <nl> + { <nl> + private static final long serialVersionUID = 1942688259236688174L ; <nl> + @Override <nl> + public Config getConfig() <nl> + { <nl> + return null ; <nl> + } <nl> + @Override <nl> + public HelpOptions getHelpOptions() <nl> + { <nl> + return new HelpOptions() ; <nl> + } <nl> + }) ; <nl> - final HelpOptions helpOptions, <nl> - final Config config) <nl> <nl>",create bundleddriveroptions so that database specific configuration can be invoke programatically,1
"mmm ExportOracleTest . java <nl> ppp ExportOracleTest . java <nl> + import java . util . TimeZone ; <nl> - Connections . initOracle() ; <nl> + TimeZone tz = TimeZone . getDefault() ; <nl> + try { <nl> + TimeZone . setDefault(TimeZone . getTimeZone(""UTC"")) ; <nl> + Connections . initOracle() ; <nl> + } finally { <nl> + TimeZone . setDefault(tz) ; <nl> + } <nl>",attempt to work around ora-01882 in exportoracletest,0
"mmm LoginRestApi . java <nl> ppp LoginRestApi . java <nl> - String name = realm . getClass() . getName() ; <nl> - LOG . debug(""RealmClass . getName: {}"", name) ; <nl> - if (name . equals(""org . apache . zeppelin . realm . jwt . KnoxJwtRealm"")) { <nl> + if (realm instanceof KnoxJwtRealm) { <nl> - String name = realm . getClass() . getName() ; <nl> - LOG . debug(""RealmClass . getName: {}"", name) ; <nl> - if (name . equals(""org . apache . zeppelin . realm . jwt . KnoxJwtRealm"")) { <nl> + if (realm instanceof KnoxJwtRealm) { <nl>",check the instance type rather than the class name,0
"mmm MFileManager . java <nl> ppp MFileManager . java <nl> - chooser . setDialogTitle(TextUtils . getText(""SaveAsAction . text"")) ; <nl> + chooser . setDialogTitle(TextUtils . removeMnemonic(TextUtils . getText(""SaveAsAction . text""))) ; <nl>",do not show ' & ' in save a. dialog title,0
"mmm JupyterKernelClient . java <nl> ppp JupyterKernelClient . java <nl> - interpreterOutput . getInterpreterOutput() . write(ExceptionUtils . getStackTrace(throwable)) ; <nl> + interpreterOutput . getInterpreterOutput() . write(""\n%text "" + <nl> + ExceptionUtils . getStackTrace(throwable)) ; <nl>",add output type in jupyterkernelclient 's onerror,0
mmm FirstWizardPage . java <nl> ppp FirstWizardPage . java <nl> - registration . setPreferredTransport(transportCombo . getSelectedItem() <nl> -  . toString()) ; <nl> + Object selectedItem = transportCombo . getSelectedItem() ; <nl> + if(selectedItem == null) <nl> + selectedItem = transportCombo . getItemAt(0) ; <nl> + registration . setPreferredTransport(selectedItem . toString()) ; <nl>,fix a null pointer exception that occur because of null transport when modify sip account,1
"mmm ClickHouseResultSet . java <nl> ppp ClickHouseResultSet . java <nl> + import java . math . RoundingMode ; <nl> - private final Statement statement ; <nl> + private Statement statement ; <nl> - return result . setScale(scale, BigDecimal . ROUND_HALF_UP) ; <nl> + return result . setScale(scale, RoundingMode . HALF_UP) ; <nl>",replace code with bigdecimal.round_half_up to roundmode because round_half_up be deprecate,1
"mmm MainView . java <nl> ppp MainView . java <nl> - private int getDraggingAreaWidth() { <nl> + int getDraggingAreaWidth() { <nl> mmm NodeView . java <nl> ppp NodeView . java <nl> - public int getZoomedFoldingSymbolHalfWidth() { <nl> - final int preferredFoldingSymbolHalfWidth = (int) ((ResourceController . getResourceController() . getIntProperty(""foldingsymbolwidth"", 10) * map . getZoom()) / 2) ; <nl> - return preferredFoldingSymbolHalfWidth ; <nl> - } <nl> + public int getZoomedFoldingSymbolHalfWidth() { <nl> + final int preferredFoldingSymbolHalfWidth = (int) ((ResourceController . getResourceController() . getIntProperty(""foldingsymbolwidth"", 10) * map . getZoom()) / 2) ; <nl> + return preferredFoldingSymbolHalfWidth ; <nl> + } <nl> <nl>",increase horizontal distance between child so that handle can fit in,1
mmm FlinkBatchSqlInterpreter . java <nl> ppp FlinkBatchSqlInterpreter . java <nl> - public class FlinkBatchSqlInterpreter extends FlinkSqlInterrpeter { <nl> + public class FlinkBatchSqlInterpreter extends FlinkSqlInterpreter { <nl> mmm FlinkSqlInterrpeter . java <nl> ppp FlinkSqlInterrpeter . java <nl> - import org . apache . flink . configuration . Configuration ; <nl> - public abstract class FlinkSqlInterrpeter extends AbstractInterpreter { <nl> + public abstract class FlinkSqlInterpreter extends AbstractInterpreter { <nl> - protected static final Logger LOGGER = LoggerFactory . getLogger(FlinkSqlInterrpeter . class) ; <nl> + protected static final Logger LOGGER = LoggerFactory . getLogger(FlinkSqlInterpreter . class) ; <nl> - public FlinkSqlInterrpeter(Properties properties) <nl>,change the wrong class name,0
"mmm NettyServer . java <nl> ppp NettyServer . java <nl> + import io . netty . handler . traffic . ChannelTrafficShapingHandler ; <nl> + private long writeLimit ; <nl> + private long readLimit ; <nl> + ChannelTrafficShapingHandler channelTrafficShapingHandler = <nl> + new ChannelTrafficShapingHandler(writeLimit, readLimit, 200) ; <nl> + pipeline . addLast(""traffic-limiter"", channelTrafficShapingHandler) ; <nl> + public long getWriteLimit() { <nl> + return writeLimit ; <nl> + } <nl> + public void setWriteLimit(long writeLimit) { <nl> + this . writeLimit = writeLimit ; <nl> + } <nl> + public long getReadLimit() { <nl> + return readLimit ; <nl> + } <nl>",add write and read limit,0
mmm NodeView . java <nl> ppp NodeView . java <nl> - if(firstGroupNodeFound && ! nodeViewSibling . isSummary()){,bug fix in painting of summary node bracket,0
mmm HighFrequencyDictionary . java <nl> ppp HighFrequencyDictionary . java <nl> + import org . apache . lucene . search . suggest . InputIterator ; <nl> - final class HighFrequencyIterator implements TermFreqPayloadIterator { <nl> + final class HighFrequencyIterator implements InputIterator { <nl> mmm BufferingTermFreqPayloadIteratorWrapper . java <nl> ppp BufferingTermFreqPayloadIteratorWrapper . java <nl> - import org . apache . lucene . search . spell . TermFreqPayloadIterator ; <nl> - public class BufferingTermFreqPayloadIteratorWrapper implements TermFreqPayloadIterator { <nl> + public class BufferedInputIterator implements InputIterator { <nl> - public BufferingTermFreqPayloadIteratorWrapper(TermFreqPayloadIterator source) throws IOException { <nl> + public BufferedInputIterator(InputIterator source) throws IOException { <nl> mmm <nl>,rename termfreqpayloaditerator - > inputiterator,0
mmm FirstGroupNode . java <nl> ppp FirstGroupNode . java <nl> - import static org . freeplane . features . map . FirstGroupNode . FirstGroupNodeFlag . FIRST_GROUP ; <nl> - public static class FirstGroupNodeFlag implements IExtension { <nl> - public static FirstGroupNodeFlag FIRST_GROUP = new FirstGroupNodeFlag() ; <nl> - private FirstGroupNodeFlag(){} ; <nl> - } <nl> - return FIRST_GROUP ; <nl> + return FirstGroupNodeFlag . FIRST_GROUP ; <nl> new file <nl> ppp FirstGroupNodeFlag . java <nl> + package org . freeplane . features . map ; <nl> + import org . freeplane . core . extension . IExtension ; <nl> <nl>,extract inner class because of compile error,1
"mmm YarnApplicationExecutionEnvironment . java <nl> ppp YarnApplicationExecutionEnvironment . java <nl> - public class YarnApplicationExecutionEnvironment extends ExecutionEnvironment { <nl> + public class ApplicationModeExecutionEnvironment extends ExecutionEnvironment { <nl> - public YarnApplicationExecutionEnvironment(PipelineExecutorServiceLoader executorServiceLoader, <nl> + public ApplicationModeExecutionEnvironment(PipelineExecutorServiceLoader executorServiceLoader, <nl> mmm YarnApplicationStreamEnvironment . java <nl> ppp YarnApplicationStreamEnvironment . java <nl> - public class YarnApplicationStreamEnvironment extends StreamExecutionEnvironment { <nl> + public class ApplicationModeStreamEnvironment extends StreamExecutionEnvironment { <nl> - private static final Logger LOGGER = LoggerFactory . getLogger(YarnApplicationStreamEnvironment . class) ; <nl> + private static final Logger LOGGER = LoggerFactory . getLogger(ApplicationModeStreamEnvironment . class) ; <nl> - public YarnApplicationStreamEnvironment(PipelineExecutorServiceLoader executorServiceLoader, <nl> + public ApplicationModeStreamEnvironment(PipelineExecutorServiceLoader executorServiceLoader, <nl>",support flink in k8s mode,0
mmm Main . java <nl> ppp Main . java <nl> + import fr . themode . minestom . instance . InstanceManager ; <nl> - import fr . themode . minestom . net . player . PlayerConnection ; <nl> + private static InstanceManager instanceManager ; <nl> + instanceManager = new InstanceManager() ; <nl> - destroyEntitiesPacket . entityIds = new int[] {player . getEntityId()} ; <nl> + destroyEntitiesPacket . entityIds = new int[]{player . getEntityId()} ; <nl> + public static InstanceManager getInstanceManager() { <nl> + return instanceManager ; <nl> + } <nl> mmm Entity . java <nl> ppp Entity . java <nl>,basic instance implementation,0
"mmm Paragraph . java <nl> ppp Paragraph . java <nl> - return ""paragraph_"" + System . currentTimeMillis() + ""_"" + new SecureRandom() . nextInt() ; <nl> + return ""paragraph_"" System . currentTimeMillis() ""_"" Math . abs(new SecureRandom() . nextInt()) ; <nl>",do not include minus sign in paragraph id,0
"mmm PacketParserUtils . java <nl> ppp PacketParserUtils . java <nl> - String content = """" ; <nl> + StringBuffer content = new StringBuffer() ; <nl> - content += parser . getText() ; <nl> + content . append(parser . getText()) ; <nl> - return content ; <nl> + return content . toString() ; <nl> + else if (IQ . Type . RESULT == type){ <nl> + iqPacket = new UnparsedResultIQ(parseContent(parser)) ; <nl> + } <nl> + @Override <nl> + @Override <nl> - } <nl> + } <nl> + public static class UnparsedResultIQ extends IQ { <nl> + public UnparsedResultIQ(String content) <nl>","parse unhandled iq stanza of type 'request ' to dummy iq class , so that the content can be examine later on",1
"mmm JNIEncoder . java <nl> ppp JNIEncoder . java <nl> - inputFormats[0] = new YUVFormat(null, -1, Format . byteArray,  <nl> + inputFormats[0] = new YUVFormat(null, -1, Format . byteArray, <nl> mmm CallPeerMediaHandler . java <nl> ppp CallPeerMediaHandler . java <nl> + if(stream instanceof VideoMediaStream) <nl> + { <nl> + logger . info(""Try to open port on NAT if any"") ; <nl> + try <nl> + { <nl> + videoStreamConnector . getDataSocket() . send(new DatagramPacket( <nl> + new byte[0], 0, target . getDataAddress() . getAddress(), <nl> + target . getDataAddress() . getPort())) ; <nl> + } <nl> + catch(Exception <nl>","when create medium stream , send an empty udp packet to target in order to open port in nat/rtp proxy if any",1
"mmm MulticastMain . java <nl> ppp MulticastMain . java <nl> + import com . rabbitmq . client . ConsumerCancelledException ; <nl> - QueueingConsumer consumer = new QueueingConsumer(channel) ; <nl> - channel . basicConsume(qName, autoAck, consumer) ; <nl> - new Thread(new Consumer(consumer, id, <nl> + new Thread(new Consumer(channel, id, qName, <nl> + private Channel          channel ; <nl> + private String           queueName ; <nl> - public Consumer(QueueingConsumer q, String id, <nl> - int txSize, boolean autoAck, <nl> + public Consumer(Channel channel, String <nl>",improve mcm so that it automatically cop with the consumer cancel notification,1
mmm PortAudioClipImpl . java <nl> ppp PortAudioClipImpl . java <nl> - private URL url = null ; <nl> + private final URL url ; <nl> - if(!audioNotifier . isMute()) <nl> - { <nl> - started = true ; <nl> - new Thread(new PlayThread()) . start() ; <nl> - } <nl> + play() ; <nl> - if (url != null) <nl> - started = false ; <nl> + internalStop() ; <nl> + AudioFormat audioStreamFormat = audioStream . getFormat() ; <nl> - int outChannels = audioStream . getFormat() . getChannels() ; <nl> + int outChannels = audioStreamFormat . getChannels() ; <nl> <nl>,remove duplication in order to remove an inconsistent checking of a field for null,1
"mmm EclipseLocation . java <nl> ppp EclipseLocation . java <nl> - ""Can't delete "" + lombokJar . getAbsolutePath() + <nl> - "" perhaps the installer does not have the access rights to do so . "", <nl> - null) ; <nl> + ""Can't delete "" lombokJar . getAbsolutePath() generateWriteErrorMessage(), null) ; <nl> - ""Can't delete "" + agentJar . getAbsolutePath() + <nl> - "" perhaps the installer does not have the access rights to do so . "", <nl> - null) ; <nl> + ""Can't delete "" agentJar . getAbsolutePath() generateWriteErrorMessage(), null) ; <nl> - "" probably because this <nl>","when the installer can not work because the eclipse dir be not writable , you use to get the",1
"mmm JavaTypeMapping . java <nl> ppp JavaTypeMapping . java <nl> + registerDefault(new JSR310InstantType()) ; <nl> + registerDefault(new JSR310LocalDateTimeType()) ; <nl> + registerDefault(new JSR310LocalDateType()) ; <nl> + registerDefault(new JSR310LocalTimeType()) ; <nl> + registerDefault(new JSR310OffsetDateTimeType()) ; <nl> + registerDefault(new JSR310OffsetTimeType()) ; <nl> + registerDefault(new JSR310ZonedDateTimeType()) ; <nl> - try { <nl> - Class . forName(""java . time . Instant"") ; <nl> - registerDefault((Type<?>) Class . forName(""com . querydsl . sql . types . JSR310InstantType"") . newInstance()) ; <nl> - registerDefault((Type<?>) Class . forName(""com . querydsl . sql . types . JSR310LocalDateTimeType"") . newInstance()) ; <nl> - registerDefault((Type<?>) Class . forName(""com . <nl>",remove jsr310 compatibility trick,0
mmm ClientConnection . java <nl> ppp ClientConnection . java <nl> + ContextImpl . setContext(context) ; <nl> mmm NetClientImpl . java <nl> ppp NetClientImpl . java <nl> + ContextImpl . setContext(context) ; <nl> mmm NetServerImpl . java <nl> ppp NetServerImpl . java <nl> + ContextImpl . setContext(handler . context) ; <nl>,make sure context be set before create object so that write handlerids be register properly with context close hook,1
mmm NodeTooltipManager . java <nl> ppp NodeTooltipManager . java <nl> + import java . awt . event . ComponentAdapter ; <nl> + import java . awt . event . ComponentEvent ; <nl> + import java . awt . event . HierarchyEvent ; <nl> + import java . awt . event . HierarchyListener ; <nl> - tip . addAncestorListener(new AncestorListener() { <nl> - public void ancestorRemoved(AncestorEvent event) { <nl> - } <nl> - public void ancestorMoved(AncestorEvent event) { <nl> - } <nl> - public void ancestorAdded(AncestorEvent event) { <nl> - final NodeTooltip component = (NodeTooltip) event . getComponent() ; <nl> <nl>,bug fix : scroll tool tip up,0
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> - static final String INTERPRETER_NAME = ""jdbc"" ; <nl> - UserGroupInformation . AuthenticationMethod authType = JDBCSecurityImpl . getAuthtype(properties) ; <nl> + UserGroupInformation . AuthenticationMethod authType = JDBCSecurityImpl . getAuthType(properties) ; <nl> + LOGGER . info(""Creating connection pool for url: {}, user: {}, dbPrefix: {}, properties: {}"", <nl> + url, user, dbPrefix, properties) ; <nl> - final String url = properties . getProperty(URL_KEY) ; <nl> + String url = properties . getProperty(URL_KEY) ; <nl> - JDBCSecurityImpl . getAuthtype(getProperties()) ; <nl> + JDBCSecurityImpl . getAuthType(getProperties()) ; <nl> - switch (authType) { <nl>",improve the support of hive on kerbose,0
"mmm ConnectionManager . java <nl> ppp ConnectionManager . java <nl> - import org . eclipse . jetty . websocket . api . WebSocketException ; <nl> - List<NotebookSocket> socketList = noteSocketMap . get(noteId) ; <nl> - if (socketList != null) { <nl> + List<NotebookSocket> socketList = noteSocketMap . getOrDefault(noteId, Collections . emptyList()) ; <nl> + if (!socketList . isEmpty()) { <nl> - removeConnectionFromNote(noteId, socket) ; <nl> + removeNoteConnection(noteId, socket) ; <nl> - private void removeConnectionFromNote(String noteId, NotebookSocket socket) { <nl> - LOGGER . debug(""Remove connection {} from note: {}"", socket, noteId) ; <nl> - synchronized (noteSocketMap) { <nl> - List<NotebookSocket> <nl>",remove jetty websocket libs,0
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> + public String getNotebookRunId() { <nl> + return getString(ConfVars . ZEPPELIN_NOTEBOOK_RUN_ID) ; <nl> + } <nl> + public String getNotebookRunRev() { <nl> + return getString(ConfVars . ZEPPELIN_NOTEBOOK_RUN_REV) ; <nl> + } <nl> + public String getNotebookRunServiceContext() { <nl> + return getString(ConfVars . ZEPPELIN_NOTEBOOK_RUN_SERVICE_CONTEXT) ; <nl> + } <nl> + public boolean getNotebookRunAutoShutdown() { <nl> + return getBoolean(ConfVars . ZEPPELIN_NOTEBOOK_RUN_AUTOSHUTDOWN) ; <nl> + } <nl> + ZEPPELIN_NOTEBOOK_RUN_ID(""zeppelin . notebook . run . id"", null),   // run particular note id on zeppelin start <nl> + ZEPPELIN_NOTEBOOK_RUN_REV(""zeppelin . notebook . <nl>",run a note from the commandline,0
"mmm CassandraInterpreter . java <nl> ppp CassandraInterpreter . java <nl> - logger . debug(""Adding contact point: {}"", address) ; <nl> + LOGGER . debug(""Adding contact point: {}"", address) ; <nl> - logger . debug(""{} = {}"", entry . getKey(), entry . getValue() . toString()) ; <nl> + LOGGER . debug(""{} = {}"", entry . getKey(), entry . getValue() . toString()) ; <nl> - logger . debug(""Creating programmatic config loader"") ; <nl> + LOGGER . debug(""Creating programmatic config loader"") ; <nl> - logger . info(""Custom config values: {} = {}"", pname, pvalue) ; <nl> + LOGGER . info(""Custom config values: <nl>",refactoring some view class,0
"mmm MongodbSerializer . java <nl> ppp MongodbSerializer . java <nl> + } else if (op == Ops . LIKE_IC) { <nl> + String regex = ExpressionUtils . likeToRegex((Expression) expr . getArg(1)) . toString() ; <nl> + return asDBObject(asDBKey(expr, 0), Pattern . compile(regex, Pattern . CASE_INSENSITIVE)) ; <nl> mmm MongodbDocumentSerializer . java <nl> ppp MongodbDocumentSerializer . java <nl> + } else if (op == Ops . LIKE_IC) { <nl> + String regex = ExpressionUtils . likeToRegex((Expression) expr . getArg(1)) . toString() ; <nl> + return asDocument(asDBKey(expr, 0), new BsonRegularExpression(regex, ""i"")) ; <nl> mmm MongodbQueryTest . java <nl> ppp MongodbQueryTest . <nl>",add like ignore case operation support,0
"mmm FlinkInterpreter . java <nl> ppp FlinkInterpreter . java <nl> - import org . apache . commons . lang3 . StringUtils ; <nl> - import org . apache . flink . runtime . jobgraph . SavepointConfigOptions ; <nl> - import org . apache . flink . table . api . config . ExecutionConfigOptions ; <nl> - this . innerIntp = new FlinkScalaInterpreter(getProperties()) ; <nl> + } <nl> + private void checkScalaVersion() throws InterpreterException { <nl> + String scalaVersionString = scala . util . Properties . versionString() ; <nl> + LOGGER . info(""Using Scala: "" scalaVersionString) ; <nl> + if <nl>",throw exception when use flink for scala 2.12,0
"mmm NotebookRestApi . java <nl> ppp NotebookRestApi . java <nl> + import org . apache . commons . lang3 . exception . ExceptionUtils ; <nl> - public Response importNote(String noteJson) throws IOException { <nl> - Note note = notebookService . importNote(null, noteJson, getServiceContext(), <nl> - new RestServiceCallback()) ; <nl> - return new JsonResponse<>(Status . OK, """", note . getId()) . build() ; <nl> + public Response importNote(@QueryParam(""notePath"") String notePath, String noteJson) throws IOException { <nl> + try { <nl> + Note note = notebookService . importNote(notePath, noteJson, getServiceContext(), <nl> + new RestServiceCallback()) ; <nl> + return new JsonResponse<>(Status . <nl>",allow import note to set new notepath,0
mmm PooledRemoteClient . java <nl> ppp PooledRemoteClient . java <nl> + private static final int RETRY_COUNT = 3 ; <nl> - T client = null ; <nl> - try { <nl> - client = getClient() ; <nl> - if (client != null) { <nl> - return func . call(client) ; <nl> - } <nl> - } catch (TException e) { <nl> - broken = true ; <nl> - throw new RuntimeException(e) ; <nl> - } catch (Exception e1) { <nl> - throw new RuntimeException(e1) ; <nl> - } finally { <nl> - if (client != null) { <nl> - <nl>,add retry in pooledremoteclient,0
"mmm AcceptHeaderApiListingResource . java <nl> ppp AcceptHeaderApiListingResource . java <nl> + import com . fasterxml . jackson . core . JsonProcessingException ; <nl> - @Context UriInfo uriInfo) { <nl> + @Context UriInfo uriInfo) throws JsonProcessingException { <nl> mmm ApiListingResource . java <nl> ppp ApiListingResource . java <nl> + import com . fasterxml . jackson . core . JsonProcessingException ; <nl> - @PathParam(""type"") String type) { <nl> + @PathParam(""type"") String type) throws JsonProcessingException { <nl> mmm BaseApiListingResource . java <nl> ppp BaseApiListingResource . java <nl> + import com . fasterxml . jackson . core . JsonProcessingException ; <nl> + import <nl>",use custom object mapper to serialize json in order to avoid null value,1
"mmm AbstractStreamSqlJob . java <nl> ppp AbstractStreamSqlJob . java <nl> - LOGGER . info(""Refresh result of paragraph: "" + context . getParagraphId()) ; <nl> + LOGGER . debug(""Refresh result of paragraph: "" context . getParagraphId()) ; <nl>",log level change of flink interpreter,0
"mmm BooleanExpression . java <nl> ppp BooleanExpression . java <nl> - public BooleanExpression coalesce(Expression<?> .  .  .  exprs) { <nl> + public BooleanExpression coalesce(Expression<Boolean> .  .  .  exprs) { <nl> - for (Expression expr : exprs) { <nl> + for (Expression<Boolean> expr : exprs) { <nl> mmm ComparableExpression . java <nl> ppp ComparableExpression . java <nl> - @SuppressWarnings({""unchecked"", ""rawtypes""}) <nl> - public ComparableExpression<T> coalesce(Expression<?> .  .  .  exprs) { <nl> + public ComparableExpression<T> coalesce(Expression<T> .  .  .  exprs) { <nl> - for (Expression expr : exprs) { <nl>",type generic in coalesce method,0
"mmm OperationSetBasicInstantMessagingSipImpl . java <nl> ppp OperationSetBasicInstantMessagingSipImpl . java <nl> - + "" ""  <nl> + "" "" <nl> mmm AbstractOperationSetBasicInstantMessaging . java <nl> ppp AbstractOperationSetBasicInstantMessaging . java <nl> - eventType = MessageEventType . MessageDeliveryFailed ;    <nl> + eventType = MessageEventType . MessageDeliveryFailed ; <nl> - evt = messageTransform(evt, eventType) ; <nl> - if (evt == null) <nl> - return ; <nl> - for (MessageListener listener : listeners) <nl> - try <nl> + try <nl> + { <nl> + evt = messageTransform(evt, eventType) ; <nl> + if (evt == null) <nl> + return ; <nl> <nl>",,1
"mmm CallPeerMediaHandlerSipImpl . java <nl> ppp CallPeerMediaHandlerSipImpl . java <nl> + boolean rejectedAvpOfferDueToSavpRequired = false ; <nl> + rejectedAvpOfferDueToSavpRequired = true ; <nl> + if (rejectedAvpOfferDueToSavpRequired && !atLeastOneValidDescription) <nl> + throw new OperationFailedException(""Offer contained no valid "" <nl> + ""media descriptions .  Insecure media was rejected (only "" <nl> + ""RTP/AVP instead of RTP/SAVP) . "", <nl> + OperationFailedException . ILLEGAL_ARGUMENT) ; <nl>",throw distinct error when rtp/avp be reject because of rtp/savp require,1
mmm AudioMixer . java <nl> ppp AudioMixer . java <nl> + import net . java . sip . communicator . impl . neomedia . protocol . * ; <nl> mmm MediaDeviceImpl . java <nl> ppp MediaDeviceImpl . java <nl> + import net . java . sip . communicator . impl . neomedia . protocol . * ; <nl> mmm BufferStreamAdapter . java <nl> ppp BufferStreamAdapter . java <nl> - package net . java . sip . communicator . impl . neomedia . conference ; <nl> + package net . java . sip . communicator . impl . neomedia . <nl>,move some class in neomedia in different package because i pollute theimpl.neomedia package too much,1
mmm JDOQueryFactoryTest . java <nl> ppp JDOQueryFactoryTest . java <nl> - Supplier<PersistenceManager> provider = () -> EasyMock . createNiceMock(PersistenceManager . class) ; <nl> + Supplier<PersistenceManager> provider = () -> EasyMock . <PersistenceManager> createNiceMock(PersistenceManager . class) ; <nl> mmm HibernateQueryFactoryTest . java <nl> ppp HibernateQueryFactoryTest . java <nl> - Supplier<Session> provider = () -> EasyMock . createNiceMock(Session . class) ; <nl> + Supplier<Session> provider = () -> EasyMock . <Session> createNiceMock(Session . class) ; <nl> mmm ConfigurationTest . java <nl> ppp ConfigurationTest . java <nl> - PreparedStatement stmt = EasyMock . createNiceMock(PreparedStatement . class) ; <nl> + PreparedStatement stmt = <nl>,bump easymock from 3.0 to 4.3,0
"mmm HollowSparseIntegerSet . java <nl> ppp HollowSparseIntegerSet . java <nl> - import com . netflix . hollow . core . schema . HollowObjectSchema ; <nl> - if (!set . get((int) value)) set . set((int) value) ; <nl> - else handleDuplicate((int) value) ; <nl> + set(set, (int) value) ; <nl> - SparseBitSet compactedSet = SparseBitSet . compact(set) ; <nl> + SparseBitSet compactedSet = compact(set) ; <nl> + protected void set(SparseBitSet set, int value) { <nl> + if (!set . get(value)) set . set(value) ; <nl> + else handleDuplicate(value) ; <nl> + } <nl> + protected SparseBitSet compact(SparseBitSet set) { <nl> <nl>",add protect method so that index functionality can be overriden by extend the class,1
"mmm JAWTRenderer . java <nl> ppp JAWTRenderer . java <nl> - import java . awt . event . * ; <nl> - import java . awt . image . * ; <nl> - import java . util . * ; <nl> - import java . util . List ; // disambiguation <nl> + import java . lang . reflect . * ; <nl> - long handle = 0 ; <nl> + private long handle = 0 ; <nl> - private static native void addNotifyLightweightComponent( <nl> + static native void addNotifyLightweightComponent( <nl> - private static native void close(long handle, Component <nl>",split the component implementation of jawtrenderer out of it in order to faciliate it porting,1
mmm TestOperationSetPresence . java <nl> ppp TestOperationSetPresence . java <nl> - import junit . framework . * ; <nl> - import net . java . sip . communicator . service . protocol . * ; <nl> + import java . beans . * ; <nl> - import net . java . sip . communicator . service . protocol . icqconstants . * ; <nl> + import junit . framework . * ; <nl> + import net . java . sip . communicator . service . protocol . * ; <nl> + import net . java . sip . communicator <nl>,"add some test for authorization request/response , but for now be comment out because they do not work properly",1
mmm NodeTooltipManager . java <nl> ppp NodeTooltipManager . java <nl> + import java . awt . Rectangle ; <nl> - final Toolkit defaultToolkit = Toolkit . getDefaultToolkit() ; <nl> - final Insets screenInsets = defaultToolkit . getScreenInsets(nearComponent . getGraphicsConfiguration()) ; <nl> - final Dimension screenSize = defaultToolkit . getScreenSize() ; <nl> - final int minX = screenInsets . left ; <nl> - final int maxX = screenSize . width screenInsets . right ; <nl> - final int minY = screenInsets . top ; <nl> - final int maxY = screenSize . height screenInsets . bottom ; <nl> + Rectangle <nl>,fix node tooltip position for dual screen under window,0
mmm KeepAliveService . java <nl> ppp KeepAliveService . java <nl> - import java . util . concurrent . Executors ; <nl> - import java . util . concurrent . ScheduledExecutorService ; <nl> - import java . util . concurrent . TimeUnit ; <nl> - import org . tron . core . net . TronNetService ; <nl> - import org . tron . core . net . message . keepalive . PingMessage ; <nl> - import org . tron . protos . Protocol ; <nl> - private long KEEP_ALIVE_TIMEOUT = 10_000 ; <nl> - private long PING_TIMEOUT = 20_000 ; <nl>,remove ping in keepaliveservice because it exist in libp2p,1
"mmm CassandraInterpreter . java <nl> ppp CassandraInterpreter . java <nl> + public static final String CASSANDRA_FORMAT_FLOAT_PRECISION = <nl> + ""cassandra . format . float_precision"" ; <nl> + public static final String CASSANDRA_FORMAT_DOUBLE_PRECISION = <nl> + ""cassandra . format . double_precision"" ; <nl> + public static final String CASSANDRA_FORMAT_TIMESTAMP = <nl> + ""cassandra . format . timestamp"" ; <nl> + public static final String CASSANDRA_FORMAT_TIME = <nl> + ""cassandra . format . time"" ; <nl> + public static final String CASSANDRA_FORMAT_DATE = <nl> + ""cassandra . format . date"" ; <nl> + public static final String CASSANDRA_FORMAT_TYPE = <nl> + <nl>",better representation of string-like data in cassandra interpreter,0
"mmm ThechiveRipper . java <nl> ppp ThechiveRipper . java <nl> - super(url) ; <nl> + super(url) ; <nl> - throw new MalformedURLException(""Expected thechive . com URL format: "" + <nl> - ""thechive . com/YEAR/MONTH/DAY/POSTTITLE/ got "" + url + "" instead"") ; <nl> + throw new MalformedURLException(""Expected thechive . com URL format: "" <nl> + ""thechive . com/YEAR/MONTH/DAY/POSTTITLE/ - got "" url "" instead"") ; <nl> - String imageSource = el . attr(""src"") ; <nl> + String imageSource ; <nl> + if (el . attr(""data-gifsrc"") . isEmpty()) { //If it's not a gif <nl> + imageSource = el . <nl>",fix thechive bug so that it can now rip gifs,1
"mmm MTextController . java <nl> ppp MTextController . java <nl> - public void setGuessedNodeObject(final NodeModel node, final String newText) { <nl> - if(HtmlUtils . isHtmlNode(newText)){ <nl> - setNodeObject(node, newText) ; <nl> - return ; <nl> - } <nl> - final FreeplaneDate date = FreeplaneDate . toDate(newText . trim()) ; <nl> - if(date != null) <nl> - setNodeObject(node, date) ; <nl> - else <nl> - setNodeObject(node, newText) ; <nl> - } <nl> - setGuessedNodeObject(node, newUpperContent) ; <nl> + setNodeObject(node, newUpperContent) ; <nl> - setGuessedNodeObject(lowerNode, newLowerContent) ; <nl> + setNodeObject(lowerNode, newLowerContent) ; <nl> - setGuessedNodeObject(nodeModel, processedText) ; <nl> + setNodeObject(nodeModel, processedText) <nl>",do not guess node object type after text input,0
"mmm SparkSubmitInterpreter . java <nl> ppp SparkSubmitInterpreter . java <nl> - package org . apache . zeppelin . spark ; <nl> + package org . apache . zeppelin . spark . submit ; <nl> - public SparkSubmitOutputListener(InterpreterContext context) { <nl> + SparkSubmitOutputListener(InterpreterContext context) { <nl> mmm SparkIntegrationTest . java <nl> ppp SparkIntegrationTest . java <nl> + import org . apache . zeppelin . interpreter . InterpreterNotFoundException ; <nl> - assertTrue(detectedSparkVersion +"" doesn't contain "" + this . sparkVersion, detectedSparkVersion . contains(this . sparkVersion)) ; <nl> + assertTrue(detectedSparkVersion "" doesn't contain "" this . sparkVersion, detectedSparkVersion . contains(this . sparkVersion)) <nl>",move spark-submit a a separated interpreter module,0
"mmm NodeView . java <nl> ppp NodeView . java <nl> - private static final int SHORTENER_VIEWER_POSITION = 0 ; <nl> mmm NodeViewLayoutAdapter . java <nl> ppp NodeViewLayoutAdapter . java <nl> - shift -= (child . getContent() . getY() getSpaceAround()) ; <nl> + final int contentShift = child . getContent() . getY() - getSpaceAround() ; <nl> + shift -= contentShift ; <nl> - if (shiftY < 0) { <nl> + if(i == 0){ <nl> + child . setLocation(x, y) ; <nl> + } <nl> + else if (shiftY < 0) { <nl> mmm RightNodeViewLayout . java <nl> ppp RightNodeViewLayout . <nl>",bug fix in map layout,0
"mmm ModelessAttributeController . java <nl> ppp ModelessAttributeController . java <nl> - FilterController . getCurrentFilterController() . getConditionFactory() . addConditionController(2, <nl> - new AttributeConditionController()) ; <nl> + FilterController . getCurrentFilterController() . getConditionFactory() . addConditionController(1000, new AttributeConditionController()) ; <nl>",attribute should be at the end of the filter condition list,0
"mmm ActionThrottle . java <nl> ppp ActionThrottle . java <nl> - lastActionStartedAt = timeSource . getTime() ; <nl> + lastActionStartedAt = timeSource . getTimeNs() ; <nl> - long diff = timeSource . getTime() lastActionStartedAt ; <nl> + long diff = timeSource . getTimeNs() - lastActionStartedAt ; <nl> mmm AutoScalingHandler . java <nl> ppp AutoScalingHandler . java <nl> - resumeTime = new Date(TimeUnit . MILLISECONDS . convert(timeSource . getTime(), TimeUnit . NANOSECONDS) <nl> + resumeTime = new Date(TimeUnit . MILLISECONDS . convert(timeSource . getTimeNs(), TimeUnit . NANOSECONDS) <nl> mmm InactiveShardPlanAction . java <nl> ppp InactiveShardPlanAction . java <nl> - long <nl>",rename timesource.gettime to gettimens,0
"mmm SparkIntegrationTest30 . java <nl> ppp SparkIntegrationTest30 . java <nl> - {""3 . 0 . 0"", ""2 . 7""}, <nl> - {""3 . 0 . 0"", ""3 . 2""} <nl> + {""3 . 0 . 1"", ""2 . 7""}, <nl> + {""3 . 0 . 1"", ""3 . 2""} <nl> mmm ZeppelinSparkClusterTest30 . java <nl> ppp ZeppelinSparkClusterTest30 . java <nl> - {""3 . 0 . 0"", ""2 . 7""}, <nl> - {""3 . 0 . 0"", ""3 . 2""} <nl> + {""3 . 0 . 1"", ""2 . 7""}, <nl> + {""3 . 0 . 1"", ""3 . 2""} <nl>",upgrade spark to 3.0.1,0
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> - public String getK8sKubectlCmd() { <nl> - return getString(ConfVars . ZEPPELIN_K8S_KUBECTL) ; <nl> + public String getK8sNamepsace() { <nl> + return getString(ConfVars . ZEPPELIN_K8S_NAMESPACE) ; <nl> - ZEPPELIN_K8S_KUBECTL(""zeppelin . k8s . kubectl"", ""kubectl""),     // kubectl command <nl> + ZEPPELIN_K8S_NAMESPACE(""zeppelin . k8s . namespace"", ""default""), // specify a namespace incase of Zeppelin is running outside of kuberentes <nl> mmm InterpreterLauncher . java <nl> ppp InterpreterLauncher . java <nl> + import java . io . IOException ; <nl> + import java . util . Properties ; <nl> <nl>",with java lib,0
mmm Chunk . java <nl> ppp Chunk . java <nl> + import fr . themode . minestom . instance . block . Block ; <nl> - return blockId == 2033 ; <nl> + Block block = Block . fromId(blockId) ; <nl> + return block . isBlockEntity() ; <nl> mmm Block . java <nl> ppp Block . java <nl> + public boolean isBlockEntity() { <nl> + switch (this) { <nl> + case SPAWNER: <nl> + case COMMAND_BLOCK: <nl> + case BEACON: <nl> + case CREEPER_HEAD: <nl> + case CREEPER_WALL_HEAD: <nl> + case DRAGON_HEAD: <nl> + case DRAGON_WALL_HEAD: <nl> + case <nl>,wip block entity,0
"mmm SqlSplitter . java <nl> ppp SqlSplitter . java <nl> + if (index == (text . length() - 1) && !query . toString() . trim() . isEmpty()) { <nl> + queries . add(query . toString()) ; <nl> + } <nl> mmm SqlSplitterTest . java <nl> ppp SqlSplitterTest . java <nl> + @Test <nl> + public void testCommentAtEnd() { <nl> + String sql = ""\n"" + <nl> + ""select\n"" + <nl> + ""  'one'\n"" + <nl> + ""  , 'two' -- comment\n"" ; <nl> + SqlSplitter sqlSplitter = new SqlSplitter() ; <nl> + List<String> sqls = sqlSplitter . <nl>",comment at end of query cause query to be ignore,0
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> + LOGGER . info(""Execute sql: "" sqlToExecute) ; <nl> mmm SparkInterpreterLauncher . java <nl> ppp SparkInterpreterLauncher . java <nl> - LOGGER . debug(""buildEnvFromProperties: {}"", env) ; <nl> + LOGGER . info(""buildEnvFromProperties: {}"", env) ; <nl>",add more logging,0
"mmm ContactRssImpl . java <nl> ppp ContactRssImpl . java <nl> + catch(Exception ex) <nl> + { <nl> + logger . error(""Unknown error on favicon retrieval .  "" ex, ex) ; <nl> + } <nl>",make sure we catch all sort of exception when retrieve an image so that we do not mess the gui,1
mmm NotificationConfigurationPanel . java <nl> ppp NotificationConfigurationPanel . java <nl> - fileChooserSound . addFilter(new SoundFilter()) ; <nl> + String[] soundFormats = {SoundFileUtils . wav} ; <nl> + fileChooserSound . setFileFilter(new SoundFilter(soundFormats)) ; <nl> mmm SoundFilter . java <nl> ppp SoundFilter . java <nl> + private String[] soundFormats = null ; <nl> + public SoundFilter() <nl> + { <nl> + super() ; <nl> + } <nl> + public SoundFilter(String[] soundFormats) <nl> + { <nl> + super() ; <nl> + if(soundFormats != null) <nl> + { <nl> + this . soundFormats = new String[soundFormats . length] ; <nl> + System . <nl>,"add a filter to event sound chooser dialog , in order to select only wav file",1
"mmm JiveChatServlet . java <nl> ppp JiveChatServlet . java <nl> - static protected URLFilter URLFILTER = new URLFilter() ; <nl> + static protected URLTranscoder URLTRANSCODER = new URLTranscoder() ; <nl> - body = URLFILTER . applyFilter(body) ; <nl> + body = URLTRANSCODER . encodeURLsInText(body) ; <nl> new file <nl> ppp URLTranscoder . java <nl> + package org . jivesoftware . webchat ; <nl> + import java . util . * ; <nl> + public class URLTranscoder { <nl> + static protected final String A_HREF_PREFIX = ""<a href='"" ; <nl> + static protected final String A_HREF_SUFFIX = ""' target=_new>"" ; <nl>",put the com url transcoder into the org app so that url be parse out and href 'd,1
mmm Entity . java <nl> ppp Entity . java <nl> + public boolean sameChunk(Position position) { <nl> + Position pos = getPosition() ; <nl> + int chunkX1 = ChunkUtils . getChunkX((int) pos . getX()) ; <nl> + int chunkZ1 = ChunkUtils . getChunkX((int) pos . getZ()) ; <nl> + int chunkX2 = ChunkUtils . getChunkX((int) position . getX()) ; <nl> + int chunkZ2 = ChunkUtils . getChunkX((int) position . getZ()) ; <nl> + return chunkX1 == chunkX2 && chunkZ1 == chunkZ2 ; <nl> + } <nl> + public boolean sameChunk(Entity entity) { <nl> + return sameChunk(entity . getPosition()) ; <nl>,optimization & proper itemstack reader,0
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> + import java . util . Collections ; <nl> + static final String SPLIT_QURIES_KEY = ""splitQueries"" ; <nl> - List<String> sqlArray = sqlSplitter . splitSql(sql) ; <nl> + boolean splitSql = Boolean . parseBoolean(getJDBCConfiguration(user) <nl> +  . getPropertyMap(dbPrefix) <nl> +  . getProperty(SPLIT_QURIES_KEY, ""true"")) ; <nl> + List<String> sqlArray = null ; <nl> + if (splitSql) { <nl> + sqlArray = sqlSplitter . splitSql(sql) ; <nl> + } else { <nl> + sqlArray = Collections . singletonList(sql) ; <nl> + } <nl> mmm JDBCInterpreterTest . java <nl> ppp <nl>",keep default.splitqueries in jdbc,0
mmm NodeView . java <nl> ppp NodeView . java <nl> - break ;,bug fix paint summary edge,0
"mmm SCScrollPane . java <nl> ppp SCScrollPane . java <nl> - if (getSettingsBoolean(""impl . gui . IS_WINDOW_BACKGROUND_ENABLED"")) <nl> + if (getSettingsBoolean(""impl . gui . IS_CONTACT_LIST_IMG_BG_ENABLED"")) <nl> - if (getSettingsBoolean(""impl . gui . IS_TEXTURE_BACKGROUND"") <nl> + if (getSettingsBoolean( <nl> + ""impl . gui . IS_CONTACT_LIST_TEXTURE_BG_ENABLED"") <nl> mmm DialPanel . java <nl> ppp DialPanel . java <nl> -  . getSettingsString(""impl . gui . IS_TEXTURE_BACKGROUND"")) ; <nl> +  . getSettingsString(""impl . gui . IS_CONTACT_LIST_TEXTURE_BG_ENABLED"")) ; <nl>",rename two configuration property in order to avoid confusion,1
"mmm FlinkBatchSqlInterpreter . java <nl> ppp FlinkBatchSqlInterpreter . java <nl> - int defaultSqlParallelism = this . tbenv . getConfig() . getConfiguration() <nl> -  . getInteger(ExecutionConfigOptions . TABLE_EXEC_RESOURCE_DEFAULT_PARALLELISM) ; <nl> - try { <nl> - if (context . getLocalProperties() . containsKey(""parallelism"")) { <nl> - this . tbenv . getConfig() . getConfiguration() <nl> -  . set(ExecutionConfigOptions . TABLE_EXEC_RESOURCE_DEFAULT_PARALLELISM, <nl> - Integer . parseInt(context . getLocalProperties() . get(""parallelism""))) ; <nl> - } <nl> - Table table = this . tbenv . sqlQuery(sql) ; <nl> - z . setCurrentSql(sql) ; <nl> - String result = z . showData(table) ; <nl> - <nl>",improvement of flinkinterpreter,0
"mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> - private AtomicBoolean started = new AtomicBoolean(false) ; <nl> + private final AtomicBoolean started = new AtomicBoolean(false) ; <nl> - long timetoTimeout = timeoutTime System . currentTimeMillis() ; <nl> - if (timetoTimeout <= 0) { <nl> + long timeToTimeout = timeoutTime - System . currentTimeMillis() ; <nl> + if (timeToTimeout <= 0) { <nl> - started . wait(timetoTimeout) ; <nl> + started . wait(timeToTimeout) ; <nl> - if (!podWatcher . getCountDownLatch() . await(RemoteInterpreterServer . DEFAULT_SHUTDOWN_TIMEOUT + 500, <nl> + if (!podWatcher . getCountDownLatch() . await(RemoteInterpreterServer . DEFAULT_SHUTDOWN_TIMEOUT 500L, <nl> <nl>",polish k8s launcher,0
mmm MapView . java <nl> ppp MapView . java <nl> - newSelected = getSummaryView(oldSelected) ;,not return invisible summary node in mapview.getsummaryview,0
mmm ChatPanel . java <nl> ppp ChatPanel . java <nl> - String key = activeKeys . nextElement() ; <nl> - Object descriptor = activeFileTransfers . get(key) ; <nl> - if (descriptor instanceof IncomingFileTransferRequest) <nl> + try <nl> - ((IncomingFileTransferRequest) descriptor) . rejectFile() ; <nl> + String key = activeKeys . nextElement() ; <nl> + Object descriptor = activeFileTransfers . get(key) ; <nl> + if (descriptor instanceof IncomingFileTransferRequest) <nl> + { <nl> + ((IncomingFileTransferRequest) descriptor) . rejectFile() ; <nl> + } <nl> + else if (descriptor instanceof FileTransfer) <nl> + { <nl> + ((FileTransfer) descriptor) . cancel() ; <nl> + <nl>,update util bundle to include some extra package in order to help dns lib to extend it search for dns server,1
"mmm DocValuesStats . java <nl> ppp DocValuesStats . java <nl> - public LongDocValuesStats(String description) { <nl> - super(description, Long . MAX_VALUE, Long . MIN_VALUE) ; <nl> + public LongDocValuesStats(String field) { <nl> + super(field, Long . MAX_VALUE, Long . MIN_VALUE) ; <nl> - public DoubleDocValuesStats(String description) { <nl> - super(description, Double . MAX_VALUE, Double . MIN_VALUE) ; <nl> + public DoubleDocValuesStats(String field) { <nl> + super(field, Double . MAX_VALUE, Double . MIN_VALUE) ; <nl>",rename constructor parameter name,0
"mmm RTPConnectorInputStream . java <nl> ppp RTPConnectorInputStream . java <nl> - pkt . getBuffer(), pkt . getOffset(), inBuffer, offset, pktLength) ; <nl> + pkt . getBuffer(), pkt . getOffset(), inBuffer, offset, pktLength) ; <nl> mmm SwScaler . java <nl> ppp SwScaler . java <nl> + import net . java . sip . communicator . impl . neomedia . control . * ; <nl> + private final FrameProcessingControlImpl frameProcessingControl <nl> + = new FrameProcessingControlImpl() ; <nl> - private final Format[] supportedInputFormats = new Format[] { <nl> + private final Format[] supportedInputFormats = new Format[] <nl> + { <nl> - private <nl>",implement frameprocessingcontrol for swscaler in order to allow it to be instruct by jmf to drop frame,1
"mmm PreferencesItem . java <nl> ppp PreferencesItem . java <nl> - return textChecker . contains(getKey(), searchTerm) <nl> - || textChecker . contains(path, searchTerm) ; <nl> + return textChecker . contains(path, searchTerm) ; <nl>",search only in visible preference path and not in the key because,1
"mmm CertificateServiceImpl . java <nl> ppp CertificateServiceImpl . java <nl> - import javax . swing . * ; <nl> - import org . bouncycastle . x509 . extension . * ; <nl> + import org . bouncycastle . x509 . extension . * ; <nl> - AuthorityInformationAccess aia <nl> - = AuthorityInformationAccess . getInstance( <nl> - X509ExtensionUtil . fromExtensionValue(aiaBytes)) ; <nl> + AuthorityInformationAccess aia <nl> + = AuthorityInformationAccess . getInstance( <nl> + X509ExtensionUtil . fromExtensionValue(aiaBytes)) ; <nl> - final VerifyCertificateDialog dialog = <nl> - new VerifyCertificateDialog(chain, null, message) ; <nl> - try <nl> + if(CertificateVerificationActivator <nl> +  . <nl>",move verify certificate dialog in separate service in order to use the certificate service in android,1
mmm EntityManager . java <nl> ppp EntityManager . java <nl> - waitingPlayer . init() ; <nl> + waitingPlayer . init(spawningInstance) ; <nl> mmm Player . java <nl> ppp Player . java <nl> - this . dimensionType = DimensionType . OVERWORLD ; <nl> + this . dimensionType = DimensionType . OVERWORLD ; // Default dimension <nl> - protected void init() { <nl> + protected void init(@NotNull Instance spawnInstance) { <nl> + this . dimensionType = spawnInstance . getDimensionType() ; <nl>,provide the proper dimensiontype in the joingamepacket,0
mmm SipSecurityManager . java <nl> ppp SipSecurityManager . java <nl> - public ClientTransaction handleChallenge( <nl> + public synchronized ClientTransaction handleChallenge( <nl> - public ClientTransaction handleForbiddenResponse( <nl> + public synchronized ClientTransaction handleForbiddenResponse( <nl>,,1
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> + private String getUser(InterpreterContext context) { <nl> + String user = context . getAuthenticationInfo() . getUser() ; <nl> + String dbPrefix = getDBPrefix(context) ; <nl> + if (""anonymous"" . equalsIgnoreCase(user) && basePropertiesMap . containsKey(dbPrefix)) { <nl> + String userInProperty = basePropertiesMap . get(dbPrefix) . getProperty(USER_KEY) ; <nl> + if (StringUtils . isNotBlank(userInProperty)) { <nl> + user = userInProperty ; <nl> + } <nl> + } <nl> + return user ; <nl> + } <nl> - String user = context . getAuthenticationInfo() . getUser() ; <nl> + String user = <nl>",hive job run under anonymous user instead of default.user,0
mmm GroupBy4Test . java <nl> ppp GroupBy4Test . java <nl> + -import static com . querydsl . core . group . GroupBy . groupBy ; <nl> - import static com . querydsl . core . group . GroupBy . map ; <nl> - import static org . junit . Assert . assertEquals ; <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . <nl>,resulttransformers for guava collection,0
"mmm JPEGImageReader . java <nl> ppp JPEGImageReader . java <nl> + SOFSegment sof = getSOF() ; <nl> - SOFSegment sof = getSOF() ; <nl> - if (startOfFrame == null) { <nl> - throw new IIOException(""No SOF segment in stream"") ; <nl> - } <nl> + initHeader() ; <nl> - return null ; <nl> + throw new IIOException(""No SOF segment in stream"") ; <nl> + if (image == null) { <nl> + continue ; <nl> + } <nl> mmm JPEGImageReaderTest . java <nl> ppp JPEGImageReaderTest . java <nl> + @Ignore(""Known issue in com . sun .  .  . <nl>","fix more possible npes because of miss sof now throw iioexception immediately , if sof be not find",1
"mmm ConnectionHolder . java <nl> ppp ConnectionHolder . java <nl> - private final NetClient client ; <nl> + private final EventBusOptions busOptions ; <nl> + private final CloseFuture clientCloseFuture ; <nl> + private NetClient client ; <nl> + this . busOptions = options ; <nl> - NetClientOptions clientOptions = getClientOptions(options) ; <nl> - this . client = vertx . createNetClient(clientOptions, new CloseFuture()) ; <nl> + this . clientCloseFuture = new CloseFuture() ; <nl> - if (connected) { <nl> - throw new IllegalStateException(""Already connected"") ; <nl> + if (client != null) { <nl> + return ; <nl> + NetClientOptions clientOptions <nl>",netclient creation should be defer to connect in clustered eventbus connection holder because those can be concurrently create,1
"mmm DistanceValueSource . java <nl> ppp DistanceValueSource . java <nl> - private TwoDoublesStrategy strategy ; <nl> + private PointVectorStrategy strategy ; <nl> - public DistanceValueSource(TwoDoublesStrategy strategy, Point from) { <nl> + public DistanceValueSource(PointVectorStrategy strategy, Point from) { <nl> mmm TwoDoublesStrategy . java <nl> ppp TwoDoublesStrategy . java <nl> - public class TwoDoublesStrategy extends SpatialStrategy { <nl> + public class PointVectorStrategy extends SpatialStrategy { <nl> - public TwoDoublesStrategy(SpatialContext ctx, String fieldNamePrefix) { <nl> + public PointVectorStrategy(SpatialContext ctx, String fieldNamePrefix) { <nl> mmm DistanceStrategyTest . java <nl> ppp DistanceStrategyTest . java <nl> - import org . apache . lucene . spatial <nl>",rename twodoubles to pointvector,0
mmm AccountRegWizardContainerImpl . java <nl> ppp AccountRegWizardContainerImpl . java <nl> - AccountRegistrationWizard wizard <nl> - = registeredWizards . get(protocolProvider . getProtocolDisplayName()) ; <nl> + AccountRegistrationWizard wizard = getProtocolWizard(protocolProvider) ; <nl> + public AccountRegistrationWizard getProtocolWizard( <nl> + ProtocolProviderService protocolProvider) <nl> + { <nl> + return registeredWizards . get(protocolProvider . getProtocolDisplayName()) ; <nl> + } <nl> mmm AccountsConfigurationPanel . java <nl> ppp AccountsConfigurationPanel . java <nl> + import net . java . sip . communicator . service . gui . * ;,add an accountremoved method to the accountregistrationwizard interface in order to notify wizard when an account have be remove,1
"mmm SparkleActivator . java <nl> ppp SparkleActivator . java <nl> - import net . java . sip . communicator . service . configuration . * ; <nl> - private static ConfigurationService configurationService = null ; <nl> - private static BundleContext bundleContext = null ; <nl> - int checkInterval, <nl> - String downloadLink) ; <nl> + int checkInterval) ; <nl> - private static final String PROP_UPDATE_LINK = <nl> - ""net . java . sip . communicator . UPDATE_LINK"" ; <nl> - SparkleActivator . bundleContext = bundleContext ; <nl> - String downloadLink = getConfigurationService() . getString( <nl> - PROP_UPDATE_LINK) ; <nl> <nl>",rollback part of commit 7779 because sparkle be not load properly,1
"mmm Flink112Shims . java <nl> ppp Flink112Shims . java <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> + String mode = properties . getProperty(""flink . execution . mode"") ; <nl> + if (""yarn-application"" . equalsIgnoreCase(mode)) { <nl> + String flinkHome = new File("" . "") . getAbsolutePath() ; <nl> + return getPyFlinkPythonPath(flinkHome ""/lib/python"") ; <nl> + } <nl> - if (flinkHome != null) { <nl> - List<File> depFiles = null ; <nl> - depFiles = Arrays . asList(new File(flinkHome + ""/opt/python"") . listFiles()) ; <nl> - StringBuilder builder = new StringBuilder() ; <nl> <nl>",support yarn application mode for flink interpreter,0
"new file <nl> ppp NightlyBuildID . java <nl> + package net . java . sip . communicator . impl . version ; <nl> + public class NightlyBuildID <nl> + { <nl> + public static final String BUILD_ID=""0 . build . CVS"" ; <nl> + } <nl>",add a default nightlybuildid so that fresh downloaders do not get an error,1
mmm EditNodeTextField . java <nl> ppp EditNodeTextField . java <nl> - textfield . requestFocus() ;,bug fix : avoid npe,0
"mmm QueueingConsumer . java <nl> ppp QueueingConsumer . java <nl> - import com . rabbitmq . utility . ValueOrException ; <nl> + import com . rabbitmq . utility . Utility ; <nl> - public BlockingQueue<ValueOrException<Delivery, ShutdownSignalException>> _queue ; <nl> + private final BlockingQueue<Delivery> _queue ; <nl> + private volatile ShutdownSignalException _shutdown ; <nl> + public static final Delivery POISON = new Delivery(null, null, null) ; <nl> - this(ch, <nl> - new LinkedBlockingQueue<ValueOrException<Delivery, ShutdownSignalException>>()) ; <nl> + this(ch, new LinkedBlockingQueue<Delivery>()) ; <nl> - public QueueingConsumer(Channel ch, <nl> - BlockingQueue<ValueOrException<Delivery, ShutdownSignalException>> q) <nl> + public QueueingConsumer(Channel ch, BlockingQueue<Delivery> q) <nl> - <nl>",use a different mechanism for handle shutdown in queuingconsumer so that multiple thread consume will all receive the exception,1
"mmm AbstractQuerydslProcessor . java <nl> ppp AbstractQuerydslProcessor . java <nl> - JavaFileObject fileObject = processingEnv . getFiler() . createSourceFile(className, <nl> - elements . toArray(new Element[0])) ; <nl> - try (Writer writer = fileObject . openWriter()) { <nl> + try (Writer writer = conf . getFiler() . createFile(processingEnv, className, elements)) { <nl> mmm Configuration . java <nl> ppp Configuration . java <nl> - import com . querydsl . codegen . EntityType ; <nl> - import com . querydsl . codegen . QueryTypeFactory ; <nl> - import com . querydsl . codegen . Serializer ; <nl> - import com . querydsl <nl>",port kotlin codegen to 5.0.0,0
mmm ExternalResource . java <nl> ppp ExternalResource . java <nl> - for (final JComponent viewer : viewers) {,fix npes bug reporter,0
"mmm CTEBase64InputStream . java <nl> ppp CTEBase64InputStream . java <nl> - Base64 . decode(rawBuf, 0, c, dataOutputStream) ; <nl> + try <nl> + { <nl> + Base64 . decode(rawBuf, 0, c, dataOutputStream) ; <nl> + } catch (Exception ex) { <nl> + throw new IOException(""Decode Base64 Content-Transfer-Encoding"",ex) ; <nl> + } <nl> mmm ESTResponse . java <nl> ppp ESTResponse . java <nl> + if (in . available() >0) { <nl> + throw new IOException(""Stream closed with extra content in pipe that exceeds content length . "") ; <nl> + } <nl> mmm ESTService . java <nl> ppp ESTService . <nl>",refactoring and test,0
mmm PerMessageTTL . java <nl> ppp PerMessageTTL . java <nl> - declareAndBindQueue(3000) ; <nl> + declareAndBindQueue(500) ; <nl> - this . sessionTTL = 1000 ; <nl> + this . sessionTTL = 100 ; <nl> - Thread . sleep(1000) ; <nl> + Thread . sleep(200) ; <nl>,tweak the timing so that the ha test pass,1
mmm AddReplicaSuggester . java <nl> ppp AddReplicaSuggester . java <nl> - import org . apache . solr . recipe . RuleSorter . BaseSuggester ; <nl> - import org . apache . solr . recipe . RuleSorter . Session ; <nl> + import org . apache . solr . recipe . Policy . BaseSuggester ; <nl> + import org . apache . solr . recipe . Policy . Session ; <nl> mmm Clause . java <nl> ppp Clause . java <nl> - import org . apache . solr . recipe . RuleSorter . ReplicaStat ; <nl> + import org . <nl>,rename rulesorted to policy,0
mmm Api . java <nl> ppp Api . java <nl> - package com . wordnik . swagger . core ; <nl> + package com . wordnik . swagger . annotations ; <nl> mmm ApiError . java <nl> ppp ApiError . java <nl> - package com . wordnik . swagger . core ; <nl> + package com . wordnik . swagger . annotations ; <nl> mmm ApiErrors . java <nl> ppp ApiErrors . java <nl> - package com . wordnik . swagger . core ; <nl> + package com . wordnik . swagger . annotations ; <nl> mmm ApiOperation . <nl>,split off the annotation so that they can be use standalone without pull in other dependency,1
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> + private static final String CANCEL_REASON = ""cancel_reason"" ; <nl> - Boolean . parseBoolean(getProperty(""hive . log . display"", ""true""))) ; <nl> + Boolean . parseBoolean(getProperty(""hive . log . display"", ""true"")), this) ; <nl> + String cancelReason = context . getLocalProperties() . get(CANCEL_REASON) ; <nl> + if (StringUtils . isNotBlank(cancelReason)) { <nl> + try { <nl> + context . out . write(cancelReason) ; <nl> + } catch (IOException e) { <nl> + LOGGER . error(""Fail to write cancel reason"") ; <nl> + } <nl> + } <nl> + public void <nl>",cancel paragraph when no sufficient resource for hive job,0
mmm UIServiceImpl . java <nl> ppp UIServiceImpl . java <nl> + import net . java . sip . communicator . impl . gui . main . chat . * ; <nl> - import net . java . sip . communicator . impl . gui . main . message . * ; <nl> mmm MainFrame . java <nl> ppp MainFrame . java <nl> + import net . java . sip . communicator . impl . gui . main . chat . * ; <nl> + import net . java . sip . communicator . impl . gui . main . <nl>,rename message package to chat and change the structure of class in order to allow conference chat,1
"mmm NodeModel . java <nl> ppp NodeModel . java <nl> - this(null, map) ; <nl> + this("""", map) ; <nl> mmm NodeTextBuilder . java <nl> ppp NodeTextBuilder . java <nl> - if(nodeContent == null){ <nl> + if(nodeContent == null || nodeContent . equals("""")){ <nl> mmm CopyAttributes . java <nl> ppp CopyAttributes . java <nl> + if (styleNode == null) <nl> + return null ; <nl> mmm MainView . java <nl> ppp MainView . java <nl> - text = TextUtils . format(""MainView . errorUpdateText"", content . toString(), e . getLocalizedMessage()) ; <nl> + text = TextUtils . format(""MainView . errorUpdateText"", <nl>",automatic bug report bug fix,0
"mmm IndexFetcher . java <nl> ppp IndexFetcher . java <nl> - private boolean useInternal = false ; <nl> + private boolean useInternalCompression = false ; <nl> - private boolean useExternal = false ; <nl> + private boolean useExternalCompression = false ; <nl> - useInternal = INTERNAL . equals(compress) ; <nl> - useExternal = EXTERNAL . equals(compress) ; <nl> + useInternalCompression = INTERNAL . equals(compress) ; <nl> + useExternalCompression = EXTERNAL . equals(compress) ; <nl> - myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal) ; <nl> + myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression) ; <nl> - if (useInternal) <nl>",rename a few variable to be more explicit,0
"mmm ClientPlayPacketsHandler . java <nl> ppp ClientPlayPacketsHandler . java <nl> + register(0x14, ClientPlayerPacket . class) ; <nl> + register(0x2A, ClientAnimationPacket . class) ; <nl> new file <nl> ppp ClientAnimationPacket . java <nl> + package fr . themode . minestom . net . packet . client . play ; <nl> + import fr . adamaq01 . ozao . net . Buffer ; <nl> + import fr . themode . minestom . entity . Player ; <nl> + import fr . themode . minestom . net . packet . client . ClientPlayPacket ; <nl> + import fr . themode . minestom <nl>",implement some more packet,0
"mmm CRDemoSaslClient . java <nl> ppp CRDemoSaslClient . java <nl> - resp = new String(pc . getPassword()) . getBytes(""utf-8"") ; <nl> + resp = (""My password is "" new String(pc . getPassword())) . getBytes(""utf-8"") ; <nl>",make the cr-demo even silly in order to demonstrate protocol_error,1
mmm InterpreterInfoSaving . java <nl> ppp InterpreterInfoSaving . java <nl> + import com . google . gson . JsonDeserializationContext ; <nl> + import com . google . gson . JsonDeserializer ; <nl> + import com . google . gson . JsonElement ; <nl> + import com . google . gson . JsonParseException ; <nl> + import com . google . gson . JsonSerializationContext ; <nl> + import com . google . gson . JsonSerializer ; <nl> + import org . eclipse . aether . repository . Authentication ; <nl> + import java . lang . reflect . Type ; <nl>,unable to register repository with authentication info,0
"mmm MetaDataSerializerTest . java <nl> ppp MetaDataSerializerTest . java <nl> + import com . querydsl . codegen . GeneratedAnnotationResolver ; <nl> - ""import javax . annotation . Generated ;"", <nl> + String . format(""import %s ;"", GeneratedAnnotationResolver . resolveDefault() . getName()), <nl>",replace more @ generate stuff,0
new file <nl> ppp RemoteInterpreterDownloader . java <nl> + package org . apache . zeppelin . interpreter . remote ; <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . nio . file . Files ; <nl> + import java . util . HashSet ; <nl> + import java . util . List ; <nl> + import java . util . Set ; <nl> + import org . apache . commons . io . FileUtils ; <nl> <nl>,download local repo to interpreter node,0
"mmm NodeView . java <nl> ppp NodeView . java <nl> -  . getBooleanProperty(""formula_dont_mark_formulas"") ; ; <nl> +  . getBooleanProperty(""formula_dont_mark_formulas"") ; <nl> + static private int maxToolTipWidth ; <nl> - private int maxToolTipWidth ; <nl>",fix : make one member variable static,0
"mmm FlinkShims . java <nl> ppp FlinkShims . java <nl> - } else if (flinkVersion . getMajorVersion() == 1 && flinkVersion . getMinorVersion() >= 11) { <nl> + } else if (flinkVersion . getMajorVersion() == 1 && flinkVersion . getMinorVersion() == 11) { <nl> + } else if (flinkVersion . getMajorVersion() == 1 && flinkVersion . getMinorVersion() == 12) { <nl> + LOGGER . info(""Initializing shims for Flink 1 . 12"") ; <nl> + flinkShimsClass = Class . forName(""org . apache . zeppelin . flink . Flink112Shims"") ; <nl> + public abstract void disableSysoutLogging(Object batchConfig, Object streamConfig) ; <nl> <nl>",support flink 1.12,0
"mmm AbstractInterpreter . java <nl> ppp AbstractInterpreter . java <nl> + import org . apache . zeppelin . resource . Resource ; <nl> + import org . apache . zeppelin . resource . ResourcePool ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> + private static final Pattern VARIABLES = Pattern . compile(""([^{}]*)([{]+[^{}]*[}]+)( . *)"", Pattern . DOTALL) ; <nl> + private static final Pattern VARIABLE_IN_BRACES = Pattern . compile(""[{][^{}]+[}]"") ; <nl> + private static final Pattern VARIABLE_IN_DOUBLE_BRACES = Pattern . compile(""[{]{2}[^{}]+[}]{2}"") ; <nl> <nl>",polish interpreter class,0
"mmm JPABase . java <nl> ppp JPABase . java <nl> + import static org . junit . Assert . assertNull ; <nl> + import com . querydsl . core . types . Expression ; <nl> + import com . querydsl . core . types . dsl . Expressions ; <nl> + @Test <nl> + public void createQuery4() { <nl> + List<Tuple> rows = query() . from(cat) . select(new Expression<?>[] { Expressions . nullExpression() }) . fetch() ; <nl> + for (Tuple row : rows) { <nl> + assertNotNull(row) ; <nl> + assertEquals(1, row . size()) ; <nl> + assertNull(row <nl>",reproducer for eclipselink,0
"new file <nl> ppp InstanceTickEvent . java <nl> + package net . minestom . server . event . instance ; <nl> + import javax . annotation . Nullable ; <nl> + import org . jetbrains . annotations . NotNull ; <nl> + import net . minestom . server . event . Event ; <nl> + public class InstanceTickEvent extends Event { <nl> + private final int duration ; <nl> + public InstanceTickEvent(@NotNull long time, @Nullable long lastTickAge) { <nl> + this . duration = (int) (time - lastTickAge) ; <nl> + } <nl> + @NotNull <nl> + public int <nl>",add instance tick event,0
"mmm TimeRoutedAlias . java <nl> ppp TimeRoutedAlias . java <nl> - public static final String ROUTER_MAX_FUTURE = ROUTER_PREFIX + ""max-future-ms"" ; <nl> + public static final String ROUTER_MAX_FUTURE = ROUTER_PREFIX ""maxFutureMs"" ; <nl> mmm CreateRoutedAliasTest . java <nl> ppp CreateRoutedAliasTest . java <nl> - ""      \""max-future-ms\"":\""14400000\""\n"" + <nl> + ""      \""maxFutureMs\"":\""14400000\""\n"" + <nl> - ""&router . max-future-ms=60000"" + <nl> + ""&router . maxFutureMs=60000"" + <nl> - ""&router . max-future-ms=-60000"" + // bad: negative <nl> + ""&router . maxFutureMs=-60000"" // bad: negative <nl> - ""&router . max-future-ms=SixtyThousandMilliseconds"" + // bad <nl>",rename max-future-ms to maxfuturems,0
"mmm Main . java <nl> ppp Main . java <nl> - MinecraftServer . getBenchmarkManager() . enable(new UpdateOption(2500, TimeUnit . MILLISECOND)) ; <nl> + MinecraftServer . getBenchmarkManager() . enable(new UpdateOption(60 * 1000, TimeUnit . MILLISECOND)) ; <nl> mmm PlayerInit . java <nl> ppp PlayerInit . java <nl> - player . setGameMode(GameMode . CREATIVE) ; <nl> + player . setGameMode(GameMode . SURVIVAL) ; <nl> mmm MinecraftServer . java <nl> ppp MinecraftServer . java <nl> + RegistryMain . registerStats() ; <nl> mmm Player . java <nl> ppp Player . java <nl> + import fr . themode . minestom . stat . PlayerStatistic <nl>",optimization + add stats,0
"mmm JupyterUtil . java <nl> ppp JupyterUtil . java <nl> - import com . sun . org . apache . xerces . internal . impl . xpath . regex . RegularExpression ; <nl> + import java . util . regex . Pattern ; <nl> - private static Gson Pretty_Gson = new GsonBuilder() . setPrettyPrinting() . create() ; <nl> + private static final Gson PRETTY_GSON = new GsonBuilder() . setPrettyPrinting() . create() ; <nl> - RegularExpression MD = new RegularExpression(""%md\\s"") ; <nl> - RegularExpression SQL = new RegularExpression(""%sql\\s"") ; <nl> - RegularExpression UNKNOWN_MAGIC = new RegularExpression(""%\\w+\\s"") ; <nl> - RegularExpression <nl>",remove internal proprietary api in jupyter module,0
mmm AFreeplaneAction . java <nl> ppp AFreeplaneAction . java <nl> - public boolean checkEnabledOnPopup() { <nl> - final EnabledAction annotation = getClass() . getAnnotation(EnabledAction . class) ; <nl> - if (annotation == null) { <nl> - return false ; <nl> - } <nl> - return annotation . checkOnPopup() ; <nl> - } <nl> mmm EnabledAction . java <nl> ppp EnabledAction . java <nl> - boolean checkOnPopup() default false ; <nl> mmm ActionStatusUpdater . java <nl> ppp ActionStatusUpdater . java <nl> - if (action . checkEnabledOnPopup()) <nl> - action . setEnabled(userRole) ; <nl>,remove enable / disable action on popup because then they can not be access use shortcut,1
"mmm GoogleContactsActivator . java <nl> ppp GoogleContactsActivator . java <nl> - private static PhoneNumberI18nService phoneNumberI18nService ; <nl> - public static PhoneNumberI18nService getPhoneNumberI18nService() <nl> - { <nl> - if (phoneNumberI18nService == null) <nl> - { <nl> - phoneNumberI18nService <nl> - = ServiceUtils . getService( <nl> - bundleContext, <nl> - PhoneNumberI18nService . class) ; <nl> - } <nl> - return phoneNumberI18nService ; <nl> - } <nl> mmm GoogleContactsQuery . java <nl> ppp GoogleContactsQuery . java <nl> - protected String normalizePhoneNumber(String phoneNumber) <nl> - { <nl> - PhoneNumberI18nService phoneNumberI18nService <nl> - = GoogleContactsActivator . getPhoneNumberI18nService() ; <nl> - return <nl> - (phoneNumberI18nService <nl>","update the phonenumberi18nserviceimpl , in order to remove the dependency to the libphonenumber",1
"mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . hubspot . jinjava . Jinjava ; <nl> - properties . put(""zeppelin . spark . uiWebUrl"", <nl> - String . format(""//%d-%s . %s"", webUiPort, getPodName(), envs . get(""SERVICE_DOMAIN""))) ; <nl> + webUrl = ""//{{PORT}}-{{SERVICE_NAME}} . {{SERVICE_DOMAIN}}"" ; <nl> + properties . put(""zeppelin . spark . uiWebUrl"", <nl> + sparkUiWebUrlFromTemplate( <nl> + webUrl, <nl> + webUiPort, <nl> + getPodName(), <nl> + envs . get(""SERVICE_DOMAIN"") <nl> + )) ; <nl> + @VisibleForTesting <nl> + String <nl>",format spark web ui url dynamically on kubernetes,0
mmm RedoAction . java <nl> ppp RedoAction . java <nl> + public void afterMapChange(final Object newMap) {} ; <nl> mmm UndoAction . java <nl> ppp UndoAction . java <nl> - if (!(map instanceof MMapModel)) {,bug fix for style map in undo action,0
mmm AcceleratorBuilder . java <nl> ppp AcceleratorBuilder . java <nl>  <nl> mmm ActionFinder . java <nl> ppp ActionFinder . java <nl>  <nl> mmm Builder . java <nl> ppp Builder . java <nl>  <nl> mmm Entry . java <nl> ppp Entry . java <nl>  <nl> mmm JMenubarBuilder . java <nl> ppp JMenubarBuilder . java <nl>  <nl> mmm JToolbarActionBuilder . java <nl> ppp JToolbarActionBuilder . java <nl>  <nl> mmm JToolbarBuilder . java <nl> ppp JToolbarBuilder . java <nl>  <nl> mmm RecursiveMenuStructureBuilder . java <nl> ppp RecursiveMenuStructureBuilder . java <nl>  <nl> mmm RecursiveMenuStructureBuilderForPaths . <nl>,move implementation code to src folder because of awesome plug-in,1
new file <nl> ppp TablePrimaries . java <nl> + package schemacrawler . tools . analysis . associations ; <nl> + import static java . util . Objects . requireNonNull ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + import java <nl>,refactoring in order to modify algorithm,1
"mmm ApiListingResourceIT . java <nl> ppp ApiListingResourceIT . java <nl> + import com . jayway . restassured . response . ValidatableResponse ; <nl> + import static org . testng . Assert . assertEquals ; <nl> - given() <nl> -  . log() . all() <nl> -  . when() <nl> -  . get(""/swagger . json"") <nl> -  . then() <nl> -  . log() . all() <nl> -  . assertThat() <nl> + String actualBody = given() <nl> +  . log() . all() <nl> +  . when() <nl> +  . get(""/swagger . json"") <nl> <nl>",move response body assert to testng assertequals because hamcrest matcher get hang up on escape character,1
mmm FButtonBar . java <nl> ppp FButtonBar . java <nl> - if (ownWindowAncestor != null) {,bug fix : npe,0
mmm MoveToRootAction . java <nl> ppp MoveToRootAction . java <nl> + import java . awt . Component ; <nl> - import org . freeplane . view . swing . map . NodeView ; <nl> + @Override <nl> - final NodeView selectedComponent = (NodeView) ctrl . getMapViewManager() . getSelectedComponent() ; <nl> - if (!selectedComponent . focused() && java . awt . EventQueue . getCurrentEvent() instanceof KeyEvent) <nl> + final Component selectedComponent = ctrl . getMapViewManager() . getSelectedComponent() ; <nl> + if (!selectedComponent . hasFocus() && java . awt . EventQueue . getCurrentEvent() instanceof KeyEvent) <nl> mmm IMapViewManager . java <nl> <nl>,return mainview a select component because it can have focus,1
"mmm MessageDialog . java <nl> ppp MessageDialog . java <nl> - import net . java . sip . communicator . impl . gui . utils . * ; <nl> - private JCheckBox doNotAskAgain = new JCheckBox(Messages <nl> -  . getI18NString(""doNotAskAgain"") . getText()) ; <nl> + private JCheckBox doNotAskAgain = <nl> + new SIPCommCheckBox(Messages . getI18NString(""doNotAskAgain"") . getText()) ; <nl> mmm ChatPanel . java <nl> ppp ChatPanel . java <nl> - private final JCheckBox sendSmsCheckBox = new JCheckBox( <nl> - Messages . getI18NString(""sendAsSms"") . getText()) ; <nl> + private final JCheckBox sendSmsCheckBox = <nl> + new SIPCommCheckBox(Messages . getI18NString(""sendAsSms"") <nl>",make the background of jcheckbox transparent on window in order to respect the blue theme,1
"mmm SparkInterpreter . java <nl> ppp SparkInterpreter . java <nl> + import java . io . IOException ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Paths ; <nl> + private static File scalaShellOutputDir ; <nl> + static { <nl> + try { <nl> + scalaShellOutputDir = Files . createTempDirectory(Paths . get(System . getProperty(""java . io . tmpdir"")), ""spark"") <nl> +  . toFile() ; <nl> + scalaShellOutputDir . deleteOnExit() ; <nl> + } catch (IOException e) { <nl> + throw new RuntimeException(""Fail to create scala shell <nl>",spark scope mode be break,0
mmm ConferenceChatManager . java <nl> ppp ConferenceChatManager . java <nl> - import org . jdesktop . swingworker . * ; <nl> + import org . jdesktop . swingworker . SwingWorker ; <nl>,disambiguates swingworker because java 1.6 have it own in javax.swing and thus cause a compile-time error,1
"mmm PreferencesIndexer . java <nl> ppp PreferencesIndexer . java <nl> + String currentTabTranslated = TextUtils . getRawText(OptionPanel . OPTION_PANEL_RESOURCE_PREFIX currentTab, null) ; <nl> - prefs . add(new PreferencesItem(currentTab, currentSeparatorTranslated, prefKey, prefText, prefPath, tooltipText)) ; <nl> + prefs . add(new PreferencesItem(currentTabTranslated, currentSeparatorTranslated, prefKey, prefText, prefPath, tooltipText)) ; <nl>",command search : translate tab so that `` jump to tab '' succeed in non-english locale,1
"mmm SdpUtils . java <nl> ppp SdpUtils . java <nl> - userName = ""sip-communicator"" ; <nl> + userName = ""jitsi . org"" ; <nl> mmm DynamicPayloadTypeRegistry . java <nl> ppp DynamicPayloadTypeRegistry . java <nl> + payloadTypeOverrides . remove(payloadType) ; <nl>",improves payload type override for sip/xmpp so that it would remove payload type override when necessary,1
"mmm FlinkIntegrationTest111 . java <nl> ppp FlinkIntegrationTest111 . java <nl> - {""1 . 11 . 1""} <nl> + {""1 . 11 . 2""} <nl> mmm ZeppelinFlinkClusterTest111 . java <nl> ppp ZeppelinFlinkClusterTest111 . java <nl> - {""1 . 11 . 1""} <nl> + {""1 . 11 . 2""} <nl>",upgrade flink to 1.11.2,0
mmm ChatRoomSubjectPanel . java <nl> ppp ChatRoomSubjectPanel . java <nl> - import net . java . sip . communicator . impl . gui . main . chatroomslist . * ; <nl>,"import be no more used , because the class use here be move to it initial package",1
"mmm ElasticsearchInterpreterTest . java <nl> ppp ElasticsearchInterpreterTest . java <nl> - import org . apache . commons . lang . math . RandomUtils ; <nl> + import org . apache . commons . lang3 . RandomUtils ; <nl> -  . field(""method"", METHODS[RandomUtils . nextInt(METHODS . length)]) <nl> +  . field(""method"", METHODS[RandomUtils . nextInt(0, METHODS . length)]) <nl> -  . field(""status"", STATUS[RandomUtils . nextInt(STATUS . length)]) <nl> -  . field(""content_length"", RandomUtils . nextInt(2000)) <nl> +  . field(""status"", STATUS[RandomUtils . nextInt(0, STATUS . length)]) <nl> +  . field(""content_length"", RandomUtils . nextInt(0, 2000)) <nl> -  <nl>",update commons-lang to commons-lang3,0
"mmm CallSessionImpl . java <nl> ppp CallSessionImpl . java <nl> - implements   CallSession <nl> - , CallParticipantListener <nl> - , CallChangeListener <nl> - , ReceiveStreamListener <nl> - , SendStreamListener <nl> - , SessionListener <nl> - , ControllerListener <nl> + implements CallSession <nl> + , CallParticipantListener <nl> + , CallChangeListener <nl> + , ReceiveStreamListener <nl> + , SendStreamListener <nl> + , SessionListener <nl> + , ControllerListener <nl> + public void startStreamingAndProcessingMedia() <nl> + throws MediaException <nl> + { <nl> + startStreaming() ; <nl> + mediaServCallback . getMediaControl(getCall()) . startProcessingMedia(this) ; <nl> + } <nl> + { <nl> + <nl>",fix reinvite-related functionality so that sc can join a 3-way auto-conference do not really see that it 's a conference ) create by x-lite,1
"mmm AbstractJPATest . java <nl> ppp AbstractJPATest . java <nl> - @ExcludeIn({ORACLE, SQLSERVER}) <nl> + @ExcludeIn({ORACLE, SQLSERVER, HSQLDB}) <nl> mmm SelectBase . java <nl> ppp SelectBase . java <nl> + @ExcludeIn({HSQLDB}) // FIXME <nl> - @ExcludeIn({FIREBIRD, SQLSERVER}) // FIXME <nl> + @ExcludeIn({FIREBIRD, SQLSERVER, HSQLDB}) // FIXME <nl>",bump hsqldb to 2.6.0,0
mmm EntityCreature . java <nl> ppp EntityCreature . java <nl> + short deltaX = (short) ((newX * 32 - position . getX() * 32) * 128) ; <nl> + short deltaY = (short) ((newY * 32 - position . getY() * 32) * 128) ; <nl> + short deltaZ = (short) ((newZ * 32 - position . getZ() * 32) * 128) ; <nl> - EntityLookAndRelativeMovePacket entityLookAndRelativeMovePacket = new EntityLookAndRelativeMovePacket() ; <nl> - entityLookAndRelativeMovePacket . entityId = getEntityId() ; <nl> - entityLookAndRelativeMovePacket . deltaX = (short) ((newX * 32 position . getX() * 32) * 128) ; <nl> - <nl>,clean code & add some packet,0
"mmm Utility . java <nl> ppp Utility . java <nl> - super(throwable . getClass() + "" created elsewhere"", throwable . getCause()) ; <nl> + super(throwable . getClass() "" created elsewhere"") ; <nl>","remove the use of throwable.getcause in throwablecreatedelsewhere it 's useless , because we can only use this thing when there 's no cause",1
mmm NodeView . java <nl> ppp NodeView . java <nl> - if (!node . isRoot() && node . getParent() == null) {,fix npe in nodeview,0
"mmm FreeplaneDate . java <nl> ppp FreeplaneDate . java <nl> - @SerializationMethod(""toISOString"") <nl> + @SerializationMethod(""toStringISO"") <nl> + public static String toStringISO(final FreeplaneDate date) { <nl> + return toStringISO((Date)date) ; <nl> + } <nl> mmm TypeReference . java <nl> ppp TypeReference . java <nl> - if(factoryAnnotation != null){ <nl> + if(factoryAnnotation != null) <nl> - } <nl> - constructor = clazz . getConstructor(String . class) ; <nl> + else <nl> + constructor = clazz . getConstructor(String . class) ; <nl> - return clazz . getMethod(method . value(), String . class) . invoke(obj) . toString() ; <nl> + return clazz . <nl>",bug fix in typereference,0
"mmm DataManager . java <nl> ppp DataManager . java <nl> + import net . minestom . server . item . ItemStack ; <nl> + registerType(ItemStack . class, new ItemStackData()) ; <nl> new file <nl> ppp ItemStackData . java <nl> + package net . minestom . server . data . type ; <nl> + import io . netty . buffer . ByteBuf ; <nl> + import io . netty . buffer . Unpooled ; <nl> + import net . minestom . server . data . DataType ; <nl> + import net . minestom . server . item . ItemStack ; <nl>",add itemstack data type,0
mmm DefaultNodeMouseMotionListener . java <nl> ppp DefaultNodeMouseMotionListener . java <nl> - final NodeModel node = (component) . getNodeView() . getModel() ;,fix for get focus on node after focus attrubute table or inline editor,0
"mmm CommunicatorMain . java <nl> ppp CommunicatorMain . java <nl> - slnf . loadThemePackDefinition( <nl> - getClass() . getClassLoader() . getResource( <nl> - ""net/java/sip/communicator/impl/gui/themepacks/aquathemepack/skinlf-themepack . xml""))) ; <nl> + slnf . loadThemePackDefinition( <nl> + getClass() . getClassLoader() . getResource( <nl> + ""net/java/sip/communicator/impl/gui/themepacks/"" <nl>",instantiate the skin look and feel locally so that it get load through the osgi class loader and not the system one,1
mmm EclipseAST . java <nl> ppp EclipseAST . java <nl> - public void reparse(boolean forceRebuild) { <nl> + public void rebuild(boolean force) { <nl> - if (completeParse && !forceRebuild) return ; <nl> + if (completeParse && !force) return ; <nl> - if (!newCompleteParse && !forceRebuild) return ; <nl> + if (!newCompleteParse && !force) return ; <nl> - this . completeParse = true ; <nl> + this . completeParse = newCompleteParse ; <nl> mmm TransformEclipseAST . java <nl> ppp TransformEclipseAST . java <nl> - existing . reparse(forceRebuild) ; <nl> + existing . rebuild(forceRebuild) ; <nl> mmm HandlePrintAST . java <nl> <nl>,"fix printast , and separately sneakythrows/synchronized which fail because the 'isfullparse ' boolean be erronously set on a full rebuild , force by handledelegate",1
mmm MediaStreamImpl . java <nl> ppp MediaStreamImpl . java <nl> - engineChain . add(zrtpControl . getZrtpEngine()) ; <nl> + csrcEngine = new CsrcTransformEngine(this) ; <nl> + engineChain . add(csrcEngine) ; <nl> - csrcEngine = new CsrcTransformEngine(this) ; <nl> - engineChain . add(csrcEngine) ; <nl> + engineChain . add(zrtpControl . getZrtpEngine()) ; <nl>,fix order of transformer in order to make zrtp work again,1
"mmm SparkInterpreterTest . java <nl> ppp SparkInterpreterTest . java <nl> + @Test <nl> + public void testDisableReplOutputForParagraph() throws InterpreterException { <nl> + Properties properties = new Properties() ; <nl> + properties . setProperty(""spark . master"", ""local"") ; <nl> + properties . setProperty(""spark . app . name"", ""test"") ; <nl> + properties . setProperty(""zeppelin . spark . maxResult"", ""100"") ; <nl> + properties . setProperty(""zeppelin . spark . printREPLOutput"", ""true"") ; <nl> + properties . setProperty(""zeppelin . spark . scala . color"", ""false"") ; <nl> + properties . setProperty(""zeppelin . spark . deprecatedMsg . show"", ""false"") ; <nl> + InterpreterContext <nl>",switch for enable spark repl output for each paragraph,0
"mmm AbstractSparkScalaInterpreter . java <nl> ppp AbstractSparkScalaInterpreter . java <nl> + public abstract ClassLoader getScalaShellClassLoader() ; <nl> mmm KotlinSparkInterpreter . java <nl> ppp KotlinSparkInterpreter . java <nl> + import org . apache . spark . sql . SQLContext ; <nl> - sparkInterpreter . getSQLContext(), <nl> + (SQLContext) sparkInterpreter . getSQLContext(), <nl> mmm PySparkInterpreter . java <nl> ppp PySparkInterpreter . java <nl> - public SQLContext getSQLContext() { <nl> + public Object getSQLContext() { <nl> mmm SparkInterpreter . java <nl> ppp SparkInterpreter . java <nl> - public SQLContext getSQLContext() { <nl> + public Object getSQLContext() { <nl> + public boolean isScala212() <nl>",codegen fail for sparkinterpreter,0
"mmm MeleeAttackGoal . java <nl> ppp MeleeAttackGoal . java <nl> + private final int range ; <nl> - public MeleeAttackGoal(@NotNull EntityCreature entityCreature, int delay, @NotNull TimeUnit timeUnit) { <nl> + public MeleeAttackGoal(@NotNull EntityCreature entityCreature, int delay, int range, @NotNull TimeUnit timeUnit) { <nl> + this . range = range ; <nl> - if (entityCreature . getBoundingBox() . intersect(target)) { <nl> + if (entityCreature . getDistance(target) <= range) { <nl>",add range to meleeattackgoal,0
"mmm ZSession . java <nl> ppp ZSession . java <nl> + public void login(String userName, String password) throws Exception { <nl> + this . zeppelinClient . login(userName, password) ; <nl> + } <nl>",add login for zsession,0
mmm TextUtils . java <nl> ppp TextUtils . java <nl> + public static boolean isEmpty(final String str) {,remove dependency on apache from scanner because of applet,1
"mmm LargeTrigramModel . java <nl> ppp LargeTrigramModel . java <nl> + System . out . println(""# of unigrams: "" loader . getNumberUnigrams()) ; <nl> + System . out . println(""# of  bigrams: "" loader . getNumberBigrams()) ; <nl> + System . out . println(""# of trigrams: "" loader . getNumberTrigrams()) ; <nl>",fix the largetrigrammodel so that it do not apply language weight and,1
"mmm SpatialSupport . java <nl> ppp SpatialSupport . java <nl> - additions . put(""PolyHedralSurface"", ""PolyhedralSurfacePath"") ; <nl> mmm GeometryPath . java <nl> ppp GeometryPath . java <nl> - private transient volatile PolyhedralSurfacePath<PolyHedralSurface> polyhedralSurface ; <nl> - public PolyhedralSurfacePath<PolyHedralSurface> asPolyHedralSurface() { <nl> - if (polyhedralSurface == null) { <nl> - polyhedralSurface = new PolyhedralSurfacePath<PolyHedralSurface>(pathMixin . getMetadata()) ; <nl> - } <nl> - return polyhedralSurface ; <nl> - } <nl> mmm GeometryPaths . java <nl> ppp GeometryPaths . java <nl> - <A extends PolyHedralSurface> PolyhedralSurfacePath<A> createPolyhedralSurface(String property, Class<? extends A> type) ; <nl> deleted file <nl> mmm PolyhedralSurfaceExpression . java <nl> <nl>",upgrade geolatte to 1.4.0,0
"mmm FlinkStreamSqlInterpreter . java <nl> ppp FlinkStreamSqlInterpreter . java <nl> - String streamType = context . getLocalProperties() . get(""type"") ; <nl> - if (streamType == null) { <nl> - throw new IOException(""type must be specified for stream sql"") ; <nl> - } <nl> + String streamType = context . getLocalProperties() . getOrDefault(""type"", ""update"") ; <nl> mmm FlinkInterpreterTest . java <nl> ppp FlinkInterpreterTest . java <nl> - context . getLocalProperties() . put(""type"", ""update"") ; <nl> - context . getLocalProperties() . put(""type"", ""update"") ; <nl> - context . getLocalProperties() . put(""type"", ""update"") ; <nl> - context . getLocalProperties() . put(""type"", ""update"") <nl>",use update a the default type of % flink.ssql,0
"mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> + k8sProperties . put(""zeppelin . k8s . interpreter . user"", String . valueOf(userName) . trim()) ; <nl> mmm K8sRemoteInterpreterProcessTest . java <nl> ppp K8sRemoteInterpreterProcessTest . java <nl> + assertEquals(""null"", p . get(""zeppelin . k8s . interpreter . user"")) ; <nl> + assertEquals(""mytestUser"", p . get(""zeppelin . k8s . interpreter . user"")) ; <nl>",add k8s interpreter user a a label,0
"deleted file <nl> mmm FMJConditionals . java <nl> - package net . java . sip . communicator . impl . neomedia ; <nl> - import javax . media . format . * ; <nl> - public class FMJConditionals <nl> - { <nl> - public static final boolean IS_FMJ = false ; <nl> - public static final boolean FMJ_CODECS = IS_FMJ ; <nl> - public static final AudioFormat FORCE_AUDIO_FORMAT = !IS_FMJ <nl> - ? null <nl> - : new AudioFormat(AudioFormat . ULAW_RTP, 8000, 8, 1) ; <nl> - public static final boolean USE_JMF_INTERNAL_REGISTRY = !IS_FMJ ; <nl> - } <nl> <nl>","fix a concurrentmodificationexception in srtptransformer report by emil ivov , an arrayindexoutofboundsexception in calljabberimpl remove fmjconditionals because fmj be always use anyway",1
deleted file <nl> mmm KnitR . java <nl> - package org . apache . zeppelin . rinterpreter ; <nl> - import org . apache . zeppelin . interpreter . * ; <nl> - import org . apache . zeppelin . interpreter . thrift . InterpreterCompletion ; <nl> - import org . apache . zeppelin . scheduler . Scheduler ; <nl> - import java . net . URL ; <nl> - import java . util . List ; <nl> - import java . util . Properties ; <nl> - public class KnitR extends Interpreter implements WrappedInterpreter { <nl> - KnitRInterpreter <nl>,remove deprecate r module,0
mmm SingleInstanceManager . java <nl> ppp SingleInstanceManager . java <nl> - final int state = UITools . getFrame() . getExtendedState() ; <nl> + final Frame frame = UITools . getFrame() ; <nl> + if(frame == null) <nl> + return ; <nl> + final int state = frame . getExtendedState() ; <nl> - UITools . getFrame() . setExtendedState(state & ~Frame . ICONIFIED) ; <nl> - if (!UITools . getFrame() . isVisible()) <nl> - UITools . getFrame() . setVisible(true) ; <nl> - UITools . getFrame() . toFront() ; <nl> - UITools . getFrame() . requestFocus() ; <nl> + frame . setExtendedState(state <nl>,fix npe if no frame can be find by singleinstancemanager,0
mmm MediaActivator . java <nl> ppp MediaActivator . java <nl> - mediaServiceImpl . stop() ; <nl> - mediaServiceRegistration . unregister() ; <nl> + if (mediaServiceImpl != null) <nl> + { <nl> + mediaServiceImpl . stop() ; <nl> + mediaServiceImpl = null ; <nl> + } <nl> + if (mediaServiceRegistration != null) <nl> + { <nl> + mediaServiceRegistration . unregister() ; <nl> + mediaServiceRegistration = null ; <nl> + } <nl>,fix the legacy medium bundle to not throw exception on stop because it start have n't register the mediaservice,1
"mmm SimpleCommand . java <nl> ppp SimpleCommand . java <nl> + import fr . themode . demo . generator . ChunkGeneratorDemo ; <nl> + import net . minestom . server . MinecraftServer ; <nl> - import net . minestom . server . entity . EntityCreature ; <nl> + import net . minestom . server . world . Dimension ; <nl> - return ""follow"" ; <nl> + return ""test"" ; <nl> - for (EntityCreature creature : instance . getCreatures()) { <nl> + Instance inst = MinecraftServer . getInstanceManager() . createInstanceContainer(Dimension . NETHER) ; <nl> + inst . enableAutoChunkLoad(true) ; <nl> <nl>",add dimension support,0
"mmm SpatialSupport . java <nl> ppp SpatialSupport . java <nl> + typeMappings . register( <nl> + new SimpleType(""org . locationtech . jts . geom . "" entry . getKey()), <nl> + new SimpleType(""com . querydsl . spatial . locationtech . jts . "" entry . getValue())) ; <nl> new file <nl> ppp JTSCurveExpression . java <nl> + package com . querydsl . spatial . locationtech . jts ; <nl> + import com . querydsl . core . types . Expression ; <nl> + import com . querydsl . core . types . dsl . BooleanExpression ; <nl> + import <nl>",support org.locationtech : jts in codegen,0
"mmm KeyPurposeId . java <nl> ppp KeyPurposeId . java <nl> + public static final KeyPurposeId id_kp_msSGC = new KeyPurposeId(new ASN1ObjectIdentifier(""1 . 3 . 6 . 1 . 4 . 1 . 311 . 10 . 3 . 3"")) ; <nl> + public static final KeyPurposeId id_kp_nsSGC = new KeyPurposeId(new ASN1ObjectIdentifier(""2 . 16 . 840 . 1 . 113730 . 4 . 1"")) ; <nl> mmm ESTService . java <nl> ppp ESTService . java <nl> - import java . io . UnsupportedEncodingException ; <nl> - import java . net . URLEncoder ; <nl> + import java . util . HashSet <nl>",refactoring of est,0
"mmm Player . java <nl> ppp Player . java <nl> + import fr . themode . minestom . instance . Chunk ; <nl> + import fr . themode . minestom . net . packet . server . play . PlayerPositionAndLookPacket ; <nl> + public boolean chunkTest(double x, double z) { <nl> + Chunk newChunk = getInstance() . getChunk((int) Math . floor(x / 16), (int) Math . floor(z / 16)) ; <nl> + if (newChunk == null) { <nl> + PlayerPositionAndLookPacket positionAndLookPacket = new PlayerPositionAndLookPacket() ; <nl> + positionAndLookPacket . x = getX() ; <nl> + positionAndLookPacket . y = <nl>",prevent from go on unloaded chunk,0
"mmm HTMLStripCharFilterTest . java <nl> ppp HTMLStripCharFilterTest . java <nl> - import org . apache . lucene . util . _TestUtil ; <nl> + import org . apache . lucene . util . TestUtil ; <nl> - String text = _TestUtil . randomHtmlishString(random(), maxNumElements) ; <nl> + String text = TestUtil . randomHtmlishString(random(), maxNumElements) ; <nl> - int numWords = _TestUtil . nextInt(random(), minNumWords, maxNumWords) ; <nl> - switch (_TestUtil . nextInt(random(), 0, 4)) { <nl> + int numWords = TestUtil . nextInt(random(), minNumWords, maxNumWords) ; <nl> + switch (TestUtil . nextInt(random(), 0, 4)) { <nl> - text . <nl>",rename _testutil to testutil,0
mmm CommandRunner . java <nl> ppp CommandRunner . java <nl> + import org . springframework . boot . cli . command . test . TestFailedException ; <nl> + catch(TestFailedException e) { <nl> + return 1 ; <nl> + } <nl> new file <nl> ppp TestFailedException . java <nl> + package org . springframework . boot . cli . command . test ; <nl> + public class TestFailedException extends RuntimeException { <nl> + public TestFailedException(Throwable cause) { <nl> + super(cause) ; <nl> + } <nl> + } <nl> mmm TestRunner . java <nl> ppp TestRunner . java <nl> + import <nl>,propagate exception / test failure so that the correct status code be return,1
"mmm CallSipImpl . java <nl> ppp CallSipImpl . java <nl> - import java . beans . * ; <nl> - import net . java . sip . communicator . service . neomedia . * ; <nl> - { <nl> + { <nl> - public void setLocalVideoAllowed(boolean allowed, MediaUseCase useCase) <nl> - throws OperationFailedException <nl> - { <nl> - this . localVideoAllowed = allowed ; <nl> - mediaUseCase = useCase ; <nl> - Iterator<CallPeerSipImpl> peers = getCallPeers() ; <nl> - while (peers . hasNext()) <nl> - { <nl> - CallPeerSipImpl peer = peers . next() ; <nl> - peer . <nl>",,1
"mmm FlinkSqlInterrpeter . java <nl> ppp FlinkSqlInterrpeter . java <nl> - List<String> sqls = sqlSplitter . splitSql(st) ; <nl> + List<String> sqls = sqlSplitter . splitSql(st) . stream() . map(String::trim) . collect(Collectors . toList()) ; <nl> mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> - import java . util . Collections ; <nl> - static final String SPLIT_QURIES_KEY = ""splitQueries"" ; <nl> - boolean splitSql = Boolean . parseBoolean(getJDBCConfiguration(user) <nl> -  . getPropertyMap(dbPrefix) <nl> -  . getProperty(SPLIT_QURIES_KEY, ""true"")) ; <nl> - List<String> sqlArray = null ; <nl> - if (splitSql) { <nl> - sqlArray = <nl>",incorrect line number in error message of hive interpreter,0
mmm FlinkSqlInterrpeter . java <nl> ppp FlinkSqlInterrpeter . java <nl> + import org . apache . flink . configuration . ConfigOption ; <nl> + import org . apache . flink . python . PythonConfig ; <nl> + import org . apache . flink . python . PythonOptions ; <nl> + import org . apache . flink . table . api . config . OptimizerConfigOptions ; <nl> - import java . io . File ; <nl> + import java . lang . reflect . Field ; <nl> + import java . util . HashMap ; <nl> + import java . <nl>,support set statement in flink sql,0
"mmm NodeView . java <nl> ppp NodeView . java <nl> - final static boolean PAINT_DEBUG_BORDER = System . getProperty(""org . freeplane . view . swing . map . NodeView . PAINT_DEBUG_BORDER"", ""false"") . equalsIgnoreCase(""true"") ; <nl> + final static boolean PAINT_DEBUG_BORDER ; <nl> + static{ <nl> + boolean paintDebugBorder = false ; <nl> + try{ <nl> + paintDebugBorder = System . getProperty(""org . freeplane . view . swing . map . NodeView . PAINT_DEBUG_BORDER"", ""false"") . equalsIgnoreCase(""true"") ; <nl> + } <nl> + catch(Exception e){ <nl> + } <nl> + PAINT_DEBUG_BORDER = paintDebugBorder ; <nl> + } ; <nl>",applet may not check system property,0
"mmm ResourceController . java <nl> ppp ResourceController . java <nl> - private static boolean protocolHandlerSet = false ; <nl> - if(protocolHandlerSet) <nl> - return ; <nl> - protocolHandlerSet = true ; <nl> - final String oldHandler = System . getProperty(""java . protocol . handler . pkgs"") ; <nl> - String newHandler = ""org . freeplane . core . resources . protocols"" ; <nl> - if(oldHandler != null) <nl> - newHandler = oldHandler + '|' + newHandler ; <nl> - System . setProperty(""java . protocol . handler . pkgs"", newHandler) ; <nl> mmm FreeplaneMain . java <nl> ppp FreeplaneMain . <nl>",remove url protocol freeplaneresources from applet because of java security policy and security exception,1
"mmm BaseSqliteTest . java <nl> ppp BaseSqliteTest . java <nl> - StandardCharsets . UTF_8)) ; <nl> + StandardCharsets . UTF_8), <nl> + false) ; <nl> mmm SchemaCreator . java <nl> ppp SchemaCreator . java <nl> + boolean runEntireScript = false ; <nl> + if (scriptResource . startsWith(""~"")) <nl> + { <nl> + scriptResource = scriptResource . substring(1) ; <nl> + runEntireScript = true ; <nl> + } <nl> - reader) ; <nl> + reader, <nl> + runEntireScript) ; <nl> mmm SqlScript . java <nl> ppp SqlScript . java <nl> + import java . io . IOException ; <nl> + <nl>","add ability to run a sql without automatic break up of sql statement , so that trigger can be run",1
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> + public boolean getZeppelinImpersonateSparkProxyUser() { <nl> + return getBoolean(ConfVars . ZEPPELIN_IMPERSONATE_SPARK_PROXY_USER) ; <nl> + } <nl> + ZEPPELIN_IMPERSONATE_SPARK_PROXY_USER(""zeppelin . impersonate . spark . proxy . user"", true), <nl> mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> + import org . apache . zeppelin . conf . ZeppelinConfiguration ; <nl> - private static final Logger LOGGER = LoggerFactory . getLogger(K8sStandardInterpreterLauncher . class) ; <nl> + private static final Logger LOGGER = LoggerFactory . getLogger(K8sRemoteInterpreterProcess . <nl>",user impersonation via -proxy-user for spark interpreter with k8s,0
"mmm DeviceConfiguration . java <nl> ppp DeviceConfiguration . java <nl> - firePropertyChange(AUDIO_PLAYBACK_DEVICE,  <nl> + firePropertyChange(AUDIO_PLAYBACK_DEVICE, <nl> mmm PortAudioAuto . java <nl> ppp PortAudioAuto . java <nl> + String devName = PortAudio . PaDeviceInfo_getName(deviceInfo) ; <nl> + if (devName != null) <nl> + devName = devName . trim() ; <nl> - PortAudio . PaDeviceInfo_getName(deviceInfo), <nl> + devName, <nl>",trim port audio device name so that they would match whatever we store in our property file,1
"mmm AngularObjectId . java <nl> ppp AngularObjectId . java <nl> - @javax . annotation . Generated(value = ""Autogenerated by Thrift Compiler (0 . 12 . 0)"", date = ""2019-06-10"") <nl> + @javax . annotation . Generated(value = ""Autogenerated by Thrift Compiler (0 . 13 . 0)"", date = ""2020-01-06"") <nl> mmm AppOutputAppendEvent . java <nl> ppp AppOutputAppendEvent . java <nl> - @javax . annotation . Generated(value = ""Autogenerated by Thrift Compiler (0 . 12 . 0)"", date = ""2019-06-10"") <nl> + @javax . annotation . Generated(value = ""Autogenerated by Thrift Compiler (0 . 13 . 0)"", date = ""2020-01-06"") <nl>",upgrade thrift to 0.13,0
"mmm CrshAutoConfiguration . java <nl> ppp CrshAutoConfiguration . java <nl> + import org . springframework . boot . autoconfigure . security . SecurityAutoConfiguration ; <nl> - @AutoConfigureAfter(ManagementSecurityAutoConfiguration . class) <nl> + @AutoConfigureAfter({ SecurityAutoConfiguration . class, <nl> + ManagementSecurityAutoConfiguration . class }) <nl>",pin order to of crsh auto configuration to happen after any security relate configuration,1
mmm ViewController . java <nl> ppp ViewController . java <nl> + import org . freeplane . features . common . styles . StyleNamedObject ;,"bug fix in atribute table , renderer , panel manager",0
"mmm FlinkIntegrationTest . java <nl> ppp FlinkIntegrationTest . java <nl> + flinkInterpreterSetting . setProperty(""zeppelin . flink . run . asLoginUser"", ""false"") ; <nl> + flinkInterpreterSetting . setProperty(""zeppelin . flink . run . asLoginUser"", ""false"") ; <nl> mmm FlinkInterpreterLauncher . java <nl> ppp FlinkInterpreterLauncher . java <nl> + String flinkExecutionMode = context . getProperties() . getProperty(""flink . execution . mode"") ; <nl> - if (""yarn-application"" . equalsIgnoreCase( <nl> - context . getProperties() . getProperty(""flink . execution . mode""))) { <nl> + if (""yarn-application"" . equalsIgnoreCase(flinkExecutionMode)) { <nl> + if (""yarn"" . equalsIgnoreCase(flinkExecutionMode) || <nl> + ""yarn-application"" . equalsIgnoreCase(flinkExecutionMode)) { <nl> <nl>",run flink job a the login user in yarn mode,0
"mmm PythonInterpreter . java <nl> ppp PythonInterpreter . java <nl> - if (condaPythonExec != null) { <nl> + String condaEnv = getProperty(""zeppelin . interpreter . conda . env . name"") ; <nl> + if (StringUtils . isNotBlank(condaEnv)) { <nl> + return condaEnv ""/bin/python"" ; <nl> + } else if (condaPythonExec != null) { <nl> mmm JupyterKernelInterpreter . java <nl> ppp JupyterKernelInterpreter . java <nl> + import org . apache . commons . exec . DefaultExecutor ; <nl> + import org . apache . commons . exec . PumpStreamHandler ; <nl> + import java . io . ByteArrayOutputStream ; <nl> <nl>",support conda env for python interpreter in yarn mode,0
mmm TestBase . java <nl> ppp TestBase . java <nl> - import junit . framework . TestCase ;,"re-doing dependency , so that we can create a distribution project",1
"mmm SpectrumAnalyzer . java <nl> ppp SpectrumAnalyzer . java <nl> - inputSeq[i]= new Complex((double) in[i]) ; <nl> + inputSeq[i]= new Complex(in[i]) ; <nl> - new Complex((double) in[i])) ; <nl> + new Complex(in[i])) ; <nl> - inputSeq[i] = new Complex((double) in[i]) ; <nl> + inputSeq[i] = new Complex(in[i]) ; <nl> - double[] outputSpectrum = new double[NPoint] ; <nl> + double[] outputSpectrum = new double[NPoint >> 1] ; <nl> - windowSize = Util . getSamplesPerWindow(sampleRate, windowSizeInMs) ; <nl> + windowSize = Util . getSamplesPerWindow(sampleRate, windowSizeInMs) ; <nl> - NPoint = properties . getInt(FrontEnd . PROP_FFT_NPOINT, 256) ; <nl> + NPoint = <nl>","fix bug in complex and spectrumanalyzer , so that now the power is done",1
mmm MMouseMotionListener . java <nl> ppp MMouseMotionListener . java <nl> - if (Shape . EDGE_LIKE . equals(arrowLinkModel . getShape())) {,do not allow to move line shape connector by drag,0
mmm Reader . java <nl> ppp Reader . java <nl> - ApplicationPath applicationPath = application . getClass() . getAnnotation(ApplicationPath . class) ; <nl> + Class<?> applicationToScan = this . application . getClass() ; <nl> + ApplicationPath applicationPath ; <nl> + while ((applicationPath = applicationToScan . getAnnotation(ApplicationPath . class)) == null && !applicationToScan . getSuperclass() . equals(Application . class)) { <nl> + applicationToScan = applicationToScan . getSuperclass() ; <nl> + } <nl>,improve reader so it scan up in the hierarchy for @ applicationpath annotation in order to work properly with weld proxy,1
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> - import org . apache . commons . lang3 . mutable . MutableBoolean ; <nl> + import java . util . concurrent . ScheduledExecutorService ; <nl> + import java . util . concurrent . atomic . AtomicReference ; <nl> + private Map<String, ScheduledExecutorService> refreshExecutorServices = new HashMap<>() ; <nl> + private Map<String, Boolean> paragraphCancelMap = new HashMap<>() ; <nl> - private String getResults(ResultSet resultSet, boolean isTableType, MutableBoolean isComplete) <nl> + private String getResults(ResultSet resultSet, <nl> + boolean isTableType, <nl> + String template) <nl> + if (template != null) { <nl>",support real time dashboard for jdbc interpreter,0
"mmm ZeppelinServer . java <nl> ppp ZeppelinServer . java <nl> + import org . eclipse . jetty . websocket . jsr356 . server . deploy . WebSocketServerContainerInitializer ; <nl> + LOG . info(""Instantiated ZeppelinServer"") ; <nl> - final ServletHolder servletHolder = <nl> - new ServletHolder(serviceLocator . getService(NotebookServer . class)) ; <nl> - servletHolder . setInitParameter(""maxTextMessageSize"", maxTextMessageSize) ; <nl> - webapp . addServlet(servletHolder, ""/ws/*"") ; <nl> + WebSocketServerContainerInitializer <nl> +  . configure(webapp, (servletContext, wsContainer) -> { <nl> + wsContainer . setDefaultMaxTextMessageBufferSize(Integer . parseInt(maxTextMessageSize)) ; <nl> + wsContainer . addEndpoint(NotebookServer . class) ; <nl> + }) ; <nl> mmm ConnectionManager <nl>",adopt jsr356 for websocket,0
mmm GenericScope . java <nl> ppp GenericScope . java <nl> + root . getConstructorArgumentValues() . addGenericArgumentValue(this) ; <nl> + protected ReadWriteLock getLock(String beanName) { <nl> + return locks . get(beanName) ; <nl> + } <nl> - public class LockedScopedProxyFactoryBean extends ScopedProxyFactoryBean <nl> - implements MethodInterceptor { <nl> + public static class LockedScopedProxyFactoryBean<S extends GenericScope> <nl> + extends ScopedProxyFactoryBean implements MethodInterceptor { <nl> + private final S scope ; <nl> + public LockedScopedProxyFactoryBean(S scope) { <nl> + this . scope = scope ; <nl> + } <nl> - Lock lock = locks . get(this . targetBeanName) . readLock() ; <nl> <nl>,fix genericscope so that multiple subclass can live in the same context inner class can not resolve parent bean,1
"mmm AbstractVisitingPrefixTreeFilter . java <nl> ppp AbstractVisitingPrefixTreeFilter . java <nl> - import org . apache . lucene . spatial . prefix . tree . Node ; <nl> + import org . apache . lucene . spatial . prefix . tree . Cell ; <nl> - private Node scanCell ; <nl> + private Cell scanCell ; <nl> - curVNode . reset(grid . getWorldNode()) ; <nl> + curVNode . reset(grid . getWorldCell()) ; <nl> - Node cell = curVNode . cell ; <nl> + Cell cell = curVNode . cell ; <nl> - scanCell = grid . getNode(thisTerm . bytes, thisTerm <nl>",rename spatial node back to cell,0
mmm SvgViewerFactory . java <nl> ppp SvgViewerFactory . java <nl> - import org . freeplane . view . swing . addins . filepreview . ExternalResource ;,fix package import,0
"deleted file <nl> mmm AlsaStream . java <nl> - package net . java . sip . communicator . impl . neomedia . protocol . alsa ; <nl> - import javax . media . * ; <nl> - import javax . media . format . * ; <nl> - import javax . media . protocol . * ; <nl> - import java . io . IOException ; <nl> - public class AlsaStream <nl> - implements PushBufferStream, Runnable <nl> - { <nl> - protected ContentDescriptor cd = new ContentDescriptor(ContentDescriptor . RAW) ; <nl> - protected int maxDataLength ; <nl> - protected <nl>",second big move of package create jmfext in order to keep jmf requirenment for package name of datasources and separate portaudio class in neomedia.portaudio package,1
new file <nl> ppp SparkSubmitInterpreter . java <nl> + package org . apache . zeppelin . spark ; <nl> + import org . apache . zeppelin . interpreter . InterpreterContext ; <nl> + import org . apache . zeppelin . interpreter . InterpreterOutput ; <nl> + import org . apache . zeppelin . interpreter . InterpreterOutputListener ; <nl> + import org . apache . zeppelin . interpreter . InterpreterResult ; <nl> + import org . apache . zeppelin . interpreter . InterpreterResultMessageOutput ; <nl> + import org . apache . zeppelin . shell . ShellInterpreter ; <nl> + import <nl>,support spark-submit in spark interpreter,0
mmm TransferCallButton . java <nl> ppp TransferCallButton . java <nl> - dialog . setModalityType(Dialog . ModalityType . DOCUMENT_MODAL) ; <nl> + dialog . setModal(true) ; <nl> - if ((target != null) && !target . isEmpty()) <nl> + if ((target != null) && (target . length() > 0)) <nl> mmm TransferCallDialog . java <nl> ppp TransferCallDialog . java <nl> - return ((target == null) || target . isEmpty()) ? null : target ;,fix java 1.5 compatibility break in r4409 because of use of java 1.6 api,1
"mmm MainView . java <nl> ppp MainView . java <nl> + import org . freeplane . core . util . LogUtils ; <nl> + LogUtils . warn(e . getMessage(), e) ; <nl>",make sure that formula error get log,0
"mmm DnsRecordIpAddressResolver . java <nl> ppp DnsRecordIpAddressResolver . java <nl> - addresses . add(new ResolvedInetAddress(inetAddress, portNumber)) ; <nl> + addresses . add(new ResolvedInetAddress(hostName, inetAddress, portNumber)) ; <nl> mmm ResolvedInetAddress . java <nl> ppp ResolvedInetAddress . java <nl> - public ResolvedInetAddress(InetAddress inetAddress, int port) { <nl> - super(inetAddress . getHostAddress(), port) ; <nl> + public ResolvedInetAddress(String originalHostname, InetAddress inetAddress, int port) { <nl> + super(originalHostname, port) ; <nl> - public ResolvedInetAddress(InetAddress inetAddress) { <nl> - super(inetAddress . getHostAddress()) ; <nl> + public ResolvedInetAddress(String originalHostname, InetAddress inetAddress) { <nl> + super(originalHostname) ; <nl> mmm SocketFrameHandlerFactory . java <nl> ppp SocketFrameHandlerFactory . <nl>",preserve original hostname in resolvedinetaddress so that we can pass it into createsslengine in nio mode,1
"mmm SparkInterpreterTest . java <nl> ppp SparkInterpreterTest . java <nl> + context = getInterpreterContext() ; <nl> + result = interpreter . interpret(""case class Person(id:Int, name:String, age:Int, country:String)\n"" + <nl> + ""val df2 = spark . createDataFrame(Seq(Person(1, \""andy\"", 20, \""USA\""), "" + <nl> + ""Person(2, \""jeff\"", 23, \""China\""), Person(3, \""james\"", 18, \""USA\"")))\n"" + <nl> + ""df2 . printSchema\n"" + <nl> + ""df2 . show() "", context) ; <nl> + assertEquals(InterpreterResult . Code . SUCCESS, result . code()) ; <nl>",unable to create dataset from case class in spark interpreter,0
"mmm NewAccountDialog . java <nl> ppp NewAccountDialog . java <nl> - private final Logger logger = Logger . getLogger(NewAccountDialog . class) ; <nl> + private static final Logger logger <nl> + = Logger . getLogger(NewAccountDialog . class) ; <nl> - this . setTitle(GuiActivator . getResources() <nl> -  . getI18NString(""service . gui . NEW_ACCOUNT"")) ; <nl> + String title <nl> + = GuiActivator . getResources() . getI18NString( <nl> + ""service . gui . NEW_ACCOUNT"") ; <nl> + if ((title != null) && title . endsWith("" .  .  . "")) <nl> + title = title . substring(0, title <nl>",add ellipsis to the add new account menu item because it dialog require user input,1
mmm JSR310InstantTypeTest . java <nl> ppp JSR310InstantTypeTest . java <nl> - Timestamp ts = new Timestamp(value . toEpochMilli()) ; ; <nl> + Timestamp ts = new Timestamp(value . toEpochMilli()) ; <nl>,rm extra semicolon,0
"mmm AbstractPacketExtension . java <nl> ppp AbstractPacketExtension . java <nl> - public List<PacketExtension> getChildElements() <nl> + public List<? extends PacketExtension> getChildElements() <nl> - public void setAttribtue(String name, Object value) <nl> + public void setAttribute(String name, Object value) <nl> - public void removeAttribtue(String name) <nl> + public void removeAttribute(String name) <nl> - public Object getAttribtue(String attribute) <nl> + public Object getAttribute(String attribute) <nl> mmm CryptoPacketExtension . java <nl> ppp CryptoPacketExtension . java <nl> - super . setAttribtue(CRYPTO_SUITE_ARG_NAME, cryptoSuite) ; <nl> + super . setAttribute(CRYPTO_SUITE_ARG_NAME, cryptoSuite) ; <nl> - super . setAttribtue(KEY_PARAMS_ARG_NAME, keyParams) ; <nl> + super . setAttribute(KEY_PARAMS_ARG_NAME, keyParams) ; <nl>",modifies encryptionpacketextension so that it would now extend abstractpacketextension,1
mmm PlayerInit . java <nl> ppp PlayerInit . java <nl> - import fr . themode . demo . entity . ChickenCreature ; <nl> - ChickenCreature chickenCreature = new ChickenCreature(player . getPosition()) ; <nl> - chickenCreature . setInstance(player . getInstance()) ; <nl> - player . setGameMode(GameMode . SURVIVAL) ; <nl> + player . setGameMode(GameMode . CREATIVE) ; <nl> mmm MinecraftServer . java <nl> ppp MinecraftServer . java <nl> + import fr . themode . minestom . registry . RegistryMain ; <nl> + RegistryMain . registerBlocks() ; <nl> mmm BlockModifier . java <nl> ppp BlockModifier . java <nl> + import fr <nl>,add block registry,0
"mmm FreeplaneToolBar . java <nl> ppp FreeplaneToolBar . java <nl> - import java . awt . Dimension ; <nl> - import org . freeplane . features . icon . factory . IconFactory ; <nl> - private static final int TOOLBAR_BUTTON_SIZE_1D = IconFactory . DEFAULT_UI_ICON_HEIGTH . toBaseUnitsRounded() + 2 ; <nl> - private static final Dimension DEFAULT_TOOLBAR_BUTTON_SIZE = new Dimension(TOOLBAR_BUTTON_SIZE_1D, TOOLBAR_BUTTON_SIZE_1D) ; <nl> - final Dimension buttonSize = DEFAULT_TOOLBAR_BUTTON_SIZE ; <nl> - abstractButton . setPreferredSize(buttonSize) ; <nl>",do not try to modify look and feel button size under mac o because it,1
"mmm FlinkSqlInterrpeter . java <nl> ppp FlinkSqlInterrpeter . java <nl> + import org . apache . zeppelin . interpreter . AbstractInterpreter ; <nl> + import org . apache . zeppelin . interpreter . ZeppelinContext ; <nl> - public abstract class FlinkSqlInterrpeter extends Interpreter { <nl> + public abstract class FlinkSqlInterrpeter extends AbstractInterpreter { <nl> - public InterpreterResult interpret(String st, <nl> - InterpreterContext context) throws InterpreterException { <nl> + protected InterpreterResult internalInterpret(String st, InterpreterContext context) throws InterpreterException { <nl> - flinkInterpreter . getZeppelinContext() . setInterpreterContext(context) ; <nl> - flinkInterpreter . getZeppelinContext() . setNoteGui(context . getNoteGui()) ; <nl> - flinkInterpreter . <nl>",make flinksqlinterpreter extend abstractinterpreter,0
"mmm MIconController . java <nl> ppp MIconController . java <nl> - actions . add(modeController . getAction(""ProgressUpAction"")) ; <nl> - actions . add(modeController . getAction(""ProgressDownAction"")) ; <nl> - actions . add(modeController . getAction(""ExtendedProgress10Action"")) ; <nl> - actions . add(modeController . getAction(""ExtendedProgress25Action"")) ; <nl>",bug fix : preference popup do not open,0
"mmm ForkMainView . java <nl> ppp ForkMainView . java <nl> - final Point in = new Point(0, getHeight() + edgeWidth / 2 1) ; <nl> + final Point in = new Point(0, getHeight() edgeWidth / 2) ; <nl> - edgeWidth = style . getNodeLineWidth(edgeWidth) ; <nl> - final Point in = new Point(getWidth() 1, getHeight() + edgeWidth / 2 1) ; <nl> + edgeWidth = nodeView . getMap() . getZoomed(style . getNodeLineWidth(edgeWidth)) ; <nl> + final Point in = new Point(getWidth() - 1, getHeight() edgeWidth / 2) ; <nl> - UITools . convertPointToAncestor(this, leftLinePoint, nodeView) ; <nl> + super <nl>",bug fix in paint forkmainview,0
"mmm FlinkIntegrationTest . java <nl> ppp FlinkIntegrationTest . java <nl> + import org . apache . zeppelin . interpreter . ExecutionContext ; <nl> - Interpreter flinkInterpreter = interpreterFactory . getInterpreter(""user1"", ""note1"", ""flink"", ""flink"") ; <nl> + Interpreter flinkInterpreter = interpreterFactory . getInterpreter(""flink"", new ExecutionContext(""user1"", ""note1"", ""flink"")) ; <nl> mmm JdbcIntegrationTest . java <nl> ppp JdbcIntegrationTest . java <nl> + import org . apache . zeppelin . interpreter . ExecutionContext ; <nl> - Interpreter jdbcInterpreter = interpreterFactory . getInterpreter(""user1"", ""note1"", ""jdbc"", ""test"") ; <nl> + Interpreter jdbcInterpreter = interpreterFactory . getInterpreter(""jdbc"", new ExecutionContext(""user1"", ""note1"", ""test"")) ; <nl> - Interpreter pythonInterpreter <nl>",use isolate interpreter for cron note job,0
mmm HazelcastSessionConfiguration . java <nl> ppp HazelcastSessionConfiguration . java <nl> + import org . springframework . core . Ordered ; <nl> + import org . springframework . core . annotation . Order ; <nl> + @Order(Ordered . HIGHEST_PRECEDENCE) <nl> mmm MongoSessionConfiguration . java <nl> ppp MongoSessionConfiguration . java <nl> + import org . springframework . core . Ordered ; <nl> + import org . springframework . core . annotation . Order ; <nl> + @Order(Ordered . HIGHEST_PRECEDENCE) <nl> mmm RedisSessionConfiguration . java <nl> ppp RedisSessionConfiguration . java <nl> + import org . springframework . core . Ordered ; <nl> <nl>,order default customizers so that they can be overridden,1
"mmm FlinkBatchSqlInterpreter . java <nl> ppp FlinkBatchSqlInterpreter . java <nl> - this . tbenv_2 = flinkInterpreter . getJavaBatchTableEnvironment(""flink"") ; <nl> - flinkInterpreter . getJobManager() . cancelJob(context) ; <nl> + flinkInterpreter . cancel(context) ; <nl> mmm FlinkInterpreter . java <nl> ppp FlinkInterpreter . java <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> + import org . apache . flink . runtime . jobgraph . SavepointConfigOptions ; <nl> + import org . apache . flink . table . api . config . ExecutionConfigOptions ; <nl> + createPlannerAgain() ; <nl> + setParallelismIfNecessary(context) ; <nl> + setSavePointIfNecessary(context) <nl>",support savepoint for insert statement and non-sql paragraph,0
"mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> + private Random rand = new Random() ; <nl> + private static final String SPARK_DRIVER_MEMROY = ""spark . driver . memory"" ; <nl> + private static final String SPARK_DRIVER_MEMROY_OVERHEAD = ""spark . driver . memoryOverhead"" ; <nl> + private static final String SPARK_DRIVER_CORES = ""spark . driver . cores"" ; <nl> + private static final String ENV_SERVICE_DOMAIN = ""SERVICE_DOMAIN"" ; <nl> - envs . put(""SERVICE_DOMAIN"", envs . getOrDefault(""SERVICE_DOMAIN"", System . getenv(""SERVICE_DOMAIN""))) ; <nl> + envs . put(ENV_SERVICE_DOMAIN, envs . getOrDefault(ENV_SERVICE_DOMAIN, System . getenv(ENV_SERVICE_DOMAIN))) ; <nl> - envs . get(""SERVICE_DOMAIN"") <nl>",use spark resource configuration,0
mmm EdgeController . java <nl> ppp EdgeController . java <nl> + if (styleColor == null) {,bug fix for obtain edge style information,0
"mmm PlayerInit . java <nl> ppp PlayerInit . java <nl> + -            Sidebar scoreboard = new Sidebar(""Scoreboard Title"") ; <nl> - for (int i = 0 ; i < 15 ; i++) { <nl> - scoreboard . createLine(new Sidebar . ScoreboardLine(""id"" + i, ""Hey guys "" + i, i)) ; <nl> - } <nl> - scoreboard . addViewer(this) ; <nl> - scoreboard . updateLineContent(""id3"", ""I HAVE BEEN UPDATED"") ; <nl> + player . addEventCallback(PlayerRespawnEvent . class, event -> { <nl> + event . setRespawnPosition(new Position(0f, 70f, 0f)) ; <nl>",add a lot of comment,0
"mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> + import org . apache . commons . lang3 . RandomStringUtils ; <nl> - this . podName = interpreterGroupName . toLowerCase() + ""-"" + K8sUtils . getRandomPodSuffix(6) ; <nl> + this . podName = interpreterGroupName . toLowerCase() ""-"" <nl> + RandomStringUtils . randomAlphabetic(6) . toLowerCase() ; <nl> mmm K8sUtils . java <nl> ppp K8sUtils . java <nl> - import java . util . Random ; <nl> - private static final Random rand = new Random() ; <nl> - public static String getRandomPodSuffix(int length) { <nl> - char[] chars = <nl>",use randomstringutils from apache-commons-lang3,0
"mmm SparkInterpreterTest . java <nl> ppp SparkInterpreterTest . java <nl> - } else if (version . contains(""String = 2 . "")) { <nl> + } else { <nl> - result = interpreter . interpret(""z . show(df)"", getInterpreterContext()) ; <nl> - assertEquals(InterpreterResult . Code . SUCCESS, result . code()) ; <nl> + context = getInterpreterContext() ; <nl> + result = interpreter . interpret(""z . show(df)"", context) ; <nl> + assertEquals(context . out . toString(), InterpreterResult . Code . SUCCESS, result . code()) ; <nl> mmm SparkSqlInterpreterTest . java <nl> ppp SparkSqlInterpreterTest . java <nl> - context = InterpreterContext . builder() <nl>",add build profile for spark-3.1,0
"mmm RealisticRenderStrategy . java <nl> ppp RealisticRenderStrategy . java <nl> + import javax . media . opengl . GLAutoDrawable ; <nl> - public void clearCaches() { <nl> + public void updateFigure() { <nl> + @Override <nl> + public void init(GLAutoDrawable drawable) { <nl> + oldTexCache = new HashMap<URI,Texture>() ; <nl> + texCache = new HashMap<URI,Texture>() ; <nl> + } <nl> + @Override <nl> + public void dispose(GLAutoDrawable drawable) { <nl> + oldTexCache = null ; <nl> + texCache = null ; <nl> + } <nl> mmm RenderStrategy . java <nl> ppp RenderStrategy . java <nl> + import javax . <nl>","carry init & dispose method down into renderstrategy , so that texture can be dispose of and reload",1
"mmm ZoomableLabel . java <nl> ppp ZoomableLabel . java <nl> - if(HtmlUtils . isHtml(getText())) { <nl> - firePropertyChange(CUSTOM_CSS, old, styleSheet) ; <nl> - revalidate() ; <nl> - repaint() ; <nl> - } <nl> + firePropertyChange(CUSTOM_CSS, old, styleSheet) ; <nl> + revalidate() ; <nl> + repaint() ; <nl>",update label renderer even for plain text because it be transform to html if cs be set,1
mmm FlinkCmdInterpreter . java <nl> ppp FlinkCmdInterpreter . java <nl> - package org . apache . zeppelin . flink ; <nl> + package org . apache . zeppelin . flink . cmd ; <nl> - import org . apache . hadoop . yarn . api . records . ApplicationReport ; <nl> - import org . apache . hadoop . yarn . client . api . YarnClient ; <nl> - import org . apache . hadoop . yarn . conf . YarnConfiguration ; <nl> - import org . apache . hadoop . yarn . util . ConverterUtils ; <nl> - <nl>,move % flink.cmd a a separated interpreter module,0
"mmm DataSource . java <nl> ppp DataSource . java <nl> - protected synchronized void doDisconnect() <nl> + @Override <nl> + protected void doDisconnect() <nl> mmm PortAudioStream . java <nl> ppp PortAudioStream . java <nl> - PortAudio . FRAMES_PER_BUFFER_UNSPECIFIED, <nl> + framesPerBuffer, <nl> mmm PortAudioRenderer . java <nl> ppp PortAudioRenderer . java <nl> + framesPerBuffer <nl> + = (int) <nl> + ((sampleRate * PortAudio . DEFAULT_MILLIS_PER_BUFFER) <nl> + / (channels * 1000)) ; <nl> - PortAudio . FRAMES_PER_BUFFER_UNSPECIFIED, <nl> + framesPerBuffer, <nl> - framesPerBuffer <nl> - = (int) <nl> - ((sampleRate * PortAudio . DEFAULT_MILLIS_PER_BUFFER) <nl> - / (channels * <nl>",open the portaudio stream with a valid framesperbuffer value in order to make it possible to use the pseudo-blocking portaudio stream interface implement in r7982,1
"mmm ShellInterpreter . java <nl> ppp ShellInterpreter . java <nl> - import java . io . ByteArrayOutputStream ; <nl> - import java . io . OutputStream ; <nl> - import java . util . List ; <nl> - import org . apache . zeppelin . interpreter . thrift . InterpreterCompletion ; <nl> - private String defaultTimeoutProperty = ""60000"" ; <nl> + private static final String DEFAULT_TIMEOUT = ""60000"" ; <nl> - InterpreterContext contextInterpreter) { <nl> - LOGGER . debug(""Run shell command '"" + cmd + ""'"") ; <nl> - OutputStream outStream = new ByteArrayOutputStream() ; <nl> + InterpreterContext context) <nl>",code completion pop up error message in shell interpreter,0
"mmm BooleanExpression . java <nl> ppp BooleanExpression . java <nl> + @Override <nl> + public BooleanExpression nullif(Expression<Boolean> other) { <nl> + return Expressions . booleanOperation(Ops . NULLIF, mixin, other) ; <nl> + } <nl> + @Override <nl> + public BooleanExpression nullif(Boolean other) { <nl> + return nullif(ConstantImpl . create(other)) ; <nl> + } <nl> mmm ComparableExpression . java <nl> ppp ComparableExpression . java <nl> + @Override <nl> + public ComparableExpression<T> nullif(Expression<T> other) { <nl> + return Expressions . comparableOperation(this . getType(), Ops . NULLIF, mixin, other) ; <nl> + } <nl> + @Override <nl> + public ComparableExpression<T> nullif(T other) <nl>",override in all subtypes,0
"mmm CoreContainer . java <nl> ppp CoreContainer . java <nl> - private PluginRegistry<SolrRequestHandler> containerHandlers = new PluginRegistry<>(SolrRequestHandler . class, null) ; <nl> + private PluginBag<SolrRequestHandler> containerHandlers = new PluginBag<>(SolrRequestHandler . class, null) ; <nl> - public PluginRegistry<SolrRequestHandler> getRequestHandlers() { <nl> + public PluginBag<SolrRequestHandler> getRequestHandlers() { <nl> mmm MemClassLoader . java <nl> ppp MemClassLoader . java <nl> - import java . util . concurrent . ConcurrentHashMap ; <nl> - private List<PluginRegistry . RuntimeLib> libs = new ArrayList<>() ; <nl> + private List<PluginBag . RuntimeLib> libs = new ArrayList<>() ; <nl> - public MemClassLoader(List<PluginRegistry . RuntimeLib> libs, SolrResourceLoader resourceLoader) { <nl> <nl>",rename pluginregistry to pluginbag,0
"mmm DatabaseUtility . java <nl> ppp DatabaseUtility . java <nl> - final ResultSet resultSet = executeSql(statement, sql, false) ; <nl> + final ResultSet resultSet = executeSql(statement, sql) ; <nl> - { <nl> - return executeSql(statement, sql, false) ; <nl> - } <nl> - public static ResultSet executeSql(final Statement statement, <nl> - final String sql, <nl> - final boolean throwSQLException) <nl> - throws SQLException <nl> - if (throwSQLException) <nl> - { <nl> - throw e ; <nl> - } <nl> - return null ; <nl> + throw e ; <nl> mmm OperationCommand . java <nl> ppp OperationCommand . java <nl> <nl>","throw exception , so that they can be report",1
"mmm SingleRowStreamSqlJob . java <nl> ppp SingleRowStreamSqlJob . java <nl> + import org . apache . zeppelin . interpreter . SingleRowInterpreterResult ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> - StringBuilder builder = new StringBuilder() ; <nl> - builder . append(""%angular "") ; <nl> - String outputText = template ; <nl> - for (int i = 0 ; i < latestRow . getArity() ; ++i) { <nl> - outputText = outputText . replace(""{"" + i + ""}"", ""{{value_"" + i + ""}}"") ; <nl> - } <nl> <nl>",include chart option for single value,0
mmm MapStyle . java <nl> ppp MapStyle . java <nl> - final String referencedStyle = NamedObject . toKeyString(style) ; <nl> - if (style instanceof NamedObject) { <nl> + if (style instanceof StyleNamedObject) { <nl> + final String referencedStyle = ((StyleNamedObject)style) . getObject() . toString() ; <nl> + final String referencedStyle = style . toString() ; <nl>,bug fix for save conditional style,0
"mmm ZSession . java <nl> ppp ZSession . java <nl> - for (Map . Entry<String, String> entry : localProperties . entrySet()) { <nl> - builder . append(entry . getKey() + ""=\"""" + entry . getValue() + ""\"""") ; <nl> - } <nl> + List<String> propertyString = localProperties . entrySet() . stream() <nl> +  . map(entry -> (entry . getKey() ""=\"""" entry . getValue() ""\"""")) <nl> +  . collect(Collectors . toList()) ; <nl> + builder . append(StringUtils . join(propertyString, "","")) ; <nl>",invalid local property in zsession,0
"mmm CommunicatorMain . java <nl> ppp CommunicatorMain . java <nl> - SkinLookAndFeel . loadThemePackDefinition(new File(""src/net/java/sip/communicator/impl/gui/themepacks/aquathemepack/skinlf-themepack . xml"") . toURL())) ; <nl> + SkinLookAndFeel . loadThemePackDefinition(getClass() . getClassLoader() . getResource(""net/java/sip/communicator/impl/gui/themepacks/aquathemepack/skinlf-themepack . xml""))) ; <nl>",change path so that it could be access through a class loader while run in the osgi framework,1
mmm SampleTestNoMockitoApplicationTest . java <nl> ppp SampleTestNoMockitoApplicationTest . java <nl> - public class SampleTestNoMockitoApplicationTest { <nl> + public class SampleTestNoMockitoApplicationTests { <nl> mmm OverrideAutoConfigurationEnabledFalseIntegrationTest . java <nl> ppp OverrideAutoConfigurationEnabledFalseIntegrationTest . java <nl> - public class OverrideAutoConfigurationEnabledFalseIntegrationTest { <nl> + public class OverrideAutoConfigurationEnabledFalseIntegrationTests { <nl> mmm OverrideAutoConfigurationEnabledTrueIntegrationTest . java <nl> ppp OverrideAutoConfigurationEnabledTrueIntegrationTest . java <nl> - public class OverrideAutoConfigurationEnabledTrueIntegrationTest { <nl> + public class OverrideAutoConfigurationEnabledTrueIntegrationTests { <nl>,rename test class so that their test be run by maven,1
"mmm NotificationContact . java <nl> ppp NotificationContact . java <nl> + private int unreadUrgentMessageCount = 0 ; <nl> - if (unreadMessageCount > 0 && readMessageCount > 0) <nl> + if ((unreadUrgentMessageCount > 0) && <nl> + (unreadMessageCount > 0) && <nl> + (readMessageCount > 0)) <nl> + { <nl> + displayDetails = resources . getI18NString( <nl> + ""service . gui . VOICEMAIL_NEW_URGENT_OLD_RECEIVED"", <nl> + new String[]{   Integer . toString(unreadMessageCount), <nl> + Integer . toString(unreadUrgentMessageCount), <nl> + Integer . toString(readMessageCount)}) ; <nl> + } <nl> + else if ((unreadMessageCount > 0) && (readMessageCount > 0)) <nl> + else <nl>",modifies the voicemail notification gui so that it would also display the number of urgent voicemail message patch by tom denham,1
"mmm EntityCreature . java <nl> ppp EntityCreature . java <nl> - public void setPathTo(Position position, Consumer<Boolean> resultConsumer) { <nl> - pathFinder . getPath(position, blockPositions -> { <nl> + public void setPathTo(Position position, int maxCheck, Consumer<Boolean> resultConsumer) { <nl> + pathFinder . getPath(position, maxCheck, blockPositions -> { <nl> + public void setPathTo(Position position, int maxCheck) { <nl> + setPathTo(position, maxCheck, null) ; <nl> + } <nl> - setPathTo(position, null) ; <nl> + setPathTo(position, 1000, null) ; <nl> mmm EntityPathFinder . java <nl> ppp EntityPathFinder . java <nl> - public void getPath(Position target, Consumer<LinkedList<BlockPosition>> consumer) { <nl> + public void getPath(Position <nl>",make pathfinder maxcheck configurable,0
mmm Wizard . java <nl> ppp Wizard . java <nl> - wizardModel . getCurrentWizardPage() . pageShown() ;         <nl> + wizardModel . getCurrentWizardPage() . pageShown() ; <nl> + this . pack() ; <nl>,pack the wizard window every time a new wizard be set in order to resize it to fit the new wizard form,1
"mmm AuthenticationInfo . java <nl> ppp AuthenticationInfo . java <nl> + import java . util . HashSet ; <nl> + import java . util . Set ; <nl> + import com . google . common . collect . Sets ; <nl> - private static final Gson gson = new Gson() ; <nl> + private static final Gson GSON = new Gson() ; <nl> - List<String> roles ; <nl> + Set<String> roles ; <nl> - public static final AuthenticationInfo ANONYMOUS = new AuthenticationInfo(""anonymous"", null, <nl> + public static final AuthenticationInfo ANONYMOUS = new AuthenticationInfo(""anonymous"", Sets . newHashSet(), <nl> + public <nl>",notebook permission bypass vulnerability,0
mmm UniqueStack . java <nl> ppp UniqueStack . java <nl> - return stack . isEmpty() ? null : stack . get(stack . size() 1) ; <nl> + if (stack . isEmpty()) { <nl> + return null ; <nl> + } else { <nl> + final T last = stack . remove(stack . size() - 1) ; <nl> + set . remove(last) ; <nl> + return last ; <nl> + } <nl>,fix wrong circular reference error,0
mmm ConstantThroughputTimer . java <nl> ppp ConstantThroughputTimer . java <nl> - prepare() ; <nl> mmm TestBean . java <nl> ppp TestBean . java <nl> - protected void prepare() <nl> + public void prepare() <nl> mmm JMeterThread . java <nl> ppp JMeterThread . java <nl> + import org . apache . jmeter . testbeans . TestBean ; <nl> - sum += ((Timer) iter . next()) . delay() ; <nl> + Timer timer= (Timer) iter . next() ; <nl> + if (timer instanceof TestBean) ((TestBean)timer) . prepare() ; <nl> + sum += timer . delay() ; <nl>,"have the engine call prepare ( ) for timer , so that they do not need",1
"mmm UIServiceImpl . java <nl> ppp UIServiceImpl . java <nl> - AddContactWizard addContactWizard = new AddContactWizard(mainFrame) ; <nl> - registerExportedWindow(addContactWizard) ; <nl> + registerExportedWindow(new AddContactWizardExportedWindow(mainFrame)) ; <nl> mmm AddContactWizard . java <nl> ppp AddContactWizard . java <nl> - import net . java . sip . communicator . service . gui . * ; <nl> - implements  WizardListener, <nl> - ExportedWindow <nl> + implements  WizardListener <nl> - public WindowID getIdentifier() <nl> - { <nl> - return ExportedWindow . ADD_CONTACT_WINDOW ; <nl> - } <nl> - public void minimize() <nl> - { <nl> - } <nl> - public void <nl>",delay the creation of addcontactwizard for the purpose of uiserviceimpl 's exportedwindows because the mentioned creation be slow,1
mmm ShadowUsageStatsManagerTest . java <nl> ppp ShadowUsageStatsManagerTest . java <nl> + shadowOf(usageStatsManager) <nl> +  . addEvent( <nl> + ShadowUsageStatsManager . EventBuilder . buildEvent() <nl> +  . setTimeStamp(1000L) <nl> +  . setEventType(Event . SYSTEM_INTERACTION) <nl> +  . build()) ; <nl> + assertThat(events . hasNextEvent()) . isTrue() ; <nl> + assertThat(events . getNextEvent(event)) . isTrue() ; <nl> + assertThat(event . getPackageName()) . isNull() ; <nl> + assertThat(event . getTimeStamp()) . isEqualTo(1000L) ; <nl> + assertThat(event . getEventType()) . isEqualTo(Event . SYSTEM_INTERACTION) ; <nl> mmm ShadowUsageStatsManager . java <nl> ppp ShadowUsageStatsManager . java <nl> - names . add(result <nl>,do not cause npe because of sort null package name,1
"mmm PlayerInit . java <nl> ppp PlayerInit . java <nl> + player . sendHeaderFooter(""Its the header"", ""Its the footer"", '&') ; <nl> mmm Player . java <nl> ppp Player . java <nl> + import fr . themode . minestom . sound . Sound ; <nl> + import fr . themode . minestom . sound . SoundCategory ; <nl> + public void playSound(Sound sound, SoundCategory soundCategory, int x, int y, int z, float volume, float pitch) { <nl> + SoundEffectPacket soundEffectPacket = new SoundEffectPacket() ; <nl> + soundEffectPacket . soundId = sound . getId() ; <nl> + soundEffectPacket . soundCategory <nl>",sound & header/footer,0
mmm LdapActivator . java <nl> ppp LdapActivator . java <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + import net . java . sip . communicator . service . contactsource . ContactSourceService ; <nl> + import net . java . sip . communicator . service . protocol . PhoneNumberI18nService ; <nl> + import net . java . sip . communicator . service . resources . ResourceManagementService ; <nl> + private static BundleContext bundleContext = null ; <nl> + private static ResourceManagementService resourceService = null ; <nl> + private <nl>,move the ldap contact source code in the impl package in order to allow create contact source for ldap directory through the ldapservice,1
"mmm OperationSetBasicTelephonySipImpl . java <nl> ppp OperationSetBasicTelephonySipImpl . java <nl> + javax . sip . address . URI calleeURI = calleeAddress . getURI() ; <nl> + InetAddress intendedDestination = null ; <nl> + if(calleeURI . isSipURI()) <nl> + { <nl> + String host = ((SipURI)calleeURI) . getHost() ; <nl> + try <nl> + { <nl> + intendedDestination = InetAddress . getByName(host) ; <nl> + invite . setContent( <nl> + callSession . createSdpOffer(intendedDestination) <nl> + , contentTypeHeader) ; <nl> + } <nl> + catch (UnknownHostException ex) <nl> + { <nl> + logger . warn(""Failed to obtain an InetAddress for "" <nl>",try to always indicate the address of the destination to the medium service so that it could choose the most suitable local address for the sdp advertisement,1
"new file <nl> ppp ShadowFontsContract . java <nl> + package org . robolectric . shadows ; <nl> + import static android . os . Build . VERSION_CODES . O ; <nl> + import android . graphics . Typeface ; <nl> + import android . provider . FontRequest ; <nl> + import android . provider . FontsContract ; <nl> + import org . robolectric . annotation . Implementation ; <nl> + import org . robolectric . annotation . Implements ; <nl> + @Implements(value = FontsContract . class, minSdk = O) <nl> + public class ShadowFontsContract { <nl> + @Implementation <nl> <nl>",fix timeout in fontscontract.getfontsync ( ) cause because context.canloadunsaferesources ( ) now return false since the context be n't a system context,1
"mmm SparkInterpreterLauncher . java <nl> ppp SparkInterpreterLauncher . java <nl> - if (RemoteInterpreterUtils . isEnvString(key)) { <nl> + if (RemoteInterpreterUtils . isEnvString(key) && !StringUtils . isBlank(properties . getProperty(key))) { <nl> - if (envValue != null) { <nl> + if (!StringUtils . isBlank(envValue)) { <nl> mmm SparkInterpreterLauncherTest . java <nl> ppp SparkInterpreterLauncherTest . java <nl> + import static org . junit . Assert . assertFalse ; <nl> + properties . setProperty(""ENV_1"", """") ; <nl> + assertFalse(interpreterProcess . getEnv() . containsKey(""ENV_1"")) ; <nl>",empty env be pass to spark interpreter,0
new file <nl> ppp SiteLinterHelpTest . java <nl> + package schemacrawler . test . sitegen ; <nl> + import java . io . IOException ; <nl> + import java . net . URISyntaxException ; <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> + import org . junit . jupiter . api . BeforeEach ; <nl> + import org . junit . jupiter . api . Test ; <nl> + import org . junit . jupiter . api . condition . EnabledIfSystemProperty ; <nl> + <nl>,"pull out code to generate website , in order to break down distribution logic",1
mmm AnotherJOb . java <nl> ppp AnotherJOb . java <nl> - package com . dataartisans . flink . dataflow . example ; <nl> + package com . dataartisans . flink . dataflow . examples ; <nl> mmm FlattenizeThis . java <nl> ppp FlattenizeThis . java <nl> - package com . dataartisans . flink . dataflow . example ; <nl> + package com . dataartisans . flink . dataflow . examples ; <nl> mmm GoogleWordCountExampleRunner . java <nl> ppp GoogleWordCountExampleRunner . java <nl> - package com . dataartisans . flink . dataflow . example ; <nl> + package com . <nl>,rename package example to examples,0
mmm DeviceConfigurationComboBoxModel . java <nl> ppp DeviceConfigurationComboBoxModel . java <nl> - if (audioSystems == null),activates update for reloadable audio system in order to activate them if the number of device change from 0 to something great,1
"mmm Input . java <nl> ppp Input . java <nl> - expanded = value . toString() ; <nl> + expanded = StringUtils . defaultString((String) value, """") ; <nl> mmm InputTest . java <nl> ppp InputTest . java <nl> + script = ""INPUT='${input_form}'"" ; <nl> + params = new HashMap<>() ; <nl> + replaced = Input . getSimpleQuery(params, script, false) ; <nl> + assertEquals(""INPUT=''"", replaced) ; <nl>",npe on empty dynamic form input,0
"mmm GroupedPacketHandler . java <nl> ppp GroupedPacketHandler . java <nl> - out . writeBytes(msg . body . retainedSlice()) ; <nl> + final ByteBuf packet = msg . body ; <nl> + out . writeBytes(packet . duplicate()) ; <nl> + if (msg . releaseBuf) { <nl> + packet . release() ; <nl> + } <nl> mmm FramedPacket . java <nl> ppp FramedPacket . java <nl> + public boolean releaseBuf = false ; <nl> + public FramedPacket(@NotNull ByteBuf body, boolean releaseBuf) { <nl> + this . body = body ; <nl> + this . releaseBuf = releaseBuf ; <nl> + } <nl>",implement pool buffer,0
"mmm RInterpreterTest . java <nl> ppp RInterpreterTest . java <nl> + import java . io . IOException ; <nl> - public void testSparkRInterpreter() throws InterpreterException, InterruptedException { <nl> + public void testSparkRInterpreter() throws InterpreterException, InterruptedException, IOException { <nl> + result = rInterpreter . interpret(""foo <- TRUE\n"" + <nl> + ""print(foo)\n"" + <nl> + ""bare <- c(1, 2 . 5, 4)\n"" + <nl> + ""print(bare)\n"" + <nl> + ""double <- 15 . 0\n"" + <nl> + ""print(double)"", context) ; <nl> + assertEquals(InterpreterResult . Code . SUCCESS, result . code()) ; <nl> + assertTrue(result . toString(), <nl> + result . message() <nl>",miss line break for irinterpreter,0
"mmm AdHocCommand . java <nl> ppp AdHocCommand . java <nl> + public String getRaw() { <nl> + return data . getChildElementXML() ; <nl> + } <nl> + public abstract void execute(long timeout) throws XMPPException ; <nl> mmm RemoteCommand . java <nl> ppp RemoteCommand . java <nl> - executeAction(Action . cancel) ; <nl> + executeAction(Action . cancel, SmackConfiguration . getPacketReplyTimeout()) ; <nl> - executeAction(Action . complete, form) ; <nl> + executeAction(Action . complete, form, SmackConfiguration . getPacketReplyTimeout()) ; <nl> - executeAction(Action . execute) ; <nl> + executeAction(Action . execute, SmackConfiguration . getPacketReplyTimeout()) ; <nl> + @Override <nl> + public void <nl>",add method so that timeout can be specify when execute ad-hoc command,1
"mmm SparkVersion . java <nl> ppp SparkVersion . java <nl> + public static final SparkVersion SPARK_3_2_0 = SparkVersion . fromVersionString(""3 . 2 . 0"") ; <nl> - public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_3_1_0 ; <nl> + public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_3_2_0 ; <nl> deleted file <nl> mmm SparkIntegrationTest20 . java <nl> - package org . apache . zeppelin . integration ; <nl> - import org . junit . runner . RunWith ; <nl> - import org . junit . runners . Parameterized ; <nl> - import java . util . Arrays ; <nl> - import java <nl>",support spark 3.1.1,0
mmm CassandraInterpreterTest . java <nl> ppp CassandraInterpreterTest . java <nl> - assertThat(reformatHtml(actual . message() . get(0) . getData())) . isEqualTo(expected) ; <nl> + assertThat(reformatHtml(actual . message() . get(0) . getData())) . contains(expected) ; <nl>,help need to be update in cassandra interpreter,0
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> + ZEPPELIN_SEARCH_ENABLE(""zeppelin . search . enable"", true), <nl> mmm ZeppelinServer . java <nl> ppp ZeppelinServer . java <nl> + import org . apache . zeppelin . search . NoSearchService ; <nl> - bind(LuceneSearch . class) . to(SearchService . class) . in(Singleton . class) ; <nl> + if (conf . getBoolean(ConfVars . ZEPPELIN_SEARCH_ENABLE)) { <nl> + bind(LuceneSearch . class) . to(SearchService . class) . in(Singleton . class) ; <nl> + } else { <nl> + bind(NoSearchService . class) . to(SearchService . class) . in(Singleton . class) ; <nl> + } <nl>",add option to disable search,0
"mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> - import java . util . Random ; <nl> - import org . apache . zeppelin . interpreter . remote . RemoteInterpreterProcess ; <nl> + import org . apache . zeppelin . interpreter . remote . RemoteInterpreterManagedProcess ; <nl> - public class K8sRemoteInterpreterProcess extends RemoteInterpreterProcess { <nl> + public class K8sRemoteInterpreterProcess extends RemoteInterpreterManagedProcess { <nl> - private final String interpreterGroupId ; <nl> - private final String interpreterSettingName ; <nl> - private final Map<String, String> envs ; <nl> - private final boolean portForward ; <nl> + private final boolean portForward <nl>",use remoteinterpretermanagedprocess for k8sremoteinterpreterprocess,0
"mmm BeanSerializerTest . java <nl> ppp BeanSerializerTest . java <nl> - assertThat(generatedSource, containsString(""import javax . annotation . Generated ;"")) ; <nl> + assertThat(generatedSource, containsString(String . format(""import %s ;"", GeneratedAnnotationResolver . resolveDefault() . getName()))) ; <nl> mmm CodegenModuleTest . java <nl> ppp CodegenModuleTest . java <nl> - assertEquals(o, Generated . class) ; <nl> + assertEquals(o, GeneratedAnnotationResolver . resolveDefault()) ; <nl> mmm EmbeddableSerializerTest . java <nl> ppp EmbeddableSerializerTest . java <nl> - assertThat(generatedSource, containsString(""import javax . annotation . Generated ;"")) ; <nl> + assertThat(generatedSource, containsString(String . format(""import %s ;"", GeneratedAnnotationResolver . resolveDefault() . getName()))) ; <nl> mmm EntitySerializerTest . java <nl> <nl>",use resolve @ generate annotation in test,0
"mmm LinkTransformer . java <nl> ppp LinkTransformer . java <nl> + import org . freeplane . features . format . PatternFormat ; <nl> - public Object transformContent(Object content, NodeModel node, Object transformedExtension) { <nl> + public Object transformContent(TextController textController, Object content, NodeModel node, Object transformedExtension) { <nl> + if(PatternFormat . IDENTITY_PATTERN . equals(textController . getNodeFormat(node))) <nl> + return transformedExtension ; <nl> mmm FormatContentTransformer . java <nl> ppp FormatContentTransformer . java <nl> + import org . freeplane . features . format . PatternFormat ; <nl> - public Object transformContent(Object obj, final NodeModel node, Object transformedExtension) { <nl> + public Object <nl>",node numbering do not work with node format a text : check for identity pattern in transformer so that node numbering can be use,1
"mmm OutlineEdgeView . java <nl> ppp OutlineEdgeView . java <nl> - UITools . convertPointToAncestor(getSource() . getMainView(), start, getSource()) ; <nl> - align(start, end) ; <nl> + end = getTarget() . getMainView() . getLeftPoint() ; <nl> mmm OutlineLinkView . java <nl> ppp OutlineLinkView . java <nl> - UITools . convertPointToAncestor(startMainView, start, getSource()) ; <nl> - UITools . convertPointToAncestor(targetMainView, end, getTarget() . getMap()) ; <nl> - align(start, end) ; <nl>",bug fix after refactoring,0
mmm ExtListCellRenderer . java <nl> ppp ExtListCellRenderer . java <nl>  <nl> mmm AutoAwayConfigForm . java <nl> ppp AutoAwayConfigForm . java <nl> + import java . awt . Container ; <nl> + import net . java . sip . communicator . swing . * ; <nl> - extends JPanel <nl> + extends TransparentPanel <nl> - private JPanel mainPanel ;	 <nl> - mainPanel = new JPanel() ; <nl> - mainPanel . setLayout(new BorderLayout()) ; <nl> - init() ; <nl> + Component mainPanel = init() ; <nl> - private void init() <nl> + private Component init() <nl> - JPanel autoStatusPanel = <nl>,make the background of the configurationforms visible in tool > option transparent so that they do not look grey and the theme background show through,1
"mmm ChatWindow . java <nl> ppp ChatWindow . java <nl> - import net . java . sip . communicator . impl . gui . customcontrols . events . * ; <nl> + import net . java . sip . communicator . swing . event . * ; <nl> mmm ChatRoomConfigurationWindow . java <nl> ppp ChatRoomConfigurationWindow . java <nl> - private JTabbedPane tabbedPane = new JTabbedPane() ; <nl> + private JTabbedPane tabbedPane = new SIPCommTabbedPane(false, false) ; <nl> mmm AccountInfoForm . java <nl> ppp AccountInfoForm . java <nl> - private JTabbedPane accountsTabbedPane = new JTabbedPane() ; <nl> + private JTabbedPane <nl>",replaces the us of jtabbedpane with sipcommtabbedpane in order to respect the blue theme,1
"mmm CompareConditionAdapter . java <nl> ppp CompareConditionAdapter . java <nl> + protected CompareConditionAdapter(final Double value) { <nl> + super() ; <nl> + this . matchCase = false ; <nl> + conditionValue = value ; <nl> + } <nl> + protected CompareConditionAdapter(final Long value) { <nl> + super() ; <nl> + this . matchCase = false ; <nl> + conditionValue = value ; <nl> + } <nl> mmm NodeLevelCompareCondition . java <nl> ppp NodeLevelCompareCondition . java <nl> - super(value, ignoreCase) ; <nl> + super(Long . valueOf(value)) ; <nl>",bug fix in nodelevel condition,0
mmm Data . java <nl> ppp Data . java <nl> + import fr . themode . minestom . utils . PrimitiveConversion ; <nl> - private DataManager dataManager = Main . getDataManager() ; <nl> + private static final DataManager DATA_MANAGER = Main . getDataManager() ; <nl> - if (dataManager . getDataType(type) == null) { <nl> + if (DATA_MANAGER . getDataType(type) == null) { <nl> - byte[] encodedType = type . getName() . getBytes() ; // Data type <nl> + byte[] encodedType = PrimitiveConversion . getObjectClassString(type . getName()) . getBytes() ; // Data type (fix for primitives) <nl> mmm DataContainer . <nl>,wip per block data,0
"mmm PersistentNodeHook . java <nl> ppp PersistentNodeHook . java <nl> - if (node . getExtension(getExtensionClass()) != null) { <nl> - undoableToggleHook(node, null) ; <nl> + final IExtension extension = node . getExtension(getExtensionClass()) ; <nl> + if (extension != null) { <nl> + undoableToggleHook(node, extension) ; <nl> - undoableToggleHook(node, null) ; <nl> + undoableToggleHook(node, node . getExtension(getExtensionClass())) ; <nl>",bug fix in persistentnodehook.toggle,0
"mmm AbstractCodeWriter . java <nl> ppp AbstractCodeWriter . java <nl> - return append(""\n"") ; <nl> + return append(System . lineSeparator()) ; <nl> mmm JavaWriterTest . java <nl> ppp JavaWriterTest . java <nl> - String expected = textBuilder . toString() . replace(""\r\n"", ""\n"") . trim() ; <nl> + String expected = textBuilder . toString() . replace(""\r\n"", System . lineSeparator()) . trim() ; <nl>",append system default new line when generate code,0
mmm ConferenceChatManager . java <nl> ppp ConferenceChatManager . java <nl> - logger . setLevelInfo() ; <nl> - logger . setLevelInfo() ; <nl> - logger . setLevelInfo() ; <nl> - logger . setLevelError() ; <nl>,remove explicit forcing of logger level because it cause unnecessary output to developer not interested in the related development and because it should be do locally in lib\logging.properties,1
deleted file <nl> mmm AudioNotifierActivator . java <nl> - package net . java . sip . communicator . impl . audionotifier ; <nl> - import net . java . sip . communicator . service . configuration . * ; <nl> - import net . java . sip . communicator . service . resources . * ; <nl> - import net . java . sip . communicator . util . * ; <nl> - import org . osgi . framework . * ; <nl> - public class AudioNotifierActivator implements BundleActivator <nl> - { <nl> - private AudioNotifierServiceImpl audioNotifier ; <nl> <nl>,remove the bundle audionotifier because it functionality have already be replace by the bundle neomedia,1
mmm Lucene90HnswGraphBuilder . java <nl> ppp Lucene90HnswGraphBuilder . java <nl> - final Lucene90HnswGraph hnsw ; <nl> + final Lucene90OnHeapHnswGraph hnsw ; <nl> - this . hnsw = new Lucene90HnswGraph(maxConn) ; <nl> + this . hnsw = new Lucene90OnHeapHnswGraph(maxConn) ; <nl> - public Lucene90HnswGraph build(RandomAccessVectorValues vectors) throws IOException { <nl> + public Lucene90OnHeapHnswGraph build(RandomAccessVectorValues vectors) throws IOException { <nl> - Lucene90HnswGraph . search( <nl> + Lucene90OnHeapHnswGraph . search( <nl> mmm Lucene90HnswVectorsReader . java <nl> ppp Lucene90HnswVectorsReader . java <nl> - import org . apache . lucene . index . KnnGraphValues ; <nl> + import org . apache . lucene . <nl>,rename knngraphvalues - > hnswgraph,0
mmm SparkShims . java <nl> ppp SparkShims . java <nl>  <nl> mmm SparkVersion . java <nl> ppp SparkVersion . java <nl>  <nl> mmm Spark1Shims . java <nl> ppp Spark1Shims . java <nl>  <nl> mmm Spark2Shims . java <nl> ppp Spark2Shims . java <nl>  <nl> mmm Spark3Shims . java <nl> ppp Spark3Shims . java <nl>  <nl>,wrong src folder for spark-shims module,0
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> + public String getHtmlHeadAddon() { <nl> + return getString(ConfVars . ZEPPELIN_SERVER_HTML_HEAD_ADDON) ; <nl> + } <nl> + public String getHtmlBodyAddon() { <nl> + return getString(ConfVars . ZEPPELIN_SERVER_HTML_BODY_ADDON) ; <nl> + } <nl> + ZEPPELIN_SERVER_HTML_HEAD_ADDON(""zeppelin . server . html . head . addon"", null), <nl> + ZEPPELIN_SERVER_HTML_BODY_ADDON(""zeppelin . server . html . body . addon"", null), <nl> new file <nl> ppp HtmlAddonResource . java <nl> + package org . apache . zeppelin . server ; <nl> + import static com . google . common . base . Charsets . UTF_8 <nl>",enable configurable html addons,0
mmm UIServiceImpl . java <nl> ppp UIServiceImpl . java <nl>  <nl> mmm MainToolBar . java <nl> ppp MainToolBar . java <nl> - import net . java . sip . communicator . service . contactlist . * ; <nl> - { <nl> + {    <nl> - this . addSeparator() ; <nl> - this . add(c) ; <nl> - this . revalidate() ; <nl> - this . repaint() ; <nl> + if(event . getContainerID() . equals(UIService . CONTAINER_CHAT_TOOL_BAR)) <nl> + { <nl> + this . addSeparator() ; <nl> + this . add(c) ; <nl> + this . <nl>,when a plugincomponentevent be receive should check the container id in order to add it or remove it from the appropriate container,1
"mmm ShellInterpreter . java <nl> ppp ShellInterpreter . java <nl> + private static final String MAX_CONCURRENCY = ""shell . concurrency . max"" ; <nl> - ShellInterpreter . class . getName() + this . hashCode(), 10) ; <nl> + ShellInterpreter . class . getName() this . hashCode(), getMaxConcurrent()) ; <nl> + } <nl> + private int getMaxConcurrent() { <nl> + String maxConcurrencyProperty = getProperty(MAX_CONCURRENCY, ""10"") ; <nl> + try { <nl> + return Integer . valueOf(maxConcurrencyProperty) ; <nl> + } catch (NumberFormatException e) { <nl> + LOGGER . error(""Fail to parse {} with value: {}"", MAX_CONCURRENCY, <nl> + maxConcurrencyProperty) ; <nl>",make shell interpreter concurrency configurable,0
"mmm Main . java <nl> ppp Main . java <nl> - minecraftServer . start(""localhost"", 55555, PlayerInit . getResponseDataConsumer()) ; <nl> + minecraftServer . start(""localhost"", 25565, PlayerInit . getResponseDataConsumer()) ; <nl> mmm MainDemo . java <nl> ppp MainDemo . java <nl> - minecraftServer . start(""localhost"", 55555) ; <nl> + minecraftServer . start(""localhost"", 25565) ; <nl> mmm MinecraftServer . java <nl> ppp MinecraftServer . java <nl> + import java . io . File ; <nl> - public static final int PROTOCOL_VERSION = 578 ; <nl> + public static final int PROTOCOL_VERSION = 736 ; <nl> - ResourceGatherer . ensureResourcesArePresent(null) ; // <nl>",basic 1.16.1 support,0
mmm EditStylesAction . java <nl> ppp EditStylesAction . java <nl> - Controller . getCurrentModeController() . commit() ;,fix in undo for editstylesaction,0
new file <nl> ppp TestConfigurationSlickFinalizer . java <nl> + package net . java . sip . communicator . slick . configuration ; <nl> + import junit . framework . * ; <nl> + import org . osgi . framework . * ; <nl> + import net . java . sip . communicator . service . configuration . * ; <nl> + public class TestConfigurationSlickFinalizer <nl> + extends TestCase <nl> + { <nl> + public TestConfigurationSlickFinalizer() <nl> + { <nl> + super() ; <nl> + } <nl> + public TestConfigurationSlickFinalizer(String name) <nl> + { <nl> + super(name) ; <nl> + <nl>,add a test suite to clean configuration file in the end of test so that it do not interfere with follow test execution,1
mmm BurnPlotFragment . java <nl> ppp BurnPlotFragment . java <nl> - import android . graphics . Paint ;,remove all the zoom & pan stuff because it do not work well change the line color to green so it just blend into the fill,1
"mmm AbstractPacketExtension . java <nl> ppp AbstractPacketExtension . java <nl> - this . attributes . put(name, value) ; <nl> + if(value != null) <nl> + this . attributes . put(name, value) ; <nl> + else <nl> + this . attributes . remove(name) ; <nl> mmm RtpDescriptionPacketExtension . java <nl> ppp RtpDescriptionPacketExtension . java <nl> + import net . java . sip . communicator . impl . protocol . jabber . extensions . * ; <nl> + import org . apache . tools . ant . taskdefs . * ; <nl> - implements PacketExtension <nl> + extends AbstractPacketExtension <nl> - <nl>",modifies rtpdescriptionpacketextension so that it would now extend our newly add abstractpacketextension,1
mmm JSR310InstantTypeTest . java <nl> ppp JSR310InstantTypeTest . java <nl> - Timestamp ts = new Timestamp(value . toEpochMilli()) ; <nl> + Timestamp ts = Timestamp . from(value) ; <nl> - Timestamp ts = new Timestamp(value . toEpochMilli()) ; <nl> + Timestamp ts = Timestamp . from(value) ; <nl>,timestamp include nanos,0
"mmm NodeView . java <nl> ppp NodeView . java <nl> - static private class ArrowIcon implements Icon{ <nl> + private class ArrowIcon implements Icon{ <nl> + Graphics2D g2= (Graphics2D) g ; <nl> + final Object renderingHint = g2 . getRenderingHint(RenderingHints . KEY_ANTIALIASING) ; <nl> + ModeController modeController = getMap() . getModeController() ; <nl> + modeController . getController() . getViewController() . setEdgesRenderingHint(g2) ; <nl> - g . fillPolygon(xs, ys, 3) ; <nl> + g2 . setRenderingHint(RenderingHints . KEY_ANTIALIASING, renderingHint) ; <nl>",do not fill detail arrow,0
mmm SystemActivityNotifications . java <nl> ppp SystemActivityNotifications . java <nl> - public static final int NOTIFY_SLEEP = 0 ;,sanitizes sysactivitynotifications.dll in order to make it easy to determine why it crash,1
"mmm CassandraInterpreter . java <nl> ppp CassandraInterpreter . java <nl> + public static final String CASSANDRA_FORMAT_DECIMAL_PRECISION = <nl> + ""cassandra . format . decimal_precision"" ; <nl> mmm CassandraInterpreterTest . java <nl> ppp CassandraInterpreterTest . java <nl> + props . put(""decimalPrecision"", ""5"") ; <nl> - ""select date, time, timestamp, double, float, tuple, udt from zeppelin . test_format ;"" ; <nl> + ""select date,time,timestamp,dec,double,float,tuple,udt from zeppelin . test_format ;"" ; <nl> + props . remove(""decimalPrecision"") ; <nl> - String expected = ""date\ttime\ttimestamp\tdouble\tfloat\ttuple\tudt\n"" + <nl> - ""Di, 29 Jan 19\t04:05AM\t06/16/20 21:59\t10,0153\t20,03\t(1, text, 10)\t"" + <nl> - ""{id: 1, t: text, lst: [1, <nl>",add formatter for decimal value,0
"mmm CallPeerJabberImpl . java <nl> ppp CallPeerJabberImpl . java <nl> + import org . jivesoftware . smack . util . * ; <nl> - putOnHold(true) ; <nl> + Roster roster = getProtocolProvider() . getConnection() . getRoster() ; <nl> + if(!roster . contains(StringUtils . parseBareAddress(calleeAddress))) <nl> + { <nl> + String failedMessage = <nl> + ""Tranfer impossible:\n"" <nl> + ""Account roster does not contain tansfer peer: "" <nl> + StringUtils . parseBareAddress(calleeAddress) ; <nl> + setState(CallPeerState . FAILED, failedMessage) ; <nl> + logger . info(failedMessage) ; <nl> + } <nl> - hangup( <nl> - false, <nl> - ((sid == null) <nl>",change xmpp unattended transfer behavior to act like sip inform the user if the transfer fail because the roster do not contain the remote peer,1
"mmm JobManager . java <nl> ppp JobManager . java <nl> + JsonNode rootNode = null ; <nl> - JsonNode rootNode = Unirest . get(flinkWebUI + ""/jobs/"" + jobId . toString()) <nl> + rootNode = Unirest . get(flinkWebUI ""/jobs/"" jobId . toString()) <nl> - LOGGER . error(""Fail to poll flink job progress via rest api"", e) ; <nl> + LOGGER . error(""Fail to poll flink job progress via rest api, rest api: "" rootNode, e) ; <nl>",add json to error message in jobmanager,0
"mmm MediaConfiguration . java <nl> ppp MediaConfiguration . java <nl> - mediaService . getDeviceConfiguration() . isEchoCancelEnabled()) ; <nl> - echoCancelCheckBox . addItemListener(new ItemListener() { <nl> - public void itemStateChanged(ItemEvent e) <nl> - { <nl> - mediaService . getDeviceConfiguration() . setEchoCancel( <nl> - echoCancelCheckBox . isSelected(), true) ; <nl> - } <nl> - }) ; <nl> + mediaService . getDeviceConfiguration() . isEchoCancel()) ; <nl> + echoCancelCheckBox . addItemListener( <nl> + new ItemListener() <nl> + { <nl> + public void itemStateChanged(ItemEvent e) <nl> + { <nl> + mediaService . getDeviceConfiguration() . setEchoCancel( <nl> + echoCancelCheckBox . isSelected()) ; <nl> + } <nl>","remove the portaudiomanager class because it name be too generic , spread it functionality across the deviceconfiguration and portaudio class",1
new file <nl> ppp FlinkShims . java <nl> + package org . apache . zeppelin . flink ; <nl> + import org . apache . zeppelin . interpreter . InterpreterContext ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + import java . io . IOException ; <nl> + import java . lang . reflect . Constructor ; <nl> + import java . net . InetAddress ; <nl> + import java . util . List ; <nl> + import java . util . Properties ; <nl> + public <nl>,support flink 1.11,0
"mmm ConfigSetService . java <nl> ppp ConfigSetService . java <nl> - private static final Logger logger = LoggerFactory . getLogger(MethodHandles . lookup() . lookupClass()) ; <nl> + private static final Logger log = LoggerFactory . getLogger(MethodHandles . lookup() . lookupClass()) ; <nl> - logger . info(""Creating new index schema for core {}"", cd . getName()) ; <nl> + log . info(""Creating new index schema for core {}"", cd . getName()) ; <nl> - logger . warn(""Couldn't get last modified time for schema file {}: {}"", schemaFile, e . getMessage()) ; <nl> - logger . warn(""Will not use schema cache"") <nl>",solr/core logger renames,0
mmm PlayerInit . java <nl> ppp PlayerInit . java <nl> - import fr . themode . demo . entity . ChickenCreature ; <nl> - import fr . themode . minestom . benchmark . ThreadResult ; <nl> - import fr . themode . minestom . utils . MathUtils ; <nl> - import java . util . Map ; <nl> + import java . util . UUID ; <nl> - long ramUsage = Runtime . getRuntime() . totalMemory() Runtime . getRuntime() . freeMemory() ; <nl> - ramUsage /= 1e6 ; // To MB <nl> + long ramUsage = benchmarkManager . getUsedMemory() <nl>,update + add particle,0
"mmm SchemaCrawler . java <nl> ppp SchemaCrawler . java <nl> + taskRunner <nl> +  . add( <nl> + retrieveTableDefinitionsInformation, <nl> + retrieverExtra::retrieveTableDefinitions, <nl> + retrieveTables) <nl> +  . add( <nl> + retrieveAdditionalTableAttributes, <nl> + () -> retrieverExtra . retrieveAdditionalTableAttributes(), <nl> + retrieveTables) <nl> +  . add( <nl> + retrieveTablePrivileges, <nl> + () -> retrieverPrivilege . retrieveTablePrivileges(), <nl> + retrieveTables) <nl> +  . submit() ; <nl> -  . add( <nl> - retrieveTableDefinitionsInformation, <nl> - retrieverExtra::retrieveTableDefinitions, <nl> - retrieveTables) <nl> -  . add( <nl> - retrieveAdditionalTableAttributes, <nl> - () -> retrieverExtra . retrieveAdditionalTableAttributes(), <nl> - <nl>","pull out extra table retrieval into a separate thread pool , so that it do not interfere with view",1
"mmm NamingFunction . java <nl> ppp NamingFunction . java <nl>  <nl> mmm AbstractCollQuery . java <nl> ppp AbstractCollQuery . java <nl>  <nl> mmm CollQueryStandardTest . java <nl> ppp CollQueryStandardTest . java <nl> - import com . querydsl . core . Module ; <nl> + import com . querydsl . core . QuerydslModule ; <nl> mmm Tuple . java <nl> ppp Tuple . java <nl>  <nl> mmm GroupByBuilder . java <nl> ppp GroupByBuilder . java <nl> - public <V, RES extends Map<K ,V>> ResultTransformer<RES> as(final Supplier<RES> mapFactory, Expression<V> expression) { <nl> + public <V, RES extends Map<K, <nl>",compile on java 11,0
"mmm DatesPanel . java <nl> ppp DatesPanel . java <nl> - this . setBorder(BorderFactory . createCompoundBorder( <nl> - BorderFactory . createEmptyBorder(3, 3, 3, 0), <nl> - SIPCommBorders . getBoldRoundBorder())) ; <nl> + this . setBorder(SIPCommBorders . getBoldRoundBorder()) ; <nl> mmm HistoryWindow . java <nl> ppp HistoryWindow . java <nl> + private static final String[] HISTORY_FILTER <nl> + = new String[] <nl> + { <nl> + MessageHistoryService . class . getName(), <nl> + FileHistoryService . class . getName() <nl> + } ; <nl> + private static final int SPACING = 5 ; <nl> - private TransparentPanel mainPanel <nl> - = <nl>","remove some ui repetition from the chat history window , use one and the same spacing between the component for consistency and so that they become properly align",1
"mmm FlinkIntegrationTest111 . java <nl> ppp FlinkIntegrationTest111 . java <nl> - {""1 . 11 . 2""} <nl> + {""1 . 11 . 3""} <nl> mmm ZeppelinFlinkClusterTest111 . java <nl> ppp ZeppelinFlinkClusterTest111 . java <nl> - {""1 . 11 . 2""} <nl> + {""1 . 11 . 3""} <nl>",upgrade flink to 1.11.3,0
"mmm FlinkInterpreterLauncher . java <nl> ppp FlinkInterpreterLauncher . java <nl> + import java . util . Properties ; <nl> + normalizeConfiguration(context) ; <nl> + private void normalizeConfiguration(InterpreterLaunchContext context) { <nl> + Properties intpProperties = context . getProperties() ; <nl> + setNewProperty(intpProperties, ""flink . jm . memory"", ""jobmanager . memory . process . size"", true) ; <nl> + setNewProperty(intpProperties, ""flink . tm . memory"", ""taskmanager . memory . process . size"", true) ; <nl> + setNewProperty(intpProperties, ""flink . tm . slot"", ""taskmanager . numberOfTaskSlots"", false) ; <nl> + setNewProperty(intpProperties, ""flink . yarn . appName"", ""yarn . application . name"", false) <nl>",unify flink configuration between different execution mode,0
"mmm FrontEnd . java <nl> ppp FrontEnd . java <nl> - public static final String PROP_CEPSTRUM_PRODUCER = PROP_PREFIX + <nl> - ""cepstrumProducer"" ; <nl> + public static final String PROP_CEPSTRUM_PRODUCER = ""cepstrumProducer"" ; <nl>",fix string constant for cepstrumproducer in frontend.java so that it can better work,1
"mmm BootstrapConfigFileApplicationListener . java <nl> ppp BootstrapConfigFileApplicationListener . java <nl> - public static final int DEFAULT_ORDER = Ordered . HIGHEST_PRECEDENCE + 10 ; <nl> + public static final int DEFAULT_ORDER = <nl> + Math . addExact(ConfigDataEnvironmentPostProcessor . ORDER, 1) ; <nl>",fix order of the ` bootstrapconfigfileapplicationlistener ` so that it always run after the ` configdataenvironmentpostprocessor `,1
mmm CollisionUtils . java <nl> ppp CollisionUtils . java <nl> - import fr . themode . minestom . item . Material ; <nl> + import fr . themode . minestom . instance . block . Block ; <nl> - boolean xAir = instance . getBlockId(xBlock) == Material . AIR . getId() ; <nl> - boolean yAir = instance . getBlockId(yBlock) == Material . AIR . getId() ; <nl> - boolean zAir = instance . getBlockId(zBlock) == Material . AIR . getId() ; <nl> + boolean xAir = !Block . getFromId(instance . getBlockId(xBlock)) . isSolid() ; <nl> + boolean yAir <nl>,block collision improvement,0
mmm CassandraInterpreter . java <nl> ppp CassandraInterpreter . java <nl> - import static java . lang . Integer . parseInt ; <nl> + import com . datastax . oss . driver . api . core . CqlSession ; <nl> + import com . datastax . oss . driver . api . core . CqlSessionBuilder ; <nl> + import com . datastax . oss . driver . api . core . config . DefaultDriverOption ; <nl> + import com . datastax . oss . driver . api . core . config . DriverConfigLoader ; <nl> + import com . datastax <nl>,port cassandra interpreter to new driver,0
mmm JMenuItemBuilderTest . java <nl> ppp JMenuItemBuilderTest . java <nl> + import org . freeplane . core . ui . menubuilders . HeadlessFreeplaneRunner ; <nl> + static{ <nl> + new HeadlessFreeplaneRunner() ; <nl> + } <nl>,depends on resourcecontroller because of menu icon scaling,1
"mmm SQLServerTemplates . java <nl> ppp SQLServerTemplates . java <nl> + return ""CAST('"" literal ""' AS DATETIME2)"" ; <nl> - return ""{ts '"" + literal + ""'}"" ; <nl> + return ""CAST('"" literal ""' AS DATETIMEOFFSET)"" ; <nl> - return ""{d '"" + literal + ""'}"" ; <nl> + return ""CAST('"" literal ""' AS DATE)"" ; <nl> - return ""{t '"" + literal + ""'}"" ; <nl> + return ""CAST('"" literal ""' AS TIME)"" ; <nl>",improve data type for literal,0
"mmm Player . java <nl> ppp Player . java <nl> + private double x, y, z ; <nl> + private float yaw, pitch ; <nl> + private boolean onGround ; <nl> + public void refreshPosition(double x, double y, double z) { <nl> + this . x = x ; <nl> + this . y = y ; <nl> + this . z = z ; <nl> + } <nl> + public void refreshView(float yaw, float pitch) { <nl> + this . yaw = yaw ; <nl> + this . pitch = pitch ; <nl> + } <nl> + public <nl>",add chunk & some location packet,0
mmm ZrtpConfigurePanel . java <nl> ppp ZrtpConfigurePanel . java <nl> - import gnu . java . zrtp . ZrtpConfigure ; <nl> - import gnu . java . zrtp . ZrtpConstants ; <nl> + import gnu . java . zrtp . * ; <nl> - import javax . swing . border . EtchedBorder ; <nl> - import javax . swing . table . TableColumn ; <nl> - import javax . swing . table . TableColumnModel ; <nl> + import javax . swing . table . * ; <nl> + import net . java . sip . communicator . service . <nl>,remove the etched border with title from the security > call tab in tool > option in order to simplify it overall look a tiny bit,1
"new file <nl> ppp ProtocolIcon . java <nl> + package net . java . sip . communicator . service . protocol ; <nl> + import java . util . * ; <nl> + public interface ProtocolIcon <nl> + { <nl> + public static final String ICON_SIZE_16x16 = ""IconSize16x16"" ; <nl> + public static final String ICON_SIZE_32x32 = ""IconSize32x32"" ; <nl> + public static final String ICON_SIZE_48x48 = ""IconSize48x48"" ; <nl> + public static final String ICON_SIZE_64x64 = ""IconSize64x64"" ; <nl> + public Iterator getSupportedSizes() ; <nl> + public boolean isSizeSupported(String iconSize) ; <nl> + public byte[] getIcon(String iconSize) ; <nl>",protocolicon interface be mean to be implement by protocol implementation in order to export their icon,1
"mmm ConsumerMain . java <nl> ppp ConsumerMain . java <nl> - String queueName = ""test queue"" ; <nl> - channel . queueDeclare(queueName) ; <nl> + String testQueueName = ""test queue"" ; <nl> + channel . queueDeclare(testQueueName, true) ; <nl> + String testExchangeName = ""test exchange"" ; <nl> + channel . exchangeDeclare(testExchangeName, ""fanout"", true) ; <nl> + channel . queueBind(testQueueName, testExchangeName, """") ; <nl> - LatencyExperimentConsumer callback = new LatencyExperimentConsumer(channel, queueName) ; <nl> + LatencyExperimentConsumer callback = new LatencyExperimentConsumer(channel, testQueueName) ; <nl> - channel . basicConsume(queueName, true, callback) ; <nl> + channel . basicConsume(testQueueName, true, callback) ; <nl> - channel <nl>",altered so that the exchange and queue be declare durable so that persist message really do hit disk,1
"mmm ClusterEvent . java <nl> ppp ClusterEvent . java <nl>  <nl> mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> - return getString(ConfVars . ZEPPELIN_NOTEBOOK_DIR) ; <nl> + return getRelativeDir(ConfVars . ZEPPELIN_NOTEBOOK_DIR) ; <nl> mmm FileSystemNotebookRepo . java <nl> ppp FileSystemNotebookRepo . java <nl> - LOGGER . warn(""close is not implemented for HdfsNotebookRepo"") ; <nl> + LOGGER . warn(""close is not implemented for FileSystemNotebookRepo"") ; <nl> - LOGGER . warn(""getSettings is not implemented for HdfsNotebookRepo"") ; <nl> + LOGGER . warn(""getSettings is not implemented for FileSystemNotebookRepo"") ; <nl> - LOGGER . warn(""updateSettings is not implemented for HdfsNotebookRepo"") <nl>",save note permission info into notebook-authorization.json,0
"mmm FlinkInterpreter . java <nl> ppp FlinkInterpreter . java <nl> - import org . apache . flink . table . catalog . CatalogManager ; <nl> - import org . apache . flink . table . delegation . Planner ; <nl> - this . innerIntp . setSavePointIfNecessary(context) ; <nl> + this . innerIntp . setSavePointPathIfNecessary(context) ; <nl> mmm JobManager . java <nl> ppp JobManager . java <nl> + public static final String LATEST_CHECKPOINT_PATH = ""latest_checkpoint_path"" ; <nl> + public static final String SAVEPOINT_PATH = ""savepoint_path"" ; <nl> + public static final String RESUME_FROM_SAVEPOINT = ""resumeFromSavePoint"" ; <nl> + public static <nl>",support resume flink job from checkpoint,0
"mmm ExecutorLoop . java <nl> ppp ExecutorLoop . java <nl> - private Function<In, Void> consumer ; <nl> + private Consumer<In> consumer ; <nl> - public ExecutorLoop(int threads, int queueSize, Function<In, Void> consumer, <nl> + public ExecutorLoop( <nl> + int threads, <nl> + int queueSize, <nl> + Consumer<In> consumer, <nl> - queue = new LimitedQueue<>(queueSize) ; <nl> - exec = new ThreadPoolExecutor(threads, threads, 0L, TimeUnit . MILLISECONDS, queue, r -> <nl> - new Thread(r, threadPoolName + ""-"" + threadNumber . getAndIncrement()) <nl> + this . queue = new LimitedQueue<>(queueSize) ; <nl> + this . exec = new ThreadPoolExecutor( <nl> + <nl>",replace function with consumer because it be never return a result,1
"mmm FlinkShims . java <nl> ppp FlinkShims . java <nl> - public abstract boolean executeMultipleInsertInto(String sql, Object tblEnv, InterpreterContext context) throws Exception ; <nl> + public abstract boolean executeMultipleInsertInto(String jobName, Object tblEnv, InterpreterContext context) throws Exception ; <nl> mmm Flink110Shims . java <nl> ppp Flink110Shims . java <nl> - public boolean executeMultipleInsertInto(String sql, Object tblEnv, InterpreterContext context) throws Exception { <nl> - ((TableEnvironment) tblEnv) . execute(sql) ; <nl> + public boolean executeMultipleInsertInto(String jobName, Object tblEnv, InterpreterContext context) throws Exception { <nl> + ((TableEnvironment) tblEnv) . execute(jobName) ; <nl> mmm Flink111Shims . java <nl> ppp Flink111Shims . java <nl> - <nl>",allow specify jobname a paragraph local property,0
"mmm MetaDataExporterTest . java <nl> ppp MetaDataExporterTest . java <nl> - stmt . execute(""CREATE TABLE table ("" <nl> + stmt . execute(""CREATE TABLE foo ("" <nl> - exporter . setTableNamePattern(""TABLE"") ; <nl> + exporter . setTableNamePattern(""FOO"") ; <nl> - compiler . run(null, null, null, folder . getRoot() . getAbsoluteFile()  + ""/test/Table . java"") ; <nl> - Class<?> cls = Class . forName(""test . Table"", true, classLoader) ; <nl> + compiler . run(null, null, null, folder . getRoot() . getAbsoluteFile()  ""/test/Foo . java"") ; <nl> + Class<?> cls = Class . forName(""test . Foo"", true, classLoader) ; <nl> <nl>",upgrade geolatte for querydsl-sql-spatial,0
mmm OneToOneCallPeerPanel . java <nl> ppp OneToOneCallPeerPanel . java <nl> - if (OperationSetVideoTelephony . LOCAL_VIDEO_STREAMING . equals( <nl> - event . getPropertyName())) <nl> - { <nl> - handleLocalVideoStreamingChange( <nl> - this) ; <nl> - } <nl> + if (OperationSetVideoTelephony . LOCAL_VIDEO_STREAMING <nl> +  . equals(event . getPropertyName())) <nl> + handleLocalVideoStreamingChange(this) ; <nl> + public void videoUpdate(VideoEvent event) <nl> + { <nl> + handleVideoEvent(event) ; <nl> + } <nl> - if ((event != null) && !event . isConsumed() <nl> - && (event . getOrigin() == VideoEvent . LOCAL)) <nl> + if ((event != null) <nl> + && !event . <nl>,attempt to set the size of the calldialog so that it display the remote video in it actual size in order to avoid quality loss due to scale,1
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> - LOG . warn(ConfVars . ZEPPELIN_CONFIG_FS_DIR . varName + "" is not specified, fall back to local "" + <nl> - ""conf directory "" + ConfVars . ZEPPELIN_CONF_DIR . varName) ; <nl> + LOG . warn(""{} is not specified, fall back to local conf directory {}"", <nl> + ConfVars . ZEPPELIN_CONFIG_FS_DIR . varName,  ConfVars . ZEPPELIN_CONF_DIR . varName) ; <nl> mmm Booter . java <nl> ppp Booter . java <nl> - import org . eclipse . aether . repository . Authentication ; <nl> - import org . eclipse <nl>",improve code style,0
mmm NodeContainsCondition . java <nl> ppp NodeContainsCondition . java <nl> + final private String valueLowerCase ;,bug fix : nodecontainscondition should ignore letter case,0
mmm IPySparkInterpreter . java <nl> ppp IPySparkInterpreter . java <nl> - public boolean isSpark2() { <nl> - return sparkInterpreter . getSparkVersion() . newerThanEquals(SparkVersion . SPARK_2_0_0) ; <nl> + public boolean isSpark1() { <nl> + return sparkInterpreter . getSparkVersion() . getMajorVersion() == 1 ; <nl> mmm PySparkInterpreter . java <nl> ppp PySparkInterpreter . java <nl> - public boolean isSpark2() { <nl> - return sparkInterpreter . getSparkVersion() . newerThanEquals(SparkVersion . SPARK_2_0_0) ; <nl> + public boolean isSpark1() { <nl> + return sparkInterpreter . getSparkVersion() . getMajorVersion() == 1 ; <nl> mmm SparkRInterpreter . java <nl> ppp SparkRInterpreter . java <nl> - <nl>,support spark 3.0,0
"mmm Tracer . java <nl> ppp Tracer . java <nl> + private static boolean property(String property){ <nl> + return Boolean . parseBoolean(System . getProperty( <nl> + ""com . rabbitmq . tools . Tracer . "" property)) ;  <nl> + } <nl> - Boolean . parseBoolean(System . getProperty(""com . rabbitmq . tools . Tracer . WITHHOLD_INBOUND_HEARTBEATS"")) ; <nl> + property(""WITHHOLD_INBOUND_HEARTBEATS"") ; <nl> - Boolean . parseBoolean(System . getProperty(""com . rabbitmq . tools . Tracer . WITHHOLD_OUTBOUND_HEARTBEATS"")) ; <nl> + property(""WITHHOLD_OUTBOUND_HEARTBEATS"") ; <nl> - Boolean . parseBoolean(System . getProperty(""com . rabbitmq . tools . Tracer . NO_ASSEMBLE_FRAMES"")) ; <nl> + <nl>",random tidy up of property because i be in the area,1
deleted file <nl> mmm WallettestP0001 . java <nl> - package stest . tron . wallet . wallettestp0 ; <nl> - import io . grpc . ManagedChannel ; <nl> - import io . grpc . ManagedChannelBuilder ; <nl> - import java . util . HashMap ; <nl> - import java . util . Optional ; <nl> - import java . util . concurrent . TimeUnit ; <nl> - import lombok . extern . slf4j . Slf4j ; <nl> - import org . testng . Assert ; <nl> - import org . testng . annotations . AfterClass ; <nl> - import <nl>,"remove the p0 stest case , because all p0 test can find in other stest case",1
mmm MinecraftServer . java <nl> ppp MinecraftServer . java <nl> - public static final int CHUNK_VIEW_DISTANCE = 10 ; <nl> - public static final int ENTITY_VIEW_DISTANCE = 5 ; <nl> + public static final int CHUNK_VIEW_DISTANCE = 2 ; <nl> + public static final int ENTITY_VIEW_DISTANCE = 2 ; <nl> mmm Entity . java <nl> ppp Entity . java <nl> - import com . github . simplenet . packet . Packet ; <nl> + import fr . themode . minestom . net . packet . PacketWriter ; <nl> - public Consumer<Packet> getMetadataConsumer() { <nl> + public Consumer<PacketWriter> getMetadataConsumer() { <nl>,prepare the switch to netty,0
"mmm AStarPathfinder . java <nl> ppp AStarPathfinder . java <nl> + long time = System . nanoTime() ; <nl> + System . out . println(""found in: "" (System . nanoTime() - time) "" ns"") ; <nl> mmm Chunk . java <nl> ppp Chunk . java <nl> - private short[][][] blocksId = new short[CHUNK_SIZE_X][CHUNK_SIZE_Y][CHUNK_SIZE_Z] ; <nl> - private short[][][] customBlocksId = new short[CHUNK_SIZE_X][CHUNK_SIZE_Y][CHUNK_SIZE_Z] ; <nl> + private short[] blocksId = new short[CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z] ; <nl> + private short[] customBlocksId = new short[CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z] ; <nl> - this . blocksId[x][y][z] = 0 ; // Set <nl>",amazingly fast block getter,0
"mmm InterpreterClient . java <nl> ppp InterpreterClient . java <nl> + String getInterpreterGroupId() ; <nl> mmm ClusterInterpreterLauncher . java <nl> ppp ClusterInterpreterLauncher . java <nl> + context . getInterpreterGroupId(), <nl> + context . getInterpreterGroupId(), <nl> mmm DockerInterpreterProcess . java <nl> ppp DockerInterpreterProcess . java <nl> + @Override <nl> + public String getInterpreterGroupId() { <nl> + return interpreterGroupId ; <nl> + } <nl> mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> + @Override <nl> + public String getInterpreterGroupId() { <nl> + return interpreterGroupId ; <nl> + } <nl> mmm StandardInterpreterLauncher . java <nl> ppp StandardInterpreterLauncher . java <nl> <nl>",add name to remoteinterpreterprocess,0
"mmm PySubmarineInterpreterTest . java <nl> ppp PySubmarineInterpreterTest . java <nl> - assertEquals(intpResult . code(), InterpreterResult . Code . SUCCESS) ; <nl> + assertEquals(InterpreterResult . Code . SUCCESS, intpResult . code()) ; <nl> mmm AbstractDependencyResolver . java <nl> ppp AbstractDependencyResolver . java <nl> + import java . net . MalformedURLException ; <nl> - import org . sonatype . aether . RepositorySystem ; <nl> - import org . sonatype . aether . RepositorySystemSession ; <nl> - import org . sonatype . aether . repository . Authentication ; <nl> - import org . sonatype . aether . repository . Proxy ; <nl> <nl>",update to maven resolver,0
mmm Main . java <nl> ppp Main . java <nl> - import fr . themode . minestom . MinecraftServer ; <nl> - import fr . themode . minestom . command . CommandManager ; <nl> - import fr . themode . minestom . instance . block . BlockManager ; <nl> - import fr . themode . minestom . instance . block . rule . vanilla . RedstonePlacementRule ; <nl> - import fr . themode . minestom . item . ItemStack ; <nl> - import fr . themode . minestom . item . Material ; <nl> - import fr . themode <nl>,package rename to net.minestom.server,0
mmm SparkPipelineRunner . java <nl> ppp SparkPipelineRunner . java <nl> - public final class SparkPipelineRunner extends PipelineRunner<EvaluationResult> { <nl> + public final class SparkRunner extends PipelineRunner<EvaluationResult> { <nl> - private static final Logger LOG = LoggerFactory . getLogger(SparkPipelineRunner . class) ; <nl> + private static final Logger LOG = LoggerFactory . getLogger(SparkRunner . class) ; <nl> - public static SparkPipelineRunner create() { <nl> + public static SparkRunner create() { <nl> - options . setRunner(SparkPipelineRunner . class) ; <nl> - return new SparkPipelineRunner(options) ; <nl> + options . setRunner(SparkRunner . class) ; <nl> + return new SparkRunner(options) ; <nl> - <nl>,rename sparkpipelinerunner to sparkrunner,0
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> + public boolean isJMXEnabled() { <nl> + return getBoolean(ConfVars . ZEPPELIN_JMX_ENABLE) ; <nl> + } <nl> + public int getJMXPort() { <nl> + return getInt(ConfVars . ZEPPELIN_JMX_PORT) ; <nl> + } <nl> + public boolean isPrometheusMetricEnabled() { <nl> + return getBoolean(ConfVars . ZEPPELIN_METRIC_ENABLE_PROMETHEUS) ; <nl> + } <nl> + ZEPPELIN_JMX_ENABLE(""zeppelin . jmx . enable"", false), <nl> + ZEPPELIN_JMX_PORT(""zeppelin . jmx . port"", 9996), <nl> + ZEPPELIN_METRIC_ENABLE_PROMETHEUS(""zeppelin . metric . enable . prometheus"", false), <nl> new file <nl> ppp JVMInfoBinder . java <nl> + package org . apache . zeppelin <nl>",metric and healthcheck,0
"mmm FlinkStreamSqlInterpreterTest . java <nl> ppp FlinkStreamSqlInterpreterTest . java <nl> - @Test <nl> - String initStreamScalaScript = getInitStreamScript(1000) ; <nl> + String initStreamScalaScript = getInitStreamScript(2000) ; <nl> mmm SqlInterpreterTest . java <nl> ppp SqlInterpreterTest . java <nl> + p . setProperty(""taskmanager . memory . task . off-heap . size"", ""80mb"") ; <nl> - resultMessages . get(0) . getData() . contains(""does not exist in"")) ; <nl> + resultMessages . get(0) . getData() . contains(""does not exist"")) ; <nl> mmm FlinkIntegrationTest . java <nl> ppp FlinkIntegrationTest . java <nl> - private static Logger LOGGER = LoggerFactory . getLogger(SparkIntegrationTest . class) ; <nl>",upgrade flink to 1.11.0,0
mmm MainView . java <nl> ppp MainView . java <nl> - textModified = text != content ? TextModificationState . SUCCESS : TextModificationState . NONE ;,do not mark node with named object a changed,0
"new file <nl> ppp Color . java <nl> + package sf . util ; <nl> + public final class Color <nl> + { <nl> + public static Color white = new Color(255, 255, 255) ; <nl> + public static Color fromHSV(final float hue, <nl> + final float saturation, <nl> + final float value) <nl> + { <nl> + final float normaliedHue = (hue - (float) Math . floor(hue)) ; <nl> + final int h = (int) (normaliedHue * 6) ; <nl> + final float f = normaliedHue * 6 - h ; <nl> + final float p = value <nl>","remove dependency on java.awt , so that schemacrawler can use compact profile 2",1
"mmm ContentPacketExtension . java <nl> ppp ContentPacketExtension . java <nl> + import net . java . sip . communicator . impl . protocol . jabber . extensions . * ; <nl> - public class ContentPacketExtension implements PacketExtension <nl> + public class ContentPacketExtension extends AbstractPacketExtension <nl> - public static final String NAMESPACE = """" ; <nl> - private CreatorEnum creator ; <nl> - private String disposition ; <nl> - private String name ; <nl> - private SendersEnum senders = SendersEnum . both ; <nl> - this . creator = creator ; <nl> - this . disposition = disposition ; <nl> <nl>",refactors contentpacketextension so that it would extend abstractpacketextension,1
"mmm TimeUnit . java <nl> ppp TimeUnit . java <nl> - TICK, MILLISECOND ; <nl> + TICK, HOUR, MINUTE, SECOND, MILLISECOND ; <nl> + case HOUR: <nl> + return value * 3_600_000 ; <nl> + case MINUTE: <nl> + return value * 60_000 ; <nl> + case SECOND: <nl> + return value * 1000 ; <nl> + default: <nl> + return -1 ; // Unexpected <nl> - return -1 ; // Unexpected <nl>",add more timeunit,0
mmm ProtocolProviderServiceSipImpl . java <nl> ppp ProtocolProviderServiceSipImpl . java <nl> - if (processors . contains(methodProcessor) == false) <nl> + else <nl> - processors . add(methodProcessor) ; <nl> + Class methodProcessorClass = methodProcessor . getClass() ; <nl> + for (Iterator<MethodProcessor> processorIter = <nl> + processors . iterator() ; processorIter . hasNext() ;) <nl> + { <nl> + if (processorIter . next() . getClass() <nl> +  . equals(methodProcessorClass)) <nl> + { <nl> + processorIter . remove() ; <nl> + } <nl> + } <nl> + processors . add(methodProcessor) ; <nl>,"when register method processor with protocolproviderservicesipimpl , register the late of one an the same class in order to not register one and the same operationset multiple time",1
"mmm BalancedClickhouseDataSource . java <nl> ppp BalancedClickhouseDataSource . java <nl> - private static final Pattern URL_TEMPLATE = Pattern . compile(JDBC_CLICKHOUSE_PREFIX + ""//([a-zA-Z0-9_:, . ]+)(/[a-zA-Z0-9_]+)?"") ; <nl> + private static final Pattern URL_TEMPLATE = Pattern . compile(JDBC_CLICKHOUSE_PREFIX ""//([a-zA-Z0-9_:, . -]+)(/[a-zA-Z0-9_]+)?"") ; <nl> mmm BalancedClickhouseDataSourceTest . java <nl> ppp BalancedClickhouseDataSourceTest . java <nl> + @Test <nl> + public void testUrlSplitValidHostName() throws Exception { <nl> + assertEquals(Arrays . asList(""jdbc:clickhouse://localhost:1234"", ""jdbc:clickhouse://_0another-host . com:4321""), <nl> + BalancedClickhouseDataSource . splitUrl(""jdbc:clickhouse://localhost:1234,_0another-host . com:4321"")) ; <nl> + } <nl> + @Test(expectedExceptions = IllegalArgumentException . class) <nl> + public void testUrlSplitInvalidHostName() throws Exception { <nl> + BalancedClickhouseDataSource . <nl>",fix the url pattern in the balancedclickhousedatasource class so that it work with dash,1
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> - LOGGER . warn(""Failed to load configuration, proceeding with a default"", e) ; <nl> + LOGGER . warn(""Failed to load XML configuration, proceeding with a default,for a stacktrace activate the debug log"") ; <nl> + LOGGER . debug(""Failed to load XML configuration"", e) ; <nl>",suppress configurationexception stack trace,0
"mmm TemplateTextTransformer . java <nl> ppp TemplateTextTransformer . java <nl> - obj = builder . toString() + "" "" + obj ; <nl> + builder . append(' ') ; <nl> + if (isHtml) { <nl> + obj = insertPrefix((String)obj, builder . toString()) ; <nl> + } <nl> + else{ <nl> + obj = builder . toString() obj ; <nl> + } <nl> + private String insertPrefix(String html, String prefix) { <nl> + StringBuilder sb = new StringBuilder(html . length() prefix . length() 1) ; <nl> + int i = 0 ; <nl> + int level = 0 ; <nl> <nl>",can not include text in the same line of the number of a node,0
"mmm RemoteInterpreterServer . java <nl> ppp RemoteInterpreterServer . java <nl> - logger . info(""job:"" + job) ; <nl> - logger . info(""getStatus: "" + job . getStatus() . name()) ; <nl>",remove unnecessary logging,0
"mmm HTTPSampler . java <nl> ppp HTTPSampler . java <nl> - private void setPutHeaders(URLConnection conn) <nl> - { <nl> + private void setPutHeaders(URLConnection conn) throws IOException { <nl> + postWriter = new PostWriter() ; <nl> + postWriter . setHeaders(conn, this) ; <nl> mmm HTTPSampler2 . java <nl> ppp HTTPSampler2 . java <nl> - putBody . append(value) ; <nl> + putBodyContent . append(value) ; <nl>","fix handling of put request , so that parameter can be send a body",1
"mmm AttributeViewTypeAction . java <nl> ppp AttributeViewTypeAction . java <nl> + import org . freeplane . features . common . map . MapChangeEvent ; <nl> mmm ModelessAttributeController . java <nl> ppp ModelessAttributeController . java <nl> + import org . freeplane . features . common . map . MapChangeEvent ; <nl> + public static final String ATTRIBUTE_VIEW_TYPE = ""AttributeViewType"" ; <nl> + final MapChangeEvent mapChangeEvent = new MapChangeEvent(this, map, ATTRIBUTE_VIEW_TYPE, attributeViewType, type) ; <nl> + Controller . getCurrentModeController() . getMapController() . fireMapChanged(mapChangeEvent) ; <nl> mmm MapView . java <nl> ppp MapView . java <nl> + import org . freeplane . <nl>",bug fix continue,0
mmm AMultipleNodeAction . java <nl> ppp AMultipleNodeAction . java <nl> + import java . util . List ;,iterate over fix list in amultiplenodeaction even if action change selection,0
"mmm FlinkInterpreter . java <nl> ppp FlinkInterpreter . java <nl> - return this . innerIntp . getStreamTableEnvironment() ; <nl> + return this . innerIntp . getStreamTableEnvironment(""blink"") ; <nl> - return this . innerIntp . getBatchTableEnvironment() ; <nl> + return this . innerIntp . getBatchTableEnvironment(""blink"") ; <nl> mmm JobManager . java <nl> ppp JobManager . java <nl> + public void shutdown() { <nl> + for (FlinkJobProgressPoller jobProgressPoller : jobProgressPollerMap . values()) { <nl> + jobProgressPoller . cancel() ; <nl> + } <nl> + } <nl> mmm AbstractStreamSqlJob . java <nl> ppp AbstractStreamSqlJob . java <nl> + Table table = stenv <nl>",display stream data in flink table api,0
"mmm ChatConversationPanel . java <nl> ppp ChatConversationPanel . java <nl> + this . setHorizontalScrollBarPolicy( <nl> + JScrollPane . HORIZONTAL_SCROLLBAR_AS_NEEDED) ; <nl> - copyLinkItem . addActionListener(new ActionListener(){ <nl> - public void actionPerformed(ActionEvent e){                 <nl> + copyLinkItem . addActionListener(new ActionListener() { <nl> + public void actionPerformed(ActionEvent e) { <nl> - if((e . getModifiers() & InputEvent . BUTTON3_MASK) != 0){ <nl> + if ((e . getModifiers() & InputEvent . BUTTON3_MASK) != 0) { <nl> - if(currentHref != null){ <nl> - if(currentHref != """"){ <nl> + if <nl>","horizontal scrollbar a need in the conversation area could not be remove completely , because for now there 's no other way to show long word",1
mmm Chat . java <nl> ppp Chat . java <nl> + @Override <nl> + public boolean equals(Object obj) { <nl> + return obj instanceof Chat <nl> + && threadID . equals(((Chat)obj) . getThreadID()) <nl> + && participant . equals(((Chat)obj) . getParticipant()) ; <nl> + } <nl> mmm ChatManager . java <nl> ppp ChatManager . java <nl> - private Chat getThreadChat(String thread) { <nl> + public Chat getThreadChat(String thread) { <nl> mmm ChatStateManager . java <nl> ppp ChatStateManager . java <nl> + import org . jivesoftware . smack . util . collections . ReferenceMap ; <nl> + private static PacketFilter <nl>,"update to track last chat state of a chat so that the user be not update more than once , and the xep be not violate",1
"mmm IPyFlinkInterpreterTest . java <nl> ppp IPyFlinkInterpreterTest . java <nl> - assertEquals(InterpreterResult . Type . TABLE, resultMessages . get(0) . getType()) ; <nl> + assertEquals(context . out . toString(), InterpreterResult . Type . TABLE, resultMessages . get(0) . getType()) ; <nl> mmm BasePythonInterpreterTest . java <nl> ppp BasePythonInterpreterTest . java <nl> + import org . junit . Ignore ; <nl> - @Test <nl> + @Ignore(""Flaky test, need to investigate why it fails"") <nl> - assertEquals(InterpreterResult . Code . SUCCESS, <nl> - interpreter . interpret(validCode, getInterpreterContext()) . code()) ; <nl> - assertEquals(InterpreterResult . Code . SUCCESS, <nl> - interpreter . <nl>",improve github action ci,0
"mmm SparkRunnerRegistrarTest . java <nl> ppp SparkRunnerRegistrarTest . java <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . JUnit4 ; <nl> + @RunWith(JUnit4 . class) <nl> - ImmutableList . of(SparkPipelineOptions . class, SparkStreamingPipelineOptions . class), <nl> - new SparkRunnerRegistrar . Options() . getPipelineOptions()) ; <nl> + ImmutableList . of(SparkPipelineOptions . class, SparkStreamingPipelineOptions . class), <nl> + new SparkRunnerRegistrar . Options() . getPipelineOptions()) ; <nl> - return ; <nl> + return ; <nl> - return ; <nl> + return ; <nl>",update readme accord to dataflow- > beam package rename,0
"new file <nl> ppp AccountID . java <nl> + package net . java . sip . communicator . service . protocol ; <nl> + import java . util . * ; <nl> + public abstract class AccountID <nl> + { <nl> + protected Map accountProperties = null ; <nl> + protected String accountID = null ; <nl> + protected AccountID( String accountID, <nl> + Map accountProperties) <nl> + { <nl> + super() ; <nl> + this . accountID = String . copyValueOf(accountID . toCharArray()) ; <nl> + this . accountProperties = new Hashtable(accountProperties) ; <nl> + } <nl> + <nl>","a expect , the protocol provider service evolve aggresively in order to suite the need of the icq implementation",1
mmm ScaledEditorKit . java <nl> ppp ScaledEditorKit . java <nl> - import java . io . IOException ; <nl> - import java . io . Writer ; <nl> - import javax . swing . text . BadLocationException ; <nl> + import javax . swing . text . Element ; <nl> + import javax . swing . text . View ; <nl> - import javax . swing . text . html . HTMLWriter ; <nl> + import javax . swing . text . html . ImageView ; <nl> - import org . freeplane . core . ui . components . <nl>,create a copy of scaledstylesheet in freeplane because of applet,1
"mmm TableEnvFactory . java <nl> ppp TableEnvFactory . java <nl> - public TableEnvironment createScalaFlinkStreamTableEnvironment(EnvironmentSettings settings) { <nl> + public TableEnvironment createScalaFlinkStreamTableEnvironment(EnvironmentSettings settings, ClassLoader classLoader) { <nl> - Constructor constructor = clazz <nl> -  . getConstructor( <nl> - CatalogManager . class, <nl> - ModuleManager . class, <nl> - FunctionCatalog . class, <nl> - TableConfig . class, <nl> - org . apache . flink . streaming . api . scala . StreamExecutionEnvironment . class, <nl> - Planner . class, <nl> - Executor . class, <nl> - boolean . class) ; <nl> - return (TableEnvironment) constructor . newInstance(catalogManager, <nl> - moduleManager, <nl>",support flink 1.11.1,0
"mmm ZeppelinConfiguration . java <nl> ppp ZeppelinConfiguration . java <nl> + public String getS3CannedAcl() { <nl> + return getString(ConfVars . ZEPPELIN_NOTEBOOK_S3_CANNED_ACL) ; <nl> + } <nl> + ZEPPELIN_NOTEBOOK_S3_CANNED_ACL(""zeppelin . notebook . s3 . cannedAcl"", null), <nl> mmm OldS3NotebookRepo . java <nl> ppp OldS3NotebookRepo . java <nl> + import com . amazonaws . services . s3 . model . CannedAccessControlList ; <nl> + private CannedAccessControlList objectCannedAcl ; <nl> + if (StringUtils . isNotBlank(conf . getS3CannedAcl())) { <nl> + objectCannedAcl = CannedAccessControlList . valueOf(conf . getS3CannedAcl()) ; <nl> + } <nl> + if (objectCannedAcl != null) { <nl> + putRequest . <nl>",add s3 can acl option for s3notebookrepo,0
"mmm SimpleCommand . java <nl> ppp SimpleCommand . java <nl> - return ""test"" ; <nl> + return ""follow"" ; <nl> + } <nl> + @Override <nl> + public String[] getAliases() { <nl> + return new String[0] ; <nl> - player . sendMessage(""You tried the sample command!"") ; <nl> + player . sendMessage(""Everyone come at you!"") ; <nl> mmm CommandManager . java <nl> ppp CommandManager . java <nl> + String[] aliases = commandProcessor . getAliases() ; <nl> + if (aliases == null || aliases . length == 0) <nl> + continue ; <nl> + for (String alias : aliases) { <nl>",add aliases support to commandprocessor,0
mmm AttributePanelManager . java <nl> ppp AttributePanelManager . java <nl> - final private JPanel tablePanel ; <nl> - private ModeController modeController ; <nl> - private int axis = BoxLayout . Y_AXIS ; <nl> - private class TableCreator implements INodeSelectionListener{ <nl> + final private JPanel tablePanel ; <nl> + private ModeController modeController ; <nl> + private int axis = BoxLayout . Y_AXIS ; <nl> + private class TableCreator implements INodeSelectionListener{ <nl> - private AttributeView attributeView ; <nl> - private JComboBox formatChooser ; <nl> + private AttributeView attributeView ; <nl> + private JComboBox formatChooser ; <nl> - public void onDeselect(NodeModel node) <nl>,well bug fix for attribute panel if no map be open,0
"mmm IRInterpreter . java <nl> ppp IRInterpreter . java <nl> + import java . util . Map ; <nl> + @Override <nl> + protected Map<String, String> setupKernelEnv() throws IOException { <nl> + Map<String, String> envs = super . setupKernelEnv() ; <nl> + String pathEnv = envs . getOrDefault(""PATH"", """") ; <nl> + if (condaEnv != null) { <nl> + pathEnv = new File("" . "") . getAbsolutePath() File . separator condaEnv + <nl> + File . separator ""bin"" File . pathSeparator pathEnv ; <nl> + envs . put(""PATH"", pathEnv) ; <nl> + } <nl> + return envs ; <nl> <nl>",support to run r interpreter in yarn mode with customized conda env,0
"mmm Player . java <nl> ppp Player . java <nl> - setBoundingBox(0 . 69f, 1 . 8f, 0 . 69f) ; <nl> + setBoundingBox(0 . 6f, 1 . 8f, 0 . 6f) ; <nl>",set player bound box size to 0.6,0
"mmm MongodbExpressions . java <nl> ppp MongodbExpressions . java <nl> + import com . querydsl . core . types . dsl . ListPath ; <nl> + import com . querydsl . core . types . dsl . SimpleExpression ; <nl> + import java . util . Collection ; <nl> + public static <T, Q extends SimpleExpression<? super T>> BooleanExpression all(ListPath<T, Q> expr, Collection<T> params) { <nl> + return Expressions . booleanOperation(MongodbOps . ALL, expr, ConstantImpl . create(params)) ; <nl> + } <nl> mmm MongodbOps . java <nl> ppp MongodbOps . java <nl> - GEO_INTERSECTS(Boolean . class) ; <nl> + <nl>",add $ all operation,0
"mmm MapViewChangeObserverCompound . java <nl> ppp MapViewChangeObserverCompound . java <nl> - import java . util . Iterator ; <nl> - for (final Iterator<IMapSelectionListener> iter = mapListeners . iterator() ; iter . hasNext() ;) { <nl> - final IMapSelectionListener observer = iter . next() ; <nl> - if (oldModel != newModel) { <nl> - observer . afterMapChange(oldModel, newModel) ; <nl> - } <nl> - } <nl> - for (final IMapViewChangeListener observer : viewListeners) { <nl> + if (oldModel != newModel) { <nl> + for (final IMapSelectionListener observer:mapListeners . toArray(new IMapSelectionListener[]{})) { <nl> + observer . afterMapChange(oldModel, newModel) ; <nl> + <nl>",fix concurrentmodificationexception by use array,0
"mmm NarrowHexagonPainter . java <nl> ppp NarrowHexagonPainter . java <nl> - width = mainView . limitWidth(width) ; <nl> + width = mainView . limitWidth(width, mainView . getPaintedBorderWidth()) ; <nl> mmm OvalPainter . java <nl> ppp OvalPainter . java <nl> - prefSize . width = prefSize . height = mainView . limitWidth(diameter) ; <nl> + prefSize . width = prefSize . height = mainView . limitWidth(diameter, mainView . getPaintedBorderWidth()) ; <nl> mmm RectanglePainter . java <nl> ppp RectanglePainter . java <nl> - preferredSize . width = mainView . limitWidth(preferredSize . width) ; <nl> + preferredSize . width = mainView . <nl>",allow node width to grow up to maximum width so that increase the border width do not shrink the node when max width > min width,1
"mmm AbstractDeviceConfigurationListener . java <nl> ppp AbstractDeviceConfigurationListener . java <nl> - CaptureDeviceInfo device, <nl> + String body, <nl> - if(title != null && device != null && popUpEvent != null) <nl> + if(title != null && body != null && popUpEvent != null) <nl> - device . getName() <nl> - + ""\r\n"" <nl> + body <nl> + ""\r\n\r\n"" <nl> mmm AudioDeviceConfigurationListener . java <nl> ppp AudioDeviceConfigurationListener . java <nl> + private CaptureDeviceInfo captureDevice = null ; <nl> + private CaptureDeviceInfo playbackDevice = null ; <nl> + private CaptureDeviceInfo notificationDevice = null ; <nl> - popUpEvent = NeomediaActivator . NEW_SELECTED_DEVICE <nl>",change sequence of audio configuration modification event in order to aggregate pop-up notification event,1
"mmm ComponentPreset . java <nl> ppp ComponentPreset . java <nl> - Type[] compatibleTypes ; <nl> - compatibleTypes = new Type[1] ; <nl> - compatibleTypes[0] = this ; <nl> - Type( Type[] t, TypedKey<?>[] displayedColumns ) { <nl> - compatibleTypes = new Type[t . length+1] ; <nl> - compatibleTypes[0] = this ; <nl> - for( int i=0 ; i<t . length ; i++ ) { <nl> - compatibleTypes[i+1] = t[i] ; <nl> - } <nl> - this . displayedColumns = displayedColumns ; <nl> - } <nl> - public Type[] getCompatibleTypes() { <nl> - return compatibleTypes ; <nl> + public List<Type> <nl>","change implementation of compatible type so they can be declare because of the circular reference , they can not be declare in constructor argument",1
deleted file <nl> mmm MediaDispatcher . java <nl> - package net . java . sip . communicator . impl . media ; <nl> - import java . util . * ; <nl> - import net . java . sip . communicator . service . media . event . * ; <nl> - public class MediaDispatcher <nl> - { <nl> - private Vector mediaListeners ; <nl> - public MediaDispatcher() {} <nl> - protected synchronized void addMediaListener(MediaListener listener) <nl> - { <nl> - if (mediaListeners == null) <nl> - { <nl> - mediaListeners = new Vector() ; <nl> - } <nl> <nl>,delete mediadispatcher because it seem to be rename to mediaeventdispatcher and be no longer be use,1
"mmm FormatController . java <nl> ppp FormatController . java <nl> - import org . freeplane . features . mode . ModeController ; <nl> - return getController(Controller . getCurrentModeController()) ; <nl> + return getController(Controller . getCurrentController()) ; <nl> - public static FormatController getController(ModeController modeController) { <nl> - return (FormatController) modeController . getExtension(FormatController . class) ; <nl> + public static FormatController getController(Controller controller) { <nl> + return (FormatController) controller . getExtension(FormatController . class) ; <nl> - final ModeController modeController = Controller . getCurrentModeController() ; <nl> - modeController . addExtension(FormatController . class, formatController) ; <nl> + final Controller controller = Controller . <nl>",install scannercontroller and formatcontroller a mode independent controller extension so that they be available in all mode,1
"mmm JobManager . java <nl> ppp JobManager . java <nl> - Integer . parseInt(rootNode . getObject() . getString(""duration"")) / 1000 + <nl> + rootNode . getObject() . getLong(""duration"") / 1000 + <nl> - context . out . clear() ; <nl> + context . out . clear(false) ; <nl> mmm AppendStreamSqlJob . java <nl> ppp AppendStreamSqlJob . java <nl> - context . out() . clear() ; <nl> + context . out() . clear(false) ; <nl> mmm SingleRowStreamSqlJob . java <nl> ppp SingleRowStreamSqlJob . java <nl> - context . out() . clear() ; <nl> + context . out() . clear(false) ; <nl>",paragraph refresh make the other paragraph shake,0
mmm ProvSSLEngine . java <nl> ppp ProvSSLEngine . java <nl> + this . handshakeStatus = HandshakeStatus . NEED_WRAP ; <nl> + this . handshakeStatus = HandshakeStatus . NEED_UNWRAP ; <nl> - determineHandshakeStatus() ; <nl> - throw new UnsupportedOperationException() ; <nl> + return protocol != null && protocol . isClosed() ; <nl> - throw new UnsupportedOperationException() ; <nl> + return protocol != null && protocol . isClosed() && protocol . getAvailableOutputBytes() < 1 ; <nl> - HandshakeStatus prevHandshakeStatus = handshakeStatus ; <nl> - byte[] buf = new byte[src . remaining()] ; <nl> - src . get(buf) ; <nl> - try <nl>,improvement to provsslengine,0
"mmm SimpleCommand . java <nl> ppp SimpleCommand . java <nl> - chickenCreature . moveTo(player . getPosition()) ; <nl> + chickenCreature . moveTo(player . getPosition() . clone()) ; <nl> mmm CollisionUtils . java <nl> ppp CollisionUtils . java <nl> - BlockPosition xBlock = new BlockPosition(targetX, currentY, currentZ) ; <nl> - BlockPosition yBlock = new BlockPosition(currentX, targetY, currentZ) ; <nl> - BlockPosition zBlock = new BlockPosition(currentX, currentY, targetZ) ; <nl> + BlockPosition xBlock = new BlockPosition(targetX, (int) currentY, currentZ) ; <nl> + BlockPosition yBlock = new BlockPosition(currentX, (int) targetY, currentZ) ; <nl> + BlockPosition zBlock = new BlockPosition(currentX, (int) currentY, targetZ) <nl>",wip entity/block collision/gravity,0
"new file <nl> ppp Base64 . java <nl> + package py4j ; <nl> + import java . util . Arrays ; <nl> + public class Base64 { <nl> + private static final char[] CA = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"" <nl> +  . toCharArray() ; <nl> + private static final int[] IA = new int[256] ; <nl> + static { <nl> + Arrays . fill(IA, -1) ; <nl> + for (int i = 0, iS = CA . length ; i < iS ; i++) <nl> + IA[CA[i]] = i ; <nl> + IA['='] = 0 ; <nl> + } <nl> + <nl>",copy back source file because pde do not support link source directory,1
"mmm VertxExecutorFactory . java <nl> ppp VertxExecutorFactory . java <nl> - int poolSize = Integer . getInteger(""vertx . pool . eventloop . size"", 2 * Runtime . getRuntime() . availableProcessors()) ; <nl> - return new NioEventLoopGroup(poolSize, new VertxThreadFactory(poolName)) ; <nl> + return new NioEventLoopGroup(eventLoopSize(), new VertxThreadFactory(poolName)) ; <nl> + } <nl> + public static int eventLoopSize() { <nl> + return Integer . getInteger(""vertx . pool . eventloop . size"", 2 * Runtime . getRuntime() . availableProcessors()) ; <nl> mmm PartialPooledByteBufAllocator . java <nl> ppp PartialPooledByteBufAllocator . java <nl> + import org . vertx . java . core . impl <nl>",it workaround for condition which be happen because of problem in pooledbytebufallocator,1
"mmm NotebookServer . java <nl> ppp NotebookServer . java <nl> + case SAVE_INTERPRETER_BINDINGS: <nl> + saveInterpreterBindings(conn, messagereceived) ; <nl> + break ; <nl> + public void saveInterpreterBindings(NotebookSocket conn, Message fromMessage) throws IOException { <nl> + List<InterpreterSettingsList> settingList = new ArrayList<>() ; <nl> + String noteId = (String) fromMessage . data . get(""noteId"") ; <nl> + Note note = getNotebook() . getNote(noteId) ; <nl> + if (note != null) { <nl> + List<String> settingIdList = <nl> + gson . fromJson(String . valueOf(fromMessage . data . get(""selectedSettingIds"")), <nl> + new TypeToken<ArrayList<String>>() {} . getType()) ; <nl> + if (!settingIdList . isEmpty()) <nl>",interpreter binding menu of note only show default interpreter,0
mmm PacketCompressor . java <nl> ppp PacketCompressor . java <nl> - private final Deflater deflater = new Deflater() ; <nl> + private final Deflater deflater = new Deflater(3) ; <nl>,decrease compression level to 3,0
"mmm JDBCInterpreter . java <nl> ppp JDBCInterpreter . java <nl> + import org . apache . zeppelin . util . PropertiesUtil ; <nl> + private void configConnectionPool(GenericObjectPool connectionPool, Properties properties) { <nl> + boolean testOnBorrow = ""true"" . equalsIgnoreCase(properties . getProperty(""testOnBorrow"")) ; <nl> + boolean testOnCreate = ""true"" . equalsIgnoreCase(properties . getProperty(""testOnCreate"")) ; <nl> + boolean testOnReturn = ""true"" . equalsIgnoreCase(properties . getProperty(""testOnReturn"")) ; <nl> + boolean testWhileIdle = ""true"" . equalsIgnoreCase(properties . getProperty(""testWhileIdle"")) ; <nl> + long timeBetweenEvictionRunsMillis = PropertiesUtil . getLong(properties, ""timeBetweenEvictionRunsMillis"", -1L) ; <nl> + long maxWaitMillis = PropertiesUtil . getLong(properties, ""maxWaitMillis"", -1L) ; <nl> + <nl>",add support for personalized configuration of jdbcinterpreter database connection pool,0
mmm ListMulti . java <nl> ppp ListMulti . java <nl> - private String colunmToolTips [] = null ; <nl> - this . colunmToolTips = colunmToolTips ; <nl> mmm NotificationConfigurationActivator . java <nl> ppp NotificationConfigurationActivator . java <nl> - import net . java . sip . communicator . service . configuration . * ; <nl> - private Logger logger <nl> + private final Logger logger <nl> - private static ConfigurationService configService ; <nl> - private static NotificationService notificationService ; <nl> - public static ConfigurationService getConfigurationService() <nl> - { <nl> - if(configService == null) <nl> - { <nl> - ServiceReference configReference <nl>,slims down the shallow size of the configurationform implementation ofplugin.notificationconfiguration because it 's huge,1
"mmm Ed25519 . java <nl> ppp Ed25519 . java <nl> + private static class PointAccum <nl> + { <nl> + int[] x = X25519Field . create() ; <nl> + int[] y = X25519Field . create() ; <nl> + int[] z = X25519Field . create() ; <nl> + int[] u = X25519Field . create() ; <nl> + int[] v = X25519Field . create() ; <nl> + } <nl> - private static void encodePoint(PointExt p, byte[] r, int rOff) <nl> + private static void encodePoint(PointAccum p, byte[] r, int rOff) <nl> - private static void pointAddVar(boolean negate, PointExt p, PointExt r) <nl>",improve verification performance,0
"mmm Main . java <nl> ppp Main . java <nl> + import fr . themode . minestom . instance . block . rule . vanilla . RedstonePlacementRule ; <nl> + blockManager . registerBlockPlacementRule(new RedstonePlacementRule()) ; <nl> mmm Chunk . java <nl> ppp Chunk . java <nl>  <nl> mmm InstanceContainer . java <nl> ppp InstanceContainer . java <nl> + import fr . themode . minestom . instance . block . rule . BlockPlacementRule ; <nl> + BlockPosition blockPosition = new BlockPosition(x, y, z) ; <nl> + blockId = executeBlockPlacementRule(blockId, blockPosition) ; <nl> + executeNeighboursBlockPlacementRule(blockId, blockPosition) ; <nl> + BlockPosition <nl>",add redstone placement,0
mmm SqlSplitter . java <nl> ppp SqlSplitter . java <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> - if (multiLineComment && character == '/' && text . charAt(index 1) == '*') { <nl> + if (multiLineComment && (index - 1) >= 0 && text . charAt(index - 1) == '/' <nl> + && (index - 2) >= 0 && text . charAt(index - 2) == '*') { <nl> - if (query . toString() . trim() . isEmpty()) { <nl> - continue ; <nl> - } <nl> - } else if (text . charAt(index) <nl>,text between 2 sql comment be mistake a comment,0
"mmm NodeView . java <nl> ppp NodeView . java <nl> - final int ownY = baseComponent . getMainView() . getY() + baseComponent . getMainView() . getHeight() / 2 ; <nl> + final int ownY = baseComponent . getContent() . getY() baseComponent . getContent() . getHeight() / 2 ; <nl> - final Point childPoint = new Point(0, childView . getMainView() . getHeight() / 2) ; <nl> - UITools . convertPointToAncestor(childView . getMainView(), childPoint, baseComponent) ; <nl> + final Point childPoint = new Point(0, childView . getContent() . getHeight() / 2) ; <nl> + UITools . convertPointToAncestor(childView . getContent(), childPoint, baseComponent) <nl>",bug fix : the close child selection,0
"mmm MinecraftServer . java <nl> ppp MinecraftServer . java <nl> + import net . minestom . server . gamedata . loottables . LootTableManager ; <nl> + private static LootTableManager lootTableManager ; <nl> + lootTableManager = new LootTableManager() ; <nl> + public static LootTableManager getLootTableManager() { <nl> + return lootTableManager ; <nl> + } <nl> mmm Data . java <nl> ppp Data . java <nl> + public static final Data EMPTY = new Data() { <nl> + @Override <nl> + public <T> void set(String key, T value, Class<T> type) {} <nl> + @Override <nl> + public <T> T get(String key) <nl>",loot table support,0
"mmm ParagraphTextParser . java <nl> ppp ParagraphTextParser . java <nl> - import org . apache . commons . lang3 . StringUtils ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + private static final Logger LOGGER = LoggerFactory . getLogger(ParagraphTextParser . class) ; <nl> - private static Pattern REPL_PATTERN = <nl> - Pattern . compile(""(\\s*)%([\\w\\ . ]+)(\\( . *?\\))? . *"", Pattern . DOTALL) ; <nl> + private static Pattern REPL_PATTERN = Pattern . compile(""^(\\s*)%(\\w+(?:\\ . \\w+)*)"") ; <nl> + private static int parseLocalProperties( <nl> + final String <nl>",improve parsing of the paragraph property,0
"mmm NodeList . java <nl> ppp NodeList . java <nl> + final String literalReplacement = useRegexInReplace . isSelected() ? replacement : Matcher . quoteReplacement(replacement) ; <nl> - replaceResult = NodeList . replace(p, text,  <nl> - useRegexInReplace . isSelected() ? replacement : Matcher . quoteReplacement(replacement)) ; <nl> + replaceResult = NodeList . replace(p, text,literalReplacement) ; <nl> - replaceResult = p . matcher(text) . replaceAll(replacement) ; <nl> + replaceResult = p . matcher(text) . replaceAll(literalReplacement) ; <nl>",bug fix in replacement for plain text,0
mmm RemoteClientFactory . java <nl> ppp RemoteClientFactory . java <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> - private Set<T> clientSockets = new HashSet<>() ; <nl> + private static final Logger LOGGER = LoggerFactory . getLogger(RemoteClientFactory . class) ; <nl> + private Set<T> clientSockets = ConcurrentHashMap . newKeySet() ; <nl> mmm InterpreterSettingManager . java <nl> ppp InterpreterSettingManager . java <nl> + for (Paragraph paragraph : note . getParagraphs()) { <nl> + try { <nl> + Interpreter interpreter <nl>,close bind interpreter when note be remove,0
"mmm IrcConnection . java <nl> ppp IrcConnection . java <nl> + import net . java . sip . communicator . service . protocol . event . * ; <nl> - provider . setCurrentRegistrationState(RegistrationState . REGISTERING) ; <nl> + provider . setCurrentRegistrationState(RegistrationState . REGISTERING, <nl> + RegistrationStateChangeEvent . REASON_USER_REQUEST) ; <nl> mmm IrcStack . java <nl> ppp IrcStack . java <nl> + import java . security . cert . * ; <nl> + import net . java . sip . communicator . service . protocol . event . * ; <nl> - final boolean autoNickChange) throws Exception <nl> + final <nl>",fix incorrect registration state in case user cancel irc connection because of certificate issue,1
mmm TableColumnRetriever . java <nl> ppp TableColumnRetriever . java <nl> + import schemacrawler . schemacrawler . Identifiers ; <nl> + columnDataTypeName = Identifiers . STANDARD . unquoteName(columnDataTypeName) ; <nl> mmm Identifiers . java <nl> ppp Identifiers . java <nl> + import java . util . logging . Logger ; <nl> - import java . util . logging . Logger ; <nl> - private static final Logger LOGGER = <nl> - Logger . getLogger(Identifiers . class . getName()) ; <nl> + private static final Logger LOGGER = Logger . getLogger(Identifiers . class . getName()) ; <nl> + public String unquoteName(final <nl>,unquote column data type name so that can be match,1
"mmm MediaUtils . java <nl> ppp MediaUtils . java <nl> + double clockRate ; <nl> - format = new AudioFormat(jmfEncoding) ; <nl> + AudioFormat audioFormat = new AudioFormat(jmfEncoding) ; <nl> + format = audioFormat ; <nl> + clockRate = audioFormat . getSampleRate() ; <nl> + clockRate = VideoMediaFormatImpl . DEFAULT_CLOCK_RATE ; <nl> - = MediaFormatImpl . createInstance(format) ; <nl> + = MediaFormatImpl <nl> +  . createInstance(format, clockRate, formatParameters) ; <nl> mmm MediaFormatFactoryImpl . java <nl> ppp MediaFormatFactoryImpl . java <nl> + import net . java . sip . communicator . impl . neomedia . codec . * ; <nl>","modifiesneomedia.mediafactory so that it create mediaformat instance just by encode name and , optionally , clock rate and format parameter without explicitly be tell the mediatype",1
mmm ShinyInterpreter . java <nl> ppp ShinyInterpreter . java <nl> - irInterpreter = new IRInterpreter(properties) ; <nl> + irInterpreter = createIRInterpreter() ; <nl> + protected IRInterpreter createIRInterpreter() { <nl> + return new IRInterpreter(properties) ; <nl> + } <nl> mmm ShinyInterpreterTest . java <nl> ppp ShinyInterpreterTest . java <nl> - private ShinyInterpreter interpreter ; <nl> + protected ShinyInterpreter interpreter ; <nl> mmm SparkIRInterpreter . java <nl> ppp SparkIRInterpreter . java <nl> + public void setSparkInterpreter(SparkInterpreter sparkInterpreter) { <nl> + this . sparkInterpreter = sparkInterpreter ; <nl> + } <nl> - this . sparkInterpreter = getInterpreterInTheSameSessionByClassName(SparkInterpreter . class) ; <nl> + <nl>,support shiny in spark interpreter,0
mmm DirectRegistrar . java <nl> ppp DirectRegistrar . java <nl> - public static class DirectRunner implements PipelineRunnerRegistrar { <nl> + public static class Runner implements PipelineRunnerRegistrar { <nl> - public static class DirectOptions implements PipelineOptionsRegistrar { <nl> + public static class Options implements PipelineOptionsRegistrar { <nl> mmm DirectRegistrarTest . java <nl> ppp DirectRegistrarTest . java <nl> - import org . apache . beam . runners . direct . DirectRegistrar . DirectRunner ; <nl> + import org . apache . beam . runners . direct . DirectRegistrar . Options ; <nl> + import org . apache . beam . runners <nl>,rename directregistrar registrar,0
"mmm SqlSplitter . java <nl> ppp SqlSplitter . java <nl> - if (character == '\'') { <nl> + if (character == '\'' && !(singleLineComment || multiLineComment)) { <nl> - if (character == '""') { <nl> + if (character == '""' && !(singleLineComment || multiLineComment)) { <nl> mmm SqlSplitterTest . java <nl> ppp SqlSplitterTest . java <nl> + @Test <nl> + public void testQuoteInComment() { <nl> + SqlSplitter sqlSplitter = new SqlSplitter() ; <nl> + List<String> sqls = sqlSplitter . splitSql(""show tables ;-- comment_1'\ndescribe table_1"") ; <nl> + assertEquals(2, sqls . size()) ; <nl> + assertEquals(""show tables"", sqls . get(0)) <nl>",ignore the single quote and double quote in sql comment,0
"mmm SparkSqlInterpreter . java <nl> ppp SparkSqlInterpreter . java <nl> + import org . apache . spark . sql . AnalysisException ; <nl> + import java . io . IOException ; <nl> - StringBuilder builder = new StringBuilder() ; <nl> - builder . append(result) ; <nl> + context . out . write(result) ; <nl> + context . out . flush() ; <nl> - builder . append(""\n%text Error happens in sql: "" + curSql + ""\n"") ; <nl> - if (Boolean . parseBoolean(getProperty(""zeppelin . spark . sql . stacktrace"", ""false""))) { <nl> - builder . append(ExceptionUtils . getStackTrace(e)) ; <nl> <nl>",simplify spark sql error message,0
mmm Main . java <nl> ppp Main . java <nl> + import fr . themode . minestom . entity . EntityManager ; <nl> + private static EntityManager entityManager ; <nl> + entityManager = new EntityManager() ; <nl> + entityManager . update() ; <nl> + public static EntityManager getEntityManager() { <nl> + return entityManager ; <nl> + } <nl> + public static ConnectionManager getConnectionManager() { <nl> + return connectionManager ; <nl> + } <nl> new file <nl> ppp Entity . java <nl> + package fr . themode . minestom . entity ; <nl> + import fr . themode . minestom <nl>,wip entity implementation,0
"mmm Contact . java <nl> ppp Contact . java <nl> - public class Contact <nl> + public interface Contact <nl> - private String address = null ; <nl> - private byte[] image   = null ; <nl> - private Hashtable contactProperties = new Hashtable() ; <nl> - private boolean isLocal = false ; <nl> - public Contact(String address, boolean isLocal) <nl> - { <nl> - this . address = address ; <nl> - this . isLocal = isLocal ; <nl> - } <nl> - public String getAddress() <nl> - { <nl> - return address ; <nl> - } <nl>",make it an interface so that protocol implementation can treat it a they find fit,1
"mmm SchemaCrawler . java <nl> ppp SchemaCrawler . java <nl> +  . add(retrieveIndexes, () -> indexRetriever . retrieveIndexes(allTables), retrieveTableColumns) <nl> +  . add( <nl> + retrieveTableConstraints, <nl> + constraintRetriever::retrieveTableConstraints, <nl> + retrieveTableColumns) <nl> +  . add(retrieveTriggerInformation, retrieverExtra::retrieveTriggerInformation) <nl> -  . submit() ; <nl> - taskRunner <nl> -  . add(retrieveIndexes, () -> indexRetriever . retrieveIndexes(allTables), retrieveTableColumns) <nl> -  . add(retrieveTableConstraints, constraintRetriever::retrieveTableConstraints) <nl> -  . submit() ; <nl> - taskRunner <nl> -  . add(retrieveTriggerInformation, retrieverExtra::retrieveTriggerInformation) <nl> mmm SqlServerDatabaseConnector . java <nl> ppp SqlServerDatabaseConnector . java <nl> + import static schemacrawler . schemacrawler . <nl>","retrieve sql server foreign key use a sql query , so that more retrieval can be run in parallel",1
mmm NodeTooltipManager . java <nl> ppp NodeTooltipManager . java <nl> + import java . awt . event . MouseMotionListener ; <nl> - private class ComponentMouseListener extends MouseAdapter { <nl> + private class ComponentMouseListener extends MouseAdapter implements MouseMotionListener{ <nl> + public void mouseDragged(MouseEvent e) { <nl> + } <nl>,fix compile error with java 5,0
"mmm FirstWizardPage . java <nl> ppp FirstWizardPage . java <nl> - public static final String USER_NAME_EXAMPLE = ""Ex: john@voiphone . net"" ; <nl> + public static final String USER_NAME_EXAMPLE = ""Ex: john@voiphone . net or simply \""john' for no server"" ; <nl>",add an extra hint on the sip account wizard so that it would also help create serverless account,1
"mmm ClusterRestApi . java <nl> ppp ClusterRestApi . java <nl> - LOG . warn(""Cluster mode id disabled, ClusterRestApi won't work"") ; <nl> + LOG . warn(""Cluster mode is disabled, ClusterRestApi won't work"") ; <nl>",log message correction,0
"mmm JobManager . java <nl> ppp JobManager . java <nl> - public static final String RESUME_FROM_SAVEPOINT = ""resumeFromSavePoint"" ; <nl> - public static final String RESUME_FROM_CHECKPOINT = ""resumeFromLatestCheckPoint"" ; <nl> - public static final String SAVEPOINT_DIR = ""savePointDir"" ; <nl> + public static final String RESUME_FROM_SAVEPOINT = ""resumeFromSavepoint"" ; <nl> + public static final String RESUME_FROM_CHECKPOINT = ""resumeFromLatestCheckpoint"" ; <nl> + public static final String SAVEPOINT_DIR = ""savepointDir"" ; <nl>",property name change of flink interprter,0
"mmm Paragraph . java <nl> ppp Paragraph . java <nl> - private static final Pattern REPL_PATTERN = <nl> - Pattern . compile(""(\\s*)%([\\w\\ . ]+)(\\( . *?\\))? . *"", Pattern . DOTALL) ; <nl>",delete useless variable,0
"mmm Roster . java <nl> ppp Roster . java <nl> - user = StringUtils . parseBareAddress(user) ; <nl> - user = StringUtils . parseBareAddress(user) ; <nl> - String key = StringUtils . parseName(user) + ""@"" + StringUtils . parseServer(user) ; <nl> + String key = getPresenceMapKey(user) ; <nl> - String key = <nl> - StringUtils . parseName(userResource) + ""@"" + StringUtils . parseServer(userResource) ; <nl> + String key = getPresenceMapKey(userResource) ; <nl> - String key = StringUtils . parseName(user) + ""@"" + StringUtils . parseServer(user) ; <nl> + String key = getPresenceMapKey(user) ; <nl> + private String getPresenceMapKey(String user) <nl>",modify in order to hold any valid jid format smack-152,1
"mmm FlinkBatchSqlInterpreter . java <nl> ppp FlinkBatchSqlInterpreter . java <nl> + import org . apache . zeppelin . interpreter . ZeppelinContext ; <nl> - private FlinkZeppelinContext z ; <nl> + private ZeppelinContext z ; <nl> - z . setCurrentSql(sql) ; <nl> mmm FlinkInterpreter . java <nl> ppp FlinkInterpreter . java <nl> + import org . apache . zeppelin . interpreter . ZeppelinContext ; <nl> + import java . net . URLClassLoader ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + private Map<String, String> innerInterpreterClassMap = new HashMap<>() <nl>",support scala 2.12 for flink,0
"mmm AttributeBuilder . java <nl> ppp AttributeBuilder . java <nl> - ModelessAttributeController . getController() . setAttributeViewType(getMap(), <nl> - value . toString()) ; <nl> + final AttributeRegistry attributes = AttributeRegistry . getRegistry(getMap()) ; <nl> + attributes . setAttributeViewType(value) ; <nl> mmm NodeViewFactory . java <nl> ppp NodeViewFactory . java <nl> - final NodeModel model = nodeView . getModel() ; <nl> - if (model . isRoot()) { <nl> - final MainView mainView = new RootMainView() ; <nl> - nodeView . setMainView(mainView) ; <nl> - } <nl> - else { <nl> - nodeView . setMainView(newMainView(nodeView)) ; <nl> - } <nl> + nodeView <nl>",fix automatically report bug,0
mmm LinearEdgeView . java <nl> ppp LinearEdgeView . java <nl> - final int zoomedXCTRL = w / 3 + 1 ;,alignment of linearedgeview,0
"mmm MediaConfigurationImpl . java <nl> ppp MediaConfigurationImpl . java <nl> + import org . jitsi . service . audionotifier . * ; <nl> - public class MediaConfigurationImpl implements MediaConfigurationService <nl> + public class MediaConfigurationImpl <nl> + implements ActionListener, <nl> + MediaConfigurationService <nl> + private JComboBox playbackCombo ; <nl> + private JComboBox notifyCombo ; <nl> + private final JButton playbackPlaySoundButton <nl> + = new JButton(new ImageIcon(NeomediaActivator . getResources() <nl> +  . getImageInBytes(""plugin . notificationconfig . PLAY_ICON""))) ; <nl> + private final JButton notificationPlaySoundButton <nl> + = new JButton(new ImageIcon(NeomediaActivator . getResources() <nl> +  . getImageInBytes(""plugin . notificationconfig . <nl>",adds button in the audio configuration dialog in order to play sound to test the select playback and notification device,1
"mmm XMPPConnection . java <nl> ppp XMPPConnection . java <nl> - public synchronized void login(String username, String password) throws XMPPException { <nl> + public void login(String username, String password) throws XMPPException { <nl> + login(username, password, ""Smack"") ; <nl> + } <nl> + public synchronized void login(String username, String password, String resource) <nl> + throws XMPPException <nl> + { <nl> - packetWriter . sendPacket(discoveryAuth) ; <nl> + packetWriter . sendPacket(discoveryAuth) ; <nl> - auth . setResource(""Smack"") ; <nl> - packetWriter . sendPacket(auth) ; <nl> + auth . setResource(resource) ; <nl> + packetWriter . sendPacket(auth) ; <nl>",add login method so that set the resource be support,1
mmm QuickFindAllAction . java <nl> ppp QuickFindAllAction . java <nl> - boolean nodeFound = condition . checkNode(selected) ; <nl> + final NodeModel rootNode = selected . getMap() . getRootNode() ; <nl> + boolean nodeFound = condition . checkNode(rootNode) ; <nl> - selection . selectAsTheOnlyOneSelected(selected) ; <nl> + selection . selectAsTheOnlyOneSelected(rootNode) ; <nl> - final NodeModel rootNode = selected . getMap() . getRootNode() ; <nl> - return ; <nl> - } <nl> - if(next . equals(selected)){ <nl> - continue ; <nl> + break ; <nl> + if(condition . checkNode(selected)) <nl> + selection . makeTheSelected(selected) ; <nl>,fix quickfindallaction for root node,0
"mmm CVSRepository . java <nl> ppp CVSRepository . java <nl> + import java . io . BufferedInputStream ; <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . InputStream ; <nl> + @Override <nl> + public InputStream getHistoryGet(String parent, String basename, String rev) { <nl> + InputStream ret = null ; <nl> + Process process = null ; <nl> + InputStream in = null ; <nl> + String revision = rev ; <nl> + if (rev . indexOf(':') != -1) { <nl> + revision <nl>",fix gethistoryget so that remote cv operation work,1
"mmm AddContactPanel . java <nl> ppp AddContactPanel . java <nl> - import net . java . sip . communicator . impl . gui . main . customcontrols . SIPCommTranspTextPane ; <nl> + import net . java . sip . communicator . impl . gui . main . customcontrols . SIPCommMsgTextArea ; <nl> - private SIPCommTranspTextPane infoLabel  <nl> - = new SIPCommTranspTextPane(Messages . getString(""addContactWizard"")) ; <nl> + private SIPCommMsgTextArea infoLabel  <nl> + = new SIPCommMsgTextArea(Messages . getString(""addContactWizard"")) ; <nl> mmm RenameContactPanel . java <nl> ppp RenameContactPanel . java <nl> - import net . java . sip . communicator <nl>","sipcommtransptextpane be remove and replace by sipcommmsgtextarea , because it offer the same functionality",1
"mmm PropertiesDataSourceTest . java <nl> ppp PropertiesDataSourceTest . java <nl> + import junit . framework . TestCase ; <nl> + import dbconnector . datasource . PropertiesDataSourceException ; <nl> - extends TestBase <nl> + extends TestCase <nl> + private TestUtility testUtility = new TestUtility() ; <nl> + public void setUp() <nl> + throws PropertiesDataSourceException, ClassNotFoundException <nl> + { <nl> + testUtility . setUp() ; <nl> + } <nl> + public void tearDown() <nl> + throws PropertiesDataSourceException, ClassNotFoundException <nl> + { <nl> + testUtility . tearDown() ; <nl> + } <nl> - assertNotNull(dataSource) ; <nl> + assertNotNull(testUtility . getDataSource()) ; <nl> <nl>","re-doing dependency , so that we can create a distribution project",1
"mmm SparkInterpreterTest . java <nl> ppp SparkInterpreterTest . java <nl> - properties . setProperty(""zeppelin . spark . uiWebUrl"", ""fake_spark_weburl"") ; <nl> + properties . setProperty(""zeppelin . spark . uiWebUrl"", ""fake_spark_weburl/{{applicationId}}"") ; <nl> - assertTrue(((String) onParaInfosReceivedArg . getValue() . get(""jobUrl"")) . startsWith(""fake_spark_weburl"")) ; <nl> + assertTrue(((String) onParaInfosReceivedArg . getValue() . get(""jobUrl"")) . startsWith(""fake_spark_weburl/"" <nl> + interpreter . getJavaSparkContext() . sc() . applicationId())) ; <nl>",allow to inject application id into custom spark url,0
"mmm ChatWindow . java <nl> ppp ChatWindow . java <nl> - mainToolBar . setVisible(ConfigurationManager . isChatToolbarVisible()) ; <nl> + boolean chatToolbarVisible = ConfigurationManager . isChatToolbarVisible() ; <nl> + mainToolBar . setVisible(chatToolbarVisible) ; <nl> + contactPhotoPanel . setVisible(chatToolbarVisible) ; <nl> - this . mainToolBar . setVisible(b) ; <nl> + mainToolBar . setVisible(b) ; <nl> + contactPhotoPanel . setVisible(b) ; <nl> - int i, imax = this . getChatTabCount() ; <nl> - for (i=0 ; i<imax ; i++) <nl> + for (int i = 0, imax = this . getChatTabCount() ; i < imax ; i++) <nl> mmm ConfigurationManager . java <nl>",hide the contact photo at the east of the chat tool bar in order to fully free the horizontal space take by the tool bar,1
"mmm AbstractQuerydslProcessor . java <nl> ppp AbstractQuerydslProcessor . java <nl> - Set<String> optionKeys = new HashSet<String>() ; <nl> - optionKeys . add(QUERYDSL_LOG_INFO) ; <nl> - return optionKeys ; <nl> + return new HashSet<>(Arrays . asList( <nl> + QUERYDSL_CREATE_DEFAULT_VARIABLE, <nl> + QUERYDSL_PREFIX, <nl> + QUERYDSL_SUFFIX, <nl> + QUERYDSL_PACKAGE_SUFFIX, <nl> + QUERYDSL_MAP_ACCESSORS, <nl> + QUERYDSL_LIST_ACCESSORS, <nl> + QUERYDSL_ENTITY_ACCESSORS, <nl> + QUERYDSL_USE_FIELDS, <nl> + QUERYDSL_USE_GETTERS, <nl> + QUERYDSL_EXCLUDED_PACKAGES, <nl> + QUERYDSL_EXCLUDED_CLASSES, <nl> + QUERYDSL_INCLUDED_PACKAGES, <nl> + QUERYDSL_INCLUDED_CLASSES, <nl> + QUERYDSL_UNKNOWN_AS_EMBEDDABLE, <nl> + QUERYDSL_VARIABLE_NAME_FUNCTION_CLASS, <nl> + QUERYDSL_LOG_INFO, <nl> + QUERYDSL_GENERATED_ANNOTATION_CLASS)) ; <nl>",add all apt option to abstractquerydslprocessor,0
mmm IPyFlinkInterpreter . java <nl> ppp IPyFlinkInterpreter . java <nl> + public boolean isAfterFlink114() { <nl> + return flinkInterpreter . getFlinkVersion() . isAfterFlink114() ; <nl> + } <nl> mmm PyFlinkInterpreter . java <nl> ppp PyFlinkInterpreter . java <nl> + public boolean isAfterFlink114() { <nl> + return flinkInterpreter . getFlinkVersion() . isAfterFlink114() ; <nl> + } <nl> mmm TableEnvFactory . java <nl> ppp TableEnvFactory . java <nl> + import org . apache . commons . lang3 . tuple . ImmutablePair ; <nl> - import org . apache . flink . table . delegation . ExecutorFactory ; <nl> - import org <nl>,support flink 1.14,0
"mmm FilteredClassPathRunner . java <nl> ppp FilteredClassPathRunner . java <nl> - return new URLClassLoader(filterUrls(extractUrls(classLoader), testClass), <nl> - classLoader . getParent()) ; <nl> + return new FilteredClassLoader(filterUrls(extractUrls(classLoader), testClass), <nl> + classLoader . getParent(), classLoader) ; <nl> + private static final class FilteredClassLoader extends URLClassLoader { <nl> + private final ClassLoader junitLoader ; <nl> + FilteredClassLoader(URL[] urls, ClassLoader parent, ClassLoader junitLoader) { <nl> + super(urls, parent) ; <nl> + this . junitLoader = junitLoader ; <nl> + } <nl> + @Override <nl> + public Class<?> loadClass(String name) throws ClassNotFoundException { <nl> + if (name . startsWith(""org . junit"")) { <nl> + <nl>",update filteredclasspathrunner so that junit rule work,1
new file <nl> ppp AbstractGeometryCollectionExpression . java <nl> + package com . querydsl . spatial ; <nl> + import com . querydsl . core . types . ConstantImpl ; <nl> + import com . querydsl . core . types . Expression ; <nl> + import com . querydsl . core . types . dsl . Expressions ; <nl> + import com . querydsl . core . types . dsl . NumberExpression ; <nl> + import org . geolatte . geom . AbstractGeometryCollection ; <nl> + import org . geolatte . geom . Geometry ; <nl> + import org . <nl>,bump geolatte-geom from 1.4.0 to 1.8.1,0
mmm Main . java <nl> ppp Main . java <nl> - private static EntityManager entityManager ; <nl> - public static void main(String[] args) { <nl> - entityManager = new EntityManager() ; <nl> + private static EntityManager entityManager ; <nl> + public static void main(String[] args) { <nl> - packetProcessor = new PacketProcessor(connectionManager) ; <nl> + packetProcessor = new PacketProcessor() ; <nl> + entityManager = new EntityManager() ; <nl> - long lastTime = System . currentTimeMillis() ; <nl> + long tickDistance = 50 * 1000000 ; // 50 ms <nl> + long nextTick = System . nanoTime() ; <nl> + <nl>,update tick manager & player update,0
mmm MediaServiceImpl . java <nl> ppp MediaServiceImpl . java <nl> + public MediaDevice createMixer(MediaDevice device) <nl> + { <nl> + if (MediaType . AUDIO . equals(device . getMediaType())) <nl> + return new AudioMixerMediaDevice((MediaDeviceImpl) device) ; <nl> + return null ; <nl> + } <nl> mmm CallPeerMediaHandler . java <nl> ppp CallPeerMediaHandler . java <nl> + private MediaDevice getDefaultDevice(MediaType mediaType) <nl> + { <nl> + return peer . getCall() . getDefaultDevice(mediaType) ; <nl> + } <nl> - return this . audioStream != null && audioStream . isMute() ; <nl> + return (audioStream != null) && audioStream . isMute() ; <nl> <nl>,"when create a sip conference call , attempt to start an audio mixer so that each conference member can hear the other one",1
"mmm TarAnalyzer . java <nl> ppp TarAnalyzer . java <nl> - static char[] content ; <nl> - int len ; <nl> + private char[] content ; <nl> + private int len ; <nl> - private static Reader dummy = new StringReader("""") ; <nl> + private static final Reader dummy = new StringReader("""") ; <nl> mmm ZipAnalyzer . java <nl> ppp ZipAnalyzer . java <nl> - static char[] content ; <nl> - int len ; <nl> + private char[] content ; <nl> + private int len ; <nl> - private static Reader dummy = new StringReader("""") ; <nl> + private <nl>",bug # 337 : analyzer be not thread-safe because of static state variable,1
"mmm K8sRemoteInterpreterProcess . java <nl> ppp K8sRemoteInterpreterProcess . java <nl> + import java . util . concurrent . TimeUnit ; <nl> + import org . apache . zeppelin . interpreter . remote . RemoteInterpreterServer ; <nl> + import io . fabric8 . kubernetes . client . Watch ; <nl> - while (!StringUtils . equalsAnyIgnoreCase(getPodPhase(), ""Succeeded"", ""Failed"", ""Running"") <nl> - && !Thread . currentThread() . isInterrupted()) { <nl> - try { <nl> - Thread . sleep(1000) ; <nl> - } catch (InterruptedException e) { <nl> - LOGGER . error(""Interrupt received during pending phase .  Try to stop the interpreter <nl>",implement a soft shutdown for k8s interpreter,0
"mmm Command . java <nl> ppp Command . java <nl> - public NodeModel getSingleNode(NodeModel start) { <nl> - final NodeMatcher nodeMatcher = createMatcher() ; <nl> - return operator . getSingleNode(start, nodeMatcher, accessedNodes) ; <nl> - } <nl> - public Collection<? extends NodeModel> getAllNodes(NodeModel start) { <nl> + public Collection<? extends NodeModel> getNodes(NodeModel start) { <nl> mmm ExploringStep . java <nl> ppp ExploringStep . java <nl> - import java . util . ArrayList ; <nl> - ROOT(""^::""){ <nl> + ROOT(""^:""){ <nl> - List<? extends NodeModel> getNodes(NodeModel node, NodeMatcher nodeMatcher, Cardinality cardinality, AccessedNodes accessedNodes) { <nl> + List<? extends NodeModel> getNodes(NodeModel <nl>",count nod only at the end because some intermediatel result could turn to become empty,1
"mmm IPyFlinkInterpreter . java <nl> ppp IPyFlinkInterpreter . java <nl> - @Override <nl> - public void close() throws InterpreterException { <nl> - LOGGER . info(""Close IPyFlinkInterpreter"") ; <nl> - super . close() ; <nl> - if (flinkInterpreter != null) { <nl> - flinkInterpreter . close() ; <nl> - } <nl> - } <nl> mmm JobManager . java <nl> ppp JobManager . java <nl> + boolean cancelled = false ; <nl> + cancelled = true ; <nl> - FlinkJobProgressPoller jobProgressPoller = jobProgressPollerMap . remove(jobClient . getJobID()) ; <nl> - if (jobProgressPoller != null) { <nl> - jobProgressPoller . cancel() ; <nl>",support yarn interpreter launch mode,0
"mmm LivingEntity . java <nl> ppp LivingEntity . java <nl> - public void damage(DamageType type, float value) { <nl> + public boolean damage(DamageType type, float value) { <nl> - return ; <nl> + return false ; <nl> + return !entityDamageEvent . isCancelled() ; <nl> mmm Player . java <nl> ppp Player . java <nl> - public void damage(DamageType type, float value) { <nl> - if (!isImmune(type)) { <nl> + public boolean damage(DamageType type, float value) { <nl> + boolean result = super . damage(type, value) ; <nl> + if (result) { <nl> - super . damage(type, value) ; <nl> <nl>",add damage application verification,0
"mmm FlexmarkParser . java <nl> ppp FlexmarkParser . java <nl> + import com . vladsch . flexmark . ext . emoji . EmojiExtension ; <nl> + import static com . vladsch . flexmark . ext . emoji . EmojiImageType . UNICODE_ONLY ; <nl> - TablesExtension . create(), <nl> - UMLExtension . create(), <nl> - AutolinkExtension . create(), <nl> - WikiLinkExtension . create(), <nl> - TypographicExtension . create())) ; <nl> + TablesExtension . create(), <nl> + UMLExtension . create(), <nl> + AutolinkExtension . create(), <nl> + WikiLinkExtension . create(), <nl> + TypographicExtension . create(), <nl> + EmojiExtension . create())) ; <nl>",enable extension of flexmark in markdown interpreter,0
"mmm BasicFrame . java <nl> ppp BasicFrame . java <nl> + import net . sf . openrocket . gui . preset . ComponentPresetEditor ; <nl> + import javax . swing . JDialog ; <nl> mmm ComponentPresetEditor . java <nl> ppp ComponentPresetEditor . java <nl> + import java . awt . Window ; <nl> + import javax . swing . SwingUtilities ; <nl> - JMenuItem mntmExit = new JMenuItem(""Exit"") ; <nl> + JMenuItem mntmExit = new JMenuItem(""Close"") ; <nl> - System . exit(0) ; <nl> + Window w = SwingUtilities . getWindowAncestor(ComponentPresetEditor . this) ; <nl> + w . dispose() <nl>",wire in the componentpreseteditor into the edit menu it be currently disable because of some bug in the componentpreseteditor,1
"mmm AttributeTable . java <nl> ppp AttributeTable . java <nl> + ((JComponent)editorComp) . paintImmediately(0, 0, editorComp . getWidth(), editorComp . getHeight()) ; <nl> - return table . getCellRenderer(row, column) . getTableCellRendererComponent(table, value, true, true, row, column) ; <nl> + return new AttributeTableCellRenderer() . getTableCellRendererComponent(table, value, true, true, row, column) ; <nl> - return super . prepareRenderer(getCellRenderer(row, col), row, col) ; <nl> + return super . prepareEditor(tce, row, col) ; <nl> mmm AttributeTableCellRenderer . java <nl> ppp AttributeTableCellRenderer . java <nl> - final Component rendererComponent = super . getTableCellRendererComponent(table, value, hasFocus, false, row, <nl> + final Component rendererComponent = super <nl>","attributetable , attributetablecellrenderer",0
"mmm DialpadDialog . java <nl> ppp DialpadDialog . java <nl> - private DialPanel dialPanel ; <nl> + private DialpadDialog(DialPanel dialPanel) <nl> + { <nl> + dialPanel . setOpaque(false) ; <nl> + BackgroundPanel bgPanel = new BackgroundPanel() ; <nl> + bgPanel . setLayout(new BorderLayout()) ; <nl> + bgPanel . setBorder(BorderFactory . createEmptyBorder(5, 5, 5, 5)) ; <nl> + bgPanel . add(dialPanel, BorderLayout . CENTER) ; <nl> + Container contentPane = getContentPane() ; <nl> + contentPane . setLayout(new BorderLayout()) ; <nl> + contentPane . add(bgPanel, BorderLayout . CENTER) ; <nl> + this . setUndecorated(true) ; <nl> + this . pack() ; <nl>",delay the creation of dialpaddialog because it be not always necessary,1
"mmm NotebookRestApi . java <nl> ppp NotebookRestApi . java <nl> + import org . apache . zeppelin . rest . message . NoteJobStatus ; <nl> + import org . apache . zeppelin . rest . message . ParagraphJobStatus ; <nl> - private static final Logger LOG = LoggerFactory . getLogger(NotebookRestApi . class) ; <nl> - private static Gson gson = new Gson() ; <nl> + private static final Logger LOGGER = LoggerFactory . getLogger(NotebookRestApi . class) ; <nl> + private static final Gson GSON = new Gson() ; <nl> - LOG . info(""Cannot change permissions .  Connection owners <nl>",refactoring of notebookrestapi,0
