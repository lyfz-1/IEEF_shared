Refactored SocketAppender initialization for better clarity and configurability.
Refactored Basic Auth header handling to improve readability and prevent browser basic auth popups.
Refactored code to simplify msgLengthOffset usage in ManyToOneRingBuffer.
Updated CPU and RAM overcommit ratio logic to use default cluster values when VM details are null.
Added constructor to ShadowPaint for initializing flags and updated tests to reflect anti-aliasing behavior.
Updated dialog title for better localization and clarity.
Replaced assertion with error logging and condition handling to improve clarity and accommodate Eclipse-specific compilation scenarios.
Enhanced nonce validation and fixed authentication scheme parsing logic; added test for digest auth without scheme.
Added RemoteInputListener to handle connection state changes and ensure proper callbacks for onConnected and onDisconnected events.
Fixed incorrect stripeIxTo assignment to ensure proper stripe processing logic
Added isEnabled() check to filter only active HomeConnect things.
Added null check for `bs` to prevent potential NullPointerException in policy management operations.
Unified date-time format assertions to eliminate Java version-specific checks.
Added DAG info logging and JSON context for better debugging and context tracking in TezTask.
Refactored time calculation in ComputedSummary to use separate header and tag times, ensuring accurate heap timing data.
Refactored upload count retrieval to use MediaWikiApi, replacing RxJava2Tasks for improved maintainability and consistency.
Removed redundant `isMVStore` checks to simplify lock condition logic.
Refined offset validation and adjusted max message size calculation for enhanced stability and accuracy.
Fixed inconsistent folder state by resetting 'opened' flag when associated folder is not open
Added a test to ensure PGProperty names are sorted in ascending order.
Removed unused constant `HOVER_MESSAGE_EVALUATION_POINTS_GIVEN` to improve code maintainability.
Refactored UninstallDropTarget to use ItemInfo for type safety and streamlined item handling logic.
Enhanced assertion to support multiple error message variations in RequestBuilderTest.
Refactored fragment tag handling and initialization logic for clarity and consistency.
Refactored variable name for clarity and assigned sessionStatus to instance variable.
Added configuration to skip sending emails when no anomalies are found.
Added test to verify DeserializationSchema's open method is called during state restoration
Removed redundant methods `getUser` and `getGeofence` to simplify `DataManager` and reduce code duplication.
Added constructor with configurable maxLength for BlockingResponseListener
Refactored message handling in `McastServiceImpl` to streamline data processing and enhance exception handling.
Replaced System.out with logger and ensured reader closure in a try-finally block for better logging and resource management.
Removed redundant slashes from URLs in assertions for consistency and accuracy
Added unit tests for ConfigMetadataProvider to improve test coverage and reliability
Refactored imports and variable names for improved clarity and consistency in ListFragment and SnoozeActivity.
Refactored directory stream filtering and path parsing for improved readability and maintainability.
Refactored JdbcTestDataSet to improve code readability and maintainability.
Refactored lookupType calls to use lookupTypeHelper for consistent exception handling and added ClassNotFoundException handling to improve error propagation.
Refactored Docker image name validation logic into DockerImageName class to improve code reuse and clarity
Updated error messages to use a unified string for wrong credentials.
Added autofocus support to input fields across multiple forms for improved user experience.
Added unit test to validate SAML properties behavior across different identity zones
Fixed version comparison logic and updated tests to ensure correct handling of list items and equality checks for version strings.
Updated Sheet mode configuration and dimension calculations; added padding and margin properties in UIManager for consistent theming.
Refactored package structure to move ParallelUniverse to internal package for better encapsulation
Refactored method handle creation and invocation to simplify code and improve readability.
Updated fill pattern method to use SOLID_FOREGROUND for better compatibility with Excel rendering
Added support for rendering self-loops in graph visualization.
Renamed TVM Solidity 0.5.10 allowance to 0.59 for consistency and clarity across codebase.
Renamed `addManaged` method to `manage` for improved readability and consistency.
Reset drag handle indicator translation to initial position during all apps transition
Refactored log statements to avoid potential NPEs when retrieving IDs or handles.
Updated filter pushdown config description for clarity on query optimization behavior
Added assumption to skip test on OSX due to build server issues with self-detection.
Added Jetty ALPN client bundles and debug diagnostics for OSGi testing.
Refactored async job handling and process instance lock time update to improve concurrency control and added exception for optimistic locking failure.
Fixed potential null pointer exception by adding null check for transaction reference
Refactored rule annotations to exclude Genrule execution from artifact caching for clarity and correctness.
Refactored Firefox launcher to use AsyncExecute for improved environment handling and cross-platform support.
Replaced putIfAbsent with containsKey check to ensure consistent behavior when updating colFamToDynamicColumnsMapping.
Removed redundant @SuppressWarnings annotations and ensured transient fields for serialization safety in Hadoop-related classes.
Added logic to inherit derived columns and indexes from parent table for backward compatibility of non-mapped views.
Updated student Google ID and cascaded changes when a matching student is found for the instructor.
Updated import to use TestCellReference from the ss package instead of the xssf package for consistency.
Added block hardness check to prevent breaking indestructible blocks.
Added LongPointerPressTest3049 to demonstrate custom pointer press handling in a form.
Refactored inlining logic to improve readability and ensure compatibility with updated compiler options.
Refactored null checks to use ternary operators for improved readability and reduced code duplication.
Fixed incorrect condition in ListBlockParser and added test for deeply indented list rendering
Refactored `OptionalAssert` to extend `AbstractOptionalAssert` for improved code reuse and maintainability.
Added @Ignore annotation to WebfluxNotIncludedTests pending resolution of issue #1070 in Spring Cloud Gateway.
Refactored saveMessage method to remove unnecessary conversions and simplify namespace usage.
Fix formatting in RouteStartupOrderLastTest.java
Added check for video format in web subscriptions to ensure proper handling.
Disabled TLS algorithms by updating Security properties in hostname verifier classes.
Enhanced storage pool filtering to include local pools and enforce scope-hypervisor compatibility.
Improved logging and formatting for cache entry details to enhance debugging and prevent potential null value issues.
Added support for skipping dependency model updates to improve flexibility in managing dependencies.
Added support for handling IntentSender requests with specific request codes in ShadowActivity and ShadowPendingIntent.
Refactored rendering logic to centralize overlay graphics creation and improve transformation handling
Synchronized access to controllerListeners to ensure thread safety and updated handler initialization logic.
Added @BeforeClass to skip tests on Java 9 due to SOLR-9893 issue with EasyMock.
Replaced manual date formatting with a standardized DateTimeFormatter to ensure consistency and readability for BC dates.
Added null check for connection to avoid potential NullPointerException during disconnection.
Fixed typo by adding missing `cur_ws_commit_id` in log message for better debugging clarity
Refactored BufferedInputFilter to use ByteBuffer instead of ByteChunk for improved performance and resilience to buffer overflows.
Added utility to convert CompletableFuture to synchronous call with tests for success and failure scenarios
Refactored compiler factories to use ActionGraphBuilder for improved rule resolution consistency and maintainability
Added test for uploading files using hidden input elements to ensure proper functionality
Refactored table creation logic by reordering try-catch block for better readability.
Added fallback to parent method if file does not exist in `getLocalMavenDir`.
Set algebra label visibility to false for labels starting with the hidden prefix.
Fixed metadata initialization and corrected parameter order in assertions for improved null safety and test readability
Refactored buffer flag setting to use addFlag method for consistency with flag management logic
Added check for cached sorting by ID to ensure correct reordering behavior.
Improved error message clarity for missing method call in verify(mock).
Added null check for backupFolder to avoid potential NullPointerException when logging.
Added test case to verify IllegalArgumentException for Array.newInstance with void.class
Annotated `toolType` field with `@AddToRuleKey` in ClangCompiler and GccCompiler to include it in rule key calculations.
Refactored PIN timeout logic to use a constant for better maintainability
Added isSampled() override to always return true for consistent sampling behavior in Prometheus integration.
Removed @Ignore annotations from tests requiring MongoDB server to enable execution.
Refactored imports and updated assertions and logging for clarity and consistency
Replaced startsWith check with isArtificial to improve table type validation.
Refactored file type checks to use isDir() for consistency and clarity.
Refactored session attribute handling to avoid redundant operations and ensure consistency when updating or clearing attributes.
Replaced setFixedSize with setSizeFromLayout to adapt to dynamic layout changes.
Refactored to use local variable for _stopping to prevent potential race conditions during countdown operations.
Fixed formatting issue by combining parameters on a single line in the WebSocket constructor.
Replaced StopWatch with timestamp-based calculation to avoid unnecessary object creation.
Replaced doOnError with error handler in subscribe for improved readability and error handling consistency.
Improved error assertion to provide clearer feedback when WebSocketHandshakeException is not encountered.
Refactored AllAppsTransitionController to implement OnLayoutChangeListener, simplifying layout change handling.
Refactored variable names for consistency and readability across multiple classes.
Added support for configuring default output channel in XPathRouterParser to ensure proper message routing when no expression matches.
Refactored cacheSeconds to use DurationCapable for better configurability and precision
Updated OpenAPI specification to version 3.0.0 by removing '-rc1' suffix in various classes.
Replaced append(buffer, true) with a safer alternative to improve data handling reliability.
Added detection for alt-rt.jar in boot class path to skip tests and log warnings.
Updated user-related test data and queries for consistency and correctness in JdbcScimUserProvisioningTests.
Refactored FlightRecorderProfiler to use ArrayList for flexible JVM option management and added support for additional diagnostic options.
Added null check for video stream to prevent imageDropHappened invocation when stream is empty
Added content view check in HttpParser to prevent premature processing and introduced test for chunked PUT handling in ProxyServlet.
Fixed formatting issues in `AtmosEndpoint.java` to improve code readability.
Expanded method checks to include "print" and "printf" for improved functionality alignment.
Added test to verify metaspace capacity increment behavior on 32-bit platforms and prevent wrap-around issues.
Removed empty `package-info.java` file to clean up unused code.
Removed unnecessary time adjustment for results stamped at start to simplify logic.
Added ErrorHandlerAdviceIssueTest to validate route behavior and error handling in Camel contexts
Refactored ICC profile warnings to use formatted strings for consistency and enhanced test coverage for invalid profiles.
Refactored item handling to enhance reequip animation checks and replaced mutable lists with immutable ones for better performance and safety
Excluded Config and Environment bindings from Jooby and Spring modules to streamline bean registration.
Refactored loader creation to use addObjectCreate for cleaner and more maintainable code.
Load additional properties from META-INF/resources to support dynamic NameUpdater configuration.
Set `started` to true to ensure consistent initialization of `ellipsoidRegionSelector`.
Switched URLs to HTTPS for improved security and added fallback mechanism for HTTP in case of SSL connection failure.
Added validation for SortBy attributes in GetFeature to prevent invalid property names.
Fixed null comparison in grantor assignment to avoid potential NullPointerException.
Replaced direct pixel comparison with compatible image rendering to ensure consistent test behavior across environments.
Added null check for `sidedDelegate` to provide clear error message for misconfigured FML installations.
Refactored DataUtilities and ReTypeFeatureReader for improved readability and maintainability.
Refactored LockTest to improve timing accuracy and ensure proper lock state validation.
Added utility methods for whole-word tokenization and token joining in StringUtil.
Replaced manual status and message handling with sendError to streamline error response logic and ensure proper handling.
Refactored command parsing logic to improve clarity and ensure proper indexing for highlighting operations.
Updated version and version date constants for upcoming development snapshot
Fixed incorrect buffer position calculation by including dimensionSize in index adjustment.
Added support for querying drag-and-drop readiness in SystemUiProxy and updated related test protocols and services.
Refactored traffic class assertion tests to run conditionally on Java 7 for compatibility.
Added support for PSK-AES256-GCM-SHA384 with TLSv1.2 in TestCipher.
Updated NearbyMapFragment to use long description for place details.
Added @JsonProperty annotation to map the "value" field in ScimGroupMember class.
Enhanced schema-scoping support in function names for HQL queries to improve compatibility and readability.
Fixed error message to correctly reference 's' instead of 'd'.
Fixed null check in Parser to avoid potential NullPointerException during parsing.
Added indexStartsAtOne parameter to offsetStreamIndex to handle one-based indexing and clarified track selection/debug logging.
Corrected byte order in MagicDetector and added new test case for CPIO mime type in TestMimeTypes.
Removed overridden getMonotonicity method as it is no longer required.
Added equals, hashCode, and toString methods with inheritance strategy TABLE_PER_CLASS for OneTimeTokenAccount and OneTimeToken classes
Prevented fling action from triggering when assistant is already launched.
Added SolarisShortDSA test to detect and handle short DSA key issues specific to Solaris systems.
Disabled search label toggle by default to improve initial UI state.
Fixed volume locking issue and improved error handling during snapshot creation.
Refactored ServiceConnection implementation to improve clarity, ensure proper unbinding, and prevent potential memory leaks.
Refactored failure handling in HttpClientTLSTest to use AtomicReference and assertInstanceOf for clarity and thread safety.
Removed redundant equals method in ConjunctionScorer.
Added null check to log error when removing colliding item in bindItems.
Replaced static INITIAL_METADATA_GROUP_ID with dynamic getMetadataGroupId() to improve test flexibility and support random metadata group operations.
Refactored cache size checks and added logging to improve clarity and monitor shrink operation duration
Updated CryptoFacilities API to v3, improved account type and currency handling, fixed open orders key naming, and removed deprecated account-related methods.
Added `empty()` method to check if size is zero for improved readability.
Added test cases for empty Parquet files and dictionary pages; ensured safe handling of nullable page data in AsyncPageReader.
Refactored argument validation and improved error handling in SerumStreamingService for robust subscription type processing.
Added configuration option to enable or disable charging animation on mana pools.
Improved error handling and logging during AeronCluster connection retries and removed unnecessary isChallenged flag.
Added error logging for InterruptedException to improve debugging visibility.
Refactored tests to use assumeTrue for filesystem compatibility checks and removed OS-specific conditions.
Reordered style injection calls to ensure consistent styling application.
Refactored file handling to use FileResource for better type safety and directory validation.
Replaced direct field access with getter methods for better encapsulation in equality check.
Refactored CacheEntry to use final fields and removed redundant TODO comments
Replaced direct addition with regex-quoted literals to enhance pattern safety in resource configuration.
Improved cache handling by refining KRB5CCNAME parsing and adding error checks for cache initialization and file existence.
Updated dbPath constant to match the test name for clarity.
Refactored peer sufficiency checks to centralize logic and improve configurability.
Corrected formatting issue in WebDriverServlet to improve code readability and consistency.
Prevented expansion of "AreEqual" expressions for GeoSegment to maintain format integrity.
Clear pending rendering operations when minimized to prevent excessive memory usage.
Replaced time check logic with a flag to ensure sleepMillis is not called after deadline.
Optimized Write-Behind queue to update existing entries instead of removing and re-adding, and added test for continuous key updates.
Cleared icon in GroupTreeCellRenderer to save space in tree component.
Renamed test methods to clarify strict and non-strict match behavior.
Refactored ShutdownMonitor tests to improve readability, added new test cases for status and port reuse scenarios.
Refactored chunk rewrite logic to improve fill rate handling and optimize idle state adjustments.
Refactored field handling to improve readability and reuse `type` for class references in serialization.
Refactored ComponentClosingUtils to improve timeout handling and simplify threading logic.
Handle deletion of VM volumes during error state transition and fix typo in exception message for snapshot creation.
Corrected method call to use `getIp6Cidr()` instead of `vlanIp6Cidr` for consistency and accuracy.
Refactored configurer classes to generalize bean management logic and improve naming consistency.
Increased leader retry timeout to 30000ms for better handling of halfdeletedcollection2 shard leader retrieval.
Standardized error messages and added logging for invalid parameter handling across parameter classes.
Fixed image rendering offsets by inverting x and y coordinates to correct alignment issues.
Fixed comparison to correctly check field names size between solrDocument1 and solrDocument2.
Refactored high cardinality check into a helper method to improve readability and handle edge cases.
Added exception cause to StreamTaskException for improved error context.
Refactored hashtag expansion logic for improved clarity and added comprehensive test cases.
Refactored `read` method in MessagePack.java to improve readability and maintain consistent formatting.
Added `@Mapper` annotation to support custom mapper interfaces in MyBatis.
Added support to exclude empty comments in FHIR JSON parsing and added a test to ensure no empty extension lists are encoded.
Refined artifact processing to handle external meta entries and adjusted regex for group splitting.
Added alias for "node_popup_scripting" to improve entry navigation.
Refactored actions view animations and disabled flags handling for better tablet compatibility and smoother transitions
Refactored getOut() method call to use typed parameter for better type safety and readability.
Removed unnecessary `throws IOException` declarations and minor formatting fixes for consistency across classes.
Removed deprecated classes `AbstractDelegatedVerb` and `FailureContext` to simplify the codebase and eliminate unused functionality.
Refactored GzipHandlerTest to use final constants and added test for non-Gzip micro response
Refactored backpressure handling using BackpressureUtils and added test for repeat and distinct unbounded logic
Refactored logging and stream operations in SpeedmentImpl for better clarity and null safety
Added LoadDSpaceOAIConfig servlet to initialize DSpace configuration during app startup
Refactored StoreScanner and TestWideScanner to improve null handling, update reader logic, and optimize version and batch configurations.
Added `useJmx` method to configure JMX usage dynamically in tests.
Standardized package separator handling for consistent path formatting across platforms.
Added support for retrieving and displaying YARN application IDs and kill commands in Spark job monitoring.
Added support for MariaDB by extending database name matching logic.
Refactored log messages to use placeholders and fixed startTime initialization logic.
Added ExecuteAndReturnStringTest to demonstrate browser component usage and network error handling
Added `InvokespecialInterface` to demonstrate `invokespecial`, `invokeinterface`, and `invokedynamic` usage in Java.
Refactored EvictingBoundedList to improve readability and maintainability.
Refactored turn cost handling to use EncodingManager initialization via setEncodingManager method
Added null check for backgroundDisabled and validation for non-negative selection.
Throw UnsupportedOperationException when method descriptor (md) is null.
Refactored hotseat layout calculations to use DeviceProfile for improved consistency and maintainability.
Simplified partition value extraction logic by replacing string manipulations with direct value access.
Added version-based serialization logic for backward compatibility in NamedTaskDecorator and TaskDefinition.
Updated directory retrieval to use getNewIndexDir for correct index path.
Fixed logical error in equality check by combining results with logical AND operator.
Added support for formatting high codepoint Unicode characters and improved Unicode-to-LaTeX conversion maps.
Sanitized input values by removing ISO control characters except tab, newline, and carriage return to prevent invalid data issues.
Enhanced frame tracking logic and added null/empty check for robustness in WebDriverBackedSelenium.
Improved UI functionality and code clarity: added a clear button to DataBrowser toolbar, fixed file extension validation in BookmarksPanel, and set border for plugInPanel.
Refactored base URL construction to use UrlUtils for improved clarity and maintainability.
Refactored assertions in SoftAssertionsTest for better readability and replaced deprecated Date usage with parseDatetime.
Refactored adaptOrders to support reverse order processing and optimized LimitOrder creation for efficiency
Added support for Java 11 `var` syntax and handled null or invalid `vartype` in PrettyPrinter to improve compatibility and robustness.
Removed unused imports and fixed potential ClassCastException in email.sendKeys() by explicitly casting null to CharSequence[]
Initialized Configuration with 'false' to disable default resources and removed redundant debug logs for overriding Hadoop properties.
Replaced drawChildren with draw to fix incorrect rendering logic in WidgetGroup.
Added test for file splitting with streaming and conditional routing using Camel routes.
Replaced `Globals.CATALINA_BASE_PROP` usage with `getCatalinaBase()` to improve flexibility and decouple from system properties.
Added locale-specific handling for "jmm" patterns in ShadowICU and corresponding unit tests
Expanded color mapping for PlotSquared with detailed Minecraft and PlotSquared color codes.
Added ZuulProperties to TraceRestClientRibbonCommandFactory and TraceZuulAutoConfiguration for enhanced configuration management.
Set default TimeZone to UTC in FontParsersTest to ensure consistent date parsing in assertions.
Added SampleApplication class and updated BuildInfoMojo to use configurable build time.
Fixed incorrect calculation of xDist by adding Math.abs to ensure a positive distance value.
Removed obsolete GUIRWTester class as it is no longer in use.
Removed null checks and annotations for string format parameters to enforce stricter non-null constraints.
Improved error message formatting by adding placeholder for invalid processing time value.
Refactored template parser package structure and visibility modifiers to improve modularity and accessibility.
Updated XPathTest to include attribute-based XPath evaluation for enhanced test coverage
Added `@Nullable` annotation to indicate nullable return values in `FutureUtils`.
Handled unresolved InvokeDynamic expressions during call-graph construction with a verbose warning message.
Replaced email domains with "example.com" to comply with best practices for placeholder emails.
Fixed test logic to validate correct URI decoding and response handling.
Added getColumnDataType method to provide column data type information for ResultSet implementations.
Replaced abstract methods with default methods throwing UnsupportedOperationException to simplify interface implementation.
Fixed potential NPE in HSSFPictureData by ensuring proper null handling
Refactored time tracking to use `Instant` and `Duration` for improved readability and precision.
Added MediaInfoLib version parsing and conditional option setting based on version compatibility
Removed reflection-based proxy logic for `IdeaDependency` to simplify and improve code maintainability.
Added SerialHeap implementation and updated Universe to support SerialHeap mapping.
Added @SuppressWarnings("serial") annotations to suppress serialization warnings in Gson Types class.
Refactored mouse input handling to use explicit mouse position for improved event accuracy.
Handle potential null values in query parameters and add integration test for null-safe query behavior (DATAMONGO-1608)
Introduced `MultisetTypeInfo` for enhanced multiset support and updated `MapTypeInfo` return value for consistency.
Added retrieveByIssuer method with exception handling for missing or duplicate issuers, and corresponding unit tests
Enhanced CMapParser to handle delimiters and digits in parsing logic, and added test case for edge cases with poor whitespace.
Refactored ContactsBackupJob to use ServiceConnection for better lifecycle management and operation queuing
Enhanced type inference by refining constraint handling and adding new test cases for generic bounds
Added support for checking if account configuration is hidden to enhance account visibility logic.
Added error logging for inconsistent display bounds to aid in debugging display state issues.
Refactored schema removal logic to simplify key retrieval and added unit test for validation
Refactored passive login handling to use a listener pattern, improving code maintainability and removing deprecated load handlers.
Added Box2DTest class and integrated it into GDXTester to enable Box2D rendering and testing functionality.
Updated logging for mutation application and indexing, replaced placeholder values in ColumnFamily, and improved utility return in LocalByPartitionerType.
Increased default buffer request timeout from 5 milliseconds to 5 minutes to enhance system stability.
Added generator header to SpeechSettings with default name and version to standardize API requests.
Added help button with action listener for OpenOffice integration guide.
Updated Netty server configurations to use childOption for TCP_NODELAY to align with best practices and ensure proper application to child channels.
Refactored type declarations, imports, and method signatures to improve code clarity and consistency.
Refactored class loading logic to cache class reference, improving performance and preventing redundant class lookups.
Refactored error handling in DecodeServlet to improve readability and maintain consistent resource management.
Added support for explicit null handling in Querydsl integration to align with Spring Data's Sort.NullHandling policies
Added null check for actor in ParallelAction loop and improved index handling in SequenceAction logic
Fixed formatting issues and removed unnecessary concatenations to improve code readability and prevent potential runtime errors.
Added synchronization to ensure thread-safe operations while closing sfWriters and clearing resources.
Added interface and test cases for Issue888 to validate `aa()` method behavior in `JJ`, `JK`, `KJ`, and `KK` implementations.
Added certificate revocation logic and corresponding tests to ensure proper handling of existing agent certificates.
Added check for no-body response codes and corresponding test to ensure compliance with HTTP/1.1 specifications.
Improved script processing with robust error handling for missing script tags and unsupported Java versions.
Added HikariCP support for connection pooling and improved exception handling in transaction tests.
Refactored pressHome calls to use mLauncher for consistency and improved readability.
Added file lock/unlock functionality with UI integration and remote operation handling.
Refactored `Version.java` to improve code readability and maintainability.
Cleared endpoint cache in replication strategy after opening the new keyspace to ensure accurate routing.
Refactored state waiting logic to improve thread synchronization and ensure consistent state transitions
Refactored Skylark rule context handling to improve attribute coercion and dependency management.
Extracted common methods into a new Storage interface to promote code reuse and consistency across LocalStorage and SessionStorage.
Refactored view handling to prevent NPE and streamlined test assertions for clarity and efficiency.
Updated exception handling to catch Throwable and simplified error message formatting in SegmentGenerationJobRunner
Updated query initialization to fallback to params when rb.getQueryString() returns null
Added validation to prevent illegal characters (CR/LF) in header keys and values to ensure compliance with HTTP standards.
Refactored layout size calculation by replacing instanceSize with arrayBaseOffset to improve alignment handling.
Refactored comment container hierarchy for consistency and added @Experimental annotation to ASTCommentContainer.
Added warning for inconsistent fetch mode and lazy loading configuration to improve debugging clarity.
Refactored filters to extend AbstractSpecFilter and added @Override annotations for consistency and clarity.
Added database and table name assertions and setters in TxnHandler to ensure consistency in compaction handling.
Added Suspendable to TimerConsumer and introduced TimerGracefulShutdownTest to ensure graceful shutdown behavior
Added a processed check to avoid duplicate trace entries for the same block.
Refactored null check to use CollectionUtils and added tests to ensure null elements in providers list throw appropriate exceptions.
Simplified PostgreSQL version check by removing redundant logic.
Introduced support for server-side row limits in local index queries to improve query efficiency and consistency.
Added validation to prevent incompatible collection types for the same column name.
Refactored cursor position logic to improve screen boundary handling and alignment.
Removed unused constant USE_RETRIES from HttpShardHandlerFactory.
Updated regex in JavaVersion to support version numbers with additional segments and added test for validation.
Added check to exit early when no input gates are present.
Added a placeholder test method to TestReceivingMessageSourceParserTests for future implementation.
Handle potential NPE by adding a null check for `properties` in `RemoteCluster`.
Refactored IOException handling to use initCause for improved exception chaining.
Updated error message to clarify that same component versions cause stack upgrade failure instead of rolling upgrade failure
Refactored TxConfidenceListener setup to enable proper cleanup and reuse, improving resource management.
Added constant for "G1 Perm Gen" to improve readability and maintainability in JmxSupport
Refactored NearbyController to simplify imports and remove unused loadAttractionsFromLocationToPlaces method.
Refactored PDFCloneUtility to use generic types and added SuppressWarnings for unchecked casts
Exclude home activities from gesture handling to ensure proper task identification
Refactored DefaultEdgeClientFilter to EdgeAddHeaderClientFilter with updated configuration keys and improved property initialization.
Ensure network and SIM country ISO codes are returned in lowercase to standardize output and avoid case-sensitivity issues.
Removed redundant `setUnfreezeAmount` call to simplify unfreeze balance handling.
Updated penalty descriptions from "per minute" to "per match" for consistency and clarity
Replaced Guava Files with Apache Commons FileUtils for directory copying and improved parameter naming for clarity.
Refactored assertion classes to improve code consistency and maintainability.
Refactored Observable class to improve code readability and maintainability.
Refactored pushAll operation to use addMultiFieldOperation for cleaner code and added tests to verify multiple field updates.
Ensure randomUUID is initialized before setting hubChangeLog ID to prevent potential null assignment.
Added support for hover events in InputConsumer and related classes to enhance motion event handling.
Added delay for multi-server ZK setup when bootstrap_conf is false to ensure proper initialization.
Refactored variable and method names from maxHeadersSize to maxHeaderSize for consistency and corrected @UriParam annotation to include label.
Increased HBase client retry count to improve stability in testing environments.
Refactored file path construction to ensure cross-platform compatibility.
Refactored graph caching test logic for clarity and improved null safety
Refactored query commands and added new test case to enhance coverage for schema table queries.
Adapted Kraken asset codes to map currencies with associated metadata.
Added toString() implementation in AnyOf and corresponding test to display inner conditions' descriptions.
Refactored AlertTaskRunnerV2 to use DimensionMap for clarity and to improve null safety in email subject generation.
Improved validation and logging for InfluxDB settings to handle missing measurement or database gracefully.
Refactored conversion methods to improve naming clarity and added null handling and informative error messages in converters.
Enhanced IP address filtering to include IPv6-specific address types
Added quoteColumnNames method to ensure column names are properly quoted in row headers.
Enhanced method handling to support custom annotations, improved property management, and optimized string utilities.
Added a POST method constructor to UpdateRequest to initialize with a URL.
Refactored EnumSerialization declaration to remove redundant static modifier.
Removed deprecated addExperimentalFormatWarning method and its usages to clean up unused code.
Enhanced logging for moduleNames by formatting list values for better readability and consistency
Adjusted row height calculation to scale dynamically with default label font size.
Refactored broker heartbeat handling logic using `Optional` to simplify null checks and improve code readability.
Fixed incorrect initialization logic for splitCount to handle empty or null rows correctly
Simplified conditional check by removing redundant null and equality validation for JUnit test names.
Added equals and hashCode implementations for RuleTerminalNodeLeftTuple to ensure correct behavior in collections
Added StageIDsRearranger to rearrange stage IDs based on configuration.
Updated MBean registration path to align with MessagingService namespace changes.
Refactored memory check logic to improve readability and added detailed logging for memory consumption.
Refactored imports for javadocs and adjusted TaxonomyFacets to be public for better extensibility.
Refactored LDAP configuration to support anonymous read-only mode and improve property handling
Fixed potential NPE in DatabaseMetaData by adding null check.
Changed EchoInputDoFn from public static to private static to limit visibility.
Added `finishMocking` method to handle unfinished verifications with or without exceptions.
Refactored GoTestDescription to simplify dependency handling and added integration tests for genrule scenarios.
Refactored buffer management and state handling for improved clarity and thread safety in SPDYAsyncConnection and HTTPSPDYAsyncConnection.
Updated BlockLiquid retrieval to use getFlowingBlock for correct material handling
Replaced intent extras with URI-based data handling to improve parameter parsing and null safety.
Fixed typo in **AprEndpoint.java** class definition.
Added support for generating JSON plans for StreamingPlan in CliFrontend.
Refactored CraftingManager: improved bitwise operations for efficiency and replaced manual map initialization with computeIfAbsent for cleaner code.
Refactored test utilities and assertions for improved readability, error clarity, and robustness during forced checkpoint retries.
Simplified whitespace checks to improve readability and maintain consistency.
Added filter pattern for pg_temp to exclude temporary database objects.
Added `false` parameter to `toBody` calls to improve serialization clarity and avoid unintended behavior.
Enhanced data type handling for "INTERVAL," "NCLOB," and "NVARCHAR" to improve compatibility and prevent errors.
Added checks for publishing histograms to optimize metric registration and prevent unnecessary operations.
Refactored upstream handling logic and added warmup/timestamp fields to enhance Spring Cloud service registration.
Added overloaded registerListener method to support maxLatency parameter.
Added SocketException handling in test methods to log warnings for premature connection closures.
Added null check for ignite.close(), adjusted logger visibility, and configured Apache Ignite features in CamelIgniteTest
Improved result set handling to prevent errors and clarified output for empty sets.
Refactored exception handling to catch broader exceptions and ensure consistent return behavior
Added support for configuring HDR capabilities in ShadowDisplay with validation for API levels.
Set `classLoader` to null in `finally` block to ensure proper cleanup.
Improved error messages in SemanticAnalyzer for better debugging and added toString() in SemiJoinHint for enhanced logging.
Added default constructor to `Message` class for object initialization.
Refactored priority assignment logic to account for GUI classes and ensure accurate bug reporting priorities.
Enhanced precision and scale enforcement in PhoenixDecimalObjectInspector to align with DecimalTypeInfo.
Refactored gzipstream initialization to handle committed responses and prevent unnecessary headers.
Refactored method and variable names for clarity and consistency in authentication handling
Refactored conditional checks to improve readability and maintainability.
Refactored thread group name retrieval to handle null ThreadGroup scenarios safely.
Refactored logging and formatting, added null checks, and improved debug output for denied access cases.
Moved DmozParser to org.apache.nutch.tools package and updated logger to reflect the change.
Removed unused @ToString annotation to clean up imports.
Added ISO volume handling to support migration of VMs with attached ISOs
Refactored SigInt to simplify signal handling logic and updated tests to reflect the new behavior.
Refactored import and usage of ArrayUtils to improve code clarity and maintain consistency.
Refactored test configuration to use SpringBootTest and EnableAutoConfiguration, replacing ContextConfiguration.
Added missing @Override annotations to ColorRGBA methods for improved clarity and adherence to conventions
Removed resetInitializedPlanningEntities logic and deprecated uninitialize methods to simplify entity handling and phase configuration.
Added build time tracking to improve cache accuracy and performance.
Refactored field processing logic and adjusted hash table condition to improve code clarity and maintainability.
Added null check for block to prevent potential NullPointerException in addBlockAppearance calls.
Added support for CNC_BTC currency pair, including Chinacoin definition and ticker integration.
Refactored skewAllowance handling to prioritize service-level configuration over global defaults
Added sorting functionality for songs by name and updated query sorting logic for MusicArtist type
Removed unused `readBodyToBytesIfNecessary` method and related imports to clean up dead code.
Refactored block classes to extend LegacyBaseBlockWrapper for better NBT handling and maintainability.
Refactored tag lookup logic to improve readability and handle non-tag references gracefully.
Replaced `newArrayList` with `Collections.singletonList` to improve readability and maintainability.
Refactored buffer binding logic to dynamically resolve SSBO binding index and removed unused bounce count key handlers in PhotonMappingDemo.
Added validation for requirePasswordChange property and enhanced logging for unsupported operations on external IDPs.
Removed unused fields from `notInitializedInConstructors` to improve memory management.
Handled potential issue with closed database connection by checking connection state before constructing error message.
Added test cases to validate request body handling in REST template interactions for microservices
Updated regex patterns to match `{<namespace>.user}` and `{<namespace>.password}` format for consistency.
Added "Item4" to menuItems and META+ENTER key binding to enhance menu functionality
Improved logging and assertions in TestCoreParser to enhance debugging and ensure accurate test result validation.
Swapped equality checks between `id` and `children` for correct comparison logic.
Removed public modifier from PopulatorContextStackItem to limit its visibility.
Updated `MoreLikeThis` to handle `getDocCount` fallback for missing fields and added comprehensive tests for small sample corpus.
Refactored QuestManager for improved readability by reformatting chained method calls.
Refactored NetworkBufferPoolTest to extend TestLogger and updated TestIOException to be static for better test logging and class structure.
Combined multiple query conditions into a single BasicDBObject to optimize query structure.
Added MacroSubstitution annotation for unsafeGetLong to enable macro-based code generation
Updated time zone for "Asia/Amman" from ARAST to EET across all localization files.
Updated id in DeprecationLogger to 90000011 to align with the new versioning scheme.
Handle JDBCException to return null when transaction is marked rollback-only, improving transaction safety.
Refactored suffix handling logic to improve clarity and prevent incorrect substring operations.
Enabled macOS screen menu bar adaptation in `updateUI` to improve native UI behavior.
Added unit tests for piecewise function integration to validate correctness of results
Made `STATE_SCREENSHOT_CAPTURED` and `switchToScreenshot()` protected to allow overriding in `FallbackSwipeHandler`.
Added test for runtime parameter modification enforcement and updated whitelist pattern handling in HiveConf
Refactored invalidClasses map insertion logic to improve data integrity and prevent potential key collisions
Updated Geometry.findClosest call to use player's team instead of a hardcoded team for improved team-specific targeting.
Replaced hardcoded domain with dynamic value from domainHelper to improve flexibility.
Enhanced nullable validation logic to handle non-validated columns and prevent incorrect constraints.
Refactored SecurityToken service classes to improve readability and maintainability across token handling operations.
Refactored CompositeIdRouter for cleaner logic and immutability; improved CustomCollectionTest to validate shard-specific queries.
Added support for PostgreSQL BLOB handling using snapshot data to address type-specific behavior.
Refactored cache logic and formatting for consistency and improved null-check handling in DefaultServlet.
Implemented drag-and-drop support for BibTeX entries and improved handling of drag events in the main interface.
Updated description creation logic and adjusted test assertions to ensure proper handling of step descriptions and scenario name inclusion in JUnit descriptions.
Replaced manual isEmpty() checks with StringUtils.isNotEmpty() for consistency and readability.
Refactored TimeUtils methods to package-private for improved encapsulation and updated TimeUtilsTest package for consistency.
Refactored class name checks to improve clarity and handle version-specific logic for SecurityFrame detection.
Added missing dot in file extension check for JPG and JPEG files.
Refactored method handling to differentiate HostedMethod and fallback to declaring class type conversion.
Added `getIcon()` method with appropriate icon resources and updated UI components to display icons.
Handle edge case where request name has no dot to avoid StringIndexOutOfBoundsException.
Added support for escaping dollar signs in replacements when regex is not enabled.
Refactored connection handling to support generic Connection type and added fallback for null socket scenarios.
Refactored SchemaExtractionProcessor to improve readability and maintainability
Refactored directory copy logic to use a reusable utility method for improved code clarity and maintainability.
Added exception handling for unknown datum class in JacksonUtils to prevent unexpected behavior.
Refactored ABI rule creation to use requireRule for consistent rule resolution
Refactored height calculation logic by removing unnecessary padding adjustments.
Normalized database and table names using HiveStringUtils to ensure consistent identifier formatting.
Refactored schema resolution logic to handle null schema for Oracle databases and ensure compatibility with PostgreSQL
Removed unnecessary logout call to prevent redundant API requests.
Updated MockStreamingRuntimeContext parameters and adjusted task metadata for consistency across tests.
Handle null candidates to prevent NullPointerException and provide feedback with a beep.
Refactored managed bean check for clarity and updated test assertions to reflect corrected lifecycle counts.
Refactored code to rename IExecutionAttributesDialect to IExecutionAttributeDialect for consistency and clarity.
Added `clearUnsafe()` call to ensure metadata is reset securely.
Handled null checks for 'loc' to prevent potential NullPointerException.
Added null check for measurements and introduced DisruptorQueueExceptionHandler to enhance robustness and error handling.
Removed unused Session2Token class to clean up codebase.
Added debug logging and cleanup steps for failed volume creation, including volume removal and database entry deletion.
Added "Install" system shortcut to support instant app installation and web UI interaction.
Added NullAuthoritiesPopulator to handle cases with no authorities and updated tests accordingly.
Added logic to dynamically locate or fallback retrolambda jar to improve configurability and Android build compatibility.
Replaced buildOrThrow() with build() to handle exceptions more gracefully.
Refactored sortLiveDocs to use codec's liveDocsFormat for improved compatibility and efficiency.
Handle null result in JMESPathExtractor to prevent unexpected behavior
Added null check and return for empty authorities to prevent potential NPEs and improve safety.
Refactored test assertions and imports for consistency, clarity, and improved dependency management.
Fixed typo in exception message: "VGU" corrected to "vGPU" for accuracy
Enhanced `Config` annotation handling to merge configurations from class, subclass, and method levels, ensuring accurate test setup.
Replaced SelectChannelConnector with SocketConnector for compatibility with updated Jetty API.
Refactored partition key equality check to improve code clarity and added tests for altering partition key properties.
Added a new feature flag to enable icons in text headers for debugging purposes.
Fixed missing closing parenthesis in isComponentActive condition.
Refactored deployment and undeployment handlers to use non-blocking Completable callbacks and improved error handling with SerializedExecutor tasks.
Added WorkspaceListener to manage workspace selection and trigger graph build dynamically.
Prevented inflation for VM anonymous classes to ensure correct handling in ReflectionFactory.
Updated TransportHelper to improve code readability and maintainability.
Removed redundant "//" in file path construction for improved compatibility.
Reordered initialization steps to ensure ActionManager is started after servers.
Refactored `JSONWriter` to handle null checks and ensure proper node initialization and modification acceptance.
Refactored `SliderAppsViewControllerImpl` to inject `FileSystem` dependency, improving configurability and resource management.
Added null-check to prevent duplicate attachment of backgroundManager to the window
Fixed layout calculations and adjusted tab selection to enhance UI consistency and prevent potential errors.
Added null check and exception for invalid URL in BaseDataSource, with test for typo in PostgreSQL URL.
Added JRE-specific annotations and reformatted PebbleTemplateEngine initialization for readability.
Replaced deprecated dialog creation with EditNameDialog to enhance directory naming UX and improve code maintainability.
Added toggle functionality for bar border width in multiple chart activities.
Updated API and WebSocket endpoints to use OkEx instead of OkCoin.
Refactored AcceptedForagerTest to replace repetitive StepScope creation with a helper method and removed FIXME prefixes from test names.
Replaced FileChannel with SeekableByteChannel for better compatibility and added file read/write tests in BytesAndLines.
Refactored FlattenRecordBatch and RepeatedMapVector to use FieldReference for improved flexibility and maintainability.
Refactored MockHandler to MockHandlerImpl for improved clarity and consistency in naming conventions.
Refactored serialization config parsing to handle proxy types only when explicitly defined.
Set heap memory limit for debug devices to improve performance debugging.
Refactored lambda expressions to improve readability and avoid redundant calls to mapper.applyAsDouble()
Refactored exception handling logic to determine rethrow condition based on result state.
Refactored deletionInfo serialization logic to ensure correct buffer initialization and exception handling
Fixed incorrect bitmask in rendering intent and adjusted header parsing to prevent potential data errors; added test for invalid rendering intents.
Added MeterRegistryLifecycle to manage MeterRegistry lifecycle and ensure proper shutdown
Changed log level from WARN to INFO for missing config items in config center.
Added test cases to validate CertificateFactory behavior with empty and invalid input streams
Fixed parsing logic for ambiguous binary operators and added unit test to validate behavior
Moved ensureWindowsDismissed logic from onTabUnselected to IDEEditor onFocusChanged to better handle focus loss events.
Added username to access log error message for better debugging context
Updated model file paths, adjusted scaling for robot model, fixed null check for submeshnames, and refined animation timing.
Removed unnecessary `throws InterruptedException` declaration from `createOrThrow` method signature
Added @Deprecated annotations to indicate deprecation of UpgradeResponse.
Added support for generating and specifying output directory for TypeScript declaration files (d.ts).
Added a test for Kinesis fetch timeout and adjusted default timeout handling for KinesisConsumerFactory.
Fixed concatenation issue in StreamingDataflowWorker to ensure proper formatting of timestamp and file extension.
Reduced default max threads for Hive metastore server to improve resource management.
Changed return type of onTaskSnapshotChanged to boolean and added default return value.
Updated shadow radius to use dynamic value for improved animation flexibility
Added test for chain nesting and aggregation with @Autowired MessageChannel.
Renamed loop variable for clarity and added fail condition to ensure proper test validation.
Updated condition to check `isInteractive()` instead of `isInternal()` in PolyglotContextImpl.
Fixed condition to handle null previousCachedFilePath correctly in keytab file caching logic
Added DisplayController dependency to WindowManagerProxy initialization for enhanced display management.
Removed redundant tooltip initialization for root directories in file chooser UI implementations.
Replaced instance method call with static Toolkit method to improve code clarity and consistency.
Updated method return types for better type specificity in recognition results.
Added utility methods for entity persistence and removal, and tests for QueryDSL-based fetch operations with grouping and aggregation.
Removed unnecessary logging and adjusted dragIndex condition for improved clarity and performance.
Updated moeVersion to 1.2.0 to reflect the latest library version.
Fixed typo in error message and added gas consumption logic to ensure consistent runtime behavior.
Improved error formatting by adding line breaks for better readability in validation messages.
Marked `Weights` class as deprecated to indicate it should no longer be used.
Refactored unsafe plugin registration to reduce duplication and improve code clarity.
Added annotations and a test to ensure blacklisted modules are not visible in modular builds.
Set `mCenterPagesVertically` to `false` to adjust page alignment behavior.
Refactored `doneProcessing()` call to align with updated migration handling logic
Refactored code to replace moduleIpAddress with baseUrl for consistent URL handling and improved readability.
Updated WSFederationClaimsReleasePolicy to handle attributes as lists and ensure correct resolution of attribute values.
Refactored test table creation and query processing to support dynamic database usage.
Added test cases to validate parsing and deparsing of complex nested CASE expressions in SQL.
Refactored copy mode initiation to improve readability and handle mouse input events.
Refactored XML output generation to use DOM API for improved robustness and readability.
Added null check for exchange in AbstractListAggregationStrategy and introduced CustomListAggregationStrategyEmptySplitTest to validate empty list handling.
Refactored exception handling to replace ExchangeHelper with CamelExchangeException for improved encapsulation and maintainability
Updated package paths to use `ch.qos.logback.classic` for consistency and accuracy.
Added condition to check PHI_NODE flag before asserting targetVN to ensure proper data flow analysis
Removed unused import of SharedStringSource to improve code cleanliness
Added overloaded invokeMethod to support default trace handling.
Refactored statistical and dataset classes to improve consistency and maintainability across the codebase
Migrated tests from JUnit 4 to JUnit 5 for improved extensibility and modern testing practices.
Refactored code to use safe equality checks and static classes for improved null safety and readability.
Restricted constructor and singleton visibility to enforce encapsulation.
Refactored IfStatementTest to use DSL-based graph assertions for improved readability and maintainability.
Replaced `getPutOnlyTableHeaderRow` with `getTableHeaderRow` to handle all table types consistently.
Refactored TypeAdapter to use instance method nullSafe() for improved readability and consistency.
Updated test assertion to expect size 13 instead of 12.
Added `EXIFReader` to process image metadata and integrated it into `ImageProcessingService` for enhanced EXIF validation.
Refactored toStandardUnit method to handle unknown units as StandardUnit.NONE and added corresponding test.
Ensure type compatibility of PMML parameters to prevent runtime errors during model application.
Added clarification for repeated CounterCurrencyTransferStartedMessage in info log to improve traceability
Added a check to exit early if BubbleBar is not visible to prevent unnecessary processing.
Handled BranchTargetOutOfBoundsException during code emission to ensure correct label range handling and emission retry.
Wrapped `initializeJDKLogManager` call in a `try-finally` block to ensure `initPending` is reset and added concurrency test to prevent NPE during concurrent log initialization.
Refactored ticket catalog and registry logic for improved maintainability and streamlined ticket definition handling.
Refactored SSL connection setup and assertions for improved readability and maintainability
Synchronized fileWriter initialization and added resultFileBasePath and readBufferPool to improve thread safety and prevent null pointer issues.
Refactored Read and Write constructors in JmsIO to initialize with default null values for better extensibility.
Added `type` and `sort` fields to PluginHandle entities and updated related methods to support querying plugin handles by type
Aligned span creation behavior by ensuring consistent `start()` invocation across tracer and span creation methods
Refactored IOSGraphics to use configurable drawable formats for color, depth, stencil, and multisampling
Refactored login logic into reusable method and added test for account lockout after multiple failed attempts.
Added checks for invalid handles and exceptions for unsupported real/complex operations in JniUtils
Refactored synchronization loop to ensure lockName retrieval is non-null and avoid unnecessary thread interruption checks.
Refactored ShadowPicker to improve code readability and maintainability.
Refactored HTTP/2 client options creation and added dynamic configuration for enhanced connection and server performance.
Enhanced type handling and error reporting in Solidity code generation.
Added default value support to CSS property retrieval methods to ensure fallback values are handled.
Added Path-based constructors to CopyStep for improved type safety and updated tests accordingly.
Added publish call in RedissonSemaphore and test to verify semaphore behavior after permit addition
Refactored tests to update navigation logic and handle RouteContextProcessor instances.
Refactored flavor string parsing into FlavorParser for reusability and added unit tests to ensure correctness
Refactored witness management to use ByteString for consistent encoding and improved data handling
Added null check for resultsMeta before logging to avoid empty output.
Fixed potential memory leak in ConcurrentLinkedQueue by improving node unlinking logic and added a test case to validate the fix
Refactored HuggingFaceTokenizer API to support optional special tokens in encoding and decoding.
Optimized resourceProfiles initialization by replacing loop with Collections.nCopies for better readability and performance.
Refactored chunk handling to improve clarity and ensure data size tracking consistency.
Added session storage context initialization to support Duo Security Universal Prompt
Added a test for JSP document schema validation to ensure XML compliance in web applications.
Added default constructor to TypeAdapter and clarified test annotations for Java 17 compatibility
Refactored kill handling with `prepareKill` and `isKillPrepared` methods to improve clarity and prevent premature exceptions.
Updated AntPathRequestMatcher to improve readability by removing unnecessary comments.
Refactored createResourcePolicy method to simplify arguments and improve maintainability.
Added null check for _deflaterEntry in GzipHttpOutputInterceptor and replaced println/debug statements with assertions in BlockingTest for cleaner and safer code.
Added @AfterEach annotation for cleanup in ReactorCoreAutoConfigurationTests.
Normalized input string to NFC form and removed unknown Unicode character 65533 to ensure consistent checksum calculation.
Refactored command handling logic to improve readability, consistency, and null safety.
Added @Override annotations for methods to enhance clarity and enforce proper overrides; made ProfilerKeyListener final for immutability.
Refactored JSON parsing in MongoTemplate to use DBObject, improving type safety and added test for saving JSON strings.
Handled multiple remote addresses in X-Forwarded-For header by extracting the first IP.
Refactored getJobArgs to use ObjectBuilder for improved JSON handling and updated related method calls.
Refactored network utility to improve hostname resolution, use NO_PROXY for connections, and simplify localhost handling.
Refactored GlyphLayout to handle wrapped runs with all whitespace and updated BitmapFontTest with new test case for color tags.
Added pauseOrResumeSplits method to manage split state transitions in Pulsar source readers.
Added support for setting a unique script operator ID in the environment variables.
Refactored getListedTermCounts for sorting flexibility and efficiency; added test to validate term count sorting behavior.
Added UseSeparateStepSizeAction to toggle Z step size setting via menu checkbox
Refactored FileMenuFilter to improve immutability, enhance file locking logic, and fix user ID retrieval.
Refactored region server split handling for clarity and replaced deprecated methods with modern utilities.
Standardized sampling header values from "true/false" to "1/0" for consistency and improved readability.
Replaced manual resource closing with IOUtils.closeQuietly to simplify code and handle null safely.
Added fullscreen support and fixed display mode initialization for improved rendering consistency.
Refactored WebfingerIssuerService to use URI instead of String for improved resource normalization and validation.
Added unit test for SoulApacheDubboClientConfiguration to verify DubboConfig properties initialization
Refactored file resolution logic to use custom resolve() method for improved path handling.
Updated log levels and added trace logging to improve debugging and clarify attribute processing details.
Replaced lock() with lockInterruptibly() to handle thread interruptions gracefully.
Corrected package declaration formatting in Compiler.java to maintain code consistency.
Handle edge cases for redundant branches in JSR subroutines and ensure proper exception table checks.
Refactored DashRendererBuilder to use DefaultHttpDataSource and updated method signatures for improved manifest handling.
Added configuration property for maximum cached statements per connection to improve database performance.
Refactored set method return type from WritableConfig to Configuration for consistency across implementations.
Removed unused `checkErr` method to improve code clarity and maintainability.
Fixed data merging logic in CombinedDataset to handle null values gracefully.
Fixed buffer usage in gzip read loop to avoid unnecessary array allocation.
Added utility to remove cryptography restrictions and integrated checks for restricted environments
Added event cancellation check to prevent unintended Nether portal creation
Added test for page margins transformation with long text.
Add null check for vContext to avoid redundant initialization during vectorization setup.
Converted speed to knots in WialonProtocolDecoder.
Changed default metric user configuration to disabled and updated logic to respect configuration flag for user metrics initialization.
Added isEmpty() method to JsonObject with corresponding unit tests
Refactored receiver unregistration logic to ensure proper handling when detached.
Refactored stream handling to enhance consistency and reduce duplicated code across network classes.
Added support for additional ZADD parameters to enhance Redis command flexibility.
Refactored code for readability, fixed potential issues with null handling, enforced coding standards, and improved charset usage.
Renamed class and removed @Ignore annotation to enhance test reliability and align with naming conventions.
Refactored target graph builder for better null safety, added test handling, and improved test coverage.
Replaced named constants with inline literals for epoch seconds bounds to improve code readability.
Refactored EscherBlipRecord for clarity and added TestOLE2Embeding to validate OLE2 embedding functionality.
Fixed column initialization in JSONParser to ensure correct starting value
Refactored type matching logic to use regex patterns for improved flexibility and clarity.
Added support for playing local trailers and improved detail thumbnail height for better display.
Added `removeGlyphInfoFromCache` calls to ensure cache consistency when freeing native pointers.
Refactored termination logic to improve process end handling and added assertions for historic process instance details in tests
Handle empty xmlType names by using @XmlRootElement annotation if present.
Updated test to use a valid HTTPS endpoint in SimpleHttpClientTests.
Added option to reset all preferences to default values and handled potential BackingStoreException.
Refactored Thrift server methods and metrics for enhanced extensibility and subclass customization.
Removed deprecated CHANNEL_MANUAL_FAN_SPEED and related methods to streamline channel management.
Replaced JUnit assertEquals with Hamcrest assertThat for improved readability and expressive assertions.
Refactored conditional block to use consistent formatting for readability.
Added equals and hashCode implementations in PartitionFactory and handled invalid index in PartitionPanel to improve data consistency and robustness.
Added default root disk size to custom parameters if not already specified.
Enhanced visibility logic to respect user preference for showing suggested apps in drawer.
Refactored BBOX parsing to handle null or invalid CRS gracefully and added validation with tests.
Added parameter validation for non-negative values and restricted ivk and Merkle tree depth constraints in LibrustzcashParam.
Marked IThrowableEntity as @Deprecated, moved to cpw.mods.fml.common.registry.IThrowableEntity.
Initialized random coordinates (x, y) for NodeDataImpl to enhance variability.
Added test cases for refresh token validation to cover happy path and missing scopes scenarios
Refactored JavacStep to use try-with-resources for safer resource management and cleaner code.
Bumped version from 0.9.1 to 0.9.2 to reflect new release.
Added condition to handle deep shortcut item type in LoaderCursor
Added hashCode implementation to ensure correct behavior in hash-based collections.
Changed class visibility and field access modifiers to enhance extensibility in BooleanQuery and DisjunctionMaxQuery.
Added useProxyResponseCode flag to handle NTLM proxy response logic correctly.
Refactored AArch64 macro-assembly to improve register handling and ensure resource safety with try-with-resources
Optimized memory calculation by replacing manual aggregation with a database query to improve accuracy and efficiency.
Added null check for max score to prevent potential null pointer exception in JSONResponseWriter and updated test query for distributed search.
Updated audio recorder initialization to use 44100 Hz for improved sound quality
Fixed incorrect calculation of newOriginX to properly account for subject bounds and scaling factors
Enhanced null and emptiness checks for `dataSource` and set default intervals to prevent runtime errors.
Added ORIGINAL_TYPE constant and refined regex pattern in CustomProperty for improved flexibility and test coverage
Added a factory method to create Index instances using a parent table and data map.
Simplified boolean logic by inlining variable in isBetweenGivenPeriod calculation.
Improved schema compatibility handling by adding location tracking and updated test cases for detailed incompatibility assertions.
Refactored query logic to improve handling of entity paths and associations, and added tests to ensure null values are preserved during paged specification execution.
Added synchronization to spans to ensure thread safety and prevent iteration pitfalls.
Updated method signatures to use wildcard generics for improved flexibility and compatibility with various argument types.
Refined exception handling with specific log levels for InvocationTargetException and general Exception.
Added null check for OAuth2AccessTokenEntity to prevent potential NullPointerException.
Updated error messages and status handling logic to improve clarity and prevent null invocation issues.
Added default iPad launch images to project files for iOS and iOS-MOE platforms.
Set ConcurrentMergeScheduler to improve merge operations in tests
Enhanced null and empty checks in session state and list processing to prevent potential runtime errors.
Refactored iteration utilities to improve performance and code readability.
Added repeated preventDefault() calls to suppress default browser behaviors during event handling.
Refactored service registration and added cleanup logic to ensure proper unregistration of Hibernate OSGi services.
Corrected timeout calculation to avoid negative values caused by double subtraction.
Refactored component file creation to use non-packaged resources directory for better resource organization.
Refactored file handling to use platform-independent separators and improved directory validation logic.
Refactored `row()` method in `Cell` to return void to align with its intended functionality.
Added port clash detection to `BesuCommand` to prevent duplicate port configurations and ensure proper validation.
Added support for configurable WebSocket mask generation to enhance flexibility and maintain compatibility.
Refactored genUDTFPlan to return a Pair for better encapsulation of RelNode and RowResolver.
Added NodeSelectionStats to track preferred and non-preferred node selection counts for improved scheduling insights.
Added Person class with basic getter and setter for name property.
Refactored owner pointer handling to improve null safety and streamline bounds assignment logic.
Added clock display with periodic updates and fade animations in PlaybackOverlayFragment.
Refactored redundant `updateComparatorOutputLevel` and `markDirty` calls to improve code efficiency and maintainability.
Enhanced exception handling for SegmentReader class loading to improve robustness and clarity.
Moved `fireCellUpdatedEvent` to `SwingUtilities.invokeLater` to ensure thread-safety in UI updates.
Refactored InetAddress type adapter implementation for improved modularity and alignment with factory-based registration
Added single-value accessors and validation for Series, with tests for null and multi-element cases
Enabled audio time-stretching by modifying video manager options.
Improved geospatial calculations for boundary conditions and added test coverage for whole-map polygon queries.
Updated method call to fetch DiskOffering by disk offering ID instead of service offering ID.
Added cleanup method to ensure Hazelcast instances are shutdown after tests
Added tests for invalid AES cipher modes to validate exception handling
Added filters to log operation messages for better traceability
Added AOP introduction interfaces and classes to support type argument handling in bean definitions
Set `currentConnectionAddress` to `proxySocketAddress` when null to ensure proper initialization.
Replaced manual overflow handling with MathUtils.cappedAdd for cleaner and safer code.
Refactored to use try-with-resources and ensure file deletion with Files API.
Refactored search functionality to remove TvApp dependency and simplify intent handling across activities and fragments
Refactored code for consistency in object initialization, method signatures, and formatting across multiple classes.
Added OSGi support with `OsgiConfiguration` and improved JMX object naming for enhanced configuration and management.
Added Autowired annotation for PersonRepository in RepositoryIndexCreationIntegrationTests
Updated method signature in UIServer to throw InterruptedException and fixed logging format in TestVertxUIManual.
Updated BlockCactus collision logic to include solid and passable blocks, improving block interaction consistency.
Refactored mouse handling logic to improve readability and support drag events.
Refactored padding implementation to improve memory alignment and separation of hot/cold fields.
Extended `editStringAt` method to include text alignment and vertical alignment parameters for improved customization.
Refactored `StatTokSentAnnotator` constructor to replace generic exception with `IllegalArgumentException` and streamline tokenization model validation logic.
Enhanced query generation logic to handle distinct queries with proper group column handling and query fragment adjustments.
Refactored OptionsParser and JNI modules to improve accessibility and enhance error reporting with fuzzy matching for JNI methods.
Standardized comment format in code for improved readability and maintainability.
Added null check for children to prevent potential NullPointerException during iteration.
Implemented JsonLocation tracking and improved error handling in MessagePackParser.
Ensured Locale is reset after tests to avoid side effects on global Locale settings.
Removed redundant conditionals in size calculation to simplify logic.
Added unit tests for MetricsReporter to verify metric registration and manipulation functionality
Removed unused import and improved type inference in OsgiServiceRegistry for better readability and maintenance
Implemented equals() and hashCode() methods for Rectangle to ensure proper object comparison and hashing.
Replaced hardcoded sink names with dynamically generated names to improve test isolation and prevent conflicts.
Refactored DSAParameterGenerator to improve readability, enforce prime size validation, and use consistent BigInteger constants.
Added support for configurable AM hostname resolution in LLAP to enable FQDN usage.
Replaced immediate assertion with assertTrueEventually to handle potential timing issues during client shutdown.
Refactored shape ID handling by introducing `getCmoObjectId` method for consistency and added unit tests to validate behavior.
Added a test case to verify distinct scalar query functionality for post titles.
Refactored task classes and Driver for improved code organization and maintainability.
Removed dynamic ExtensionAdapter bindings to simplify ManagedKubernetesClient.
Replaced direct official rating assignment with a dynamic info row generator for improved content flexibility and readability.
Migrated tests from JUnit 4 to JUnit 5 for improved annotations and compatibility.
Refactored generateSummary method to handle specific exceptions and improve error logging
Simplified pool reset method calls by removing redundant arguments.
Removed redundant @Override annotations to improve code clarity and maintainability.
Updated API level checks and added WindowSessionDelegateU implementation for TIRAMISU support.
Refactored URL generation logic to handle non-standard ports consistently and added tests for validation
Added support for handling "RESTRICT" onDelete action for MSSQLDatabase in AddForeignKeyConstraintGenerator.
Refactored code to improve readability and maintainability without altering functionality.
Refactored dye color handling and added FilterEventHandler for improved side-check logic and pluggable lens interaction.
Refactored logging logic in HtmlIdentifier to simplify debug mode checks and improve maintainability.
Refactored Hive lookup join tests and schema methods for improved consistency and correctness in field references and result validation.
Enforced thread-safety and added mechanisms to verify application thread usage across player components.
Replaced schema name string construction with CatalogAndSchema to ensure database-specific customization.
Refactored color handling and rendering logic; updated AlphaTest for accurate framebuffer testing and fixed rendering dimensions.
Refactored join calls to use getSentPromise for improved batch operation handling in RedissonConnection
Extracted baseCore URL and ensured its uniqueness in statisticYearCores list.
Refactored task handling to improve null safety, readability, and task launching logic.
Refactored MorfologikFilter to improve dictionary handling and enhance null safety.
Corrected label for community rating in sort options for consistency.
Added visibility handling for header views to ensure proper display based on ListRow header item presence.
Refactored switch block to include try-finally for ensuring start.countDown() execution.
Refactored HttpClient.java to improve code readability and maintainability.
Replaced isCaseSensitive checks with instanceof DB2Database to align with database-specific behavior.
Added support for JavaTimeModule to handle Java 8 date/time serialization with Jackson.
Replaced Log4j MDC with SLF4J MDC to align with updated logging framework.
Refactored PhiTypeResolver to replace TypeBearer with Type for improved type safety and clarity.
Refactored CoinbaseTransactionStatusDeserializer for improved readability and consistency
Added support for resolving aliases in build target lists and forcing builds with specified targets.
Replaced redundant idleStrategy initialization and added explicit System.gc() call for garbage collection management.
Refactored OCFile to use ContentResolver instead of ContentProvider and fixed logging and fragment handling issues.
Refactored event handling logic to remove redundant state checks and streamline loader updates
Added null check for slotOwner to ensure non-null values during assignment
Added recipe to remove calls to `System.gc()` and `Runtime.gc()` to enforce JVM-controlled garbage collection.
Removed redundant `super()` calls to simplify constructors across multiple classes.
Preserved icon state in setUIID to prevent unintended icon changes.
Refactored variable usage to improve clarity and ensure consistent null checks.
Added support for "-cp" as an alias for "-classpath" in argument parsing.
Replaced "options" with "compiler" in annotation to correct attribute usage.
Fixed formatting inconsistency in assignment of initialized variable
Added missing implementation in Test7196045 to address compilation error.
Adjusted density and decay values in ShaderParametersLightShaft for improved light shaft rendering.
Added support for configurable state data in OIDC configuration to enhance flexibility and session management.
Refactored unique constraint handling to support nullable columns and ensure proper null-checks
Added federated share checks to ensure proper handling of user queries and folder sharing restrictions.
Added needsDocValues() method override to ensure doc values are required
Refactored code to improve null checks, exception messages, and type specificity for better clarity and maintainability.
Added intForEach method to Int2ObjectHashMap for functional iteration over key-value pairs.
Fixed mapStorage handling to prevent premature scoreboard sharing in non-WorldServerMulti environments.
Changed `Long` to `long` in count methods to avoid unnecessary boxing and improve performance.
Refactored MTree snapshot creation logic for clearer conditions and improved logging accuracy.
Refactored dotProductScore calculation for clarity and added edge case tests to improve coverage.
Added functionality to track and update the latest confirmed block number based on an irreversible threshold.
Refactored locale setting logic into Systems utility class for better reusability and maintainability.
Added check for new database creation to ensure proper handling of migration cling dismissal logic
Refactored assertion and iterator handling for clarity and proper collection modification.
Refactored is64Bit initialization logic for better readability and maintainability.
Ensured thread consistency check to prevent unintended behavior.
Changed closeDatabase method visibility from private to protected to allow subclass access.
Migrated from legacy API client models to SDK models for improved compatibility and maintainability.
Added logic to copy attributes from the original SVG element to the new document's root element.
Refactored exception handling to improve logging clarity by removing redundant inputrcUrl argument.
Refactored waitingForResult logic to respect "WaitForResult" intent extra.
Refactored PriorityQueue to use Supplier for sentinel objects, improving flexibility and simplifying subclass constructors.
Added widget description support for devices running Android S or above.
Enforced a limit on attribute registrations to prevent exceeding the maximum allowable count.
Moved PredicatesTest to the impl.predicates package and added necessary imports for query-related classes.
Added case-insensitive filtering support to DefaultHeaderFilterStrategy and updated tests to validate functionality.
Refactored inline layout and breaker logic to improve whitespace handling and enforce line-breaking rules.
Refactored ShareUserListAdapter to improve view reuse, enhance avatar creation, and handle potential exceptions.
Refactored Setup and TestRunners to simplify instrumentation logic and remove unused dependencies.
Added check for association and condition to determine column insertion position.
Refactored memory limit file path retrieval to dynamically handle different cgroup versions using Docker client.
Replaced `CxxDeps.of()` with singleton `CxxDeps.EMPTY_INSTANCE` to reduce object creation and improve performance.
Improved error handling by adding a specific exception for null rules in JavaTestRule.
Refactored proxy initialization to use a version-to-class map for cleaner and scalable code.
Simplified null handling by removing redundant assignment when `atIndex` is less than zero.
Increased timeout values to improve test stability under high load conditions.
Refactored TaskOverlayFactoryGo to utilize AssistContentRequester for improved assist content handling and dependency management.
Refactored witness address handling to use encode58Check and corrected null check logic.
Fixed test case assertion in DefaultMethodRegressionTests to align with expected behavior
Added WorkloadManagerMxBean interface for workload management monitoring and control.
Updated exception type in tests to KafkaException for broader compatibility
Added `container.closeLoader()` to ensure proper resource cleanup.
Added tests for fault-tolerant exception handling and refined rollback behavior validation
Enhanced error message for deployment config validation to include found value and expanded runner options.
Added support for passing extraProperties to TableConfigTuner to enhance configurability.
Avoided adding segments for in-progress instances to ensure consistency and prevent redundant operations.
Added null return check for disabled touchable to handle edge cases.
Added test to validate building with precompiled headers across cells
Added null check for cacheConfig to throw RetryableHazelcastException when cache configuration is missing.
Refactored npm package handling to simplify logic and improve reliability by replacing local cache with direct npm checks.
Added @ManagedObject and @ManagedOperation annotations for improved MBeanContainer and Destroyable management.
Disabled inAppBrowser setting by hardcoding the condition to false.
Replaced `String.equals` calls with constant-first comparisons to prevent potential `NullPointerException` and improved MQTT message handling for brightness and saturation adjustments.
Improved type-checking logic and added tests to ensure safe casting and handling of raw and unbounded generic types.
Refined position and size messages for better clarity and accuracy in WorldEdit feedback.
Refactored KafkaConsumer to manage fetch tasks lifecycle and ensure proper shutdown.
Removed unused examples() method definition in Schema.java
Refactored AgentRunner logic to fix potential deadlock by breaking loop when thread is no longer alive.
Removed time column from dimensions and filters to align with dataset configuration.
Refactored condition to improve readability by splitting chained logical checks.
Refactored dependency resolution to use CxxPlatforms for consistency and simplicity.
Added 'name' property with getter and setter methods to various authentication properties classes
Improved error handling and logging in CFGPrinterObserver and IdealGraphPrinterDumpHandler to enhance debugging and prevent null pointer issues.
Added logic to classify small scans based on threshold and point lookup count to optimize query performance.
Added routeId to RetryGatewayFilterFactory's toString output for better route identification in logs.
Replaced direct method calls with callWidget for improved flexibility and consistency in handling widget actions.
Refactored overview handling to use DiscoveryBounce for delayed visibility management and removed redundant callbacks
Refactored null checks for globalMinPackedValue and globalMaxPackedValue to improve readability and avoid potential logic errors; added test to verify point document deletion behavior.
Replaced hardcoded parameter with a variable to improve code flexibility and maintainability.
Escaped column name STRING_LIST_ID to fix syntax error in SQL query.
Removed redundant null addition to improve data consistency.
Added case-sensitive and case-insensitive text matching conditions with corresponding tests
Refactored loop structure in ManyToManyConcurrentArrayQueue for improved clarity and maintainability.
Added dynamic fetch size determination for forward-only queries to optimize performance across platforms.
Handled ClosedChannelException separately to avoid unnecessary 404 responses and improve exception logging.
Optimized ArrayList initialization with initial capacity to match beads size for improved performance.
Refactored window radius initialization to account for rounded corner support.
Refactored DesktopTaskView layout and background handling for improved readability and dynamic margin adjustments.
Initialized `UpstreamCheckService` in test setup to ensure proper configuration.
Replaced warn logs with debug logs for immortal sessions to reduce unnecessary logging noise.
Changed error handling to return locks instead of throwing LockException on failure to get ZooKeeper children.
Refactored multiple classes to improve code readability and maintainability.
Added a condition to skip mipmap generation when custom data is present.
Refined string formatting and regex patterns for consistency and improved readability.
Added selectable state and handling logic to improve item selection and touch event management.
Fixed incorrect equality operator in value count check to ensure proper validation
Added File.separator support in PolicyContext and enhanced debug logging for property evaluation.
Replaced Sets with Lists for flatQueries and expandQueries to preserve order in query processing.
Refactored TLSRestrictions to improve maintainability and clarity.
Refactored producer close logic to ensure proper handling with timeout and exceptions in daemon thread
Enhanced assertNodeStateProvider to support ignoring specified node values and ensured stable key ordering with TreeMap.
Added logic to remove existing LOCK file in workspace to ensure clean state.
Updated ZooKeeper client port handling to support InetSocketAddress and improve test accuracy.
Refactored RestClient to extract getResponse method, improving code readability and error handling consistency.
Replaced toString() with toArray() to avoid incorrect string representation of segment URIs.
Fixed incorrect login credentials in AllAccessControlUiTests to ensure proper authentication during tests.
Added null check for `getItemId()` to prevent potential NullPointerException.
Reduced atLeast() parameter in TestSpecialOperations to optimize test runtime.
Replaced custom ByteArrayInStream implementation with JTS ByteArrayInStream to simplify code and improve maintainability.
Renamed method to `messageWithHeaderKey` for better clarity and consistency.
Added check for direct substate transitions to prevent redundant state changes and updated tests for validation.
Enhanced MultimapSubject to support distinct equality checks for ListMultimap and SetMultimap, with comprehensive test coverage.
Added JoinOperation interface to PostJoinOperation for enhanced functionality.
Added test to verify PostgreSQL table creation with OIDs and data insertion for issue 258.
Wrapped destroyDurableSubscriber call in try-catch to handle JMSException for async close scenarios.
Refactored AvaticaDatabaseMetaData for improved readability and maintainability.
Refactored MongoDB connection pool properties to use @DurationCapable for improved readability and configurability.
Replaced null MediaFormatFactory with a valid instance from SipActivator to ensure proper audio media format creation.
Refactored filter handling logic to improve clarity and ensure proper application of domain and block join filters.
Added enabledTimeout flag and refined timeout handling logic to improve IdleState management.
Refactored QUICKSTEP_ROTATION to use a named constant for clarity and maintainability, and removed redundant enable check in animation execution logic.
Updated log messages for consistency and clarity in XPathBuilder and added debug logging in XQueryBuilder
Replaced custom resource loading with DataResource utility for improved readability and maintainability.
Added EdgeCasesTokenizerTest to ensure GoTokenizer handles escaped backslashes without errors.
Added validation for 'atlas' property in map to prevent missing resource errors.
Removed support for resolving property placeholders on components to simplify configuration logic.
Refactored tests to close database connections in BlockchainTest and removed redundant Kafka test logic for cleaner and efficient test execution.
Refactored line processing to use List for improved readability and added handling for trailing empty lines; updated test expectation accordingly.
Removed redundant import statement for MessagingGatewaySupport in test class
Replaced Guava ImmutableList with standard Java Collections for improved compatibility and reduced dependencies.
Added check for "OpenJDK" in javaVmName to improve compatibility detection.
Added keepAlive configuration to ReactorClient to enable persistent connections
Replaced hardcoded attribute names with ShaderProgram constants to ensure consistency and maintainability.
Refactored properties component initialization for clarity and to enforce type safety.
Refactored account retrieval logic to handle null AccountCapsule and avoid potential NullPointerException.
Updated XMPPServer version to 3.8.1 with Alpha release status.
Refactored type handling to use unannotatedType() for consistency and to simplify captured variable checks.
Refactored StorageGroupProcessorTest to adjust sequential TsFile size configuration for enhanced test clarity.
Updated codebase to align with EE10 package structure and enhance environment management.
Added delay parameter to wait before start for improved synchronization.
Removed redundant `skipCorrupt` parameter to simplify OrcEncodedDataConsumer and related classes.
Refactored `AccessorsTest` to streamline imports and migrate test method to JUnit 4 standards
Refactored method compilation process to improve code modularity and added accessor for FrameMap in LIRGenerator.
Replaced JUnit annotations with CAS-specific conditional annotations to support dynamic test execution environments.
Handle BlockWater offset to ensure correct Y-coordinate adjustment in ItemBoat.
Refactored toString() implementation and added getLockID() method for improved clarity and unique lock identification.
Inlined allowExperimentalOptions method to simplify code and improve readability.
Added BDD assertions for Path and generic AssertProvider to enhance test expressiveness.
Refactored variable naming for clarity and updated test cases to reflect port changes
Updated log messages to provide clearer guidance on handling multiple Kubernetes config files and improved formatting.
Added handling for various upload statuses and implemented OCFile creation utility to improve upload management.
Refactored crypto provider installation logic to improve modularity and error handling.
Refactored to use TraceMessageHeaders constants instead of deprecated Span constants in StreamEnvironmentPostProcessor and tests.
Refactored query to use computed wildcard column for improved maintainability and reduced redundancy.
Refactored schema-related methods for consistency across PostgreSQL dialects and removed redundant annotations in SchemaUpdateTest.
Handled division by zero in partitionsPerMember calculation and improved code formatting in tests.
Added scheduler state validation and error handling to ensure reliable initialization and prevent redundant starts.
Simplified condition checks and removed unnecessary toString() call for text object initialization.
Formatted checkArgument statements for improved readability and maintainability.
Updated `getStagedRectSlideEnd` to return 500 to adjust staged rectangle slide timing.
Localized button and label texts using Core.bundle for improved internationalization.
Refactored kill-road-items logic to handle null plots with plotArea abstraction.
Refactored touch exploration state change handling for improved compatibility and thread safety
Refactored glyph ID mapping logic and added unit tests to ensure Unicode character code lookup accuracy.
Replaced getPropertyAsString(TestElement.NAME) with getName() for consistency and improved readability across components.
Refactored POIFSFileSystem creation to use static create method for improved clarity and consistency
Integrated plot area retrieval to validate and assign plot2, ensuring null-safe operation.
Updated regex to match full version format with major, minor, and patch components.
Fixed boundary condition to disallow count values less than 1.
Refactored KafkaConsumerProcessor to improve readability and avoid redundant calls to beanDefinition.getBeanType().
Fixed incorrect re-import of IsolatedClassLoader and added exception handling for javac execution failure.
Refactored visibility and repaint logic to improve rendering efficiency and ensure consistent view updates.
Fixed redundant code format without altering logic in headerValue null-check block
Added `isAnimationFinished` method to determine if the animation has reached its final frame based on state time.
Added test for custom favicon rendering with line breaks in login branding configuration.
Fixed null check for otherUrl and added ellipsis to finding tweetmarker text for clarity.
Standardized string replacements for consistent formatting in `stopEditing` and `DrawEquationWeb` methods.
Optimized ObjectHashSet to improve hash collision handling and ensure consistent performance.
Refactored null checks and replaced nested loops with Arrays.equals for clarity and efficiency.
Fixed itemstack comparison to include NBT data, resolving deletion issue with enchanted books (MC-12770)
Added asynchronous resource tests and refactored JerseyHandler initialization for improved configurability
Renamed flat header maps to user header maps to improve clarity and align with naming conventions.
Enhanced MailService logging to include recipient details and debug info on SendFailedException.
Refactored resetTaskItemView() to resetToEmptyUi() for improved UI consistency and clearer semantics
Added unit tests to verify getPartitionsByNames behavior with various batch configurations.
Fixed syntax error by adding a missing closing brace in FileListListAdapter.java
Replaced ArrayList with List for better flexibility and adherence to coding best practices.
Fixed incorrect index calculation in removeViewInLayout to prevent potential crashes.
Refined hidden packages to exclude unnecessary Jetty internal modules.
Changed parameter to disable payload signing for improved S3Request performance.
Refactored `initializeComponents` to remove unnecessary parameters and added null check for timeline in `updateAnimation`.
Improved DeweyNumber parsing logic to handle invalid input and added tests for edge cases.
Refactored categorySet handling to avoid redundant string operations and improve readability.
Simplified assertion messages for invalid close code in WebSocketClientTest.
Handle null classLoader gracefully and update tests to reflect empty repository scenario
Removed redundant condition check for mapped superclass classes in PersistentAttributeTransformer
Improved type safety and error handling in PDNumberTreeNode to handle non-integer page label indices gracefully.
Added unit test for PorterStemFilter to validate stemming against test data.
Refactored postBatchMutate to postBatchMutateIndispensably to handle success flag and ensure index updates are conditional
Fixed typo in package name from 'exlore' to 'explore' across multiple test files.
Synchronized access to chatPanels to ensure thread safety during iteration and modifications
Centralized `Sys.touch()` initialization in `APIUtil` to simplify code and improve maintainability.
Removed untrackedFiles functionality and updated tests to align with revised file status handling logic.
Refactored timer initialization to ensure thread safety and reuse across Netty components.
Refactored light classes to use `final` fields for immutability and replaced `intensity` with `range` for linear fall-off calculation.
Ensured minimum dimensions for target width and height to prevent invalid rendering.
Added `toString` methods to delegate behavior and corresponding tests to ensure consistency.