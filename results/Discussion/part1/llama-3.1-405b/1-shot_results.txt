Refactored SocketAppender initialization to set host and port separately for improved clarity and flexibility.
Refactored BasicAuthPlugin to encapsulate header logic in getPromptHeaders, improving code readability and reusability.
Refactored method call to use msgLengthOffset directly for improved code clarity.
Refactored CPU and RAM overcommit ratio assignment to use default values when vmDetailCpu or vmDetailRam is null
Added flags field and anti-alias support in ShadowPaint with corresponding tests in PaintTest.
Updated dialog title to use localized text for better internationalization support.
Updated DetectorsTest to improve debugging clarity when no bugs are reported and ensure compatibility with Eclipse compilation.
Improved nonce validation to prevent empty strings and added digest auth test without scheme to enhance coverage.
Added RemoteInputListener to manage connection state callbacks and ensure proper handling of connection lifecycle events.
Fixed incorrect assignment order and added braces for clarity in conditional statement
Added isEnabled check in filter to ensure only enabled HomeConnect things are processed.
Added null check for bs to prevent NullPointerException in policy management operations.
Replaced version-specific date formatting assertions with regex-based patterns for consistency across Java versions.
Added DAG information logging and context description using JSON for improved debug insights and task tracking.
Refactored time computation in ComputedSummary to include header and tag times, leveraging new HprofHeap.getHeapTime() method.
Refactored upload count retrieval to use MediaWikiApi, replacing deprecated RxJava2Tasks implementation.
Simplified MVStore condition checks to improve code clarity and maintainability.
Updated offset validation logic in CommitLog and adjusted max message size calculation in DefaultMessageStore to enhance boundary checks and consistency.
Fixed issue with folder state desynchronization by resetting 'opened' flag when folder is not actually open.
Added test to ensure PGProperty names are sorted in ascending order
Removed unused constant HOVER_MESSAGE_EVALUATION_POINTS_GIVEN to clean up codebase
Refactored UninstallDropTarget to use ItemInfo instead of Object for improved type safety and clarity.
Updated test assertion to handle variations in HTTP method order in error messages
Refactored fragment management to improve readability and ensure consistent naming conventions for retained fragments
Updated parameter name to sessionStatus and adjusted references for clarity and consistency
Added configuration to control email sending for zero anomalies
Added unit test to verify DeserializationSchema's open method invocation during state restoration.
Refactored DataManager to remove redundant query methods for improved maintainability and code simplicity.
Added constructor with maxLength parameter to enhance BlockingResponseListener flexibility and support customization.
Refactored memberBroadcastsReceived to improve error handling and streamline data processing logic
Refactored snapshot handling: replaced `System.out.println` with logger for better logging, wrapped fragment sending in try-finally to ensure reader closure.
Removed unnecessary slashes from URLs in assertions to match expected format
Added unit test cases in ConfigMetadataProviderTest to enhance coverage and reliability
Refactored imports in ListFragment for clarity and renamed variables in SnoozeActivity for improved readability and consistency.
Refactored directory stream filtering logic and Windows path parsing for improved readability and maintainability.
Refactored JdbcTestDataSet to improve code readability and maintainability
Refactored lookupType logic to handle ClassNotFoundException and ensure consistent error propagation through lookupTypeHelper.
Refactored Docker image name validation to improve readability and reusability; added tests to ensure proper validation logic.
Unified error message for login failures to improve user experience and reduce code duplication.
Added autofocus attribute to improve user input focus across multiple forms and components.
Added tests for SAML zone-specific properties to verify request and assertion signing configurations.
Fixed incorrect list initialization logic and updated version comparison tests to improve stability and correctness.
Updated Sheet layout behavior and UIManager theme properties to enhance compatibility and layout consistency.
Moved ParallelUniverse to internal package for improved encapsulation and updated imports accordingly
Refactored method handle initialization to simplify type conversion and ensure consistent return types.
Updated fill pattern method to use SOLID_FOREGROUND for correct rendering
Added functionality to render self-loops in graph visualization with custom styling options.
Refactored TVM Solidity version references from 0.5.10 to 0.59 for consistency and updated related configurations and methods.
Renamed method addManaged to manage for improved readability and consistency.
Set drag handle indicator translationY to 0 to ensure proper positioning during transition.
Refactored logging headers to avoid potential null pointer exceptions when accessing IDs or handles
Updated filter pushdown configuration comments to clarify behavior during query optimization
Disabled test on macOS due to build server self-recognition issues
Added Jetty ALPN client bundles and debug diagnostics for improved OSGi testing.
Refactored async job retry mechanism and lock time update logic; improved error handling with ActivitiOptimisticLockingException; optimized job executor wait timing.
Refactored Transaction.java to improve code readability and maintainability
Refactored rule key annotations to exclude Genrule execution from artifact caching.
Refactored FirefoxCustomProfileLauncher to use AsyncExecute for improved process handling and cross-platform compatibility.
Replaced putIfAbsent with explicit containsKey check to fix potential concurrency issues.
Removed raw type warnings, added null checks, and marked fields as transient to improve safety and serialization.
Handle derived columns and indexes for non-mapped views with outdated client versions.
Updated student Google ID and cascaded updates when a matching student is found for the instructor.
Updated import to use TestCellReference from ss package for broader compatibility.
Added block hardness check to prevent null tile entity issues.
Added LongPointerPressTest3049 to demonstrate handling of long pointer press and pointer press events in Codename One.
Refactored inlining logic to improve clarity and ensure compatibility with updated TruffleInliningPolicy behavior.
Refactored null checks and return statements to improve code readability and maintainability.
Fixed list parsing logic to allow deeply indented lists and added test coverage to validate behavior.
Refactored `OptionalAssert` to extend `AbstractOptionalAssert` for improved code reusability and maintainability.
Added @Ignore annotation to temporarily disable tests until issue #1070 in Spring Cloud Gateway is resolved.
Refactored saveMessage method to remove unnecessary toJsString() conversion and simplify namespace usage
Fixed formatting issue in RouteStartupOrderLastTest.java
Added format check to ensure web subs are processed only for video content.
Set jdk.tls.disabledAlgorithms property to an empty value to enable compatibility with non-compliant TLS implementations
Enhanced storage pool validation to include local pools and scope checks for zone compatibility.
Refactored cache logging and string formatting for improved readability and null safety.
Added optional skipModelUpdate flag to control dependency model updates in AddManagedDependency and related classes.
Added test for handling IntentSender requests with specific request codes and updated ShadowPendingIntent to support custom request codes.
Refactored rendering logic to improve overlay graphics handling and ensure consistent FBO configuration in GL initialization.
Refactored synchronization of Hydrawise controllerListeners to ensure thread safety and updated handler initialization logic for improved reliability.
Added assumption to skip tests on Java 9 due to EasyMock incompatibility (SOLR-9893)
Refactored date handling to use ChronoField.YEAR_OF_ERA for BC dates and introduced a consistent DateTimeFormatter for formatting.
Added null check for connection before disconnecting to prevent potential NPE.
Added cur_ws_commit_id to committed fields for consistency in transaction handling
Replaced ByteChunk with ByteBuffer to improve performance, handle buffer overflows, and ensure better memory management.
Added `toSync` utility for converting `CompletableFuture` to synchronous result with tests
Refactored to use ActionGraphBuilder for improved rule resolution consistency and performance.
Added test to verify file upload functionality with hidden input elements
Refactored table creation logic to improve readability and maintainability.
Added a fallback to getLocalMavenDir() when the file does not exist.
Set algebra label visibility to false for labels with hidden prefix.
Fixed metadata initialization to prevent null assignment and corrected assertEquals parameter order for consistency.
Replaced `setFlags` with `addFlag` to ensure correct flag handling in buffer operations.
Added a check for cached sorted state to ensure proper reordering logic
Updated error message for verify(mock) to clarify missing method call
Added null check for backupFolder to avoid potential NullPointerException in log statement.
Added test case to validate behavior of Array.newInstance with void.class to ensure IllegalArgumentException handling
Annotated `toolType` field with `@AddToRuleKey` to ensure proper rule key inclusion in build caching.
Refactored PIN timeout logic with constant to improve code clarity and maintainability.
Added isSampled() method override to always return true for consistent exemplar sampling
Removed @Ignore annotations from tests requiring MongoDB server to enable execution
Refactored assertions and logging format for clarity and removed unnecessary cast to ActiveMQConnection
Updated condition to use `isArtificial()` instead of checking name prefix for improved clarity and logic.
Refactored file type checks to use isDir() for consistency and improved readability.
Refactored MongoSessionManager to handle null or empty attributes more robustly and ensure session consistency.
Replaced setFixedSize with setSizeFromLayout to adapt surface size dynamically.
Refactored `_stopping` usage to avoid potential race conditions with local variable assignment
Fixed incorrect method parameter formatting in HuobiStreamingService constructor.
Replaced StopWatch with timestamp-based calculation to improve efficiency and avoid unnecessary object creation.
Refactored error handling in DelayedMonoPublisherTest to consolidate logic within subscribe callback.
Replaced assertTrue with explicit failure logic to improve test readability and error debugging.
Refactored AllAppsTransitionController to implement OnLayoutChangeListener for cleaner layout change handling
Refactored variable naming for consistency and readability across authentication and monitoring components.
Added support for setting a default output channel in XPathRouterParser and updated tests to validate functionality.
Refactored cacheSeconds to use DurationCapable for improved configurability and consistency with CAS standards.
Updated OpenAPI version from 3.0.0-rc1 to 3.0.0 across multiple classes for compliance with the latest OpenAPI specification.
Changed append call to prevent unintended behavior when buffer is null
Added check for alt-rt.jar in sun.boot.class.path to skip tests and prevent potential issues.
Standardized user data by normalizing email addresses to uppercase and updating test assertions for consistency and accuracy.
Refactored FlightRecorderProfiler to use ArrayList for better flexibility and added JVM version checks for diagnostic options.
Added null check using isStreamEmpty() to prevent imageDropHappened call with null stream data.
Enhanced `HttpParser` to handle content view validation and added a test for chunked PUT requests in `ProxyServletTest`.
Fixed potential NPE in AtmosEndpoint by adding null check for response objects
Extended method name checks to include "printf" and "print" in Java2TypeScriptAdapter.
Added a test to validate metaspace capacity handling on 32-bit platforms to prevent wrap-around issues.
Removed empty package-info.java file to clean up unused code.
Removed redundant timestamp check to simplify time calculation logic.
Added test case to validate error handler advice with interceptSendToEndpoint logic for "foo" and "error" routes.
Replaced string concatenation with String.format in ICC profile warnings to enhance clarity and prevent formatting errors.
Refactored item models and behaviors: fixed reequip animation logic, updated sea level check, and replaced mutable lists with ImmutableList for thread safety.
Added checks to ignore Environment and Config types during bean registration to prevent unintended bindings.
Replaced custom CreateLoaderRule with addObjectCreate to simplify loader creation and improve maintainability.
Added logic to load and process additional nameupdater properties files to enhance nameMap initialization.
Set `started` to `true` to ensure the EllipsoidRegionSelector is always initialized properly.
Refactored URL handling to use default protocol and introduced fallback mechanism for secure connections.
Added validation for SortBy attributes in GetFeature to prevent illegal property names and ensure compliance with WFS specifications.
Fixed incorrect null comparison in grantor assignment to ensure proper null handling
Replaced pixel-by-pixel comparison with GraphicsConfiguration-based compatible image to improve rendering accuracy and handle transparency.
Added null check for sidedDelegate to provide clearer error messages and prevent improper FML installation issues.
Refactored DataUtilities and ReTypeFeatureReader for improved readability and maintainability.
Refactored LockTest to improve timeout accuracy and replace assertions with assertTrueEventually for better reliability
Added utility methods for whole-word tokenization and token joining in StringUtil class
Refactored error handling to use sendError method for consistent response behavior and simplified return logic
Refactored command parsing logic to improve robustness and prevent errors with empty or invalid commands.
Updated version and version date constants to reflect pending development status.
Fixed incorrect buffer position calculation by including dimension size in the index.
Added support for querying drag-and-drop readiness in System UI and updated related tests and services.
Added test case for socket traffic class validation, restricted to Java 7 using Assume.
Added support for PSK-AES256-GCM-SHA384 with TLSv1.2 in TestCipher.
Updated NearbyMapFragment to use getLongDescription() for setting description text
Add @JsonProperty annotation to map "value" field in ScimGroupMember
Refactored HqlQueryRenderer to handle reserved words with tokenization and updated tests for schema-scoped function names
Fixed incorrect error message in ObjectHelper.requireNonNull call.
Refactored Parser to improve readability and maintainability by simplifying method logic
Added `indexStartsAtOne` parameter to `offsetStreamIndex` for flexibility in handling one-based indexing and updated related calls for consistency.
Fixed byte order in MagicDetector and added assertTypeByData test for "application/x-cpio" in TestMimeTypes.
Removed overridden getMonotonicity method as it is no longer required.
Added equals, hashCode, and toString methods to OneTimeTokenAccount using Apache Commons Lang for better object comparison and debugging, and implemented TABLE_PER_CLASS inheritance strategy for OneTimeTokenAccount and OneTimeToken.
Prevent unintended fling gesture by checking if Assistant is already launched
Add Solaris-specific handling for short DSA keys to address platform-specific edge case.
Added toggleSearchLabel call to ensure consistent search label state initialization
Improved volume locking mechanism to prevent race conditions and added null checks to handle snapshot creation failures gracefully.
Refactored ServiceConnection implementation for better encapsulation and null safety.
Updated HttpClientTLSTest to use AtomicReference for better exception handling and verify SSLPeerUnverifiedException type.
Refactored equals method to remove unused code and improve clarity.
Added null check for `v` to log errors and prevent crashes during item binding.
Replaced static initial metadata group ID with dynamic retrieval to improve test flexibility and reduce hardcoded dependencies.
Refactored cache shrinking logic to improve clarity and added timing log for better performance monitoring
Updated API to v3, improved account handling, enhanced order processing, and refined JSON properties for better data structure and compatibility.
Added an empty() method to check if the size is zero for improved code readability.
Added null safety in AsyncPageReader using Optional, annotated tests with DRILL-8023 and DRILL-8416, and added test for empty dictionary pages in TestDrillParquetReader.
Refactored SerumStreamingService to validate market data type and enhance subscription handling.
Added configuration option to toggle charging animation for mana pools
Enhanced error handling and logging in AeronCluster to improve connection retry mechanism and ensure stability during timeouts.
Added logging for InterruptedException to improve error visibility and debugging.
Refactored tests to use assumeTrue for conditional filesystem support checks, simplifying logic and improving readability.
Reordered style injection calls to ensure consistent application of dialog and screen styles.
Replaced `String` with `FileResource` for file handling to improve type safety and ensure proper resource management.
Refactored equality check to use getter methods for consistency with encapsulation principles.
Refactored CacheEntry class to enforce immutability and removed redundant TODO comments regarding null value handling
Replaced direct addition of singleElement result with a quoted regex to ensure proper literal handling.
Improved cache handling by validating KRB5CCNAME format and enforcing args validation for cache initialization
Updated `dbPath` to correct test output directory for `ValidateMultiSignContractTest`.
Refactored peer sufficiency logic to centralize checks in Synchronizer, improving maintainability and accuracy.
Refactored sessionLogHandler attachment logic to improve thread safety and maintain consistency.
Prevented expansion of "AreEqual" expressions for GeoSegments to maintain intended formatting.
Added logic to clear pending rendering operations when exceeding 20000 items and view is minimized to prevent potential memory issues.
Refactored loop condition to improve deadline handling and avoid unnecessary sleep operations.
Optimized write-behind queue by updating existing entries to reduce redundant operations and improve concurrency.
Set icon to null in GroupTreeCellRenderer to optimize space usage.
Renamed test methods and updated strict match setting for clarity in redirect match behavior testing.
Refactored ShutdownMonitor and ShutdownMonitorTest to improve test structure, add new test cases, and handle serverSocket closing with IO utilities.
Refactored chunk fill rate calculation to improve idle handling and adjust write limits
Refactored field caching and exception messages for improved clarity and maintainability in serialization logic
Refactored ComponentClosingUtils to enhance timeout handling and improve thread management within the runtime package
Improved error handling and cleanup: Fixed typo in exception message for snapshot creation and added volume deletion logic in VM error state.
Corrected method call to use `vlan.getIp6Cidr()` instead of `vlanIp6Cidr` for consistency and accuracy in IPv6 range calculation.
Refactored bean manager configuration to improve naming consistency and streamline authentication provider setup.
Increased timeout in getLeaderRetry to 30000ms to improve reliability in leader retrieval for halfdeletedcollection2.
Refactored error message methods to remove input parameter for consistency and added logging for invalid inputs
Fixed incorrect image positioning by flipping x and y coordinates in drawImage calls
Fixed incorrect comparison of field names between solrDocument1 and solrDocument2.
Refactored high-cardinality dimension check into a helper method to improve readability and handle null/empty cases safely.
Added exception cause to StreamTaskException to improve error traceability
Refactored hashtag expansion logic for clarity and added comprehensive test cases for validation.
Refactored read method in MessagePack.java to improve code readability and maintainability
Added @Mapper annotation to define a marker interface for MyBatis mappers with an optional value attribute.
Added support for conditional FHIR comments in JsonParser and added test to ensure empty extension lists are not encoded.
Fixed group splitting regex to handle escaped dots and updated extractPacked logic to handle null child cases and external meta entries.
Added alias for "node_popup_scripting" to improve navigation consistency.
Refactored focus handling and animation logic in RecentsView for better tablet compatibility and smoother UI transitions.
Refactored JmsProducer to use type-safe getOut method for improved readability and safety.
Removed redundant `throws IOException` declarations in test methods and improved formatting consistency across multiple files.
Removed deprecated classes `AbstractDelegatedVerb` and `FailureContext` to clean up unused code.
Refactored static string fields to be constants and added MicroServlet for better gzip handling and test coverage.
Refactored OnSubscribeRedo to use BackpressureUtils for safer request handling; added comprehensive test for repeat and distinct logic in OperatorRepeatTest.
Added logging for component lifecycle management and fixed string concatenation issues in SpeedmentImpl
Added LoadDSpaceOAIConfig servlet to initialize and load DSpace configuration on startup
Refactored StoreScanner and TestWideScanner for improved null handling, batch processing, and test accuracy.
Added JMX toggle methods in tests to control JMX usage dynamically.
Refactored package separator handling using a constant to improve code clarity and maintainability.
Added support for retrieving and printing YARN application details and kill commands for Spark jobs.
Extended database support by adding a check for "maria" in DbConnectionManager.
Refactored logging messages for clarity and fixed incorrect time calculation logic.
Added `ExecuteAndReturnStringTest` to demonstrate browser component usage and user agent retrieval
Added InvokespecialInterface to demonstrate invokespecial, invokeinterface, and invokedynamic usage with functional interfaces and default methods
Fixed potential IndexOutOfBoundsException by adding bounds check in EvictingBoundedList operations
Refactored traversal mode initialization and encoding manager setup for better turn costs support handling
Added null check for backgroundDisabled style and validation for non-negative selection values in SelectBox.
Added null check for method descriptor in RpcServer to handle unsupported operations.
Refactored hotseat cell size and icon center calculation to improve code readability and maintainability.
Simplified partition value extraction logic by replacing complex string operations with direct values access.
Added version checks for serialization to ensure compatibility with Hazelcast 4.1+
Updated directory retrieval method to use getNewIndexDir for consistency with updated index directory management.
Fixed logical condition in `equal` assignment to ensure accurate comparison in `isDisplayModeEqual`.
Added support for high codepoint Unicode characters in UnicodeToLatexFormatter and updated test cases for coverage.
Handled ISO control characters in string values to prevent invalid metadata processing.
Enhanced frame handling logic to prevent incorrect selections and added null/empty value checks for robustness.
Enhanced UI components: added border to plugInPanel, improved bookmark validation, and updated tbClearButton with new actions and icon.
Replaced manual URL construction with UrlUtils to simplify code and ensure consistency.
Refactored SoftAssertionsTest to use AssertJ's parseDatetime for better date handling and improved error message clarity.
Refactored order adaptation to support reverse processing and optimized data structure for performance improvement.
Handle null or invalid `vartype` in PrettyPrinter and add Java11Var class to demonstrate `var` usage.
Refactored imports and adjusted sendKeys call to improve code clarity and null handling.
Set Hadoop Configuration instance to non-default values to avoid unnecessary property overrides in Hive.
Replaced drawChildren with draw to improve rendering consistency.
Added test to verify file split streaming with choice routing logic
Replaced direct system property access with `getCatalinaBase()` for better encapsulation and configurability.
Added support for locale-specific patterns in getBestDateTimePattern for "jmm" skeleton
Expanded default color mapping and updated style information for consistency with Minecraft and PlotSquared color codes.
Added ZuulProperties dependency to TraceRestClientRibbonCommandFactory and TraceZuulAutoConfiguration for enhanced configuration handling.
Set default timezone to UTC in FontParsersTest to ensure consistent metadata date assertions
Refactored BuildInfoMojo to include configurable build time and added SampleApplication as a new entry point.
Fixed incorrect distance calculation by adding Math.abs to ensure a positive value
Removed deprecated GUIRWTester utility class as it is no longer in use or relevant to the project.
Removed null checks and @NullableDecl annotations from LazyMessage and related methods to enforce non-null template handling.
Formatted error message to include the invalid value for better debugging.
Refactored Thymeleaf template parsing structure to improve modularity and support for markup-based parsing
Updated XPathTest to handle attributes in XPath expressions and improve test coverage.
Added @Nullable annotation to improve null safety in FutureUtils.
Added handling for DynamicInvokeExpr in OnFlyCallGraphBuilder to log unresolved InvokeDynamic during call-graph construction.
Updated test email addresses to use example.com domain for better compliance with standards
Updated HttpConnectionTest to reflect correct response code and simplified URIUtil comparison logic.
Added getColumnDataType method to ResultSet and its implementations to standardize column data type retrieval.
Replaced abstract methods with default implementations throwing UnsupportedOperationException to improve interface usability and prevent null returns.
Fixed potential issue by removing null checks from HSSFPictureData to streamline processing logic.
Refactored time tracking to use java.time.Instant and Duration for improved readability and precision
Added version parsing for MediaInfoLib and conditional option settings based on version.
Removed reflective proxy creation for IdeaDependency to simplify code and improve maintainability.
Added support for SerialHeap by introducing SerialHeap class and updating heap mappings
Added @SuppressWarnings("serial") annotations to suppress serialization warnings in Gson.Types class.
Refactored mouse event handling to use explicit mouse position, improving accuracy and flexibility.
Handle null values in query parameters and add test for case-insensitive null firstname search.
Added MultisetTypeInfo class and corresponding test to support type information for multisets in Flink
Added validation for issuer uniqueness and existence in `retrieveByIssuer` with corresponding test cases.
Enhanced CMapParser to handle delimiters and digits, ensuring proper parsing and adding test coverage for edge cases with poor whitespace.
Refactored ContactsBackupJob to use OperationsServiceConnection for improved service binding and operation queuing
Enhanced type inference handling for nested generics and constraint checking to improve type compatibility and error diagnostics.
Added support for checking and handling config-hidden accounts in AccountID and ProtocolProviderFactory
Added logging for inconsistent display bounds to aid debugging of mismatched display configurations.
Refactored schema key removal logic and added unit test for schema removal and validation
Refactored passive login logic to use listeners for improved code maintainability and readability.
Added Box2D test integration for Android platform and updated test suite to include Box2D functionality.
Refactored logging and null-handling for improved debug clarity and safer operations
Increased DEFAULT_BUFFER_REQUEST_TIMEOUT from 5ms to 5min to address buffer request timeout issues in hybrid shuffle configuration.
Added generator header to SpeechSettings with default name and version for consistent metadata handling
Added help button with action listener for OpenOffice integration documentation.
Updated Netty channel configuration to use `childOption` for TCP_NODELAY, aligning with child channel settings and improving clarity.
Refactored method signatures and removed unused imports to improve type safety and maintainability
Refactored class loading logic to cache class reference and suppress unchecked warnings
Refactored exception handling in DecodeServlet for improved readability and resilience to IO errors.
Added conversion method for NullHandling to Querydsl and introduced integration tests to ensure correct null ordering behavior
Added null checks for actor in ParallelAction and SequenceAction to prevent potential runtime exceptions
Fixed string concatenation errors and improved code readability in CtTypeTest.
Added synchronization to sfWriters operations to ensure thread safety during closure and cleanup
Added tests for interface default method overrides in `Issue888_JavaI` to ensure consistent behavior across implementations.
Added logic to revoke agent certificates and corresponding unit tests for validation.
Added handling for responses with no body to prevent incorrect header inclusion in HTTP/1.1 responses
Refactored script processing logic to improve error handling and support for ScriptEngine in Java 6+
Added support for HikariCP as a connection pooling option and improved exception handling in TestTxnHandlerNegative.
Replaced mDevice.pressHome() with mLauncher.pressHome() for consistency and improved test clarity.
Added file lock and unlock operations with UI integration and remote synchronization
Updated Version.java to enhance clarity and maintain consistency in formatting.
Clear endpoint cache after updating keyspace to ensure accurate replication strategy behavior.
Refactored state-waiting logic to improve readability and ensure consistent synchronization behavior.
Refactored SkylarkDescription to utilize SkylarkRuleContextAttr for enhanced attribute handling and dependency management
Refactored LocalStorage and SessionStorage to extend common Storage interface for better code reusability and maintainability.
Added null check for existing view in PlanExecutor and optimized test assertions with Collections.singletonList.
Replaced Exception with Throwable to handle all errors and updated error message formatting for consistency.
Updated query initialization in SpellCheckComponent to use rb.getQueryString() with fallback to prevent null values.
Added validation to header key and value to prevent illegal characters and enforce CRLF format compliance.
Refactored layout offset calculation to use arrayBaseOffset, improving alignment and storage consistency
Refactored comment container hierarchy to use AbstractApexCommentContainerNode for improved type safety and added @Experimental annotation
Added logging for `fetch = "join"` with `lazy = true` combinations to warn about potential misinterpretations.
Refactored filters to extend AbstractSpecFilter and added @Override annotations for consistency and clarity.
Added assertions for database and table name in TestCompactionTxnHandler, and set values in TxnHandler for consistency.
Added Suspendable interface to TimerConsumer and introduced TimerGracefulShutdownTest to ensure graceful shutdown behavior
Avoided redundant trace creation by adding a processed check for blocks.
Replaced manual null check with CollectionUtils.contains and added tests to ensure null elements in providers are handled appropriately.
Simplified PostgresDatabase check by removing unnecessary version validation logic.
Added support for local index row limits to improve query performance and accuracy with server-side enforcement.
Added validation to prevent adding collections with conflicting types to maintain data integrity.
Refactored cursor boundary checks and position adjustments for consistency and to fix potential screen overflow issues.
Removed unused constant USE_RETRIES to clean up the codebase.
Updated regex in VERSION_NUMBER to allow multiple patch components and added test case for extended version format parsing.
Added check to skip execution when no input gates are available
Added a missing test method annotation to enable proper test execution
Added null check for properties to prevent potential NPE when accessing keys
Refactored IOException initialization to preserve original cause for improved error handling
Updated error message to reflect failure during stack upgrade instead of rolling upgrade for improved clarity.
Refactored TxConfidenceListener initialization to avoid redundant object creation and ensure proper removal on updates
Added constant for "G1 Perm Gen" and updated equality check logic to improve code clarity
Refactored NearbyController imports and removed unused methods for improved readability and maintainability.
Made `PDFCloneUtility` public and added generic typing with suppress warnings to enhance type safety and avoid unchecked cast warnings.
Added check to exclude home activity type in task matching logic to improve gesture handling reliability
Renamed and refactored DefaultEdgeClientFilter to EdgeAddHeaderClientFilter to improve clarity and align with updated configuration keys and initialization logic.
Ensure country ISO codes are returned in lowercase to standardize output and improve consistency.
Replaced direct call to setUnfreezeAmount with updated logic to improve error handling.
Updated penalty descriptions to reflect "per match" instead of "per minute" for consistency with domain terminology.
Replaced `Files.copy` with `FileUtils.copyDirectory` for improved readability and to handle directory copying correctly.
Refactored assertion classes to improve code consistency and maintainability across AbstractListAssert, AbstractUriAssert, AbstractUrlAssert, and ArraySortedAssert.
Fixed potential NullPointerException by adding a null check in Observable class.
Refactored pushAll operations to use addMultiFieldOperation for improved readability and added tests for multi-field updates.
Ensure UUID is reused to prevent unnecessary object creation in hubChangeLog ID assignment.
Added support for handling hover events in InputConsumer and its proxies for enhanced motion event processing.
Added conditional sleep during ZK server initialization to prevent race conditions when bootstrap configuration is disabled.
Standardized naming of maxHeaderSize field and updated related methods for consistency and clarity.
Increased HBASE_CLIENT_RETRIES_NUMBER to improve fault tolerance during testing.
Refactored file path construction to improve compatibility across different operating systems
Refactored graph caching test to improve reliability and ensure compiler and cache validity.
Updated query commands and configurations to enhance test coverage and support additional schema operations.
Adapted Kraken asset codes to currencies map to include scale metadata for accurate representation.
Added toString() implementation in AnyOf and corresponding test to display inner conditions' descriptions
Refactored variable usage to improve readability and prevent potential issues with dimension handling in email subject creation.
Enhanced validation for InfluxDB settings and improved logging for missing measurements or database configurations.
Refactored transformation methods to improve clarity and consistency; added null handling and enhanced error messages in tests.
Enhanced IP address filtering by adding checks for site-local and unique-local addresses to improve network utility robustness.
Added quoting for column names in row headers to ensure compatibility with reserved keywords
Refactored utility methods for property management, enhanced string handling with optional parameters, and improved method name resolution with annotation support.
Added constructor to UpdateRequest class to initialize with POST method and URL.
Replaced static nested enum declaration with standard enum declaration for consistency and improved readability.
Removed addExperimentalFormatWarning method and its usages to eliminate unnecessary warnings in response output.
Improved logging of module names by formatting values for better readability and handling multiple entries.
Refactored row height calculations to dynamically use default label font size for consistent UI scaling.
Refactored null-check logic and replaced manual default value handling with Optional to improve readability and maintainability in DefaultBrokerHeartbeatManager.
Refactored partition size calculation logic to handle null rows and ensure splitCount initialization
Simplified condition in JUnit test rule to remove redundant null checks.
Added equals and hashCode methods to RuleTerminalNodeLeftTuple for proper comparison and hashing based on rule names.
Added StageIDsRearranger to optimize stage ID arrangement based on configuration settings
Updated ObjectName in MBean registration to reflect the correct namespace and type for MessagingService.
Refactored memory usage check and added detailed logging to improve debugging and clarity.
Refactored imports and updated TaxonomyFacets to public abstract class; added hashCode override in LabelAndValue for consistency.
Refactored LDAP configuration to enhance readability, ensure proper anonymous read-only handling, and improve test clarity.
Fixed potential NPE by adding null check for DatabaseMetaData references.
Changed EchoInputDoFn class from public to private for encapsulation and clarity.
Added finishMocking method to handle validation logic and reset state after tests
Refactored dependency handling in GoTestDescription and added integration tests for genrule-based sources in GoTestIntegrationTest
Refactored buffer and handler management for improved clarity and separation of read/write operations in SPDYAsyncConnection.
Updated BlockLiquid initialization to use getFlowingBlock for consistent liquid flow behavior
Refactored intent data handling to use URI for background location listener, improving parameter parsing and null safety.
Fixed potential NPE in AprEndpoint by adding null check for socket references.
Added support for generating JSON plans for StreamingPlan in addition to OptimizedPlan.
Optimized bitwise operations and replaced manual map initialization with computeIfAbsent for improved readability and efficiency.
Refactored test assertions and utility methods for improved clarity, error handling, and consistency across test scenarios.
Simplified newline handling logic to improve code readability and maintainability.
Added regex pattern to filter lines containing "pg_temp" for improved data handling.
Updated ProtoRestSerializer calls to include explicit disable compression flag in toBody method.
Enhanced handling of INTERVAL, NCLOB, and NVARCHAR data types for improved compatibility and accurate type resolution.
Added conditional checks to prevent unnecessary histogram publishing in Wavefront metrics
Enhanced Spring Cloud service registration to include upstream warmup and timestamp fields for better load balancing.
Added overloaded registerListener method with maxLatency parameter to support extended functionality.
Added exception handling for SocketException in test methods to log warnings and improve resilience
Refactored IgniteComponent close logic for null safety; adjusted logging scope in AbstractFeatureTest; updated CamelIgniteTest with version info and feature installation logic.
Improved logging for empty result sets and updated resultSet iteration logic to prevent errors.
Updated exception handling in PDFDebugger to replace IOException with UnsupportedFlavorException and general Exception, ensuring broader error coverage.
Added support for setting HDR capabilities on ShadowDisplay with validation for Android version constraints
Set `classLoader` to null in the `finally` block to ensure proper resource cleanup.
Improved error messages and added logging for better debugging of bloom filter entry validation.
Added a default constructor to the Message class to support instantiation without parameters.
Adjusted bug priority calculation based on GUI class detection and serializability to enhance reporting accuracy.
Enhanced precision and scale enforcement for PhoenixDecimalObjectInspector to ensure compatibility with DecimalTypeInfo.
Updated compression logic to handle committed responses gracefully and replaced GZIPOutputStream with a generic OutputStream to improve flexibility.
Refactored method parameters and variable names for clarity and consistency in authentication handling.
Simplified conditional checks by removing unnecessary path validations in DCD.java.
Refactored thread group name retrieval to handle null ThreadGroup and prevent NPE
Added logging for denied access cases and improved null checks in MethodInvocationPrivilegeEvaluator
Moved DmozParser to tools package and updated logger namespace accordingly
Removed unused Lombok @ToString annotation to improve code clarity and maintainability
Added handling for ISO volumes during migration to ensure proper disk attachment and prevent errors.
Refactored signal handling to remove dependency on `SignalHandler`, simplifying error management and improving test clarity.
Replaced static imports with class references for ArrayUtils to improve readability and maintain consistency.
Refactored AxonAutoConfigurationWithSpringCloudTest to use SpringBootTest and EnableAutoConfiguration for improved compatibility and simplified configuration.
Added method overrides and interpolation logic for transforming ColorRGBA.
Removed resetInitializedPlanningEntities logic and deprecated uninitialize methods to simplify codebase and reduce maintenance overhead.
Added build time metadata to ArtifactInfo and cache interfaces for enhanced tracking of artifact lifecycle timings.
Refactored field iteration logic and condition handling in GroupByOperator to improve clarity and ensure compatibility with declared fields.
Added null checks for block parameter to prevent potential null pointer exceptions.
Added support for CNC_BTC currency pair, including Chinacoin (CNC) constant and updates to TickerDemo usage.
Standardized skew allowance handling across SAML components to improve configuration flexibility and ensure consistent behavior.
Added `SortName` as a fallback sorting option for better consistency in song queries.
Removed unused `readBodyToBytesIfNecessary` method and related imports to clean up codebase.
Refactored block classes to extend LegacyBaseBlockWrapper for improved NBT handling and deprecated base class compatibility.
Refactored tag validation logic to handle null SnapshotRef and added tests for non-existent tags.
Replaced usage of newArrayList with Collections.singletonList for better readability and reduced dependency.
Refactored SSBO binding logic to use dynamic resource indices and removed deprecated ray bounce count handling
Enhanced validation for requirePasswordChange property and added logging for unsupported operations on external IDPs.
Removed entries in notInitializedInConstructors matching assumeReflective to ensure proper cleanup.
Handled null or closed connection case for JDBC URL to prevent runtime exceptions in error messages.
Added testRequiredBody method to validate REST template responses for microservice endpoints.
Updated regex patterns for user and password placeholders to align with the correct format.
Added "Item4" to menuItems and implemented keybinding for META+ENTER.
Improved logging and assertions in TestCoreParser to enhance test clarity and result validation.
Swapped equality checks between `id` and `children` in `SimpleNode` for correct comparison logic.
Changed class visibility from public to package-private for better encapsulation
Refactored document counting logic in MoreLikeThis to handle field-specific counts and added unit test for corpus sampling.
Refactored QuestManager to improve readability by formatting lambda expressions in GameData key iteration
Extended TestLogger in NetworkBufferPoolTest and made TestIOException static for better logging and accessibility.
Refactored query to use a single append call for expiry range to improve readability and maintainability.
Added MacroSubstitution for unsafeGetLong to enable customized macro handling and improve performance.
Updated timezone for "Asia/Amman" from ARAST to EET to reflect current regional standards.
Updated id from 90000010 to 90000011 to ensure consistency with the latest deprecation logging standards.
Handle JDBCException in SessionImpl to ensure proper transaction rollback behavior
Improved suffix handling logic to prevent errors and ensure proper file naming.
Added macOS-specific menu bar behavior in updateUI to enhance compatibility.
Added piecewise integration tests for various functions to ensure correctness of integral calculations
Refactored `switchToScreenshot` method and `STATE_SCREENSHOT_CAPTURED` constant to `protected` for better extensibility and overridden logic in `FallbackSwipeHandler`.
Added whitelist validation and corresponding test for modifiable Hive configuration parameters.
Fixed potential issue with invalidClasses map by removing redundant put operation
Updated target selection to use player's current team instead of a fixed team constant.
Replaced hardcoded domain with dynamic value from domainHelper to improve flexibility and maintainability.
Refactored nullable validation logic to handle search conditions and prevent incorrect constraint enforcement.
Refactored SecurityTokenService components for improved maintainability and consistency across credential handling and token processing.
Refactored CompositeIdRouter for null safety and immutability; added robust Solr test cases to validate shard routing logic.
Added support for PostgreSQL BLOB handling with snapshot-based type detection and integration test coverage.
Improved caching conditions and log readability in DefaultServlet for better performance and maintainability.
Added drag-and-drop support for importing BibTeX files and entries across tabs, enhancing user workflow and interaction.
Refactored description creation and test assertions to enhance clarity and ensure compatibility with updated Cucumber API.
Refactored null/empty checks to use StringUtils for better readability and consistency
Changed method visibility in TimeUtils from public to package-private for encapsulation and updated TimeUtilsTest package for consistency.
Refactored class name checks to improve clarity and compatibility with JDK 18+
Fixed file extension matching in PreviewImageFragment to ensure proper handling of ".jpg" and ".jpeg" files.
Handle HostedMethod instances in NativeImageDebugInfoProvider to ensure proper type resolution.
Added icon support for menu items in Node and Edge data tables with default node display and refresh/clear functionalities.
Handle edge case where request name has no dot by checking lastIndexOf before substring operation.
Enhanced FindAndReplace to properly escape dollar signs when regex is disabled, and added corresponding test coverage.
Refactored connection handling in SmackPacketDebugger to support both XMPP and generic Connection interfaces, added null checks for socket operations.
Improved schema extraction logic to handle edge cases and enhance robustness.
Refactored directory copy logic into reusable IO.copyDir method to improve maintainability and reduce code duplication.
Added exception handling in JacksonUtils for unknown datum class to improve error clarity
Refactored ABI resolution to use requireRule for consistency and improved dependency handling.
Refactored height calculation logic by removing redundant padding adjustments for better maintainability and readability
Normalized database and table names using HiveStringUtils to ensure consistent identifier formatting.
Refactored schema handling to support Oracle databases and ensure proper schema resolution
Removed redundant logout call as session management is handled internally
Updated MockStreamingRuntimeContext initialization to use consistent parallelism and task indices across tests for better alignment with runtime expectations.
Added null check for candidates in FastImportAction to prevent potential NullPointerException.
Refactored bean management logic in ContainerLifeCycle to improve readability and updated tests for accurate lifecycle state assertions.
Renamed IExecutionAttributesDialect to IExecutionAttributeDialect for consistency and updated all related references.
Cleared unsafe metadata to enhance data integrity and prevent potential vulnerabilities.
Handle potential null `loc` to prevent NullPointerException during date string construction.
Added null checks for measurements and introduced DisruptorQueueExceptionHandler to improve stability and error handling.
Deleted unused Session2Token class to clean up codebase.
Added logging and cleanup logic for failed destination volume creation to improve error handling and resource management.
Added "Install" shortcut to SystemShortcut for enabling instant app installation via web UI or Play Store links.
Added NullAuthoritiesPopulator to handle cases where no authorities populator is provided, ensuring default behavior without null exceptions.
Added fallback mechanism for retrolambda jar resolution and warning for missing dependencies.
Replaced buildOrThrow() with build() to simplify exception handling.
Refactored sortLiveDocs to use codec's liveDocsFormat for better efficiency and null safety
Added null result handling in JMESPathExtractor to ensure default values are used when matches are absent
Refactored imports and added null check for user authorities to prevent potential NullPointerException
Refactored tests and configurations for consistency, improved import handling, and added annotations and dependencies for enhanced modularity.
Corrected typo in exception message to fix "VGU" to "vGPU" in VMSnapshotManagerImpl.
Enhanced `Config` merging logic to include class, subclass, and method-level annotations; optimized shadow list with `HashSet` for improved efficiency; added comprehensive test coverage.
Switched from SelectChannelConnector to SocketConnector for improved compatibility with blocking I/O.
Refactored partition key equality check to ensure partial key matching and added tests for altering partition key attributes.
Added a feature flag to enable or disable the icon display in the text header.
Fixed missing closing parenthesis in conditional statement to ensure proper evaluation of isComponentActive logic.
Refactored deployment and undeployment logic to use non-blocking Completable callbacks and improved error handling for SerializedExecutor tasks.
Integrated WorkspaceListener in PreviewControllerImpl to dynamically update graph building logic based on workspace selection.
Enhanced checks to prevent inflation for VM anonymous classes and optimized class name parsing.
Fixed potential NPE in TransportHelper by ensuring null-safe operations
Removed redundant slashes from file URI generation for improved compatibility.
Reordered startup sequence to ensure ActionManager initialization is logged separately for better debugging clarity.
Fixed null checks and assertions in JSONWriter to handle forNode initialization and modification safely, and corrected postfix case handling.
Refactored HDFS client handling to improve configurability, ensure proper user context, and fix potential resource leaks.
Added a check to ensure backgroundManager is not already attached before attaching it to prevent redundant operations.
Fixed tab initialization and layout adjustments for consistent UI behavior and handling of edge cases.
Added validation for null URLs in BaseDataSource and test case to verify exception for invalid Postgres URL.
Refactored code formatting for better readability and added JRE-specific test annotation to support multiple Java versions.
Added EditNameDialog for directory creation to enhance UX and ensure user input validation.
Added action to toggle bar border width for bar chart activities
Updated API and WebSocket URIs to reflect migration from OkCoin to OkEx.
Refactored tests to remove FIXME tags and reuse createStepScope method for consistent StepScope initialization
Refactored file handling to use SeekableByteChannel for improved compatibility and updated test to validate byte array consistency.
Refactored flattening logic to support FieldReference for improved flexibility and readability.
Refactored MockHandler to MockHandlerImpl for improved clarity and consistency in naming convention
Refactored proxy configuration parsing to handle conditional presence of PROXY_SERIALIZATION_TYPES_KEY
Added heap limit monitoring for debug devices to aid memory usage analysis.
Refactored lambda expressions to store mapper results in a variable, improving readability and preventing redundant computations.
Refactored exception handling logic to ensure conditional rethrow based on result status
Refactored PrecompactedRow to ensure proper handling of deletion info serialization and streamline exception handling
Refined bitmasking logic for rendering intent and header parsing; added tests for invalid render intent handling.
Added MeterRegistryLifecycle to manage MeterRegistry lifecycle and ensure proper closure on shutdown
Changed log level from WARN to INFO for missing config center items.
Added test cases to validate CertificateFactory behavior with invalid input streams
Added binary token handling in SimpleTokenizer and a test for ambiguous binary operator in SimpleParserPredicateTest
Refactored tab unselect logic to ensure proper window dismissal on focus loss.
Added username to accessLogValve openFail message for better debugging context.
Adjusted model file path, scaling factor, submesh name parsing, and animation time for improved rendering accuracy and robustness.
Removed unnecessary InterruptedException from createOrThrow method signature.
Added @Deprecated annotations to mark UpgradeResponse for deprecation
Added support for generating and specifying output directory for TypeScript declaration files (`.d.ts`).
Added Kinesis-specific fetch timeout logic and corresponding unit test.
Append `.html` extension to the timestamp to ensure proper file naming in streaming dataflow.
Reduced default value for METASTORESERVERMAXTHREADS to 1000 to optimize resource usage and prevent potential performance issues.
Changed return type of onTaskSnapshotChanged to boolean and added return value to indicate successful execution
Updated shadow radius parameter to use dynamic value instead of fixed maximum.
Added test for chain nesting and aggregation with autowired message channel.
Fixed variable name from 'limit' to 'end' and added failure condition for improved test accuracy
Updated condition to check for interactive source instead of internal source.
Fixed logic error in conditional statement to correctly handle null previousCachedFilePath.
Added DisplayController instance to WindowManagerProxy initialization for enhanced display management.
Removed redundant tooltip logic for root directories in MetalFileChooserUI and SynthFileChooserUIImpl.
Replaced getToolkit() with Toolkit.getDefaultToolkit() for better clarity and standard usage.
Refined method signatures to specify return types for improved clarity and consistency in recognition operations.
Added utility methods for entity persistence and retrieval in tests, enhancing query-based test coverage for Cat entity.
Removed erroneous debug print statement and fixed logic to update dragIndex condition.
Updated `moeVersion` to 1.2.0 to align with the latest dependency requirements.
Fixed typo in error message and added gas expenditure operation to improve program behavior
Improved error message formatting by adding line breaks for better readability
Marked `Weights` class as deprecated to indicate planned removal or reduced support.
Refactored Unsafe plugin registration logic to simplify code and support platform-specific handling.
Added modularity hints and test for blacklisted modules' visibility constraints in Android app.
Set `mCenterPagesVertically` to false to align pages consistently with new layout requirements.
Fixed redundant re-addition of `doneProcessing()` method call in `MigrationRequestOperation`.
Refactored constants and updated codebase to use `baseUrl` instead of `moduleIpAddress` for consistency and improved readability
Refactored attribute handling in WSFederationClaimsReleasePolicy to support multi-valued attributes and updated tests accordingly
Refactored createTestTable and processQuery methods to support dynamic database selection and improve query handling.
Added test cases for complex nested CASE expressions to ensure correct parsing and deparsing
Refactored mouse input handling to initiate copy mode with primary button press.
Refactored XML output generation to use DOM API for improved structure and exception handling
Added null check for exchange in AbstractListAggregationStrategy and introduced a test for custom aggregation strategy with empty splits.
Refactored exception message creation logic to improve clarity and maintainability by consolidating into CamelExchangeException.
Updated package and import paths to use `ch.qos.logback.classic` for consistency and clarity.
Added check for PHI_NODE flag in targetVN to prevent unnecessary assertions.
Removed unused import of SharedStringSource from TestXSSFRichTextString.java
Added overloaded invokeMethod to streamline method invocation with default validation parameter.
Refactored dataset and statistical classes to improve code readability and maintainability
Migrated tests from JUnit 4 to JUnit 5 with ParameterizedTestExtension for improved test structure and functionality.
Refactored code to use safer equality checks and updated class modifiers for better static behavior.
Changed constructor and singleton visibility to private for encapsulation and improved access control
Refactored IfStatementTest to simplify graph structure verification and enhance test clarity
Replaced getPutOnlyTableHeaderRow with getTableHeaderRow to support broader table metadata handling
Refactored TypeAdapter to use instance method nullSafe() for improved readability and encapsulation
Updated expected collection size in test assertion from 12 to 13
Added EXIFReader to process image metadata and integrated it into ImageProcessingService for enhanced metadata handling.
Updated toStandardUnit method to return StandardUnit.NONE for unknown units, ensuring consistent handling of unrecognized values.
Ensure type compatibility of PMML parameter values during model application to prevent runtime errors.
Improved error message formatting to clarify repeated CounterCurrencyTransferStartedMessage scenarios.
Added a check to return early if BubbleBar is not visible to avoid unnecessary processing.
Handled BranchTargetOutOfBoundsException during code emission to ensure robust label processing and fallback recovery.
Ensured thread-safe initialization of JDKLogManager and added concurrency test to prevent NPE during parallel logging operations.
Refactored ticket catalog operations for improved readability, consistency, and streamlined ticket metadata handling.
Refactored SSL connection parameter handling for improved readability and maintainability.
Synchronized fileWriter initialization to ensure thread safety and prevent premature access during partition setup.
Updated Read and Write constructors to include default parameters for improved flexibility.
Enhanced PluginHandle functionality by adding 'type' and 'sort' attributes and updating query methods to support filtering by 'type'.
Ensure spans are explicitly started in DefaultSpanCreator and avoid redundant start calls in SleuthAdvisorConfig.
Refactored IOSGraphics to use IOSApplicationConfiguration for customizable drawable formats and buffer settings
Refactored login logic into reusable methods and added test to verify user account lockout after multiple failed login attempts.
Added checks for unsupported operations in `real()` and `complex()` methods to throw exceptions when handle is -1.
Refactored synchronization logic to handle null lockName and removed unnecessary interruption checks
Fixed method implementation in ShadowPicker to address incorrect behavior and ensure consistency
Refactored HTTP/2 client and server configurations for improved maintainability and enhanced customization options via dynamic properties.
Enhanced support for DynamicArray and improved type handling with better error checks and formatting in Solidity function wrappers.
Added default value handling for CSS property lookups to ensure fallback behavior
Added overloads for CopyStep constructor to support Path arguments and updated tests for validation.
Added publish call in RedissonSemaphore to notify on permit changes and added test for acquire behavior after adding permits
Refactored navigation and processor handling in tests to improve clarity and fix type casting issues.
Refactored flavor parsing into FlavorParser to improve code modularity and added unit tests for robust validation.
Refactored witness handling to use ByteString instead of String for improved encoding consistency and safety.
Added null check to prevent empty resultsMeta from being printed to System.err
Fixed potential memory leak in ConcurrentLinkedQueue by improving node removal logic and adding a test to verify behavior
Added support for `addSpecialTokens` parameter in encode and decode methods to enhance token customization options.
Optimized resourceProfiles initialization using Collections.nCopies to improve code readability and efficiency.
Refactored chunk data handling to ensure consistent data size updates and improve alignment.
Added session storage context to DuoSecurity flow actions for enhanced session management
Added schema validation test for JSP documents with namespace and root element assertions
Added constructors, clarified test annotations, and updated deprecation comments for Java 17 compatibility.
Refactored kill handling in Debugger and related classes to improve event dispatching and exception management.
Fixed path matching logic in AntPathRequestMatcher to handle trailing slashes correctly
Refactored createResourcePolicy method to simplify parameters and add override for improved usability and consistency
Added null check for `_deflaterEntry` to prevent `NullPointerException` and replaced broken test output with proper assertions.
Added @AfterEach annotation in ReactorCoreAutoConfigurationTests for post-test cleanup
Normalized input string with NFC and removed unknown unicode character 65533 to ensure consistent checksum computation.
Refactored command parsing and execution logic to improve readability and ensure null safety in command handling
Added @Override annotations for clarity and marked keyListener as final to enforce immutability.
Refactored MongoTemplate to use DBObject for JSON parsing and added tests to ensure correct handling of JSON strings.
Handle multiple remote addresses in X-Forwarded-For header by extracting the first IP to ensure accurate client IP retrieval.
Refactored getJobArgs to use ObjectBuilder for improved JSON handling and type safety
Replaced dynamic hostname resolution with static 'localhost' and added NO_PROXY for consistent and predictable network behavior.
Fixed glyph layout logic to correctly handle wrapped runs with all whitespace and adjusted test case text formatting.
Added pauseOrResumeSplits implementation to manage split state transitions in Pulsar readers.
Added support for setting script operator ID as an environment variable to enhance script execution context.
Refactored `getListedTermCounts` to support flexible sorting (index/count), improved efficiency using streams, and added unit tests for validation.
Added UseSeparateStepSizeAction to enable toggling Z-axis step size via menu item.
Refactored FileMenuFilter to improve file locking logic, enhance null safety, and optimize unlock filtering with user-specific checks.
Refactored region server split logic and updated string formatting for better readability and null safety
Standardized BraveHttpHeaders.Sampled values from "true/false" to "1/0" for consistency and updated related test cases.
Replaced manual resource closing with IOUtils.closeQuietly for better null safety and readability
Enhanced fullscreen handling and display mode updates, fixed FIXME placeholders, and added native methods for dynamic resolution and fullscreen support.
Refactored WebfingerIssuerService to use URI instead of String for resource normalization and caching, improving robustness and URI handling logic.
Added unit test for SoulApacheDubboClientConfiguration to verify DubboConfig properties.
Refactored file resolution logic to use `resolve(fileName)` for consistent path handling.
Updated log levels in ChainingAttributeReleasePolicy and OidcDefaultJsonWebKeystoreCacheLoader for improved clarity and debugging consistency.
Replaced lock() with lockInterruptibly() to allow thread interruption during PMS.REALTIME_LOCK operations.
Corrected package declaration formatting in Compiler.java
Added exception table handling for JSR subroutine branches to improve error detection and prevent false reporting.
Refactored DashRendererBuilder to use DefaultHttpDataSource and updated manifest handling methods for improved clarity and error management
Added configuration property to set max cached statements per connection in ExecutionScheduler.
Refactored `set` method to return `Configuration` instead of `WritableConfig` for consistency across implementations
Removed unused checkErr method to streamline error handling logic.
Fixed potential data inconsistency by correcting the implementation of CombinedDataset.
Replaced buffer variable "buf" with "b" for improved code clarity and consistency.
Added utility to remove cryptography restrictions and integrated checks for enhanced crypto library compatibility.
Added event cancellation check to prevent redundant Nether portal generation and teleportation.
Added test for verifying page margins with long text transformations
Added null check for vContext to avoid unnecessary reinitialization during vectorization setup
Converted speed to knots in WialonProtocolDecoder to align with maritime standards.
Changed default metric user configuration to false and added checks to ensure metrics are enabled before usage.
Added `isEmpty()` method to JsonObject with corresponding unit tests for validating behavior
Added mAttached flag to ensure unregisterReceiver is only called when the component is attached
Standardized logging for stream and socket operations across HTTP client/server to improve debug consistency.
Added support for additional parameters in zadd operation in PipelineBase.
Refactored code for clarity and consistency, including unused variable renaming, charset specification, logging removal, and redundant annotations cleanup.
Renamed TestAsyncMessages to TestAsyncMessagesPerformance and removed @Ignore annotation to improve test reliability.
Refactored target graph node handling to improve null safety and test parameter propagation.
Replaced static constants with inline literals for improved readability and maintainability.
Refactored EscherBlipRecord to use HEADER_SIZE constant; added TestOLE2Embedding for validating OLE2 embedding functionality in HSSF.
Fixed incorrect column initialization in JSONParser to align with expected data structure.
Refactored type matching to use regex patterns for improved flexibility and accuracy
Added support for trailer playback and adjusted thumbnail height for improved user experience.
Added removeGlyphInfoFromCache calls to ensure glyph info is cleared before freeing native pointers.
Refactored termination behavior to improve modularity and ensure proper recording of process instance end in history.
Handle empty or missing `xmlType.name()` by falling back to `XmlRootElement.name()` annotation when available.
Updated test endpoint URL in SimpleHttpClientTests to use a secure and valid example.
Added option to reset preferences to default values and handle BackingStoreException.
Refactored Thrift server components to enhance extensibility by increasing visibility of methods and fields.
Removed deprecated manual fan speed channel and associated handling logic.
Refactored assertions in TestEndpoint.java to use Hamcrest for improved readability and flexibility in test validation.
Fixed redundant null-check logic for expansionHelper in TweetActivity.
Added null-check for index in PartitionPanel and implemented equals/hashCode in PartitionFactory for proper object comparison.
Added default root disk size to custom parameters if not specified.
Refactored PredictionRowView to check user preference before setting visibility of suggested apps
Enhanced CRS handling in APIBBoxParser to improve robustness and added validation for invalid CRS inputs.
Added parameter validation for non-negative values, ivk bit constraints, and Merkle tree depth in LibrustzcashParam; updated ivk initialization in tests.
Marked `IThrowableEntity` as deprecated and relocated to `cpw.mods.fml.common.registry.IThrowableEntity`.
Added random coordinate initialization for x and y to simulate spatial distribution.
Added tests for validateRefreshToken to cover happy path and failure case when scopes are missing
Refactored JavacStep to use try-with-resources for safer resource management and improved readability
Updated version number from 0.9.1 to 0.9.2 for release preparation.
Added check for deep shortcut item type to enhance LoaderCursor functionality
Added hashCode() implementation in TimeGranularitySpec for consistent hashing behavior
Changed class visibility and member variable access levels in BooleanQuery and DisjunctionMaxQuery to align with inheritance and subclassing requirements.
Added useProxyResponseCode flag to manage NTLM proxy response behavior.
Refactored AArch64 code to enhance readability, eliminate redundant imports, and improve scratch register management.
Refactored memory calculation logic to use CapacityVO, improving efficiency and reducing redundant database queries.
Added null check for getMaxScore to prevent potential NullPointerException and updated test case to include score in distributed search query.
Updated audio recorder sample rate from 22050 Hz to 44100 Hz for improved audio quality.
Fixed calculation of newOriginX to account for subjectBounds' minimum X value with scaling.
Enhanced null and emptiness check for dataSource and set default interval to prevent runtime issues.
Added ORIGINAL_TYPE constant and adjusted regex pattern in CustomProperty to improve parsing flexibility and tested edge cases in CustomPropertyTest
Added a factory method to create Index instances with parent and data parameters.
Simplified boolean logic by directly returning the result of boundary checks.
Enhanced SchemaCompatibility handling by adding index-based compatibility checks and updating test cases for precise incompatibility locations
Improved query handling by refining entity path checks and ensuring consistent null value handling in paged specifications.
Added synchronization to spans for thread safety and addressed Iterator pitfalls.
Refactored method signatures to use wildcard generics for improved type safety and flexibility in handling arguments.
Refactored exception handling in ViewContextImpl to improve logging granularity and clarity.
Fixed potential NPE in OAuth2AccessTokenEntity by adding null check for access token fields.
Updated status messages and invocation handling to improve clarity and ensure null safety.
Added default iPad resolution assets for iOS and iOS-MOE projects.
Replaced deprecated import order and added ConcurrentMergeScheduler to improve merge handling.
Improved null and empty checks in SessionState and list handling to prevent potential runtime exceptions.
Updated iteration utilities to ensure compatibility with MapIterable enhancements.
Added preventDefault() calls to SpreadsheetKeyListenerW to prevent default browser behavior.
Refactored service registration and teardown logic in HibernateBundleActivator; updated OsgiTestCase with common test utility and added assertions for service unregistration.
Fixed timeout calculation to use connectionTimeout for accurate remaining time estimation.
Refactored VoiceCompiler to generate component description files in a non-packaged resources directory.
Refactored file handling logic to improve compatibility and address potential issues with invalid file paths and directories
Changed `Cell.row()` to void to better align with method behavior and usage expectations.
Added port clash detection to prevent duplicate port configuration in BesuCommand.
Added nullMask configuration for flexible mask generation in WebSocket connections.
Refactored genUDTFPlan to return Pair for improved type safety and clarity
Added NodeSelectionStats to track preferred and non-preferred node selection counts for improved monitoring of node distribution
Added `Person` class with `name` field and getter/setter methods to support basic person representation.
Refactored owner execution logic to fix potential null pointer handling and improve code readability.
Added clock overlay with animation and periodic updates, replacing logo fade setup.
Refactored redundant updateComparatorOutputLevel and markDirty calls across multiple classes for cleaner and more efficient code
Refactored exception handling in SegmentReader to improve clarity and prevent potential security issues.
Refactored event dispatch to use SwingUtilities.invokeLater for thread safety in cell update operations.
Replaced DefaultInetAddressAdapter with TypeAdapters.INET_ADDRESS for streamlined InetAddress serialization and deserialization.
Added single-value accessors with validation for Series and comprehensive tests to ensure proper handling of null and multi-value scenarios.
Enabled audio time-stretching by modifying the associated option in VideoManager.
Fixed boundary checks in GeoRelationUtils and GeoUtils for consistent inclusion logic and added test for full map coverage.
Updated DiskOffering lookup to use getDiskOfferingId() for accurate ID retrieval.
Added setup and teardown methods with Hazelcast shutdown for test cleanup
Added test cases for unsupported AES cipher modes to ensure proper exception handling.
Added filters for printing and logging operation messages in QFileClient.
Added support for AOP proxy type arguments and introduced ParentInterface hierarchy with dependency injection.
Set `currentConnectionAddress` to `proxySocketAddress` if it is null to prevent potential null reference issues.
Replaced manual overflow handling with MathUtils.cappedAdd for cleaner and safer demand calculation.
Refactored try-catch block to use try-with-resources and ensure file deletion via Files API
Refactored search intent handling by removing TvApp dependency for improved modularity and code clarity.
Refactored code for improved readability and consistency in schema crawler options, logging, and sort sequence methods.
Introduced OSGi-based configuration support and fixed brokerName wildcard in RemoteJMXBrokerFacade for enhanced modularity and compatibility.
Added Autowired annotation for PersonRepository in RepositoryIndexCreationIntegrationTests to enable dependency injection.
Updated method signature in UIServer to throw InterruptedException and fixed logging syntax in TestVertxUIManual.
Updated BlockCactus placement rules to include additional valid block types and improve compatibility.
Refactored mouse event handling to improve readability and enable dynamic updates with MouseMotionAdapter
Refactored classes to use RHS padding for improved memory alignment and reduced false sharing.
Added alignment and vertical alignment parameters to editStringAt method and updated usage to improve text rendering options.
Refactored StatTokSentAnnotator constructor to improve error handling and remove redundant Exception throws
Enhanced query generation logic to support distinct queries with improved handling of group-by expressions and predicates.
Refactored OptionsParser for public access to fuzzy matching constants and methods; integrated fuzzy similarity check for JNI linkages to improve error messaging with closely matching methods.
Removed unnecessary comment from languageProperties initialization to improve code clarity
Added null check for `children` to prevent potential NullPointerException in PartitionPruner.
Implemented token position tracking and enhanced error handling in MessagePackParser for accurate JSON location resolution.
Ensure consistent locale settings during tests and restore the default locale after execution
Simplified redundant conditional logic for size calculation to improve code readability.
Added unit tests for MetricsReporter to ensure robust validation of metric registration and operations.
Removed unused import and simplified typeCacheMap initialization.
Added equals and hashCode implementations for Rectangle to ensure proper object comparison and hashing
Replaced hardcoded sink names with dynamically generated names to improve test reliability and avoid naming conflicts.
Refactored DSAParameterGenerator to use BigInteger constants and updated strength validation logic for consistency and readability
Added support for configurable AM hostname resolution in LLAP, using FQDN when enabled for improved task submission flexibility.
Replaced assertFalse with assertTrueEventually to ensure proper client shutdown verification with retry logic.
Refactored object ID assignment logic by introducing getCmoObjectId method and added tests for shape ID validation.
Added test for distinct scalar query to validate unique post titles retrieval
Refactored SearchTrav-related tasks for improved readability and maintainability in Driver.java and associated classes.
Removed dynamic extension adapter registration to simplify ManagedKubernetesClient and reduce complexity.
Refactored subtitle setting to use Utils.getInfoRow for consistent item detail formatting
Migrated JUnit annotations from vintage to Jupiter API for consistency and compatibility with modern test framework.
Refactored generateSummary method to handle specific exceptions for better error logging and robustness
Simplified reset method calls for intPool and bytePool.
Removed redundant @Override annotations to improve code clarity and maintainability.
Added support for API level TIRAMISU with WindowSessionDelegateU to handle advanced display management.
Updated URL construction logic in `UrlHelper` to correctly handle port appending based on scheme and request consistency.
Added handling for MSSQLDatabase to support "RESTRICT" in onDelete clause.
Refactored code to improve readability and maintainability; removed redundant logic and standardized method formatting.
Refactored flow extraction logic and introduced `FilterEventHandler` for enhanced modularity and side-check handling.
Refactored logging logic in HtmlIdentifier to reuse static debug mode check and simplify conditions
Refactored schema and query handling in HiveLookupTableSource and HiveLookupJoinITCase for improved consistency and correctness.
Refactored thread-safety and state verification in Player and ListenerSet to improve robustness and enforce correct thread usage.
Replaced schema name concatenation with CatalogAndSchema to ensure database-specific schema customization.
Updated alpha blending logic for color correction and replaced ProgressiveJPEGTest with AlphaTest for enhanced color handling.
Replaced direct CompletableFuture join with BatchPromise getSentPromise join to ensure correct handling of batched commands.
Added logic to extract and normalize Solr core URL and ensure unique tracking in statisticYearCores.
Refactored task handling to use `Task` objects directly, improving null safety and simplifying task launch logic.
Refactored MorfologikFilter to enhance dictionary handling and streamline resource loading
Fixed label inconsistency for sort options to ensure proper community and critic rating display.
Used ViewKt.setVisible to handle visibility of header view based on ListRow header item presence.
Refactored clientType switch statement to use try-finally block, ensuring start.countDown() is always executed.
Improved error handling by adding null checks in HttpClient to prevent potential NPEs.
Replaced case-sensitivity checks with DB2Database type checks to enhance database-specific logic clarity.
Added support for Java 8 date/time serialization with Jackson's JavaTimeModule and improved error handling for initialization failures.
Replaced Log4j MDC with SLF4J MDC for improved logging framework compatibility.
Refactored PhiTypeResolver to use Type instead of TypeBearer for improved type safety and clarity
Refactored CoinbaseTransactionStatusDeserializer to improve readability and maintain consistency in deserialization logic
Added functionality to resolve aliases in build target lists and enforce Buck build rules for specified targets.
Replaced IdleStrategy declaration and added explicit System.gc() call to address potential garbage collection issues.
Refactored to use ContentResolver instead of ContentProvider and updated logging for improved readability and functionality
Refactored event state change checks to improve readability and maintainability in ReportPanel.
Added null check for slotOwner assignment to ensure non-null values.
Added a recipe to remove explicit calls to System.gc() and Runtime.gc() to delegate garbage collection to JVM optimization.
Removed redundant `super()` calls across multiple classes to improve code clarity and maintainability.
Preserved icon state in setUIID method to maintain consistency after UIID change.
Refactored variable usage to improve code clarity and maintainability.
Added support for "-cp" as an alias for "-classpath" to improve argument parsing flexibility.
Replaced 'options' with 'compiler' in avutil link annotation for improved clarity and accuracy.
No functional changes: Adjusted whitespace for code consistency.
Added missing implementation for Test7196045 class.
Adjusted default density and decay values for improved light shaft rendering accuracy
Added support for configurable state handling in OIDC, enabling dynamic or pre-defined state data.
Enhanced unique constraint handling by adding support for nullable columns and refining inline constraint logic
Added federated share capability checks and improved conditional logic in UsersAndGroupsSearchProvider and EditShareFragment.
Added `needsDocValues` override in `TestBBoxStrategy` to ensure proper behavior.
Refactored code for null safety, improved exception handling, and standardized data structures for clarity and robustness.
Added intForEach method to Int2ObjectHashMap for efficient iteration over key-value pairs.
Fixed global mapStorage handling to prevent early scoreboard sharing in non-WorldServerMulti environments
Refactored count method return type from Long to long for consistency and to avoid potential null-related issues.
Refactored MTree snapshot creation logic to improve readability and ensure proper condition handling.
Refactored dotProductScore calculation for clarity and precision; added additional test cases for edge scenarios.
Added mechanism to update and store the latest confirmed block number based on an irreversible threshold.
Refactored locale setting logic by consolidating into a reusable Systems utility method for improved maintainability and consistency.
Added check for database creation status to ensure proper handling of migration cling dismissal.
Refactored collection iteration logic and improved exception handling for better code clarity and robustness.
Refactored is64Bit assignment logic for improved readability and maintainability
Ensured thread safety by verifying the current thread before proceeding.
Changed closeDatabase method visibility from private to protected for enhanced extensibility in subclasses.
Migrated from Jellyfin API client to SDK for improved compatibility and updated type handling for person models and adapters.
Copied attributes from the original SVG element to the new document to ensure consistency in rendering.
Refactored error logging to remove redundant inputrcUrl parameter for improved clarity
Added logic to handle "WaitForResult" extra in intent to dynamically set waitingForResult flag
Refactored queue constructors to use Supplier for sentinel objects, improving flexibility and removing redundant prepopulation logic.
Refactored widget UI initialization and added dynamic description loading for Android S+ compliance.
Added check to prevent exceeding maximum attribute count and throw exception.
Moved PredicatesTest to new package and added necessary imports for query-related classes.
Added case-insensitive header filtering support to DefaultHeaderFilterStrategy and updated tests for validation
Improved line-breaking logic to handle unbreakable strings and prevent incorrect substring assignments.
Refactored `getView` method in ShareUserListAdapter for better performance and added avatar creation with fallback handling.
Refactored instrumentation logic to simplify implementation and remove unused lists and exception handling.
Added null check for association before accessing isInsertDestinationBeforeSource to prevent potential NullPointerException.
Refactored memory limit file path determination to support both cgroup v1 and v2 systems
Replaced `CxxDeps.of()` with `CxxDeps.EMPTY_INSTANCE` to improve performance and reduce object creation for empty dependencies.
Added validation to throw HumanReadableException when source under test is not in dependencies
Replaced hardcoded proxy initialization with a version map for cleaner code and easier maintenance.
Removed redundant condition for negative atIndex to simplify code logic.
Increased timeout values in TimeoutTest to improve test stability and reduce false failures.
Refactored TaskOverlayGo to use injected AssistContentRequester for improved dependency management
Replaced createReadableString with encode58Check for witnessAddress and fixed null check condition logic.
Refactored DefaultMethodRegressionTests to improve readability and maintainability.
Refactored WorkloadManagerMxBean to improve code readability and maintainability.
Replaced KafkaProducerException with KafkaException to align with updated exception hierarchy.
Added closeLoader() invocation to ensure proper container resource management.
Added tests for rollback and no-rollback scenarios with exception handling in fault-tolerant processing
Updated configuration message format to include available runner options and highlight mismatched configuration.
Refactored TableConfigTunerUtils to support additional parameters with extraProperties for enhanced configurability.
Prevented duplicate segment addition by checking in-progress instances in PinotRealtimeSegmentsManager
Added null return for disabled touchable state to improve safety and prevent unintended behavior
Added test for building with precompiled headers in a different cell to ensure compatibility.
Added a check for null cacheConfig and threw RetryableHazelcastException to handle uncreated cache configurations.
Refactored module installation logic to use isNodePackageInstalled, improving readability and error handling.
Added @ManagedObject and @ManagedOperation annotations to enhance MBean management and operation metadata.
Disabled inAppBrowser setting in LongClickableSpan for consistent behavior
Refactored string comparison logic to avoid potential NPEs and improve code readability.
Refactored type checking logic to handle reverse transformations and added tests for edge cases with generic type casting.
Refactored position setting messages for clarity and added detailed region size calculations.
Added task management and graceful shutdown for KafkaFetchRecords to improve resource handling and prevent potential issues with executor termination.
Removed default implementation of examples() to enforce explicit definitions in subclasses
Reordered interrupt logic and fixed infinite loop in AgentRunner to ensure proper thread termination.
Removed time column from dimensions and filters to ensure consistent dataset handling.
Fixed logical condition by splitting checks for sreq.shards to improve readability and maintain correctness.
Refactored dependency handling to use CxxPlatforms.getParseTimeDeps for consistency and simplification.
Added `name` property with getter and setter methods to multiple authentication properties classes for consistent configuration support.
Improved error handling and logging in CFGPrinterObserver and IdealGraphPrinterDumpHandler to enhance debugging and prevent null pointer issues.
Optimized small scan handling by introducing configurable threshold and enhancing point lookup checks.
Updated RetryGatewayFilterFactory to include routeId in toString output for enhanced logging clarity.
Replaced direct method calls with `callWidget()` to improve modularity and consistency in handling widget actions.
Refactored onOverviewShown logic to centralize DiscoveryBounce handling and improve code clarity.
Refactored globalMinPackedValue and globalMaxPackedValue checks for improved null safety and readability; added a test for deleting point documents.
Made `publish` method behavior configurable by replacing hardcoded `true` with `updateLastState` parameter
Escaped column alias to ensure compatibility with reserved keywords.
Removed addition of null element to exp to avoid potential null pointer issues.
Added case-sensitive and case-insensitive text matching conditions with corresponding tests
Replaced `do-while` loops with `while (true)` for consistency and clarity.
Added forwardOnlyFetchSize method to optimize fetch size handling for forward-only queries, adapting to platform-specific configurations.
Handle ClosedChannelException separately to avoid redundant 404 responses for already closed channels.
Initialized ArrayList with beads size to optimize memory allocation.
Refactored window radius initialization to account for support of rounded corners on windows.
Refactored DesktopTaskView layout and orientation handling to improve background management and device profile alignment
Initialized `UpstreamCheckService` in test setup to ensure proper configuration and dependencies.
Refactored logging logic to ensure debug-level messages are consistent and eliminate redundant warning logs.
Replaced exception throwing with return statement to handle errors gracefully in ZooKeeperHiveLockManager.
Refactored code across multiple classes to improve readability, consistency, and maintainability.
Added condition to skip mipmap generation when custom data is present to prevent redundant operations.
Refactored DefaultMaskingFormatter and tests to simplify string handling and improve regex clarity for secure key masking
Added selectable property and refactored selection handling to improve clarity and prevent touch events when not selectable.
Fixed incorrect equality comparison in getFieldVectors to ensure accurate value count validation
Added file separator handling in PolicyContext and improved debug logging
Replaced HashSet with ArrayList for flatQueries and expandQueries to ensure predictable iteration order.
Updated TLSRestrictions to enforce stricter validation rules for enhanced security compliance
Replaced direct producer.close() call with asynchronous task to ensure safe closure and handle potential exceptions.
Added support for ignoring specific node values in assertNodeStateProvider to enhance flexibility and prevent unnecessary comparisons.
Added logic to delete existing lock file to ensure clean workspace initialization
Updated `NIOServerCnxn.Factory` initialization to use `InetSocketAddress` and adjusted test assertions to reflect port address changes.
Refactored RestClient to improve exception handling and logging for HTTP connections.
Replaced `toString()` with `toArray()` for segmentTarURIs to ensure proper conversion and avoid potential type issues.
Fixed incorrect password usage in AllAccessControlUiTests to ensure proper authentication.
Added null check for getItemId() to prevent potential NullPointerException.
Reduced the minimum number of strings from 500 to 100 to optimize test execution time.
Replaced custom ByteArrayInStream implementation with JTS ByteArrayInStream to reduce redundancy and improve maintainability.
Renamed method to clarify intent from 'messageWithHeaderEntry' to 'messageWithHeaderKey'.
Added check for direct substate transitions and updated tests to validate state entry/exit counts
Added handling for ListMultimap and SetMultimap equality checks with detailed tests for order sensitivity and set behavior.
Added JoinOperation interface to PostJoinOperation to support join-related functionality
Added test case for PostgreSQL issue #258 to validate schema dump with OIDs and ensure correct output.
Wrapped `destroyDurableSubscriber` call in try-catch to handle `JMSException` and assert inactive reason for better error handling.
Fixed null pointer issue in `AvaticaDatabaseMetaData` by adding null check for metadata fields
Refactored MongoDB connection pool properties to use @DurationCapable for better configuration flexibility and updated factory methods to handle duration conversions.
Replaced null MediaFormatFactory with SipActivator-provided MediaFactory to ensure proper audio media format creation.
Refactored filter handling logic to improve readability and ensure consistent application of domain changes and block joins.
Added timeout handler control and conditional check to enable/disable writer idle state handling
Refactored QuickStep rotation initialization for consistency and improved readability
Improved logging statements for clarity and consistency in XPathBuilder and XQueryBuilder classes.
Replaced manual resource stream handling with DataResource class to standardize data access.
Added EdgeCasesTokenizerTest to ensure GoTokenizer handles escaped backslashes correctly
Added validation for 'atlas' property in map properties to ensure correct atlas handling and prevent runtime errors.
Removed property placeholder resolution logic and deprecated `PropertyPlaceholdersHelper` to simplify component initialization.
Refactored tests: closed levelDbDataSource in BlockchainTest; removed redundant KafkaTest code for improved maintainability and readability.
Refactored line handling to use List for improved safety and added utility method to process literals.
Refactored imports in WebServiceInboundGatewayParserTests.java for consistency and readability.
Refactored SQL bindings to use List instead of ImmutableList for improved flexibility and null-safety.
Added check for "OpenJDK" in javaVmName to enhance compatibility detection.
Added keepAlive configuration to ReactorClient for persistent connections
Updated VertexAttribute definitions to use ShaderProgram constants for consistency and maintainability
Refactored properties component handling in DefaultCamelContext to improve clarity and ensure proper type validation.
Refactored null check for account existence to avoid potential NullPointerException.
Updated version to 3.8.1 with ReleaseStatus set to Alpha.
Refactored type handling to use unannotatedType() for improved type consistency and safety.
Refactored StorageGroupProcessorTest to adjust sequence file size configuration and ensure consistent flush behavior
Migrated classes and configurations to EE10 namespace and improved environment handling for enhanced modularity and consistency.
Added delay parameter `waitbeforestart` with a default value of 2500ms to ensure proper initialization
Removed skipCorrupt parameter and related logic to simplify OrcEncodedDataConsumer initialization and usage.
Refactored AccessorsTest to use @Test annotations and streamline imports for improved readability and maintainability.
Refactored `compileMethod` to accept pre-constructed `StructuredGraph` and added `frameMap()` accessor in `LIRGenerator` for improved modularity and clarity.
Replaced deprecated JUnit annotations with CAS-specific ConditionalIgnore and ConditionalSpringRunner for improved test execution control.
Adjusted Y-coordinate calculation to handle BlockWater correctly in ItemBoat logic.
Updated string representation and added lock ID implementation for improved debugging and identification
Removed redundant method to simplify code and directly use the experimentalOptions variable.
Added overloaded `then` methods for improved assertions with `Path` and `AssertProvider`.
Refactored variable names and updated port handling logic in ForwardedRequestCustomizer for improved readability and consistency.
Updated log messages for Kubernetes config handling to warn users about config file selection and improved debug message formatting.
Added support for handling various upload statuses in FileUploadService and UploadListActivity, including cancellation, retry, and file details display.
Refactored crypto provider installation into reusable ProviderLoader for improved modularity and error handling.
Replaced Span constants with TraceMessageHeaders to align with updated Sleuth API standards.
Refactored SelectFromDatabaseChangeLogStatement to use ColumnConfig for improved flexibility and maintainability.
Refactored schema command and qualifier support for PostgreSQL81Dialect; removed redundant annotations in SchemaUpdateTest.
Handled division by zero for partitionsPerMember calculation and applied consistent formatting in test classes.
Added checks to prevent duplicate scheduler starts and improved error handling for scheduler state management.
Simplified text handling and fixed logical grouping in conditional checks for improved code readability and null safety.
Formatted checkArgument calls for improved readability and consistency in error messages.
Updated `getStagedRectSlideEnd` return value to 500 to adjust slide end timing.
Localized text strings for better internationalization support.
Updated logic to check plot ownership using getOwnedPlotAbs to improve road item kill handling.
Refactored touch exploration listener handling to improve concurrency and support for multiple API levels.
Refactored glyph ID handling and added tests to ensure correct character code mapping in CmapSubtable.
Refactored code to replace direct property access with getName() method for improved consistency and readability.
Refactored NPOIFSFileSystem initialization to use POIFSFileSystem.create for improved readability and maintainability.
Added PlotArea retrieval and null check to ensure proper handling of plot operations.
Updated version regex to match major version numbers for improved validation accuracy
Updated condition to ensure `count` is greater than 0 instead of allowing 0, improving input validation.
Refactored KafkaConsumerProcessor to simplify bean type usage and ensure consistent clientId generation with hyphenated bean names.
Fixed incorrect class import and added exception handling for javac execution failure
Refactored repaint logic to ensure accurate visibility updates and optimize rendering performance
Fixed incorrect indentation in conditional block for better readability.
Added `isAnimationFinished` method to check if animation has completed based on stateTime.
Refactored import statements and added unit test for custom favicon handling with line breaks in login branding.
Added null check for `otherUrl` to prevent potential NullPointerException and updated refreshing text for better readability.
Refactored string replacement logic to standardize spacing handling and ensure consistent formatting across input values.
Optimized ObjectHashSet to improve performance by reducing memory overhead.
Refactored null checks and replaced manual array comparison with Arrays.equals for improved readability and correctness
Fixed item comparison to include NBT data, resolving deletion issue with enchanted books (MC-12770).
Added AsyncResourceTest for validating asynchronous GET and PUT endpoints and refactored JerseyHandler initialization with resourceConfig
Refactored header map generation from "flat" to "user" to improve naming consistency and enhance code readability
Enhanced mail sending logs with recipient details and improved error handling for SendFailedException.
Refactored TaskItemView reset method to resetToEmptyUi for improved UI consistency and better drawable handling.
Added unit tests for getPartitionsByNames to verify batch processing with various partition name configurations
Fixed missing closing brace in FileListListAdapter.java to prevent compilation errors
Refactored ArrayList to List for improved code flexibility and adherence to Java best practices
Fixed index calculation in removeViewInLayout to avoid off-by-one error.
Refactored hide method calls and removed unused module requirement for improved code clarity and maintainability
Updated S3Request instantiation to set last parameter to false, ensuring consistent request handling.
Refactored initializeComponents method to remove unnecessary parameters and added null check for timeline in updateAnimation
Fixed DeweyNumber parsing logic to handle zero splits and added validation with test coverage
Refactored categorySet processing to remove "Category :" prefix and prevent redundant toString calls.
Simplified assertion messages in WebSocketClientTest for clarity and consistency.
Added null check for classLoader in WebappLoader and updated related tests to reflect changes.
Refactored conditional block to enhance readability and maintainability
Enhanced type checks and logging in PDNumberTreeNode to prevent ClassCastException and handle invalid page label indices gracefully.
Added a unit test for PorterStemFilter to validate stemming logic using sample vocabulary and output data.
Modified `postBatchMutate` to `postBatchMutateIndispensably` with success flag to handle index updates only on successful miniBatch operations.
Fixed package name typo from "exlore" to "explore" in multiple test classes for consistency and accuracy.
Synchronized chatPanels iteration to ensure thread safety during chat session management.
Consolidated `Sys.touch()` calls into `APIUtil` to improve code maintainability and reduce redundancy.
Removed untrackedFiles method and related logic to streamline command interface and improve maintainability.
Refactored Netty timer management to use a shared instance, improving resource efficiency and preventing redundant timer creation.
Made fields in light classes immutable and replaced intensity with range for linear fall-off calculation.
Replaced direct calls to target.getWidth()/getHeight() with Math.max() to ensure non-zero dimensions in X11GraphicsConfig and WGLGraphicsConfig.
Added `toString` methods to delegate calls and corresponding test cases for improved debugability and consistency
