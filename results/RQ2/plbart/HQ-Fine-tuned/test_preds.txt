updated SocketAppender initialization to set remote host and port to ensure proper configuration of the socket appender
refactor BasicAuthPlugin to use a new method for setting prompt headers to improve code readability and maintainability by centralizing header handling logic
removed the reference to ` RecordDescriptor. msgLengthOffset ` in ` ManyToOneRingBuffer. java ` to streamline the code by elim
update cpu and ram overcommit ratio assignment in CapacityManagerImpl. java to ensure proper handling of null values
added flags to ShadowPaint and updated its constructor and test methods to improve flexibility in managing paint flags and ensure anti alias functionality
updated the title of the MassSetFieldsDialog to use a localized language to improve user experience by providing a more descriptive title
added conditional logging for bugs in DetectorsTest. java to improve error reporting when Eclipse is not used to compile the project
added a condition to check if nonce is non - empty and updated scheme assignment in NettyAsyncHttpProvider to ensure proper handling of nonce values and
added a RemoteInput interface with connected and disconnected methods to enable better management of remote input connections
added braces for better readability in OrcEncodedDataReader. java to improve code clarity and maintainability
updated the filtering condition to check if the thing is enabled before filtering to ensure that only enabled things are excluded from the filtering logic
added null checks before removing policies in AuthorizeAdminServlet. java to prevent potential NullPointerExceptions when managing policies
updated assertions in DefaultTypeAdaptersTest and ObjectTest to use ` matches ` instead of ` isEqualTo ` and ` toJson ` methods to improve
added JSON serialization of DAG context and description in TezTask. java to enhance data handling and provide more detailed DAG information
updated time calculation in ComputedSummary. java and added methods in HprofHeap. java to improve accuracy of heap timestamp representation
replace RxJava2Tasks with CommonsApplication for retrieving upload count to streamline upload count retrieval and improve code maintainability
removed conditional checks for lock modes in MVTable. java to simplify code logic for better readability and maintainability
[ issue # 1084 ] fix max message size for commitlog ( # 1086 )
added a check to prevent folder opening from being marked as open to improve user experience by logging when associated folders are not open
added a new test method ` testSortOrder ` to ` PGPropertyTest. java ` to ensure that property names are sorted in ascending order
added a new constant ` HOVER _ MESSAGE _ EVALUATION _ POINTS _ GIVEN ` to provide a clearer message about
updated the ` supportsDrop ` method to use ` ItemInfo ` instead of ` Object ` to improve type safety and prevent potential null pointer exceptions
updated assertion in RequestBuilderTest to use isIn instead of hasMessage to improve readability and maintainability of the test assertions
replaced ` TAG _ RETAINED _ FRAGMENT ` with ` NearbyListFragment ` and renamed ` nearbyMapFragment ` to
[ hotfix ] [ table - planner - blink ] fix bug in flatprofilecontainerfreeze
added a boolean field ` send _ zero _ anomaly _ email ` to the ` EmailConfiguration ` class and corresponding getter and setter methods to enable
[ hotfix ] [ kafka ] fix npe in flinkkafkaconsumerbase # open ( )
added getter methods for user and geofences in DataManager. java to enhance data retrieval capabilities for users and geofences
added a constructor to BlockingResponseListener that accepts a maxLength parameter to allow dynamic response size based on request length
[ java ] remove unnecessary thread name from member broadcastsreceived method.
added logging for snapshot transitments and wrapped reader cleanup in a try - finally block to ensure proper resource management and prevent resource leaks
updated URL assertions in LoginSAMLAuthenticationFailureHandlerTest to ensure consistency in URL formatting
refactor ConfigMetadataProviderTest to improve code readability to enhance maintainability and facilitate future updates
removed unused imports and refactored the ` updateNoteReminder ` method in ` SnoozeActivity ` to improve code clarity and maintain
added a new ` AcceptAllFilter ` class and refactored the directory stream creation logic to improve directory stream handling and ensure proper handling of
updated JdbcTestDataSet. java file to improve test coverage and maintainability
added exception handling to the lookupType method in HotSpotJVMCIRuntime and CompilerToVMHelper classes to improve robustness by catching ClassNotFoundException
added validation for Docker image names in GenericContainer. java and created corresponding test cases in DockerImageNameTest. java to ensure Docker image names
replaced ` login _ failed _ username ` and ` login _ failed _ password ` with a new ` login _ failed _ wrong _ credentials `
setautofocus ( " autofocus " ) across multiple form classes to ensure consistent focus behavior across different forms
added unit tests for zone configuration in SamlIDPRefreshMockMvcTests to ensure correct behavior of SAML properties in the identity zone
added conditional checks for non - digit lists in ComparableVersion. java and updated test cases in ComparableVersionTest. java to ensure proper handling of
updated layout calculations in Sheet. java and added theme properties in UIManager. java to improve layout consistency and maintain consistent theme settings
updated import statements from ` org. robolectric. android ` to ` org. robolectric. android. internal ` in multiple test
change return type for BoundedLocalCache in LocalCacheFactory and NodeFactory methods to ensure proper type handling for BoundedLocalCache instances
updated fill pattern from SOLID _ FILL to SOLID _ FOREGROUND in FrillsAndFills. java to improve the visual appearance of the
added a method to draw a self - loop in ProcessingPreview. java to enhance visual representation of self - loops in the graph
updated the default value of ALLOW _ TVM _ SOLIDITY _ 059 to ALLOW _ TVM _ SOLIDITY _
rename method ` addManaged ` to ` manage ` in ` DropwizardAppRule ` to improve clarity by accurately reflecting the method '
set translationY of the drag handle indicator to zero to ensure the drag handle indicator is visible during transitions
added log statements for collection, community, and item in CollectionViewer, CommunityViewer, and ItemViewer to enhance logging capabilities for better debugging and
updated configuration messages for query optimization in HiveConf. java to improve clarity of configuration options during query optimization
skip scanningappprovidertest on macos
added Maven bundles for Jetty ALPN client jar in TestJettyOSGiAnnotationParser to enable debugging capabilities during testing
act - 1146 : retry async job if process instance lock time exceeds lock time limit.
refactor Transaction class to improve transaction management to enhance performance and maintainability of transaction management
removed the @ ExcludeFromRuleKey annotation from GenruleBuildable. java to exclude unnecessary fields from rule key execution to improve clarity in
simonstewart : add ability to specify which firefox executable on window.
added a check for the existence of a key in ` colFamToDynamicColumnsMapping ` before adding it to ` colFamToDynamicColumns
[ hotfix ] [ runtime ] fix checkstyle violation in hadoop
added handling for retrieving and adding derived columns and indexes in MetaDataEndpointImpl. java to ensure proper handling of view types in the system catalog
fix nullpointerexception in accountslogic
replaced ` org. apache. poi. xssf. util. TestCellReference ` with ` org. apache. poi. ss.
added a condition to check the hardness of a block in LensPiston. java to ensure that only valid items are processed
added a new file LongPointerPressTest3049. java for testing network error handling to facilitate testing of network errors in the application
truffle : fix inlining bug in partialevaluator
refactor null checks in BaseBuilder, XMLConfigBuilder, and Interceptor classes to enhance code readability and prevent potential NullPointerExceptions
updated indentation check in ListBlockParser and added a new test for deeply indented lists to improve indentation handling and ensure correct rendering of nested
added a new abstract class ` AbstractOptionalAssert ` and refactored related methods in ` OptionalAssert ` to improve code organization and maintainability
added JUnit @ Ignore annotation to WebfluxNotIncludedTests. java to mark the test as ignored due to issue https : / / github.
[ test ] remove unused jsinterop annotation in testcaselogger
[ hotfix ] [ test ] fix checkstyle violation in routestartuporderlasttest
added a condition to check if the video format is video before processing web subtitles to ensure that web subtitles are only processed when the video format is
added security settings to disable TLS algorithms in ComHostnameVerifier and JavaxHostnameVerifier to ensure compatibility with disabled TLS algorithms
server : don't include zone scope in list storage pools
updated logging statements to include cacheEntry as a parameter to improve logging clarity by providing more context about cache entries
added a ` maybeUpdateModel ( ) ` option to ` AddManagedDependency ` and ` ManageDependencies ` classes to enhance dependency management by allowing
added tests for handling PendingIntent sending in ShadowActivity and ShadowActivity to ensure correct behavior of pending intent handling in TranscriptActivity
refactor canvas creation and rendering hints in RocketFigure3d. java to improve clarity and functionality of graphics rendering
replaced ArrayList with synchronized lists for managing controllerListeners in HydrawiseAccountHandler to ensure thread safety when accessing shared resources
solr - 9893 : disable EasyMock test that do not work with Java 9
updated year calculation in TimestampUtils and added DateTimeFormatter tests in SetObject310Test to ensure correct year handling for Era date representations
added null check for the connection before disconnecting to prevent potential NullPointerExceptions when the connection is not initialized
updated variable name from " ws _ table " to " cur _ ws _ commit _ id " to improve clarity and consistency in naming conventions
replaced ByteChunk with ByteBuffer for buffer management to improve performance and memory efficiency
added a ` toSync ` method in ` AsyncUtils ` and created corresponding test cases in ` AsyncUtilsTest ` to enhance functionality and ensure
added ActionGraphBuilder to multiple ConfiguredCompilerFactory classes and updated method signatures accordingly to enhance the configuration process by integrating ActionGraphBuilder for
add a test for uploading hidden file input in UploadTest. java to ensure that the upload functionality works correctly with hidden file inputs
removed unnecessary try - catch blocks in SQLManager. java to streamline error handling and improve code readability
added a check to return the local Maven directory if it does not exist to ensure the directory is valid before proceeding with the build process
hide algebra label if new label don't contain hidden prefix
added null check for metadata in CtElementImpl. java and updated test assertions in MetadataTest. java to ensure robust handling of null metadata
replaced ` setFlags ( ) ` with ` addFlag ( ) ` in ` DefaultTrackOutput. java ` to ensure proper handling of buffer
added a check for ` cached. isSortedById ( ) ` in the ` EntityIterableBase ` class to ensure that ` cached ` is
updated error message from " Method call not specified for verify ( mock ) " to " Missing method call here " to clarify the context of the
added a null check for backupFolder before logging its contents to prevent potential NullPointerExceptions when backupFolder is not initialized
added a new file ` ArrayNewInstanceOfVoid. java ` implementing a test for creating a void array to demonstrate the use of ` void `
added @ AddToRuleKey annotation to ToolType fields in ClangCompiler and GccCompiler to enable rule key functionality in the compiler
added a constant PINCODE _ TIMEOUT and modified the timestamp comparison logic in PinCheck. java to improve code readability and maintainability by using
added an implementation of the ` isSampled ` method in ` PrometheusMeterRegistryTest ` and ` PrometheusExemplarsSample
added @ Ignore annotation to multiple test classes to temporarily skip tests requiring mongodb server
updated import statements and assertions in ConsumeUncompressedCompressedMessageTest. java to improve code clarity and maintainability
updated condition in MetaDataSource to check if the table is artifical instead of just a simple name to ensure that only non - artific
changed file status checks from isFile ( ) to isDir ( ) in FileOutputCommitterContainer. java and LaunchMapper. java to improve clarity
refactor session attribute handling logic in MongoSessionManager. java to improve clarity and maintainability of attribute management
change the size of the surface holder from fixed size to sizeFromLayout ( ) to ensure that the surface holder uses the correct size for layout
refactor stopping variable to use CountDownLatch for better null safety to improve code stability and prevent potential NullPointerExceptions
removed unnecessary whitespace in HuobiStreamingService. java to improve code readability and maintain consistency
( chore ) camel - core : avoid npe in defaultmessagelistener
refactor the subscription logic in DelayedMonoPublisherTest to use a lambda expression to improve code readability and maintainability
replaced assertTrue with a conditional check for WebSocketHandshakeException to improve error handling clarity and maintainability
refactor AllAppsTransitionController to use View. OnLayoutChangeListener for layout change notifications to improve code readability and maintainability by centralizing layout change
refactor variable names for clarity and consistency in PolicyBasedAuthenticationManager. java to improve code readability and maintainability
added support for the " default - output - channel " attribute in XPathRouterParser and corresponding test cases to enable configuration of the default output channel
updated cacheSeconds from an int to a String in MessageBundleProperties. java and modified cacheSeconds handling in CasCoreWebConfiguration. java
updated version from " 3.0. 0 - rc1 " to " 3.0. 0 " in multiple test files to ensure compatibility with the latest open
removed the call to append ( buffer, true ) in ByteBufferPool. java to streamline buffer management and improve performance
added a check for the presence of alt - rt. jar in the boot classpath to prevent tests from being skipped due to alt - rt detection
updated delete statements and assertions in JdbcScimUserProvisioningTests. java to improve clarity and correctness of user deletion operations
replaced ` Arrays. asList ( ) ` with ` ArrayList < String > ( ) ` and modified the flight recording options to support Java 7 features
added a method ` isStreamEmpty ( ) ` to ` WebCamInputPanel ` and modified video processing logic in ` WebcamInputDialog `
added a condition to check if the content is not empty in HttpParser. java and created a test for chunked PUT in ProxyServletTest.
( chore ) camel - Atmos : fix typo in javadoc
added " printf " and " print " to conditional statements in Java2TypeScriptAdapter. java to ensure proper handling of method invocations and improve
added a new file TestCapacityUntilGCWrapAround. java to test the behavior of ` incMetaspaceCapacityUntilGC ` on 32
updated package - info. java files for mmm and ppp packages to improve documentation clarity and maintainability
removed the check for timestampedAtStart in SamplingStatCalculator. java to simplify the logic by eliminating unnecessary logic
added unit test base on user forum issue
tmi - jpeg : improve error message for invalid icc profile.
add miss ` ` shouldcausereequipanimation'' method to itemrockod
added conditional binding for Environment and Config in JoobyModule and SpringModule to conditionally register beans based on type to enhance flexibility in bean registration
replaced the call to ` Thread. currentThread ( ). getContextClassLoader ( ) ` with a direct call to ` container. getParentClassLoader ( )
load additional nameupdater. properties from meta - inf / org. apache. jmeter. nameupdater
added a boolean flag ` started ` to the ` ellipsoidRegionSelector ` class to enable tracking of whether the ellipsoid region is
replaced HTTP protocol URLs with HTTPS in JavaSEPort. java to improve security by using secure protocols
added validation for sorting by property names in GetFeature. java and implemented a test for invalid property names in GetFeatureTest. java to ensure
updated the assignment of the grantor variable to handle null values to ensure proper handling of null values and prevent potential NullPointerExceptions
added imports and modified image processing in DiagramGenerationTest. java to ensure compatibility between expected and compatible images
added a null check for sidedDelegate in FMLCommonHandler. java to prevent crashes when attempting to install FML properly
refactor DataUtilities and ReTypeFeatureReader classes to improve code readability and maintainability
fix flakyness of locktest. islocked ( )
added methods ` wholeWordTokenize ` and ` joinTokens ` to ` StringUtil ` class for tokenization to improve tokenization functionality and enhance
use response. sendError ( 404, " Not found " ) instead of response. setStatus ( 404, " Not found " ) to improve error
added commandIndex variable and modified command handling logic in SystemHighlighter. java to improve code clarity and ensure command indices are correctly handled
updated version and version date in Constants. java to reflect the current development state and ensure versioning is maintained
updated position calculation in StarTreeRecordStoreCircularBufferImpl. java to ensure correct buffer position based on dimension size
added support for a shell drag and drop request in the QuickstepTestInformationHandler and SystemUiProxy classes to enable proper handling of drag and
added test methods to verify socket traffic class in SecureSocketAppenderSocketOptionsTest. java and SocketAppenderSocketOptionsTest. java to ensure correct
added PSK - AES256 - GCM - SHA384 to TestCipher. java to enable support for PSK encryption in the application
updated the method call from ` getDescription ( ). getText ( ) ` to ` getLongDescription ( ) ` in ` NearbyMapFragment
added Jackson @ JsonProperty annotation to ScimGroupMember. java to enable JSON serialization of values for better data handling
added support for schema scoping in HqlQueryRenderer and HqlQueryRendererTests to enhance query parsing capabilities and improve test coverage for
( chore ) camel - core : fix npe in subscriptionhelper
refactor Parser class for improved readability to enhance maintainability and facilitate future updates
updated the ` offsetStreamIndex ` method to include an additional condition for index adjustment to ensure that the index starts at one when adjusting is
tika - 697 -- fix magic detection and add test for cpio
[ hotfix ] [ table - planner - blink ] remove deprecate monotonicity from flinksqloperatortable
added inheritance strategy for OneTimeTokenAccount and implemented equals and hashCode methods in OneTimeTokenAccount to enhance object comparison and hash code generation for
added a condition to check if the assistant is not aunched assistant before flinging to ensure that fling occurs only when the
added a new file SolarisShortDSA. java to implement a test for Solaris DSA functionality to ensure proper handling of Solaris D
added toggleSearchLabel ( false ) method to ListFragment. java to disable search functionality in the list fragment
cs - 15429 : lock volume for snapshot creation to prevent npe.
refactor ` FileDetailActivity ` to use a ` DetailsServiceConnection ` class for connection management to improve code clarity and maintainability by encapsulating
replaced error handling in HttpClientTLSTest with an AtomicReference for SSLPeerUnverifiedException to improve clarity and maintainability of error management
removed the equals method from ConjunctionScorer to streamline the code by eliminating unnecessary complexity
added a null check for the value in bindItems when removing colliding items to improve error handling and logging for item binding failures
fix race condition in metadataraftgroupmanager ( # 1751 )
updated cache size calculations and added a timing mechanism in DefaultCache. java to improve cache management and log a warning when the cache size exceeds its
updated API version from v2 to v3 in multiple classes to reflect the latest API changes
added an empty ( ) method to the freenect2 class to provide a way to check if an element is empty
added Optional import and updated tests for empty Parquet pages in AsyncPageReader and TestDrillParquetReader to improve error handling and ensure
updated argument checks and added error handling for market data types in SerumStreamingService. java to improve argument validation and ensure correct market data type
add confighandler to disable the animation when an item be charging on top of a mana pool.
[ java ] don't send timeout exception if egress subscription be not connect.
added error logging for InterruptedException in WaitForHelper. java to improve error reporting and facilitate troubleshooting
updated filesystem test to skip question dirs on Windows to improve test reliability and ensure filesystem compatibility
updated style injection calls in ResourcesInjectorFull. java to ensure the correct styles are applied for dialog and open screen styles
changed data type of changeLogFile and outputFile from String to FileResource in BaseLiquibaseTask and DBDocTask classes to improve type
fix checkstyle issue in blockworldvector
updated LongConcurrentLRUMap to use final values instead of explicit null checks to improve code clarity and enforce immutability of CacheEntry instances
( chore ) camel - core - reflection : quote literal in resource configuration
refactor cache retrieval logic in FileCredentialsCache. java and improve error handling in EmptyCC. java to enhance code clarity and ensure proper cache initialization
updated the database path from " output _ PrecompiledContracts _ test " to " output _ ValidateMultiSignContract _ test " to ensure
[ pan - 2171 ] fix fast sync error ( # 2172 )
danielwagnerhall : fix a typo in the session log handler.
added a check to return false if two GeoSegment format expressions are equal to ensure that equality checks do not cause division by zero errors
added a check to clear pending rendering operations if the component is not minimized to ensure that pending rendering operations are only cleared when the component is
fix flakyness of hazelcasttestsupport # testdeadline ( )
updated the handling of delayed entries in the CoalescedWriteBehindQueue and added a new test class WriteBehindWriteDelaySecondsTest to improve
added a null icon to the JLabel in GroupTreeCellRenderer to prevent potential null pointer exceptions during rendering
updated test methods to set strictMatch to false in TestBlacklistAwareRedirectResolver to improve test reliability by disabling strict matching
added imports and modified test methods in ShutdownMonitorTest. java to improve resource management and ensure proper cleanup of the ShutdownMonitor instance
updated the calculation of moveSize and chunk fill rate in RandomAccessStore. java to improve performance by using a more appropriate fill rate
refactor serialization logic into a new method ` readFields ` to improve code readability and maintainability by encapsulating field retrieval logic
[ hotfix ] [ runtime ] move componentclosingutils to operator - coordination
server : destroy volume upon vm transition from error state to error state
fix npe in configurationmanagerimpl # getvlanip6range
rename ` userDetailsBeanNames ` to ` beanNames ` in ` InitializeAuthenticationProviderBeanManagerConfigurer ` to improve clarity and consistency in naming
increased the timeout duration for leader retry from 15000ms to 30000ms in CollectionsAPIDistributedZkTest. java to improve resource
updated error handling methods to use ` Exception ` instead of ` String ` for better error reporting to improve code clarity and maintainability by using a
updated drawImage method calls to use - x instead of x to ensure correct positioning of drawImage elements
updated comparison from ` size ( ) ` to ` size ( ) ` for ` solrDocument1 ` and ` solrDocument2 ` to ensure
refactor the condition for checking zero - high card dimensions in SetFunDef. java to improve clarity and maintainability of the code
updated StreamTaskException to include the exception cause to improve error handling by providing more context about the exception
refactor hashtag handling in Preprocess. java to improve code readability and maintainability
updated the return statement formatting in MessagePack. java to improve code readability and maintain consistency
added a new annotation ` Mapper ` in the ` org. apache. ibatis. annotations ` package to facilitate the mapping of XML
added a check to ensure that empty extensions and comments are not encoded when support isFhirComment ( ) is true to improve handling of
updated regex patterns and added null checks for external metadata entries in LibraryManager. java to improve robustness and prevent potential null pointer exceptions during artifact
added alias " node _ popup _ scripting " to the entry navigator in ScriptingMenuEntryVisitor. java to enable access to node popup scripting
updated HIDDEN _ FOCUSED _ SCROLL and HIDDEN _ SPLIT _ SCREEN in OverviewActionsView and RecentsView to
( chore ) camel - jms : use class instead of raw type
updated formatting in FieldSelector, Page, Restorable, and ServiceOptions classes to improve code readability and maintain consistency
deleted ` AbstractDelegatedVerb. java ` and ` FailureContext. java ` files to remove deprecated classes and improve code maintainability
updated GzipHandlerTest to use ` final ` for content variables and added a new servlet for handling micro content to improve immutability of content
use backpressureutils. getandaddrequest ( ) instead of consumercapacity. getandadd ( ).
refactor SpeedmentImpl to improve logging and streamline component management to enhance readability and maintainability of the code
add a new servlet class LoadDSpaceOAIConfig that loads configuration from the servlet context to facilitate configuration loading for the dspace
hbase - 2658 fix npe in storescanner ( # 2657 )
( chore ) camel - test - infra - nagios : enable and disable jmx for unit test
replaced hardcoded character'/'with a constant CANONICAL _ PACKAGE _ SEPARATOR in SourceLineAnnotation. java and SourceCodeDisplay. java
added methods to find YARN binary and Spark application information in Hive configuration to improve cross - platform compatibility for YARN applications
added support for Maria database connections in DbConnectionManager to enhance compatibility with Maria database management
hbase - 25836 splitlogmanager # getlogs ( ) return empty log instead of empty log ( ted yu )
added a new file ` ExecuteAndReturnStringTest. java ` for testing network error handling to facilitate testing of network errors in the application
added a new file InvokespecialInterface. java containing interfaces and methods to demonstrate the functionality of invokedynamic interfaces in Java
refactor EvictingBoundedList class to improve code readability and maintainability
removed conditional check for ` needsTurnCostsSupport ( ) ` and directly set the traversal mode in ` GraphHopper. java `
added a null check for the background disabled state in the SelectBox class to ensure that the disabled state does not contain a background disabled element
added a null check for the method name in RpcServer. java to ensure that unsupported operations are handled gracefully
refactor hotseatCellSize calculation to use border spacing instead of available width to improve layout consistency and maintainability of the code
updated the calculation of ` valString ` to use a new method for retrieving values to improve code clarity and maintainability by using a more des
added versioned support to NamedTaskDecorator and TaskDefinition classes to ensure proper serialization and deserialization of tasks based on version
updated index directory retrieval from ` getIndexDir ( ) ` to ` getNewIndexDir ( ) ` to ensure the correct directory is used for updates
changed the value of ` equal ` from ` false ` to ` true ` in ` DisplayModeTest. java ` to ensure that display mode
added handling for Unicode characters in UnicodeToLatexFormatter and updated test cases in HTMLUnicodeConversionMaps to ensure proper formatting of Unicode characters and
added checks for ISO control characters in OAIDCCrosswalk and Item classes to ensure proper handling of special characters in value processing
simonstewart : remember the last frame in the selenium - backed - selenium session
added a clear button to the DataBrowser and integrated it into the BookmarksPanel to enhance user experience by allowing users to clear all tables upon
refactor OAuth2AuthorizationRequestRedirectFilter to use UrlUtils for URL construction to improve code readability and maintainability by using a centralized approach
updated assertions and error messages in SoftAssertionsTest. java to improve clarity and maintainability of test assertions
updated the adaptOrders method to accept an additional boolean parameter for reverse order handling to enhance flexibility in adapting orders based on order type
added null and pos handling for tree vartype in PrettyPrinter. java and created a new Java11Var class to improve handling of null
simonstewart : migrate the test to junit 5.
updated Configuration initialization to disable Hadoop configuration overrides to improve flexibility in managing Hadoop configuration properties
replaced super. drawChildren ( batch, parentAlpha ) with super. draw ( batch, parentAlpha ) to ensure proper rendering of child elements
added unit test base on user forum issue
replaced System. getProperty ( Globals. CATALINA _ BASE _ PROP ) with context. getCatalinaBase ( ) in multiple files
added unit tests for the ` getBestDateTimePattern ` method in ` ShadowICUTest ` to ensure correct retrieval of time patterns based on
updated color codes in PlotSquared to use Minecraft color codes to improve visual consistency for PlotSquared components
added support for ZuulProperties in TraceRestClientRibbonCommandFactory and TraceZuulAutoConfiguration to enable flexible configuration of
added TimeZone settings and assertions in FontParsersTest. java to ensure proper handling of UTC time in font metadata
added new files SampleApplication. java and modified BuildInfoMojo. java to include a build time parameter to enhance functionality by allowing custom build time
modify the calculation of xDist to use the absolute value of mScroller. getCurrX ( ) instead of a fixed value to improve accuracy
deleted the GUIRWTester. java file to remove unused code to streamline the codebase
removed nullability annotations from countPlaceholders method across multiple classes to simplify method signature and improve code clarity
updated the error message format in TestStream. java to improve clarity of error messages
changed access level of ThymeleafTemplateReader from package - private to public to allow access to the ThymeleafTemplateReader from other packages
added unit tests for XPathString in XPathTest. java to ensure correctness of XPath expression evaluation
added @ Nullable annotation to FutureUtils. java to indicate that the value may be null or undefined
don't print warning when invokedynamic be not resolve during call graph construction.
updated email addresses in ContextTest. java to improve test clarity by using an example email address
updated HTTP response formatting in HttpConnectionTest. java and modified URIUtil. java to return false instead of throwing an exception to improve test reli
added ` getColumnDataType ( int columnIndex ) ` method to ` AbstractResultSet ` and ` ResultTableResultSet ` classes to provide a way to retrieve
added default implementations for various interface methods in AsyncClientInterface, SyncClientInterface, AwsClient, and V2TestDynamoDbBase
updated HSSFPictureData class to improve picture handling functionality to enhance image processing efficiency and maintainability
replaced ` long ` with ` Instant ` in ` Statistics. java ` and updated ` startTime ` to use ` Duration. between ( ) `
updated version handling and logging in LibMediaInfoParser. java to improve clarity and maintainability of versioning logic
added methods to create a proxy for IdeaDependency in ProjectReader. java to improve dependency management and logging for IdeaDependencies
added SerialHeap class and updated Universe to use it to support serial garbage collection in the application
added multiple @ SuppressWarnings ( " serial " ) annotations to Gson $ Types. java to suppress warnings related to serialization issues
use mouse. getposition ( ) instead of mouse. getposition ( ) for mouse wheel event.
datamongo - 1608 - fix nullpointerexception in findbyfirstnamecase
[ hotfix ] [ table - common ] fix incorrect return value in maptypeinfo
added a method to retrieve identity providers by issuer in XOAuthProviderConfigurator and corresponding test cases in XOAuthProviderConfiguratorTests to improve error handling
added handling for delimiters in CMapParser and created a test for parsing withPoorWhitespace in TestCMapParser to improve parsing accuracy and
refactor ContactsBackupJob to use OperationsServiceConnection for service management to improve code maintainability and facilitate better management of operations
refactor type constraints and introduce new classes T6938454a and T6938454b to improve type handling and introduce new classes T69
added a check for ` isConfigHidden ( ) ` in ` AccountList. java ` and implemented it in ` ProtocolProviderFactory. java
added logging for inconsistent number of displays in DisplayController. java to improve error reporting and debugging capabilities during display updates
removed schema key from PMetaDataImpl and added a test for schema removal in PMetaDataImplTest to ensure proper handling of schema deletions and
ggtapi : fire passive login only when the action be loginpassive
added a new ` Box2DTest ` class and modified related methods in ` Box2DTest. java ` to improve test coverage and
use ` ` < anonymous >'' instead of ` ` - deleted -''
[ hotfix ] [ test ] increase default buffer request timeout to 5 minute.
feat ( gapic ) : upgrade gapic - generator - java to 2.7. 0 and update gax - java to 2.16. 0
added a help button to OpenOfficePanel to enhance user experience by providing quick access to help information
[ java ] use childoption instead of option for tcp _ node _ delay.
updated method signatures to use wildcard types for ` IOException ` and ` BinanceException ` in ` BinanceAuthenticated ` and ` BinanceAccount
added a transient class reference to the class in ScanResultObject. java to improve memory management and prevent potential NullPointerExceptions
refactor connection and response handling in DecodeServlet. java to streamline error handling and improve code readability
added a null handling method to the Querydsl class and created a new test class for JPQL queries to enhance query handling capabilities and ensure
added null checks for actions in ParallelAction and SequenceAction classes to ensure actions are processed only when the actor is not null
updated test cases and assertions in CtTypeTest. java to improve test coverage and ensure correctness of type filtering
added synchronization to manage thread safety in HDFSEventSink. java to ensure thread safety when closing writers
added a new interface ` Issue888 _ JavaI ` and a test method ` JJ ` and ` JK ` in ` Issue888
added a command to revoke an existing certificate in the CertificateManager class to enhance certificate management by allowing users to revoke existing certificates
added a test for handling no body responses in AbstractHttpTest. java and implemented a corresponding test in HttpServerTestBase. java to ensure proper
added error handling for loading scripts in ScriptTransformer. java to improve robustness by ensuring scripts are only used in Java 6 or above
updated METASTORE _ CONNECTION _ POOLING _ TYPE to use StringSet for DBCP and HikariCP configurations to enhance connection pooling
replaced calls to ` pressHome ( ) ` with calls to ` mLauncher. pressHome ( ) ` across multiple test files to ensure consistent
added functionality to filter and display locked files in FileMenuFilter and OCFileListFragment to improve user experience by allowing users to manage file locks effectively
updated versioning logic in mmm Version. java and ppp Version. java to improve code clarity and maintainability
clear endpoint cache upon keyspace update
added a private method ` waitForState ` to encapsulate thread state waiting logic to improve code readability and maintainability by encapsulating state waiting logic
replaced the method ` getCoercedAttrValues ( ) ` with ` SkylarkRuleContextAttr. of ( ) ` in multiple files to
simonstewart : move the storage interface to a new interface ` Storage ` and create a new file ` LocalStorage ` and `
add a check for existing views before checking their new row type in PlanExecutor. java and update test cases in CreateViewStatementTest. java
changed exception handling from Exception to Throwable in SegmentGenerationJobRunner. java to improve error handling by catching all potential exceptions
updated the query string retrieval logic in SpellCheckComponent. java to ensure the correct query is used when no query string is provided
added validation for HTTP header values to ensure that illegal characters and whitespace are handled correctly
replace instanceSize with arrayBaseOffset in HybridLayout. java and update afterFieldsOffset in HostedInstanceClass. java to improve clarity
[ apex ] add @ experimental annotation to astcommentcontainer ( # 2451 )
hhh - 10863 - log a warning if association with a join be not lazy.
refactor NoGetOperationsFilter, NoUserOperationsFilter, and RemoveInternalParamsFilter to extend AbstractSpecFilter instead of implementing SwaggerSpecFilter to
added assertions to verify database and table names in TestCompactionTxnHandler and TxnHandler to ensure correct retrieval of database and table names from the
camel - 16400 : added support for graceful shutdown in camel - core
added a conditional check before adding traces and removed the current block from the worklist to ensure traces are only added when the block is processed
updated the check for non - null providers in ProviderManager to ensure proper handling of null values in the ProviderManager
simplified the condition for retrieving the database version in InsertOrUpdateGeneratorPostgres. java to streamline the logic for determining the database type
added pagination tests in LocalIndexIT. java and updated ExplainTable. java to handle pagination more effectively to improve test coverage and ensure correct
added a check to ensure that a collection with the same name and a different type is used in the past to prevent operations on the same collection
updated cursor calculations in VDUBuffer and vt320 classes to ensure correct cursor positioning based on screenBase changes
removed the constant USE _ RETRIES from HttpShardHandlerFactory to simplify the code by eliminating unnecessary configuration
updated the version number format in JavaVersion. java and added a test for Java version parsing in TestJavaVersion. java to ensure consistency in
added a check to return early if all input gate is empty to avoid unnecessary processing when no input gate is available
added a test method to the TestReceivingMessageSourceParserTests class to facilitate unit testing of the ReceivingMessageSourceParser functionality
updated null check for properties in RemoteCluster. java to enhance robustness by preventing potential NullPointerExceptions
modify IOException handling to include the original cause to improve error reporting by providing more context on file opening issues
updated error messages in AmbariManagementControllerImpl, ClusterStackVersionService, CheckDescription, AmbariManagementControllerImpl, ClusterImpl, and
added a TxConfidenceListener to the service and removed it from the walletService to streamline the handling of transaction confidence updates
added a constant for G1 Perm Gen in JmxSupport. java to support G1 Perm Gen functionality in the application
removed duplicate import statements and simplified return statements in NearbyController. java to improve code clarity and maintainability by eliminating redundancy
pdfcloneutility : make it public so that it can be use by other class
added checks to ensure the activity type matches the home activity type in BaseSwipeUpHandlerV2. java to improve accuracy of swipe up gesture
renamed DefaultEdgeClientFilter and EdgeAddHeaderClientFilter to EdgeAddHeaderClientFilter and updated relevant constants to improve clarity and maintainability of
updated method names and added null checks for network and sim Ios in ShadowTelephonyManagerTest. java and ShadowTelephonyManager. java
removed unfreezeAmount assignment from UnfreezeBalanceV2Actuator to streamline the code by eliminating unnecessary dependencies
updated descriptions for published timeslot and room in ConferenceSchedulingXlsxFileIO. java to accurately reflect the published timeslot and room
replaced Google Commons IO with Apache Commons IO for file copying to improve code maintainability and reduce dependencies on external libraries
refactor multiple assertion classes for improved consistency to enhance maintainability and readability of the codebase
refactor Observable class to improve code readability to enhance maintainability and facilitate future updates
added support for multiple pushAll operations in the Update class and corresponding test cases to enhance functionality and ensure correct pushAll functionality in MongoDB updates
added a null check for the UUID before setting the hubChangeLog ID to avoid potential NullPointerExceptions when the UUID is not set
added hover event handling in InputConsumer and OverviewInputConsumer classes to enable quickstep live tile support during hover event processing
added a condition to check if the bootstrap configuration is set based on the server's configuration to ensure that the bootstrap configuration is only applied when
updated maxHeadersSize label from " 8192 " to " 8192 " in multiple configuration classes to improve clarity and consistency in header size configuration
hbase - 2658 set hbase _ client _ retry _ number to a value of 15
updated file path construction in SourceSnippetHelper. java to ensure consistent path formatting for file paths
make test more robust to cache invalidation.
updated query commands in SchemaCrawlerTextCommandsOutputTest to use " all _ tables " instead of " customer _ count " to improve clarity
added support for retrieving and adapting Kraken assets in KrakenAdapters to ensure accurate currency metadata is maintained for Kraken
added ` toString ( ) ` method to ` AnyOf ` class and created a new test class ` AnyOf _ toString _ Test ` to
refactor email handling in AlertTaskRunnerV2. java to improve clarity and maintainability of email generation logic
added checks for non - blank measurement settings before publishing in InfluxDBPublisher to ensure that metrics are only published when the measurement is not blank
added downcast ( Number argument ) method to multiple converter classes to ensure proper handling of null values during transformation
added filtering conditions for unique local addresses in NetUtils. java to improve network reliability by ensuring unique local addresses
added a method to quote column names in DataTextFormatter to ensure proper handling of column names during formatting
added methods for setting, getting, and retrieving properties in WrapSystem and StrUtils classes, and updated method names in CompileMethodEntity to enhance
added a constructor to the UpdateRequest class that accepts a URL parameter to facilitate the creation of the UpdateRequest instance using a specified URL
renamed enum ` EnumSerialization ` to ` EnumSerialization ` across multiple files to improve clarity and consistency in naming conventions
removed the addExperimentalFormatWarning method from DataImportHandler, ReplicationHandler, and RequestHandlerUtils to streamline response handling by eliminating unnecessary
added formatting for module names in JpmsUtil. java to improve readability of module names for better debugging
bugfix : row height be set to font size of label. font
[ hotfix ] [ broker ] fix npe in defaultbrokerheartbeatmanager
replaced the initialization of ` meanPartitionSize ` and ` partitions _ count ` with ` partitionCount ` and ` splitCount ` in ` C
simplified the condition for checking the name's type in JUnitTestsShouldIncludeAssertRule. java to improve code readability and maintainability
[ drools - 7 ] add equal and hashcode method to ruleterminalnodelefttuple
added support for StageIDsRearranger in TezCompiler to enhance performance by optimizing identifier resolution based on configuration
change mbean name from " org. apache. cassandra. concurrent : type = MESSAGING - SERVICE - POOL " to " org
updated memory management logic in LotsOfOutput. java to improve memory consumption logging for better debugging and monitoring
added import statements and updated dimension configurations across multiple facet classes to enhance documentation clarity and maintain consistency in dimension configuration
renamed fields and methods related to anonymous readiness in LdapProperties and LdapAutoConfiguration to improve clarity and consistency in context source configuration
refactor DatabaseMetaData class to improve code readability to enhance maintainability and facilitate future updates
( chore ) camel - aws2 - e2e : add test to runwith ( junit4 )
added ` finishMocking ` method to ` MockitoSession ` and overridden it in ` DefaultMockitoSession ` and ` StubbingWarningsTest
updated the order of declared dependencies in GoTestDescription. java and added new test cases in GoTestIntegrationTest. java to improve dependency management
replaced ` ByteBuffer buffer ` with ` ByteBuffer writeBuffer ` and ` writeHandler `, and introduced ` readBuffer ` and ` writePending `
updated block retrieval from ` getStaticBlock ` to ` getFlowingBlock ` in ` BlockLiquidWrapper. java ` to ensure the
updated background class handling in AndroidLocationPlayServiceManager and BackgroundLocationHandler to improve URL parsing and ensure proper location listener retrieval
( chore ) camel - apr : fix typo in doc
[ hotfix ] [ table - planner - blink ] use streamingplan instead of optimizedplan
reduce the amount of data in craftingmanager. getRecipe ( ) from 10 to 16 to improve the accuracy of item hash calculation
[ flink - 3594 ] [ test ] fix test failure on window.
updated whitespace handling logic in TabsAndIndentsVisitor. java to simplify indentation checks for better readability
added regex pattern matching for PostgreSQL temporary files in NeuteredLinesFilter to enhance functionality by allowing temporary filenames to be processed
chore ( deps ) : upgrade gapic - generator - java to 2.7. 0 and update gax - java to 2.16. 0
added handling for " INTERVAL " data type and added support for NCLOB data types to improve data type handling and support for NCLOB data types
added a check for publishinging the histogram in WavefrontDistributionSummary and WavefrontMeterRegistry to ensure proper handling of watermark
updated the handling of divide upstream URLs in ` ShenyuClientRegisterSpringCloudServiceImpl ` and ` DivideUpstreamUtils `
added a new method ` registerListener ` to the ` ShadowSensorManager ` class to enable registration of sensor listeners with specified rate and maximum latency
added SSL test methods in SelectChannelServerSslTest. java to ensure proper handling of socket exceptions during SSL operations
added null check before closing ignite in IgniteComponent. java and changed access modifiers in AbstractFeatureTest. java and CamelIgniteTest. java
added conditional statements for handling empty lines in AbstractClient. java to improve clarity of output when no line is set
pdfbox - 4892 : catch unsupportedimageexception instead of ioexception
added tests for ` setDisplayHdrCapabilities ` in ` ShadowDisplayTest ` to ensure proper functionality of display capabilities
added a finally block to reset classLoader to null to ensure proper resource management and prevent potential memory leaks
updated error messages in SemanticAnalyzer for clarity and added a new toString method in SemiJoinHint to improve error reporting and provide better insights
added a default constructor to the Message class to enable instantiation of Message objects
added handling for GUI class priority in SerializableIdiom. java to improve bug reporting for non - AWT components
updated PhoenixDecimalObjectInspector to accept PrimitiveTypeInfo instead of byteValue ( ) to enhance type safety and enforce precision scale during decimal object creation
updated GZIP output stream handling and added conditional logging in CompressionFilterTestServlet and CompressionResponseWrapper to improve response management and enhance debugging capabilities
updated the ` getAuthorization ` method to accept a ` authenticateHeader ` parameter instead of a ` WWWAuthenticate ` to enhance flexibility in
removed conditional checks for specific directory paths in DCD. java to streamline the code by eliminating unnecessary checks
added a method to retrieve thread group name in ThreadLeakTest. java to improve clarity and maintainability of thread handling logic
added logging functionality and refactored afterPropertiesSet method in MethodInvocationPrivilegeEvaluator. java to improve error handling and logging clarity during property setting
changed the package of DmozParser from ` org. apache. nutch. crawl ` to ` org. apache. nutch. tools
updated import statements in RegisteredServiceChainOperatorTypes and ChainingRegisteredServiceDelegatedAuthenticationPolicy to improve code clarity and maintainability
kvm : add iso path to storage pool for user vms
refactor signal handling logic in SigInt. java and SigIntTest. java to improve clarity and maintainability of signal handling tests
replaced static import of ArrayUtils with utility method call to improve code readability and maintainability
updated AxonAutoConfigurationWithSpringCloudTest to use Spring Boot auto configuration instead of ContextConfiguration to enable Spring Cloud client discovery and improve test
added multiple @ Override annotations to ColorRGBA. java to improve code clarity and maintainability
planningentityselector. setresetinitializedplanningentities ( false ) should reset initialized planning entity before use
updated build time handling in TwoLevelArtifactCacheDecorator and CachingBuildRuleBuilder to improve accuracy of build time calculations
replaced field retrieval methods from ` getFields ( ) ` to ` getDeclaredFields ( ) ` in ` GroupByOperator. java ` to improve clarity
added null checks before adding blocks to the wallet to prevent potential NullPointerExceptions when adding blocks
added support for CNC currency pairs in BTCEUtils and TickerDemo to enable trading options for CNC currency pairs
updated skewAllowance from 5 to 15 and added @ Column annotation to enhance flexibility in handling skew allowance values
updated sorting logic in SongListActivity and Utils to use ItemSortBy instead of ItemSortBy to improve code clarity and maintainability by using
removed unused method ` readBodyToBytesIfNecessary ` from ` Utils. java ` to streamline the code by eliminating unnecessary dependencies
added a new class ` LegacyBaseBlockWrapper ` and updated imports in ` MobSpawnerBlock `, ` SignBlock `, and
updated IcebergBranchExec to handle tag existence more robustly to improve error handling for invalid tags during branch creation
replaced the import of Lists. newArrayList with Collections. singletonList for setting an external group whitelist to simplify the code and improve readability by using a standard
updated field names and logic in PhotonMappingDemo and HybridDemoSsboInstancing classes to improve code clarity and maintain
added debug and info logging for password change requirement in IdentityProviderEndpoints. java and updated test cases in IdentityProviderEndpointsMockMvcTests. java
removed uninitialized fields from constructors in UnreadFields to ensure that only relevant fields are initialized in the constructor
added conditional URL assignment based on the connection state to ensure proper error message is displayed when the connection is closed
added a test method to verify the presence of user data and user name in the SpringmvcClient to ensure proper handling of user data and user
updated regex patterns for user and password in CredentialInjector. java and CredentialInjectorTest. java to improve accuracy in matching user and password configurations
added " Item4 " to the menu items in ActionListenerCalledTwiceTest. java to enhance functionality by allowing additional items to be added
updated print statements and assertion logic in TestCoreParser. java to improve clarity of test output and ensure proper handling of produced results
updated equality checks in SimpleNode. java for better readability to improve code clarity and maintainability
changed the access modifier of the PopulatorContextStackItem class from public to package - private to allow access to the PopulatorContextStackItem
updated numDocs retrieval logic in MoreLikeThis. java and added a test for small sample from corpus in TestMoreLikeThis. java to
refactor quest condition handling in QuestManager. java to improve readability and maintainability of the code
[ hotfix ] [ test ] make networkbufferpooltest extend testlogger
updated the query syntax in MongoSessionDataStore. java to ensure correct syntax to improve code readability and maintainability
added a macro substitution for ` CustomizedUnsafeLoadMacroNode ` in ` CompilerDirectivesSubstitutions. java ` to enable the use of
updated time zone entries from ARAST to EET across multiple TimeZoneNames classes to ensure consistent time zone representation across the application
updated the ID from 90000010 to 90000011 in DeprecationLogger. java to reflect the correct ID used for logging purposes
hhh - 10866 - fix jdbcexception in sessionimpl
modified the handling of external file links by adding checks for empty suffix and returning an empty string to improve robustness and prevent potential errors when no
set apple laf screen menu bar to false on macos
added a new test method ` piecewiseIntegration ` to the ` GeoGebraCasIntegrationTest ` class to validate integration of piecewise
changed access modifiers of ` STATE _ SCREENSHOT _ CAPTURED ` and ` switchToScreenshot ` methods in ` BaseSwipeUpHandler
added a new test method ` testConfigWhiteList ` to ` HiveConf ` and a corresponding test in ` TestJdbcWithSQLAuthorization `
added entry to invalidClasses in EntryLoader. java to ensure proper handling of invalid class entries
update the target coordinate retrieval from the sharded team to the player team to ensure the correct target coordinate is used based on the player's
updated cookie domain assignment from " comp1 " to " domainHelper. getHostName ( ) " to ensure the correct domain is used for the cookie
added checks for nullable columns and tables in ` ColumnSnapshotGenerator ` and ` MissingTableChangeGenerator ` to ensure proper handling of nullable columns and
refactor multiple Security token - related classes to improve code organization and maintainability
added document deletion and commit operations in CustomCollectionTest. java and changed separator and bitsSeparator to static final in CompositeIdRouter. java to improve
added snapshot handling functionality in ` ExecutablePreparedStatementBase ` and ` PostgrentegrationTest ` to enhance database snapshot management and improve test
updated conditional checks and formatting in DefaultServlet. java to improve code readability and maintainability
added drag - and - drop functionality to JabRefFrame for tab navigation to enhance user experience by allowing drag - and - drop operations on
updated ExecutionUnitRunner and CucumberTest to use Description instead of createDescription to improve clarity and maintainability of description handling
replaced ` myVersion ` and ` buildTimeString. isEmpty ( ) ` with ` StringUtils. isNotEmpty ( ) ` to improve code readability and
removed the ` public ` modifier from several methods in ` TimeUtils ` and updated package structure in ` TimeUtilsTest ` to improve accessibility
updated security frame handling logic in RefectionMHTests. java and modified conditional checks in RefectionMHTests. java to improve compatibility
updated file extension check from " jpg " to ". jpeg " in PreviewImageFragment. java to ensure proper handling of file extensions in the
[ gr - 33904 ] fix nativeimagedebuginfoprovider to correctly return the current class name.
added getIcon ( ) method to multiple Data classes and implemented getIcon ( ) method in DataTableTopComponent to provide a way to retrieve the icon for
refactor substring extraction logic in CounterRequestAggregation. java to handle cases where the last lastIndexOf is not - 1 to improve robustness by avoiding substring
updated regex replacement logic in FindAndReplace. java and added a test for dollarsignsTolerated in FindAndReplaceTest.
smack packet debugger now support remote address and local port.
refactor SchemaExtractionProcessor to improve code readability to enhance maintainability and facilitate future updates
added a new method ` copyDir ` to handle directory copying in ` IO. java ` and updated imports in ` SpecWebAppTest. java
added error handling for Unknown datum class in JacksonUtils. java to improve robustness by providing clearer error messages for unknown data types
refactor build rule handling in DefaultJavaLibraryBuilder to utilize BuildTarget for class and source ABI jar retrieval to improve accuracy of ABI jar artifact
refactor height calculation for item and background padding in SelectBox. java to improve readability and maintainability of height calculations
added normalization of database and table names in ObjectStore. java to ensure consistent identification of database and table configurations
added support for oracle database in DbSqlSession to ensure compatibility with both PostgreSQL and Oracle databases
replaced the call to Logout with a call to getActivity ( ). finish ( ) to simplify the code by eliminating unnecessary logging since the
[ hotfix ] [ runtime ] make mockstreamingruntimecontext # numparallelsubtasks # 1337 a default value
replaced the method of retrieving the priviledged list with a null check to improve robustness by avoiding potential null pointer exceptions
updated the managed bean check logic in ContainerLifeCycle. java and updated assertions in ContainerLifeCycleTest. java to improve clarity of managed beans
replaced IExecutionAttributesDialect with IExecutionAttributeDialect across multiple files to align with the new execution attribute naming conventions
clear the metadata in AlterTest. java to ensure proper resource management and prevent memory leaks
added null checks for loc in CmdGetTime. java to prevent potential NullPointerExceptions
added null check for measurement in TabletInsertionDataContainer. java and created a new DisruptorQueueExceptionHandler class for error handling to improve
deleted the ` Session2Token. java ` file to remove unused or redundant code related to session management
cloudstack - 7091 : destroy dest volume after successful volume creation.
added a new ` Install ` functionality to the ` SystemShortcut ` class and integrated it into the ` PopupDataProvider ` and ` InstantAppResolver
added a NullAuthoritiesPopulator to the LdapAuthenticationProvider class and updated its usage in LdapAuthenticationProviderTests to ensure proper handling of null
updated retrolambda handling in CN1BuildMojo. java and added fallback logic in CN1BuildMojo. java to ensure retrolambda
removed the call to ` buildOrThrow ( ) ` from ` ShadowCamera. java ` to streamline the code by eliminating unnecessary operations
replaced FixedBitSet with Apache Lucene's built - in Bits in the sortLiveDocs method to simplify the code and improve maintainability by using
added handling for null results in JMESPathExtractor to improve robustness by handling potential null values gracefully
updated import statements and added null check for authorities in AuthorizeTag. java to enhance code robustness and prevent potential NullPointerExceptions
updated logout URL assertions to use ` toExternalForm ( ) ` instead of ` toExternalForm ( ) ` to ensure consistency in URL formatting
cs - 15422 : fix typo in vmsnapshotmanagerimpl. java
refactor configuration handling in RobolectricTestRunner and related tests to improve clarity and maintainability of configuration logic
replaced SelectChannelConnector with SocketConnector in JettySolrRunner. java to improve compatibility with the latest NIO and bio connectors
refactor partition key comparison logic in HiveAlterHandler. java to improve clarity and maintainability of partition key comparisons
added a new debug flag ENABLE _ ICON _ IN _ TEXT _ HEADER to FeatureFlags. java to enable the icon in the textheader
corrected formatting of the condition in SimulationStatus. java to improve code readability and maintain consistency
replaced SharedBlockingCallback with Callback. Completable in StandardDeployer and StandardUndeployer classes to simplify asynchronous handling and improve resource management
added workspace listener functionality to the PreviewControllerImpl class to enable better management of workspace events within the PreviewController
added checks for non - VM anonymous classes in ReflectionFactory and ReflectUtil to ensure correct handling of anonymous classes during reflection operations
refactor TransportHelper class to improve code readability to enhance maintainability and facilitate future updates
updated file path format in CatalinaAcegiUserRealm. java to ensure consistent file path formatting
updated log messages for server initialization and action manager start in AmbariServer. java to improve clarity of log output for better debugging and monitoring
added null checks and improved readability in JSONWriter. java to enhance robustness and prevent potential NullPointerExceptions
refactor ` run ` method to use ` FileSystem ` instead of ` HDFSClientRunnable ` to improve clarity and maintainability of the code
added a conditional check to ensure the background manager is detached before attaching it to prevent potential errors when the background manager is not attached
added functionality to set the current tab in AllAppsTabbed, Launcher, PagedView, and Workspace classes to improve tab navigation and ensure
added a null check for the URL in BaseDataSource and created a test for it in SimpleDataSourceTest to ensure that the URL is valid and
added EnabledOnJre condition and updated PebbleTemplateEngine instantiation in PebbleModuleTest. java to enable the Pebble
added EditNameDialog functionality to FileDisplayActivity to enhance user experience by allowing directory creation and deletion of files
added functionality to toggle bar borders in multiple chart activities to enhance user experience by allowing toggling of bar borders in charts
updated SSL URI from " https : / / www. okcoin. com / api " to " https : / / www. okex
jbrules - 2845 : fix test pickmovefirstlastscoreimproving and acceptedforagertest
replace FileChannel with SeekableByteChannel for reading files to improve performance and readability of file reading operations
refactor the ` getFlattenFieldTransferPair ` method to use a ` FieldReference ` for field references to improve code clarity and maintainability
rename ` MockHandler ` to ` MockHandlerImpl ` and update related references accordingly to improve clarity and consistency in naming conventions
added a check for LAMBDA _ CAPTURING _ SERIALIZATION _ TYPES in SerializationConfigurationParser. java to ensure proper
added a heap limit configuration for debug devices in QuickstepProcessInitializer. java to optimize memory usage for debugging purposes
refactor the sumWithCompensation method to store the result of multiple operations to improve clarity and maintainability of the code
added a boolean variable ` shouldRethrow ` and modified conditional checks in ` AbstractLoadBundleTest. java ` to improve test clarity by
updated error handling in PrecompactedRow. java to improve clarity and maintainability of the code
updated rendering intent logic in ICC _ Profile. java and added a new test class InvalidRenderIntentTest. java for color conversion functionality to
added MeterRegistryLifecycle to MetricsAutoConfiguration to manage and shutdown meter registries to improve resource management and ensure proper shutdown of MeterRegistry instances
changed log level from warn to info in ConfigurationUtils. java to improve logging granularity for config center configuration items
added error handling for generating a certificate in CertificateFactoryTest to ensure proper certificate processing and prevent runtime exceptions
added support for ambiguous binary operators in SimpleTokenizer and created a test for it in SimpleParserPredicateTest to enhance functionality for parsing predicates with ambiguous
refactor focus handling in EditorActivity and IDEEditor to improve focus management to ensure windows are properly dismissed when focus is gained and focus is
added the user name to the error logging in AccessLogValve. java to ensure the error is logged with the correct user context
updated texture scaling and added null check for getSubmeshnames in OgreXmlLoader and SkeletonModelViewer to improve texture scaling accuracy and prevent
removed the ` throws InterruptedException ` declaration from the ` createOrThrow ` method to simplify error handling by eliminating unnecessary exception handling
added @ Deprecated annotations to UpgradeResponse. java to indicate that these classes are outdated and should not be used in future development
added functionality to generate TypeScript declarations and options in JSweetCommandLineLauncher, JSweetOptions, and JSweetTranspiler classes to enhance TypeScript
[ hotfix ] [ stream ] add support for kinesis fetch timeout in streamconfig
added a new file extension ". html " to the timestamp in StreamingDataflowWorker. java to ensure the timestamp is correctly formatted for HTML
increased the default value of METASTORESERVERMAXTHREADS from 100000 to 1000 to accommodate larger metastore server configurations
changed the return type of onTaskSnapshotChanged from void to boolean to enable the method to return a boolean indicating success
updated the shadow radius setting from mMaxShadowRadius to shadowRadius to ensure the correct shadow radius is applied based on the current value
added a test for chain nesting and aggregation in ChainParserTests. java to ensure that the messagechannel correctly handles nested and aggregation scenarios
updated loop condition from ` limit ` to ` end ` and added a failure message in ` MarketSellAssetActuatorTest. java `
change the condition from checking if the source is an active source to checking if the source is an interactive source to ensure proper handling of interactive
updated conditional logic in CreateKeytabFilesServerAction. java to enhance readability and maintainability of the code
added DisplayController import and included WindowManagerProxy in LauncherPreviewRenderer to enhance functionality by integrating DisplayController functionality
updated tooltip text for root directories in MetalFileChooserUI and SynthFileChooserUI to improve user experience by providing clearer context about the root directory
replace getToolkit ( ). getScreenSize ( ) with Toolkit. getDefaultToolkit ( ). getScreenSize ( ) to ensure compatibility with the default
change return type of recognise method from List <? extends RecognisedObject > to List < CaptionObject > in TensorflowRESTRecogn
added unit tests for JPASQL functionality and refactored entity persistence in JPASQLBase. java to improve test coverage and ensure correct
removed debug print statement for point removal in FreeformFinSetConfig. java to streamline the code by eliminating unnecessary debug output
update moe version in DependencyBank. java to ensure compatibility with the latest moe releases
updated error message from " constant canot set call value. " to " constant cannot set call value. " and added spendAllGas
updated error messages to include non - whitespace formatting in ElementsShouldSatisfy and ZippedElementsShouldSatisfy classes to improve readability and
added @ Deprecated annotation to Weights class to indicate that the class is outdated and should not be used in new development
refactor registration logic into a new method ` registerUnsafePlugins ` to improve code readability and maintainability by centralizing the registration logic
added Hint annotations to AndroidAppModularityDescription and AndroidGraphEnhancerArgs, and created a new Sample class for Android app modular manifest
changed mCenterPagesVertically from true to false to disable vertical centering of pages for improved user experience
[ hotfix ] [ table - planner - blink ] fix race condition in migrationrequestoperation
updated KonnectedBindingConstants to use BASE _ URL instead of HOST to improve clarity and maintainability of configuration handling
updated ` attributeValue ` to ` List < Object > attributeValue ` and modified related logic in ` WSFederationClaimsReleasePolicy ` to
added database creation and query processing in TestJdbcWithMiniLlap. java and LlapBaseInputFormat. java to enhance database compatibility and improve
added a test case for handling nested case expressions in SQL queries to ensure correct parsing and deparsing of SQL queries involving nested cases
added functionality to start copying mode based on touch events in ConsoleActivity to improve user experience by enabling copying functionality on devices running Android SDK versions
replaced XML output handling with a try - with - resources statement to improve resource management and facilitate XML processing
added null check for exchange in AbstractListAggregationStrategy and created a new test class CustomListAggregationStrategyEmptySplitTest to ensure proper handling of
camel - core - use camelexchangeexception. createexceptionmessage ( string, exchange, throwable ) instead of exchangehelper. createexceptionmessage (
updated package structure for BasicConfigurator and related classes to improve organization and clarity of the logback classic configuration
added a condition to check if targetVN does not already contain the PHI _ NODE flag to ensure that the PHI _ NODE flag
removed unused import of SharedStringSource in TestXSSFRichTextString. java to streamline code by eliminating unnecessary dependencies
added a new method ` invokeMethod ` to the ` ObjectInvokeHelper ` class to facilitate method invocation within the ` ObjectInvokeHelper
refactor BoxAndWhiskerCalculator, BoxAndWhiskerCategoryDataset, BoxAndWhiskerXYDataset, HistogramBin, Histogram
[ hotfix ] [ test ] migrate Readablewritableconfigurationtest to junit 5
changed the access modifier of ` NormUpdate ` from private to static and updated conditional checks for field equality to improve accessibility of ` NormUpdate
changed access modifiers of IndexFileNameFilter from public to private to restrict access to the singleton class for better encapsulation
refactor ifstatementtest to use testplugindefinition ( ) instead of testplugindefinition ( )
replaced ` getPutOnlyTableHeaderRow ` with ` getTableHeaderRow ` in ` ConnectionlessQueryServicesImpl. java ` to ensure consistency
removed Gson registration and null safety checks in TypeAdapter. java and StreamingTypeAdaptersTest. java to streamline code by eliminating unnecessary
updated the expected size in the BundledDistributionTest from 12 to 13 to reflect the correct number of elements in the distribution
added a new file EXIFReader. java to handle EXIF metadata extraction to enable extraction of EXIF metadata from various image directories and improve
changed the visibility of the ` toStandardUnit ` method from private to default to NONE and updated the return value to NONE to ensure consistent behavior
jbpmloud - applypmmlmodelcommand now throw an exception if the request parameter do not match.
improve message formatting in FluentProtocol. java to enhance clarity of received messages during peer startup
added a check to return early if the bubble bar is visible to avoid unnecessary processing when the bubble bar is not visible
clear conservative label range when compile with graalvm
added a try - finally block around the initialization of the JDKLogManager in JDKXRLogger. java to ensure proper resource management and
added ` find ( Class < Ticket > ticketClass ) ` method to ` TicketCatalog ` and modified logging statements in ` DefaultTicketCatalog `
refactor SSL connection setup and assertions in TestSSL. java to improve code readability and maintainability
[ hotfix ] [ runtime ] fix npe in sortmeremultpartitionreadscheduler
( chore ) camel - jms : use long. max _ value instead of long. max _ value
updated PluginHandleController and PluginHandleDTO to include a new integer type and sorting parameters to enhance functionality by allowing customizable plugin types and sorting
replaced ` start ( ) ` method calls with ` start ( ) ` method calls in ` DefaultSpanCreator ` and ` SleuthAdvisor
added GLKViewDrawableColorFormat, depthFormat, stencilFormat, and multisample configurations to IOSGraphics and IOSApplicationConfiguration to
refactor user login attempts in LoginIT. java for improved clarity and maintainability to enhance test reliability and facilitate easier login attempts
[ pytorch ] fix unsupportedoperationexception in jniutils
replaced ` isInterrupted ( ) ` with ` do { while ( t. isInterrupted ( ) && t. getState ( )! = state
refactor Implements and ShadowPicker classes to improve code organization and maintainability
refactored the creation of HTTP client options in RestTransportClient. java and TransportClientConfig. java to improve code organization and maintainability by
added support for DynamicArray class and improved type name handling in SolidityFunctionWrapper and SolidityFunctionWrapperGenerator to enhance functionality and
added a boolean parameter to getFloatProperty calls in InlineLayout and FontUtil classes to enable property retrieval for font size and alignment
added constructors to ` CopyStep ` that accept a ` Path ` parameter and a ` boolean shouldRecurse ` flag to enhance functionality by allowing
fixed - rseemaphore. addpermits ( ) method don't return anything if addpermits ( ) return false.
( chore ) camel - jbang : fix flaky test
added a new ` FlavorParser ` class and updated ` BuildTargetParser ` to utilize it for parsing flavor strings to improve code readability and maintainability
changed data types from List < String > to List < ByteString > in WitnessScheduleStore. java to support both String and ByteString data types
added a conditional check before printing results in TestElementsAnnotatedWith. java to avoid printing empty results when processing results
refactor ConcurrentLinkedQueue to improve null handling and add a new class RemoveLeak to enhance robustness and demonstrate removal of elements in a concurrent
added a boolean parameter to multiple encode methods in HuggingFaceTokenizer to allow users to optionally add special tokens during encoding
[ hotfix ] [ runtime ] use collections. nCopies in taskmanagerservices
updated chunk data size handling in LoadSingleTsFileNode. java to ensure consistent data size for chunk data addition
added session storage context constants and refactored view state creation in DuoSecurityMultifactorWebflowConfigurer to improve session management and
added unit tests for XML schema validation in TestJspDocumentParser. java to ensure proper error handling and schema validation in the application
added a constructor to TypeAdapter and removed the @ Ignore annotation in Java17RecordTest and ReflectionAccessTest to address compatibility issues with Java 17
refactor event handling in Debugger and SuspendedEvent classes to improve clarity and maintainability of event processing
refactor AntPathRequestMatcher to improve code readability to enhance maintainability and facilitate future updates
removed null parameters from createResourcePolicy method calls across multiple classes to simplify method signatures and improve code readability
added a null check before releasing the deflaterEntry in GzipHttpOutputInterceptor. java and updated test assertions in BlockingTest. java to
added JUnit @ AfterEach annotation to ReactorCoreAutoConfigurationTests to ensure tests are executed after each test
updated MD5 checksum computation to use Normalizer for better normalization to ensure proper handling of unknown Unicode characters in checksums
updated command handling and completer management in Example. java to improve code clarity and ensure proper command execution
changed the keyListener variable to be final in BasicProfilerState. java and added multiple @ Override annotations in BaseAppState. java to ensure
replaced casting of objectToSave to DBObject in MongoTemplate. java and added a test for saving JSON strings in MongoTemplateTests. java
added a method to check for multiple remote addresses in the RequestUtils class to ensure that only valid remote addresses are processed
updated ` getJobArgs ` method to use ` ObjectBuilder ` instead of ` String ` for better type handling to improve type safety and maintainability
updated the address retrieval logic in CookieManagerTest. java and removed hardcoded local host address in UnmodifiableMaps. java to improve code clarity and maintain
added a check to ensure the wrap index matches the glyph count and free the run pool to improve resource management and prevent potential memory leaks
added pauseOrResumeSplits method to PulsarSourceReaderBase and PulsarPartitionSplitReaderBase to enable pausing or resuming
added support for HIVE _ SCRIPT _ OPERATOR _ ID environment variable in Hive configuration to enable the use of the operator ID for script execution
refactor ` getListedTermCounts ` method to always use streams for term counting to improve code readability and maintainability by simplifying term count retrieval
added a new ` UseSeparateStepSizeAction ` class to handle the use of separate step sizes in the application
updated FileMenuFilter to use AccountManager for unlocking files to enhance security by restricting access to locked files
updated import statements and improved region server splitting logic in RoundRobinTableInputFormat. java and TestTableSplit. java to enhance code clarity and
updated header values from " false " to " 0 " and " true " in HttpClientRequestAdapter and HttpClientRequestAdapterTest to ensure consistency in
pdfbox - 2576 : use ioutils. close instead of try to close a non - null subdocument
added fullscreen handling capabilities in GwtGraphics and GwtApplication to improve user experience by ensuring proper fullscreen behavior
updated WebfingerIssuerService to use URI instead of String for issuers to improve resource handling and error logging for URI parsing issues
added unit tests for SoulApacheDubboClientConfiguration to ensure correct configuration of the dubbo client
updated texturePath assignment to use ` resolve ( fileName ) ` instead of ` Gdx. files. internal ( fileName ). pathWithoutExtension (
added trace logging to ChainingAttributeReleasePolicy and changed log level from warn to info in OidcDefaultJsonWebKeystoreCacheLoader
replaced ` lock ( ) ` with ` lockInterruptibly ( ) ` in ` PlayerApiServlet `, ` BrowseHandler `, and
changed package declaration from ` java. lang ` to ` java. lang ` to ensure consistency in naming conventions
added exception handling for redundant branch checks in NullDerefAndRedundantComparisonFinder. java to ensure correct handling of code exceptions during redundant branch
updated DashRendererBuilder to use DefaultHttpDataSource for manifest fetching to improve flexibility in handling different HTTP sources
added configuration property for maximum prepared statement per database connection to improve flexibility in managing prepared statement executions per database connection
updated method signatures in Configuration, DelegatingConfiguration, ReadableConfigToConfigurationAdapter, and DelegatingConfiguration to improve clarity and consistency in configuration handling
added error handling in AutoScalingHandler to improve error management during command execution
refactor CombinedDataset class to improve code readability to enhance maintainability and facilitate future updates
replaced byte array buffer with byte b in InflateIn _ DeflateOut. java to improve performance by avoiding unnecessary byte array allocation
added methods to remove cryptography restrictions in Utilities. java to ensure that cryptography restrictions are only removed when needed
added a delayed task to teleport if the player is still alive to ensure proper handling of player teleportments when the player is
added a new test method ` testPageMarginsLongTextTransform ` to ` TextVisualRegressionTest. java ` to ensure that page margins
removed null check for vContext in Vectorizer. java to ensure vContext is properly initialized before use
updated the speed calculation in WialonProtocolDecoder to ensure correct speed value representation
hbase regionserver metricsuseraggregatefactory. default _ metric _ user _ enabled _ CONF should be false when hbase. regionserver. metricsuser
added an ` isEmpty ` method to the ` JsonObject ` class and a corresponding test in ` JsonObjectTest ` to ensure that the ` JsonObject `
added new boolean flags ` mUserPresent `, ` mVisible `, and ` mAttached ` in ` Launcher. java ` to ensure
refactor AsyncFile, HttpClientRequest, HttpClientResponse, HttpServerRequest, HttpServerResponse, NetSocket, and ReadStream classes to improve code organization and
added'params'parameter to the zadd method call in PipelineBase. java to enable additional parameters for the zadd operation
updated metadata assertions and removed unused URIs in multiple test files to improve test reliability and clarity by eliminating redundancy
renamed ` TestAsyncMessages ` to ` TestAsyncMessagesPerformance ` and removed the ` Ignore ` annotation to improve test clarity and eliminate unnecessary test
added a method to retrieve an Optional < TargetNode <?,? > > and updated related logic in VersionedTargetGraphBuilder and VersionPropag
updated seconds from 31556889864403199 to 31557014167219200 in TimeZoneProvider. java to ensure accurate
modified the calculation for picture data length in EscherBlipRecord. java and added a new test class TestOLE2Embeding
initialized row and column variables to zero in JSONParser. java to ensure proper initialization of data points
replaced ` JavaType. FullyQualified ` with a ` Pattern ` pattern matching in ` FindTypes ` and ` JavaType ` classes to
added functionality to play trailers in BaseItemDetailsFragment to enhance user experience by displaying additional trailers for playback
added a native method to remove glyph information from cache in CStrike. java and CStrikeDisposer. java to improve memory management
act - 1205 : terminate end event activity be terminate after execution ( act - 1205 )
camel - 15836 : camel - xml - bind - support to specify the local name of the type.
updated the endpoint URL from " apereo. org / scottb. html " to " https : / / www. abc1234
added a new BooleanOption for resetting preferences in JabRef. java to enhance user experience by allowing resetting of preferences to default values
changed access modifiers from private to protected in ThriftMetrics and ThriftServer classes to enhance encapsulation and facilitate better resource management
[ danfossairunit ] remove deprecated channel from channel ( # 8951 )
use hamcrest assertion instead of junit in testendpoint
added a call to ` expansionHelper. stop ( ) ` in ` TweetActivity. java ` to ensure proper cleanup of the expansionHelper
added null check for index in PartitionPanel and implemented equals and hashCode methods in PartitionFactory to ensure proper handling of cases where values are null or
server : fix root disk size in uservmmanagerimpl
added preference management and updated visibility logic in PredictionRowView. java to improve user experience by showing suggestested apps based on preference settings
[ geos - 8470 ] invalid crs be throw when bbox can't be empty
added methods to validate value parameters and error handling in LibrustzcashParam. java and LibrustzcashTest.
added a deprecation annotation to IThrowableEntity. java to indicate that the IThrowableEntity is moved to the FML registry
added initialization of x and y coordinates in NodeDataImpl. java to ensure proper positioning of nodes based on random values
updated test methods and added a new test for handling missing scopes to improve test coverage and ensure proper functionality of refresh token validation
refactor variable names for clarity in JavacStep. java to improve code readability and maintainability by using a try - with - resources statement
updated the VERSION string from " 0.9. 1 " to " 0.9. 2 " to reflect the latest release version
added a condition to check if a item type is of the DEEP _ SHORTCUT type to ensure proper handling of deep shortcuts in the
added hashCode method to TimeGranularitySpec to ensure proper handling of null values to prevent potential NullPointerExceptions
changed access modifiers of BooleanWeight, DisjunctionMaxWeight, and Similarity to protected in BooleanQuery and DisjunctionMaxQuery classes to allow
added a boolean flag ` useProxyResponseCode ` to manage proxy response code to ensure proper handling of NTLM proxy when using proxy response code
aarch64 : use aarch64. sp instead of aarch64. ldr.
server : don't return vm memory size if there be no vm instance
added a null check for maxScore in JSONResponseWriter. java and included a query in TestDistributedSearch. java to ensure proper handling of
updated audio recording duration from 22050 to 44100 in AudioRecorderTest. java to improve audio recording accuracy
adjusted the calculation for newOriginX based on subjectBounds _ m's minimum value to ensure newOriginX does not exceed the subject width
added a check for both ` dataSource ` and ` dataSource ` in ` DruidQueryBasedInputFormat. java ` to ensure that ` dataSource `
added additional metadata to the ORIGINAL _ NAME and ORIGINAL _ TYPE fields in CustomProperty. java and updated regex patterns in CustomPropertyTest
added a static method ` create ( Table parent, Map < String, Object > data ) ` to the ` Index ` class to facil
corrected the variable name from ` isBetweenGivenPeriod ` to ` checkLowerBoundaryPeriod ` and ` checkUpperBoundaryPeriod ` to improve code
updated schema compatibility handling in SchemaCompatibility. java and added tests in TestSchemaCompatibilityTypeMismatch. java to ensure compatibility between different reader and writer
added imports and modified the handling of persistent attribute types in QueryUtils. java to improve code clarity and ensure proper association between collections and entity paths
added synchronization to the ` spans ` list in ` TestSpanHandler. java ` to ensure thread safety for concurrent access to ` spans `
ww - 4441 change the return type of the getText method from List < Object > to List <? > to allow for more flexible
added logging for InvocationTargetException and improved error handling in ViewContextImpl. java to enhance debugging capabilities and provide clearer error messages during authentication failures
refactor OAuth2AccessTokenEntity to improve code readability to enhance maintainability and facilitate future updates
updated error messages in SCBEngine, TestInvocationFactory, and TestInvokerUtils to include a status constant to improve clarity of error handling and
added new project files for iOS data and resources in GdxSetup. java to enhance project setup for iOS applications
replaced List and ArrayList imports with ConcurrentMergeScheduler in TestSearcherManager. java to improve thread safety and performance in concurrent scenarios
added a null check for rc in QTestUtil and modified list iteration logic in GenericUDTFInline to ensure proper handling of null values and
refactor MapIterable, FJIterate, and ParallelIterate classes to improve code organization and maintainability
simonstewart : prevent double - clicking on the spreadsheet.
added service registrations for persistence and sessionFactory in HibernateBundleActivator. java and updated test methods in OsgiTestCase. java to improve service management
update timeout calculation to use connectionTimeout instead of elapsedTimeMs to improve accuracy of timeout measurement based on connection timeout
refactor VoiceCompiler to create a non - packaged resource directory and modify component file creation logic to improve resource management and ensure proper component file creation
updated file path handling in Compat and FileOpener to ensure consistent file path formatting and improve directory checks
changed the return type of the ` row ( ) ` method from ` Cell < T > ` to ` void ` to allow the method to
added port validation in BesuCommand. java and corresponding test cases in BesuCommandTest. java to ensure that duplicate ports are
added a nullMask property and related getter / setter methods in WebSocketClient. java and updated WebSocketConnectionD12 initialization in WebSocketServlet. java
changed the return type of ` genUDTFPlan ` from ` RelNode ` to a ` Pair < RelNode, RowResolver >
added methods to track bucketed preferred node and non - preferred node selections in NodeScheduler and NodeSelectionStats classes to improve tracking of node selection
added a new Person class with getter and setter methods to facilitate the management of the name in the Person class
added a boolean variable ` hasOwnerPtr ` to track the presence of an owner pointer to improve code clarity and ensure proper handling of the owner
updated clock setup methods in PlaybackOverlayFragment. java and added fade - in and fade - out animations in PlaybackOverlayFragment. java
remove unnecessary markDirty calls in multiple block classes to streamline the code by eliminating unnecessary updates
changed IMPL from final to non - final and improved exception handling for SecurityExceptions to ensure IMPL cannot be accessed without a default class loader
updated cell handling in Sudoku. java to run on the Event Dispatch Thread to ensure that the event runs on the Event Dispatch Thread for
removed ` DefaultInetAddressAdapter ` and ` CollectionTypeAdapter ` from ` Gson ` and ` MiniGson ` classes to simplify the code
added methods for handling null values in ` Series ` and corresponding test cases in ` DataFrameTest ` to improve error handling and ensure proper functionality of
updated audio time stretch option from " -- no - audio - time - stretch " to " -- audio - time - stretch " to ensure the
updated boundary conditions in GeoRelationUtils and GeoUtils to use Math. max instead of Math. min to improve accuracy of geographical coordinates
server : fix findbyid ( ) method for disk offering
added cleanup method to hazelcasttest to ensure test be clean up before and after
added tests for handling NoSuchPaddingException in BlockCipherTest. java to ensure robust error messaging for unsupported algorithms
added addFilter statements to print operations logs in QFileClient. java to enhance logging capabilities for better debugging
added new interfaces ChildIntroduction and InjectParentInterface, and updated AbstractBeanDefinition to use these interfaces to facilitate the handling of type arguments
added a null check for currentConnectionAddress in ProtocolProviderServiceSipImpl. java to ensure proper assignment of proxySocketAddress when currentConnectionAddress
replaced ` Math. addExact ` with ` MathUtils. cappedAdd ` for demand assignment to simplify the logic by replacing ` Math. add
refactor image output stream handling to use try - with - resources for better resource management to ensure proper resource cleanup and prevent potential NullPointerExceptions
refactor showSearch method to use Intent for music - only search functionality to improve code clarity and maintainability by using a single Intent instance
removed the reference of ` this ` in ` SchemaCrawlerOptions ` and restructured the ` toString ` method in ` GrepOptions `
http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4594 and add osg
added @ Autowired annotation to PersonRepository in RepositoryIndexCreationIntegrationTests to ensure proper dependency injection for repository management
changed the exception type from Exception to InterruptedException in UIServer. java and updated log message format in TestVertxUIManual. java to
reformatted case statements in BlockCactus. java for better readability to improve code clarity and maintainability
refactor mouse event handling in ThemeSelector. java to use MouseMotionAdapter to improve mouse event responsiveness and maintainability
abstractminmulticastflowcontrolfields extend abstractminmulticastflowcontrolrhspadding instead of abstractminmulticastflowcontrolfields ( #
added alignment and vertical alignment parameters to the editStringAt method in IOSImplementation. java and IOSNative. java to enhance text editing capabilities by
changed exception handling in StatTokSentAnnotator to throw IllegalArgumentException instead of Exception to improve error handling and provide clearer error messages when model
added conditional logic to handle distinct queries in QueryGenerator and ClusterIntegrationTestUtils to improve query efficiency by ensuring distinct queries are handled correctly
graalvm : add ability to find the closest jninative linkage.
updated language properties in JSyntaxTextArea. java to ensure proper loading of language - related properties
added a null check for children before processing to avoid potential NullPointerExceptions when children are null
added tokenPosition, currentPosition, and currentPosition fields in MessagePackParser and updated JsonLocation handling in MessagePackParserTest to ensure accurate
added locale management in AbstractSolrMorphlineTestBase to ensure default locale is used after tests
removed conditional check for ` isLauncher ( ) ` in ` LauncherFragment. java ` to simplify code logic for better readability and maintainability
added a new test class MetricsReporterTest for metrics reporting functionality to ensure proper handling of metrics in the shenyu proxy executor
camel - mock - dsl - remove unused typecachemap in osgiserviceregistry
added equals and hashCode methods to the Rectangle class to ensure proper comparison and hashing functionality in the Rectangle class
fix flaky test in streamkafkapitest
refactor DSAParameterGenerator to handle prime strength more accurately to improve clarity and correctness of prime size validation
added LLAP _ DAEMON _ AM _ USE _ FQDN configuration to manage the FQDN of the AM machine when submitting
fix flakiness in clientoutofmemoryhandlertest
added a method to retrieve the CMOObjectId in multiple shape classes to ensure consistent object ID retrieval across different shape types
added a new test method ` testWithDistinctScalarQuery ` to ` DistinctTest. java ` to verify the functionality of ` Distinct `
refactored Driver, SearchTravRetLoadFieldSelectorTask, and SearchTravTask classes to improve code organization and maintainability
added support for binding and unbinding ExtensionAdapters in ManagedKubernetesClient to enable flexible management of extension adapters in Kubernetes
refactor DetailsDescriptionPresenter to use a new utility method for extracting info rows from BaseItemDto to improve code readability and maintainability by centralizing
updated JUnit imports and annotations from Before and After to AfterEach in TestAuthHandlerBoot and TestRSAProviderTokenManager to ensure compatibility with the
added error handling for generating summary HTML in BugCollectionBugReporter. java to improve robustness by catching potential TransformerException during summary generation
replaced instances of ` intPool. reset ( false, false ) ` with ` bytePool. reset ( ) ` in ` TermsHash.
added multiple @ Override annotations to FilterInputStream. java to ensure proper method overriding and improve code clarity
added a new class ` WindowSessionDelegateU ` and modified its logic in ` ShadowWindowManagerGlobal ` to support TIRAMISU API
added logic to conditionally append URLs based on the request scheme to ensure URLs are appended only when the request scheme matches the specified scheme
added support for MSSQL database in ForeignKeyConstraintGenerator to enhance compatibility with MSSQL database interactions
hbase - 2658 add dummy peer and make sure that we be able to remove that peer
added a new ` FilterEventHandler ` class and modified ` PipeBehaviourEmzuli ` to use it for filtering items based on their color
simonstewart : make html identifier logging configurable.
updated references from ` getProducedTableSchema ( ) ` to ` getTableSchema ( ) ` in ` HiveLookupTableSource. java `
implement release mechanism in ListenerSet and ExoPlayer classes to ensure proper thread safety during listener release
updated the SCHEMANAME format in SequenceSnapshotGenerator to include customize schema name to ensure compatibility with the latest database configurations
added color calculations in SpriteBatch, SpriteCache, and updated test setup in AlphaTest to enhance color customization and improve test reliability
fixed - redissonconnection. tocompletablefuture ( ). join ( ) return null value instead of join ( ) method. # 5
added base core URL replacement logic in SolrLoggerServiceImpl. java to ensure proper handling of HTTP and HTTPS URLs in the Solr cluster
updated methods in TaskActionController and IconRecentsView to improve task launching functionality to enhance code clarity and ensure compatibility with recent tasks
updated MorfologikFilter to use a dictionary resource instead of a hardcoded string to enhance flexibility in managing resource paths for morfolog
updated sorting option labels for CommunityRating and CriticRating in GridFragment. java to improve clarity of sorting options for better user experience
added imports and visibility logic for ListRow in CustomListRowPresenter. java to ensure proper handling of ListRow headers in the UI
refactor the switch statement to use a try - finally block for better resource management to ensure proper execution of command execution and prevent resource leaks
refactor HttpClient class to improve code readability to enhance maintainability and facilitate future updates
updated isCaseSensitive checks to check for DB2Database instances to ensure proper handling of database - related case sensitivity
added JSR310 support for JavaTimeModule in StandardJavaScriptSerializer to enable JSON serialization with JSR310 support for Jackson
use slf4j's MDC instead of apache's log4j's MDC to improve logging consistency across the application
replaced TypeBearer with Type in PhiTypeResolver. java to simplify type handling and improve code clarity
refactor CoinbaseTransactionStatusDeserializer to remove unnecessary import and improve code clarity to enhance maintainability and readability of the code
added methods to retrieve and force building targets in BuckConfig and updated ProjectCommand to use this new method to enhance functionality by allowing users to
replaced the use of System. gc ( ) with a final IdleStrategy to ensure proper garbage collection of the idle strategy
updated OCFile to use ContentResolver instead of ContentProvider to improve compatibility with Android's ContentResolver
removed unnecessary conditional checks in ReportPanel. java to streamline code for better readability and maintainability
[ hotfix ] [ test ] prevent npe in testinglogicalslot
added a new file ` RemoveCallsToSystemGc. java ` that implements a recipe for removing calls to ` System. gc ( ) `
removed multiple super ( ) calls from multiple exception classes to streamline the codebase by eliminating unnecessary super calls
added a setUIID method to ScaleImageLabel that sets the UIID of the component to ensure the component uses the correct UIID for
replaced ` foundEntry ` with ` update ` for clarity to improve code readability and maintainability by using a more descriptive variable name
added support for both " - classpath " and " - cp " arguments in the Main. java file to enhance command - line option handling for
updated the linker option from " avutil @. 52 " to " compiler = { " default ", " nodeprecated " } to
changed initialization variable from'initialized'to'initialized'to ensure proper initialization of the storage service
updated test cases in Test7196045. java to improve test coverage and ensure reliability
updated the density and decay values in ShaderParametersLightShaft. java to adjust the density and decay values for improved visual effects
added boolean and string fields with state attributes in OidcConfiguration and updated OidcRedirectActionBuilder to use these attributes to enhance state
fix for ` ` unique'' constraint not work on postgres
added functionality to check if federated shares are allowed in UsersAndGroupsSearchProvider and EditShareFragment to ensure proper handling of federated share
added a method ` needsDocValues ` to the ` TestBBoxStrategy ` class to ensure proper handling of document values in tests
updated references to ` sourceFileByName ` and ` alignmentOffset ` in multiple classes to improve clarity and consistency in handling source file names
added a method ` intForEach ` to ` Int2ObjectHashMap ` and updated imports in ` Int2ObjectHashMapTest ` to enhance
[ 1.19. x ] fix worldserver share scoreboards early ( # 9641 )
change count method return type from Long to long in QueryDslMongoRepository, QueryDslPredicateExecutor, SimpleMongoRepository, QueryD
refactor MTree snapshot creation logic to improve logging clarity to enhance readability and maintainability of the MTree snapshot creation process
updated the dot product calculation in VectorUtil and corresponding test cases in TestVectorUtil to improve accuracy of dot product calculations and ensure test coverage
added constants for IRREVERSIBLE _ THRESHOLD and methods to set and get the latest confirmed block number to improve configurability and
replaced setLocale ( ) method with Systems. setLocale ( preferenceHelper ) in GpsMainActivity and Systems. java to centralize
added methods to track if a new database was created in LauncherClings and LauncherProvider classes to improve tracking of when a new database is created
updated error messages and variable assignments in BasicAclEntryAfterInvocationCollectionFilteringProvider. java to improve clarity and maintainability of the code
added a null check for datamodel and OS _ ARCH in the condition to ensure proper handling of architecture specificity
added a thread check in TestIndexWriterDelete. java to prevent further processing when the thread is not the active thread
changed the visibility of the closeDatabase method from private to protected to allow subclasses to access and override the method
updated imports and method calls in FullDetailsActivity and BaseRowAdapter to use ModelCompat. asSdk for better compatibility to ensure compatibility with the
added attribute handling in BatikSVGDrawer. java to set the node name from the SVG element to ensure the correct attribute is used for
added error handling for IllegalArgumentException in ConsoleKeys. java to improve robustness of user configuration parsing
added extra ` ` WaitForResult'' to ` startMain ` and modified ` WaitForResult ` handling in ` CodenameOneActivity `
refactor methods in HitQueue, SpanPositionQueue, and PriorityQueue to use a Supplier for sentinel objects to improve code readability and maintainability by using
added functionality to display widget descriptions conditionally based on availability to improve user experience by displaying more relevant widget information
added a maximum registered attribute count check in the Attribute class to prevent application crashes due to exceeding the maximum allowed attribute count
updated package structure and import statements in PredicatesTest. java to improve organization and maintainability of the query functionality
camel - core - optimize the case insensitive header filter. thanks to benjamin for the patch.
refactor InlineLayout and Breaker classes to improve boundary condition handling to enhance readability and maintainability of the code
added null check for view and refactored getView method in ShareUserListAdapter. java to improve code robustness and prevent potential NullPointerExceptions
removed unused packages and instrumenting exclusion lists in Setup. java to streamline the setup process by eliminating unnecessary dependencies
added a check for insert destination before source associations in BrowserContentPane. java to ensure proper handling of non - insert destination before source associations
added a method to retrieve the memory limit file path to enhance functionality by allowing dynamic configuration of the cgroup memory limit
replaced ` @ Value. Immutable ` with ` @ Value. Immutable ` and introduced an ` EMPTY _ INSTANCE ` constant in ` AbstractCxx
added a HumanReadableException to indicate that the source under test is not among its dependencies to improve debugging capabilities by providing clearer error messages when the
refactor proxy handling in Botania. java for Minecraft version compatibility to ensure compatibility with newer Minecraft versions and improve logging clarity
removed conditional check for index validity in StringUtils. java to simplify code logic by eliminating unnecessary checks
increased timeout duration from 100ms to 500ms in TimeoutTest. java to allow more time for tests to complete before timing out
replaced the constructor of TaskOverlayFactoryGo to accept an AssistContentRequester to enable content request handling in the TaskOverlayGo class
updated the handling of the witness address in VoteWitnessProcessor. java to ensure proper encoding of the witness address for proper account
updated DefaultMethodRegressionTests to improve test coverage to enhance reliability of method regression tests
refactor WorkloadManagerMxBean to improve code organization to enhance maintainability and readability of the code
replaced KafkaProducerException with KafkaException in KafkaOutboundAdapterParserTests to align with the latest Kafka library and improve error handling
added a call to closeLoader ( ) in DesktopGeneratorController. java to ensure proper resource management and prevent memory leaks
added a clear method to ExceptionThrowingTaskletStub and corresponding test cases in FaultTolerantExceptionClassesTests to ensure proper handling of
[ beam ] add more informative log message when config be not set
added an ` Map < String, String > ` extraProperties ` parameter to multiple methods in ` TableConfigTunerUtils ` to enable
added logic to handle in - progress instances in PinotRealtimeSegmentsManager to ensure that only active segments are added to the list
added a check to return null if the touchable is not enabled to ensure proper handling of touchable interactions
added a test method to build using precompiled headers in other cell to ensure that precompiled headers are correctly implemented in the project
added a retryable check for cache configuration in AbstractCacheAllPartitionsRequest. java to ensure that a valid cache configuration is provided before proceeding
refactor npm package installation logic into a separate method for clarity to improve code readability and maintainability by encapsulating package installation logic
added @ ManagedObject annotation to MBeanContainer and @ ManagedOperation annotation in Destroyable to inform the component that registers beans as MBeans
added a conditional check to the LongClickableSpan class to ensure the LongClickableSpan is only displayed when inAppBrowser is set to false
corrected spacing in conditional statements for consistency to improve code readability and maintainability
updated the ` isReifiable ` logic in ` mmm Types. java ` and created new classes ` T6558559b. java
updated position printing statements in WorldEditListener. java for better clarity to improve user experience by providing better insights into position settings
refactor KafkaConsumer to use a list of tasks for submitting and shutting down the executor to improve resource management and ensure proper shutdown of the Kafka consumer
added a default implementation of the examples ( ) method to the Schema class to provide a default implementation for the Schema class
modified thread interruption logic in AgentRunner. java to ensure proper handling of thread termination and prevent interruptions
remove the time column from the dimensions in DefaultAggregationLoader and PinotDataSourceDimensionFilters to ensure consistency in data handling by removing specific time columns
added a null check for the shards parameter in FacetComponent. java to ensure that the shards parameter is validated before proceeding
replaced the method of retrieving parse time dependencies from ` linker ` to ` CxxPlatforms ` in ` RustBinaryDescription ` and ` R
added name fields and their getter / setter methods in JdbcAuthenticationProperties, AbstractLdapProperties, NtlmProperties, and NTtlmProperties
added print statements to CFGPrinterObserver and refactored error handling in IdealGraphPrinterDumpHandler to improve debugging capabilities and provide clearer error
updated conditions for handling small scan hints in BaseQueryPlan. java and added a new test for it in QueryCompilerTest. java to improve
updated the log output in RetryGatewayFilterFactory to include routeId information to improve clarity of log output for better debugging and monitoring
replaced repeated calls to redisplay ( ) with a single call to callWidget ( REDISPLAY ) to improve code readability and maintainability by reducing
replaced ` onOverviewShown ` method calls with a delayed delay in multiple classes to improve responsiveness by preventing UI delays when the overview is shown
added null checks for globalMinPackedValue and globalMaxPackedValue in CheckIndex. java and TestPointValues. java to improve robustness
updated the publish method to use ` updateLastState ` instead of ` true ` to ensure that the last state updates accurately reflects the
updated SQL string format in MetastoreDirectSqlUtils. java to ensure proper escaping of string list values
removed the addition of 0 to null in SpliteratorCollisions. java to streamline the code by eliminating unnecessary null handling
danielwagnerhall : add case - insensitive test for element. gettext ( )
replaced do with while ( true ) in ManyToManyConcurrentArrayQueue. java to improve code readability and maintainability
# 179 - enh : add support for forward - only fetch size for mysql
added handling for ClosedChannelException in HttpServerMultiplexChannelHandler to improve error handling and prevent potential channel closure issues
pdfbox - 2576 : use the size of the list for pdobjects, a suggest by valerybokov
added support for rounded corners on window dimensions in QuickstepAppTransitionManagerImpl to improve compatibility with devices that support rounded corners
replaced ShapeDrawable with View and updated layout parameters in DesktopTaskView. java to improve code clarity and maintainability by using a more modern view
updated properties initialization in UpstreamCheckServiceTest. java to ensure proper initialization of upstream check service
updated logging level from warn to debug in AbstractSession and AbstractSessionManager classes to improve logging granularity for better debugging capabilities
refactor ZooKeeperHiveLockManager to return locks instead of logging errors to improve error handling and provide clearer feedback during ZooKeeper operations
updated multiple Java files related to closure cleanup to improve code clarity and maintainability
added a boolean flag to check if custom data is present before generating mipmaps to ensure that mipmaps are only generated when custom data
camel - core - core - optimize the output of the default masking test. thanks to david mollitor for the patch.
added selectable property and related getter / setter methods in List. java to enhance functionality by allowing selection of nothing when not selectable
added a check to return false if the value count is zero to ensure proper handling of empty values in the LlapArrowBatchRecordReader
added a constructor to PolicyContext and updated file separator handling in TestPolicyContext to improve code clarity and ensure proper file separator expansion in PolicyContext
replaced HashSet with ArrayList for flatQueries and expandQueries to improve performance and maintainability of the code
updated TLSRestrictions. java file to improve TLS restriction handling and enhance security
added a Runnable task to close the Kafka producer to ensure proper resource management and prevent potential memory leaks
updated assertNodeStateProvider method to include an additional parameter for ignorableNodeValues to enhance test reliability by ensuring consistent handling of ign
delete the lock file if it exists in RocksdbMavenPomCache. java to ensure that the lock file does not interfere with the
updated the instantiation of the NIOServerCnxn factory to use InetSocketAddress to ensure correct port resolution for client configuration
added a new method ` getResponse ` to handle ` IOException ` and ` HttpURLConnection ` connections to improve error handling and logging for web service connection
updated the conversion of segmentTarURIStrs to ensure that the first element of segmentTarURIStrs is an empty array to
updated the loginStudent method to use a unique password instead of a single password to ensure unique student accounts are used for testing purposes
added null check for mCurrentItem in EnhancedBrowseFragment and StdBrowseFragment to prevent potential NullPointerExceptions when accessing getActivity ( )
increased the number of strings from 500 to 100 in TestSpecialOperations. java to improve test reliability by allowing more strings to be processed
updated ByteArrayInStream to accept a byte array instead of a string to simplify byte handling and improve code clarity
updated method name from ` messageWithHeaderEntry ` to ` messageWithHeaderKey ` to improve clarity and consistency in naming conventions
added a method to check if a transition is a direct substate in AbstractStateMachine. java to ensure proper handling of substates in the state
added type checks for ListMultimap and SetMultimap in MultimapSubject. java and corresponding unit tests in MultimapTest. java to ensure correct behavior of
added JoinOperation interface to PostJoinOperation to enhance functionality by integrating additional operation types
added a new test method ` testDataIssue258 ` to the ` AdditionalPostgreSQLTest ` class to verify the behavior of the PostgreSQL test when
added error handling for DURABLE _ SUB _ NAME destruction in amq5035Test. java to ensure proper cleanup of durable
updated AvaticaDatabaseMetaData to improve database metadata handling to enhance performance and maintainability of database operations
updated MongoDb connection pool properties to use @ DurationCapable annotations to enhance configuration flexibility for connection durations
fix nullpointerexception in siputils. createaudiomediasformat
refactor ` handleFilters ` and ` handleDomainChanges ` methods to return boolean values to improve clarity and functionality of handling filter and domain changes
added an enabled timeout handling mechanism to the ShuffleHandler class to enable or disable timeout based on the state of the idle state
updated mQuickStepStartingRotation initialization to use a constant to improve code readability and maintainability by using a named constant
camel - xpath : fix deprecation warning in camel - core
use dataresource. class. getresourceloadedresource instead of dataresource. class. getresourceloadedresource
added a new test class EdgeCasesTokenizerTest to validate the handling of escaped back slashes in Go tokens to ensure that the tokenizer correctly identifies
updated the handling of the " atlas " property in AtlasTmxMapLoader. java to ensure proper validation of the'atlas'property
camel - core - optimize property placeholder to reduce load on component startup.
added database closure in BlockchainTest and removed unused ReceiveSource instantiation in KafkaTest to ensure proper resource management and avoid potential memory leaks
refactor CoreMarkdownNodeRenderer and SpecMarkdownRenderer to use List instead of String arrays for line splitting to improve code readability and maintainability
updated import statements in WebServiceInboundGatewayParserTests. java to improve code clarity and maintainability
replaced ` ImmutableList < Object > ` with ` List < Object > ` and added a deprecated constructor in ` SQLBindings ` and ` AbstractSQL
added checks for Java VM name in VirtualMachine. java to ensure compatibility with both Apple and OpenJDK systems
added a connection keepalivetimeout setting to the ReactorClient configuration to prevent premature termination of the ReactorClient
updated vertex attributes from " a _ position " and " a _ normal " to " a _ texCoords " and " a _ normal "
camel - core - optimize property component to reduce registry pollution.
updated null check for AccountCapsule in UnfreezeBalanceActuator. java to improve code clarity and prevent potential NullPointerExceptions
of - 263 : update the version number to match the official release.
updated method calls to use ` t. unannotatedType ( ) ` consistently across multiple files to improve code clarity and maintainability by using
updated assertions and adjusted sequence ts file size settings in StorageGroupProcessorTest. java to ensure correct sequence ts file handling and maintain consistency in configuration
added a new method ` getAll ( ) ` to the ` Environment ` class and updated related imports in ` Server `, ` ServletContextHandler `
set waitbeforestart to 2500 in FFMpegVideo. java to ensure video playback starts in a timely manner
removed the ` _ skipCorrupt ` parameter from constructors in ` OrcEncodedDataConsumer ` and related classes to simplify the constructor signature and eliminate
updated test methods in AccessorsTest. java for improved readability and consistency to enhance test reliability and maintainability of the code
added a new method ` compileMethod ` to ` GraalCompiler ` and ` LIRGenerator ` classes to enhance method functionality and provide access
updated JUnit imports and annotations to use RunningContinuousIntegrationCondition instead of SpringRunner to ensure compatibility with the latest testing framework and improve test reli
added a check for BlockWater in ItemBoat. java to ensure proper handling of double tags based on the target type
updated the toString ( ) method in Directory and added a getLockID ( ) method in RAMDirectory to improve logging clarity and provide unique lock ID
removed the ` allowExperimentalOptions ( ) ` method from the ` Launcher. java ` file to simplify the code by eliminating unnecessary method
added ` then ` methods for ` Path ` and ` AssertDelegateTarget ` to ` BDDAssertions ` class to enhance functionality by allowing assertions
renamed variables from ` hp ` to ` hostField ` for clarity to improve code readability and maintainability by using a more descriptive variable name
changed logging level from debug to warn for multiple Kubernetes config files to provide users with a warning message when attempting to use a specific Kubernetes config file
added file upload status handling in UploadListActivity to improve file management and user experience during uploads
added a new ` ProviderLoader ` class and refactored ` TerminalManager ` to use it to improve modularity and maintainability of the
updated imports and imports in StreamEnvironmentPostProcessor and StreamEnvironmentPostProcessorTests to use TraceMessageHeaders instead of Span to ensure consistency with the latest tracing
updated the order of the SelectFromDatabaseChangeLogStatement to include a ColumnConfig for computed status to enhance the data retrieval process by incorpor
hhh - 11736 - add miss @ generatedvalue annotation
added a check for non - positive data member size before calculating partitions per member to prevent division by zero when data member size is non - positive
added checks for the scheduler state before starting it in ExecutionScheduleManager and ExecutionSchedulerImpl to ensure proper handling of non - started schedules and
removed unnecessary calls to ` text. toString ( ) ` and ` blockParent. getStyle ( ). isInlineTable ( ) ` in Inline
updated argument checks in StatisticMap. java for clarity to improve readability and maintainability of the code
updated the getStagedRectSlideEnd method from 383 to 500 to increase the duration for better stability
updated button references from " random " to " waves. random " in WaveInfoDialog. java and PlacementFragment. java to
updated condition to include plotArea in the KILL _ ROAD _ ITEMS condition to ensure that only valid plot areas are processed
added TouchExplorationStateChangeListener handling in ShadowAccessibilityManagerTest and refactored listener logic in ShadowAccessibilityManager to improve touch interaction management
pdfbox - 5328 : use max glyph id instead of first code + j, a suggest by valerybokov
bug fix : rename testelement. propertyasstring ( ) to testelement. getname ( )
updated POIFSFileSystem instantiation to use POIFSFileSystem. create ( ) instead of creating a new NPOIFSFileSystem object to ensure proper
added imports for PlotArea and modified return logic in Move. java to enhance functionality by retrieving the plot's absolute ID
updated regex pattern in TestWebHCatE2e. java to ensure consistency in version matching logic
updated the range check for ` count ` from ` 0 ` to ` 1 ` to ensure that ` count ` does not exceed the valid range
update KafkaConsumerProcessor to conditionally retrieve client ID from bean definitions to ensure consistent client ID configuration across different consumer threads
replaced ` IsolatedClassLoader ` import with ` util. IsolatedClassLoader ` and added error handling for javac execution to improve error handling
ggb - 189 : don't call repaintview ( ) when visible = false
camel - spring - batch : fix npe in case header value be null
added a method to check if animations have finished to improve animation handling logic
added a test for custom favicon links with LineBreaks in LoginMockMvcTests to ensure that favicon links adheres to line breaks for
added null check for ` otherUrl ` in ` TimeLineCursorAdapter. java ` and updated the refreshing text in ` HomeFragment. java
mondrian : fix issue with space in eqstring
refactor ObjectHashSet to improve code readability to enhance maintainability and facilitate future updates
refactor null handling logic in DataUtilities. java to improve clarity and maintainability of the code
fix nbt compare crash ( mc - 12770 )
add a new test class AsyncResourceTest for testing async resource functionality to ensure proper handling of HTTP GET, PUT, and DELETE requests in the
rename ` target - flat - headers. hmap ` to ` target - user - headers. hmap ` to improve clarity and consistency in
added logging statements to handle SendFailedException in MailService. java to improve error handling and provide clearer feedback on mail sending failures
replaced resetTaskItemView ( ) and resetTaskItemView ( ) with resetToEmptyUi ( ) and introduced EMPTY _ LABEL constant to
added test methods to retrieve partition by names with multiple batches and unequal size batches to improve test coverage and ensure correct behavior of partition retrieval methods
added a closing brace in FileListListAdapter. java to improve code readability and maintain consistency
changed the data type of ` sharees ` from ` ArrayList ` to ` List ` in ` OCFile ` and ` OCFileListAdapter `
adjusted the index used in the removeViewInLayout method from 1 to 2 to correct the removal of views based on the current count
removed " org. eclipse. jetty. websocket. util. server. internal " from several configuration files to simplify the configuration by eliminating unnecessary
changed the default value of expiresSeconds from true to false in the S3Request constructor to ensure the policy is initialized with a default value
fix issue with jfxradiobuttonskin not update animation when timeline be null.
updated the check for splitting length in DeweyNumber. java and added a test for zero splits in DeweyNumberTest. java
added a protected static variable ` categorySetString ` and modified the return statement to replace " Category : " with " " to improve code readability
updated the assertion in WebSocketClientTest to remove " Invalid close control status code " to ensure the test accurately reflects the expected close code
added a null check for classLoader in WebappLoader. java and updated assertions in TestVirtualWebappLoader. java to ensure proper handling of
removed the condition for collecting persistent fields in PersistentAttributeTransformer. java to streamline the code by eliminating redundant logic
pdfbox - 4071 : don't throw an exception if the index be a number
added a new test class TestPorterStemFilter to test the PorterStemFilter functionality to ensure the PorterStemFilter
modified the ` postBatchMutate ` method to include an ` success ` parameter to enhance control over whether the mini - batch operation has successfully
moved ` JobExplorerFactoryBeanTests `, ` MapJobExplorerFactoryBeanTests `, ` MapJobExplorerIntegrationTests `, and ` SimpleJob
fix concurrentmodificationexception in chatwindowmanager
removed the Sys. touch ( ) call from multiple Java files to streamline touch event handling by eliminating unnecessary calls
updated HgCmdLineInterface to use " - mardu " instead of " - r " for untracked files to ensure compatibility with the
camel - netty : make timer thread - safe.
added'final'modifier to Vector3 objects in DirectionalLight, PointLight, SpotLight, and DirectionalLight classes to ensure
updated width and height calculations in X11GraphicsConfig and WGLGraphicsConfig to ensure proper dimensions are computed for graphics configuration
added ` toString ( ) ` methods to ` DelegatingSecurityContextCallable `, ` DelegatingSecurityContextRunnable `, and ` Delegating
added a new class AnnoFilterTreeSet with methods to filter inner classes based on annotations to enhance functionality by allowing filtering of annotated classes based
hive - 2657 : bytescolumnvector. getsmallbuffer ( ) should handle integer overflow ( sergey shelukhin
replace assertEquals with assertTrueEventually in WriteBehindMapStoreWithEvictionsTest to ensure correct retrieval of items from the map store
updated the ` uninstallListeners ` method to accept a ` JComponent ` parameter in ` MotifScrollPaneUI ` and ` XTextAreaPeer `
added equality check for polynomial functions in PolyFunction and GeoFunction classes to ensure correct equality comparison between polynomial and geographic functions
added a null check for the table before configuring the value to avoid potential NullPointerExceptions when the table is not initialized
added a try - catch block around instantiation failure in CustomChangeWrapper. java to handle potential ClassCastException during class loading
updated DistBuildConfig to use BuckConfig instead of ConfigPathGetter and added an optional path whitelisting mechanism to enhance configurability and
updated the default value of ` isDoubleEntryEnabled ` to false and added a warning TextView in ` ExportDialogFragment. java ` to ensure
added JUnit @ Ignore annotation to BasicDistributedZkTest. java to mark the test as ignored due to known issues
modified the return type of ` doJoin ` and ` doJoinWorker ` methods to return a boolean indicating success or failure to improve clarity and
removed the method getAutodeps ( ) from JavaLibraryDescription. java to streamline the code by eliminating unused methods
added FLAG _ ACTIVITY _ NEW _ TASK to intent flags in LauncherTimelineCursorAdapter. java to ensure that activity flags are preserved during task
added a boolean checkPagingOrderBy ( ) method to SpiQuery to enhance query optimization capabilities
updated URLs in RepositoryConventionPluginTests from " https : / / repo. maven. apache. org / maven2 / " to " https
add a new file ` AffiliationTask. java ` that extends ` NodeAffiliate. Affiliation ` for managing affiliations to
added error handling for URI parsing in TagLibraryInfoImpl. java to improve robustness by gracefully handling invalid URIs
changed access modifier of buildUserProfileByClassCompleteName from private to public to allow broader access to the buildUserProfileByClassComplete
added array handling in CacheKey. java and refactored equality checks in CacheKeyTest. java to improve performance and correctness of object updates
updated file type detector implementations across multiple files to ensure consistent file type detection across different operating systems
added a call to close the WebSocket session to ensure proper resource management and prevent memory leaks
refactor ` getParams ` and ` getVirtualSensorCallback ` methods to use ` VirtualSensorDirectChannelCallback ` instead of ` VirtualDeviceParams ` to
added a check to ensure the session's security context is not removed from the session before execution to ensure that the session's security context
renamed variable ` lch ` to ` loopback ` and updated related logic in ` NetUtil. java ` to improve clarity by accurately reflect
changed the default buffer size from 4096 to DEFAULT _ BUF _ SIZE to ensure consistent buffer usage across the application
updated references and exception handling in KeyInfoReferenceResolver, TransformXPath, and ResolverLocalFilesystem to improve clarity and maintainability of the code
added a conditional check for the icon change listener to ensure the icon change listener is only set when the component is initialized
added support for Russian language in the Language class to enhance compatibility with Russian users
hhh - 10473 - fix sqm to sql ast converter
disable frame state verification in SubstrateGraphKit. java to ensure proper state verification during graph processing
reset system properties priorEnabledSdks and priorAlwaysInclude in RobolectricTestRunnerTest. java and TestUtil. java to ensure proper cleanup of
added a system class " org. slf4j. " to the ViewClassLoader and corresponding tests to ensure the correct class is loaded from the
added handling for " jar " packaging in ChangePackaging. java and created a test for it in ChangePackagingTest. java to ensure
fix file download test due to miss file extension
added nk _ buffer _ clear ( cmds ) method to GLFWDemo. java to ensure buffer is cleared before use
rename jogservice. getdefaultunits to setpreferredunits
updated date formatting in DatePatternConverterTest to use UTC timezone to ensure accurate date representation based on time zone settings
updated return statement formatting in Terminator. java to improve code readability and maintainability
[ hotfix ] improve error message for hdfs namenode when path can't be specify
use java. util. timer instead of java. util. concurrent in jabrefframe
( chore ) camel - ftp : improve test reliability
updated KeyedProperties class to extend ConcurrentSkipListMap instead of ConcurrentHashMap to support skipping of entries during deserialization
added an ` ignore ` method to multiple log classes to handle and warn them when ignored logs are encountered
added a null check for runningTaskView in LauncherActivityControllerHelper. java to prevent potential NullPointerExceptions when runningTaskView is null
removed unnecessary casting of byte to byte in BukkitWorld. java to simplify code by eliminating unnecessary casting
removed an image cleaning operation from PanelManager. java to streamline image processing by eliminating unnecessary processing
added MMapDirectoryFactory and SimpleFSFactory classes for managing unmapped directories to enhance functionality for managing unmapped data in Solr
added null check for BaseColor before creating a new one to avoid potential NullPointerExceptions when initializing the cleanUpColor
updated assertion in QueryEqualityTest to use field1 _ s instead of field1 to ensure consistency in test data for better test coverage
updated ExtendedOperatingSystemMXBeanImpl to improve monitoring capabilities to enhance system performance monitoring capabilities
added functionality to install left and right commands in SideMenuBar to enhance the user experience by allowing navigation between left and right commands
added a boolean flag ` advanceWindowed ` to multiple activities to manage window behavior based on user settings
added support for SybaseDatabase in the DropPrimaryKeyGenerator condition to enhance compatibility with additional database types
refactor Client class to improve code readability to enhance maintainability and facilitate future updates
[ java ] notify leader ready when the last recording position be append to the leader.
replaced invalidate ( ) with setCellLayoutPressedOrFocusedIcon ( ) and implemented shouldDelayChildPressedState ( ) method in CellLayout and Cell
added a return statement to NearCachedClientMapProxy. java to prevent further processing when the client is not available
updated package - info. java files for mmm and ppp packages to improve documentation clarity and maintainability
added a method to shutdown the HTTP server and handle server shutdown gracefully to improve error handling and prevent application crashes
camel - aws2s3 - stream - upload : fix import order
[ hotfix ] [ runtime ] fix webmonitor metric path in taskmanagermetrichandler
added a method to drop keys that do not exist in the 2. 7 version of the DB to ensure proper management of keys in the 2
added a new test class ` TestThriftCLIServiceSecurity ` and modified the password handling logic in ` TOpenSessionReq ` to ensure that
added max energy limit handling in VMActuator to accurately manage energy fees for constant calls
added a maxInMemorySize property and its getter / setter methods to HttpClientProperties, and updated webClientPlugin method to use ExchangeStrategies to
refactor Cache class to improve cache management to enhance performance and maintainability of the code
added new test classes ` RunCucumberTest ` and ` StepDefinitions ` with Cucumber options in ` com. example ` to establish a
added error handling for parsing double values in TypeJsonUtils. java and updated test assertions in TestArrayOperators. java to improve robustness of
updated hex string from " 656469746564 " to " 8080656469746564 " in Utf8StringBuilderTest
added checks for parameter sets in Params. java and implemented a test for it in RestInvocationHandlerTest. java to ensure parameters are only processed
camel - core - add maximum number of output to circuit breaker load balancer.
updated the maximum buffered docs setting in TestIndexWriterExceptions. java to ensure that the document frequency is correctly set based on the configuration settings
refactor hash computation to use Sha1HashCode for consistency across multiple classes to improve code maintainability and reduce redundancy in hash computation
removed unused enum value methods from AsmRuntime. java to streamline code by eliminating unused methods
added tag for MANGROVE _ SWAMP, DEEP _ DARK, IS _ RARE, IS _ SPOOKY
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4
changed access modifiers to protected in BaseTableUpsertMetadataManager and BaseTableUpsertMetadataManager to allow broader access to these
updated unicode symbols for JO, LB, and SY in multiple files to ensure accurate representation of locale - related data
replaced calls to ` vid. getImage ( ). equals ( varName ) ` with ` vid. hasImageEqualTo ( varName ) ` to improve
camel - jbang : add -- repos option to run command
added handling for NaN scores in CrawlDbReader. java to improve robustness by preventing NaN values from being collected
added cleanup method to OnStartupTriggeringPolicyTest for target and rolled files to ensure proper cleanup of temporary files after tests
replaced focus request method from ` requestFocus ( ) ` to ` requestFocusInWindow ( ) ` in ` FilterConditionEditor. java ` and added
[ hotfix ] [ runtime ] make checkpointcleaner thread - safe
added a new file XPathWhiteSpaceTest. java to test XML schema validation to ensure proper handling of whitespace in XML files
added a check for empty tries log before persisting them in BonsaiPersistedWorldState. java to ensure that rollback does not
refactor FilledNewArrayInstruction for improved clarity to enhance code maintainability and readability
added a timeout of 60 seconds to the @ Test annotations in SimpleNetworkTest. java to prevent intermittent failures during tests
modify the logic to check if the parentPath ends with " / " to ensure proper handling of paths ending with " / "
added a print statement to display the failure of loading the skin file to improve debugging capabilities by providing feedback on loading failures
added a ` markDirty ( ) ` method to ` LgoLevel2BatchSubscription ` and modified ` LgoGroupedLevel2Update
added a new constant ` UNDEFINED ` to the ` Result ` class and updated its instantiation in ` TestStep ` to improve clarity and consistency in
updated exception handling in TestTransactionCallback to use NullPointerException instead of PersistenceException to improve error handling and prevent potential NullPointerExceptions
implement IdentifiedDataSerializable and modify UploadJobMultiPartOperation to extend Operation instead of AsyncJobOperation to enable serialization of job multi - part
added IOException handling in MessageDatabase and JobSchedulerStoreImpl to improve error management and provide clearer error messages during data recovery
fix bug in vertical node view layout strategy
replaced the ` pos ` variable with a ` sizeMask ` variable and modified the ` ensureAvail ` method to handle a specific size mask
added JUnit @ Ignore annotations to ChaosMonkeySafeLeaderTest and RecoveryZkTest to temporarily skip tests due to cruelty
fix indexoutofboundsexception in storageproxy
removed the ` advertiseUri ` parameter from the ` bufferedIo ` and ` lazyCreateUri ` parameters to simplify the parameters and improve code
added " times " and " pow " methods for various transformations in TransformFunctionType. java and updated type mappings in TransformFunctionFactory. java
added getSimpleName ( ) and getEnclosingElement ( ) methods to Element and VariableElement classes to enhance method overriding capabilities for better usability
updated RFC references from " RFC3280 " to " RFC5280 " across multiple Java files to ensure consistency and align with the latest RFC
updated the VERSION from " 2.17. 3 " to " 2.17. 4 " and changed type casting from int to Character to align with
refactor memory management in ListActivity and NoteAdapter to use a loop for selected items to improve performance and reduce memory usage during item selection
refactor conditional statements for better readability in DirectUpdateHandler2. java to improve code clarity and maintainability
updated path handling in ConfigFileApplicationListener to use ResourceUtils for URL prefix matching to improve clarity and maintainability of path construction logic
updated PreviewPositionHelper to accept a Context parameter and adjusted insets based on multi - window mode to improve flexibility in managing layout positions based on multi
[ java ] only publish new leadershipterm when logleadershiptermid be equal to logleadershipterm
pmd coverage test : use standarderrorstreamlog instead of output to stdout
refactor ByteArrayInputStream to improve handling of skipped bytes and introduce a new Skip class to enhance functionality and provide specific error handling for unexpected bytes skipped
refactor conditional statements for clarity in UpdaterTask. java to improve readability and maintainability of the code
change MAX _ HEADERS from static to public in HeadersMessage. java and modify block download condition in Peer. java to improve accessibility of
added " rt. jar " to the STANDARD _ LIBRARIES list in ModClassLoader. java to enable the inclusion of additional resource files
simplified the return statement in AbstractHandshakeHandler. java to improve code readability and maintainability
updated heterogeneousGranules retrieval to use configuration to enhance configurability by centralizing heterogeneous gran
added a check to prevent sending a 500 response if the response is already committed to improve error handling by logging warnings when a response is already committed
modify conditional logic in HttpSession. java for better readability to improve clarity and maintainability of the code
changed fadeOutFakeTaskView parameter from true to false and added fade animation listeners in SwipeUpGestureTutorialController to disable fade -
updated logging levels and import statements in PrefabFormat and PrefabSerializer to improve clarity of logging and ensure proper module context usage
updated external group names in LdapMockMvcTests to include " internal. superuser " and " internal. everything " to ensure consistency in group naming
updated the calculation of ` thirtyDays ` in ` FreezeBalanceActuator ` and added a validation check in ` TransferActuator
updated lastIndexOf method to use File. separator instead of single quotes to ensure compatibility with file path separators
don't hide keyboard input help if soft enter be not possible
added a session description to the GpsMainActivity and updated AnnotationViewFragment to use EventBus for event posting to enhance functionality by allowing users to annotate
added a check for the number of pages in the document before verifying its content to ensure that the document does not exceed the expected number of
replaced AndroidBufferAllocator with AndroidNativeBufferAllocator in OGLESContext. java and added a new AndroidNativeBufferAllocator class in AndroidBuffer
added handling for flag names starting with "! " in multiple files to ensure correct flag extraction logic
added a NOPMD NOPMD statement to the filePS executeQuery method to improve performance by avoiding unnecessary SQL query execution
changed the condition from " ITEM _ USE _ GRANT _ SELECT _ REWARD " to " ITEM _ USE _ GRANT _ SELECT _
updated the loop structure and assertions in QueuePriorityTest. java and added a toString method in PriorityElement. java to improve test clarity and ensure
test : migrate mock account to use affinitygroupdao
added help command handling in Main. java to improve user feedback during command execution
updated LightOutputStream output from LightOutputStream ( 7 ) to LightOutputStream ( 4 ) in PropertyTypes, ByteIterableBase, LongBinding, and
changed the Scanned class from package - private to public to allow access to the Scanned class from other packages
added a boolean flag to control the visibility of blank lines in ClassWriter. java and created a new test class T8032819. java
added assertion to check if the person's length is not zero to ensure that the person's length is correctly validated before proceeding
added null check for file extensions in VirtualFile. java to prevent potential NullPointerExceptions when checking file extensions
replaced a return statement with a continue statement in ContactRightButtonMenu. java to improve control flow and prevent premature exit
[ hotfix ] [ runtime ] fix race condition in slotsharinggroupassignment
refactor loop structure in InstallShortcutReceiver. java to improve readability and maintainability of the code
updated the implementation of the socket connection to use a delegate socket implementation to ensure proper resource management and prevent potential memory leaks
added functionality to remove removed items from media details in BookmarkListRootFragment and MediaDetailPagerFragment to improve user experience by allowing users to remove
updated log message to clarify the origin of the in - view center point to improve clarity of log messages related to element's in - view
added a new file ` bug4865918. java ` containing a scroll bar with a value of 9 to test the behavior of the
removed the initialization of VelocityEngine in ADKerberosOperationHandler. java to simplify the code by eliminating unnecessary initialization
added support for " grouptriggers " command in QuestCommand. java to enable users to define group triggers in the quest
added a method to start XML file chooser in AccountsActivity to enable users to select GnuCash accounts directly from the file system
added Lombok's ToString annotation to PartitionChangeEvent and TbApplicationEvent classes to improve readability and maintainability of the code
updated the configuration URI in CloudService to use a protected static final constant to improve code readability and maintainability by centralizing the configuration URI
removed viewport component and jscrollpane references in BrowserPanel. java to streamline code by eliminating unnecessary components
added support for keyboard navigation key handling in LwjglInput and ParticleEditor to enhance user experience by allowing navigation through keyboard shortcuts
added a conditional check for mime type parts in MoreIndexingFilter to ensure compatibility with different indexing configurations
added author pattern to handle author comments in JSDoc. java to improve readability and maintainability of the code
updated metrics constant names for CREATE _ total _ count _ dbs, CREATE _ total _ count _ tables, and DELETE _ total _ count
updated HiveDatabaseSchema and HiveSchemaFactory to include DrillHiveMetaStoreClient and SchemaConfig as parameters to enhance functionality by integrating HiveMetaStoreClient
updated oauth2LoginLinks method to accept a MultiValueMap < String, String > queryParams instead of a single String to enhance error handling by incor
updated the chronology name from " Hijrah - umalqura " to " Islamic Umm al - Q
added a condition to check if Firefox is not supported in WebAudioWrapper. java to ensure compatibility with different browser configurations
added an ` appendInterceptor ` method to ` GrpcServerBuilder ` and removed the private constructor in ` InterceptorConstants ` to enable interception
added readIf ( " DEFAULT " ) to create table statements in TestCompatibility. java to ensure compatibility with the InnoDb auto - increment
replaced kill ( false ) method calls with allocateOutgoing ( ) and resetValues ( ) in StreamingAggTemplate. java to improve code clarity and
[ hotfix ] [ runtime ] fix typo in executiongraph
added a boolean field ` hasFrom ` and corresponding getter and setter methods in ` Delete ` and ` DeleteDeParser ` classes to manage the
updated synchronization logic to use isMultiStatus instead of isSuccess to improve handling of multi - status files in sync operations
refactor recipe filtering logic into a new method ` applicableListTests ` to improve code readability and maintainability by centralizing test matching logic
updated regex pattern for log line in LogAnalyser. java to improve accuracy of log line matching
( chore ) camel - test : enable google cloud integration test
fixed redissonsearch. value ( ) method to use exclusive flag instead of inclusive flag
refactor CCLicenseStep to use an ArrayList instead of an Iterator for storing license information to improve code readability and maintainability by using a standard
added a null check for global ID before inserting it into the guid index to avoid potential NullPointerExceptions when global ID is not provided
updated comparison logic in OptionalAssert to use objects. getComparisonStrategy ( ) for better comparison accuracy
added handling for lmb configuration in NoNewLineParagraphCssApplier and ParagraphCssApplier to ensure that lmb values are only set
added a new file TestArrayCopyToFromObject. java containing a test method for array copying scenarios to demonstrate the functionality of array copying operations
replaced occurrences of " pathlibDir " with " sys. path. insert ( 0, " " ) " in BuckPythonProgram.
don't try to close ajp connection if it's not need
updated the ` findFiles ` method to include a new ` defaultUnfoundRoot ` parameter and added a new ` visitAllFiles ` method
added JUnit @ Ignore annotation to TestLlapSignerImpl. java to temporarily skip the test due to HIVE - 22621
added null check for exception handling in TestInternalInputBuffer. java to ensure robust error handling by avoiding null pointer exceptions
refactor the ` autoloadCall ` method to accept a variable for lock management to improve flexibility and maintainability of the autoloading logic
added a method to compare server versions with user preferences in CustomPlaybackOverlayFragment and PlaybackController to enhance user experience by allowing configuration of server
updated KDC and OneKDC classes to use canonical hostname resolution and added error handling for UnknownHostException to improve reliability of hostname resolution and
updated Jsr250Voter to conditionally return ACCESS _ DENIED or ACCESS _ ABSTAIN based on the presence of jsr250
removed unnecessary import statements in MP4Parser. java to streamline code and improve readability by eliminating unnecessary dependencies
added a constant for HS2 proxy user in session parameters to ensure proper configuration of HS2 proxy user based on session configuration
camel - 16400 : added snappy codec to camel - hdfs.
added a 1 - second sleep in HttpClientTest. java to simulate a delay before executing tests
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 469
added width and height attributes to the buffer in GlyphLayout. java and updated text in BitmapFontTest. java to improve rendering accuracy and
refactor K3S image loading to use absolute paths instead of string literals to improve code readability and maintainability by reducing hardcoded values
replaced calls to ` ReportPlaybackStartAsync ` and ` ReportPlaybackProgressAsync ` with direct calls to ` TvApp. getApplication ( )
replace FileInputStream with BufferedInputStream and ensure proper resource management to improve resource management and prevent potential memory leaks
fix maploader hit eviction on initial load
modify return value from ` ( LENGTH _ BIT & ERROR _ BIT ) ` to ` ( LENGTH _ BIT | ERROR _ BIT ) ` to
fix default policies for read only.
added SoftReference to manage memory leaks in FontUtilities. java to improve performance by avoiding unnecessary garbage collection of CompositeFont
set prefHeight to zero and adjust layout spacing accordingly to improve layout consistency by avoiding unnecessary height calculations
drools - 5952 dmn compatible error message for unknown variable in dmn ( # 5953 )
removed unused import statements across multiple Java files to improve code clarity and reduce unnecessary dependencies
changed access modifier of ` finishRunningRecentsAnimation ` method from private to public and updated its invocation in ` NavHandleLongPressInputConsumer
added null checks for Node and Edge types in ElementFactoryImpl, ImportContainerImpl, and ImporterGDF classes to ensure robust error handling and
[ beam - 8470 ] fix npe in fnaproducerclient
nifi - 1065 : fix bin overflow bug in binfiles
replaced the method to retrieve the closest CoreBuild from a loop to improve efficiency by avoiding repeated calls to geometry. findClosest
added logic to skip content - length in RestTemplateCopyHeaderFilter and corresponding test in TestRestTemplateCopyHeaderFilter to ensure proper handling of content -
added test cases and assertions in Java2TypeScriptTranslator and SyntaxTests to improve test coverage and ensure correctness of string literals
updated sample sizes and settings for the Spectrum panel in ChannelizerViewer and PolyphaseChannelManager to improve the responsiveness of the spectrum
hbase - 2496 add - allregions option to canary ( addendum )
removed NodeModule dependency from CassandraConnectorFactory and updated TestCassandraConnector to remove unnecessary dependencies to streamline code by eliminating unnecessary dependencies
added resetCursorPosition ( ) method call in KahaDBStore. java to ensure the cursor is reset before processing new data
added minimum size settings in CallDialog and conditional dimensions in OneToOneCallPanel to improve user interface responsiveness by ensuring minimum dimensions are resp
fix loss of state information during fall.
refactor TestHTTPSamplersAgainstHttpMirrorServer to use static fields instead of instance variables to improve memory efficiency and maintainability of the test
added injection injection for KerberosPrincipalHostDAO and refactored principal deletion logic to improve dependency injection and ensure proper removal of entities based on their
removed the boolean parameter from the getTableSnapshot method call to simplify the method call by eliminating unnecessary parameters
catch throwable and log a warning if poller can not be poll.
updated the error message in AndroidGradleBuilder to include the Base64 - encoded RSA public key to enhance build error clarity by providing more context
updated ` FileTranscodeVirtualFolder ` to use ` getDisplayName ( ) ` instead of ` getName ( ) ` to improve clarity and consistency in
[ drools - 686 ] support spring boot - inf. classes in the kbuilder ( # 6961 )
added an assumption to skip tests based on the feature version to ensure tests are only executed on the latest features and improve test reliability
removed mContext parameter from assignTargetsForSplitScreen method and updated related logic in RemoteTargetGluer. java to simplify method signature and improve
refactor LeaderLatch class to improve code readability to enhance maintainability and facilitate future updates
added methods to create and initialize zk parameters in SolidityNodeHttpApiService to enhance functionality by allowing dynamic configuration of zk spend parameters
transaction. getchainchainheight ( ) now return a ListenableFuture < Transaction > for transaction confidence.
added a new method ` createMediaRecorder ` in ` CodOneImplementation ` and renamed ` longtitude ` to ` longitude ` in
changed the default value of platformName from " ios " to " ios " to ensure compatibility with the iOS platform
fix typo find by codespell on flink
refactor conditional checks for mozDash and webkitLineDash in Graphics2D. java to improve readability and maintainability of the code
rename CreateVisibleSignature. java to improve clarity to enhance understanding of the purpose of the method
added error handling for outgoing frame logging in AbstractExtension. java to improve robustness by logging exceptions during outgoing frame processing
replaced direct exception handling with a privileged action using AccessController to improve security and maintainability of the code
added logic to delete and update child categories in CategoryREST. java to ensure that only valid FeedCategories are removed from the database
added title assignment based on contribution type in ContributionManagerDialog to improve user experience by providing more context on contributions
added a new ` vwap ` field to the ` Ticker ` class and updated the constructor accordingly to allow users to specify whether the
added functionality to update the bottom inset of widgets in the SearchAndRecommendationsScrollController class to improve user experience by providing a clearer indication
added new ` RenderGraphAPI ` and ` RenderGraphAPI ` classes, and updated ` WorldRendererImpl ` to use them to facil
added a call to set the primary color of NCFirebaseMessagingService to improve visual consistency by using the primary theme
refactor ShadowUsbManagerTest to improve test readability to enhance maintainability and facilitate future updates
updated evaluation percentage calculations and added logging for user preferences in multiple evaluation evaluators to improve accuracy of evaluation results and enhance debugging capabilities
added a call to update the selected configuration in Rocket. java to ensure that the selected configuration updates correctly during configuration updates
added a maximum constraint to bounds2 to ensure that bounds2 does not exceed defined limits
use linkedhashmap instead of hashmap to preserve order
refactor NativeClosureFactory to use ClosurePool for closure management to improve code maintainability and facilitate closure management
( chore ) camel - test - stability : migrate to junit 5
added new classes WebsocketIngressIntegratedBootstrap and WebsocketPluginTest to implement and test the WebSocket client functionality
added generic type set'RecordType'to AbstractImportMetadataSourceService and updated test cases in DSpaceServiceManagerTest to ensure correct class
added a new method ` areAuthenticationsEssentiallyEqual ` to compare authentication objects to enhance security by ensuring both authentication objects are considered
added a conditional check to return false if the system property " jnr. ffi. compile. x86asm " is true to ensure that
refactor variable names for clarity and consistency in CodeGenerator. java to improve code readability and maintainability
added an ` Insecure ` annotation to ` MessageBuffer ` and ` MessageBuffer ` classes to indicate that these annotations are intended for secure data
added new configuration variables to HiveConf. java to enhance configuration options for Hive operations
initialized scopes and policies to a HashSet in ResourceSet. java and added a null check in DefaultResourceSetService. java to ensure proper initialization
changed the declaration of ` decrefOnClose ` to ` final boolean [ ] ` and modified the initialization of ` readerFinishedListeners ` to
renamed classes SecureDirectoryStream, UnixAsynchronousSocketChannelImpl, WindowsAsynchronousSocketChannelImpl, TestFrameSize, and Test3 to
danielwagnerhall : fix test failure in selenium 2. 49
removed the ` getFirstTypeArgument ` method from ` Gson $ Types ` and updated related tests to use ` final ` instead of ` class `
renamed method ` keySet ( ) ` to ` keySet ( ) ` and ` values ( ) ` in ` Int2IntHashMap ` to improve
added duration parameter to the FlipTransition class and updated motion creation logic accordingly to allow customization of animation duration for better user experience
removed the conditional check for subsAreValidForStreaming in DLNAResource. java to simplify the logic by eliminating unnecessary logging
update major and minor version from 8 to 9 to support new features and fixes
replace System. err. println with LowLevelLogUtil. log in StackLocator. java to improve logging clarity for unsupported getCallerClass scenarios
updated Java version from Java14Validator to Java15Validator and updated BLEEDING _ EDGE from JAVA _ 14 to JAVA _ 15
added padding values for replies in ExpansionViewHelper. java to improve visual spacing for better user experience
[ iotdb - 3171 ] fix npe in abstractpartitionprimaryreplicaNiEntropytask ( # 3172 )
added metadata field and related getter / setter methods to SeedUrl and SeedResource classes to enable storing and retrieving seeds along with their metadata
added a null check for the declaration before creating a cloned pattern to prevent potential NullPointerExceptions when the declaration is not initialized
updated TestCoprocessorWhitelistMasterObserver. java file to improve test coverage and maintainability
added checks for package name in AnnotationActionValidatorManager to ensure only valid package names are included in the action configuration
updated assertions in ` IterableTest. java ` to use ` Arrays. < Object > ` instead of ` null ` to improve type safety and
added stream and parallel stream methods to MapIterable and PrimitiveObjectMap classes to enhance stream processing capabilities for different data types
clone notifInfo before returning it in DiagnosticCommandImpl. java to ensure that notifInfo remains unchanged after returning it
use command constants instead of command strings to improve code readability and maintainability
updated AEADBlockCipher class to improve cipher implementation to enhance security and performance of the AEAD block cipher
added a method to check if variables are local in the VariablesMap and WebVariablesMap classes to improve code readability and maintainability by centralizing
added a check for null and empty resName names in PackageResourceTable. java and changed the default resource mode from best to legacy to ensure
added a check for ` ulSize ` and ` ulPos ` before accessing the table buffer to ensure proper handling of underline metrics based on input
updated the constructor of SignPlugin to accept a message reader parameter to enhance flexibility by allowing customizable message readers
refactor Int2ObjectCache to improve code readability to enhance maintainability and facilitate future updates
removed validation logic for MavenDeployer in StandardMavenAuthenticationProvider. java to ensure proper handling of remote repositories during authentication
refactor AudioNode class to improve readability to enhance maintainability and facilitate future updates
added SSL context initialization and improved error logging in LinkyHandlerFactory. java and EnedisHttpApi. java to enhance security and provide clearer
refactor HiveFunctionRegistry to use a structured map for function replacements to improve code readability and maintainability by using a structured map structure
add jmxsupport. encodeobjectnamepart ( string ) for recoveredxatransaction
renamed the parameter ` possiblyFlavoredAlias ` to ` possiblyFlavoredAlias ` and updated its logic accordingly to improve clarity
added a check for ODataFeed before processing results in Olingo2Consumer to ensure proper handling of empty ODataFeeds before processing
added support for EQUIVALENT version retrieval in MetaStoreSchemaInfo. java to ensure compatibility with EQUIVALENT versions and
server : fix npe in uservmmanagerimpl when expunge vm.
added multiple @ Deprecated annotations to AbstractDateAssert. java to indicate that these classes are outdated and should not be used in future development
replaced calls to ` parseTitleAndContent ` with ` getNoteTitle ` in ` ONDashClockExtension ` and ` AlarmReceiver `
updated GoogleAuthUserConfigTable to use " nvarchar / varchar " instead of " int4 / int " for column types to ensure compatibility
replaced calls to ` SharedPreferences. Editor. commit ( ) ` with ` SharedPreferences. Editor. apply ( ) ` in multiple files to
added an idle listener to the StandardSession in AsyncTimeoutTest. java to enable testing of idle state during tests
change testBigQueryTable initialization to use String. format to improve readability and maintainability of the test case
reset the icon background resource in HotseatPredictionController and set the background to null in BubbleTextView to ensure the icon background is
mondrian : fix typo in property name
add a new abstract test class ` AbstractTestNativeSystemQueries ` for testing native system queries to improve test coverage and ensure that native system queries
updated the retrieval of active features in LIMEExplanation. java and added assertions in LIMEColumnarTest. java to ensure active features
updated AppleSimulatorController and InstallCommand to accept a list of command - line arguments and added a new option for running with - r to
replaced calls to ` getCurrentParagraph ( ) ` with ` getCurrentLineStartInParargraph ( ) ` in ` LineSelection. java `
added checks for Lifecycle state availability in ContainerBase. java and StandardContext. java to ensure proper lifecycle state management during pipeline execution
added functionality to clip the background to the outline in QsbWidgetHostView to improve visual appearance of the background in the UI
added progress tracking for flag conversion in SQLManager and updated split handling in BlockTypeListFlag and PlotArea to improve monitoring and logging of flag processing
updated FloatingTextRenderer to conditionally disable depth testing based on whether the floating text is occluded to improve performance by avoiding unnecessary depth calculations when the
changed the type of the context variable from ` LibFFIContextLinux ` to ` LibFFIContext _ Linux ` across multiple files to
added propagationBehavior property and related getter / setter methods in JdbcAggregationRepository to enable flexible configuration of propagation behavior in the transaction template
use l1 regularization instead of l2 regularization in layer validation
added try - catch blocks for exception handling in AbstractChecker. java to improve error handling and logging clarity
changed the access modifier of colorStack from static to instance to allow multiple colorStack instances to be accessed within the same class
updated method calls to use true instead of false for mapped statements to ensure correct statement handling in the configuration
convert currency to lowercase for depth retrieval in BTCEPollingMarketDataService to ensure consistency in currency representation across trading processes
updated the expected values for QTT publish values in ChannelStateTests. java to ensure correct values are generated for the command's channel state
removed the ` versionedHashes ` field from ` EnginePayloadParameter ` and related tests to simplify the payload handling by eliminating unnecessary fields
added triggerPrice field changed event handling in MutableOfferView. java to ensure triggerPrice is set correctly when the input field changes
refactor student feedback submission edit save action to handle error cases to improve user experience by providing appropriate feedback when an error occurs
removed debug print statements from I18NPageController. java to clean up the code and improve readability
hbase - 2658 fix possible race condition in hstore. getstore ( )
modify bean state handling in SaveManyBeans and add a test for bean state changes in TestBeanState to improve bean state management and ensure proper
added an ` _ alwaysSaveUri ` boolean field and corresponding getter / setter methods to allow configuration of whether to always save the URI based on
added new methods ` nSetLayerType ` and ` nSetLayerPaint ` to the ` ShadowRenderNode ` class to enhance functionality for
updated import statements and added popup menu visibility handling in LWChoicePeer. java to enhance user experience by ensuring popup menu displays correctly when visible
removed unnecessary initialization of HashMap and lowerCase in StressProfile. java to streamline code for better readability and maintainability
replaced usage of ` JavaConversions. asScalaIterable ` with ` collectionAsScalaIterable ` in multiple test wrappers to streamline
added null check for requests in MockServerEventLog and enhanced logging in HttpForwardObjectCallbackActionHandler to ensure robust handling of null requests and
added a warning log for file loading failures in DefaultEnvironment. java to improve error handling and provide clearer logging for file loading issues
added try - with - resources statement in ClientMain. java to ensure proper resource management and prevent potential resource leaks
added a condition to check if the network interface supports multicast and nic is up to ensure outgoing connections are only established when the network is up to
updated sqlCommand initialization to include a fixed length parameter to ensure the command does not exceed the specified length
replaced calls to ` setLatestConsumeTime ` and ` putLatestAssetOperationTimeMapV2 ` with calls to ` setLatestConsumeTime
added an invalidSessionStrategy method to SessionManagementConfigurer to enhance session management by allowing customizable invalid session strategies
improve error message for empty index in ProtobufAnnotationSerializer to provide clearer context on the nature of the error message
added a new test class ` MapAssert _ containsKeys _ Test ` to verify the existence of keys in a map assertion
refactor JdbcProxyGenerator to introduce a new interface JDBC4TemporaryPreparedStatementMethods and update method signatures accordingly to improve code organization and maintainability by
added a new method ` ensure ` to the ` ServerWebSocketContainer ` class and updated related calls in ` DirectUpgradeTest ` to enhance WebSocket
replaced ImmutableMultimap with ImmutableListMultimap in CxxFlags. java to improve immutability and maintainability of the code
pdfbox - 2576 : use point2d. x / y instead of point2d. x / y / x
added a static final EMPTY array of MethodHook objects and refactored hooks initialization in Method. java to improve code clarity and maintainability by
added a ` grantAccess ` parameter to the ` MockAuthenticationManager ` constructor and modified the return logic accordingly to allow users to grant access to
modified the afterJob method to accept JobExecution as a parameter to enhance flexibility in job execution handling
added a check for file execution permissions in SharedLibraryLoader. java to ensure that only writable files are processed
added hasTimeSeriesQueryLanguage method to both TimeSeriesQuery. java and TimeSeriesQueryOrBuilder. java to provide a clear indication of whether the
updated method names from ` SampleEvent ` to ` SampleEvent ` across multiple files to improve clarity and consistency in event handling
added constants for BATTERY _ LEVEL, ANNOTATION, TIME _ WITH _ OFFSET, DISTANCE, STARTTIMESTAMP, and PROFILE _ NAME
change the method parameter type from Hashtable to Map in the applyRule method to improve flexibility by allowing different types of search strings
rename ` movedGeoWidget ` to ` movedObject ` in ` EuclidianController. java ` to improve clarity and consistency in
updated texture filtering and texture filtering in JoglGraphics and ProjectiveTextureTest to enhance texture performance and improve texture filtering
refactor the ` setResourceToDelegate ` method to return a file instead of a void method to ensure that the output resource is writable before proceeding
camel - 1641 : intercept property from endpoint so it can be use from other component.
updated lastAttemptTime comparison from " > " to " > = " in ActionScheduler. java and adjusted the assertion in TestActionScheduler.
updated the debug zip path to use a temporary directory if debug _ log is not null to ensure the zip path is available for debugging purposes
update renderingdebugconfig to use renderingdebugconfig instead of worldrendererimpl
pipe should reset the gate when activated triggers be set. close # 349
refactor TestSupplementary to ensure Locale is saved before running tests to prevent locale - related issues during test execution
updated the color of the team in the Team constructor from 0.5 f to 0.3 f to improve the visual effect of the team's color
changed the type of activeMatchedStates from HashSet to Collection and added a while loop to improve performance and prevent premature removal of matched states
updated the condition to check for both null and empty list of expected exceptions in SoftAsserts. java to ensure proper handling of null and empty
added error handling for invalid JSON in StorageResources. java and added error logging in StoragePluginRegistryImpl. java to improve robustness and provide
refactor CallTreePrinter to use a new ` toCsvFile ` method for generating CSV files to improve code readability and maintainability by using a
added null checks for note and noteTmp in DetailFragment. java to improve robustness by preventing potential NullPointerExceptions
added peakTasks and modified task loading logic in AssetManager. java to improve task management and ensure correct loading behavior
simonstewart : allow native event to be enable on window
added new constants for nutch score, fetch interval, and metadata in the Injector class to improve code readability and maintainability by using named constants
updated import statements from ListUtils to ListUtils in ScimExternalGroupsTypeResolvingFactoryBean. java and RsaJsonWebKeyTests.
added a method ` isShareSchema ( ) ` to the ` CoreContainer ` class and a test method ` testShareSchema ( ) `
updated size calculations to use true for consistency across multiple classes to ensure consistent handling of sizeInBytes across the codebase
updated assertions in VersioningTest to check for null values to ensure that Gson correctly handles JSON deserialization of version1 _ 2
updated SQL queries to include additional columns for nullable types to ensure proper handling of nullable types in database metadata
[ java ] fix race condition in consensusmoduleagent. appendnewleadershiptermevent
removed the buildMediaType method from WebClientPlugin. java to streamline the code by eliminating unnecessary complexity
replaced calls to ` fillUsingLengthPrefix ` with ` fillSlice ` across multiple files to improve performance by using slices instead of length prefixes
added a check for the compaction status in AcidUtils. java and created a test for it in TestCleaner. java to ensure proper
set immutable storage scheme and qualifier encode scheme to null to ensure proper handling of null values
added new classes ` PojoProducersCustomized ` and ` RestProducersCutomized ` with their respective imports and annotations to establish a
updated references in ArtifactCacheBuckConfig to use CACHE _ SECTION _ NAME instead of " cache " to ensure consistency in accessing configuration properties
replace AesGcmSivKeyManager. register ( ) with AesGcmSivProtoSerialization. register ( ) to ensure
add a new slab wooden recipe to the oredictionary. close # 151
refactor multiple session factory and session management classes to improve code organization and maintainability
replaced ` AbstractBuildRuleWithResolver ` with ` AbstractBuildRule ` and removed ` SourcePathResolver ` from ` UndefinedSymbolsLinkerScript ` to
prepare next release 3.3. 2 ( rc1 )
removed MySQL and MariaDB dialect imports from DenormalizedTablePhysicalIncludedTableConstraintTest. java to simplify test setup by eliminating unnecessary
updated the center coordinates of the texture in spriteBatch drawing to correct the positioning of texture elements in the sprite batch
refactor plot handling in PlayerFunctions. java and update PlotId. java to include a toString method in PlotId. java to improve clarity and
added a deprecated version constant LUCENE _ 8 _ 5 _ 0 to indicate that LUCENE _ 8 _ 5 _ 0
corrected spacing in the output of the closeSocket method to improve code readability and maintain consistency
added a new test method ` testCastToSignedInteger ` to ` SelectTest. java ` to ensure that the SQL parser correctly handles signed
updated dependency type handling in CoNLLUOutputter and introduced a new SemanticGraphCoreAnnotations enum to improve clarity and maintainability of dependency
refactor ` NoSuchBuildTargetException ` to use ` parseContext. makeTargetDescription ( ) ` instead of the static method ` makeTargetDescription ( )
replaced ` testFromMain ( ) ` with ` test ( ) ` in ` MyChild ( args ). init ( ). test (
increase the size of configBlocks from Block. blocksList to 256 to accommodate larger configuration data sets
replaced log statements with System. out statements in BukkitMain. java to improve code readability and maintainability by using standard logging outputs
removed PostgreSQL question mark handling in AbstractSQLChange and added corresponding test cases in AbstractSQLChangeTest to ensure proper escaping of special characters in PostgreSQL
added ` ofAll ` and ` withAll ` methods to ` MutableBagFactory ` and ` MutableBagFactoryImpl ` classes to enhance functionality for
added error handling for mismatched shortname and permalink in BuildNavAndPDFBody. java to improve robustness by ensuring mismatched
changed MqttBrokerConnection from true to false in NhcMqttConnection2. java to disable the MQTT client connection during testing
replaced the method of retrieving the ChangeSet instance with a null check for the root change log to ensure that the changeLog is initialized before use
[ hotfix ] [ connectors / rocketmq ] fix formatting of log output
added HiveMetaStoreClient to drop database in TestHiveMetaStorePartitionSpecs. java and enhanced logging in TestObjectStore. java to improve database management and
added a new parameter " order _ currency " to the BithumbAuthenticated and BithumbAccountServiceRaw classes to support currency order in
deleted the SSEFluxWebConfig. java file to remove unused configuration components
updated JsonBuildHelper and IDocBuildTemplate to check for void return type instead of fully qualified names to ensure proper handling of return types in
updated YamlResource to replace YAML _ READER with YAML and added a new endpoint to list detection configurations to streamline YAML loading and enhance functionality
removed public access modifier from equals ( ) and hashCode ( ) methods in Marker. java to allow access to these methods from other classes
refactor thread creation in Basic. java and introduce awaitTermination method in GroupOfOne. java to improve code clarity and ensure proper termination of asynchronous
added unit tests for ` testAddingToList ` method in ` MongoTemplateTests ` and created a new ` PersonWithAList ` class with
g2p view : don't set coordinate space width if need
changed toolbar visibility from VISIBLE to GONE in DrawerActivity. java to ensure toolbar remains visible after a delay
refactor the ` unpackFirstPageReader ` method into a new method ` isExistOverlappedPage ` to improve code readability and maintainability
cloudstack - 7091 : don't log vm password error on vr start
added reset variables for output stream and character encoding in Response. java to ensure proper handling of character encoding during response processing
added a warning check for assignment side effects in GroupDialog. java to ensure proper handling of side effects in the grouping process
refactor JSON and JSONObjectConvertor classes for improved readability to enhance maintainability and facilitate future updates
added maxWidthWithMargin check for icon dimensions in FileUploadApiController. java to ensure icon dimensions do not exceed defined limits
refactor methods in RegisteredServiceProperty and JwtTokenCipherSigningPublicKeyEndpoint to use JcaPEMWriter instead of EncodingUtils to improve compatibility with
added mime type checking logic in Basic. java to ensure correct content type handling for UNIX and Windows operating systems
replaced JZlibDecoder and added Z _ BEST _ COMPRESSION functionality in NettyConnection. java to enhance compression handling and improve code clarity
added a method ` doesClassLoaderDescendFrom ` to ` Util. java ` and removed it from ` MethodHandles. java ` to stream
removed dependency check for io. netty : netty - handler - proxy in ChannelProvider. java and ProxyChannelProvider. java to simplify the connection
added a test method for handling an empty final column in TestCsvHeader. java to ensure proper functionality of CSV output for handling empty final columns
added compass gravity and margins to NearbyMapFragment to improve layout consistency for better user experience
added a test method for the ` computeNearestDistance ` method in ` GeoPathTest. java ` to ensure that the ` computeNe
added HiveException to the getLeafFilterBuilderByType method and updated exception handling in ParquetFilterPredicateConverter to improve error handling and provide clearer
added handling for audio track language in LibMediaInfoParser to ensure correct language is used for media files
added a warning log message indicating compatibility issues in MicroserviceRegisterTask. java to improve user feedback when schemas in newer versions are less than the
replaced System. arraycopy calls with addAll method for array items in Array, FloatArray, IntArray, LongArray, and ObjectArrays to improve
added exception handling around the closing of the database connection to ensure proper resource management and prevent application crashes
added constructors and tests for InMemoryClientRegistrationRepository and InMemoryReactiveClientRegistrationRepository to ensure proper handling of client registrations and enforce non -
added a method to reset the UI state in SchemaUpgradeHelper to ensure consistent UI state updates across the application
added handling for pending exceptions in JUnitReporter and corresponding test cases to ensure proper failure reporting when pending exceptions are encountered
add a new file PlayerSelector. java to handle entity and player selectors to enhance entity selection capabilities for better player interaction
added Closeable interface to Selector class to enable closing of resources in the Selector class
updated MaxConcurrentStreamsTest to use a MultiplexConnectionPool for connection pooling to improve connection management and enhance test reliability
added multiple calls to stringType ( ) in CoreOptions. java to ensure consistent string type handling across the application
added null checks for character and parameter in HqlQueryRenderer and updated test context annotations in EclipseLinkUserRepositoryFinderTests to improve robustness
updated HTTP status checks in HttpGenerator, HttpChannel, HttpConnection, Response, and StatisticsHandler to ensure proper handling of HTTP status codes and
pdfbox - 4892 : simplify code, a suggest by valerybokov
updated HikariCPCollectorTest to use StubDataSourceClassName and setMaximumPoolSize instead of JDBC URL and connection pool size to improve test reliability and
refactor file selection handling in ParquetFormatPlugin and ParquetGroupScan to improve clarity and maintainability of metadata file management
modified the ` isSuccess ` variable to use a new ` BuckJavacTaskProxy ` and added error handling for ABI compilation to improve
replaced ` baseRenderer ` with ` baseModelListener ` and added a listener to the ` DefaultSortedTableModel ` class to enable listener functionality for
updated the range check for the number from 49152 to 65535 to ensure that the number does not exceed a defined range
added document provider authority handling in AuthenticatorActivity and AccountRemovalJob to ensure compatibility with devices running KitKat and later
removed the call to Log _ OC. startLogging ( getAppContext ( ) ) in MainApp. java to streamline logging functionality by elim
added error handling for wrapped RequestRejectedException in FilterChainProxy to ensure proper handling of wrapped RequestRejectedExceptions
update length calculation in StringBuilder to use'chars'instead of'length'to ensure correct length is used for array copying
pdfbox - 2576 : check for empty filter list instead of throw an exception
added a new class ` TbStopWatch ` with methods to retrieve total and last task time to facilitate monitoring and monitoring of task
set initialized to true in PListStore. java to ensure proper initialization of PListStore
added @ Deprecated annotation to multiple Continuation - related classes to indicate that the current servlet version is outdated and encourage the use of Servlet 3.0
[ hotfix ] [ zeppelin - 4952 ] fix classloading issue in remoteinterpreterserver
fix checkstyle issue in forgeHooks. java
updated minSdk from P to O _ MR1 in ShadowRttCallTest. java and ShadowCall. java to ensure compatibility with the
updated parameter names and logic for timer ID retrieval in DeadlineTimerWheel. java to improve clarity and maintainability of the code
added getSimpleName ( ) methods to BeanDescriptor, BeanDescriptorElement, and CQueryPlan classes to provide access to the bean's getSimpleName (
updated URLs in BasePage. java and added WroSassProvider. java with preprocessors and postprocessors in WroManagerFactory. java
added a test method to show the latest timeseries in IoTDBMetadataFetchIT. java to ensure that the latest timeseries data is
updated the constant name from " appContextLocation " to " contextConfigLocation " to accurately reflect the context configuration location being used
modified OCSPChecker to handle different exception types to improve error handling clarity and maintainability
enable writeoutputsolutionenabled by default
chore : update gapic - generator - java version to 2.1. 0 ( # 444 )
added a new file ` Issue _ 815. java ` that implements a test for closing a volume to address issue # 815 related to
added a shapeless recipe for the slime ball in the BuildCraftTransport to enhance the modularity of the slime ball by
mahout - 498 : fix bug in sequentialaccessSparsevector. java
added handling for ` Shulker ` entities in ` BukkitMain ` and ` EntitySpawnListener ` to ensure proper management of player entities
added getDebugLogger method to DIHWriter and SolrWriter classes to provide access to the debug logger for debugging purposes
http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 5674 and add a check
added a check for the presence of a tag in the UpToTagChangeSetFilter to ensure that only matching tags are processed and log a
[ beam - 8470 ] fix checkstyle violation in groupbytranslator
refactor BrokerRoutingManager to improve code readability to enhance maintainability and facilitate future updates
changed volumePaint from gray to GRAY and GREEN in CandlestickRenderer to improve visual consistency by using a more appropriate color
refactor layout parameters in InsettableFrameLayout for better clarity to improve readability and maintainability of layout handling logic
updated ` BuildTargetDurationListener ` to include duration as a parameter and modified ` BuildTargetDurationListenerTest ` to include duration information to enhance functionality by
updated JUnit profile assertions to include " hsqldb " and " sqlserver " properties to ensure that the test uses the expected database profile for
added a null check for the user before processing claims to avoid potential NullPointerExceptions when user is not initialized
added unit test base on user forum issue
replaced ` ConcurrentSkipListSet ` with ` NonBlockingHashSet ` in ` CassandraConnection. java ` to utilize a more efficient data structure for
api : listpublicipaddresses - add networkid parameter to list public ip by source network id
added unit tests for Ignoring battery optimizations in ShadowPowerManagerTest and implemented the isIgnoringBatteryOptimizations method in ShadowPower
updated the version retrieval to use a dynamic property from __ buildProperties to improve flexibility by allowing dynamic configuration of the Jetty version
added unit tests to verify invocation handling in the NumberOfInvocationsInOrderVerifierTest class to ensure correct verification of invocations in the verifier
refactor debug force evaluation logic in TRegexExecNode. java to improve readability and maintainability of the code
added " - foreground " flag to the startProfile method in NewProfileExtensionConnection. java to specify the foreground mode for profile execution
replaced ` executor ` with ` executorLauncher ` and ` executorCloser ` in ` MiniSolrCloudCluster. java ` to improve resource management
changed the type of ` parseFieldnames ` from ` Map < String, String > ` to ` String [ ] ` and updated its usage
updated the method to retrieve the file name in CodeEditorView. java and added checks for parent views in EditorTextActionWindow. java to
updated the handling of skipped entries to include detailed error messages to improve error reporting and provide clearer context for skipped entries
added link storage functionality to the Fetcher and updated related components to enhance document storage capabilities and improve error logging for unknown content types
added support for an existing bubble in the BubbleBarController to enhance functionality by allowing existing bubble entries to be processed
refactor CronScheduledRoutePolicy and ScheduledJob to throw IllegalArgumentException instead of logging warnings to improve error handling and provide clearer error messages
updated method signatures and variable types for consistency and clarity to improve code readability and maintainability
[ java ] : add nak _ multicast _ delay generator to mediadriver.
added client secret and issued time to the response in ClientInformationResponseView. java to ensure proper handling of client secrets and expiration dates
added a check to ensure ` openOrder. getFieldAmount ( ) ` is non - negative before adding it to ` limitOrders ` to prevent
removed the rawExecutionReports ( ) method from BinanceStreamingMarketDataService to streamline the code by eliminating unnecessary method calls
added a ` fail ( Exception e ) ` method to ` LdapTimeoutTest ` to improve error handling by providing a more informative failure message
added checks for existence of user dictionary file before reading lexicon to ensure lexicon file is only read when it does not exist
refactor password management logic in AmbariServerConfigurationHandler. java and update test cases in RootServiceComponentConfigurationResourceProviderTest. java to improve
added a method to check if a segment is already parsed in ParseSegment. java and updated SegmentChecker. java to improve segment parsing logic and
[ hotfix ] [ yarn ] make application attempt failure validity interval configurable
added handling for ClassNotFoundException in GeoserverInitStartupListener to skip unloading of the H2 driver when the H2 driver is not included
hbase - 25835 tablesnapshotinputformat need to update stream read type for snapshot - based inputformat
added new options for fixed dimensions in LoginInstanceRequest to allow customization of instance login options
added a corner radius parameter to several methods in ActivityControlHelper, ClipAnimationHelper, WindowTransformSwipeHandler, and LauncherLayoutListener to allow
added filters to the COMMANDS _ TO _ REMOVE array and modified filter settings in QFile. java to enhance filtering capabilities and improve clarity
added retry logic for connection pooling in TxnHandler. java to improve reliability of database connections by retrying if a problem occurs
renamed the method ` txnEnsureReserve ` to ` txnCheckReserve ` and added a new method ` txnEnsureBackupReser
added a new field ` strings ` to the ` FirstOfStringsMatcher ` class to enhance the functionality of the ` FirstOfStringsMatcher `
updated delete statements to use " DELETE ROWS CLIENT SELECT " instead of " DELETE ROWS " and added a new test class for Explain
updated exception handling logic in BaseServiceException to distinguish between idempotency and non - idempotency to improve reliability of exception handling in the
added rapidInstallTypes to AdbHelper, AndroidDevicesHelperFactory, RealAndroidDevice, BuckConfig, and AdbHelperTest classes
updated the regex pattern for the - srand command in SortTest. java to allow for additional characters in the command pattern
refactor ` MultimapSubject ` to use a factory method for creating ` IterableSubject ` instances to improve code readability and maintainability by centralizing string
modified return value from ` getVisibleBounds ( ) ` to ` y - 1 ` based on device orientation to ensure correct positioning of the launcher based
added a boolean field ` transmux ` to the ` ComponentListener ` class and updated related methods accordingly to enable control over the transcoding
added localization functionality to the Picker class to enhance user experience by displaying localized strings
camel - cxfrs : fix npe if no endpoint be find.
hhh - 11777 postgresql dialect should not throw sqlexception if lock acquisition fails
updated query ID handling in TestJdbcDriver2 and HiveStatement classes and added error handling in HiveStatement to improve test reliability and maintainability
added UsesUnboundedPCollections category to the Category annotation in ParDoTest. java to support unbounded collections in the testing framework
updated HTML string formatting in GpsSimpleViewFragment. java to improve readability and maintainability of the code
[ java ] remove unnecessary'leadership termid'parameter from joinlogasfollower method.
added a private field ` exchange ` and updated its assignment in ` HttpSender. java ` to improve code clarity and maintainability by ensuring
[ hotfix ] [ test ] migrate failoverstrategycheckpointcoordinatortest to junit 5.
updated method names from ` token ` to ` apiToken ` in ` AppOpticsPropertiesConfigAdapter ` to improve clarity and consistency in naming
added null check for the tree before iterating over markers to prevent potential NullPointerExceptions when the tree is not initialized
convert font size from float to double across multiple classes to ensure consistent handling of font size values
addressbookdocoomoresultparser : fix arrayindexoutofboundsexception
added exclusions handling in RawMavenResolver to ensure proper extraction of group artifacts from dependencies
added null checks for DSX exchange info and updated currency pair handling in DSXAdapters and DSXBaseService to improve error handling and
renamed multiple test classes for consistency to improve clarity and maintainability of the testing framework
[ drools - 90 ] don't fail incremental build if pom be invalid
modified the initialization of ` copy ` and added a conditional check for ` sobj. has ( k ) ` to ensure ` sobj `
renamed JacksonDataFormat and JacksonXMLDataFormat classes to improve clarity and maintain consistency in naming conventions
replaced direct method handles in HostFieldDesc. java with CompilerAsserts. neverPartOfCompilation ( ) to improve code clarity and maintainability
added a new method parameter annotation for " completedStage " in the database to support the use of a CompletableFuture for method parameters
adjusted the calculation for mFreezeCheckPoint in PlaybackController. java to ensure that mFreezeCheckPoint does not exceed the maximum
added imports for Whitebox and updated internal state handling in PowerMockRunner to improve code clarity and ensure proper handling of annotations during tests
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4659
refactor TabsAndIndentsVisitor to improve indentation handling for method invocations to enhance clarity and maintainability of indentation logic
updated TestSingleTokenTokenFilter to extend TestCase instead of LuceneTestCase to ensure compatibility with the latest testing framework
updated HTML output formatting in HtmlProcessInformationsReport. java to improve code readability and maintainability
refactor execution context retrieval methods in JdbcStepExecutionDao, MapStepExecutionDao, SimpleJobRepository, and JobRepository to improve code clarity and
added a conditional check for new media folders before adding it to the root folder to ensure that only new media folders are displayed when hidden
added null checks for actor input in SplitPane. java to ensure proper handling of widgets and prevent UnsupportedOperationException
added handling for JavaType. Parameterized in RemoveUnusedImports. java to ensure proper handling of parameterized types and packages
updated debug log message to use'this'instead of'getModInfos ( ). get ( 0 )'to improve code clarity and ensure
changed the logger from instance to static final in TicketGrantingTicketImpl. java to ensure logger is accessible across all instances of TicketGranting
updated the RLE precision in the SQL string from 3.0. 1 to 3.0. 81 in PhysicalPlanTest. java to ensure compatibility with the
added a new method ` isValue ( String value ) ` to ` AttrData ` and updated related logic in ` Converter ` to improve value
added methods to handle international PCs and character modifiers in CPlatformResponder. java and LWCToolkit. java to improve character handling
[ java ] add aeron publication connection timeout to the ctestmediadriver environment.
added a check to return false if the request URI starts with " / css " or " / images " to ensure proper handling of requests that
added a test assertion to verify the installation of a wellbeing test APK to ensure that the APK installation is successful before proceeding with testing
no effective change - remove oracleansisqlrowslimiter
added mock for MultiMap in TestSimpleBodyHandler and updated array size assertions in TestVertxTLSBuilder to improve test reliability and ensure
updated Java library paths in DiffRuleKeysScriptIntegrationTest. java to ensure consistency in project structure
added a private boolean variable ` mIsDismissHapticRunning ` and modified conditional logic in ` TaskViewTouchController. java ` to ensure
MixinEventWorldExplosion to handle both Projectile and Explosion explosion to improve error handling and provide more informative
added setHasStableIds ( true ) method to SymbolInputAdapter to ensure stable identification of items in the adapter
updated limit _ bids and limit _ asks parameters from 10 to 50 in Bitfinex. java and BitfinexPollingMarketDataService.
added a check to replace backslashes with single quotes in the result to ensure proper handling of escaped backslashes in the output
[ hotfix ] [ runtime ] add tostring ( ) method to karafeleaderelectiondriver
refactor SqlSessionFactoryBean to improve code readability to enhance maintainability and facilitate future updates
[ 3.0 ] fix nullpointerexception in tripleinvoker ( # 9441 )
replace Gdx. app. error with a new GdxRuntimeException for error reading to improve error handling and provide clearer error feedback
added a method to check if a threadlocal Deadline is started in both RawStoreProxy. java and Deadline. java to ensure that
added handling for ClosedChannelException in NettyRequestExecutor to improve error messaging for closed channels
added null check for genres before setting text in ItemListActivity to prevent potential NullPointerExceptions when genres are null
[ flink - 3594 ] [ runtime ] call reset method in checkpointcoordinatortest.
added a new ` MappedContainerComponent ` class and a test for it in ` PrefabTest ` to facilitate the mapping of mapped
[ iotdb - 3441 ] fix npe in walnode ( # 3442 )
updated the handle method call in Endpoint. java and added a test for retrying same host on callback failure in HttpTest. java to ensure
update package structure for mmm and ppp packages to improve organization and clarity of the codebase
added a new test class SQLServerEscapeQuestionCharacterTest for testing SQL queries to ensure correct escaping of question characters in Hibernate queries
added nullability annotations to constructors and constructors in CamelModule and JoobyRepository classes to enhance code robustness by preventing NullPointerExceptions
replaced conditional wait logic with a utility method for better readability to improve code clarity and maintainability by using a standardized wait mechanism
changed package structure from ` com. kenai. jaffl ` to ` com. kenai. jaffl. provider
refactor CropperUtils to improve handling of CropperBehaviour instances to enhance code clarity and ensure proper instantiation of CropperBe
removed appName parameter from configure methods in InputRC. java to simplify configuration by eliminating appName parameter
added test cases for installing and uninstalling ignored dependencies in CatalogInstallTest and UninstallTest to ensure that the installation process correctly handles dependencies
danielwagnerhall : use -- headless = chrome instead of set headless = true
updated the assignment of the value to use interning to ensure that the value remains consistent and avoids potential memory leaks
added " MOVE " status check for recv _ status in Connection. java to ensure status is accurately distinguished between insert, update,
updated date format parameters in FixedDateFormat. java to ensure correct time representation for date formatting
replaced the import of ` org. apache. curator. shaded. com. google. common. collect. Lists ` with ` com
[ hotfix ] [ runtime ] fix memory leak in hsbuffercontext
updated permission checks in Visit. java to include ADMIN _ VISIT _ UNTRUSTED permission to ensure that untrusted visits are only
don't register jabber account if jabber account be unavailable.
updated boundary checks in BasicURLNormalizer and added a new test for curly brackets in TestBasicURLNormalizer to ensure proper normalization of
changed access modifiers of methods in QuickstepTransitionManager from protected to private to restrict access to these methods for better encapsulation
added a comparison of lock rate values in EncodingConfiguration. java to ensure accurate data comparison between enc1 and enc2
added a method to retrieve the project path in ProjectGenerator and updated ProjectCommand to return an ImmutableSet of project paths to improve project management and provide
updated the logic for handling zero digit in HostLocaleProviderAdapterImpl. java to ensure that zero digit is only set when the language tag is
added a new file ` MSwingUtilities. java ` for displaying exceptions in the MSwingUtilities class to improve error handling and provide user feedback
camel - core - optimize the mail producer to use asynccallback instead of defaultproducer.
added ` @ RefreshScope ` annotation to ` CasCoreWebConfiguration ` and ` PasswordlessAuthenticationConfiguration ` classes to establish a refresh scope
added a new file OnExceptionHandleAndThrowNewExceptionTest. java to test the behavior of onexception handling in camel
added Main. java and ScriptRenderer. java files for the scripting tool integration to facilitate the execution of JavaScript templates within the schemac
added a condition to check if the input state is not __ NONE and created a new test for the query after reading to ensure proper handling of
added a check for non - empty glyph dimensions before calculating descent to ensure descent does not exceed available glyph dimensions
replaced reportFailure calls with context. runCloseHooks in DeploymentManager. java and added a test case in DeploymentTest. java to ensure
make lexicorecipmap. getmetrictrictrict ( ) use a force ignore flag.
increased sleep duration from 100ms to 500ms in ConstantTimeBackoffTest to allow more time for interruption during test execution
replaced StringUtils. isNotBlank with StringUtils. * in LoincHandler. java to simplify string handling and improve code readability
updated the resource loading mechanism in JollyDayHolidays. java to improve resource loading efficiency and maintainability
added a new class FieldUtils with utility methods for retrieving and accessing fields to improve code maintainability and facilitate easier access to fields in
removed unnecessary condition for speculative type checking in DeferredAttr. java and added a new DoubleStaticImport class DoubleStaticImport. java to simplify
updated layout inflation from ` workspace _ custom _ content ` to ` workspace _ screen ` and added padding based on widget dimensions to improve layout
added ` updateSettingsWithSaveLastAccount ` method to ` XabberAccountManager ` and implemented error handling in ` XabberAccountManager `
added a new method ` setvar ` to handle command line arguments to provide users with a convenient way to set variable values in the command line
added a new file ` CatEntity. java ` for handling animal tame events in the CatEntity class to enhance event handling for animal t
added validation for unsigned range in WindowFrame. java to ensure proper handling of unsigned values and improve error messaging
pdfbox - 2576 : add a test to verify that the font be the correct one
added setting of the application's mode to ensure the application's mode is correctly configured
added methods for configuring Docker file paths and arguments in ImageFromDockerfile to enhance flexibility in configuring Docker file paths and arguments
added a null check for threadInfos before initializing threadNames and threadClassNames to avoid potential NullPointerExceptions when threadInfos are not initialized
updated the condition from checking if the sweepAngleOuter is less than a float epsilon to ensure that the sweepAngleOuter value does not exceed a
[ hotfix ] [ checkpointing ] log the number of input channel recovered from checkpoint.
added new table types including SYNONYM, ALIAS, ACCEL _ ONLY _ TABLE, AUXILIARY _ TABLE,
updated FuzzyQuery and FuzzyTermEnum to accept a minimumSimilarity parameter and adjusted related calculations to enhance flexibility in similarity calculations and improve
replaced the method ` addActionsView ( ) ` with ` setActionsView ( ) ` in ` RecentsView. java ` to improve
add support for set the'immediateflush'property of outputstreamappender.
added " org. springframework. cloud. autoconfigure. amqp. RabbitAutoConfiguration " and " org. springframework. boot.
added null check in JLayer. java and created a new test class bug6875716. java to ensure proper handling of null components and
replaced the import of avro. shaded. com. google. common. base. Function with com. google. common. base. Function
refactor BciBlockMapping and GraphBuilderPhase to use ExceptionDispatchBlock instead of BciBlock to improve code clarity and maintainability by central
added a legacyRenderer property and related getter / setter methods in the Label class to allow customization of the legacy rendering behavior
replaced the method ` intToFourBytes ` with ` Ints. toByteArray ` for byte conversion in ` AbstractJweDecrypter `
added null check for mObserver in NavigationModeFeatureFlag. java to prevent potential NullPointerException when mObserver is not initialized
updated the return type of the thenComparing method in Comparator. java and added a new Department class with getter methods in TypeTest. java
refactor DocIdSet class to improve code structure to enhance maintainability and readability of the code
updated setEndTimeUtc method to use currentKey bucketMillis instead of null to ensure anomaly results are accurately recorded based on the current key
added exception handling for NumberFormatException in VisualScoreTagTest. java to ensure that NumberFormatException does not occur during parsing
updated the setting of the enhancer's class loader in MockFactory. java to ensure the enhancer uses the correct class loader
added a new class ` OriginalFormat ` and implemented ` format ` and ` parseObject ` methods in ` ConverterWithEnumFormat ` to enhance
updated date format from " yyyy / MM / " to a constant PATTERN _ YYYY _ MM to improve code readability and maintainability by
updated JAWTRenderer. java file to improve rendering performance and maintainability
camel - aws2 - * : add autowire to the aws2 - lambda component
cloudstack - 7091 : add a method to validate the availability of a mac address in the network
added a condition to check if the header name equals " Authorization " to ensure proper authorization handling in the ProxyServlet
replaced ` submit ` method with ` execute ` method in ` TraceableExecutorService ` to improve clarity and consistency in context handling
added getDetails ( ) method to AbstractAuthenticationToken, AbstractAuthenticationToken, UsernamePasswordAuthenticationToken, and related classes to provide access to the details
updated the random boolean value from ` nextBoolean ( ) ` to ` nextInt ( ) ` in ` SolrTestCaseJ4. java ` to
replaced calls to ` appendDot ( ) ` and ` endSentence ( ) ` with ` endSentence ( ) ` across multiple classes to improve
updated formatForConsole method to accept Locale instead of Ansi to ensure consistent formatting across different locales
updated GroovyParserVisitor to use a wildcard import and modified argument parsing logic to improve code clarity and ensure correct handling of parsed arguments
added checks for inset dimensions in Border. java to ensure appropriate inset values are computed based on input values
refactor gesture state handling in TouchInteractionService to improve clarity and maintainability of gesture state management
updated LlapServiceDriver to use java. time. format. DateTimeFormatter instead of joda. time. DateTime to improve compatibility with the
updated openblas and openblas _ nolapack files to improve code organization and maintainability
close piece storage in case of an exception
added synchronized keyword to the initTxnMgr method to ensure thread safety during initialization
increased timeout duration from 120ms to 480ms in AbstractDistribZkTestBase. java and adjusted socket timeout from 15000ms to
added a new class ` SearchResults ` to handle search results to facilitate the retrieval of documents from Lucene results
refactored refresh handling in CPUSamplerSupport to improve code readability and maintainability
replace the initialization of ` primitives ` with a temporary ` primitivesTemp ` object to ensure that the ` primitivesTemp ` object is always available before
added new versions " 8.10. 0 - cfs " and " 8.10. 0 - nocfs " to the TestBackwardsCompatibility.
updated the feature flag from DISABLED to TEAMFOOD in FeatureFlags. java and modified the text check in AppIcon. java to enhance
added a new API endpoint to retrieve tenant pools for the current instance to enhance functionality for managing instance pools in the application
refactor ` canEarlyTerminateOnDocId ` and ` canEarlyTerminateOnPrefix ` methods to improve clarity and functionality of
added a new method ` isToString ( ) ` to ` InlineBytecodeGenerator ` and updated imports in ` InlineByteBuddyMockMaker
added logging statements for command compilation and preprocessing in CxxCompileStep and CxxPreprocessStep to improve error reporting and debugging capabilities during command execution
added a method to remove characters from a string in StringUtil. java and corresponding test cases in StringUtilTest. java to improve character removal functionality and
updated metadata service protocol from ` METADATA _ SERVICE _ PORT _ KEY ` to ` METADATA _ SERVICE _ PROTOCOL _ KEY ` across multiple files to
added a new interface DataTransformer with methods for compiling and transforming expressions to provide a structured way to handle data transformations in the runtime
changed the type of ` objval ` from ` Object ` to ` Number [ ] ` in ` DistributionGraph. java ` to improve type
removed the ` interesting ` flag from the ` visit ` method in ` FormatStringChecker. java ` to simplify the callback handling logic for op
set the SolrCore to null in ElectionContext. java to ensure the SolrCore is initialized before use
refactor ITestDbTxnManager to improve code readability to enhance maintainability and facilitate future updates
refactor connection handling in DatabasePlatformFactory to use try - with - resources to ensure proper resource management and avoid potential resource leaks
added a new method ` testMapModel ` to ` CodeFirstPojoClient ` and test it in ` CodePojoFirst ` to enhance functionality by
pdfbox - 4892 : simplify code, a suggest by valerybokov
refactor selection handling in ScaleDialog to improve clarity and maintainability to enhance code readability and ensure proper selection state updates
rename ` updatePlayerStepStatus ` to ` tickBelt ` across multiple files to improve clarity and consistency in naming conventions
pdfbox - 2576 : skip appearance stream creation if there be no rectangle
replaced SortedSet with LinkedHashSet in ExecuteSqlCommandStep to ensure predictable iteration order for keys
increased the time threshold from 1500ms to 1000ms in CancelEventTimer. java and added a new parameter to PagePreviewCard. java to
updated the library path from " libdc1394 - 22 " to " libdc1394 - 25 " to ensure compatibility with the latest
added conditional logic to setAllConstructorsToPublic in MainMockTransformer and created new classes MockStaticWithPrivateCtorTest and StaticWithPrivateC
pdfbox - 4892 : don't decrypt cosarray if it's not a cosstring
added a method to set the window title in MainFrame. java to improve accessibility of the AWT toolkit
modify depth calculation based on pixel size in XRSurfaceData. java to ensure depth is only set when the pixel size is different from 32
added error handling for reading response body in OkHttpDataSource to improve error management and provide clearer error responses
added a static method ` exit ` to ` TopLogging ` and updated its usage in ` TopThreadGroup ` to improve error handling by replacing
updated the calculation of the start index based on the regexp's state to ensure correct starting index is used when the regexp is not global
planner - 468 : ignore test due to late optaplanner 6.3. 1 upgrade
updated the retrieval of highAllocation from lowIndex to highIndex to ensure highAllocation is correctly initialized from availableAllocations
added methods to delete entries without feeds in DatabaseCleaner and FeedEntryDAO to improve data management and facilitate deletion of entries without feeds
changed the return type of the appendToLabel method from void to returning this to ensure that the method can return the current AtomicCounter instance
added a new NoOpIdleStrategy class and updated LowLatencyMediaDriver to use it to introduce a new idle strategy for handling network and idle
added handling for not - modified HTTP headers in CacheControlHeadersWriter and associated tests to ensure proper response status management when not modified is encountered
refactor InstrumentationPartialEvaluationTest to use ToolEvalNodeFactory instead of SplicedNode to improve code clarity and maintainability by using a
removed the paintTabArea method from SynthTabbedPaneUI to streamline the code by eliminating unused methods
updated KrakenMarketDataService and KrakenMarketDataServiceRaw to use Object... args instead of Long for argument handling to improve
added file separator and isabsolute methods in FileEndpoint, GenericFile, RemoteFile, and RemoteFileEndpoint classes to enhance file handling capabilities and
added a new build method in JavaProvenance. java and updated MavenProjectParser. java to use this new build method to enhance functionality and
added logging for Registered Hive UDFs and non - determinism UDFs in HiveFunctionRegistry to improve traceability and debugging capabilities during UDF
increased the loop iteration from 100 to 200 in CloudStateUpdateTest. java to allow for more time for state updates
replace UnserializableColumnFamilyException with UnknownColumnFamilyException in multiple files to improve error handling for unknown column families
added a check for writable output files in NativeErrors. java to improve error reporting when output files are not writable
added functionality to check if the application is enabled before retrieving package information to ensure that only valid package information is processed during the installation process
cloudstack - 410to420 : fix ntwk _ offering _ service _ map delete failure
updated exception handling in AbstractFaultTolerantChunkOrientedTasklet and added a new test method in FaultTolerantChunkO
replaced ` startsWith ( completed ) ` with ` regionMatches ( ) ` for case insensitivity checks to improve readability and maintainability of the code
added GLOBAL _ DATA _ TABLES list and modified dataTables return logic to improve data table handling and ensure proper concatenation of data tables
added functionality to dismiss all tasks in TaplTestsTaskbar to improve user experience by ensuring tasks are properly closed
cloudstack - 4131 : add support for update db upgrade system vm templates
changed the condition for closing the connection in LdapClient. java to ensure proper resource management and prevent potential memory leaks
refactor index comparison logic in SequenceAction. java to improve clarity and maintainability of action processing logic
added ThreadLocal to manage keyspace access levels in CassandraServer. java to improve security by ensuring only valid keyspaces are used in the application
added a check to skip fields that are not Synthetic to ensure that only synthetic fields are processed
added LoggerProvider to enable logging capabilities in the Ninja application to enhance logging capabilities for better debugging and monitoring
updated the type of the port variable from String to Object in ServerStatusCommand. java and ServerStatusCommandTest. java to improve type safety
added deprecation warning in SpringFactory and updated test cases in SpringFactoryTest to improve clarity of warning messages related to spring context configuration
added a method ` deepStart ` to the ` Startables ` class to enhance functionality by allowing multiple startables to be processed
added a deprecated method ` reservePrimitiveExtensionArray ( ) ` to ` Shape ` and its implementation in ` ShapeImpl ` to indicate that the
added support for ILaserTargetBlock in BlockLaserTable and TileLaser classes to enhance functionality for handling ILaser targets within
modified the condition for checking object names in AbstractJdbcDatabase to ensure proper handling of reserved words in object names
removed unused imports from TestSolr4Spatial2. java to improve code clarity and reduce unnecessary dependencies
[ hotfix ] [ test ] make policyentry. setexpiremessagesperiod ( 0 ) configurable
modified null and empty checks for handlerName in RequestHandlers. java to improve robustness and prevent potential NullPointerExceptions
updated the servlet name retrieval in ProxyServlet. java to ensure proper formatting of the servlet name to improve clarity and maintainability of logging output
updated import statements and modified PYTHONPATH environment variable handling in ProjectBuildFileParser. java to improve code clarity and ensure correct PYTHONPATH environment variable is used
updated audio data handling and error handling in DirectAudioDevice and Toolkit classes to improve robustness and prevent potential errors during audio processing
added null check for enums in ElasticSearchStringLookupService to prevent potential NullPointerExceptions when enums are null
updated error message format in CommitLogReader to include additional context to improve clarity of error messages for better debugging
added initialization of WebSocketPolicy in WebSocketSession. java to ensure the correct policy is used for WebSocket connections
refactored static field initialization logic in Java2TypeScriptTranslator to improve clarity and maintainability of the code
updated the static handler to use a dynamic webroot argument to improve flexibility by allowing dynamic webroot configuration
( chore ) camel - spring - boot - test : migrate test to junit 5 ( # 1086 )
refactor isAttachable method in JpsProxy and improve error handling in Utils to enhance code clarity and maintainability while handling monitoring exceptions
replaced calls to ` printHeaderObject ` with ` createHeader ` in multiple formatter classes to improve code clarity and maintainability by using a dedicated
consolidated multiple import statements into a single wildcard import and added a placeholder method for placing stop orders to streamline import statements and prepare for future
added multiple calls to reset the buffer in ReduceRecordProcessor. java to ensure the buffer is reset before processing new records
added null checks before setting foreground and background to prevent potential NullPointerExceptions
updated boundary checks in FloatingDecimal. java and added a new class ToString. java with a main method to improve validation of decimal values and validate
updated property type checking logic in PropertyDescriptor. java and added a new test class Test7189112. java to improve type safety and
updated version retrieval logic in RealTimeGetComponent. java to simplify version management and improve code clarity
updated the handling of the ORIGIN header to conditionally set the origin based on whether the URI is secured or not to ensure that the origin header is
updated animation logic in RecentsView and TaskView to improve visibility and animation effects based on overlay modal state to enhance user experience by visually indicating
updated error messages in ORCRecordReader for clarity to improve readability and maintainability of error messages
updated sample URLs for TearsOfSteel and Clear HLS variants in DemoUtil. java to ensure compatibility with new media formats and
renamed constants HIBERNATE _ SESSION _ INTERFACE and HIBERNATE _ JPA _ METAMODEL _ TYPE to improve clarity
updated log references from ExecRPCInvoker and WritableRpcEngine to use " org. apache. hadoop. ipc " instead of " org. apache
added diagnostic logging functionality to TestSpecificCompiler for handling specific diagnostic types to improve error reporting and debugging capabilities during schema compilation
refactor WebSocket session creation logic and add a test for session closure to improve session management and ensure proper handling of closed sessions
increased delayInSec values from 1 to 10 in multiple services to allow for more time for asynchronous operations during batch processing
updated mappings for OpenSymphony Group / / XWork 2. 1 / EN to use Apache Struts instead of OpenSymphony Group
added conditional logic to stop the video stream based on its state to ensure proper cleanup of video tracks when stopping the stream
updated BittrexChartDataResponse to use ArrayList instead of List and added BittrexChartDataPeriodType enum to improve data handling and
use geotools. data. collection. listfeaturecollection instead of geotools. data. collection. listfeaturecollection
replace substream ( ) with skip ( ) in TargetType58. java to improve performance by avoiding unnecessary substreams
hhh - 10956 - add getidentifiergenerator ( ) to abstractentitytuplizer
rename ` FindFullTextAction ` to ` DownloadFullTextAction ` across multiple files to clarify the purpose of the action being downloaded
refactor URI registration logic to use a separate list for URI registrations to improve code readability and maintainability by consolidating registration logic
refactor WebSocketMapping and WebSocketUpgradeFilter classes to improve code readability and maintainability
added handling for blank OSDB hash in OpenSubtitle. java to ensure that the OSDB hash is valid before proceeding with API result
added methods to handle token transfer in RuntimeImpl and MUtil classes to enhance functionality by allowing token transfer based on contract parameters
camel - ftp - add support for delete file in stepwise
corrected the spelling of " searchBindDN " to " searchBindPassword " to ensure consistency in naming conventions
updated condition checks in MapJoinOperator and added Bloom bloom filter in HybridHashTableContainer to ensure proper handling of empty result sets
updated ` ServerHTTPSPDYAsyncConnectionFactory ` to accept an ` AsyncEndPoint ` parameter and added getter methods for local and remote addresses to
added ` intent. putExtra ( " id ", tweetId ) ` to multiple adapter classes to ensure that the intent includes the tweet's
added handling for NTLM p2ndStage and refactored disconnect methods in HttpURLConnection to improve handling of proxy authentication and streamline HTTP
replaced ` int _ numChildren ` with ` AtomicInteger _ numChildren ` in ` TraceContext. java ` and updated ` TraceContextTest.
updated import statements and removed unused variables in multiple files to improve code clarity and maintainability
disabled test in ValueTypeTests to prevent NullPointerExceptions during test execution
move resourcefactoryservice from kie - api to kies - api
updated predicate types in multiple predicate classes to use NOT _ IN instead of IN to ensure proper handling of entity relationships in the predicate
replaced exception handling with try - catch blocks for better error management to improve error handling robustness and maintainability of the code
added null check for witnessService before validating its permission to prevent potential NullPointerExceptions when witnessService is not initialized
updated the method to retrieve the expression string in JoinDesc. java to improve clarity and maintainability of the code
added a conditional check for Javadoc presence before setting the Javadoc to ensure Javadoc is only set when the Javadoc is not present
replaced holderMethod and holderMetadata fields with holder metadata fields in CompiledICHolder. java and added new classes RedefineInterfaceCall. java
replace revalidate ( ) with revalidateWithAnimationSafety ( ) in Tabs. java to improve animation safety during tab revalidation
[ hotfix ] [ connector ] return unregisteredmetricsgroup instead of throw unsupportedoperationexception
updated the calculation of the y - coordinate in Polygon. java to improve accuracy of the y - coordinate by using oldX values
updated cache creation to use a Configuration type to enhance flexibility in cache configuration management
added a check for non - empty stringConstant in InheritanceUnsafeGetResource. java and created a new Bug2974855. java file
refactor ShadowCookieManager to improve code readability to enhance maintainability and facilitate future updates
added a configuration parameter to the METASTORE _ AUTHORIZATION _ EXTERNALTABLE _ DROP _ CHECK configuration to ensure proper permission checks for external
added WebGL application type check in Stage. java and adjusted drawing logic in ProgressBar. java to ensure WebGL applications are handled correctly and improve rendering accuracy
truffle : add ability to get the platform byte order.
updated PING _ TIMEOUT _ PROPERTY _ NAME from " testcontainers. namedpipesocketprovider. timeout " to " testcontainers. windows
updated the initWebViewLogin method to accept a base URL parameter and conditionally set the webview login header based on the presence of a base URL to
corrected the spelling of " Parameter " in the exception message to improve clarity and accuracy of the exception message
updated the date format in ` AuditEventsMvcEndpoint ` and added a new test method in ` AuditEventsMvcEndpointTests ` to ensure proper
renamed ` ExponentialTimer ` and ` PreciseThroughputTimer ` classes to ` ExponentialTimer ` and ` Prec
added soft body deletion functionality in SoftBodyTest. java to ensure proper resource management and prevent memory leaks
[ hotfix ] [ table - common ] make interface public
[ hotfix ] [ zeppelin ] use exception tostring ( ) for log message
added a new test class JingleTest for verifying the presence of redundant namespace in Jingle to ensure that the Jingle functionality behaves correctly
added null check for redPlasma in BCStatCollector. java and improved stat name handling in BuildCraftEnergy. java to enhance
added HTTP / 2 headers to BareResponseImpl and updated HelidonConnectionHandler to extend HttpToHttp2ConnectionHandler to enhance HTTP
replaced calls to ` getTrusted ( ) ` and ` getMembers ( ) ` with ` getTrusted ( ) ` and ` getMembers ( ) `
updated line formatting in SimpleReport. java to improve readability and maintainability of the code
added functionality to ignore the symbol file in JavapFileManager and created a new class T6863746 with error handling to improve
renamed ` TickerDemo ` to ` StreamingTickerDemo ` and removed the ` start ` method from the ` TickerDemo ` class to
refactor switch statement structure in Runtime. java to improve readability and maintainability of contract handling logic
don't create input3d if applet don't have them
added an @ Ignore annotation to KinesisIntegrationTests. java to temporarily skip tests that are not ready for execution
scripttagpayloadreader don't throw parserexception, return false instead
added a @ Override annotation to the JpaRepositoryConfigExtension class to ensure proper implementation of the getRepositoryFactoryClassName method
change return type of ` getExecutableCommand ` methods from ` String ` to ` List < String > ` across multiple binary rule classes to improve
replaced references to ` x `, ` y `, ` width `, and ` height ` in ` IOSGLES20 ` to ensure
deleted the UploadPathActivity class to streamline the codebase by eliminating unused components
replaced ` totalTermFreq ` with ` indexOptions ` in ` SimpleTextFieldsReader. java ` to ensure accurate term frequency retrieval based on
fix : implicit constructor should always be add to the ctclass
added a null check for database objects in ColumnSnapshotGenerator. java to ensure that validation only occurs when the database is Oracle
refactor Database class to improve code readability to enhance maintainability and facilitate future updates
refactor SpringApplicationBuilder to improve code structure to enhance maintainability and readability of the application
removed IndexOptions parameter from iterator initialization in DefaultIndexingChain and PointInSetQuery to simplify iterator initialization and improve code clarity
remove substring from rawName in SchematicHandler. java to simplify the code by eliminating unnecessary substring operations
added a switch statement to handle different collection types in AbstractCollectionAssert. java to improve clarity and functionality of collection assertions
changed the visibility of the Option enum from public static to public to allow external access to the Option enum
added a confirmation dialog for twitlonger in Compose. java and ComposeActivity. java to enhance user experience by allowing users to
refactor toggleKeepInSync method to use a CheckBox for file synchronization to improve code readability and maintainability by centralizing file management logic
replaced ` DatatypeConverter. parseBase64Binary ` with ` Base64. getMimeDecoder ( ). decode ` and added unit tests for
added new classes ` ControllerCounter `, ` DBCallback `, and modified ` DBCallback ` interface to improve data handling capabilities in MongoDB operations
added final modifier to the deleteTicket method to enforce immutability of the ticketId variable
added FlywayMigrationRunner class to create a migration test for the Flyway database
added a new class ` NotEmptyHashMap ` and modified the ` isEmpty ( ) ` method calls in ` HashMap. java ` to improve null
updated the version number from 0.6. 0 to 0.6. 7 in TsFileDBConstant. java to ensure compatibility with the latest versioning
added nullability annotations to the modify method in CompressionCodec and ZlibCodec classes to enhance code robustness by preventing NullPointerExceptions
added error handling for missing main manifest attributes in LauncherHelper and Arrrghs classes to improve robustness by ensuring proper handling of missing
renamed test classes to improve clarity to enhance readability and maintainability of test code
hotspotprofilinginfo : add support for compile ir type
changed the ` CellCopyPolicy ` class to use a constructor that accepts an instance of ` CellCopyPolicy ` to improve flexibility in cloning and
added a method to reset the icon load result in FloatingIconView. java to ensure consistent behavior when resetting the icon load result
updated form field values to use getRawValueCharSequences ( ) instead of getValues ( ) to ensure correct character sequence is used for form field
updated layout dimensions for landscape orientation in IconRecentsView. java to ensure proper item decoration across different screen orientations
deleted the AddAdapter class to remove unused code to streamline the codebase
[ fix ] nonstatic lifter don't handle empty constructor code list.
removed the ` processSortCols ` variable and adjusted related logic in ` OpTraitsRulesProcFactory. java ` to streamline the code
refactor TestLogWatcher to improve error handling and logging to enhance test reliability and provide clearer feedback when messages are not registered
added a print statement that prints " < any > " to Java2TypeScriptTranslator. java to enhance type handling capabilities in TypeScript translation
updated SDK version from 4799589 to 4913185 to reflect the latest release version
added a check to set SPRING _ AOP _ PROXY _ TARGET _ CLASS to true in TraceEnvironmentPostProcessor to ensure that the proxy target class
removed the conditional check for singletonLock in TypeCachingBytecodeGenerator to simplify the code by eliminating unnecessary complexity
renamed responseClassCallback and forwardClassCallback methods to responseClassCallbackWithClass and forwardClassCallbackWithString to improve clarity and specificity regarding
modified the ` writeFile ` method to include an option for appending output files to enhance flexibility in file writing by allowing users to specify whether to append
updated Maven settings check and refactored mirror retrieval logic in MavenExecutionContextView. java and added a new MavenRepositoryMirrorTest. java file
added a ` name ` field to ` BuildRuleSourcePath ` and ` PathSourcePath ` classes and updated constructors to accept a ` String `
updated the logic in ` OAuth20CallbackAuthorizeEndpointController ` to use ` matches ` instead of ` equals ` to improve accuracy of service
replaced the usage of ` values ( ). toArray ( ) ` with a new method ` AnnotationParser. toArray ( ) ` in multiple classes
updated methods in UserManagerCompatVL to replace getBadgedDrawableForUser with getBadgedIconForUser and getBadgedLabelForUser to
updated default value for line separator in GlobalConfiguration. java to ensure proper handling of line separators for output
rename configurationmanagerutils. isimplementinginterface to configurationmanagerutils. isderivedclass.
sanitize input values in BaseController. java to ensure input values do not contain special characters
chore : update java and python dependency ( # 1 )
renamed the method ` buildFileNamesCanBeDifferentCrossCell ` to ` buildFileNamesCanBeDifferentCrossCell ` and updated its implementation
renamed CountersReader class to improve clarity to enhance code readability and maintainability
refactor container type retrieval methods in AllAppsRecyclerView and UserEventDispatcher to improve code clarity and maintainability by centralizing container type logic
hbase - 26945 deprecate buffer size config key in bytebuffallocator ( # 2693 )
[ native ] fix npe in nativeworker
added a new method ` getAllGenericParameterTypes ( ) ` to retrieve all generic parameter types to enhance functionality by allowing retrieval of all generic parameter
updated TestFSTs. java file to improve test coverage and maintainability
updated getLabelTop ( ) and getLabelTextHeight ( ) methods to use getLabelTop ( ) instead of getLabelTop ( ) and getLabelTextHeight
hbase - 25890 region split policy should use initial size of 2gb instead of 4gb
reset the model loading state and start the loader in LauncherClings. java to ensure proper state management during the loading process
updated ManagedSelector to use List < String > instead of List < String > for keys and updates to improve code clarity and maintainability by using
added a setExcludedDatasources method to SpringDataSourceBeanPostProcessor to allow configuration of excluded datasource beans
added undo info store in TableValuesView and removed null check for ColumnDelete in TableValuesPanel to ensure undo functionality is properly managed and removed
( chore ) camel - aws : improve kinesis client error handling
refactor channel event handling logic in VelbusSensorHandler. java to improve clarity and maintainability of channel event processing
disabled unfavorable benchmarks in LocalCacheSelectorCode and updated delayable logic in BoundedLocalCache to improve performance by avoiding unf
added unit tests for illegal database names in IoTDBSessionSimpleIT. java and modified PartialPath. java to throw an IllegalPathException
added a call to resetNewFiles ( ) in GarbageCollector. java to ensure that new files are properly cleared before processing
renamed ` desiredWorkspaceLeftRightMarginPx ` to ` desiredWorkspaceHorizontalMarginPx ` and updated related methods accordingly to improve clarity and consistency in
refactor whitespace and improve readability in CharTokenizer. java to enhance code clarity and maintainability
chore : update gapic - generator - java version to 2.1. 0 ( # 505 )
api : fix typo in xenserver _ network _ label
updated libGDX and libGDX nightly versions from 5.5. 5 to 5.5. 6 and 7 to ensure compatibility with the latest development
removed the private Set < String > metricNames from SolrCore. java to streamline the code by eliminating unnecessary getter methods
replaced ` URI. create ( ) ` with ` Fs. fromUrl ( ) ` in ` MavenManifestFactory. java ` to improve code
refactor condition to use a constant for OS detection to improve code readability and maintainability by centralizing OS detection logic
refactor JdbcAggregationRepository to improve code readability to enhance maintainability and facilitate future updates
added functionality to clear and addAll elements from the slotList in the Frame class to ensure the slotList is properly updated before adding to the other
initialized m _ predCount to - 1 in PredicatedNodeTest. java to reset the pred count for testing purposes
added a new method ` mergeProperties ( ) ` to ` ConfigurationSpringInitializer ` for merging configuration properties to enhance configuration handling by centralizing property
updated the setupLogging method to use org. slf4j. Logger instead of org. slf4j. Logger to ensure compatibility with the
use linkedhashmap instead of hashmap to preserve order
added a null check for the superclass of type ` jdbcHandlerMap ` in ` TypeHandlerRegistry. java ` to ensure proper handling of type
added debug logging statements in HibernateItemWriter, JpaItemWriter, FlatFileItemWriter, JmsItemWriter, and BatchFileItemWriter to
updated language range parsing logic in LocaleUtils. java to ensure proper substring extraction for language values
replaced ` closeHandler. handle ( null ) ` with ` handlerContext. executeFromIO ( ) ` in ` VertxHttp2Handler
changed the visibility of ` _ uBook ` and ` _ tableCache ` from private to final in ` SXSSFEvaluationWorkbook ` and
updated schema text detail type from " VERBOSE " to " BASIC " and modified conditional checks for non - primary and non - unique indexes to
replaced MongoFactoryBean with MongoClientFactoryBean in MongoNamespaceReplicaSetTests. java to ensure compatibility with the latest MongoDB library and improve test reliability
replaced HashSet with LinkedHashSet for roots and leaves sets in SparkWork. java to ensure predictable iteration order for roots and leaves
updated SkewJoinOptimizer to check for cloned table scan operations before proceeding to ensure that the operator tree is properly validated before proceeding
added a null check for the client ID before processing the registration client to avoid potential null pointer exceptions when the client ID is not provided
clear achievement list after close the achievement list.
initialize ` userName `, ` driverName `, ` driverClassName `, ` driverVersion `, and ` connectionUrl ` to an empty
updated permission index from ` link _ share _ read _ only ` to ` link _ share _ view _ only ` in ` QuickSharing
added a new class ` readLongs ` to handle long data reading in ` ByteBuffersDataInput ` to enable efficient reading of long values
rename ` st _ atime ` to ` st _ atime _ sec ` and ` st _ mtime _ sec ` and ` st _
added a new file TestNoEagerReclaimOfHumongousRegions. java containing a class for testing garbage collection of humong
added logic to conditionally update the header scroll based on the search bar visibility to improve user experience by hiding the search bar when enabled
updated the method call from ` router ( ) ` to ` routes ( ) ` in ` EnvRouterFeature. java ` to ensure the correct
added null checks for cur and next in LineChartRenderer to prevent potential NullPointerExceptions during rendering
added a new action for reloading the page in Eeze. java to enhance user experience by allowing users to reload the displayed page
changed log level from info to warn for entries in ` plot _ rating ` and ` plot _ helpers ` to provide more granular logging
updated minimum Spring version from 3.1. 7. RELEASE to 3.1. 8. RELEASE to ensure compatibility with the latest security features and improvements
added a check to throw an exception if configuration type does not have a selected version to ensure proper error handling when configuration types do not have a
replaced Iterator with ServiceLoader. load for extension point loading to simplify the loading process and improve code readability
added a finalize method to close the table in HiveHBaseTableInputFormat to ensure proper resource management and prevent memory leaks
added methods to stop statement execution in JdbcConnector and HiveViewImpl to ensure proper resource management and logging of instance settings
updated the feature settings in DocumentFactory, XMLSAXHandler, ComplexElementHandler, and DocumentFactoryTest to disable external entities and improve test coverage
updated JdbStopThreadidTest to use Jdb. contToExit ( 1 ) instead of JdbCommand. cont ( ).
added a method ` getType ` to ` ShadowContentResolver ` and corresponding test cases in ` ContentResolverTest ` to enable retrieval of content types
replaced ` future ` with ` entry ` for better clarity in ` ExpressionThreadPoolManager ` to improve code readability and maintainability by using more des
updated the default HTTP port property from " port " to " vertx. httpPort " to ensure the application uses the correct HTTP port configuration
replaced ` addCaptureListener ` with ` addListener ` in ` buttonTable ` to streamline listener management and improve code readability
increase default _ batch _ size from 10 to 3 based on available processors to improve batch size for better resource management
[ hotfix ] [ runtime ] log error when establishing a resource manager connection in taskexecutor
initialize classFile to null and handle CannotLoadException in LambdaRewriter to ensure proper initialization of classFile and improve error handling
updated the error message to include both min and max parameters to improve clarity of error messages for better debugging
updated message handling methods to include an entity parameter to enhance functionality by allowing additional telegrams to be processed
added new interfaces ` Cursor `, ` Database `, and ` Display ` to establish a structured structure for managing database interactions
refactor assertion classes for improved clarity to enhance maintainability and readability of the codebase
added setbeanid ( ) and setbeanid ( ) method to ebeanserver
updated the method call from " tools / xslt / add - menu - to - site - descriptor. xsl " to " xmlFileTempl
added a list to manage request matchers in HttpSecurity. java to improve performance by reusing existing request matchers
implement ` equals ` and ` hashCode ` methods in ` ContactResource ` class to ensure proper comparison and hashing for instances of ` ContactResource `
removed duplicate request and response declarations in AbstractProcessor and AbstractHttp11Processor to streamline code and improve maintainability by eliminating redundancy
updated logging statements in FileManager. java for better clarity to improve error logging and provide better visibility into the saved Persistable state
reset mockControl in TestJdbcDataSource and add tearDown method in TestIndexSearcher to ensure proper resource management and prevent memory leaks
added imports for LambdasWithInterfaces and updated getSourceFile calls in SyntaxTests. java to enhance test coverage and ensure correct source file retrieval
refactor ConnectionModel and ModeledConnection classes to improve code readability and maintainability
tika - 4652 -- remove temporary resource from parserdecorator
update FMLSecurityManager to include additional class context checks to enhance security by ensuring only relevant classes are processed
removed unused parameters from several methods in AccountUtils, IndexedForest, CustomPopup, and AccountUtils to improve code clarity and maintainability
updated parameter name from " swap " to " rename " in TestCoreAdminApis. java and CoreApiMapping. java to improve clarity
added a new test method ` testJsxComment ` in ` JsLexerJsxTest. java ` and modified the logic in ` Parser
added ScreenRecordRule import and annotation in AddWidgetTest. java to enable screen recording for the test case
added a new test method ` setSimpleEnv ` to ` BuildEndToEndTest ` and updated ` CxxEndToEndTest ` to
added functionality to check for physical memory limits in TestStringBufferAndBuilderGrowth. java to ensure tests do not exceed allocated physical memory limits
added a Deprecated ConversionService to the MapToLocalDateConverter class to indicate that the conversion service should no longer be used
added a success flag to HiveMetaStoreClient. java to indicate successful execution of the HiveMetaStoreClient
updated theInclude value comparison from equality to equals in ResourceReferenceInfo. java and modified the bundle creation in Dstu2BundleFactoryTest
updated conditions in TimeLineCursorAdapter and TweetActivity to include " amp. twimg. com / v / " alongside "
marked the AreaReference class as deprecated to indicate that the class is outdated and should no longer be used
refactor ElementType and Target classes to improve code readability and maintainability
added assertions and refKind handling in MemberName. java to ensure proper reference kind management during method invocations
changed the default value of ` __ submitKeyUpdates ` from ` false ` to ` true ` and synchronized the ` runChange ` method to
fixed mouse event handling in EditNodeTextField. java to ensure proper handling of mouse events
camel - 1643 : added support for static method in bean. thanks to david mollitor for reporting.
updated multiple publish and receiver handler classes to improve performance and maintainability of the publishing process
refactor exception handling in AgentRunnerTest. java to improve clarity and maintainability of the code
added getDescription ( ) methods to multiple classes to provide specific descriptions for Maven project properties and plugins
[ fix ] objloader don't crash when there's only one face
refactor ProcessEngine class to improve code readability to enhance maintainability and facilitate future updates
updated variable names from ` reentrantLock ` to ` lock ` across multiple classes to improve clarity and consistency in variable naming
updated the method parameters and references in PrintMavenAsCycloneDxBom. java and PrintMavenAsCycloneDxBom
replaced the call to back ( ) with a call to evt. getComponent ( ) to ensure that the component is correctly retrieved from the event
refactor certificate verification logic in SASLAuthentication. java to improve readability and maintainability of the code
change the type of ` actual ` from ` T ` to ` T ` extends @ Nullable Object ` in multiple classes to enhance type safety and
replaced ` NutchConf. get ( ) ` with ` getConf ( ) ` in multiple files to standardize configuration retrieval for mapred task
replaced removeBoardsPane ( ) method with deselected ( ) method in SheetAssembly. java and modified assembly selection logic in Stub
added a getter method for the session ID in RemoteWebDriver to provide access to the session ID for further operations
added null checks before setting time intervals in ImportContainerImpl. java to prevent potential NullPointerExceptions when setting time intervals
removed log level info command from MockServerContainer. java to streamline logging output for better readability
updated error logging to include the exception message to improve error reporting by providing more context about the error
refactor DispositionProcessor to use CrawlMetadata instead of RobotsHonoringPolicy to improve code clarity and maintainability by centralizing metadata handling
added JUnit @ Ignore annotation to ITSystemTest. java to temporarily skip tests that are not ready for execution
( chore ) camel - core : fix unit test on window
added a new method ` alternativePath ( ) ` to ` ExpectNewDemo. java ` to provide a convenient way to handle alternative file paths
replaced the init ( ) method with the getFirstFilter ( ) method call to ensure that the input filter is initialized before use
added protectionDomain parameter to BufferAlignmentAgent constructor to enhance security by allowing customizable protection domains
added dispose ( ) method to the WaterRipples class to ensure proper resource management and prevent memory leaks
added configuration option HIVE _ DISABLE _ UNSAFE _ EXTERNALTABLE _ OPERATIONS to enable conditional optimization based on external tables to improve
updated the description of the Authorization header in TokenKeyEndpointDocs. java to clarify that authorization requirements require public keys
removed the FLAG _ SHOW _ WALLPAPER flag and adjusted the wallpaper offset value in Workspace. java to simplify wallpaper offset
changed the return value from false to true in SybaseASADatabase and modified SQL query conditions in SequenceSnapshotGenerator and CreateSequenceGenerator to
nifi - 1147 : fix npe in putsql when autocommit = false
added checks to create parent directories for file creation in SnapPuller. java and created a new test file in TestReplicationHandler. java
updated the AppTarget ID from " id : launcher " to " launcher : launcher " to ensure the correct app target is used for the launcher
updated frame method signatures to include an output parameter in multiplexer calls to enhance flexibility in frame handling by allowing the output of multiplex frames
refactor OAuth2LoginAuthenticationFilter and ImplicitGrantConfigurer to remove unused parameters to improve code clarity and maintainability by eliminating unnecessary parameters
added an extended log message for delimiter usage in GenericUDFStringToMap. java to improve clarity of log messages related to delimiter usage
updated the ` formatInstance ` method to truncate the instant string to milliseconds to ensure accurate representation of instant timestamps in the output
replaced a constant RETRY _ CLOSE _ TIMEOUT _ MS with a new constant RETRY _ CLOSE _ TIMEOUT _ MS and refactored the
hhh - 16686 improve performance of classloadingstrategyhelper
updated Mockito library version to ensure compatibility with the latest testing framework
changed log message from " Closing proto event file " to " New proto event file " to clarify the purpose of the event file being enabled
added JUnit @ Ignore annotation to SamplingNamingTest to mark the test as ignored due to insufficient sample results
updated the error message for IllegalArgumentException in GridLayout. java to clarify that rows and columns must not be greater than zero
updated string concatenation methods in DecisionNode. java and added try - finally blocks in WagonCART. java to improve code readability and ensure
added functionality to sort and order BoundSheetRecords in XLS2CSVmra and BoundSheetRecord classes to improve the organization of sheet records
updated the calculation of average impulse by introducing start and end times to improve accuracy of impulse calculations
updated the instantiation of InputSystemJme to use the input manager directly to streamline the code by eliminating unnecessary instantiation of InputSystemJ
refactor hashCode field handling in UniverseBuilder. java to improve clarity and maintainability of the code
added a method to generate a block mesh with terasology's terasology's terasology's terasology engine
[ hotfix ] [ yarn ] fix typo in yarnapplicationmasterrunner and yarntaskmanagerrunner
added a new option ` EMPTY _ WORD _ OPTIONS ` and modified matchers initialization logic in ` LineReader ` and ` LineReaderImpl ` to
update pushViewReplicaUpdates to include writeCommitLog condition to ensure that updates are written only when clReplay is enabled
refactored button handling in CaptureActivity and PreferencesActivity to improve code clarity and maintainability by centralizing button IDs
added a new test method ` testBatching ` to ` JoinedTableTest. java ` for batching of data to ensure proper persistence
added handling for EntityExistsException in JpaPersistenceService to improve error logging for item persistence failures
updated Cucumber - JVM's -- format option handling to deprecate the old format option and encourage the use of a new plugin
removed the save ( ) method from PMS. java to streamline the code by eliminating unnecessary operations
modified the condition for handling back key events in ExtendedEditText. java to ensure keyboard behavior is properly hidden when the back key is pressed
updated the capacity calculation in AbstractStringBuilder and added a new class Capacity with a test method to ensure consistent capacity handling and validate string concatenation behavior
replaced ` goHome ( ) ` with ` onNoteSaved ( noteTmp ) ` to call ` onNoteSaved ( noteTmp ) `
added support for handling XWPF endnotes in XWPFDocument and XWPFParagraph classes to enhance functionality for handling footnotes in
added clientInfo parameter to the CasAuthenticationTransactionSuccessfulEvent publication in DefaultAuthenticationManager and updated CasEventsReportEndpointTests to include client
added a new test method ` testVersion ( ) ` to ` BridjOGRDataStoreTest. java ` to verify the GDAL version
added a new file ` Lifecycle. java ` for managing network errors to facilitate the management of network errors in the application
added error handling for URL redirection in DeviantartRipper. java to improve robustness by logging error messages during URL execution
removed unused imports from BodyTubeShapes, FinSet, OutsideComponent, and Transition classes to improve code clarity and maintainability by eliminating
added support for retina screen scaling in PJOGL. java to improve visual performance by allowing dynamic scaling of the window
set initial value of project offline checkbox in create params
replaced usage of PackedInts's fastestFormatAndBits method with BlockPackedWriter to optimize memory usage and improve code readability
camel - core - optimize to reduce code duplication.
removed unused imports and stream data handling in GoAwayTest. java to streamline code and improve readability by eliminating unnecessary dependencies
added BeanIntrospector and FluentSetterBean handling in ReflectionUtils and created a new FluentBean class to enhance bean introspection capabilities and ensure correct
replaced ByteStreams with CharStreams in BlockingHttpEndpoint. java and added HttpResponse class to HttpEndpoint. java to improve handling of HTTP responses and
( chore ) camel - filesortby * : added preparefolder ( ) method
updated print statement to use getLastAppearedTaskTargetId instead of mLastAppearedTaskTarget to improve clarity in logging output related to
added image scaling configuration options in RtfDocumentSettings. java to enhance image handling capabilities for PDF processing
modified how columns are added based on the IS _ AGGREGATION parameter in TSServiceImpl. java to ensure columns are correctly added based on
updated ` Nested2 ` and ` Base ` classes to extend ` WithNestedTests. AbstractNestedTest ` instead of ` LuceneTestCase ` to
added functionality to select the X - CAP server URI based on registration status to enhance user experience by allowing access to the X - CAP server URI
ww - 4441 add a flag to handle exception in dispatcher
added methods to stop text editing in CodenameOneImplementation, Display, TextArea, and AndroidImplementation to improve text editing functionality and ensure consistent
npe in control rate when group attribute ben't set
added an " AlwaysOpenPreset " checkbox to multiple dialog classes and updated related logic to enhance user experience by allowing configurable presets based on
added websocket error handling in ChatAnnotation. java to improve reliability of message sending to the client
added a conditional check for Windows OS in HTMLDataFlavorTest. java to ensure compatibility with non - Windows operating systems
added SQL _ SERVER _ SNAPSHOT ( 0x1000 ) to SERIALIZABLE ( Connection. TRANSACTION _ SERIALIZABLE ) to support SQL Server
added a loop to wait for newRecids to complete before adding a newRecid to ensure that newRecids are not added indefinitely
use java. util. zip. zipfile instead of org. apache. tomcat. util. compat
added null check for command class in RegisteredServiceSimpleFormController to prevent potential NullPointerExceptions when command class is not set
changed disk _ failure _ policy from best _ effort to ignore and updated the stop method to handle a specific case to improve error handling by allowing
refactor methods in RipperInterface and RipStatusHandler for consistency to improve code readability and maintainability
[ java ] exclude non - ipv6 address from peer discovery.
added a method to set the job identifier factory in SimpleCommandLineJobRunner to enable flexible configuration of job identifiers
added ` ClusterDataCache ` to the method call in ` PinotSegmentRebalancer. java ` to enable caching of partition assignments for improved
[ java ] remove container. delete ( containerid ) method from docker protocol.
refactor DefaultSeleneseCommand to improve parsing of command inputs to enhance error handling and maintainability of command parsing logic
added MultipleAttemptsRule to CreateGlossaryTests to enable retries for test failures
updated schema references from ` allOfRef `, ` anyOfRef `, ` oneOfRef `, and ` oneOfRef ` to
updated EntityDeletedEvent to use JsonUtils for serializing and deserializing deleted events to improve data handling and ensure proper serialization of deleted events
added support line recognition for GOP format in FormatConfiguration. java and updated DLNAMediaInfo. java and LibMediaInfoParser. java
added a new file TestProfileReturnTypePrinting. java with test methods for different return types to facilitate testing of return type printing in
refactor ParseConfigUtils to use ReentrantLock for lock management to ensure thread safety when accessing shared resources
added support for AcquireReleaseColumnsSegmentOperator in MinMaxValueBasedSelectionOrderByCombineOperator to ensure proper resource management during minMaxValue
simonstewart : removing the @ Ignore annotation from the FirefoxProfileTest. java file to mark the test as ignored because the test
added @ return annotations to methods in HasAndroidDeviceDetails. java to improve clarity of return values for Android device details
replaced calls to ` projectStats. addBug ( bug ) ` with ` projectStats. addBug ( bug ) ` across multiple files to
added disabled text color to labels based on the look and feel of the UIManager to enhance user experience by providing visual feedback for disabled components
removed multiple duplicate @ Override annotations in CacheControlImpl. java to improve code clarity and maintainability
added a check to return a date in the future if it is empty in ScheduledAction. java and created a test for weekly actions without a
refactor upload button handling to use a menu item for single uploads to improve code organization and maintainability by centralizing upload functionality
refactor multiple message - related classes to improve code organization and maintainability
added loadMetaData method to MeXBTExchange and RippleExchange classes to enable loading of metadata from XML files
added a WritableSerializer to serialize Writable objects in CrawlDbReader to enable proper serialization of Writable objects for JSON output
removed unused imports from TestJaspicBasicAuthenticator. java to clean up the code and reduce unnecessary dependencies
updated MDNSDiscoveryService to use a service configuration property to enhance flexibility by allowing dynamic configuration of MDNS discovery service
added a null check for messageItem before scrolling the layout manager to prevent potential NullPointerExceptions when messageItem is null
updated ForkJoinPool initialization in BPIndexReorderer. java and added a new ForkJoinWorkerThread parameter in TestBPIndexReorder
removed redundant assertions related to DATANODE and NAMENODE in RoleCommandOrderTest. java to improve test reliability by ensuring proper dependencies
added methods to restore local info and dedup with table information in PartInfo. java to ensure consistent handling of table information during serialization
updated formatting in multiple Java files to improve code readability and maintain consistency
added matrix transformations to BitmapFontTest. java to ensure consistent rendering of logo elements in the sprite batch
[ hotfix ] [ table - planner - blink ] fix npe in streamphysicalgroupwindowaggregaterule
fix race condition in endpointstate. haspendingecho
add a method to get unreachable token ownership in gossiper
don't change x ( a ) to x ( a ) in coordmultiplyreplacer, since x ( a ) be
added content type handling in FormAuthenticator and SavedRequest classes to ensure proper content type is set when saving requests
changed fields from private to private in XToolkit. java to enhance encapsulation and prevent potential NullPointerExceptions
renamed RecommenderJob and AbstractJob classes to improve clarity and maintainability of the code
[ hotfix ] use read / write lock in environmentimpl
added a test for reading an identity provider from a different identity zone to ensure correct functionality of identity providers in different zones
fix npe in pointintimtrigger. pointintimestamps ( )
removed unused import of Service in SendTicketGrantingTicketActionTests. java to streamline dependencies and improve code clarity
don't send heartbeat to all broker when subscription be rebalance
added a detached MkDirMode property and its getter method in multiple configuration classes to allow configuration of the MkDir mode for better management
[ java ] : add a test case for when there be a slow follower.
updated the default label format from " authors3 " to " auth " in JabRefPreferences. java to align the label with the intended
updated CxxPlatform handling in DBinaryDescription and DLibraryDescription to use ImplicitDepsInferringDescription instead of DefaultCxxPlatform to
replaced the boolean variable ` initialized ` with a new method ` ungetOAuthService ` in ` GoogleCloudAPI ` and added a dispose method in
camel - 16400 : fixed issue with dynamic done file name.
added a boolean flag ` reopenReaders ` to ` SolrConfig ` and updated its logic in ` SolrCore ` to enable reopening of
[ freeplane ] add dialect to mapwriter ( freeplane )
added methods ` currentDate ` and ` currentTimestamp ` to the ` Update ` class and corresponding test cases in ` UpdateTests ` to enhance
added a dup method to ` Attr. java ` and created a new test class ` PrimitiveTypeInBoundForMethodRefTest. java `
refactor ` Condition ` class to implement ` Condition ` interface instead of extending ` Condition ` to improve code clarity and maintainability by using a more
replaced TermQuery with ConstantScoreQuery in TestFacetsCollector. java to improve query performance and maintainability
removed multiple unused imports related to method handles in ConcurrentClassLoadingTest. java to improve code clarity and maintainability by eliminating unused dependencies
added a new method ` providesDirectNearbyUploadPreferences ` to the ` CommonsApplicationModule ` class to provide configurable preferences for direct nearby
added support for the " SYSIBM " and " SYSDUMMY1 " modes in the compatibility mode to enhance compatibility testing capabilities for database
updated log formatting in TraceGatewayEnvironmentPostProcessor and added conditional properties in SamplerAutoConfiguration and SamplerAutoConfigurationTests to improve code readability and
added logic to retrieve the last process ID in POIXMLProperties and updated test cases in TestPOIXMLProperties and TestHPSFProperties
updated the check for NaN data in GeoTiffReader and added a test for negative infinity nodata in GeoTiffReaderTest to ensure
updated CliDriver to use a new method for executing commands and files to improve error handling and resource management during command execution
replaced Executor with Schedulers in MockRestAdapter to improve resource management and error handling
added a default method ` selectByRuleIdSet ` to the ` RuleConditionMapper ` class to enhance functionality by allowing dynamic selection of rule
added a method to add exit descriptions to ExitStatus and removed unnecessary import statements to improve error handling and streamline exit status management
added a condition to check if the player is the current player in the MultiblockRenderHandler to ensure the event is only triggered when the
renamed columnFamily to columnFamilyColumn in SliceReadCommand to improve clarity by accurately reflecting the column family being used
removed unused import of Collections in PlotConfiguration. java to streamline code by eliminating unnecessary dependencies
replaced ` buildUIAlertView ` with ` buildUIAlertController ` and introduced a new ` invoke ` method to enhance UIAlertController functionality
updated build target retrieval from params to nativeLinkable to ensure the correct build target is used for native linking
changed the parameter type from ` List < Value <? > > ` to ` List < Value <? > > ` in the ` of
added assertion to verify message retrieval in AdvServiceTest to ensure that the service correctly retrieves messages from the item
updated MappingMongoConverter to use potentiallyEscapeMapKey for better handling of string keys to improve code clarity and maintainability by using a more des
updated Timber logging statement formatting in NearbyMapFragment. java to improve code readability and maintainability
camel - core - deprecate in favor of javatype
added null checks for Terms in FuzzyLikeThisQuery and updated test cases for non - existing fields in FuzzyLikeThisQueryTest to
updated the ` writeApplicationsLinks ` method to accept a boolean parameter for tabular list to enhance flexibility in writing applications links based on the specified
[ ds - 3940 ] use the identifierservicefactory instead of dspace. utils. dspace
updated the length assignment in VectorColumnAssignFactory to use bw. getLength ( ) instead of bytes. length to ensure accurate data length is assigned
changed the return type of getDisplayScript method from abstract to non - abstract to provide a default implementation for the method
danielwagnerhall for webdriver - backed webdriver - backed webdriver - backed webdriver - backed webdriver - backed webdriver - backed webdriver
pdfbox - 4892 : use list. size ( ) instead of list. size ( )
added synchronization for active interfaces in NetworkConfigurationWatcher. java and null checks in NetworkManagerListenerImpl. java to ensure thread safety and prevent potential
refactor the method ` getAllEmbeddedObjects ` to accept a ` List < HSSFObjectData > ` parameter to improve flexibility in retrieving embedded objects
added import statement for Shdr in ShaderNodeLoaderDelegate. java to utilize Shdr functionality in the shader node loading process
replaced the initialization of ` hostParams ` and ` roleParams ` in ` AmbariManagementControllerImpl. java ` to ensure consistent retrieval of
added a condition to check if the base font starts with " Symbol " to ensure proper handling of font symbols in the application
replace GLStateManager. popAttrib ( ) with GL11. glPopAttrib ( ) in ModelHourglass. java to ensure compatibility with
updated LiveTvGuideActivity and ProgramListAdapter to use a unified mCurrentGuideStart variable to improve code clarity and maintainability by centralizing start
updated method invocation to use Whitebox for reflection to improve code readability and maintainability
added dlopen calls for specific library paths " libfreetype. so " and " libfontmanager. so " to ensure proper loading of
refactor variable handling and introduce a new method ` inverseOrPower ` to improve clarity and maintainability of the code
loop safepoint elimination : avoid infinite loop
[ fix ] instanceof in typeframemodelingvisitor. isinstance ( ).
added a new LocalizedString class and refactored method arguments handling in multiple classes to improve internationalization support and facilitate method argument
added a configuration option to disable classpath search in the server configuration to improve flexibility in managing classpath search behavior
change dataline to use arrays. copyOf instead of System. arraycopy
updated retries default value from 0 to 2 in Reference. java and corresponding test case in AnnotationPropertyValuesAdapterTest. java to ensure retries are
updated the process method to use a Settings object instead of a string to improve flexibility in specifying texture packing options
added views for uploaded images and wiki images in AchievementsFragment to improve user experience by displaying uploaded images and wiki pages
added logging and tracer methods to TranslatingJavacPhaseTracerTest for annotation processing and processing processing processing tests to improve test isolation and
added ` @ NonNull ` and ` @ SuppressWarnings ` annotations to ` CategoryInfo ` class and updated ` MwQueryPage ` to include
updated assertion messages for username and password in AuthzAuthenticationRequest. java to improve clarity and consistency of error messages
added accessibility features to TaskbarStashController to enable or disable taskbar auto - hiding based on user interaction
added handling for'('and'^'cases in GenericSignatureParser. java to ensure proper error handling by throwing a NoSuchElementException when
updated access flag handling in ClassVisitorDriverFromElement and added tests for generic interfaces and abstract enums in StubJarTest to ensure correct access flags
replaced the assignment of'in'with a null check in IntervalFilter. java and added a null check in LowpassIntervalsSource.
added two test methods ` testEntrySetIteratorLastHashNext ` and ` testEntrySetIteratorLastNext ` in ` MapInterfaceTest. java ` to ensure
added a serialVersionUID field to the TreeMap class to ensure proper serialization compatibility for the TreeMap class
updated the createdAt timestamp from epochMilli to epochSecond in ImageData. java to accurately reflect the time taken for image creation
[ CASTranslator ] add ` locus2d ( x, y ) ` and ` locus1 ( x, y ) `
added EncryptionUtils import and removed private and public keys from arbitraryDataProvider in AccountRemovalJob. java to ensure sensitive data is properly deleted during account
replaced hardcoded string " keep - alive " with a static method ` keepAliveHeaderValue ` in ` AsyncHttpProviderUtils ` to improve code maintain
[ hazelcast ] fix postjoinmapoperation when map have no interceptor and lite member join.
hhh - 10866 - standarddialect. getprocessors ( ) return all processor instead of just the first one
removed spillEnabled parameter from BaseHybridHashTable and BinaryHashTable classes to simplify the code by eliminating unnecessary spill functionality
refactor EnvironmentVariableHelper to use Optional for retrieving original environment variables to improve code clarity and handle potential null values gracefully
updated import statements and modified method names in DefaultActionMapper. java to improve code clarity and maintainability by using more descriptive names
added SerializableMode import to Mockito in PluginSwitch. java to enable serialization support in Mockito
modify field injection exception handling in AbstractBeanDefinition. java to ensure proper handling of nullable fields during dependency injection
refactor SQL isolation clause parsing and enhance compatibility checks to improve code maintainability and ensure proper isolation levels in select statements
updated HiveConnection to use constants for transport modes and HTTP path to improve code maintainability and readability by using named constants
added an implementation of the isCacheable method to GlobalOrdinalsWithScoreQuery to ensure caching behavior is consistent across different reader contexts
added a new file ` TestStrangeControl. java ` containing a test class ` StrangeControl ` to demonstrate the use of ` StrangeControl
updated file extension from ". json " to ". jsfile " and ". jslib " in BuildTargets. getGenPath method
added methods to set and get selection start and end in ShadowEditText to enhance functionality by allowing selection options
refactor GRPC server initialization to use Closeable for better resource management to improve resource management and prevent potential memory leaks
added a new method ` use ` in ` Jooby ` and updated test cases in ` JoobyTest ` and ` Router `
added a null check for fst in FreeTextSuggester. java to ensure that a valid fst is provided to avoid runtime errors
replaced line separator handling in T4975569. java and added error handling in T6729471. java to improve cross - platform
added support for loading the ABIWriter class from own classloader in JavacInMemoryStep. java to enhance functionality by allowing customizable ABIWriter
suppress warning for booleanmethodisalwaysinverted in pubsub.
added a check for ` isStopped ( ) ` before scheduling pull requests in ` PullMessageService. java ` to ensure scheduled tasks are only
refactor EnergyEndpointer class to improve code organization to enhance maintainability and readability of the code
refactor ComponentPresetChooserDialog to use a list for displayed column keys instead of presets to improve code readability and maintainability by centralizing
removed unused imports from multiple repository classes to improve code clarity and maintainability
camel - google - sheets fixed switch / cases indentation see camel - 14540
added a new method ` getExportedHeaderStyle ( ) ` to ` CxxLibraryDescription ` and updated its usage in ` CxxLibraryMetadata
deleted the file Constants. java and DistanceUtils. java to remove unused constants and utility files
fix random partition key splitting. patch by brandonwilliams, review by brandonwilliams for cassandra - 1434
add jdk. internal. foreign. abi. fallback to jdk. internal. foreign. abi. fallback. fallback.
added unit tests for creating inline RoleBinding in RoleBindingTest. java and refactored the create method in RoleBindingOperationsImpl. java
added debug logging statements to UaaSessionCookieConfig to improve visibility into session configuration processes
updated the calculation of FILE _ NAME _ PREFIX to use the calendar's DAY _ OF _ YEAR to ensure correct handling of year - based
add a check for BlockingObserver. TERMINATED in ObservableBlockingSubscribe. java to ensure that observers are terminated correctly before proceeding
added error handling for invalid use of options in JavapTask. java and created a new file T8033711. java to improve
replaced Collectors. collect ( toList ( ) ) with. toList ( ) in multiple files to streamline code by eliminating unnecessary collect calls
[ hotfix ] [ runtime ] change log level from error to warn in taskdriver
[ hotfix ] [ network ] enable tiered storage in inputgatespecutils
replaced the success code check with a new method ` isNotSuccessStatus ` to improve clarity and maintainability of the code
added GL20 configuration to CubocDesktop and updated LwjglApplication constructor to enable OpenGL 2.0 support in the application
remove unnecessary type check in jimplebody. getunits ( )
replaced DefaultSourcePathResolver with SourcePathResolver in OutputMacroExpander. java to streamline the handling of build targets and improve code clarity
fix flakyness of asserttrue ( ) in logexceptionsqltest
added double quotes around filenames in MergeWordsListTask. java to ensure proper handling of file paths containing special characters
updated response comments data type from Map < FeedbackResponseAttributes, List < FeedbackResponseCommentAttributes > > to Map < String, List < Feedback
removed redundant whitespace in the conditional statement to improve code readability and maintainability
added a new file ` TestEscapeThroughInvoke. java ` containing a class ` A ` with methods for testing escaping functionality to facilitate
replaced the deprecated ` stream. skip ` method with ` IOUtils. read ` and added a conditional check for ` start ` to improve code readability
added error handling and logging in ConnectionPool, DataSourceProxy, and TestSlowQueryReport classes to improve robustness of connection management and enhance debugging
changed catch block from Exception to Throwable in CoreContainer. java to handle a broader range of exceptions
added methods to track cache eviction status and overhead in LruBlockCache. java and created a test for current size in TestLru
removed conditional check for task count in RecentsView. java to simplify code by eliminating unnecessary checks
added instance config change listener to HelixBrokerStarter and increased sleep duration from 1000ms to 5000ms to improve modularity and responsiveness of
added a new interface ` CoinmateStatic ` and ` CoinmateExchange `, and created a new ` CoinmateServiceRaw
[ mng - 4441 ] add miss check for $ { project. basedir } in defaultmodelvalidator
pdfbox - 4892 : don't overwrite exist object, a suggest by valerybokov
add a method to set display data in PTransform and update its implementation in PTransformTest to improve display management and ensure proper handling of display
updated assertions in SubjectTest to use assertThat for null checks to improve readability and maintainability of the test code
disable jdk. certpath. disabledAlgorithms in ClientJSSEServerJSSE. java to ensure compliance with security standards
updated error messages for better clarity in OptionData. java to improve readability and maintainability of error messages
updated module - info. java files for mmm and ppp modules to improve module documentation and clarity
added error handling and improved connection management in IOSImplementation. java to ensure proper error reporting and handle potential IOExceptions
updated sCheckingEvents initialization in LauncherInstrumentation. java and added a finally block in LogEventChecker. java to ensure proper cleanup of resources after
refactor FileSinkOperator to improve exception handling and logging to enhance error reporting and maintainability of the code
added diagnostic output for JavaFileObject calls in SchemaGenerator. java to enhance debugging capabilities by displaying diagnostic information
replace RuntimeException with OptiqSemanticException in SemanticAnalyzer. java to improve error handling by utilizing optimized semantic exceptions
updated test cases in DataSourceMonitorTests. java to improve test reliability and maintainability
added a HashSet to track loaded resource paths before scanning to improve efficiency by avoiding redundant scans when resources are already loaded
refactor TestServiceUtil to handle null values for test instance initialization to improve error logging clarity and ensure test instance is properly initialized
added null check for ` o ` in ` RoutingInBoundHandler. java ` to ensure proper handling of ` o ` when ` o `
added nullability annotations to EkeyConfiguration, EkeyUdpPacketReceiver, EkeyHandler, and EkeyUdpPacketReceiver
replaced ArrowByteBufAllocator with a new ArrowByteBufAllocator in multiple files to improve memory management and reduce dependency on external libraries
refactor CommitLogArchiver, CommitLogReplayer, and JdbcDecimalTest classes to improve code organization and maintainability
added validation for header buffer and body length in HttpConnection. java and implemented a test case in RFC2616BaseTest. java to ensure
refactor ` MultiTimeout ` to use an ` AtomicReference < T > ` for subscription management to improve thread safety and clarity in managing subscription states
optimize leveledmanifest. getoverlappingstarvedsstables ( ). patch by jbellis ; review by brandonwilli
added @ Test annotation to TestOrcTimezone1. java to ensure proper test coverage for timezone - related functionality
refactor metric and timer parsing logic into separate methods for improved readability to enhance code clarity and maintainability by centralizing matching logic
added error handling for JSON processing in PinotSegmentRestletResource. java and simplified return statements in TraceContext. java and TraceContextTest
updated JTable to handle null values and added a new test class ` Test6888156 ` to improve robustness of the JTable by ens
added conditional command line argument addition based on the existence of the shell to ensure the command line arguments are correctly set based on the existence of the
increased the subscription deletion duration from 10ms to 1ms in DatabaseCleaningService. java to allow for more subscriptions during the deletion process
replaced List with Set for test instances in MockitoExtension. java and added a test test for dependency injection in JunitJupiterTest. java
refactor FieldMonitor class for improved readability to enhance maintainability and facilitate future updates
replaced deleteFilesAfterClose ( ) method with fileMmapEnableIfSupported ( ) in BTreeMapTest. java to enable file mapping functionality
added a reset method to the iterator in SortedIntList. java and created a test class SortedIntListTest. java to ensure iterator is
added JMXHelper registration to DefaultRemoteProxy and removed printStackTrace call in JMXHelper to improve error handling and eliminate unnecessary stack trace printing
change default writebuffer size from 4MB to 64MB in RocksDBConfigurableOptions. java to accommodate larger writebuffer sizes for
removed the true parameter from the constructor of the Style class to simplify constructor initialization by eliminating unnecessary parameters
replace ` addArgument ` method with ` addArgumentNoEncoding ` method in ` FacebookShare. java ` to ensure that the method correctly handles
[ beamio ] remove log output from samzarunner
updated HelloAudio. java to replace Vector3f with MouseInput and set positional properties for audio nodes to improve audio handling and ensure proper
updated LoopRotateBadNodeBudget. java file to improve code clarity and maintainability
added ` TypeInformation <? > ` parameter to ` convertToMongoType ` methods across multiple classes to enhance type safety and prevent potential null pointer
m1 = { 1, 2 } and m2 = { 3, 4 } for imaginary unit
simonstewart : sendkeys ( ) now return an empty array instead of null.
added methods to create a scaled instance of BufferedImage based on target sizes to ensure proper handling of negative target sizes and prevent application crashes
removed the extendArgumentCheck ( ) and extendWrapStore ( Engine ) methods from DBMaker. java to streamline the codebase by eliminating
add method ` updateShiftStateNow ( ) ` to ` AnySoftKeyboard. java ` to improve keyboard state management during keyboard interactions
removed the DETECTED _ ACTIVITY constant from several location - related classes to streamline the code by eliminating unnecessary dependencies
updated import statements for ExtensionConfig across multiple WebSocket - related classes to ensure consistency and maintainability of the WebSocket implementation
removed the import of Buildable from AaptPackageResources. java to streamline dependencies by eliminating unnecessary dependencies
added Unused start and end parameters in multiple classes to improve code clarity and prevent memory leaks
updated error message in WebSocketUpgradeHandler to provide more context about the response status
updated the initialization of blockMode in P11Cipher. java to ensure correct parsing of encryption modes
updated Mockito library version to ensure compatibility with the latest testing framework
refactored permission checking logic in Merge. java to improve code readability and maintainability
removed deprecated getConversationID method from multiple response and request classes to indicate that these methods should no longer be used
updated import statements in DummyFreeTTSVoice. java and modified phone set initialization in DummyFreeTTSVoice. java to ensure compatibility with
refactor stripQuotes method in BaseSemanticAnalyzer and PlanUtils to use PlanUtils. stripQuotes for consistency to improve code readability and maintainability by
refactor rendering methods to use a local variable for better null safety to improve code maintainability and prevent potential NullPointerExceptions
added a new list to include remote artifact repositories in the DefaultPluginManager to ensure that repositories are accurately included in the resolution group
camel - cxf - cxfrsproducerfactorycachetest need to close applicationcontext
updated PhysicsClient. java file to improve code readability and maintainability
added JUnit @ Ignore annotation to SessionTest. java to temporarily skip frequent failure during test execution
added a new File object instantiation in the ZipFile class to facilitate file handling in the application
added a deprecated method ` handleAll ( ) ` to the ` TryType ` class to indicate that the method should no longer be used
added a new test class ` ChannelTest ` and modified the ` uid ` field initialization in ` Channel ` to ensure that the ` uid `
added logging functionality to GenericDAOImpl and introduced a new StackTraceUtils class to enhance debugging capabilities and provide clearer stack trace information
removed the @ Test annotation from FormLoginIntegrationTests. java to eliminate unnecessary test dependencies
mondrian : fix parsing of function call with parens.
refactor CheckDatabaseHelper to use a HashMultimap for configuration selection management to improve code readability and maintainability by using a more efficient data structure
rename ` supressWarnings ` to ` suppressWarnings ` for clarity to improve code readability and maintainability by using a more descriptive name
updated JsonTreeReader to handle unexpected JsonElement elements and added a new test for nextJsonElement to improve error handling and ensure proper functionality of JsonElement
added support for extra arguments in TestCommand and ExternalTestRunnerIntegrationTest to ensure proper event handling for unexpected arguments when using internal runner
added two new methods ` dedup ` and ` indexSolr ` to ` SolrDeleteDuplicates `, ` SolrIndexer `, and ` Solr
[ flink ] [ table - planner ] use flink planner in streaming mode
added a call to clear the database in MssqlIntegrationTest. java to ensure that the database is reset before tests are executed
updated progress display logic and added disposal logic in Progress. java and RSSReader. java to improve progress management and ensure proper display of model
added a check to ensure the parent directory exists before proceeding to prevent operations on non - existent parent directories
added methods to close POIDocument objects in IOUtils. java to ensure proper resource management and prevent memory leaks
replaced print statements with print statements for runOptions, sketch, and exportClassPath to improve readability and consistency in output formatting
replaced ` Box _ root ` with ` BlockBox _ root ` and added getter methods for ` dotsPerPoint ` to provide access to the
added logging for user search functionality in CustomQueryFilterFactory and updated port numbers in TestLdapAtnProviderWithMiniDS to enhance debugging capabilities and
camel - netty - http fixed port issue.
updated status handling in SnmpTargetHandler and refactored unit tests in AbstractSnmpTargetHandlerTest to improve test reliability and ensure proper
added a check for instructor submit privileges in the InstructorFeedbackEditPageAction class to ensure only instructors with submit privileges are included in the
added @ Incubating and @ Deprecated annotations to AvailableSettings. java to indicate that the code is outdated and should not be used in future
refactor file path handling in FileResolverImpl. java and add a new test class for WarFileResolverTest. java to improve robustness
updated the message format in DocumentsWriterPerThread. java to include docstores to improve clarity of log output for better debugging and monitoring
update the item name display for the dirt block to ensure the item is in the correct format for the item
updated whitespace strip settings from stripWhitespaceX to stripWhitespaceY to improve whitespace handling in image processing
increased lock initialization from a fixed value of 1000 to a fixed value of 1000 to allow for more time for thread execution
updated the ` deserializeFrom ` method to include ` exactSearch ` parameter and added a test for ` MeasurementChunkMetadataListMapIteratorTest
removed the ` dateFormat ` parameter from the CSVSaveService constructor and initialized it to ` DEFAULT _ DATE _ FORMAT _ STRING ` to simplify the
set preferred size of FList in NavigationShareTab to ensure proper layout for the FList component
replaced OffsetAttribute with State in BeiderMorseFilter. java and added a test for custom attributes in TestBeiderMorseFilter.
updated UpnpAudioSinkReg, UpnpHandler, and UpnpServerHandler classes to improve code organization and maintainability
update burst placement to use a new block position to ensure bursts are collided at the correct position
added a new JUnit test factory method ` toJson ( ) ` to ` JsonTest. java ` to enhance test coverage and ensure proper serialization of
refactor MutableContextDataSupplier class to improve code readability and maintainability
changed exception handling from ` Exception ` to ` Throwable ` and added a warning log for loading LogWatcher to improve error handling and provide better logging
added https parameter to KubernetesMockServer constructor to enhance security by allowing HTTPS requests
add stamp computation for unary math intrinsic node.
updated HTTP response codes and assertions in DefaultServlet and DefaultServletTest to ensure proper handling of GET requests and improve test reliability
tika - 465 -- use locale. us for decimalformat to avoid locale - sensitive error
updated error handling in ShowFileRequestHandler and added a new test method in ShowFileRequestHandlerTest to improve error reporting and ensure proper handling of 404
added support for handling InvocationTargetException in ReflectorClassWriter to improve exception handling capabilities within the Reflector framework
added clamp method to Vector and Vector2 classes to enhance vector manipulation capabilities
added scope handling in ChainedTokenGranter to ensure correct access token processing based on client details
refactor BC _ instanceof method implementation to improve code readability and maintainability
added a logging statement for saving settings in EditorBottomSheetBehavior. java to improve debugging capabilities by logging specific actions
updated UaaUrlUtilsTest to use JUnit 5 annotations and annotations to improve test clarity and maintainability by using JUnit 5 annotations
hhh - 16686 - fix npe in nativequery
added a caching mechanism for font anti - aliasing in SunLayoutEngine to improve performance by avoiding repeated calculations for font anti - aliasing
replace IntBigArray with IntArrayList in TypedSet. java to improve memory management and memory efficiency
danielwagnerhall : ignore ie test that don't pass
[ hotfix ] [ doc ] fix typo in brokerrequestutils
refactor InjectorBuilderImpl to use a map for instance management to improve clarity and maintainability of the code
updated path retrieval logic in RawTargetNodeFactory and BuildTargetToRawTargetNodeTransformer to ensure correct base path is used for build targets
added null check for the value before parsing it to avoid potential NullPointerExceptions when the value is null
add keepalivemanager to keepalive so that it can be use by other jabber provider.
updated the default load factor from 67F to 67 to optimize memory usage for hash sets
added a method to retrieve all DataTypePhysicalVariations in VectorizationContext and updated Vectorizer and VectorPTFOperator to use this new method
updated package structure for HtmlAssetTranslator and StringsResourceTranslator to improve organization and maintainability of the codebase
refactor conditional logic for vertical bar layout in OverviewState. java to improve readability and maintainability of the code
added @ Entity annotation to BaseActivityEventEntity. java to enable Entity - based persistence in the application
added tracing sections for TouchInt interactions in NavBarSwipeInteractionHandler and TouchInteractionService to improve debugging capabilities during interactions
added a new file InvalidOptions. java to demonstrate usage of javap options to ensure compliance with Java conventions and improve error handling
added logging for inconsistent number of displays in DisplayController. java to improve error reporting and debugging capabilities during display updates
refactor ` getClientIdAndClientSecret ` method to use ` OAuth20Utils. getClientIdAndClientSecret ` instead of ` Pair. of
changed the value of _ unwrapServletException from false to true in ErrorPageErrorHandler and AsyncContextTest to enable unwrapping of servlet exceptions
added handling for infoUpdated status in PackageUpdatedTask. java to ensure that the status is set to DEFAULT when infoUpdated is true
camel - seda : fixed potential npe when use unbounded queue size.
added batchUpdateStart and batchUpdateEnd methods to Kernel and App classes to enable batch updates during application execution
added a custom HttpClient configuration to ThirdEyeApplication to enable flexible HTTP client configuration in the application
added getSort ( ) method to JobInstanceFetchRequest and updated getBatchSize ( ) method in JpaJobPersistenceImpl to enable retrieval of job
updated the cancelCryptoFacilitiesOrder method to handle multiple open orders to ensure proper cancellation of cryptacilities orders based on their ID
don't hide keyboard when click in algebra view web
LLVMMemMove and LLVMHeap classes to use NativeFunctionHandle for memory moving operations to improve code clarity and maintainability by centralizing
removed unnecessary lines in ` BindLdapAuthenticationHandler. java ` and ` ResolverTestConfig. java ` to improve code readability and maintainability
added tooltip block functionality in ToolTipManagerW and its shared instance in ModeToggleMenu to enhance user experience by allowing tooltips to be blocked
updated DefaultDateTypeAdapters to accept a custom DateFormat parameter and modified GsonBuilder to accept a custom time style to enhance flexibility in date handling
updated playerSet formatting to improve readability to enhance code clarity and maintainability
added a check for empty lists in List. java to ensure proper handling of empty lists
added handling for InvocationTargetException in ParametricCallable. java to improve error handling for command - related exceptions
modified the getLikeExpression method to include a boolean parameter for handling regular expressions to enhance flexibility in expression handling based on user input
added start and stop methods to StreamSupplierComponent and its implementation in NativeStreamSupplierComponentImpl to enable better management of lifecycle events in the stream
added locale handling in the runChild method of LuceneTestCase to ensure default locale is used when running tests
refactor multiple PG - related classes for consistency and clarity to improve maintainability and readability of the codebase
refactor context handler initialization into a separate method ` initContextHandler ` to improve code readability and maintainability by encapsulating context handler logic
added a test method to verify the behavior of RouteBuilder reference in OSGiBlueprintTestSupport to ensure the correct route is referenced in the OSGi blueprint
nifi - 746 : fix test to not fail on window
refactor returnTypeSubstitutable method to simplify return type handling to improve code readability and maintainability
added a ThrottleType enum for character processing in TestExecutor to enable flexible control over the throttle type used in template processing
removed unnecessary pixel assignment in ColorBleedEffect. java and added conditional check in SpriteBatch. java to improve code clarity and prevent unnecessary
refactor Annotation and AnnotatedElement classes to improve code readability and maintainability
added a new model interface to the Sheet class and updated Workbook class to implement it to improve modularity and maintainability of the codebase
( chore ) camel - cxf : use camel - exchange - filter instead of camel - header - filter
added functionality to manage and clear the EntityManager in JpaItemWriter and JpaItemWriterBuilder to enable users to manage and clear the EntityManager effectively
added null checks and error handling in InstallShortcutReceiver, Launcher, and Workspace classes to improve robustness by preventing null pointer exceptions and logging errors
updated TwoDimensionalCollectionValuedMap instantiation to include a boolean parameter to enable flexibility in handling different data types
updated exchange host and exchange name from " btc - e. nz " to " wex. nz " to align exchange specifications with the
added null checks for columnReaders and reader in EncodedTreeReaderFactory to prevent NullPointerExceptions during processing
added a null check for files in SegmentInfos. java and implemented a new test case in TestIndexReader. java to ensure robust error handling
updated the search parameter regex pattern in HSearchSortHelperImpl. java and renamed FhirResourceDaoR4SearchWithElasticSearch
refactor BigDecimal calculation to use an intermediate variable for clarity to improve readability and maintainability of the code
updated limit check from 1 to 0 in RangeInputStream and RangeReader classes to ensure proper handling of negative limit values
camel - 16400 : camel - core - optimize route collection to reduce log noise.
[ java ] adjust playback position of a medium playlist to match the current playback position.
updated test class names from ` com. apache. lucene. xmlparser. builders ` to ` org. apache. lucene. xmlparser.
added a new StatefulMapper2 class to handle stateful stream operations to improve the handling of stateful operator states in the streaming framework
removed null check for ` fill ` and ` stroke ` in ` Area. java ` and ` Line. java ` to simplify the code by
removed dbExists method and updated import statements in Blockchain. java and BlockchainTest. java to streamline code by eliminating unused dependencies
trim whitespace from the group in SQLPlusSupport. java to ensure proper parsing of values without leading or trailing spaces
set the socket as asynchronous in Http11AprProtocol. java to ensure proper handling of asynchronous connections in the application
remove divider location calculation in DockSplitPaneW. java to simplify the code by eliminating unnecessary complexity
added HEALTHCHECK _ OK _ CALLS and HEALTHCHECK _ BAD _ CALLS metrics to the ControllerMeter and Pinot
added visibility of shared avatars in LocalFileListAdapter to improve user experience by hiding shared avatars
mebis : move scss resource to mebis / web / resources
updated condition checks from ( 1 > = args ) to ( 1 > = args ) in BurstSendReceiveUdpPing. java and
added logging condition for command execution in LogInterceptor. java to ensure proper execution behavior based on logging level
replaced CountDownLatch with assertWaitUntil for finished spans in EventBusTracingTestBase. java to improve test reliability by ensuring the correct number of
replaced the default locale variable with a getter and setter method in QueryParser to ensure consistent locale handling across the application
refactor entry type handling in EntryCustomizationDialog and FieldSetComponent to use Collections. singletonList instead of Arrays. asList to improve code readability and
jbrules - 363 : fix build issue with betanode constraint.
added a new class ` OcspUnauthorized ` and updated ` OCSPResponse ` to use it to improve the handling of unauthorized
replaced Thread. sleep ( 2000 ) with a loop that waits for server state to complete before proceeding to ensure proper server state management and prevent
avro source : add source. open - connection. count to track the number of active connection.
change visibility of ` execute ` method from package - private to public in ` ExecutionStrategy ` and ` ExecutorServiceExecutionStrategy ` classes to allow access
refactor ` createDefaultJavaPackageFinder ` method to return a set of source paths instead of a single set to improve code clarity and maintainability by
replaced direct Writer instantiation with PrintWriter in ScriptExecutable. java to improve readability and maintainability of the code
[ hotfix ] [ test ] fix test failure on window
added support for DataTable in JRubyStepDefinition to enable conversion of DataTable objects to JRuby objects
updated visibility settings and refactored API result handling in SearchImagesRenderer and ApacheHttpClientMediaWikiApi to improve UI responsiveness and enhance API
refactor ReadSentimentDataset class to improve code readability to enhance maintainability and facilitate future updates
updated error message formatting in FormulaParser. java to improve clarity of parsing errors
added getter and setter methods for bind address in WebSocketClient. java to enable configuration of bind address for WebSocket connections
[ java ] delete archive and aeron directory before close the clustered medium driver.
refactor width and height setting logic in WidgetGroup. java to improve clarity and maintainability of the code
replaced direct comparison with Boolean. valueOf for sessionFixationAttribute to improve readability and maintainability of the code
refactor LALogicLinesFragment to use a switch statement for edge options instead of a switch statement to improve code readability and maintainability by
danielwagnerhall : increase the backoff coefficient for chrome binary.
added HttpMethod and HTTP route handling to the ClientResponseWrapper class to enhance flexibility in handling HTTP requests by allowing custom HTTP methods and routes
don't compact cf in precompactedrow when shouldpurge be set
updated rendering intent logic in ICC _ Profile. java and added a new test class InvalidRenderIntentTest. java for color conversion functionality to
added a flag ` isNotSureAllowed ` to the ` FeedbackContributionQuestionDetails ` class and updated the ` FeedbackContributionEditForm
added multiple calls to ` PublicMethed. waitProduceNextBlock ` in ` ContractInternalTransaction003. java ` to ensure proper
added SuppressFBWarnings annotation and removed Serializable interface from KafkaRecord class to address findbugs issues related to serialization handling
added support for PGConnection in PooledConnectionImpl and created a test for it in BaseDataSourceTest to enhance connection handling capabilities and ensure proper
refactor PropertyTable and CloseIgnoringInputStream classes to improve code readability and maintainability
updated logging levels for token encryption secret in TokenAuthenticationHandler. java to improve clarity of log messages related to token encryption configuration
removed the @ Deprecated annotation from Hazelcast. java to indicate that the class is no longer recommended for use
updated command reporting logic and introduced a new method for handling Kerberos server actions to improve the handling of Kerberos server actions and enhance error messaging
updated NamedListCodec to improve iterator handling and added tests for Boolean values to enhance functionality and ensure correct serialization of NamedList objects
add null check for state before assigning new owners to avoid potential NullPointerExceptions during migration
added schema inclusion rule to ApiExample. java to enable public API documentation in the application
updated the expected value in the StreamExpressionTest from 3. 0 to 7. 0 to ensure the test reflects the correct mean and variance
refactor coordinate sequence creation in SDO. java and add corresponding test cases in SDOCreateTest. java and SDOCreateTest. java
added methods ` getBaseName ( ) ` and ` getDimensionCount ( ) ` to the ` ConstantPool ` class to enhance functionality for retrieving base
added debug evaluation output methods in HSSFFormulaEvaluator, SheetUtil, XSSFFormulaEvaluator, and XSSFEvaluator classes to enhance debugging capabilities
refactor test to use @ DisabledForJreRange ( max = JRE. JAVA _ 8 ) instead of @ EnabledForJreRange
updated ExoPlayerProfile instantiation and adjusted live TV playback preferences in PlaybackController to ensure proper handling of live TV playback based on user preferences
added a return statement to DynamicStyleBar. java to prevent further processing when the bar is not initialized
added logging statements for REPL DUMP properties in Utils. java to improve visibility into REPL DUMP state changes for better debugging
refactor ReactiveAuthorizationManager to improve code readability to enhance maintainability and facilitate future updates
added a condition to check if the type is both object and boolean to ensure proper handling of boolean types during object promotion
make llvmstackframenuller public.
refactor multiple Java classes to improve code organization and readability to enhance maintainability and facilitate future updates
added unit tests for CaffeineCache configuration in a new file CaffeineCacheDefaultConfigurationTestSuite. java to verify transaction aware
added a method to calculate the bounding box of vertices in the Mesh class to improve the robustness of vertex bounding calculations
added an enum TargetHashFunction and updated hashing logic in TargetsCommand. java to allow customizable hashing options for hashing files
refactor DefaultConfigurationProperties for improved clarity to enhance maintainability and readability of the code
added high light color and alpha settings to ListViewMultiChartActivity and modified the visibility of the arrow in BarChart to enhance visual clarity and control
added a new entry for sgPathPlanMap in ClusterPlanRouter. java to ensure proper handling of sgPathPlanMap in the application
updated test case from - 2 to - 1 in InfinispanRemoteProducerIT. java to correct the test case for Infinispan functionality
added functionality to remove artifact files in MavenArtifactFetcher and refactored dependency resolution logic in MavenDependencyResolver to improve artifact management and ensure proper
updated fragmentShader to conditionally define GL _ ES for varying vec4 values to ensure compatibility with newer OpenGL specifications
hbase - 2251 regionservers should be a set rather than a sorted set ( addendum )
added error handling for loading JSP configuration in TagLibConfiguration. java to improve stability by gracefully handling exceptions during JSP processing
updated CustomAnalyzer to use LUCENE _ 8 _ 0 _ 0 instead of LUCENE _ 8 _ 0 _ 0 and
added a test to verify the behavior of ` getPackageArchiveInfo ` in ` ShadowPackageManagerTest ` to ensure that the method correctly reads values
replaced direct method invocation with MethodUtil. invoke for package access checks to enhance security by enforcing package access during method invocation
updated import statements and added progress update listeners in GradleBuildService and Main classes to enhance event tracking and improve progress reporting for project configuration and task
remove synchronization from AndroidWebDriver. java to improve performance by avoiding unnecessary synchronization
improve initialization failure timeout handling in HikariConfig and HikariPool to ensure proper handling of initialization failures based on configuration
removed the ` timeOut ` parameter from the ` getResult ( ) ` method and added a new ` error ( HttpResponse httpResponse ) ` method to
made the ` isNative ` field transient and updated its value in ` addEntry ` method to prevent serialization of the ` isNative ` field
updated error message formatting in CEntryPointCallStubMethod. java to improve clarity of error messages
renamed ` RuleEnableHandler ` to ` RuleEnablementActionHandler ` and updated corresponding imports to improve clarity and consistency in handling rule enablement
updated access modifiers in TagAttributeInfo and ImplicitObjectELResolver classes to improve encapsulation and maintain consistency across the codebase
updated logging statements in AuthzAuthenticationFilter and AuthzAuthenticationManager to improve clarity of logged messages regarding authentication requests
updated KafkaDynamicTableFactoryTest and UpsertKafkaDynamicTableFactoryTest to replace options with source and sink options to improve clarity and consistency
added error handling for finding the registrant repository in UsersPanel. java to improve robustness by logging errors when the repository cannot be found
added support for additional font file formats in SunFontManager to enhance compatibility with additional font formats
refactor type handling in AnnotationMatcher for clarity to improve readability and maintainability of the code
updated log level from " OFF " to " SEVERE " in Grep. java to improve logging granularity for better troubleshooting
added debug logging conditional checks before logging statements in FaultTolerantChunkProcessor. java to optimize logging performance by avoiding unnecessary calls when debug logging
rename ` includes ` to ` excludes ` for clarity to improve code readability and maintainability by using a more descriptive variable name
added methods to handle home intent movement based on the ` shouldMoveToDefaultScreenOnHomeIntent ` state to improve user experience by ensuring
change the maximum bitrate from 110 to 30 in PMS configuration to increase bitrate for better performance
replaced the method ` getOptions ( ) ` with a direct call to ` optionsMap. values ( ) ` to simplify the code and improve readability
updated the return statement to trim whitespace from the description to ensure consistent formatting of the description
updated the file path from " / JDK8022548. out " to " JDK8022548. out " to ensure the correct output
[ hotfix ] log error message when process ben't in our list.
added getter methods to MusicLoader and SoundLoader classes to provide access to the loaded music and sound data
removed unused imports and simplified type assignment in OnBeanCondition. java to improve code clarity and maintainability
added ScreenRecord annotations to RequestPinItemTest. java to enable screen recording for test purposes
updated the selection of the pause button in CPUFeature and MemoryFeature classes to ensure the button is only selected when it is currently selected
refactor preference handling in Preferences. java to use a dedicated preference category to improve code readability and maintainability by centralizing preference management
don't send available presence to the server if it's not available.
updated StringBuilder initialization logic in ObjectInputStream to ensure proper capacity for StringBuilder based on UTF - 8 character length
added property values for " spring. metrics. export. statsd. enabled " in WebEndpointsAutoConfigurationIntegrationTests. java to ensure metrics
refactor InterruptedException class to improve error handling to enhance reliability and maintainability of the code
refactor ServiceTicket class to improve code readability to enhance maintainability and facilitate future updates
refactored connection check logic to use a boolean for SSL recovery to improve code readability and maintainability by simplifying connection logic
added a check for Map class type in ArgumentArrayMessageMapper to ensure proper conversion of values based on their type
ds - 3534 : fix test failure due to indexabledspaceobject
removed the ` AuthenticatorActivity ` class from the ` sExemptOfPasscodeActivites ` list to ensure that the activity does not
removed the deprecated annotation from PatternParameterConfigurator. java to streamline the code by eliminating unnecessary dependencies
changed the return type of ` beginDraggingWidget ` from ` void ` to a ` boolean ` and added null check for the drawable to
added JUnit @ Ignore annotation to TestPackedInts. java to temporarily skip the test due to known issue LUCENE - 4488
added null check for root in DynamicStyle. java to prevent potential NullPointerExceptions when root is null
add confusion matrix to maxenttagger and testclassifier
rename variable ` lastSampleInError ` to ` lastSampleOk ` and update related logic to improve clarity and maintainability of the code
added unit tests for connected devices in ShadowBluetoothHeadsetTest to ensure correct functionality of Bluetooth headset operations
renamed the test method from " # autowire " to " # autowired " in PropertyBindingSupportTest. java and PropertyBindingSupport. java
added " clone " and " finalize " methods to objectMethods and introduced a conditional for loading lazy loading to improve object handling and ensure lazy loading
added null checks for counters in IntegrationTestBigLinkedList. java to prevent errors during configuration verification
add can _ get _ instance _ info command for proxy object.
updated the parameter name from ` service ` to ` serviceId ` in the ` setRegisteredServiceFilter ` method to improve clarity and accuracy in
added a null check for the activity before accessing its properties to prevent potential NullPointerExceptions when the activity is not initialized
renamed LOGGER to logger in HeartbeatMonitor, Scheduler, GrpcHeartbeatSource, and NetHeartbeatDaemon classes to improve clarity and consistency in logging
added getter and setter methods for string type in DatabaseAdaptor and JDBCSessionDataStore classes to enhance flexibility and maintainability of database type handling
updated UIMAUpdateRequestProcessorTest to use suggested category instead of a category to improve test clarity and maintainability by using a more descriptive
refactor thread name handling in CliDriver, SessionState, and HiveSessionImpl classes to improve clarity and maintainability of thread name management
refactor TaskletAdapter to improve code readability to enhance maintainability and facilitate future updates
drools - 22200 dmn runtime test for negative input ( # 5889 )
added glFlush ( ) call to TextureMap. java to ensure texture map creation completes before moving on systems
added tooltip functionality to the checkbox in RocketPanel to enhance user experience by providing context for the checkbox
replaced calls to ` owner. getTypes ( ). add ( e ) ` with ` owner. addType ( e ) ` and added a
add text and description to hot reload action ( # 1795 )
use stringtemplate. defaulttemplate instead of simple label simple
updated BRIGHTNESS _ FACTOR from intValue ( ) to doubleValue ( ) to ensure the value is accurately represented as a double
refactor SSCMHistoryParser to simplify matching patterns and improve error handling to enhance readability and maintainability of the code
added a boolean parameter ` isAdmin ` to the ` createUser ` method and implemented the listUsers method in ` HomekitAuthInfoImpl `
added null checks for indexedWriteMethod and updated type checks in Introspector, PropertyDescriptor, and Test6723447 classes to ensure proper handling
fix dynatraceexporterv2. totimerline ( ) and todistributionsummaryline ( )
updated method names for clarity and consistency to improve code readability and maintainability
add setcapabilitiesfromspongebuilder ( ) method to mixinitem. setcapabilities ( )
[ hotfix ] [ test ] fix typo in lifecycleutilstest
added checks for CreateSmartContract and refactored contract creation logic in Wallet. java and GetContractServlet. java to improve contract validation and
added multiple package - info. java files for image and runtime components to improve organization and accessibility of the application components
removed synchronization from the add method in DocumentsWriterDeleteQueue to improve thread safety and prevent potential race conditions during insertions
added a check to ignore duplicate JavaFileObjects in JavadocTool. java and refactored test cases in T7091528. java to
updated the default value of STRIP _ IPV6 from true to false to ensure consistent behavior for IP address formatting
added support for adding a new user parameter in the LoginServerTokenEndpointFilter to enhance flexibility in managing user credentials during OAuth token authentication
added support for CPP language in LanguageFactory and updated conditional checks in CPPParserTokenManager to enhance language handling by incorporating C _ KEY
replaced ` LinkedBlockingQueue ` with ` MoreExecutors ` in multiple files and added a new class ` MoreExecutors ` with a single thread executor to
added cache - control header to the response in FormAuthenticator. java and corresponding test assertions in ConstraintTest. java to ensure proper caching behavior and
updated error logging to include the exception message to improve error reporting by providing more context about the error
replaced AllHSSFUtilTests with TestAreaReference, TestCellReference, TestRKUtil, TestRangeAddress, and TestSheetReferences
refactor FetchHTTP2Test and FetchHTTPTestBase classes to improve code organization and maintainability
updated classDirectory assignment to handle null output cases to ensure robust error handling by avoiding null pointer exceptions
added ExternalResourceControlPriority import and updated access control settings in Java2DRenderer. java to improve resource control prioritization during execution
added exception handling for ArrayIndexOutOfBoundsException in TestTriggerCoverage. java to ensure compatibility with JDK fonts on Windows machines
changed the access modifier of HotspotThreadMBean from private to final and refactored CPU time testing logic to enhance immutability and improve
added checks to ensure comments are not empty in TabsAndIndentsVisitor. java to improve robustness by preventing potential null pointer exceptions
updated assertions in SimDistribStateManager and TestTriggerIntegration to improve accuracy of rate assertions
updated comparisons from ` getFilePath ( ) ` to ` getFilePath ( ) ` and ` getId ( ) ` in multiple files to ensure case
added a new method ` getString ` to the ` ShadowBundle ` class to provide functionality for retrieving a string by providing a default value
added date and time formatting based on locale settings in TweetActivity. java to improve localization support for users
added a check for empty connections in StandardProcessSession. java to ensure that an empty list is returned when no connections are available
refactor focus request logic into a separate method ` requestFocus ` to improve code readability and maintainability by encapsulating focus logic
updated path handling in App. java to ensure proper escaping of backslashes to improve compatibility with file paths and prevent potential issues with backslashes
[ coordmatrix ] make solve thread - safe
added import statement for Message in GenericMessage. java to utilize Message functionality in integration tests
refactor SQL query construction in PostgresConnector and TaskAttempt classes to improve clarity and maintainability of the code
refactor file filter selection logic in AquaFileChooserUI. java to improve clarity and maintainability of file filtering logic
added synchronized blocks for better synchronization in P2PTransportManager. java to ensure thread safety when creating IceMedia streams
updated the ` toFormulaString ` method in ` ArrayPtg ` and added a test for it in ` TestArrayPtg ` to
updated import statements in PGtokenizerTest. java to improve clarity and maintainability of the test code
refactor Java2TypeScriptTranslator to handle different enclosing elements and improve variable handling to enhance type safety and maintainability of the code
added sequence creation and alteration statements in AddAutoIncrementChange. java to ensure proper handling of auto - increment columns in PostgreSQL
updated byte reading logic and modified character index handling in DataInput. java to ensure correct byte reading and improve character index accuracy
added assertions to check the metadata for VerticalPhysicalPixelSpacing and HorizontalPhysicalPixelSpacing in ImageParserTest. java to ensure the correct metadata is
updated the method call from ` getParent ( ) ` to ` parent. getParent ( ) ` to ensure the correct parent is retrieved
updated import statements in AddNotNullConstraintChange. java, StandardDiffGenerator. java, IndexSnapshotGenerator. java, and UpdateStatement. java
replace calls to ` NativeCrypto. ENGINE _ finish ( engine ) ` with calls to ` NativeCrypto. ENGINE _ free ( engine ) `
added functionality to handle iteration events in multiple controllers to improve event handling and maintain consistency across controllers
release HttpContent in FormDataHttpContentProcessor and NettyStreamingFileUpload in NettyStreamingFileUpload to ensure proper resource management and prevent memory leaks
added a call to deleteLogs ( ) in TestRecovery. java to ensure proper cleanup of logs during recovery
added a check for URLs containing " twitter : / / " in BrowserActivity. java to ensure proper navigation when the URL does not contain "
added a client to wait for the deployment status in DeploymentGroupTest. java to ensure that deployment status is available before proceeding
changed log result from false to true in VisibilityController. java to enable logging of list labels for improved visibility control
increased the MaxAutoRetries from 0 to 25 in RestTemplateRetryTests. java to allow more retries for improved functionality
removed System. out. println ( result ) from TranslatorSupportTest. java and added @ Override annotations in StandardTypeMapperComponent. java
added support for parsing fraction resources in the ResourceLoader and Converter classes to enhance functionality by allowing users to specify fractions in resource files
added a check to confirm writing to the file before proceeding to ensure that the file is written correctly before proceeding
added null checks for tag groupId and artifactId in UpgradePluginVersion. java to ensure proper dependency resolution and prevent potential NullPointerExceptions
hbase - 2658 throw quotaexceededexception instead of donotretryioexception
refactor multiple Java classes for consistency and clarity to improve maintainability and readability of the codebase
refactor TestFuzzPreLoop class to improve code readability and maintainability
added a check to ensure f0 is non - negative in HTSVocoder. java to prevent potential errors when f0 is negative
added null checks for ` pkColumn ` and ` fkColumn ` before accessing them in ` SchemaRetriever ` and ` TableRetriever `
refactor encoders management in InputBuffer and B2CConverter classes to use SynchronizedStack for thread safety to improve thread safety and ensure encoders
added functionality to allow empty pages in the Lawnchair preferences to improve user experience by preventing empty pages from being displayed
added a warning log indicating that cucumber - needle has been deprecated to inform users that using Cucumber - cdi2 or Cucumber - j
updated theme handling in ShadowThemeTest and ShadowArscAssetManager, and added NativeObjRegistry in ShadowVMRuntime to improve theme management and
updated error messages in VerifyFast. java for consistency to improve clarity and maintainability of test failure messages
no effective change - remove obsolete dbmigration annotation
added a check for IdentNode and updated method visibility in Global and ScriptObject classes to improve handling of property properties and enhance extensibility of JavaScript
replaced ` Collections. shuffle ( readers ) ` with ` random ( ) ` in ` TestFilterDirectoryReader. java ` to improve performance by
added conditional logic to retrieve display names based on user's shareWith to ensure display names are correctly formatted for users based on their shareWith
updated path handling in CookieRetrievingCookieGenerator to use StringUtils. defaultIfBlank to ensure that a valid path is always appended to the
updated closing brace formatting in multiple Java files to improve code readability and maintain consistency
changed the declaration of cacheName to final in AbstractCacheService. java to ensure consistency in naming conventions and improve code readability
update comparison logic in ValidationResult. java to ensure pageNumber is not equal to ve. pageNumber before proceeding
added a null and equality check for the focused widget in the UIDropdown class to ensure proper handling of focus widgets when the focused widget is not
updated method signatures in SoundUtil. java for consistency and clarity to improve code readability and maintainability
refactor ApplePackageDescription and AbstractBuildRuleTypes to use getAppleCxxPlatformFlavorDomain instead of getFleCxxPlatformFlavorDomain to
added a test case to verify SQL syntax in ClickHouseStatementTest. java to ensure that the SQL syntax is valid and meets the expected requirements
renamed ` onConnect ` to ` onAccept ` in both ` ServerSessionListener ` and ` AbstractHTTP2ServerConnectionFactory ` to improve
refactor EnglishPTBTreebankCorrector class to improve code readability and maintainability
added a new file TestGetLoggerNPE. java to test the behavior of logger access in a multithreaded environment
added a ` getData ` method to ` PathSharingContext ` and updated sharedMap initialization in ` ScriptedProcessor ` and ` Scripted
refactor EspressoRootNode and StaticObject to improve synchronization handling and exception management to enhance code reliability and maintainability while ensuring proper
updated NextValExpression to support case - insensitive matching of NEXT VALUE FOR to enhance flexibility in expression processing by allowing case sensitivity in next value
add more information for unsupported resource bundle access in LocalizationSupport. java to improve debugging capabilities for resource bundle access
added threshold for reading and removing entries in BoundedLocalCache and implemented a test for clearing pending writes in BoundedLocalCacheTest to enhance cache performance
added exchange specific parameters for Leverage _ Level in QuoineExchange and defined order direction in QuoineNewMarginOrderRequest to
added a method ` boundInitialization ` to the ` PropertyDescriptor ` class and created a new test class ` Test7192955 ` to
added a new interface ` SetDisplayModeCallback ` and modified display mode handling in ` LwjglGraphics ` to improve error handling and provide
added null check for buttons awatingRelease in Tabs. java to prevent potential NullPointerExceptions when accessing parent components
replaced the method for calculating wrap width in LineCell. java and updated wrap height calculation in StyledTextAreaSkin. java to improve layout consistency and
updated error message format in XSLTErrorResources _ it. java to improve clarity of error messages
replaced HashMap with LinkedHashMap for paramValues in CustomChangeWrapper and CustomPreconditionWrapper to ensure predictable iteration order of parameter values
replaced SQL string concatenation with String. format for name formatting across multiple classes to improve readability and maintainability of the code
replaced the use of ` xmlStreamReader. getNamespaceContext ( ) ` with a direct call to ` getNamespace ( prefix ) ` to simplify the code
added support for nested joins in TestAll and TestBase classes to enable nested joins functionality in tests
fix npe in querymanager. getallpermissions ( )
added caching of class and platform class paths in SourceFileManager and updated CompletionTaskProcesor to accept a cursor parameter to ensure cache is
added configuration for Hive metastore URIs and HIVE authorization manager in TestMsgBusConnection. java to enable dynamic configuration of SQL standard authorization
replaced ` Assert. assertThat ( ) ` with ` assertThat ( ) ` in ` KuduIOIT ` and ` XmlIOTest `
added nullability annotations to Handler parameters in MetadataRenderer, TextRenderer, and Util classes to enhance code robustness by preventing NullPointerExceptions
use long. BYTES instead of Long. SIZE in SymbolMapReaderImpl and add a test for symbol file mapping in LineTcpConnectionContextTest
removed print statements for termFilter and otherTermFilter in TermFilterTest. java to streamline output by eliminating unnecessary console output
deleted the Reflection class and removed the TypeConverters class to streamline the codebase by eliminating unused components
refactor ThreadlessExecutor to use getter and setter methods for finished state to improve code readability and maintainability by encapsulating state management
refactor DateTimeFormatter to simplify error handling and improve clarity to enhance code readability and maintainability
rename CHUNK _ LENGTH to CHUNK _ LENGTH _ KB in CompressionParameters. java to improve clarity and consistency in naming conventions
added a new generic type ` T7034495 ` and created a new class ` T7034495 ` with multiple generic interfaces
modified the loop structure in LotsOfEvents. java to improve code readability and maintainability
modify conditional statements in TransclusionDecideRule. java to improve readability and maintainability of the code
removed MICRONAUT _ PREFIX constant and streamlined version printing in Micronaut. java to improve code clarity and maintainability
added unit tests for the Area3DPtg class in TestBugs. java to ensure correct functionality of the Area3DPtg class in
updated MindIcon creation to include a dynamic description based on the presence of a slash to ensure the MindIcon is created with a valid
updated onHomeIntent method signature to include an internalStateHandled parameter to improve handling of home intents during state management
replaced the default value of ` getPreferDependencyTree ( ) ` with a boolean variable ` preferDependencyTree ` to improve code readability and maintain
added an ` activeTab ` parameter to the ` showDetails ` method across multiple activities to enable dynamic tab navigation based on file details being displayed
updated the ANONYMOUS _ STATIC _ FUNCTION _ NAME from " $ apply " to " applyStatic " across multiple files to standardize
added capacity check and randomize253State method in MinimalEncoder. java and updated test assertions in HighLevelEncodeTestCase. java to ensure correct
updated header and parameter handling in SourceBuilder. java to improve clarity and functionality of output formatting
added a call to notifyDataSetChanged ( ) in FolderSyncActivity. java to ensure the adapter is updated correctly during synchronization
removed the method ` setDefaultWALSyncMode ` from ` ShadowSQLiteConnection ` to streamline the code by eliminating unused functionality
updated type resolution logic in RemoveJavaDependenciesAdapter. java and added assertions in Collections. java to improve type safety and ensure correct removal of elements
added getter methods to DefaultS3CrtAsyncClient. java to enhance accessibility of the credentials provider and region, and minimum part size
updated error message in doDudPasswordTest from " 2087569732 " to " 2087569732 " to accurately
updated the assertion message in HazelcastTestSupport. java to clarify the correctness of the size of a collection
improve error handling in GraalCompiler and add conditional logic in GraphBuilderPhase to enhance robustness by properly handling internal errors and ensuring proper
mow - 121 : adjust width and height of eusclidianview to prevent jogging.
refactor SQLXML class for improved readability to enhance maintainability and facilitate future updates
added a limit parameter to the getOrderBook method in YoBit classes to allow users to specify a limit for order books
replaced GotWrongOOMEException with HeapOOMEException and updated related imports to improve exception handling consistency and align with the new metaspace
nifi - 7462 : set max string length to integer. max _ value for standard dataflow
updated the retrieval of enabled engines from a configuration to an empty string to ensure that the application does not attempt to read an empty string from the
rename ` FullIterator ` to ` WheelIterator ` and update related imports and imports to improve clarity and consistency in naming conventions
added error handling for generating BugAnnotation and customized bug descriptions to improve robustness and provide clearer error messages for missing bug patterns
[ hotfix ] [ test ] increase wait _ chunk _ is _ read _ in _ seconds to 10 second.
changed the visibility of the menu item from true to false to prevent the uncomplete checklists menu from being displayed
refactor DefaultResultSetHandler to resolve discriminated results by introducing a new Contract class and introducing a new Contract class to improve handling of
added null checks for defaultHome and mContext to ensure proper unregistration of receivers to prevent potential NullPointerExceptions
removed the VertxGen annotation from PumpImpl. java to eliminate unused dependencies and improve code clarity
removed unnecessary casting of ` mContainerActivity ` in ` FileDetailFragment ` and ` OCFileListFragment ` to streamline code and improve readability
trim whitespace from tokens in ConfigAttributeEditor and add a test for trailing and leading spaces in ConfigAttributeEditorTests to ensure proper handling of configuration
renamed classes ClassUsingAnotherAuxiliary and ClassUsingAuxiliary to improve clarity and maintainability of the code
svm : add substitution for unnamed module in classloader.
added checks for system tables in DatabaseMetaData. java to ensure correct relKind is used based on the presence of system tables
updated TIER _ ENTERPRISE _ PLUS _ VALUE from 3 to 3 in Agent. java and AgentProto. java to standardize
updated RQST field initialization and exception handling in ThriftHiveMetastore. java and HiveMetaStore. java to ensure consistency in RQST
added a new module - info. java file defining module exports for core components to enable modularization and accessibility of core components in the application
added handling for flushing state and interested state in SslConnection. java to ensure proper fill state handling and improve error handling
updated Log4j2LogDelegateFactory to implement LogDelegateFactory and modified LoggerFactory to use LogManager instead of LogDelegateFactory to enhance logging
added boolean flags for server VM and client VM in ExecutionEnvironment. java and TestHelper. java to enhance test reliability and provide clearer feedback
refactor ExecutableFindOperation, MongoOperations, ReactiveFindOperation, and ReactiveMongoOperations to improve code organization and maintainability
updated import statement to use " org. postgresql. ssl. LibPQFactory " instead of null to enable compatibility with PostgreSQL's LibPQ
disable testinterprocesssemaphandlEdges # testinterprocesssemaphandlines to prevent flakiness
added sorting functionality for resource names in EditableResources. java to ensure consistent ordering of resource names and improve code readability
added a new file ` OSvTerminal. java ` and registered OSV flavor in ` TerminalFactory. java ` to facilitate terminal
added support for gr - specific suffixes in ClassType. java to ensure compatibility with additional gr - specific formats
replaced HashMap with TreeMap for combined vectors in DrillTestWrapper. java to ensure predictable order of vector elements
added a check for the size of names and values in the loop condition to ensure that only valid elements are processed
refactor WebSocketPolicy to improve code readability to enhance maintainability and facilitate future updates
refactor ` readPhoneStatePermissionGranted ` and ` accessWifiStatePermissionGranted ` methods to use ` this ` keyword to improve code clarity and
added a new method ` resolveMessage ` to the ` StandardMessageResolver ` class to enhance message resolution flexibility based on template and default configurations
updated method signatures to use Class <? extends MethodVisitor > and Class <? extends ClassVisitor > instead of ClassVisitor to improve type safety
added LoggingAuditService class to facilitate logging of user authentication success and failure in the application
added nullability annotations and improved temperature handling in TadoZoneStateAdapter and AirConditioningZoneSettingsBuilder to enhance code robustness and
added a check for abstract class in the BeanDefinitionInjectProcessor to ensure that methods are only processed when they are not abstract
camel - 17441 - camel - http should use java system property http. proxyhost and http. proxyport.
updated MAX _ ENCODING _ VERSION from 1.0. 1 to 1.2. 2 to ensure compatibility with the latest encoding standards
added a static property for jdkSerialFilter in System. java to enable serialization of jdk - specific data
camel - core - optimize the log message to include the pool size.
updated method names from ` forceFinishScroller ( true ) ` to ` forceFinishScroller ( ) ` across multiple files to improve clarity and consistency
updated the ` ensureRealtimeClusterIsSetUp ` method to accept ` rawRealtimeTableConfig ` and applied the environment variable configuration to enhance
added error handling methods to ValidationReport and refactored error reporting in DisallowValidator and RefValidator to improve error reporting clarity and maintain consistency
refactor inline QSB handling in InvariantDeviceProfile. java to improve clarity and maintainability of display options
added URL decoding and exception handling to the createClassPath method to ensure proper URL encoding and prevent potential issues with special characters
updated the ` @ Given ` annotations in ` TransformSteps. java ` to include a wildcard for parameter inputs to improve clarity and usability of
added null checks for retinaProp and improved fillRect logic in PGraphicsJava2D to enhance stability and prevent potential NullPointerExceptions
updated timeout values in FaultToleranceTest to use a configurable timeout of 60 seconds to improve reliability of test execution by allowing more time for
updated package - info. java files for mmm and ppp packages to improve documentation clarity and maintainability
added a line to set the Docker image URL in Environments. java to ensure the Docker image is correctly configured in the environment
[ java ] remove system. gc ( ) call from knowledgeagenttest.
renamed AdditionalAnswers, AnswerFunctionalInterfaces, and InvocationOnMock classes to improve clarity and maintainability of the codebase
replaced ` createHardLink ( ) ` with ` copyFile ( ) ` and added a new method ` copyFile ( File target, File source )
renamed methods ` appendToDescription ( ) ` to ` getDescription ( ) ` across multiple classes to improve clarity and consistency in description formatting
don't try to move mxnet ndarray to the same device.
added a conditional check for Xml. Document before visiting XML elements to ensure XML processing only handles Document types
replaced InstrumentationTestCase with JUnit4 test runner in NotesHelperTest, GeocodeHelperTest, and ReminderHelperTest to improve test reli
added new rule types for GasLimitRule, DifficultyRule, and ParentGasLimitRule in CommonConfig. java to enhance rule
changed access modifier of setupData method from public to private and removed setupData ( ) method from multiple test classes to encapsulate setupData ( )
renamed ` autocommit ` to ` runInTransaction ` in multiple files to clarify that the change should run in a transaction instead of autocommit
[ 3.0 ] tripleserverstream. end ( ) do not close deframer if listener be null.
updated URLs for task failure recovery options in JobManagerOptions and RestartStrategyOptions to ensure correct URL generation for task failure recovery functionality
added a new test method ` testIssue154 ` to ` SelectTest. java ` to ensure that SQL queries with both left outer joins and
refactor Common class to improve code readability to enhance maintainability and facilitate future updates
refactor Launchable to use try - with - resources for better resource management to improve code readability and maintainability by using try - with - resources
[ hotfix ] [ test ] fix typo in streamexecdeduplicate
added logging of error when sending kafka message to a topic to improve error tracking and debugging capabilities
added ` setPersistentPropertyAccessorFactory ` method to ` SimpleElasticsearchPersistentEntity ` and ` SimpleElasticsearchPersistentProperty ` classes to enable
changed the return type of the setCoord method from void to boolean and added an override for the setCoord method in GeoSegment3D to
added logging statements and velocity handling in AskGestureEventsListener. java to improve debugging and traceability of gesture interactions
improve comparison logic in NGramEstimator to include key - based sorting to enhance accuracy of comparison by considering key - based elements
updated import statements to use ` io. cucumber. core. runtime ` instead of ` cucumber. runtime. ScenarioScoped ` to ensure compatibility with
updated the method calls in StatsLogCompatManager to retrieve folder icon properties to improve accuracy in accessing folder icon properties
updated method calls from ` getServerSlogan ( ) ` to ` getServerName ( ) ` in ` ThemeUtils. java ` to improve
added a new test class ` TestSkeletonPredicates ` for testing loop predicates to facilitate testing of loop unroll limits in ir
refactor SelectionHighlighter to use a setter method and improve equals and hashCode methods to enhance code readability and maintainability while ensuring proper equality and hash
added a new class StringResultConverter to handle string conversions based on the default charset to improve flexibility and support for different character encodings in string handling
replaced the @ DisabledIfSystemProperty annotation with the @ Disabled annotation in multiple test classes to ensure tests run reliably on the Apache CI
updated the condition in WaitForSingleObject ( console, 100 ) from `! = 0 ` to `! = 0 ` to correct the condition
added null checks and adjusted buffer limits in BufferUtils. java to ensure proper resource management and prevent potential NullPointerExceptions
updated the expected property value in TestSolrDiscoveryProperties from " data / " to " data " to ensure consistency in property naming for consistency
updated platform detection logic in AutoUpdaterServerProperties. java to ensure compatibility with macOS pre - Catalina
changed variable names from ` lockFile ` to ` lockName ` in ` FSDirectory ` and ` Lock ` classes to improve clarity and accuracy
updated variable names from ` appIcon ` to ` allApps ` for clarity to improve code readability and maintainability by using a more descriptive
updated formatting and formatting in ClientDatagramEndPoint. java for consistency to improve code readability and maintainability
updated the SQL query format from " oreder by STEP _ EXECUTION _ ID " to " order by STEP _ EXECUTION _ ID
modified button retrieval logic in LwjglInput. java to handle unknown buttons more robustly
added approval and reject functionality for claimed tasks in TaskRestRepositoriesIT. java to enhance task management by allowing users to test claimed tasks
replaced logging statements with logging utility statements in multiple classes to improve logging readability and maintainability
updated expiration time handling in SsoAccessTokenProvider and SsoAccessTokenProviderTest classes to improve accuracy of token expiration checks
don't run test on macos by default
added new method implementations for CreateAlarmSuppressionResponse, DeleteAlarmSuppressionResponse, SummarizeAlarmSuppressionHistoryResponse, and O
updated the default close operation check in the JFrame class to ensure proper handling of the default close operation
added a null check for the MediaDatabase connection before executing the ANALYZE SAMPLE _ SIZE ANALYZE statement to prevent potential NullPointerExceptions
replaced metricsContext with solrMetricsContext in SuggestComponent to streamline metrics handling and improve clarity in metrics management
refactor file list footer logic in OCFileListFragment. java to improve clarity and maintainability of the code
changed the default value of HashKnownHosts from " yes " to " no " in multiple classes to disable hash - known hosts by default
refactor SourceVersion class to improve code readability to enhance maintainability and facilitate future updates
added a new file ThreadFactoryTest. java to implement a test for the thread factory functionality in the Jetty framework
updated lock period retrieval logic in DelegateResourceActuator. java and adjusted expiration time calculation in ProposalUtil. java to ensure proper handling of
initialize the ticket model in EditTicketPage. java to ensure the ticket model is properly initialized before use
changed the value of " ENABLE _ PREDICTION _ DISMISS " from false to true to enable the option to dimiss from the predicted
updated super ( ) calls in multiple assertion classes to include the class parameter to ensure proper superclass initialization for various assertion types
added support for a quote menu item in TweetActivity to enhance user experience by allowing users to quote user information
make sure current interrupt be finish, prevent another starting yet
renamed codecPassthroughFormat to decryptOnlyCodecFormat and updated related methods accordingly to improve clarity and maintainability of codec handling logic
added a conditional check for result before closing the consumer in ServerHTTP2StreamEndPoint. java to ensure failure is only reported when the result is
updated error message from " Stiller Modus " to " Silent - Modus " in XSLTErrorResources _ de. java and XSLT
added @ ThreadSafe annotation to CheckpointsCleaner. java to mark CheckpointsCleaner as thread - safe for better resource management
replaced Observable. create ( ) with Observable. subscribe ( ) in MockRestAdapter and RestAdapter classes to simplify subscription handling and improve code readability
refactor error handling for components file creation in ComponentPresetManager. java to improve clarity and maintainability of the code
added HIVE _ RESULTSET _ USE _ UNIQUE _ COLUMN _ NAMES configuration and updated test assertions in TestJdbcDriver and TestJdbcDriver
mary gui client : don't replace input if there be no input
added validation for session validity in Session. java and introduced a test for invalid session retrieval in SessionHandlerTest. java to ensure proper exception handling
deleted the ExceptionHelper class to eliminate unused code to streamline the codebase
updated key pair generation from 256 to 255 in JceX25519Domain. java to ensure compatibility with the latest cryptographic standards
added a codec setting for always postings format in TestBlockPostingsFormat3. java to ensure compatibility with Lucene41 postings format
[ hotfix ] [ checkpoint ] log empty checkpoint range header when no headers be present
added support for RSA / ECB / OAEPPadding algorithm in the OperatorHelper class to enhance security by allowing OAEP padding creation
replace @ Platforms ( DARWIN _ AARCH64. class ) with @ Platforms ( MACOS _ AARCH64
don't log a warning if a source can not be resolve.
updated conditional logic for retrieving transport values in AbstractTest. java to improve clarity and maintainability of the code
updated FileUploadUtils to include exception handling and adjusted return value of JERSEY _ ADMIN _ IS _ PRIMARY to improve error reporting and
replaced ` newDisposableByteBuffer ` with ` newUnsafeByteBuffer ` in multiple files to improve memory management by using ` BufferUtils. newUnsafeByteBuffer
change the USE _ PIPELINE _ DOWNLOADER boolean from false to true to enable pipeline download functionality in the FastSyncChainDownloader
updated SimpleDateFormat to use getRawOffset instead of getRawOffset and added a new test class Bug7130335 for date formatting to improve accuracy of
refactor variables to use final variables for state and row calculations to improve code readability and maintainability
don't return a router if there be no default hypervisors
refactor StringBuffer class to improve performance to enhance efficiency of string manipulation operations
added a uid to the rule object in RuleResource. java to ensure the rule's uid is correctly set for processing
added null check for listener before unsubscribing the registry subscription to prevent potential NullPointerException when listener is not initialized
added a new property ` PRETTY _ PRINT ` to the JoltTransformJSON class to enable pretty print formatting to the output of the
refactored the ACCESS _ TABLE boolean array to a public static final boolean array in InstrumentBranchesPhase. java to improve encapsulation and maintainability
updated error messages in DataSourceInitializer and DataSourceInitializerInvokerTests to improve clarity of startup failure messages
move the doRun method from TcpTransport to XmppTransport and improve error handling in XmppTransport to enhance code readability and maintain
refactor multiple Java classes to improve code organization and readability to enhance maintainability and facilitate future updates
updated AmbariManagementControllerImpl to include ` ClusterVersionEntity ` and ` isUpgradeSuspended ` boolean parameters to enhance the handling of upgrade
updated copyright year in FindsByCssSelector. java to reflect the latest development and maintainability of the code
removed the retrieval of wfields from the writer to streamline the code by eliminating unnecessary field retrieval
added a constructor to OAuthProperties that sets the encryption and signing key sizes to ensure proper configuration of key sizes for OAuth properties
hbase - 2906 add getcolumnfamilies ( ) method to hmaster ; add getcolumnfamilycount ( ) to hmaster
replaced the instantiation of AllowedResourceAliasChecker with a lambda expression to simplify the alias checking process and improve code readability
refactor ObjectInputStream, ObjectOutputStream, ObjectStreamClass, Serializable, and Serializable classes to improve code organization and maintainability
[ java ] implement idlestrategy. reset ( ) in cluster interface.
updated the currentChunkID variable in ChunkedWriter. java to ensure proper incrementing of the currentChunkID during the writing process
added a new abstract class AbstractJobExecutor to encapsulate job execution logic within the batch processing framework
added a new variable ` replayFuture ` and replaced ` return ` with a break statement in ` RecoveryStrategy. java ` to improve control flow
renamed ` hugeStaticBase ` to ` staticBase ` for clarity to improve code readability by using a more descriptive variable name
added a method ` getServiceIds ( ) ` to ` AbstractConsulClient ` to conditionally return empty Publisher objects based on the consul configuration
replaced ` Float. floatToIntBits ( ( float ) Math. random ( ) ) ` with ` SecureRandom ( ). nextInt ( ) `
refactor runtime compilation failure handling in RuntimeCompilationFeature. java to improve clarity of error messages during parsing
replaced currentStart plus ( aggTimeBucketMillis ) with baselineStart plus ( aggTimeBucketMillis ) in TimeOnTimeComparisonHandler. java
added checks for abstract methods in CallsRealMethods. java and created corresponding test cases in CreatingMocksWithConstructorTest. java to ensure correct
refactor checkPackageAccess method to accept a SecurityManager parameter to enhance security by enforcing package access checks
updated ContextPathPluginTest to extend AbstractPluginDataInit and setupErrorConfiguration methods to improve test structure and ensure proper error handling during plugin initialization
refactor ContributionListPanel to use a model instead of a dtm instance to improve code clarity and maintainability by using a more des
added a new constant REQUEST _ HAS _ TIS and updated related logic to use it to improve code readability and maintainability by centralizing the
refactor ConnectAction to improve readability and encapsulate connection handling to enhance code maintainability and facilitate access to database connections
changed the type of ` showRulesResult ` from ` String ` to ` BuildTarget ` across multiple files to align the code with the new target
added new classes ` ArrayHelper `, ` Asserts `, ` Comparables `, ` Constructor `, ` NativeRegExp `, and
added handling for HOME and END cases in the Less. java file to improve user experience by properly managing display lines
removed synchronization for retrieving connected plots to streamline the code by eliminating unnecessary synchronization
refactor intent handling in Utilities. java to streamline package installation checks to improve code clarity and maintainability by consolidating intent logic
changed the visibility of the constructor of Roster from public to package - private to allow access to the constructor from other packages
added basic certificate extensions to the certificate generator to ensure compliance with the latest certificate requirements
added a new test method ` testFixedNestedTransform ` to ` TextVisualRegressionTest. java ` to temporarily skip failing due to using the
removed redundant assignment of ` Integer. MAX _ VALUE ` in ` TrieDateField ` and ` TrieField ` to streamline code
added TaskbarStateHandler to BaseQuickstepLauncher and removed TaskbarStateHandler from BaseQuickstepLauncher to streamline taskbar state handling
added ArrayLength class to handle zero - length array types to ensure proper error handling and logging for zero - length arrays
added logging for Hazelcast process destruction in HzStartIT. java to improve debugging and monitoring of Hazelcast process destruction
updated ApplicationSettingsService to use @ PostConstruct and refactored save method to use @ ApplicationScoped to ensure proper initialization of settings and improve
change assertion from ` value > = 0 ` to ` value > 0 ` to ensure that the value is within valid range
updated thread name field type from " [ C " to " Ljava / lang / String ; " to ensure correct data type is used for thread
updated the default seed value from System. currentTimeMillis ( ) to 42 in Lucene90HnswGraphBuilder and HnswGraphBuilder
added stroke object and font handling in PGraphicsJava2D. java to improve stability and maintainability of stroke operations
refactor expanded expression to use a dedicated method ` expandDynamicStar ` to improve code readability and maintainability by encapsulating the logic within a dedicated
added a new method ` findInterestingChildren ( ) ` to the ` Comment2000 ` class to facilitate handling of nested structures in
added import for PMS message and set a status code for PMS 141 to enhance user experience by providing a clear indication of PMS
updated modifier retrieval methods to use ` InputEvent. getModifiersEx ( ) ` instead of ` InputEvent. getButton1 ( ) ` and ` InputEvent.
updated cycles from CYCLES _ 6 to CYCLES _ 3 in AMD64CountLeadingZerosNode and AMD64CountTrailing
added null check for content transfer encoding in EntityParser and created a test for disposition notification in AS2ClientManagerIT to ensure proper handling of
refactor Locale class to improve code readability to enhance maintainability and facilitate future updates
added a button to clear log messages in the ErrorConsoleController and LogMessages classes to improve user experience by allowing users to clear log messages
set mRecentsAnimationController to null to ensure proper initialization of the animation controller
updated caption handling in Debug. java and CaptionMap. java to use LocaleHolder instead of ConsolePlayer. getConsole ( ) to improve
added connection pooling functionality and adjusted execution count in multiple test classes to enhance resource management and improve test reliability
simonstewart : adding opera support to the default driver session.
added error handling for file download failures in ManageJournalsPanel. java to improve user experience by providing feedback on download failures
added new LIFX product features in LifxProduct. java to enhance the product's capabilities for improved user experience
added handling for asynchronous operations in OverseerCollectionProcessor and updated related parameters in CollectionsHandler and CollectionsAPIAsyncDistributedZkTest to improve
updated PGSQL _ PK _ BYTES _ LIMIT and PGSQL _ PK _ SUFFIX in PostgresDatabase. java and PostgresDatabaseTest. java
updated LogPanel instantiation to use a local variable for refid instead of a hardcoded value to improve code readability and maintainability by using a consistent method
change the unit of the bone's parent tail from UNIT _ Y to UNIT _ XYZ to ensure that the bone's parent tail is
added a new method ` browserDestroy ` to the ` AndroidImplementation ` class to handle browser destruction to improve resource management and ensure proper
added waitForActiveCollection call in AutoScalingHandlerTest. java to wait for active collection to ensure test stability by waiting for active test violations
refactor screen attribute handling in ScreenTerminal. java to improve clarity and maintainability of the code
added controller state checks in SoftResetAction. java to ensure proper handling of controller states
disable on - disc stream cache in ForgeHooksClient. java to optimize texture pack loading performance
added logic to retrieve the root folder for DNA resources in Request. java and RequestV2. java to ensure the correct parent folder is
networkofferingVO : fix typo in return statement.
replaced FileOutputStream with a custom close method that deletes the temporary file to ensure proper resource management and prevent potential memory leaks
added error handling for Forbidden responses in StandardGitHubRepository. java to improve robustness by gracefully handling Forbidden exceptions
log4j2 - 1349 add a getoriginal ( ) method to messagefactory2adapter that return the original messagefactory.
added @ SuppressWarnings ( " BanSerializableRead " ) annotations to DataSizeTest, DurationTest, and SizeTest classes to suppress warnings related
updated regex pattern from " minor " to " minor2 " to " minor3 " to align regex with updated requirements
added delay settings for tooltip components in ExtractionModelFrame. java to improve user experience by allowing more time for tooltips
refactor ProjectCommand to use passed in target graph and targets instead of arguments to improve clarity and maintainability of target processing logic
added timezone handling and assertion in TimeTest. java to ensure correct formatting of 2445 times in the application
refactor MediaSessionConnector to improve code readability to enhance maintainability and facilitate future updates
replace JSSEFactory with SSL implementation in Http11NioProcessor. java to ensure compatibility with the latest SSL protocol implementation
updated the accuracy display format in GpsLoggingService to ensure accurate location information is displayed accurately
added support for future handling in BinanceExchange and BinanceAccountService to enable or disable futures functionality based on exchange settings
renamed ` accounts ` and ` instructorCoursesTable ` to ` instructorAccountsTable ` in ` AdminAccountManagementHelper ` and ` AdminAccount
set the acceptor queue size to maxWorkerThreads in ThriftHttpCLIService. java to improve resource management by allowing worker threads to be configured
replaced direct calls to ` watchServiceEnabled ` with a constant ` PROPERTY _ DISABLE _ WATCHER ` to improve code readability and maintain
added a condition to return true for SSL connections in JmsFactory to ensure proper handling of SSL connections in the JmsFactory
updated error handling in ` DrillSqlWorker ` and ` TestWindowFunctions ` to use ` UserException. validationError ` instead of ` parse
updated duration calculation in GCInspector. java to ensure duration is non - negative for a really fast collection
refactor comment handling in NodeWithJavadoc and add a test for Javadoc presence in NodeWithJavadocTest to improve code clarity and ensure correct
replaced the ` getUnsafe ` method with a new method ` readReservedMemory ` in ` ReserveMemory. java ` to improve code readability
added calls to ` ungroupedAggregateRegionObserver. checkForRegionClosingOrSplitting ( ) ` in ` IndexRebuildRegionScanner. java
changed access modifier of procId from private to protected to allow subclassing of the procId variable
( chore ) camel - cxf : use object instead of reflection
refactor YamlChangeLogSerializer to use a map for storing database change sets to improve clarity and maintainability of the change set serialization process
updated print statements in SchemaPrinter. java for better readability to improve code clarity and maintainability
don't regenerate all roads if they're not in plot.
updated context in HomeFragment to use getActivity ( ) instead of getContext ( ) to ensure compatibility with the current activity context
added @ GenericGenerator ( name = " native ", strategy = " native " ) annotation to multiple classes to enable the generation of native entities
removed country parameter from getSystemTimeZoneID method to simplify method signature by eliminating unnecessary country parameter
added position and remaining parameters to the write method in BZip2Codec and initialized ByteBuffer in TestBZip2Codec to ensure proper data handling
make sure we start the geogebra logger in the web application
added a constant VALUE _ TYPE _ EMPTY and modified the create method in Value. java to use it to improve code readability and maintainability by
updated equality checks for group comparisons in GroupManager. java to improve code readability and maintainability by using equals method
refactor Liquibase and LiquibaseDropAll classes to improve code organization and maintainability
refactor SimplexNoise class to improve code readability and maintainability
added a static method ` newInstanceExact ` to ` TargetGraphFactory ` for creating ` TargetGraph ` instances to facilitate the creation of
rename methods in ColumnFamilyStore and ColumnFamilyStoreMBean for consistency to improve clarity and maintainability of the codebase
added ArtifactVersion type adapter and updated Gson registration in MetadataCollection. java to enable serialization and deserialization of ArtifactVersion objects
refactor NativeArray to handle previous and current states more efficiently to improve efficiency and maintainability of the code
replaced storageManager. saveNewFile ( files [ i ] ) with a local file retrieval approach to improve file management by ensuring the correct
added a new test class UTF8ReaderBug for XML parsing to ensure proper handling of supplementary characters in XML parsing
added unit test base on user forum issue
updated subscription streams from " ethbtc @ depth " to " ethbtc @ depth20 " in BinanceIntegration and BinanceUs
added a resetAllocation method in Wrapper. java and defined initialAllocation and maxAllocation variables in SimpleParallelizer. java to enable resetting of allocation
removed import of AssertTree from AmbariManagementControllerTest. java to eliminate unused dependencies
added synchronization around properties loading in Agent. java and created a new test class AgentCMETest. java to ensure thread safety when accessing system
refactor ModelUtils to improve code structure to enhance maintainability and readability of the code
refactor AbstractDoubleArrayAssert for improved readability to enhance maintainability and facilitate future updates
updated width and height calculations in Legend. java to ensure proper handling of labels based on their length
added test methods for delay and abort handling in both ` CodeFirstSpringmvcIntf ` and ` CodeFirstSpringmvcIT ` to improve
replaced the method ` get ` with ` getValues ` for retrieving values in ` MoreLikeThis. java ` to improve clarity and maintainability of
replaced the method of obtaining the root target source path with a new method ` BuildTargetSourcePath ` to improve code clarity and maintainability by using
added a check for the botania versioning state in CommandDownloadLatest. java to ensure that the botania versioning functionality is
replaced Collection with List for filePaths in MediaFolder. java and added numberOfFiles variable in MediaProvider. java and FolderSyncAdapter. java
removed the " - b " argument from the command line in AidlStep. java and updated the format in GenAidlTest. java
added new test classes for handling edge comparisons and logging in ObligationAnalysis to improve test coverage and facilitate debugging of edge comparisons
added a TODO comment to the FakeHttpLayer class to indicate that the test is planned for future development
replaced handleError calls with revokeLeadership calls in EmbeddedLeaderService to ensure proper handling of error scenarios during leader election
3. x : fix compositediscoveryclient. reduce ( ) to return a single list instead of flowable [ hz - 2401 ]
replaced calls to ` applySystemConfiguration ` with ` applyQualifiers ` across multiple files to improve clarity and consistency in configuration handling
[ hotfix ] [ config ] add description about job computation recovers from task failure
replaced the method ` updateNoWidgetsView ` with ` updateRecyclerViewVisibility ` for better clarity to improve code readability and maintainability by using a
added error handling for Woodstox output factory in XmlUtil. java and updated test assertions in MultiVersionXmlParserTest. java to
refactor AuditAliasCommandIntegrationTest to use setUp method for project workspace setup to improve test setup consistency and maintainability
removed log statements related to header view height in WidgetsFullSheet and WidgetsRecommendationTableLayout to streamline logging for recommended widgets
( chore ) camel - cxf : disable test that be not applicable in this scenario
added error handling for periodic updates in CachedStore. java to improve stability by logging exceptions during periodic updates
updated ` ChainingAuditPrincipalIdProvider ` and ` CasCoreAuditConfiguration ` to use ` @ RequiredArgsConstructor ` and refact
added a method to check default background color fills in HSSFCellStyle. java and refactored color handling in HSSFFont
refactor ZonedDateTimeFormatterBenchmark for improved readability to enhance maintainability and facilitate future updates
added a new method ` shouldBufferUpdate ` to the ` DistributedUpdateProcessor ` class and created a corresponding test class ` DistributedUpdateProcessorTest
added a null check for stageNr in SimulationListHandler to ensure proper handling of null values during the simulation process
updated the getItem method to include a boolean parameter for allowed blocks to enhance flexibility in handling different item configurations
[ hotfix ] [ runtime ] fix typo in extendedmastersecretextension
changed variable declaration from non - final to final in AndroidInput. java to ensure that the processor cannot be reassigned after initialization
added onWriteFailed listener for Reached end of stream in WritableKeyProcessor to ensure proper handling of write failures during stream processing
added " CUBE " to MySQLDatabase. java to support new database operations
added a try - catch block around the rm call in TestReplicationHandler. java to handle potential IOException during resource cleanup
renamed ` ExperimentalRobolectricTestRunner ` to ` MultiApiRobolectricTestRunner ` across multiple test classes to improve clarity and consistency in
refactor DefaultOkHttpClientFactoryTest to use getter methods instead of reflection to improve code readability and maintainability by centralizing field access
refactor BatchUpdateException, PreparedStatement, and Statement classes to improve code organization and maintainability
added a null check for the operating system in RawMessageContentRedirectInterceptor to prevent potential NullPointerExceptions when the operating system is not set
ggb - 196 fix for bug in algebravieww. getparentsplitpane ( )
updated jailerMain method to include an additional boolean parameter from Cli to allow users to specify either a data model or an extraction model
refactor HttpRequest class to improve code readability to enhance maintainability and facilitate future updates
added functionality to update the pull unread preference in TalonPullNotificationService to enable users to manage unread notifications effectively
updated null value handling logic in IsNullNode. java to improve clarity and correctness of null value processing
updated graphics step and memory calculations in Box2DTest. java and refactored camera initialization in OrthographicCamera. java to improve
refactor RecyclerView initialization in ViewPostDetailFragment. java to improve code readability and maintainability
changed log level from trace to warn in CLIService. java to improve logging granularity for background operations
added a print statement to display method instance flags in JimpleBodyBuilder to improve debugging capabilities by providing visibility into method instance attributes
ggb - 1052 : run pointer callback on ie10 +
updated the ` getNotificationUsers ` method to accept a device ID as a parameter to enhance flexibility in retrieving notification users based on their device type
updated the srtm base URL from droppr. org to SRT - ZIP / SRTM _ V41 / SRTM
removed properties and action listeners for approve and filename in MotifFileChooserUI and added a new test class for bug6520101 to improve
changed the return type of the handle method from void to boolean in multiple UI components to enable the method to return a boolean indicating success or failure
refactor BuildRuleResolver methods for improved clarity and consistency to enhance readability and maintainability of rule resolution logic
added visibility logic for transport spinner based on makingShortcut to improve user experience by hiding the transport spinner when making a shortcut
added null checks for attributes _ field in lintEnv. info and created new classes T7043371. java and T7073477.
refactor backPressed method to return a boolean value across multiple fragments to improve clarity and control over button navigation in the UI
added support for long view index configuration in QueryServices and MetaDataClient to enable or disable long view indices based on configuration settings
updated string format from " V " to " v " to ensure consistency in output format
replaced direct path retrieval with StringUtils's cleanPath method to improve code readability and maintainability by utilizing StringUtils for path validation
removed the ` columnPosition ` parameter from the ` diffDropColumn ` method in ` MTable. java ` to simplify the method signature and
updated IndexWriter configuration to use TEST _ VERSION _ CURRENT instead of LUCENE _ 40 to ensure compatibility with the current version of IndexWriter
hbase - 2496 add option to disable column family check in importtsv
[ java ] : make log subscription id a long rather than a string.
replaced startActivity ( intent ) with startActivitySafely ( intent, " onClickVoiceButton " ) and added voice button proxy visibility to improve user
added a check to return early if the first element in the list matches the text value " i " to ensure that only valid JSON values are
refactor Procedure class to improve code readability to enhance maintainability and facilitate future updates
added Locale. getDefault ( ) and ClassLoader. getSystemClassLoader ( ) to the applyResourceBundle method calls to ensure consistent resource loading across different locales
added a new ` NormalizeArrayCreationsKotlin ` class to the ` Backend ` class and created a corresponding ` NormalizeArrayCreationsK
added checks for count availability in PerSegmentSingleValuedFaceting. java to ensure proper handling of missing counts during faceting operations
use firstnonnull ( ) to avoid npe
added a new test class ` OSGiTest ` and modified imports in ` Mmm module - info. java ` and ` OSGiTest. java
refactor service enabling logic into a separate method for clarity to improve readability and maintainability of the code
hbase - 2251 clearbufferonfail should be set to false before writeasyncbuffer
fix : cast ctelement to ctespecifier in prettyprinter ( # 1751 )
added a method ` hasUserData ( ) ` to ` SimpleFeatureImpl ` and created a test for it in ` SimpleFeatureImplTest `
removed ` throws HiveException ` from method signatures in ` DDLPlanUtils ` and ` ExplainTask ` to simplify exception handling by elim
refactor RelyingPartyRegistration class to improve code readability and maintainability
added a method to enable logging in JavaCompiler. java to enable logging functionality for the Java compiler
added a new class ` InJavaSourceSet ` to handle Java source sets to facilitate the inclusion of Java source markers in the compilation
added a command to check the existence of a fits file in TestGDALParser. java to ensure that the application can locate the fits file
added a new method ` createGetter ( Object, String attribute ) ` to the ` ReflectionHelper ` class to facilitate the creation of
removed the useExternalStorage condition from the conditional check to simplify the condition for better readability and maintainability
added a constant INDEXER _ NO _ COMMIT to IndexerMapReduce and IndexerOutputFormat, and updated references in ObjectCache and Nut
server : fix npe when take snapshotid and disk offeringid in createvolume
added a null check for content assignment in ToHtml. java and updated assertions in BaseTestCellComment. java to ensure content is not null
added null checks for ` amountToAdd ` and ` amountToSubtract ` in ` LocalDate `, ` LocalDateTime `, and ` ZonedDateTime `
added a new file ` Issue382. java ` to handle specific error types in requests to implement and test the handling of specific error scenarios
replaced the static signum method with a static static signum utility method in PositionUtils. java to simplify the code and improve readability by using a standard
added logic to hide text in AttachmentAdapter to improve user experience by preventing unnecessary text display
fix : getimportkindfor ( ctreference ) should return ctimportkind for field and method
replaced the method ` : getProfile ` with a lambda expression to improve readability and maintainability of the code
added a new ` LiquidBlock ` class and modified ` FlowingFluid ` and ` List < FluidState > ` fields
added exception handling in AMQ2902Test. java to ensure proper logging of exceptions during test execution
updated time zone from PST to America / Los _ Angeles in LocaleProviders. java to ensure compatibility with the latest time zone
renamed variable ` existingObservation ` to ` distinctObservation ` for clarity to improve code readability and maintainability by using a more descriptive variable name
updated TEST _ NIGHTLY, TEST _ WEEKLY, TEST _ AWAITSFIX, and TEST _ BADAPPLES to enable
replaced ` createLogger ( ) ` with ` getOrCreateLogger ( ) ` and updated logger initialization logic to improve logger management and ensure logger is created
[ graal ] deny access to class in graalcontext
refactor image manipulation methods in PGraphics2. java for improved clarity and functionality to enhance code readability and maintainability by using WritableRaster for pixel
updated the parameters for verifying transactional properties in HiveAbstractReader. java to ensure that transactional properties are correctly validated for both partitioned and non -
refactor overlay handling logic in Workspace. java to improve clarity and maintainability of overlay sroll logic
added UnmodifiableBatchBuilderImpl and UnmodifiableBatchBuilderInitiator classes to implement batch building capabilities in Hibernate
updated shouldNotReachHere method to throw AnalysisError. shouldNotReachHereUnexpectedInput instead of AnalysisError. shouldNotReachHere ( )
added a new test class ` MockWithStaticStateDemo ` that verifies the state of a class to ensure that mocking functionality works correctly when
added a new test method ` testUnionWithBracketsAndOrderBy ` to ` SelectTest. java ` to ensure the SQL parser correctly handles
refactor SecurityUtil to handle null ugi in the doAs ( action ) method to improve robustness by preventing potential NullPointerExceptions
updated error handling in OpenALMusic. java to use a variable for error code to improve code readability and maintainability by avoiding repeated calls to
( chore ) camel - endpoint : migrate reslovestringparameter to resolveparameter
updated the handling of DECIMAL data types in RexNodeConverter. java to improve precision and scale management for DECIMAL data types
replaced calls to ` getVendorProperties ( ) ` and ` getDeviceProperties ( ) ` with ` Optional. ofNullable ( ) ` to handle
updated the timestamp in the updateAccount method from a string to a long to ensure accurate timestamp representation for account updates
replace ` AxialStage ` with ` RocketComponent ` in ` DesignPanel ` and update selection logic in ` BasicFrame ` to improve
added getter and setter methods for long running time in Args. java to enable dynamic configuration of long running time in the application
added a new class ` Ideas _ 2012 _ 05 _ 21 ` and modified ` PriorityAdjustment ` in ` RefComparisonWarningProperty ` to
updated import statements and modified ServiceLoader usage in multiple classes to improve code clarity and maintainability by using updated ServiceLoader utilities
gml3 encode : fix xssDecimalBinding to return string instead of decimal. tostring ( )
updated assertions in TestRestClientRequestImpl to remove Expectations to simplify test assertions for better readability and maintainability
added a condition to check if the comparison database matches the reference database before proceeding to ensure that unique constraint conflicts are handled correctly based on the
removed proguard and keystore configurations from IjProjectTemplateDataPreparer. java to streamline the code by eliminating unnecessary complexity
updated assertions in DuplicateCookieTest and SessionRenewTest to use await ( ). atMost ( 5, TimeUnit. SECONDS ) instead of assertEquals
added user arguments to the ImmutableMap in ChromeTraceBuildListener and ChromeTraceBuildListenerTest to enhance traceability by providing additional context about the daemon
svm : use moduleuitous. getresourcebundle instead of localizationsupport. getbundle
change log message from " match limit " to " match order " in HepPlanner. java to clarify the purpose of the log message regarding
added a new file TheRockMetaDataDemo. java to demonstrate exchange metadata retrieval in TheRockExchange
renamed ` FloatingDecimal ` to ` strictfp ` and added a strictness test for ` FloatingDecimal ` and ` FormattedFloatingDecimal `
removed unparseIdentifier from columnNamesBuilder to simplify the construction of column names by eliminating unnecessary parsing
added a test method ` replaceField ` to ` JavaTemplateContextFreeTest ` and modified variable handling in ` BlockStatementTemplateGenerator ` to
added a check for non - synthetic static classes in InstantiateStaticClass. java and added a test method in Bug1282. java
removed the call to projectFilesystem. getPathForRelativePath ( basePath ) from WorkspaceAndProjectGenerator. java to simplify the code by eliminating unnecessary
added functionality to handle pending rescue messages in IkStepDefinition. java to improve error handling and maintainability of the code
updated equals methods to use getClass ( ). hashCode ( ) for various data types to ensure consistent hashCode implementation across different data types
added a method to retrieve the SyncLevel by a string and updated the SyncLevel enum to use this method to improve code clarity and maintainability
fix flakyness of controlcommandstest
added a condition to check if the state is both CONSTRUCTION and RECOVERY in RecoveryStrategy. java to ensure proper handling of
updated the creation of images in opencv _ core. java to ensure correct CV _ MAKETYPE is used for image processing
added ` sdkPath ` to ` AppleBundle `, ` SwiftStdlibStep `, and updated ` ProcessExecutorParams ` to use `
[ hotfix ] [ runtime ] remove unused lock from transientblobcleanuptask
cloudstack - 709 : fix typo in log message.
refactor PasswordEncoder and StandardPasswordEncoder classes to improve code readability and maintainability
added conversion logic for row types in HiveSortLimitPullUpConstantsRule and HiveUnionPullUpConstantsRule to ensure correct data type is used
refactor BetterBlockPos class to improve readability to enhance maintainability and facilitate future updates
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4659
updated version handling to use a new method for nightly builds to improve code clarity and maintainability by centralizing nightly build status
added support for Oracle database statements in LoggingExecutor and JdbcExecutor to ensure proper handling of trailing and duplicated entries in SQL statements
added a new boolean constant ` UNKNOWN _ VALUES _ ARE _ NSP ` in ` IsNullValueAnalysisFeatures. java ` to enable
updated the HTTP request to use a dynamic port instead of a fixed port to improve flexibility by allowing different port configurations
updated BLOB _ SIZE and PLAY _ MARGIN, SLIDER _ MARGIN, and elapsed time calculations in DrawAudio. java to improve
added a method to the DuoSecurityMultifactorProviderBypassConfiguration class to enable the use of the DuoSecurity principal
updated method signatures and variable names in MaxRectsPacker. java to improve clarity and maintainability of the code
[ drools - 7 ] fix checkstyle issue in drools - module - kie module
added methods to set and get the help page in PMS. java and refactored HelpTab. java and LooksFrame. java to
added GeocodeProviderFactory and Constants interface to facilitate geocoding functionality for Omni Notes beta
updated import statements for CharArraySet in LuceneAnalyzerUtil and LuceneTokenizer to ensure compatibility with the latest Lucene library and improve code maintainability
added unit tests for ` ExpectedException ` and ` ResourceManagerException ` in ` OptionTest ` and ` ResourceManagerImplTest ` classes to improve
updated GATEWAY _ SERVER _ ID from " GATEWAY _ SERVER " to Protocol. GATEWAY _ SERVER _ ID and added
updated conditional logic in SegmentsInfoRequestHandler. java and added new fields in CollectionsAPISolrJTest. java to improve code clarity and
updated the calculation of numPredictiveAppCols based on device type to ensure correct number of app columns based on device type
added a method ` hasScalarSubqueryInput ` to ` JoinUtils ` and refactored related logic in ` DrillJoinRelBase `
added a new abstract block class BlockBuildCraft for managing block removal events to facilitate the removal of an item in the block container
updated layout parameters for targets in DeviceProfile. java to ensure proper gravity and layout dimensions for UI elements
replaced the method ` run ( ) ` with ` start ( ) ` in ` YahooSession. java ` to ensure proper initialization of the
added a null check for the client before shutting down the metastore client to prevent potential NullPointerExceptions when the client is not initialized
updated getDisplayScript method to use Category. DISPLAY instead of Locale. US to ensure consistent display script behavior across different locales
updated import statements to use constants from ZkStateReader instead of BASE _ URL _ PROP to improve code readability and maintainability by using consistent
replaced ThreadLocalRandom with Random for random boolean generation to improve performance and maintainability of the code
added a conditional check for ` launcherIsReady ( ) ` before backuping favorites and screens to ensure backup functionality only occurs when the launcher
updated error messages in Cell. java for clarity to improve readability and maintainability of the code
added a new test class ResiliencePooledRouteOkTest for testing resilience functionality to ensure reliable behavior of PooledRoute with time
renamed ` getBodySpace ` to ` mBarSpace ` across multiple classes to improve clarity by using a more descriptive variable name
refactor ShadowProcess class to improve code readability to enhance maintainability and facilitate future updates
use hamcrest assertion instead of junit in filemessagelistest
added logging statements to Grasscutter for various logger levels to improve debugging capabilities and facilitate troubleshooting
changed the visibility of highlightCnstScrRngQuery from private to static to allow access to the highlightCnstScrRng
updated conditions for workspace state in Launcher. java and added a method to return state in Workspace. java to ensure proper handling of workspace states and
refactor multiple assertion classes for consistency and clarity to improve maintainability and readability of the codebase
updated conditional checks for template caching in SnippetTemplate. java to ensure that new templates are only notified when cacheable is enabled
updated scope constants and introduced a new coreScopeSession map to enhance clarity and maintainability of scope management in the data import process
updated the CREATE TABLE statement to include a primary key constraint to ensure the table is created with a primary key for testing purposes
rename ` -- permissions - config - path ` to ` permissions - config - file ` in ` PantheonCommand ` and ` Panthe
refactor session invalidation logic in HttpSessionContextIntegrationFilter to improve clarity and maintainability of session management logic
added a new file ` TestIfWithDeadRegion. java ` that includes a method to retrieve a string from a specified string to facil
update english _ ud to english _ USD in DependencyParserITest and DependencyParser to align with new naming conventions and improve clarity
refactor SnowflakeIdGeneratorTest to enable HighResolutionTimer for concurrent access testing to improve test reliability and ensure HighResolutionTimer is
added a boolean variable ` static _ ui ` and conditional logic in ` MainFragment ` to conditionally show a toast bar based on user settings to
removed the ` drop ` method from the ` WindowsSecurity ` class and added a try - finally block to ensure proper resource management and prevent potential
replaced ` setParameter ` with ` setParameterIfAbsent ` in ` SamlRedirectLogoutHandler ` and updated parameter handling in ` WhitelistLogoutHandler `
updated error handling in JOptionPane messages across multiple Java files to improve user experience by providing more descriptive error messages
tika - 3625 -- add mime type for spreadsheetml and ooxml file
refactor glue loading and logging in multiple classes to improve clarity and maintainability of the codebase
camel - eip - documentation - enricher : fix xml output.
add a method to remove versions when an endpoint is removed in MigrationCoordinator and StorageService to improve the management of migration processes by allowing users to
added debug logging statements and refactored audio notification and playback device handling in DeviceConfiguration. java to improve debugging capabilities and ensure correct handling of
added support for WebSocket configuration in ShenyuConfig. java and updated WebSocket plugin configuration in WebSocketPluginConfiguration. java to enhance WebSocket frame
implement IInvokedMethodListener and manage result queues in CacheValidationListener to improve test lifecycle management and ensure proper cleanup of invoked methods
added a check to trim the content length before adding it to the document to ensure that the content length is trimmed only when it is not empty
solve termination in defaultsolverjob. solve ( )
added exception handling for timeseries creation in MManager. java to prevent concurrent modification issues when timeseries creation occurs
added a method ` check ( boolean result ) ` to the ` Authz ` class to provide a way to check if a boolean value is
changed access modifiers of several methods in Shadow classes from public to protected to allow subclasses to access these methods while maintaining encapsulation
cloudstack - 7092 : fix bug in management server
updated the handling of no value in HttpParser and removed specific test cases to improve test reliability and ensure correct parsing behavior
refactored thread initialization methods in J9VMInternals and Thread classes to improve code clarity and maintainability by consolidating initialization logic
added a method to create a directory in ShadowEnvironment and created an EnvironmentTest class for external storage state testing to enhance functionality by allowing external storage
[ jbrules - 3636 ] add a test for mvel type coercion
refactor log file handling and improve readability in LoggingConfig. java and Dbg. java to enhance code clarity and maintainability
updated logging message to include the exception message to improve error reporting by providing more context about the exception
added logic to extract the number from the " tel : " string if it starts with " tel : " to ensure that the number starts with
updated visibility logic for shared file icons in FileListListAdapter to ensure proper visibility of shared files based on file status
removed deprecated HIVEOPTSORTDYNAMICPARTITION configuration in HiveConf. java and updated TestTxnCommands3. java to use isSdp
refactor configuration overlay handling in ExecuteStatementOperation and Operation classes to improve clarity and maintainability of configuration management
refactor BTCMarketsStreamingAdapters and BTCMarketsStreamingService to use Arrays. asList instead of Lists. newArrayList and Sets.
[ geot - 4892 ] fix OGRdatastoretest to compare name and type
removed the ` onErrorInStep ` method from ` StepListenerSupport ` to streamline error handling by returning a null exit status
updated wallet implementation to improve transaction handling and security
camel - 7999 fixed the charset issue of camel - netty - http
testnonblockingapi : use log instead of system. out. println
added a check to return false if the row index does not match the size of the connectionList to ensure that the application does not exceed the
added a new file MethodWithSameNameAsEnclosingClass. java to handle methods with the same name as enclosing classes to improve error reporting
added support for MXBean registration in ManagementFactory and created a new ExtendedPlatformComponent for managing MXBeans to improve management capabilities and facilitate
added SQL string replacement for single quotes in BasicQueryTest. java to ensure proper escaping of single quotes in SQL queries
updated Bleutrade test files to include " org / knowm / xchange / bleutrade / dto / " to
refactor TextEscapeUtils for improved readability to enhance maintainability and facilitate future updates
added a filter parameter to AbstractSpatialFieldType and updated the return statement in TestSolr4Spatial to enhance query flexibility by allowing customizable filtering behavior
added progress display for auto - email sending in GpsLoggingService and handled it in AutoEmailHelper to improve user experience by providing feedback during
changed the type of ` inlinks ` from ` ArrayList ` to ` HashSet ` and updated related methods to improve performance and readability of the code
added a ` stopScan ( ) ` method to the ` TradfriDiscoveryService ` class to ensure that older results are removed consistently
changed the filter method from ` isClientFilterEnabled ` to ` isClientFilterEnabled ` and modified its behavior in ` TestFilterHooks
added an ` Abandoned ` status to multiple ticket statuses in ` TicketModel ` and ` TicketsPage ` to indicate whether a
removed the columnAliasPrefix initialization from multiple platform classes to streamline the code by eliminating unnecessary null assignments
updated LlapRowRecordReader to use BytesWritable instead of Text to improve data handling capabilities in Llap data processing
add a new class NonNativeJVMDetector that checks if the JVM ARCH is non - native to ensure that non - native JVMs are
refactor conditional checks in PdfCopy. java for better readability to improve clarity and maintainability of the code
added DAEMON option to RESET _ ALARM and integrated it into TerminalClient to enable daemon functionality in the application
added a new ` FlushIndexTask ` class to handle index flushing to facilitate efficient flushing of index buffers during benchmarking
optimize memtable flush path by use estimated size instead of memsize
added seasons to the expected output conditions in MediaLibraryFolder. java to ensure proper handling of seasoned media output
added a new file ` LocalSocketAddress. java ` that implements a network interface that checks for IPv6 addresses to ensure that the local address is
updated grid size coordinates from ( 2, 3 ) to ( 4, 3 ) in GridSizeMigrationTask. java to correct the grid size
updated method names from ` getName ( ) ` to ` getName ( ) ` and ` getFields ( ) ` in ` SerializerPojo. java `
added support for read - only operations in the Context class to improve transaction management and error handling in read - only contexts
refactor LookAndFeelCommand to improve code readability to enhance maintainability and facilitate future updates
fix indexoutofboundsexception in blockboxing. getlastrunend ( )
added imports for EOFException and EofException in GracefulStopTest to ensure proper exception handling in tests
refactor NetJavaImpl to simplify connection handling and remove operations to improve code readability and maintainability by reducing locking overhead
[ hotfix ] [ network ] fix typo in networkparameters
removed account asset optimization setting in DynamicPropertiesStore to streamline asset management by eliminating unnecessary account asset optimization
added J9 _ GC _ POLICY _ NOGC constant to enable the toggle of the J9 GC policy
added validation for contract protobuf in TransactionCapsule. java to ensure proper error handling for invalid contract protobufs
deleted the ExceptionTypeChecking. java file to remove obsolete rules related to exception type checking
updated resource loading and error logging in HelpContent. java to improve localization handling and provide clearer error messages
added a new ` ProcessorInfo ` class to manage CPU processors to enable better management of processor characteristics in the application
added a stylesheet option to the PrintingBugReporter class to allow users to specify a default stylesheet for HTML output
migrate logbackloggingsystem from optional to non - nullable
updated handling of service component recovery events in HostLevelParamsHolder. java and refactored related methods in ServiceComponentRecoveryChangedEvent. java to
added conditional on property for tag propagation in SleuthTagPropagationAutoConfiguration and SleuthTagPropagationAutoConfigurationTests to ensure proper handling
refactor rustDepType assignment logic to use a switch statement for both SHARED and STATIC types to improve code readability and maintainability by consolidating
updated oauth2LoginLinks method to accept a MultiValueMap < String, String > queryParams instead of a single String to enhance error handling by incor
hbase - 2658 hfileinputstream. seekfirstkey ( ) don't seek the first kv in the file ( #
added deprecation annotations and updated generation timing logic in multiple classes to improve code clarity and maintainability by using a unified timing method
add a parameterized test for layer normalization in TestLayerOpValidation. java to ensure correct behavior of layer normalization in different scenarios
refactor showShareFile method calls to use getFileOperationsHelper ( ) instead of FileDisplayActivity to improve code modularity and maintainability by central
added a new test class LiquibaseUpdateMojoExecutionTest to validate the execution of Liquibase configuration files
changed the method to convert the proxy type to uppercase to ensure consistency in proxy type handling
added a new mod _ MinecraftForge class that utilizes MinecraftForge's getDungeonLootTries method to facilitate
refactor JdbcDatabaseSnapshot to differentiate between tables and columns fetched to improve clarity and maintainability of data retrieval logic
added a container with a border and a label to the CSSBorderTest to enhance the visual appearance of the border in the UI
added ` @ ConditionalOnMissingBean ` annotation to ` RetryAutoConfiguration ` and ` RetryLoadBalancerInterceptor ` classes, and created ` Retryable
updated superclass constructor parameters from FILL _ PARENT to MATCH _ PARENT to ensure proper layout behavior for different screen orientations
updated the calculation of parentTaskName to use current time instead of nanoTime to improve accuracy of task name generation
added error handling for invalid Add Service requests in ServiceResourceProvider. java to improve robustness by logging exceptions during service request parsing
refactor conditional logic in IndexDatabase. java for better readability to improve clarity and maintainability of the code
cairo : fix ggbround ( x [ j ] ) in ca
updated AnonCipherWithWantClientAuth. java file to enhance security and improve client authentication
added multiple @ Deprecated annotations to ProducerTemplate. java to indicate that these elements are outdated and should not be used in future development
refactor JLayer class for improved readability to enhance maintainability and facilitate future updates
fix flakyness of evictiontest
updated the method name from ` encodeInternal ` to ` encodePassword ` for clarity to improve code readability and maintainability by using a more des
replaced ` viewTreeObserver ` with direct calls to ` getViewTreeObserver ( ) ` in ` IconRecentsView. java ` to simplify
refactor Response class to improve code readability to enhance maintainability and facilitate future updates
update maxTimestamp from MIN _ VALUE to MAX _ VALUE in SSTableMetadata. java to ensure maxTimestamp is always within valid bounds
set the preferred size of the SecurityPanel to a fixed size of 200x60 to improve the visual appearance of the security panel
added null and empty checks for replies in multiple classes to ensure that replies are only processed when they are not empty to avoid potential errors
refactor HitbtcBalance to use ` Objects. equals ` and ` hashCode ` methods instead of ` ToStringBuilder ` to improve code readability and
updated column handling in SqlCodeGenerator and added new test cases in SqlParserTest and MaxDoubleGroupByFactoryTest to improve code clarity and ensure
updated return statement to use addrs. toString ( ) instead of s to improve readability and maintainability of the code
replaced ` closeOpenFile ( ) ` with ` lookup ( OpenCookie. class ). open ( ) ` in ` EditGcodeFile
updated imports and initialization logic in JsonToGrpcApplicationTests. java to ensure compatibility with the latest HTTP client library and improve code maintainability
updated energy handling logic in PipePowerWood. java to ensure energy does not exceed requested energy values
added a check to delete the temporary file if it does not exist to ensure that the temporary file is removed before proceeding
updated JSON property names in BitstampWebSocketTransaction and added new test cases in BitstampStreamingMarketDataServiceTest to improve clarity and functionality of trade
added checks for time limits in ReplayProcessor and ReplaySubject classes and created tests for peeking state time and size values to ensure proper handling of
updated expectedCitation string format in CitationStyleGeneratorTest. java to ensure consistency in citation formatting
added INSERT _ COLUMNS constant and updated prepared statement construction in MediaTableFiles. java to improve code readability and maintainability by centralizing column
add show _ definition _ for _ exam in exam
added a null check for the component in SIPCommTextFieldUI to prevent potential NullPointerExceptions when accessing components
added caching configuration for HBase scan in MetaReader. java to optimize scan performance by optimizing caching behavior
updated the initialization script from " q _ test _ init. sql " to " q _ test _ init _ for _ minimr. sql
refactor Math and StrictMath classes to improve code readability and maintainability
added a new debug flag ENABLE _ TRANSIENT _ TASKBAR in FeatureFlags. java to enable the transient taskbar feature for debugging purposes
[ hotfix ] fix checkstyle violation in accessexecution and archivedexecutionvertex
added scaling condition to IOSGraphics. java to ensure density is set correctly based on input values
rename ` optional ` to ` vararg ` in the ` Parameter ` class to improve clarity by using a more descriptive variable name
hbase - 25836 regionstatestore # getregioninfo ( ) should log an exception ( ted yu )
[ hotfix ] [ test ] fix assertion failure in testclusterupgradeconfigurationutils
updated log messages and refactored connection handling in AsyncHttpConnection and SelectContextTest to improve clarity and maintainability of the code
added a boolean parameter ` showArrow ` to the ` SearchUiManager ` constructor to enhance the functionality of the ` SearchUiManager ` by
added support for VStore lock modes in Database. java and removed testSetMode method from TestRowLocks. java to enhance compatibility with VStore
skip linux / amd64 only test in bigEndiantest
added type checks for input types in Scalars. java to improve type safety and prevent potential NullPointerExceptions
updated error handling for PRIMARY KEY specifications in CreateTableStatement. java to improve clarity and maintainability of the error message
added drawable resources for various buttons in CellLayout, Hotseat, Launcher, and Settings classes to ensure consistent visuals across different UI components
added exception handling for Flutter views in VMServiceManager. java to improve error handling and provide clearer feedback when a view is not available
added new headers configuration methods in HeadersConfigurer. java to improve code organization and maintainability by centralizing header writers
refactor ObjectEnumerableAssert to improve code readability to enhance maintainability and facilitate future updates
[ java ] rename smoketest to distributedcdptest.
added type attribute to the @ aggregateroot annotation in EventSourcingRepositoryTest to enhance data aggregation capabilities for better test coverage
added support for prebuilt libraries in PythonBinary and PythonTestDescription to enable proper handling of prebuilt libraries in the build process
added support for configuring client authentication in the NetServerOptions and HttpServerOptions classes to enhance flexibility in managing client authentication options
updated REPLDIR and metastoreDIR configurations to include user's system property to ensure compatibility with different user configurations
refactor task view management logic in RecentsView. java to improve clarity and maintainability of the code
increase test timeout in amqptransformertest
added a call to clearAll ( ) in DataTableTopComponent. java to ensure that the DataTable is cleared before processing new data
rename'controller'to'flowcontroller'across multiple processable classes to improve clarity and consistency in naming conventions
updated exchange number handling in OperatorTreeGenerator and added a test for consuming all children pipeline breaker in PipelineBuilderTest to improve code clarity and
added uses statement for ClassLoaderHandler in mmm module - info. java and ppp module - info. java to enable support for ClassLoaderHandler
added methods for setting and retrieving a planning problem in SolutionBusiness and SolverAndPersistenceFrame to improve code clarity and maintainability by encapsulating
added JsonIgnore annotation to ApplicationSettings. java to prevent serialization of sensitive settings
added a null check for throwable before proceeding to prevent potential NullPointerExceptions when throwable is null
refactor query info retrieval logic in QueryTimeManager. java to improve clarity and maintainability of the code
updated delta progress delta from NONE to GUI _ ONLY and modified conditional logic for crafting results to optimize progress tracking and ensure proper handling of
added a check for the presence of a parser before processing the hdop in Gl200TextProtocolDecoder. java to ensure valid hdop is
renamed ` timeColumnName ` to ` incomingTimeColumnName ` and ` incomingTimeFieldSpec ` in ` AvroRecordToPinotRowGenerator.
added two calls to ` HttpMethed. waitToProduceOneBlock ( httpnode ) ` in ` HttpShieldTrc
added support for ` Initializable ` in the ` ContainerBuilder ` interface and created a new ` Initializable ` interface to enhance the handling of
updated TimerObservationHandler to use a wildcard import and refactored error handling to improve code readability and maintainability by centralizing error handling logic
changed the data type of ` SYNC _ DELTA _ RATE ` from ` float ` to ` double ` and modified the calculation logic
updated the computeFragment method to include template name and attribute line and column parameters to ensure compatibility with the latest Thymeleaf templates and deprecate un
changed the type of _ attributes from HashMap to ConcurrentHashMap to ensure thread safety during attribute deserialization
fix for http : / / issues. apache. org / activemq / browse / amq - 2576 - copy message before send to broker
added new color constants and modified extractInto method in ColorExtractionAlgorithm to enhance color extraction capabilities and support for dark text hints
added accessibility check for data folders in SketchBuilder. java to ensure that only accessible data folders are added to the srcFolderPathList
added a boolean parameter to the ` appendContent ` method and adjusted related logic to include titles to enhance functionality by allowing titles to be included in
removed instantiation of SessionRegistryImpl in ConcurrentSessionControllerImpl. java to streamline code by eliminating unnecessary instantiation
added detailed logging for connection reconnection failures in NettyStreamingService to improve error handling and debugging capabilities during connection reconnection
replaced CglibProxyFactory with JavassistProxyFactory in multiple test files to ensure compatibility with the updated Javassist proxy implementation
replaced ` ConcurrentLinkedQueue ` with ` ConcurrentHashSet ` in ` QueuedThreadPool. java ` to utilize a more efficient data structure for thread
refactor SocketExceptions to use String. join for message formatting to improve readability and maintainability of exception handling code
added checks to ensure view paths are under the repository to improve error reporting when view paths are not under the repository
added drag and drop functionality for the tab header area in JabRefFrame. java to enhance user experience by allowing drag - and - drop
added " - XX : + UseCompressedOops " and " - XX : + UseCompressedClassPointers " flags to multiple test cases
removed error logging for update logs in ACTIVE and REPLAY state to streamline error handling during updates
deleted the ConnectionHook class to remove unused code to streamline the codebase
removed the waitForInSync method from multiple test classes to streamline test execution by eliminating unnecessary synchronization checks
( chore ) camel - swagger - java : use isequalto instead of isequalto
updated version handling in ApexLanguageModule and added hasNamespaceGuardedAccess method in TestAccessEvaluator to ensure compatibility with the latest Apex
refactor multiple Java classes for consistency and clarity to improve maintainability and readability of the codebase
refactor AggregateEngine to use IoTDBThreadPoolFactory for thread pool management to improve resource management and facilitate multi - aggregation operations
replaced StandardByteBufferPool with ByteBufferPool in WebSocketAsyncConnection and WebSocketServerFactory to improve performance by utilizing a dedicated buffer size
added scrolling position offsets for thumbnail views in UploadActivity to improve user experience by providing visual feedback during uploads
fix ( griffin ) : fix bug in sql code generation
refactor visibility of mStarted variable and refactored animation handling in LauncherAnimUtils and LauncherStateTransitionAnimation to improve code clarity and maintainability
added a check to disable the default user agent in HttpClient configuration to ensure that the client does not interfere with the default user agent configuration
added a check for pubsubhubbubbub in FeedRefreshUpdater and ApplicationSettings classes to ensure proper handling of pubsubhubbubb
changed the access modifier of the finalize method from public to protected to allow subclasses to access and override the finalize method
updated the method name from ` isAnonymousOrLocalClass ` to ` isAnonymousOrLocalOrSyntheticClass ` and added a conditional check
added a new class DSpaceWebapp that extends AbstractDSpaceWebapp to establish a REST context for the dspace web application
added a method to retrieve the table alias containing column in CalcitePlanner and RowResolver classes to improve error handling when columns are not present in
[ hotfix ] [ table - planner - blink ] fix typo in jobgeneratortest
changed logging level from info to warn in Wallet. java to improve logging clarity and provide more detailed error messages
updated import statements in BasicMapTest. java for consistency and clarity to improve code readability and maintainability
renamed ` rcfileOptimizedWriterEnabled ` and ` rcfileWriterValidate ` to ` rcfileOptimizedWriterEnabled ` and ` rcfileWriter
added an enum ` TlsClientCertPolicy ` and updated related logic in ` GitBlitServer ` to enhance flexibility in handling client certificates
refactor KrakenFuturesStreamingService to simplify message handling and log a debug message to improve code clarity and maintainability by simplifying the
added support for Sec - WebSocket - Protocol in the ProxyWebSocketHandler class to enhance WebSocket handling by incorporating header values
added debug logging for HiveQueryResultsFetchReq in HiveQueryResultSet. java to improve visibility into fetching results for debugging purposes
corrected formatting of dimension names in HolidayEventFormatter to ensure consistent formatting of event dimensions
refactor inner class field handling methods in FinalizePrivateFieldsTest and FinalizePrivateFields to improve clarity and functionality of inner class field management
updated UnexpectedJobExecutionException class to improve error handling to enhance reliability of job execution exceptions
deleted the ` AquaUtils. java ` file and removed the ` shouldUseOpaqueButtons ` method from ` AquaLookAndFeel.
updated maxFreq and maxCost handling in DrillSidewaysQuery and DrillSidewaysScorer classes to improve accuracy of max frequency and
added a new constant GeoDegeneratePath to the classRegsitry to store the degree of generated paths in the class
removed the ` preFill ` parameter from multiple pool constructors to streamline object allocation by eliminating unnecessary parameters
added state updates for taskbar stashing in TaskbarLauncherStateController and updated flag in TaskbarStashController to ensure taskbar state
added null and equality checks for default styles in CascadeDeleteVisitor. java to ensure safe handling of styles and avoid potential NullPointerExceptions
add marquee to the status tab, and fix the position of the playing panel.
refactor icon retrieval logic in FileTreeViewHolder. java to improve clarity and maintainability of icon resource handling
updated test assertions to check for presence of " v18 " alongside " v17 " to ensure that the test accurately reflects
added synchronization to concurrent access to suite results in XMLReporter to ensure thread safety when accessing shared resources
add a new test class TestNativeProbabilityFunctionQueries to facilitate testing of native query functionalities
added deregister method to ClientContainer to ensure proper resource management and prevent potential memory leaks
hhh - 11736 - add drop temporary table after use to sybase
danielwagnerhall : ignoring htmlunit test due to htmlunitdriver change
refactor SolrCore, XMLWriter, DocIterator, FunctionQParser, and QueryParsing classes to improve code organization and maintainability
refactor LinksIndexingFilter to improve code readability to enhance maintainability and facilitate future updates
updated hex string format for reserved memory addresses in VirtualAllocCommitUncommitRecommit. java to improve readability of memory allocation logs for tests
update ad playback state handling in AdTagLoader and AdsMediaSource to conditionally refresh source information based on ad group count to improve ad playback
added suppression for UndefinedEquals in MultimapSubject. java to improve code clarity and maintainability by suppressing warnings
updated the frequency value from deg _ text to unit _ hz in WaveGeneratorActivity. java to ensure accuracy in frequency representation
chore ( deps ) : upgrade gapic - generator - java to 2.8. 0 and update gax - java to 2.18.
updated the insertion order of the included label sets in TestLabelOptions. java to ensure consistent ordering of label selectors in the included label sets
fix nullpointerexception in vertexlighterflat.
added tracing support for message sending in multiple interceptor classes to enhance tracing capabilities and improve traceability during message processing
updated the time zone handling in ScheduledTrigger to use TimeZone. toZoneId ( ) instead of ZoneId to ensure compatibility with the current time zone
added new classes AsyncBucket and InMemoryExtension for handling asynchronous and custom time measurements to enhance functionality and support for asynchronous operations in the Bucket4j
updated the ` classesDir ` argument handling in ` resexhausted003. java ` and ` resexhausted003TestDescription.
updated _ maxIdleTime, lowResourceMaxIdleTime, and soLingerTime values and added InterruptedException handling to improve resource management and
refactor OngoingStubbing class for improved clarity to enhance maintainability and readability of the codebase
added logic to handle web server reuse based on configuration to improve flexibility and maintainability of the web server setup
renamed ` productConstructor ` to ` constructor ` for clarity to improve code readability and maintainability by using a more descriptive variable name
ww - 4441 clear thread allowlist if it's empty
replaced ` setOutputSource ` with ` setItemWriter ` in ` TransformerWriterItemProcessorTests. java ` to ensure the correct item writer is used
drools - 5657 dmn dtn analyze should not try to find gap if the hit policy is not colLECT
added a test for sliding windows in CombineTest. java to ensure proper handling of timestamped inputs during combining operations
added a conditional check for ` allAppsDirty ` before binding all apps in ` LauncherModel. java ` to ensure that apps are only bound
camel - core - optimize the test to reduce flakiness
reformatted code for better readability to improve code clarity and maintainability
refactor AquaMenuBarUI to conditionally use the screen menu bar based on the toolkit's embedded status to improve compatibility and maintainability of
change setRawLocation method to accept a boolean parameter for fall behavior to enhance location configuration flexibility by allowing fall detection
refactor the query logic in SimpleJpaRepository to use a Specification for better clarity to improve code readability and maintainability by consolidating criteria queries
added timestamp, parent hash, nonce, and number to the block constants in BlockUtil. java to ensure that the timestamp, parent hash,
make safepointinsertionphase a part of the hotspot backend.
added null check for children in RSGroupInfoManagerImpl and ZKProcedureMemberRpcs to ensure robust handling of null or empty children
changed access modifiers of several classes and methods from package - private to public to allow access to these classes from other packages
added disposal methods for entity triggers, entityRigidBodies, and colliders in BulletPhysics and ChunkProcessingPipeline to ensure proper
added a check to ensure maxBufferedDocs is at least 1 to prevent IllegalArgumentException when maxBufferedDocs is not provided
added state management for ` loginCurrentlyInProgress ` in ` LoginActivity ` to improve user experience by managing login status during the application
added null checks for element and value extraction in Pump. java and created a test for UUID sorting in PumpTest. java to ensure
refactor methods in HttpShardHandlerFactory and LBHttpSolrServer to use getter methods instead of setter methods to improve accessibility and encapsulation of
updated order from LOWEST _ PRECEDENCE to HIGHEST _ PRECEDENCE and added unit tests for DefaultAuthenticationServiceSelectionStrategy
added server and handler imports in TestJNDI. java to facilitate the setup of the Jetty server
updated assertions and variable names in SortedDynPartitionOptimizer. java for clarity to improve code readability and maintainability
changed the return value from checking if the loop is NioEventLoop to returning true to ensure proper handling of NioEventLoop events in FileStreamChannel
updated the logic for setting ` newNumNulls ` based on the new number of rows to ensure that the number of nulls does not exceed the
camel - jbang - export : add support for kamelet location.
replaced OkHttpOAuthConsumer with an AtomicBoolean for task handling in OSMJob. java to improve task management and handle authorization errors more effectively
removed debug print statements from various test files to clean up the code and improve readability
added support for client authentication in IoTDBRestServiceConfig and IoTDBRestServiceDescriptor to enable flexible client authentication based on configuration
refactor variable assignment in PropertyAndSetterInjection and add a new test class ChildWithSameParentFieldInjectionTest to improve code clarity and ensure proper
updated BloomFilter64bit and BloomUriUniqFilter to use Serializable and InitializingBean annotations to improve serialization compatibility and maintainability of the
updated cursor adapter behavior from false to true in HomeFragment and TweetPager to enable refreshing functionality in the user interface
increase the intermediate header height ratio from 1f to 75f to improve the responsiveness of the UI layout
replaced RuntimeEvent with RecompilationEvent in multiple files to enhance event handling capabilities in the JavaScript engine
added constants and methods to manage host - level configurations to improve code maintainability and readability by centralizing host management logic
added a new parameter ` logEveryUnknownFileFormat ` to the ` include ` method in ` DatabaseChangeLog ` and created a corresponding test
added a loop to delete characters from the location in DefaultServlet. java to ensure proper handling of special characters in URLs
added support for entity and scores in StaticPipeline to enable flexible handling of entity and scores in the pipeline
refactor filename and path handling in Frame. java and update imports in Utils. java and WhoopsModule. java to improve code clarity and
don't throw a runtime exception if datastore don't exist
refactor assertions in Assert. java to improve code readability and maintainability
renamed test classes for MultiLine functionalities to improve clarity and maintainability of the test suite
http : / / issues. apache. org / jira / browse / amq - 641 - fix unit test
updated type parameters in TsFileWriteAlignedWithTSRecord and TsFileWriteAlignedWithTablet to use MeasurementSchema instead of
updated memory usage calculation in TestPromotionFromSurvivorToTenuredAfterMinorGC. java to ensure accurate memory usage for surv
updated log4j jar file from ` log4j12 - log4j12 -. jar ` to ` log4j - reload
added a call to waitForAssert before asserting the status detail in HueBridgeHandlerOSGiTest to ensure that the test does not hang
updated package structure for various activities to improve organization and maintainability of the codebase
drools - 1276 : ignore unit test due to drools - 1276
added a constructor to ` PullRequestMergedEventsStream ` that initializes ` _ service ` and creates a new ` GitHubAPICaller ` instance to
refactor AbstractExpressionPart class to improve code structure to enhance maintainability and readability of the code
[ hotfix ] [ runtime ] fix typo in taskslot javadocs
replaced occurrences of ChannelFutureListener. FIRE _ EXCEPTION _ ON _ FAILURE with ChannelFutureListener. CLOSE in NettyWebSocket. java and NettyWebSocketTest
added error handling for unlocking locks in MoveTask. java to improve stability by logging warnings during unlock operations
replaced InputStream property loading with ResourceBundle retrieval for GEM _ PATH and RUBY _ VERSION to simplify resource loading and improve code maintainability
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4659
removed unnecessary null check for classInfo in ClassGraphClassLoader. java to streamline code for better readability and maintainability
[ hotfix ] [ test ] make sure blob storage directory be delete before test.
feat : add eam. v1alpha1 and eam. v1beta2 to v1a and v1b ( #
added a Bundle to set extras in FileDisplayActivity to ensure that the extras are properly passed to the builder
replaced break statement with continue in ParticleEmitter. java to ensure proper handling of null particle cases
updated expect times for cluster creation from 2 to 3 in AmbariManagementControllerImplTest. java to improve test reliability by adjusting the
removed the nullable attribute from the service column in TransientSessionTicketImpl and added a NoResultException handling in JpaTicketRegistry to simplify the
rename Bug4823811. java to Bug4823811. java to improve clarity and consistency in naming conventions
updated path handling in RmStep to use a function for better path management to improve code clarity and maintainability by using a centralized path
updated requestFullState method to accept a boolean parameter to enable dynamic polling of full state based on initial request status
refactor ShibbolethCompatiblePersistentIdGenerator to improve attribute handling and serialization to enhance code clarity and maintainability while ensuring proper attribute
updated the @ Inject annotation in RequestValidationService. java to ensure proper injection of the service
added a message for hiding the keyboard in UiThreadHelper. java to improve user experience by allowing users to hide the keyboard when needed
removed redundant calls to MManager. getInstance ( ). clear ( ) in multiple test files to improve code clarity and maintainability by eliminating
refactor NavigableMap and NavigableSet classes to improve code readability and maintainability
added a testSlurpFile method to IOUtilsTest. java to ensure the slurpFile function correctly handles IOException and non - existent
added @ FunctionalInterface annotations to multiple classes to enhance functional interfaces for better integration with Grpc security
refactor span retrieval logic to use a new method ` spanWithName ` to improve code readability and maintainability by encapsulating span names
added support for DateWritable in ETypeConverter and updated related classes to enhance date handling capabilities and improve type compatibility
updated the delimiter from " \ s *, \ s * " to " COMMA _ SEPARATOR " in AnsiEscape. createSequence to ensure proper
don't try to parse a numberformatexception if there be an error
refactor column count validation logic in SemanticAnalyzer. java to improve clarity and maintainability of the code
refactor score selection logic in WANDScorer. java to improve clarity and maintainability of the scoring logic
refactor Correspondence class for improved readability to enhance maintainability and facilitate future updates
updated import statements in PaintSetEnabledDeadlock. java to improve clarity and maintainability of the code
changed the value of curPixVal from - 1 to 0xFF000000 in XRSolidSrcPict. java and created a new White
replaced List < Type > subTypes with Collection < Type > supertypes in BiomeDictionary. java to simplify type handling and improve
rename ` withinTolerance ` to ` exceedsTolerance ` for clarity to improve code readability by using a more descriptive variable name
added test stability rules for LOCAL and PLATFORM _ POSTSUBMIT in TaplTestsLauncher3. java to enhance test stability capabilities
updated package - info. java files for mmm and ppp packages to improve documentation clarity and maintainability
added a check to ensure the log suffix is not empty before proceeding to prevent potential errors when the log suffix is empty
refactor PythonBuckConfig to improve code readability to enhance maintainability and facilitate future updates
added unit tests for adding and clearing the system shared library names in ShadowPackageManager to ensure that the system shared library names are correctly cleared and
updated meiligaoProtocolDecoder to handle different time formats and added extended information for alarm information to enhance meiligao functionality and improve
added a null check for the tile before accessing its power value to prevent potential NullPointerExceptions when accessing the power data
modified the cache preference handling in PrefFragment. java and added a new TrimCache class to improve cache management and enhance user experience during cache
updated import statements and removed unused imports in multiple Java files to streamline dependencies and improve code maintainability
replaced return statements with NotAuthorizedException throws in BasicAuthAccessControlFactory, ZkBasicAuthAccessControlFactory, AccessControlUtils, and BasicAuthBatch
added a new abstract method ` schedulePeriodically ` to the ` Scheduler ` class to improve code organization and suppress warnings about unused parameters
replaced ` refreshListOfFilesFragment ( ). onItemClicked ( ) ` with a call to ` getStorageManager ( ). getFileByPath ( )
added checks for multiple input streams and improved error handling in StreamUtil. java to enhance robustness by preventing multiple input streams from being closed
refactor ` create _ table _ with _ environment _ context ` method to accept a ` CreateTableRequest ` parameter to simplify the method signature and
added a ` aborted ` flag to track task start and abort methods in ` FixedRateFragInsStateTracker ` to ensure thread safety when track
updated indentation logic in multiple parser classes to ensure proper handling of blocks starting with opening parentheses
added NetworkWifiStatusReceiver and ChangeWifiStatusEvent classes for handling network status changes to enable users to manage network status changes effectively within the application
removed the check for control frames in FrameGenerator. java to simplify the control frame validation logic
added visibility for the collapse handle in WidgetsBottomSheet to improve user experience by ensuring the handle is visible
added test cases for HTML and JS escaping in Issue475. java to ensure proper handling of special characters in XSS requests
added a check for non - positive units to scroll in StandardGraphIO. java to prevent rendering issues when units are not positive
updated condition from ` size ( ) > 1 ` to ` size ( )! = 1 ` in ` Manager. java ` to ensure correct
added methods for adding and retrieving JSON enums in JsonArray and JsonObject classes to enhance functionality and ensure proper handling of null values
added ` hashCode ( ) ` method to ` IPPPrintService ` and created a new test class ` TestRaceCond ` to ensure
updated database version handling in DB2iDialect and DB2zDialect to ensure consistent version management across different database dialects
added a condition to check if the platform fee is greater than zero in BaseStripeManager. java to ensure that only active transactions are processed
refactor BatchUpdateException, PreparedStatement, and Statement classes to improve code organization and maintainability
increase the size of the first sample in the buffer when queueing input buffers to ensure that the buffer does not exceed its end - of -
removed the'public'modifier from multiple Antn class declarations to enforce package - private visibility for better encapsulation
added Retrofit import to Part and PartMap classes to enable dependency injection for HTTP requests
refactor JsonBuildHelper and ParamsBuildHelper to use commonHandleParam instead of commonHandleParam to improve code readability and maintainability by centralizing
added TYPE _ TASKBAR _ OVERLAY _ PROXY to both TYPE _ OPTIONS _ POPUP _ DIALOG and TYPE _ TASKBAR _ E
fix : update gapic - generator - java with mock service generation fix
updated alpha calculation logic in ClipAnimationHelper and added hasRecents property in RemoteAnimationTargetSet to improve animation responsiveness and manage recents
removed the third parameter from the createRenderScript method to simplify the code by eliminating unnecessary parameters
refactor PMD class to improve code readability to enhance maintainability and facilitate future updates
refactor PluginListCellRenderer and PluginManagerActivator to use a unified method for checking system bundles to improve code readability and maintainability by centralizing system
removed unnecessary import statements and simplified method signatures in IntegrationTestSparkBulkLoad. java to improve code readability and maintainability
updated KeyChainGroupTest to include a new constant LOW _ FALSE _ POSITIVE _ RATE to improve clarity and maintainability of the test code
refactor configuration handling in Overview. java to improve clarity and ensure proper selection of motor configurations
server : fix npe in agentmanagerimpl. findattache ( )
added a null check for the value before adding it to the entrySet to prevent potential NullPointerExceptions when accessing values
kvm : improve error message when cloudstack agent setup fails
updated the constant for NO _ NAME and NO _ VALUE to include NAME _ ATTRIBUTE and VALUE _ ATTRIBUTE to improve clarity and maintainability of the
updated constructor parameters in BaseStubbing and ConsecutiveStubbing classes to use Object instead of InvocationContainerImpl to improve type safety and clarity in
replaced the method ` getMethodLine ` with a new method ` stripMethodParams ` that strips the ` methodNameWithParams ` string to improve
updated VERSION _ NAME and VERSION _ CODE for the GreatVoyage application to reflect the latest release and ensure compatibility
make outputfilter. getallowedcommands ( ) return a collection rather than a list.
use labelcacheitem. graphicstextestimation instead of graphicstextestimation
don't clear the popup when there be overlap feature.
updated error messages in ValidationSuite. java for consistency to improve clarity and maintainability of error reporting
added a StartingWindowListener to manage the transition manager in QuickstepTransitionManager to improve modularity and maintainability of the transition management logic
added a doc comment inherited from MBeanServerConnection in MBeanServer. java to improve documentation clarity and maintainability
updated exception messages in CheckPackageAccess. java for better clarity to improve error reporting for package access and definition security exceptions
increased awaitTermination duration from 30 seconds to 90 seconds and added an assertion to verify termination of the executor service to improve test reliability and ensure
changed the type of ` loggingEnabled ` from ` boolean ` to ` Boolean ` and added a null check for ` loggingEnabled ` to improve
added @ JsonIgnore annotation to mmm Schema. java and ppp Schema. java to exclude sensitive fields from JSON serialization
increased timeout duration from 5000ms to 10000ms in TestNonTxIndexBuilder. java to allow more time for tests to complete
refactor SimpleNaiveBayesClassifier to remove unused parameters and simplify the train method signature to improve code clarity and maintainability by simplifying method
renamed CheckHelperModule to CheckHelperControllerModule and CheckHelperAuditModule to improve clarity and maintainability of the CheckHelper module
refactor Prototype class for improved readability to enhance maintainability and facilitate future updates
added logic to retrieve the table's transaction status based on its value to ensure proper handling of tables that are not transactional
[ java ] remove dead code in recordingwriter. writefragment.
use offset _ sample _ relATIVE for byte [ ] content in caecubtitle
updated the alias in the groupByTypeAndTag method call from " metricName " to " alias " in KairosDatastoreTest. java to
updated currency pairs for BTC, LTC, DOGE, PPC, and QRK in VaultOfSatoshiBase
use javax. persistence. EntityManagerFactory in multiple test classes to ensure proper resource management and prevent memory leaks
updated KafkaSender import from ` kafka11 ` to ` kafka ` in ` ZipkinKafkaSenderConfiguration ` and ` ZipkinAutoConfigurationTests
added GwtBinaryIntegrationTest. java and created a new test class GwtBinaryIntegrationTest. java to facilitate testing of GWT binary builds
hide the loading cause label in BrowserContentPane and handle exceptions in SQLConsole to improve user experience by preventing crashes during query builder dialog interactions
refactored randomizer retrieval logic in EnhancedRandomImpl. java and updated test cases in EnhancedRandomImplTest. java to improve
added support for XML security property management in DTDConfiguration, NonValidatingConfiguration, and SAXParser to ensure proper instantiation of XMLSecurityPropertyManager
added a new file ` InlineDefaultMethod. java ` containing interfaces with default methods to demonstrate and test the behavior of default methods in interfaces
replaced " _ " with " * " for LIKE and GLOB queries in SqliteFieldPredicateView. java to ensure correct handling of special
[ drools - 659 ] make dmn assemblerservice protect to allow subclass access to the method
fixed - rscript. getall ( ) method return a completablefuture instead of a string.
updated print statements in EspressoLanguage. java and refactored setWordFieldVolatile method in StaticObject. java to improve
updated logging statements to use size ( ) instead of string literals to improve logging precision and reduce verbosity
retain the FMLProxyPacket object before sending it to ensure proper resource management and prevent potential memory leaks
added a constant for HTTP _ JETTY _ SERVER _ HANDLERS in ExecConstants. java and updated thread pool configuration in WebServer
replaced multiple instances of ` idsToShortcuts ` with a new ` removedShortcutInfos ` list to improve code clarity and maintainability by consolid
remove unnecessary check for string type in DefaultHttpClientBinderRegistry. java to simplify the code and improve readability
removed case handling for home navigation in DetailFragment to simplify navigation logic and improve user experience
added a condition to check if the Android market includes play services to ensure that play services are only processed when the market is available
updated cell parsing logic and added a test for pipes on outside whitespace after headers to improve parsing accuracy and ensure proper rendering of tables with pipes
added support for bridging headers in NewNativeTargetProjectMutator and related tests to enable flexible handling of bridging headers in project
refactor PotentiallyDeadCode to improve method handling and import statements to enhance clarity and maintainability of the code by consolidating unused methods into a
added diamond handling in ` Attr. java ` and created new classes ` T6939780. java ` with corresponding test cases to enhance
replaced invocation. getInvocationStageTrace ( ). startSend ( ) with invocation. onStartSendRequest ( ) in HighwayClientFilter
removed logging statement for cachemetrics in SolrCacheHolder. java to streamline code by eliminating unnecessary log clutter
added exception handling for AuthenticationException in LdapCtxFactory to improve error handling for authentication issues
updated comparison logic in Test6796786. java to improve accuracy of floating - point comparisons
added " logback. dev. xml " to the configuration file in JoobyMojo. java and Main. java to ensure the configuration file
added a new class JaEventCheck to handle application event types to improve event handling for authentication failures and success
refactor animation logic in QuickstepTransitionManager to use a list for views to improve code readability and maintainability by consolidating view animations
updated the comparison logic in ConjunctionSolrSpellChecker and added a new test class ConjunctionSolrSpellCheckerTest to improve the correctness of string
replaced HashMap with Map in ShadowSystemServiceRegistry. java to improve data handling capabilities
[ hotfix ] [ runtime ] remove unused constant in defaultleaderselectionservice
changed the visibility of the setAuthentication method from public to package - private to allow access to the method from other packages
cloudstack - 7093 : add config for wait for storage pool command.
updated table parameters in AbstractJDBCConnectorProvider to use JDBC _ SCHEMA instead of JDBC _ TABLE to ensure correct identification of the schema in the
updated SQL command references from ` getSqlUpdateAUP ` to ` getSqlUpdate ` across multiple files to improve clarity and consistency in the SQL command
replaced ` WeakHashMap ` with ` Collections. synchronizedMap ` for schemaTypeCache to improve thread safety and performance in schema type caching
refactor header handling logic in StaticServerHttpHeadersWriter to improve clarity and maintainability to ensure headers are only added when they are not already present
added JUnit @ Ignore annotation to LatticeDemo. java to temporarily skip tests that rely on files available from within CMU
added a directory creation for storage in TestCollector. java to ensure storage is available for testing purposes
added chunked streaming mode to the StarTreeJobUtils to optimize data transfer for better performance
added new syntax checker classes for BasicSyntaxChecker, MultipleTypeSyntaxCheckerTest, and SingleTypeSyntaxCheckerTest to establish a structured syntax checker
hbase / thirdparty / protobuf : update import statements to reflect changes in protobuf format
added a test to ensure that beans with recursive structures must not cause stack overflow exceptions
added IOException to the getRemoteName method to ensure proper error handling during remote name retrieval
added error handling for AccountNotFoundException and replaced OwnCloudClient with PlainClient in multiple classes to improve robustness of account management and enhance
refactor WebSocketConnection and ExplicitDemandTest classes to improve code readability and maintainability
added support for AspectJ mode in GlobalMethodSecurityBeanDefinitionParser to enhance security interception with protect - pointcut definitions
updated import statements and refactored hostname verification logic in Connection. java to enhance security by enabling endpoint identification and disabling hostname verification
added a ` remove ` method to the ` OHLCSeries ` class and a corresponding test in ` OHLCSeriesTests ` to
updated invocation method from ` invoke ( ). joinInternal ( ) ` to ` invokeUrgent ( ). joinInternal ( ) `
replaced the loop for removing joints from the joint list to ensure proper cleanup of joints in the world
add a null check for the filter pattern before matching phone numbers to prevent potential NullPointerExceptions when the filter pattern is null
[ hotfix ] [ test ] add license to sourereaderbasetest
removed multiple null checks for document and parent folders in DocumentsStorageProvider. java to streamline error handling and improve code readability
added a new interface ` HookDefinition ` and a new class ` JavaHookDefinition ` to define and execute Java hooks within the Cucumber runtime
refactor flushIfDeadlockRisk method to streamline buffer handling to improve code readability and maintainability
updated setExoOptions method to accept a boolean parameter allowTs to enhance flexibility in specifying Exo options based on user preferences
remove the user role from the identifier collection in DMRDecoderState. java to ensure proper handling of user roles during decoding
added INVISIBLE constant and refactored color handling in Color. java and RailButtonShapes. java to improve code readability and maintainability by
updated the null handling logic in CountAggregationFunction and added a new test for query options in NullHandlingIntegrationTest to ensure correct handling of null
set ` deep ` to - 1 in ` InternalTransaction ` to ensure proper initialization of the ` deep ` variable
updated the method to escape XML names in StreamInitiation. java to enhance security by preventing XSS vulnerabilities
updated file path construction to use a configurable work directory to enhance flexibility by allowing different work directories based on configuration
added functionality to set the deprecated attribute to true in RuleSetFactory to ensure that the rule is marked as deprecated when specified
make amd64directcallop use jmp instead of jmp.
updated TimeRange to use static constants for minimum and maximum timestamps to improve code readability and maintainability by avoiding magic numbers
refactor BitDocIdSet class for improved readability to enhance maintainability and facilitate future updates
refactor connection handling by introducing a private method ` emitMetricsJson ` to improve code readability and maintainability by centralizing connection logic
updated MIME type checks in DetailFragment and GalleryActivity to ensure proper handling of video attachments and improve UI responsiveness
add a condition to check if the item is remote before filling the tank to ensure proper handling of tank data when the item is not
added support for PrebuiltDotnetLibrary in CsharpLibrary to enhance compatibility with PrebuiltDotnetLibrary rules
added processing logic for IQPEP types in IQPEPHandler. java to ensure that a valid PEP service is processed based on
added a null check for runtime in IntrinsificationPhase. java to ensure that runtime is not null before proceeding with intrinsification
added a condition to check if the active state is not empty in MetricTrackingWindmillServerStub and StreamingDataflowWorker to ensure
pdfbox - 4892 : avoid infinite loop, a suggest by valerybokov
added constructors to LwjglAppletApplication that accept a Canvas and an LwjglApplicationConfiguration to enable dynamic initialization of the Lwjgl
updated string representation logic in EnvironmentAndSystemPropertyClientProviderStrategy. java to improve clarity and maintainability of the code
refactor postAuthentication logic to use a list of messages instead of separate authentication processes to improve code readability and maintainability by simplifying the handling of
refactor Int2ObjectCache to improve code readability to enhance maintainability and facilitate future updates
added a private field ` resolveFromAttribute ` to ` AbstractLdapAuthenticationProperties ` and updated its usage in ` LdapUtils ` to enhance the
refactor Readable class to improve code readability to enhance maintainability and facilitate future updates
added a new test method ` WITH _ FONT ` to ` JsoupNonVisualRegressionTest. java ` to handle font - related issues and improve
changed the icon of the share menu item from an item to an ic _ menu _ share to enhance user experience by providing a more visually appe
updated Constants. java to use JVM _ MAJOR _ VERSION and JVM _ MINOR _ VERSION constants instead of relying solely on Collections
added error handling for network timeout exceptions in PoolUtilities. java to improve robustness by catching non - JDBC 41 compliant exceptions
refactor GenericContainer class to improve code structure to enhance maintainability and readability of the code
replaced HashSet with ArrayList for filteredSet and filteredList to improve performance by using ArrayList instead of HashSet
added multiple @ Override annotations in CentralAuthenticationServiceImpl, ImmutableAuthentication, AbstractCasProtocolValidationSpecification, AbstractCasView, and CentralAuthentication
removed unnecessary whitespace in ChartProvider. java to improve code readability and maintain consistency
updated WORKING _ DIRECTORY preference to use the parent directory instead of the current directory to ensure consistency in file path handling across the application
updated the return statement in JavacParser. java and added a new JavaSource class ExtraSemiTest. java to improve code clarity and fac
added support for the createdAt field in User and UserRepository classes to enhance functionality for retrieving users based on created timestamps
rename Test15FloatJNIArgs to Test15FloatJNIArgs. java to improve clarity and consistency in naming conventions
removed outdated PlotSquared plugin imports and updated version formatting to ensure compatibility with the latest PlotSquared and maintain versioning
npe in mockprocesscontext. decrypt ( string ) cause by stringindexoutofboundsexception
[ java ] ensure that reentrant call be not permitted during callback.
added a null check for inp _ dep before merging dependencies to prevent potential NullPointerExceptions when inp _ dep is not initialized
added timeout annotations to SslBytesServerTest in SslBytesServerTest. java to prevent intermittent test failures during testing
refactor Peer class to improve code readability to enhance maintainability and facilitate future updates
updated methods in RealtimeIndexingCoordinator, RealtimeSegment, StreamProvider, and StreamProviderConfig to improve clarity and functionality of index segment
added null check before exporting data in FailureWatcher. java to avoid potential NullPointerExceptions when exporting data
refactor getScrollThumbRadius method and updatePopupY calculation in RecyclerViewFastScroller. java to improve code readability and maintainability by centralizing getScrollThumb
updated error message in BuckWSServerPortUtils and added a method to check if the tool window is instantiated in BuckToolWindowFactory
added a conditional check for Windows platform before adding the preventSleep item listener to ensure preventSleep functionality only occurs on non - Windows platforms
updated servlet imports from ` javax. servlet ` to ` jakarta. servlet ` in ` HttpConfigurationAuthorityOverrideTest. java `
added handling for vertical bar layout in QuickstepAppTransitionManagerImpl. java to improve cropping behavior based on device profile
added methods to manage fullscreen exclusive mode state in XWindow and XWindowPeer classes to improve user experience by accurately reflecting the fullscreen state
added substring handling in StringUtil. java and created unit tests in UMSUtilsTest. java to improve substring handling and ensure correctness through unit testing
added credentials handling in DagUtils for DAGs to enable proper management of credentials for DAGs
( chore ) camel - core : remove use of keyset iterator
trim whitespace from thread name in SessionState. java to ensure consistent formatting of thread names
updated the message for adding a description until a point has logged to a file to enhance user experience by providing clearer context about the point being logged
refactor Job class to improve code readability to enhance maintainability and facilitate future updates
added a new abstract class ` Unused ` and a test method in ` Main. java ` to test the behavior of the ` Unused
updated the component key from " hbase _ master _ host " to " hbase _ master _ hosts " in StageUtils and DummyHeartbeatConstants to
deleted multiple EventReaderDeserializer and EventWriterSerializer interfaces to remove unused components to streamline the codebase
changed the return type of performJoin from GenericRecord to List < GenericRecord > and added a new list for output records to improve data handling
updated the handling of maximum delegation lock period in ProposalUtil and related classes to ensure that the maximum delegation lock period is within a specified range
change network rate type from int to Integer across multiple classes to improve type safety and prevent potential overflow issues
removed the initialization of CmcExchange services to streamline the code by eliminating unnecessary dependencies
updated IP address retrieval logic in GossipLocalNode. java and renamed constants in Constant. java to improve code clarity and maintainability by
change the default value of the ` enabled ` property from ` true ` to ` false ` in ` ClientTpcConfig ` and add a
updated the swagger version from 2.1. 10 - 1 to 2.1. 18.2 in multiple application classes to reflect the latest version of the Swagger UI
refactor the division logic in MutableBigInteger and add a new ModInvTime class for testing modular operations to improve efficiency and facilitate testing of
refactor key assignment logic in NamedObjectList. java to improve clarity and maintainability of the code
renamed the method ` cleanupEmptyDir ` to ` cleanupEmptyTableDir ` across multiple classes to improve clarity and consistency in naming conventions
refactor AsyncCache and Cache classes to improve code readability and maintainability
added RCFileInputFormat import and registered it in SerializationUtilities. java to enable support for RCFileInputFormat in the serialization process
added default methods for type and category in TypeMapperComponent to enhance type handling capabilities in the application
added error handling for invalid host header in Request. java and created a test case in RequestTest. java to improve error handling and ensure proper
updated ShadowTimeZoneFinderTest and ShadowTimeZoneFinder to use ReflectionHelpers and ClassParameter for time zone lookup to improve test reliability and maintainability
added methods for handling outgoing values in StandardOp. java to enhance functionality by allowing outgoing values to be processed
changed variable names from'segment'to'cfsDir'for clarity to improve code readability and maintainability by using a more descriptive variable
added a new method ` hasMainThreadProfile ` to ` AggregateDao ` and corresponding methods in ` AggregateCommonRepository ` to manage main thread profile
added error handling for annotation definitions in Buck rules with required _ for _ source _ abi = True to ensure that annotations are only processed when
updated name constants in GreekLowerCaseFilterFactory, IrishLowerCaseFilterFactory, UAX29URLEmailTokenizerFactory, and Turk
updated HSSFSheet and Sheet classes to improve code consistency and maintainability
dspace - 4. 0 upgrade to dspace - 4. 0.
added a list to remove specific time zones and replaced them with a fresh array from another list to improve data handling and ensure consistent time zone management
updated SurfaceSyncGroup initialization to use a string " TaskBarController " to improve clarity and maintainability of sync group initialization
replaced direct retrieval of GridFS file ID with a direct retrieval method to simplify code and improve readability by eliminating unnecessary object references
added tests for ` getTotalSize ` and ` getBytesSoFar ` methods in ` ShadowDownloadManager ` to ensure accurate retrieval of downloaded size and
refactor character handling logic in TextField. java to improve clarity and maintainability of the code
add equality check for node in group node ( # 4957 )
added a method ` afterSetStatements ` to ` BlockLexicalContext ` for handling statements to improve code clarity and maintainability by centralizing
added hashCode methods to IntervalXYDelegate and updated XYSeriesCollection to use HashUtilities to improve hash code generation and ensure consistent behavior across series and
add cleanup to clientqueuedisruptiontest
refactor CloudWatchAppender to remove unnecessary variable declarations and introduce a new test class for verifying scripted attribute filters to improve code readability and maintain
updated the method name from ` serializeSpecialDoubleValues ( ) ` to ` serializeSpecialFloatingPointValues ( ) ` to clarify the purpose of
added calls to ` HttpMethed. waitProduceOneBlock ` and ` WalletTestZenToken007. waitProduceNext
added checks for non - empty language tags before canonicalizing them in Locale and LanguageTag classes to ensure that language tags are only processed when they
server : add configuration to allow ssh - to - agent management server ( hostid )
changed access modifier of ScheduledAction from public to package - private in Scheduler. java and SchedulerWhen. java to allow access to ScheduledAction from
removed unused import of PagerSlidingTabStrip in EmojiKeyboard. java to clean up the code and improve readability
added a check for non - empty strings in the filter condition to ensure that only valid strings are processed in the filter
renamed " natural order " to " natural column order " across multiple files to improve clarity and consistency in naming conventions
removed a call to Arrays. copyOf with a size of 6 to streamline code by eliminating unnecessary array creation
replaced direct writing of remote address with a call to ` htmlEncodeButNotSpace ( remoteAddr ) ` to ensure that special characters are not
updated the endpoint in ItemStateTriggerHandler to use " smarthome / items / " instead of " / " to ensure the correct
removed unnecessary synchronized block in FastHttpDateFormat. java to ensure thread safety during formatting updates
added thread management for file moving in Hive to improve reliability and responsiveness of file movement operations
added new methods ` trigger ` and ` trigger ` to ` WrapTimer ` for triggering tasks with a specified time period to enhance functionality by allowing
added support for handling LOCAL _ DATE and LOCAL _ TIME types in TypeStringUtils to enhance type handling capabilities in SQL queries
added a boolean option to enable verbose error logging in AbstractStatusReporter to improve error reporting flexibility based on context options
added checks for menu visibility in ClickStartHandler initialization to ensure menu is only shown when the application is unbundled
s2s vpn : ensure that vpn connection can not be esitablish between same account's vpn gateway
updated error handling in CursorReadingTask and added a new test method in CursorReadingTaskUnitTests to improve error management and ensure proper error handling
pdfbox thumbnail and text extraction now log an error if the pdf be encrypted
[ 3.0 ] close curator watcher executor on close ( # 8951 )
refactor AnomalyDetectionResource and AnomalyDetectionResourceTest classes to improve code readability and maintainability
replaced getSelectedItemId ( ) method with id parameter and refactored deleteItem ( ) method to improve code clarity and maintainability by using a
updated Java6Assertions and Conditions classes to improve code clarity and maintainability
replaced ` Collection ` with ` List ` for ` replaceOrderBulk ` method parameters in ` Bitmex ` and ` BitmexTrade
refactor ` enterDefault ` method to ` enterIdentNode ` and ` enterFunctionNode ` methods in ` FindScopeDepths ` and `
added a new class J9ConstantHelper with a method to retrieve a long from a Class to enhance functionality by allowing dynamic retrieval of long values
added a new test class ` ConcurrentModificationExceptionOnMultiThreadedVerificationTest ` to test concurrent modification exceptions in a multithreaded environment
added methods to notify users about their presence and offline resources in the transport to improve user experience by managing roster resources effectively
replaced calls to ` getProperties ( ) ` with ` getOverlayedProperties ( ) ` in ` MapOperator. java ` and added a method
updated method call formatting in FunctionObjectCreator. java to improve code readability and maintain consistency
added a null check for ` extTypeCustomDesers ` before initializing it in ` MessagePackFactory ` to prevent potential NullPointerExceptions when
added a system property to set the mock server's level to " WARN " to enable logging of a specific severity in the server
removed the @ Test annotation from AbstractRegistryFactoryTest. java to enable unit testing of the registry functionality
removed JettySolrRunner from AbstractSolrMorphlineZkTestBase. java to streamline the codebase by eliminating unused JettySolrRunner
updated scoreMap and termScoreMap to use String and termScoreMap for better type safety to improve code clarity and maintainability by using more
added an ` eq ` method to the ` U64 ` class for checking the validity of a ` parameter ` to enhance functionality by allowing comparisons
set the headline style in MainViewModel. java to improve the visual appearance of the application
added a check for support dark text in the notifyChange method to ensure that only dark text notifications are notified when appropriate
[ hotfix ] [ checkpointing ] fix npe in checkpointrequestdecider
updated maximum pool size from 2 to 8 and adjusted KEEP _ ALIVE _ TIME _ MILLISECONDS and CORE _ POOL _ SIZE
updated the stream filtering logic in AuthenticationAttributeMultifactorAuthenticationPolicyEventResolver to use ` anyMatch ` instead of ` count ( ) `
added test requirements for Windows ServerCore container in OpenCVImageFactoryTest to ensure tests are only executed on supported environments
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 459
refactor getReturnValue method to handle Throwable and ensure proper exception handling to improve error reporting and maintainability of exception handling
added a Repeatable annotation for Issues in Issue. java to enable users to specify issues as reported in the Issue class
updated user property key from " hcat _ user " to " webhcat _ user " in BlueprintConfigurationProcessor. java and updated
don't create proxy socket if socksproxyhost be not set
[ hotfix ] [ runtime ] fix typo in slotstatus javadocs
removed the import of ClassUtils from ReflectionUtils. java to streamline dependencies by eliminating unnecessary dependencies
use linkedhashset in sslcontextfactory to preserve order
added functionality to retrieve the system resource based on its location to ensure the system resource is accurately identified and processed
increase the size of plaintextSegment in StreamingAeadDecryptingChannel and StreamingAeadSeekableDecryptingChannel to optimize memory allocation
added a test for invalid fallback routes in ServerMvcIntegrationTests to ensure proper exception handling for invalid circuit breaker fallbacks
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4446 ( #
added setSizeLimit setting and removed resetting of bytes read counter in PerformanceTest. java to ensure proper handling of size limits during test execution
added ` preferAES ` property and its getter / setter methods in ` ProtectionPolicy ` and removed it from ` StandardProtectionPolicy ` to
updated logging statements in CamelOpenTelemetryTestSupport. java to improve logging granularity and provide better visibility into the output
[ test ] remove dead code from elbintegrationtest
renamed the method ` setAlarm ` to ` setRingtone ` in ` AlarmReceiver. java ` to improve clarity by using a more des
added error handling for file creation in DiacriticTest. java to improve robustness by notifying users about configuration issues
hhh - 10866 - followonlockingtest fail on oracle 11 when use ojdbc6
updated file handling and error logging in TextureUnpacker. java to improve error handling and provide clearer error messages
added cluster lock handling and refactored service state management in AmbariManagementControllerImpl. java to improve thread safety and ensure proper state updates
refactor FilterChainProxy and DefaultFilterInvocationSecurityMetadataSource classes to improve code readability and maintainability
added a test method to check if a statement is closed in TestJdbcDriver2. java and refactored close logic in HiveQueryResultSet
removed unnecessary check for mark support in InputStreamBodyGenerator. java and updated test cases in ChunkingTest. java to improve code clarity and ensure
updated the retrieval of DatabaseSchemaResp to include pre - deleted database entries to ensure that only relevant database entries are removed from the response
added handling for chunked writing in Http1xUpgradeToH2CHandler to ensure proper resource management by removing the " chunkedWriter " entry
added functionality to delete items in EnhancedBrowseFragment and FullDetailsFragment to enhance user experience by allowing users to delete items effectively
added a new ` RuleBank ` interface and refactored the existing ` RuleFinder ` and ` RuleFinder ` classes to improve rule management
added a try - catch block around the init method in JcaTlsCrypto. java to handle potential exceptions and improve error handling
added two new classes ` TestMonomorphicObjectCall ` and ` Object ` with native methods in ` Object. java ` to establish a
renamed method ` removeMetaDataSource ` to ` to ` toFront ( ) ` in ` DataBrowser. java ` and ` Desktop. java
hbase - 2658 fix nullpointerexception in defaultmemstore
[ hotfix ] [ runtime ] replace string with file in taskmanagerservicesconfiguration
updated AlterTimeSeriesStatement to set the ` isAlterView ` field as final and modified its value based on its value to improve flexibility in alter
fix : ` ` match text'' should not display human readable name
added error handling for RoutingTableBuilder retrieval in HelixBrokerStarter. java to improve robustness by catching potential exceptions and returning null
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4684. add
( chore ) camel - jms : use char [ ] instead of string
cs - 153 : don't try to invalidate a session if the session be invalidated
removed the ` equals ` and ` equals ` methods from the ` Counters ` class to simplify the code and improve performance by eliminating unnecessary complexity
updated the ` initialize ` method to return a new ` SimulationStatus ` instance with warnings to ensure that warnings are preserved in the simulation status
added a method to retrieve the current time in LLVMAMD64SyscallClockGetTimeNode. java and modified timestamp retrieval in Type
updated the handling of variable names in PrettyPrinter. java to improve clarity and maintainability of the code
added null checks for indexToNode in LRUDictionary. java to prevent potential NullPointerExceptions during iteration
modified filtering logic in DatagramSocket and DatagramChannelImpl to improve data handling to ensure proper filtering of datagram packets and prevent potential null pointer exceptions
testquerydns migrate from junit 5 to junit 5
added a new class NutchServerInfo with getter and setter methods to provide a structured way to manage and retrieve configuration, jobs, and
replaced ` tokStart `, ` tokEnd `, and ` savePosLen ` with ` attributes ` in ` EdgeNGramTokenFilter
added timestamp handling in CqlInserter, ThriftInserter, and SettingsColumn classes to ensure that all columns are written with the specified timestamp
refactor DSAParameterGenerator to handle prime strength more accurately to improve clarity and correctness of prime size validation
refactor NumberUtils and Numbers classes to use dedicated native float and double bit manipulation methods to improve code readability and maintainability by centralizing float and
updated the masking condition in InetAddressSet. java and added new test cases in InetAddressSetTest. java to ensure correct masking behavior and validate test
added handling for SQL constraint violations in DefaultJdbcOptimisticLockingExceptionMapper to improve error handling for database integrity violations
remove setzeroifnotfound ( false ) from remotingrequestforstatictopic and remotingresponseforstatictopic
added methods to create tabs with a specified font and icon to enhance flexibility in tab management
updated array conversion from new Object [ ] to new String [ 0 ] for consistency across multiple classes to ensure proper handling of zero - length arrays
[ hotfix ] [ test ] add taskmanagertermetrics to mockenvironmentbuilder
added null check for optional tags in MavenVisitor. java to improve robustness by preventing potential NullPointerExceptions
updated mock names in ZookeeperDataChangedListenerTest for clarity to improve readability and maintainability of the test cases
added a new file FormatCheckingTest. java to test the handling of ClassFormatError errors to ensure that the application correctly identifies and reports
updated line number assignment logic in CodeGenerator. java to ensure consistent line number handling throughout the code
added a try - catch block to handle potential exceptions during configuration retrieval to improve error handling and prevent application crashes
added methods to create toggle buttons with command options in RadioButton. java to enhance user experience by allowing toggling of toggle buttons based on command
updated LRUCache and MetadataQuerierByFileImpl to include cache size and increased CHUNK _ METADATA _ CACHE _ SIZE to improve cache management
changed the visibility of DEFAULT _ CAPACITY from private to public and updated related logic in ChannelParser and MessageBusParser to allow external access to
added null check for symbolicName before quoting to ensure proper handling of symbolicName to avoid potential NullPointerExceptions
bugfix : use system property ` ` -- external'' instead of ` ` -- external''
[ hotfix ] [ yarn ] don't wait for shutdown hook in iomanager
changed projectRoot to androidManifestPath in RobolectricTestRunner to ensure correct manifest path is used for testing
added a check for non - null not propagated headers in AbstractReplyProducingMessageHandler to ensure that headers are not propagated when merging
refactor CompareMode class to improve code readability to enhance maintainability and facilitate future updates
added HasTests implementation to Arg and RustLibraryDescription classes to enable testing capabilities in the build process
updated drawable resource for the recent image placeholder in FileMessageVH. java to improve clarity by using a more descriptive identifier
modified OnExitTest. java file to improve test reliability
added onUserPreferenceChanged method to recreate the taskbar to ensure the taskbar is refreshed when user preference changes
added methods to handle J9 compatibility in HeapDump. java to ensure compatibility with the J9 JVM and improve error handling
added try - finally blocks around session closure in MyBatisProducer. java to ensure proper resource management and prevent resource leaks
simonstewart : use the ie driver instead of the firefox one
updated TriggerPatterns in IteratorToFor. java for consistency and clarity to improve readability and maintainability of the code
added a setStateImpl method to JmxApplicationProvider to ensure the application's state is correctly set when an unavailable state is encountered
replaced calls to ` this. remaining ( ) ` with ` this. position ( ) ` and ` this. limit ( ) ` in multiple
replaced ` toUri ( ) ` method with ` split ( ) ` method in ` ConditionalResolverMergeFiles. java ` to improve code readability and
added methods to setEmpty with index and range checks in NativeArray, ArrayData, and DeletedArrayFilter classes to ensure proper handling of empty
changed the visibility of the Protocol and Transport enum from package - private to public to allow access to these enum from other packages
updated document handling in TestMultiPhraseQuery. java to improve clarity and maintainability of the test code
updated the assignTickets method to include payment method and modified filtering logic in TicketHelper to improve tracking of pending reservation statuses and enhance filtering logic
added a Thread for onTimeout handling in HttpChannelState. java to ensure proper thread safety during timeout operations
updated logging levels in SslBytesTest, SocketChannelEndPointTest, TrackingSocket, ServerTimeoutsTest, and HttpChannel to improve logging clarity and
updated package - info. java files for mmm and ppp packages to improve documentation clarity and maintainability
add consistencyforpaxos = = local _ serial for read command. patch by jbellis ; review by brandonwilliams
added condition to check for Home model in HeosDiscoveryParticipant. java and updated serial number handling in HeosPlayerHandler. java to ensure
added a ` Wait ` class with getter and setter methods in ` PlainSelect `, and created a new ` SelectDeParser ` class for
refactor Neo4j to use AttributeController for node and edge data retrieval to improve code readability and maintainability by centralizing attribute management
added null check for serverName in SessionManager. java to prevent potential NullPointerException when serverName is null
nifi - 5903 : move rocksdb metronome to controller package and deprecate rocksdb
updated the method to retrieve the value from results instead of a string to improve clarity and maintainability of the code
added logging for asynchronous execution in JavascriptContext. java to improve debugging capabilities for asynchronous URL execution
( chore ) camel - cxf : use system. out. println ( ) for headless mode
modified column modification logic in LoadTestTool. java to ensure proper handling of column modifications based on the existing Cf flag
added the Texture class to implement Disposable interface to ensure proper resource management and prevent potential memory leaks
added null checks for ` tldBundleLocation ` and replaced ` WebappRegistrationHelper ` with ` WebBundleDeployerHelper ` in multiple
refactor goquorum compatibility check into a separate method to improve code readability and maintainability
replaced IOException with Throwable in HttpInput. java to improve error handling by suppressed exceptions
added a condition to skip Thailand when the country is " JP " to ensure compatibility with era's locale handling
updated response type from Wrapper to HostResponseWrapper across multiple services to ensure consistency in API response handling
updated equality and hash code calculations in FilteredQuery. java to improve accuracy of query and filter comparisons
removed unnecessary whitespace in the FileMenuFilter constructor to improve code readability and maintain consistency
ggb - 196 fix : show geogebra debug info only if geogebradebug = true
added a new file TestCMSClassUnloadingDisabledHWM. java that tests CMS class unloading behavior to ensure that the CMS class
added a check for non - empty entities before creating an ItemTossEvent to ensure that the forge event is only created when there are
renamed ` KeyMappingPreparedStatementSetter ` to ` ItemPreparedStatementSetter ` across multiple files to improve clarity and consistency in naming conventions
replaced specific import statements with a wildcard import and updated bounds handling in CompactionsTest. java to simplify import statements and improve code clarity
added a null check for the " type " attribute in MiniAapt. java and created a test for invalid item resources in MiniAapt
added support for the SpEL Judge functionality in the ` OperatorEnum ` and ` OperatorJudgeFactory ` classes to enhance the functionality of
[ hotfix ] [ table - planner ] fix check for bigint type in ordinality symbol
replaced the use of ` sun. misc. Service ` with ` org. openide. util. Lookup ` for retrieving the default profiler to
updated ConscryptCertificateStore, Java8EngineSocket, Java8FileDescriptorSocket, ConscryptTest, and ConscryptBlacklist
removed conditional checks for resource name resolution in AttributeResolution9. java to simplify the code by eliminating unnecessary complexity
updated the source and target options in SetupHid. java from " 1. 5 " to " 6 " to ensure compatibility with the latest
changed access modifier of extractMetadataColumns method from private to public and added metadata handling in PushProjectIntoTableSourceScanRule to allow external access
added sorting functionality for localized names in AboutActivity to ensure that localized names are displayed in the correct order for better user experience
chore ( deps ) : upgrade gapic - generator - java to 2.8. 0 and update gax - java to 2.18.
added a conditional check for live streaming before posting a delayed runnable in HomeFragment. java to ensure refresh behavior only occurs when live streaming is enabled
added exception details to the MappingException for better context in AuditConfiguration. java to improve error reporting and context for better debugging
added awaitility for assertion in FileConsumerPollStrategyStopOnRollbackTest to ensure that the test does not hang indefinitely after a rollback
updated type parameters in CompositeType and DynamicCompositeType from List < AbstractType > to List < AbstractType <? > > to improve type
added support for transports in GitClientApplication and refactored URL handling in RepositoryUrlPanel to enhance functionality by allowing transport support and improve
added support for " Long press nav handle " functionality across multiple input consumers to enhance gesture recognition capabilities for better user experience
added null check for mavenMetadata before retrieving available versions to avoid potential NullPointerExceptions when mavenMetadata is not initialized
added null and empty checks for Large Page Support in TestLargePageUseForHeap. java to ensure robust handling of large page support and avoid
cloud _ usage db don't exist before migration
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 459
added a new test class ` TestObjectStreamClass ` and modified ` ObjectStreamClass ` initialization to improve test coverage and ensure proper initialization of `
updated null checks for getDataCenterInfo ( ) in ZoneAwareDiscoveryFilter. java to ensure proper handling of null data center information
change log level from error to warn for tracing data capture failure
added a ` toString ( ) ` method to the ` Generator ` class to provide a readable string representation of the registered generators
refactor quote handling logic in URI. java and add new test cases in Test. java to improve code readability and ensure correct handling of special characters
added a check for missing resources in ClusterControllerImpl and created tests for resource retrieval in ClusterControllerImplTest to ensure proper handling of missing resources
refactor AccepttoApiUtils to improve error handling and logging for API response extraction to enhance stability and debugging capabilities during API response processing
added support for Android version in VertexBufferObject to ensure compatibility with devices running Android versions
refactor SybaseASADatabase class to improve code structure to enhance maintainability and readability of the codebase
added a ` forceProjection ` flag to the ` HashJoinInfo ` class to control the projection behavior for backward compatibility
added a getter method for StringDistance in SpellChecker. java to provide access to string distance data
added constants for FLAG _ MUTABLE and FLAG _ IMMUTABLE in AndroidImplementation. java to improve code readability and maintainability by using defined
added methods to append read column IDs in HiveFileFormatUtils and refactored read column ID configuration in HiveInputFormat to improve code readability and
replace getUPNPAddress ( ) with getIPv4MulticastAddress ( ) in UPNPHelper. java to improve network handling by using IPv
added multiple instances of DisplayTemporaryToast ( ) to DisplayTemporaryToast ( ) in SavedExperiments. java to improve user experience by displaying a
updated ServiceInfo version handling in ServiceModule. java and added unit tests for ServiceModule resolution in ServiceModuleTest. java to ensure correct version
added a new test class RawSerializationTest for Gson serialization tests to ensure proper handling of parameterized and parameterized types in JSON serialization
simonstewart : use sslcertificategenerator instead of seleniumserver
updated the loop structure in ExpansionViewHelper to handle multiple replies to ensure proper padding of the status view based on the last replies size
updated the timeout assertion from 3 seconds to 60 seconds in ExpiringUrlCacheTests to improve test reliability by adjusting timeout duration
added a new test method ` testNGramFilterPayload ` in ` TestNGramFilters. java ` to verify the functionality of the NG
refactor AclImpl to improve code readability to enhance maintainability and facilitate future updates
added tests for different array sizes in EasyRandomTest. java to ensure randomized arrays behave correctly when fixed seed is used
[ citrix ] don't try to stop vms that don't exist.
added a ThreadLocal for ` __ tryWriteAgain ` to manage thread - locality to improve resource management and ensure thread safety during write operations
refactor actor handling by introducing an ancestor visible check to improve code readability and maintainability by encapsulating actor logic
log a message when a rolling - update step fails on the deployment - group to improve debugging visibility for deployment - group failures
[ hotfix ] [ table - planner - blink ] add nullability annotation to sinkprovider
added event handling for username not found errors in DaoAuthenticationProvider and LoggerListener to improve authentication failures and provide clearer logging for users
updated AtMostXVerificationTest. java file to improve test coverage and ensure accuracy
updated defType assignment from ` OldLuceneQParserPlugin. NAME ` to ` QParserPlugin. DEFAULT _ QTYPE ` across multiple
updated SimpleDateFormat to use Locale. US for date formatting to ensure consistent date formatting across different locales
added ` isInitialized ( ) ` method to ` ILanguageServer ` and created a new test class ` LocalsCompletionTest _ template ` to
updated test _ fetch _ token _ from _ authorization _ code to include an additional boolean parameter to enhance test clarity by specifying whether the token should
added beginTransaction ( ) and endTransaction ( ) methods to DatabaseAdapter and refactored transaction handling in GncXmlHandler to improve transaction
replaced byte array handling with ByteArrayOutputStream for reading and writing to improve performance and memory efficiency in MimeType
added multiple @ Override annotations and refactored exception handling logic in MessagingTemplate. java to improve code readability and maintainability while ensuring proper
added an ` isAcceptable ` method to the ` AutoFormatVisitor ` class to check if a source file is a compilation unit to enhance
added settings for maximum buffered docs and RAM buffer size in TestIndexWriterMergePolicy. java to improve performance and resource management during indexing operations
clear the wits list in Manager. java and add a test for updating walls in ManagerTest. java to ensure witnesses are
added error handling for ` NoSuchElementException ` in ` CopyOnWriteMap ` to improve robustness by handling potential ` NoSuchElementException `
change log level from info to debug to reduce log verbosity
updated authentication metrics and assertions in BasicAuthIntegrationTest. java and DaemonStream. java to improve test reliability and ensure accurate authentication metrics
replaced HashMap with LinkedHashMap for nodes in DependencyUtil. java to ensure predictable iteration order of nodes
added error handling for InternalServerErrorException in JerseySupport. java and updated module - info in JerseySupportTest. java to improve error reporting and
updated header validation logic in Http2TestBase. java to improve clarity and maintainability of the code
refactor system property handling to use a switch statement to improve readability and maintainability of the code
changed method parameter types from String to CharSequence in StringSubject. java and added corresponding unit tests in StringTest. java to improve type safety and
add jvm. getclassid ( ) and jvm. getEventwriter ( ) to checkgraalintrinsics.
rename IntUtilsTest to PrimUtilsTest to clarify the purpose of the test class
updated datasource creation logic in PersistenceManagerProvider to ensure correct data source is used based on configuration
[ hotfix ] [ doc ] fix typo in deploymentoptions
refactor updateTextButtonWithDrawable method to use Resources for drawable resources to improve code clarity and maintainability by using resource resources
updated resource handling in XmlParser and YamlParser to use try - with - resources syntax to ensure proper resource management and avoid potential resource leaks
added handling for COALESCE function in RexNodeConverter and registered it in SqlFunctionConverter to improve the functionality of coalesce functions in SQL
camel - hl7 fixed the unit test error of camel - core
updated context class loader handling in JavassistProxyFactoryFactory to ensure proper context class loader is used during proxy creation
added synchronized keyword to several DefaultDateTypeAdapters classes to ensure thread safety during serialization and deserialization processes
updated formatting in DocumentUtil. java for consistency to improve code readability and maintainability
refactor HttpClientRequestBase to simplify URI handling and improve test assertions to enhance code clarity and ensure correctness of URI and query parsing
added a method to filter old entries in FeedRefreshUpdater to improve efficiency by limiting the number of entries processed
[ hotfix ] [ wal ] change log level from fatal to warn.
refactor NodeMap class to implement Iterable interface and update iterator methods to improve type safety and enhance iterator functionality
updated import statements and variable names for clarity in DiscoveryClientRouteDefinitionLocator. java to improve code readability and maintainability by using more descriptive
added a check for non - empty fields before adding aggregation operations in MongoRecordReader and updated return logic in RexToMongoTranslator to improve handling of
added a check for an empty list of admins in DefaultAdminProvider. java to ensure that only admins are included in the list
replaced ` MultiFields. getFields ( searcher ) ` with ` getSlowAtomicReader ( ). terms ( field ) ` in multiple files to
updated the return statement to include the class name and identity hash code to improve clarity and accuracy of bean representation
updated the handling of the ` primitiveType ` variable in ` GroovyParserVisitor. java ` to improve clarity and prevent potential null pointer exceptions
svm : remove uninterruptible hashcode ( ) method from svm
increase offer timeout for seda blockwhenfull test.
added a new package - info. java file for test resources to provide package - level documentation for test resources
updated read length calculation in MessageUnpacker. java to ensure the read length does not exceed the buffer size
updated import statement for Nullable from ` micrometer. common. lang ` to ` micrometer. core. lang ` to
updated SQL query to include a user column in IconDB to ensure that the icon data is accessible for both components and users
( chore ) camel - test - infra - infra - infra - infra - infra - infra - infra
added a boolean parameter to the addWhitelistedResource method across multiple classes to enhance functionality by allowing whitelisted resources to be added only when
added a method to fix baremetal foreign keys in Upgrade410to420. java to ensure that foreign keys are properly managed and
deleted the Java2DRenderer interface and removed the IJava2DRenderer interface to simplify the codebase by eliminating unnecessary components
added onTearDown method to DefaultAudioSink for handling offloading buffer emptying to ensure proper cleanup of audio tracks when the listener is not
refactor UpstreamCacheManager to use ScheduledThreadPoolExecutor for scheduling tasks to improve thread safety and maintainability of the upstream task management
refactor StreamType class for improved readability to enhance maintainability and facilitate future updates
updated assertion message to include " Was not expecting this output " to improve clarity of assertion failure messages
updated FilestorePage and RootPage to use RequiresAdminRole instead of GitBlitWebSession to enhance security by requiring admin roles in the
( chore ) camel - elasticsearch : ignore broken test
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4594. ensure
updated button names in OfferBookChartView to use " buy " and " sell " instead of " left " and " right " buttons to
refactor MethodBasedRouter to improve path matching and error handling to enhance robustness and maintainability of the code
fix checkstyle issue in block. java
removed Serializable interface from BTreeMapJava and added serialCloneNoCatch method in ConcurrentSkipListMapTest to simplify serialization handling and enhance test coverage
added null check for getCause ( ) before logging error in RuleEngineImpl. java to avoid potential NullPointerExceptions during rule execution
updated conditional structure in Main. java for better readability to improve code clarity and maintainability
changed the return statement from mFilesAll. indexOf ( file ) to mFiles. indexOf ( file ) to ensure the correct index is returned
deleted the PlainVerifier. java file to remove unused code to streamline the codebase
added a conditional check to close system windows when triggered from AltTab to ensure that system windows are closed when triggered from the Alt - Tab
updated DialogFragmentIT and OCFileListBottomSheetDialog to use BottomSheetBehavior and OCFileListBottomSheetDialog to enhance dialog visibility and state management
added UTF - 8 encoding to the MimeUtil's parseCharset method to ensure consistent character encoding for HTTP requests
added a call to super. deinitialize ( ) in the TextField class to ensure proper initialization of the TextField
updated the test method to use TestUtilities for serialization to improve test reliability and maintainability
updated previous duration parsing in LogicalGenerator, GroupByFillDataSet, and PhysicalPlanTest classes to ensure accurate previous fill calculations based on last values
added checks for negative array sizes in JAXWSExceptionBase. java to ensure proper exception handling for negative array sizes
updated import statements in CtUnresolvedImportTest. java to use JUnit Jupiter API to ensure compatibility with the latest JUnit 5 testing
increased the timeout duration from 10 seconds to 60 seconds in T6567415. java to allow for more time for thread execution to complete
[ hotfix ] [ runtime ] change default scheduler component name from legacy to region
added ` setTitle ` and ` getTitle ` methods to ` ShadowActivity `, ` ShadowAlertDialog `, and ` ShadowDialog ` classes to
replaced Log and LogFactory with POILogFactory and POILogger in POIFSFileSystem. java to improve logging consistency and leverage Apache POI's
updated alarm handling in InstarHandler to improve clarity and functionality to enhance readability and maintainability of alarm processing logic
added latency tracking for map deletion in MapDeleteMessageTask to improve performance monitoring during map deletion operations
refactor response handling to use a switch statement for status checks to improve code readability and maintainability by using a single case statement
added a method to find the Java compiler location and updated the Java file listing logic to improve error handling and ensure the correct Java file is used
set project name to flutter project name if stable channel support it
added a new test class ` DeprecatedStubbingTest ` to test the behavior of stubbing methods in Mockito to ensure that the default behavior is
updated import statement from org. eclipse. jetty. server. DispatcherType to javax. servlet. DispatcherType to ensure compatibility with the latest servlet
added NML, WHNP, and VBD in EnglishGrammaticalRelations. java and EnglishGrammaticalStructureTest
add a system property to control whether to allow rsa key exchange.
replaced the use of ` output _ reader ` with ` reader ` in multiple files to ensure proper resource management and prevent potential memory leaks
added OAuthFactory and oAuthServiceHandleId fields to PubSubAPI and SDMAPI classes to manage and delete OAuth services and access tokens effectively
changed the interpolator from AGGRESSIVE _ EASE to EMPHASIZED in TaskbarEduView. java to improve animation
added handling for UpdateRegionLocationPlan in ConfigPhysicalPlan and updated logging levels in ProcedureManager and DataNodeInternalRPCServiceImpl to improve region management and
added a new file ` FileDialogLeakTest. java ` that tests the behavior of file dialog finalization to ensure that the file dialog
changed the package of TestOpenTableInCoprocessor from ` org. apache. hadoop. hbase ` to ` org. apache. hadoop.
svm : add @ uninterruptible annotation to truffletagefeature.
[ hotfix ] [ protobuf ] remove unused message type method
added a null check for dims [ 1 ]. disi in DrillSidewaysScorer. java to prevent potential NullPointerExceptions when
added source info refresh handling to ExoPlayerTest and FakeMediaSource classes to ensure thread safety during source updates and improve synchronization
added constants for JVM version and minimum Java version in Constants. java to improve compatibility with different Java versions
updated FileReporter constructor to accept explicit types for null values to improve type safety and prevent runtime exceptions
updated the condition from ` isFalse ( ) ` to ` isTrue ( ) ` in ` SettingsActivity. java ` to ensure end - to -
added functionality to toggle the visibility of the action bar in the DirectMessageConversation class to improve user experience by allowing navigation through the action bar
added GET _ USER request handling and updated protocol version in RpcServlet and RpcUtils to support anonymous users in the authentication process
added @ EnabledIfSystemProperty annotation to TestJdbcPluginWithMSSQL to enable compatibility for different operating systems
updated the handling of the original start class in WhiteboxImpl. java to ensure that the strategy correctly references the original start class
updated address formatting and improved local handling in DexBody. java to enhance readability and maintainability of the code
replaced calls to ` getResponse ( ) ` with ` getSuppliedResponse ( ) ` in ` TestAsyncContextImpl. java ` to ensure that
drools planner : fix the nasty look and feel of the planner
updated regex pattern in AppPage. java to ensure consistent formatting to improve code readability and maintainability
refactor AnimatorListenerAdapter to use final variables for visibility and translation to improve code readability and maintainability
dumpedprivatekey. getversion ( ) return version instead of base58
updated the variable name from ` offerPayload ` to ` newOfferPayload ` to improve clarity by using a more descriptive variable name
modified milestoneParameters initialization to conditionally create OpenTickets and RepositoryParameter based on the milestone state to improve flexibility in handling milestone states based on the
change the energy limit from 640 to 80 in PipeItemsWood. java to accommodate additional battery stability
updated the ` getStateMachineClusterInstance ` method to include a blueprint name and revision parameter to enhance functionality by allowing dynamic blueprint identification based on
initialize downgradeAllowed to true in UpgradePack. java and add a test for isDowngradeAllowed method in UpgradePackTest. java to ensure
updated scan method calls to use ELEMENTSTART and ATTRIBUTENAME instead of ATTRIBUTE to ensure correct handling of XML entity types during processing
added configuration for emulation of system load libraries in Configuration. java and updated library loading logic in Library. java to enhance system configuration flexibility and
replaced instances of ` APP _ NAME _ COMPARATOR ` with ` getAppNameComparator ( ) ` in ` AppsCustomizePagedView.
added closeEntry ( ) and modified File creation logic in DefaultPlatformManager and FatJarStarter to ensure proper resource management and prevent potential memory
updated the doTest method signature and assertion messages in TestSecretKeyCredentialHandler. java to improve clarity and accuracy of the test assertions
refactor RouteBuilderFinder to use SpringCamelContext instead of ApplicationContextAware to improve flexibility and maintainability of the RouteBuilderFinder class
updated error messages for reporter identifiers in MetricOptions. java to ensure only applicable for push - based reporters and improve clarity in scope formatting
refactor configuration settings in TestFullLogReconstruction. java to improve clarity and maintainability of configuration management
added a ` reuseAddress ` boolean to the ` DatagramSocketOptions ` class to allow customization of the socket's reuse address behavior
updated player kickPlayer method to use the shutdown message instead of a hardcoded string to improve user experience by providing a more descriptive shutdown message
deleted the deprecated Locatable interface to the interface was deemed unnecessary for future removal
updated error message to clarify that the field must be either indexed or have docValues to improve clarity and accuracy of the error message
replaced equalityPredicateColumns with predicateColumns in StarTreeIndexOperator. java to improve clarity and maintainability of the code
updated the initialization and disconnect logic in HandshakeHandler. java to ensure the correct identity is used during the hello message handshake process
fixed whitespace in Navigator. java to improve code readability and maintain consistency
removed private access modifier from fields in RecordReaderFactory. java and added a test class for ParquetRecordReaderConfig. java to enhance encapsulation and
added support for GREATER _ THAN _ EQUAL and GREATER _ THAN _ EQUAL queries in MongoQueryCreator to enhance query capabilities for
refactor group by expression handling in CalciteSqlParser to improve clarity and maintainability of the code
updated MappedByteBuffer and FileChannelLinesSpliterator to use AtomicInteger for buffer management to improve resource management and prevent potential memory leaks
replaced local variable ` l. getValidator ( ) ` with a local variable ` validator ` to improve code readability and maintainability
added a schedule method to CircuitBreakerImpl and modified test method signature in CircuitBreakerTest to improve circuit breaker execution handling and enhance test reli
removed FLAG _ ACTIVITY _ EXCLUDE _ FROM _ RECENTS from intent flags to simplify intent handling by eliminating unnecessary flags
webui : change default upload progressbar from ajax to progressbar
added @ Disabled annotation to TableExtRetrieverTest to disable retrieval strategies for column privileges
added synchronized keyword to the addExportedCount method to ensure thread safety when exporting data
replaced ` IntRangeUtil1. requireNonNegative ` with ` IntRangeUtil. requireNonNegative ` in ` MetricsImpl. java `
updated character validation logic in HttpParser. java and added a new test for encoded headers in HttpParserTest. java to improve character handling and
updated layout reference from trends _ activity to configuration _ activity to clarify the purpose of the configuration activity
corrected the spelling of " pos " in SLWTTextListing. java to ensure accurate logging of SLWT text in the document
added a new ` ForceLeaderTest ` class and modified ` useTlogReplicas ` logic in ` ForceLeaderWithTlogReplicasTest `
refactor Thread class to improve thread management to enhance performance and maintainability of thread management
updated template file suffix settings for HTML, XML, and CSS to improve clarity and maintainability of template file configurations
camel - cxf fixed xml namespace issue with cxf
updated YamlRepresenter class structure and removed redundant lines to improve code readability and maintainability
updated month formatting in ToChar. java and added a test for timestamp truncation in TestFunctions. java to improve month representation accuracy and ensure
added validation checks for valid transactions and write IDs in GenericUDTFGetSplits. java to ensure that only valid transactions and write IDs are
replaced ArrayList with Collections. emptyList ( ) for column name and type properties to improve code readability and avoid potential null pointer exceptions
added null check for the book path in DataHolder. java and introduced a method to check if the book path exists to improve robustness by
renamed ` SSTDeserializer ` to ` SSTDeserializer ` and updated related methods accordingly to improve clarity and consistency in naming conventions
added a constant ` DEFAULT _ GRID _ COLUMN ` and modified the retrieval logic in ` AppPreferencesImpl ` to ensure consistent default grid column
improve error message when empty - differences in line breaks be present
added a boolean ` waitingForKeys ` to ` DecoderInputBuffer ` and corresponding tests in ` ClippingMediaPeriod ` and ` SampleQueue
updated API endpoint paths in OkexV3. java to ensure correct API endpoints for account management
removed unnecessary comparison operators in LineUtilitiesTests. java to simplify code logic for better readability and maintainability
added support for varargs and old array syntax in JavacParser. java and created new classes VarargsAndOldArraySyntax. java and T6
changed visibility of DefaultDrmSession and added playback thread verification in DefaultDrmSessionManager and DefaultDrmSessionManager to improve encapsulation and
added methods and constants to the VariableContext class for member access and method calls to enhance functionality and maintainability of the variable context handling
add test for invalid compilation unit json
updated buffer limit logic in Piece. java and SharingPeer. java to ensure proper position and capacity of the buffer
added HttpClientProperties as a response timeout in NettyRoutingFilter and updated related classes to support customizable response timeout durations
refactor ` getNativeLinkTarget ` method calls to use ` getTargetForPlatform ` instead of ` getNativeLinkTargetGroup ` to improve code clarity and
added unit tests for the MainRestConfiguration class to ensure REST configuration functionality works as expected
added support for handling RexFieldAccess in ASTConverter and RexNodeConverter to enhance functionality for field access handling in the query planner
added a private static final array QUERY _ LOG _ ENTRY _ VALUES in QueryLogger. java to improve code readability and maintainability by using a
fix : add relativizenodelazy ( ) to webclientrequestbuilder
updated certificate handling logic in PKCS12KeyStore. java and StoreSecretKeyTest. java to improve clarity and maintainability of certificate processing logic
added reflection access checks in Bootstrap and refactored methods in ReflectionCheckLinker to improve security by ensuring proper access checks during reflection operations
removed the public modifier from the CollisionMap constructor to allow instantiation of the CollisionMap class
changed the annotation from @ NotNull to @ Deprecated and added a null check for the raw input to indicate that the input must not be null to
refactor logging level handling in ConfigurationValueConverter and Main classes to use a switch - case structure to improve code readability and maintainability by using a
remove region _ id from insert statement in configurationserverimpl.
added support for EncryptedDocumentException in OldExcelExtractor to ensure compatibility with older Excel files
graalvm : add ` -- add - exports = com. oracle. svm. core. jdk = ALL - UNNAMED ` to
removed unnecessary spacing in TimeLineCursorAdapter. java to improve code readability and maintainability
increased the scheduler timeout from 10 to 50 milliseconds in BatchingStateChangeUploadSchedulerTest. java to allow more time for attempts to complete before timing
refactor directory creation and deletion methods in ShadowContext and ContextTest classes to improve code clarity and maintainability by consolidating directory deletion logic
updated exception handling to use ClassNotFoundException instead of ExceptionFactoryImpl to improve error handling reliability and maintainability
increased WAIT _ TIME _ MS from 10000ms to 60000ms to allow more time for waiting operations
replaced CLAIMS with a wildcard import and added AUD handling in ConnectOAuth2RequestFactory and ConnectTokenEnhancer to simplify
( chore ) camel - kafka : change default value of ` breakonfirsterror ` from ` true ` to ` false `
added a new constant selectableItemBackground with a value of 0x10a13 to define a selectable item background for better visual representation
consolidated multiple import statements into a single wildcard import and added a placeholder method for placing stop orders to streamline import statements and prepare for future
updated event type assignment logic in TxnSetOperation. java to ensure consistency in event type handling
added a new class ` ResumableRandomAccessFileListener ` and updated ` ResumingExternalDownload ` to use it to improve resource management
updated class name from " AccessLogValve $ 3 " to " AbstractAccessLogValve $ 3 " to accurately reflect the class's
added support for handling multiple formats in HSSFDataFormat. java and updated test assertions in TestWorkbook. java to improve data format handling and ensure
[ hotfix ] [ kafka ] deprecate flinkkafkaproducer in favor of flinkkaproducer
updated the maximum compressed length check from CHECKSUM _ LENGTH to info. parameters. maxCompressedLength ( ) to ensure that the compressed chunk length
added a new RedisStringIdempotentRepository class to manage string - based keys in Redis to enable users to mark or remove string values asempotent
fix containerrepair use metadata instead of damage
added conditional logic to conditionally return the path of an artifact based on repository layout to improve artifact path handling based on repository layout
added checks for task manager initialization and improved error handling in LocalTaskManagerThread and JobManager to enhance robustness of task manager initialization and provide
added detailed error messages for artifact deployment in AbstractArtifactResolutionException. java to improve debugging capabilities and provide clearer context for artifact deployment
updated the method to retrieve the internal temporal path in UploadFileOperation. java and added a new method in FileStorageUtils. java to improve
replaced imports and added a method to retrieve FeedEntryStatus based on entries to enhance functionality by allowing retrieval of FeedEntryStatus based on existing entries
added execution logic for VertxThread in ContextImpl. java and updated test cases in BlockedThreadCheckerTest. java to ensure proper blocking
updated the ` instantiate ` method to accept a ` formatterString ` parameter and introduced a null check for ` ctorArg ` to improve flexibility in
updated LoadContactsTask to conditionally load Ezvcards based on Android SDK version to ensure compatibility with devices running Android O and above
replaced setRemoteAddress and setRemoteHostname methods with direct assignment of remote address and hostname to streamline code by eliminating unnecessary setter methods
added a null check for the realClass in Robolectric. java to ensure that the shadow class is not annotated with @ Implements
added a check for ` tlsMutualAuthenticationCertificateChain ( ) ` to ` NettySslContextFactory ` and ` ExampleNettySslContextFactory ` to
updated character encoding from'*'to'ISO _ 8859 _ 1'and added a test for requesting a plain HTTP endpoint over HTTPS to
added getter methods for consumer, producer, and consumer in AbstractKafkaResumeStrategy to enhance accessibility of shared resources within the Kafka resume strategy
refactor event handling in PageChangeListener and FrameRenderer classes to improve code readability and maintainability
updated log message from email to SMS in CommunicationsManager. java to clarify that both email and SMS settings are configured
# 786 - optimize query optimization for bean with many to one association
added error handling for file transfers in MultipartBody. java to improve reliability of file transfers and handle potential IO exceptions
updated array declaration syntax in ExecutableFactory. java and ZipFolder. java to improve code readability and maintain consistency
refactor EndpointConfiguration, SpEL, MainSupport, and SSLContextParameters classes to improve code organization and maintainability
fixed bug in attachfileaction that could not be retrieve from the database.
added SchemaInfoLevelBuilder to LoadOptionsBuilder in AccessTest. java to enhance schema loading options with detailed schema information
updated test package structure and added a new test method for loading legacy libraries to improve organization and ensure proper testing of legacy library functionality
modify TestReader to return null instead of throwing an exception to simplify error handling by returning a default value
added methods to set properties for the prototype's name, enabled, and expanded state to improve property management and enable / disable functionality
refactor connection handling to use a try - with - resources statement to ensure proper resource management and avoid potential resource leaks
[ hotfix ] [ runtime ] fix typo in datastreamjob
replaced FileOutputStream handling with try - with - resources for better resource management to improve error handling and prevent potential resource leaks
( chore ) camel - cxf : fix classcastexception in cxfendpoint
added a condition to check if the protocol is " h2 - 14 " and not " h2 - 14 " to ensure proper handling of
refactor method and parameter handling in LambdaToMethod and ClassFileVisitor to improve clarity and maintainability of the code
updated the SBARQ regex pattern in CoordinationTransformer. java to improve accuracy in matching phrases
increased the timeout duration from 5000ms to 60000ms in DL4JInceptionV3Net. java to allow longer time to download files
added a line to set the slop in the QueryParser to improve query parsing efficiency
increased sleep duration from 10ms to 100ms in LongPressMouseListenerTest. java to allow for more time to trigger actions
updated the default value of ` metricsServers ` from 8188 to 6188 in ` FlumeTimelineMetricsSink ` and ` HadoopTimelineMetrics
added a new method ` scheduleParallel ` to ` GameScheduler ` and updated its usage in ` ScreenGrabber ` and ` Terasology
updated visibility logic for the compound view based on available edit options to ensure the correct visibility of the view based on available edit options
added a calculation for progress in DepthController. java to ensure progress does not exceed threshold limits
added implementation of ` packetReceived ` method in ` ClientSession `, ` ComponentSession `, and ` Session ` classes to enable handling of
added debug logging in DefaultCasDelegatingWebflowEventResolver and refactored authentication logic in DelegatedAuthenticationGenerateClientsAction to improve trace
added null checks for service in SamlIdPEntityIdAuthenticationServiceSelectionStrategy and improved error handling in SamlIdPMetadataUIAction
added hidden attribute to account level permissions configuration in PantheonCommand. java to enhance security by allowing account level permissions to be enabled via smart
added a method to exclude the " androidx. room. CoroutinesRoom $ Companion " class from the builder to ensure that
removed the use of ` PlatformLogger ` in ` NegotiateAuthentication. java ` to streamline the code by eliminating unnecessary logging
removed the setInitScript method from InitializingDataSourceFactoryBean to streamline the initialization process by eliminating unnecessary configuration
camel - core - activemq : added maxconcurrentconsumers option to persistentqueuereplymanager and temporaryqueuereplymanager.
refactor AuthenticationProvider and TargetObject classes to improve code readability and maintainability
added tagging logic in PdfDocument. java to ensure lines are properly flushed and closed when writing to the document
added a test method for the ` PatternLayout ` pattern selection in ` PatternLayoutTest ` to ensure that the pattern matching functionality works as expected
updated HTABrowserLauncher to launch Selenium tests in HTA mode and streamlined test execution in WindowsHTMLRunnerTest to improve test reliability
added MwThankPostResponse class and updated the thank method signature to include a new response type to enhance functionality by allowing users to receive
added SocketBased interface to ChannelEndPoint and updated SslConnection to use it to enhance socket handling capabilities and improve code clarity
replaced the initialization of ` revokingStore ` with direct calls to ` enable ( ) ` and ` disable ( ) ` methods to stream
added unit tests for the implicit joins in HQLTest. java to ensure correct functionality of the query in JPA
updated the normalization of expected and actual strings in NonVisualRegressionTest. java to ensure consistent handling of line breaks in test cases
replaced direct calls to ` incRef ` and ` decRef ` with a single collection variable ` filesToCommit ` and initialized ` filesTo
added @ final annotation to several methods in BaseError. java to indicate that these methods should be executed after each other
added validation for user resource percentage in ConsumeUserResourcePercentActuator to ensure that percentage values are valid before proceeding with the contract
added a condition to conditionally show the legacy login based on the presence of a resource boolean to enhance user experience by allowing users to conditionally show the
renamed the test class from ` StreamNetworkThroughputBenchmarkTests ` to ` StreamNetworkThroughputBenchmarkTest ` to clarify the purpose of the
updated response page from EditTeamPage to UsersPage to ensure the correct page is displayed for users
updated log message from " error with cred file during startup " to " error initializing plugin credentials " to improve clarity of logged errors during plugin startup
try - finally blocks to ensure proper resource cleanup to improve resource management and prevent potential resource leaks
refactor Rocket class to improve code structure to enhance maintainability and readability of the code
added a method ` createDynPartSpec ` to handle dynamic partition specification in the semantic analysis to improve handling of dynamic partition creation in the
refactor rounding mechanism in Kernel and StringTemplate classes to improve accuracy and maintainability of rounding behavior
added directory traversal methods in JarDirectoryStep and corresponding test cases in JarDirectoryStepTest to ensure proper handling of directory entries and improve test coverage
added a new file JWKSetEditor. java to handle JWKSet values to enable customizable editing of JWK sets
refactored term handling in OrdsBlockTreeTermsWriter and BlockTreeTermsWriter to improve clarity and maintainability of term processing logic
add truffle boundary for method resolution in invokeespressonode and toespressonode.
changed the default value of fetcher threads per host from true to false to disable fetcher threads per host by IP by default
added a condition to check if ` timeToLiveOfQuery ` is greater than ` queryTimeout ` to ensure that ` queryTimeout ` does not
added imports for UnconfiguredTargetConfiguration and TargetConfigurationHasher in HaskellGhciRuleIntegrationTest. java to ensure correct generation
refactor ReplicaPosition class to improve code structure to enhance maintainability and readability of the code
cloudstack - 709 : use agg date for network usage stats update task
updated interpolators to use FINAL _ FRAME instead of hard - coded values to improve code readability and maintainability by centralizing interpolators
adjusted the height calculation for the nav bar's visible bounds based on swipe duration to improve navigation bar responsiveness based on display density
added a new module - info. java file for ` org. eclipse. jetty. http3. server ` to define module dependencies for HTTP
updated valueFields to handle null values and introduced constants for JSON object names to improve robustness and maintainability of JSON handling
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4796
[ hotfix ] [ runtime ] use default value of 0 instead of optional.
updated the ` reportInnerClassReferences ` method to accept a ` Element ` parameter instead of a ` TypeElement ` to improve clarity and functionality
updated command line argument formatting in TimestampCheck. java to improve code readability and maintainability
replaced FluentIterable with Java's MoreCollectors for file listing to simplify code and improve readability by using modern Java features
updated the register flag from true to false and added a constant for it in Constants. java and ServiceConfig. java to enable the registration of
added security otr mode handling in SettingsManager and updated close method in OTRManager to ensure proper termination of all sessions based on security settings
added properties for node label outline size and transparency in PreviewProperty. java and updated renderProcessing method in NodeLabelRenderer. java to enhance label
refactor ProxySelector, URL, URLStreamHandler, and URL classes to improve code organization and maintainability
changed the boolean value from false to true in Win32FontManager. java to enable the font rendering in the user interface
added a null check for the TreeVisitor before visiting the tree to ensure cursor is set when the visitor is not null
added error handling policy based on the presence of classpath in JDTBatchCompiler to ensure proper handling of compiler errors based on environment configuration
added properties and methods to set content and text anchors in LabelBlock to enhance flexibility in label generation by allowing customizable alignment options
refactor mmm Class and ppp Parameter classes to improve code readability and maintainability
refactor IndexReader to improve code readability to enhance maintainability and readability of the code
changed the type of ` isLoopback ` from ` boolean ` to ` Boolean ` and added null checks for ` networkInterface ` to improve
updated the ` fromRfc1123DateString ` method to accept a locale parameter to ensure consistent date formatting across different locales
fix file download test due to extension mismatch
nifi - 3952 : add output _ no _ hits property to el - rest
cloudstack - 7091 : fix bug in quota update method.
[ java ] don't wrap switch statement in try / catch block.
don't close directory stream when there's nothing to process
refactor widget event handling in PageChangeListener. java to improve clarity and maintainability of widget event management
added an ` isWriteProtected ` method to the ` Workbook ` class and modified username reading logic in ` FileSharingRecord ` to
added error handling for unregistering invalidated sessions in PluginMonitoringFilter to improve robustness by logging exceptions during session unregistration
refactor CategorizationFragment to improve code readability to enhance maintainability and facilitate future updates
updated the status message in HueLightHandler from " false " to " not reachable " to clarify that the bridge reports light as not reachable
added a loading flag and a method to check its value in FMLClientHandler. java, and created GameSettings. java for loading state
updated return statements to use ` getOrNull ( ` ` unit. millions'' ) ` instead of ` ` k'' to improve accuracy
replaced Preconditions check with a switch statement for byte types in MessagePackParser. java and added unit tests for BinKeyPojo. java to improve
added parameterized tests for querying reserved words as identifiers in HqlQueryTransformerTests to ensure proper handling of identifiers in query transformations
added tests for serialization and deserialization of nested maps in MapTest. java to ensure correct handling of nested maps in JSON format
added bounds checking for x2 and y2 in GeometryUtils. java to ensure that offset does not exceed defined limits
renamed ` SORT _ ORDER _ DIALOG _ TAG ` to ` SORT _ ORDER _ DIALOG _ FRAGRMENT ` and updated related
added error handling for empty TestPlan in StandardJMeterEngine. java to improve robustness by gracefully handling cases where no tests are available
replaced instances of " dbmsName " with " getDbmsName " and " getSchemaName " in GeneratedEntityTranslator and JdbcManagerSupportImpl
refactor argIdent assignment logic to handle both strict and non - strict identifications to improve robustness by ensuring argIdent is only set when
updated the default protocol from " SSL - HTTP / 1.0. 1 " to " SSL - HTTP / 1.0. 2 " to ensure the correct
volume : set default value of displayvolume to true
refactor version method to accept a boolean parameter and update message retrieval logic to improve flexibility in versioning and provide clearer error messages
refactor conditions for retrieving ChangeLogParameters to improve clarity and handle multiple ChangeLogParameter types to enhance code readability and maintainability while ensuring correct
changed log level from warn to debug in JtaTransactionManager. java to improve logging granularity for debugging purposes
skip setoperationtest due to oracle failure
removed redundant calls to startHandshake ( ) and setSoTimeout ( socketTimeout ) in the Connection class to streamline the code by eliminating
updated action bar size calculations in HomeFragment, DMFragment, ListFragment, and MentionsFragment to exclude MainActivity's popup status bar
change default value of ` CHA ` from false to true in ` EspressoOptions ` and ` DefaultClassHierarchyOracle ` classes
fix for http : / / issues. apache. org / activemq / browse / amq - 243
refactor JodaTimeRangeRandomizersTest to use a wildcard import and simplify import statements to improve code readability and maintainability by eliminating unnecessary dependencies
updated WebDescriptor. java to redirect requests based on servlet version to ensure compatibility with servlet version 5.
refactor readiness check to use a constant for node ready status to improve code readability and maintainability by centralizing status checks
use handler. endpoints instead of liveEndpoints in StorageProxy to ensure proper access to the handler's endpoints
added a null and empty check for creationStatements in IdTableHelper. java to ensure proper handling of null and empty creationStatements
updated RPC _ VERSION from 1 to 2 in DataRpcConfig and UserRpcConfig to reflect the new versioning requirements
added security manager check before calling ReflectUtil. checkPackageAccess in ObjectStreamClass and ObjectStreamField classes to enhance security by preventing package access
removed unused imports and simplified return statements in Utils. java and XLCDCommunicator. java to improve code clarity and maintainability
refactor DefaultMetricsTagProvider to use a HashMap for tags instead of ImmutableMap to improve code readability and maintainability by centralizing tag handling
updated the addTestSuite method in ClientDriverSuite. java to ensure consistency in test suite setup
changed default level from OFF to ERROR in opt2 to accurately reflect the severity of the error message
changed fields to be final in IconNormalizer. java to ensure immutability of fields and improve code readability
added a boolean flag ` firstCallPrepareDo ` and modified the ` invokePrefixMethod ` method to conditionally invoke it based on its value to
refactor showWorkspaceAndExitOverviewMode and showWorkspace methods for better clarity to improve readability and maintainability of the code
added Singleton annotation to AuthWithStoreFeature and updated binding syntax in Auth. java to ensure proper dependency injection and improve code readability
added a boolean parameter to the incomingAssociations method to control the visibility of associations based on the ignoreInvisibleAssociations parameter
cloudstack - 7091 : fix npe in configurationmanager # removeconfigurationfrompod
updated the description of the Async profiler command in ProfileServlet. java to provide more context about the Async profiler's execution duration
added a new class ` RequiredRefFieldModel ` and updated related logic in ` ModelResolver ` and ` RequiredFieldModelTest ` to enhance
renamed classes from " CasCore " to " CasCoreConfigurationWatch ", " CasCore ", " CasCore "
refactor FeatureFlags class to improve code readability to enhance maintainability and facilitate future updates
updated string construction and modified hue ID formatting in ConfigStore. java and added a test for handling large IDs in ItemUIDMapping. java to
added caching functionality for images in TimeLineCursorAdapter and TimelineArrayAdapter to optimize image handling by avoiding unnecessary bitmap updates
updated compaction configuration messages in HiveConf. java to clarify that minor compaction can be disabled via queries
added a null check for mWaitingToSend. getStoragePath ( ) in FileDisplayActivity. java to ensure stability by preventing potential null pointer
updated resize threshold checks to use a dedicated method to improve code readability and maintainability by centralizing resize logic
updated LDAP connection handling logic to improve reliability and maintainability of the LDAP connection management
added @ Deprecated annotations to AggregateDefinition. java to mark the XML attribute as deprecated to indicate that the attribute is outdated and should not be used
added debug tracing logs for input events in TouchInteractionService. java and updated TestProtocol. java to include a constant to improve traceability of
added a condition to check if the class name starts with " com. intellij. rt. junit. " to ensure compatibility with IntelliJ IDEA build
updated assertions in TestMultiSearcher to check for the length of hits2 instead of hits to ensure that the test accurately reflects the correct
added a new file ` LucenePackage. java ` that defines a private inner class ` LucenePackage ` to facilitate the retrieval of a
updated the calculation of sizeInBytes in RAMDirectory. java to ensure sizeInBytes is correctly decremented before adding to the existing size
updated calculations and introduced an estimate method in GenericUDAFBloomFilter, GenericUDAFEvaluator, and BloomKFilter classes to improve
added a null check for getDrawerToggle ( ) before performing animations to prevent potential NullPointerExceptions when getDrawerToggle ( ) is not initialized
added @ SuppressWarnings ( " unused " ) annotation to the convertToAuthentication method to suppress warnings about the subject being unused
added functionality to enable system jars and modules in the Scanner class to improve flexibility in managing system class loader configurations
add support for corporate bib file export in msbib file ( # 2595 )
added a method to cancel core recovery in CoreContainer. java to ensure core recovery occurs only when ZooKeeper is enabled
refactor time measurement calculations in bug5070081. java to improve accuracy of position difference calculations
removed debug print statements and simplified condition checks in RepoEditView. java to improve code readability and maintainability
updated startup message descriptions for PostgreSQL connection parameters to improve clarity and maintainability of the codebase
added support for hierarchical roles in SecurityEvaluationContextExtension and corresponding test cases to enhance security evaluation capabilities and ensure correct behavior when additional fields are not
added a check for exponentSize in DHParameterGenerator to ensure proper initialization of exponentSize based on primeSize
replaced direct use of ` getSavePath ` with ` getUsableSpace ` in multiple files to improve code readability and maintainability by using
updated the ` combine ` method in ` DistinctSqlAggregation ` and added unit tests in ` DistinctSqlAggregationTest ` to improve aggregation
added unit tests for user authentication in UserServiceTest. java to ensure correct execution of post - login activities for successful authentication
extractorspanishstrippedverb : add constructor to extractorspanishstrippedverb
refactor CharArraySet to simplify code structure and improve string comparison to enhance readability and maintainability of the code
updated track format validation logic in MuxerWrapper. java to ensure compatibility with different track formats
updated JsBundleGenrule and JsBundleGenruleDescriptionTest to use AndroidPackageableCollector instead of JsBundleAndroid to improve clarity and functionality
added character encoding to PinotClientRequestServlet and refactored string index retrieval logic in StringDictionary to ensure proper handling of UTF - 8
corrected terminology from " Logical Analyzer " to " Logic Analyzer " and updated resource references accordingly to improve clarity and maintain consistency in terminology
added instance class handling in AbstractVector to ensure proper instantiation of the Vector instance based on class name
removed syncMetaLeader ( ) method from CMManager. java to streamline synchronization by eliminating unnecessary synchronization
refactor response and no response html generation in FeedbackContributionQuestionDetails. java to improve readability and maintainability of the code
added TestLoggingExtension to DiagramRendererTest to enable logging functionality during testing
added a boolean parameter ` useCamelCaseMapping ` to several methods in ` MetaObject `, ` BeanWrapper `, and ` MapWrapper
added a new VIOMI _ WATERHEATER _ E1 device to the MiIoDevices class to support the electric water
rename variable from ` getSslSessionData ( ) ` to ` SslSessionData ` for clarity to improve code readability and maintainability by using
add a new file ` CreateNewSpreadsheet. java ` that creates a spreadsheet with multiple sheets to implement functionality for creating new Excel sheets with
replaced ` ttl ` with ` timeToLive ` in ` CacheProperties ` and updated related getter and setter methods accordingly to improve clarity and consistency in
updated content URIs to use CONTENT _ URI _ NO _ NOTIFICATION instead of CONTENT _ URI to ensure notifications are handled correctly in the favorites
updated the version of the testCompile group from 2.16. 0 to 2.16. 2 in SwaggerResolveTest. java to ensure compatibility with
replaced ` synchronized ( lucidaFontName ) ` with ` synchronized ( this ) ` to ensure thread safety when accessing shared resources
added a condition to check if the character is a'<'in DocClassUtil. java to ensure proper handling of special characters in the
updated the return statement to remove unnecessary String. format calls to simplify the code and improve readability by eliminating unnecessary string concatenation
added Liquibase validation error handling in ValidateCommandStep. java to inform users of missing validation errors in the application
refactor IntegrationTestContextLoader to use WebMergedContextConfiguration for web resource configuration to improve resource handling and maintainability of web application context setup
updated scroll handling logic and added conditional checks in multiple classes to improve responsiveness and ensure proper handling of wheel movements
updated conditional statement formatting in RamlType. java to improve code readability and maintainability
added ` ClientStat ` class and updated related methods in ` StatsService ` and ` DefaultStatsService ` to use ` String ` instead of
updated expression construction to replace occurrences of " $ 1 " with " $ \ n1 " and remove " $ 2 " type to improve clarity
simonstewart : fix test failure on window
mondrian : fix typo find by codespell on fossies. org
added stack trace printing functionality in ProcessTools. java and updated CustomLauncherTest. java to include specific launcher permissions to improve debugging capabilities and ensure
added a test method for embedded images in TumblrRipperTest to ensure proper functionality of the TumblrRi
added a check to ensure the symbol has a slot before converting the store type to avoid unnecessary conversions when the store type does not already exist
[ java ] remove unnecessary subrange call when next load position be zero.
refactor BaseLockFactoryTestCase to use a custom toString method for string conversion to improve code readability and maintainability by centralizing string output handling
added a method to check if the component is dynamic in the ServiceLoader and updated TikaConfig to use this method to improve flexibility in loading
added warning messages for unexpected package declarations in DocLint. java and created new test classes in DocLintTester. java to improve error reporting and
added a static constant for the import command in DataImportHandler. java and defined a constant IMPORT _ CMD in DataImporter. java to improve
added a test method to verify behavior when modifying inner classes based on ignoreDefinition to ensure that modifications do not affect inner classes when the ignoreDefinition
added import statement for android. util. Log in JettyService. java to enable logging functionality in the Jetty service
added a new parameter ` workspaceScreens ` to the ` checkItemPlacement ` method and updated related logic accordingly to improve item placement checks by
kristianrosenvold : add servlet to kill jvm
[ hotfix ] [ runtime ] fix npe in llrealtimegmentdatamanager
added logic to skip Teredo nic detection for Windows to ensure compatibility with Teredo operating systems
add contact error dialog for non - connected contact.
replaced the registration of the USER _ DETAILS _ SERVICE _ FACTORY with a direct registration of the bean component to simplify the registration process
updated drawBitmap method to use null instead of the left and top parameters to improve performance by avoiding unnecessary drawing operations
fix meitrack and totem date format ( yymmdd )
changed access modifiers of getFontPath methods in SunFontManager and X11FontManager to enhance encapsulation and improve font path retrieval logic
added @ Deprecated annotations to EnhancedRandom. java to indicate that these elements are outdated and should not be used in future development
updated exception handling in ClientMapStoreTest to use ExecutionException instead of ReachedMaxSizeException to improve test reliability by asserting the
added a flag to keep empty sentences in DocumentPreprocessor and updated related logic in SentimentPipeline to improve handling of empty sentences and
added error handling for artifact creation failures in MavenArtifactFetcher. java to improve robustness by providing clearer error messages for artifact creation failures
removed the ` LazyTreeLoader ` class and updated method return values in ` JavaLanguageServer ` and ` JavaCompilerService ` to streamline
guacamole - 220 : fix npe in directagentattache when a resource return null.
modified the sendEmail method to throw MessagingException instead of a try - catch block to improve error handling for email sending failures
added a new API annotation to the package - info. java file to provide access to the tiles API
updated date parsing methods to use Locale. ROOT instead of TimeZone. getDefault to ensure compatibility with different locales for date parsing
added a boolean field ` includeDecals ` and its getter / setter methods in ` StorageOptions `, and created a JCheckBox for it in
updated generateDocumentation method to accept a nullable parameter and added @ SuppressWarnings annotation in LiquibaseTest. java to improve documentation generation flexibility and
added support for LLAP _ DAEMON _ QUEUE configuration in HiveProtoLoggingHook and updated test cases in TestHiveProtoLoggingHook to
updated assertWarnOrFail message in SolrIndexConfig. java and DocExpirationUpdateProcessorFactory. java to ensure compatibility with Solr 5. 0
updated the class file version check from 58 to 65535 in ignoreRecordAttribute. java to ensure consistency in class file version representation
added a new test class LdapPasswordAuthenticationTest for LDAP authentication to ensure proper setup and retrieval of LDAP entries in the application
replaced OrcInputFormat with BasicStatsNoJobTask in TaskCompiler. java to improve performance by utilizing footer scan functionality
save all notification can now pass editor to saveall action
renamed VisibleAdvance class to improve clarity to enhance code maintainability and readability
refactored the reflector start method to use a reconnectable future and added error handling for terminal exceptions to improve reliability of reflector
added support for dynamic number columns in EdgeDataTable and NodeDataTable to ensure proper handling of dynamic number columns in Sparklines
added null checks for repository and artifact versions in RawPom. java to ensure that dependencies are not null to avoid potential NullPointerExceptions
updated API assignment to handle null APIInfo safely to ensure safe access to the API when APIInfo is provided
refactor HeadersConfigurer and CacheControlHeadersWriter classes to improve code readability and maintainability
added lighting and texture destruction methods in FlameRenderer. java and logging in PhotoPanel. java and FlameRenderer. java
updated method handling and context menu items in FxWindow, InsnListEditor, and InsnProxyListEditor to improve code clarity and
added bounds checking for character arrays in CSSParser. java to ensure that only valid characters are processed
added logic to set the default look and feel of the JFrame and JDialog to ensure consistent appearance of the UI when the Look and Feel is not
removed'this'keyword from the SQL query in HostRoleCommandDAO. java to simplify the query and improve readability
updated F2 _ TEST, F5 _ UNKNOWN, F6 _ UNKNOWN, F5 _ TRANSPONDER _ TEST _ REPLY,
refactor swipe handling logic in WindowTransformSwipeHandler. java to improve clarity and maintainability of swipe handling logic
changed the type of ` mHostDb ` from ` HostDatabase ` to ` ColorStorage ` to ensure consistency with the updated data structure
refactor String class to improve code readability to enhance maintainability and facilitate future updates
added SLF4J Logger imports and initialized them in various classes to improve logging capabilities and ensure consistent logging across the application
added a method ` getGlobals ( ) ` to the ` MapGlobalResolver ` class to provide access to global entries from the map
added assertions to sendcoin calls in MultiSign34. java to ensure proper functionality of the sendcoin method
test : migrate CUFilterTest to JUnit 5 API to enhance test reliability and maintainability
added a system property for the path separator and updated classpath appending syntax to ensure consistent path formatting across different operating systems
changed the access modifier of ` augmentSuccessViewModelObjects ` from static to instance to allow multiple instances of ` AbstractServiceValidateController ` to be
added assertions to check presence of properties in the metamodel to ensure that only non - existent properties are stored in the metamodel
removed the ` getConf ( ) ` parameter from multiple Outlinks in multiple parser classes to simplify configuration handling and improve code clarity
renamed methods and variables in Lower. java and RuntimeCallSite. java to improve clarity and consistency in naming conventions
added support for removing unused imports in UseLambdaForFunctionalInterface. java and modified type expression handling in TypesInUse. java to improve code
replaced ` appendClassSelector ( ) ` with ` createFileSet ( ref ) ` in ` TestNGAntTask. java ` to streamline file
added a check for root input type in HiveCardinalityPreservingJoinOptimization. java to ensure that root input is not treated as Aggregate
added a pool variable to the Mapping class and updated its usage in ForgeRegistry to improve resource management by associating registry entries with a pool
updated variable assignments for x3 and y3 in Intersector. java to improve code clarity and maintainability
added default methods for SBE decoding methods in MessageDecoderFlyweight. java to ensure proper implementation of SBE functionality
refactor ElasticsearchContainerTest to use a constant for ELASTICSEARCH version and improve error handling to enhance code readability and maintainability by using a
replaced direct byte array copy with ByteBuffer. wrap for message parsing to improve memory efficiency by avoiding unnecessary array allocation
added version ID handling and refactored clusterName and version definition in ClusterDefinition. java and GSInstallerClusterProvider. java to improve cluster management
( chore ) camel - ftp : remove unused setter method
[ hotfix ] [ zeppelin ] fix npe when fetch dependency from interpreter.
updated local initialization logic in ` Gen. java ` and added a new test class ` NoLocalsMustBeReservedForDCEedVarsTest
added basic constraints handling in ForwardBuilder and created a new class for testing EEBasicConstraints to enhance certificate validation and facilitate testing of
added initAfterFirstDbConnection method to JdbcPostgresqlDAO for database initialization to ensure that values with the same time will be upserted
updated WebSocket message extensions and added input buffer size validation in AbstractWebSocketConnection to improve message handling and ensure minimum buffer size constraints
lucene - 986 : remove undeleteall flag from segmentreader. deletedocuments ( )
added null check for scopes in ClientRegistration. java and updated test cases in ClientRegistrationTests. java to improve robustness of scope validation and
added null checks for orderBy before adding it to the expression and explanation to prevent potential NullPointerExceptions when orderBy is not initialized
replaced ` Assert. assertThat ` with ` Hamcrest. assertThat ` in ` ClusterEntrypointTest. java ` to improve test
cloudstack - 7091 : don't check if the vm be not a kvm instance
replaced the initialization of ` LogUtils. initHiveLog4j ( ) ` with a temporary message to improve logging clarity by logging the initialization
added a check for ` tasks. size ( ) ` before accessing ` tasks. firstElement ( ) ` to avoid potential ` IndexOutOfBoundsException
openpgppubsubutil. deletenode now return a boolean indicating success.
refactor RelationCompositeKey and TsKvLatestEntity to use KvEntry instances instead of TsKvEntry instances to improve data
added checks for empty barcode inputs in Code128Reader and Code39Reader, and implemented error handling in FalsePositivesBlackBoxTestCase to
replaced TreeSet with LinkedHashSet in SSLContextImpl. java to ensure predictable iteration order for cipher suites
modify character validation logic in Escaper. java and update internationalizationTest. java to ensure proper handling of control characters and improve test
added support for CharSequence type in ProviderSqlSource and SqlProviderTest classes to enhance type safety and improve SQL provider method invocation handling
updated import statements and added null checks for aliasChildren in InternalMNode. java to improve code clarity and prevent potential NullPointerExceptions
added a method to calculate the layout transition offset for a page in PagedView. java and updated scrollDelta calculation in Workspace. java to
refactor JavaTemplate to improve handling of compilation units to enhance clarity and maintainability of the code
added method. setAccessible ( true ) to WidgetInterceptor. java to ensure that the method is accessible from within the class
added checks to ensure default values are only set when the raw name equals " database. server. id " to prevent potential null pointer exceptions during
updated the user agent from Mozilla / 5.037. 36 to Mozilla / 5.037. 36 in the AbstractRipper to ensure compatibility with
added a web interface item to the popup to display the IP address of the PMS server
added actualValue variable and updated related assignments in HandleGetter. java to improve clarity and maintainability of value handling
added error handling for null pointer exceptions in EncryptedSlideShow. java to improve robustness by catching potential ArrayIndexOutOfBoundsException
[ hotfix ] [ checkpointing ] fix checkstyle violation in checkpointio
added a call to loadBattlePassManager ( ) in Player. java to avoid potential null pointer exceptions during avatar loading
added - o KexAlgorithms = + diffie - hellman - group1 - sha1 - o HostkeyAlgorithms = ssh
[ hotfix ] [ test ] force an initial full - gc of the thresholdtest
added conditional checks for log types in StdErrLog. java and updated assertions in StdErrLogTest. java to improve logging accuracy and ensure
fixed - rremoteservice. getserviceclient ( ) method don't return remoteserviceclient instance. # 5
added methods ` isSelected ( boolean ) ` and ` setSelected ( boolean ) ` to the ` MultiButton ` class to enhance functionality by allowing selection
updated the import statement for UpNextActivity to NextUpActivity in CustomPlaybackOverlayFragment. java to correct the reference to NextUpActivity
[ issue # 3688 ] fix bug in brokercontroller ( # 3689 )
refactor RedisReactiveHealthIndicator to use ReactiveRedisConnection directly to improve resource management and ensure proper closure of the active Redis connection
updated theme color retrieval methods in ProgramGridCell. java and Utils. java to improve code clarity and maintainability by using dynamic resource IDs
renames occurrence of callparticipant to callpeer so that it would well reflect our new call architecture that also include conferencing and conference
added type adapters to the ToolingApiLauncher to register additional type adapters for the Tooling API
updated the value of'155'to'255'in TestPayloadCheckQuery. java to ensure correct validation of the'155'value
refactor ConsoleReader to streamline character printing logic to improve readability and maintainability of the code
added user information to the onExit method in BaseCommand. java to enhance user feedback for better debugging and user context
rename org. graalvm. compiler. test to org. graalvm. compiler. api. test
[ hotfix ] [ test ] remove unused slotsharinggroup constructor
added a conditional check for Java 8 compatibility in StreamExInternals. java and simplified hasDropWhile initialization in StreamExTest. java to
updated texture paths in DecalTest and MusicTest to use " data / 8. 12. ogg " instead of " data / cloud
removed unregistering of the close system dialog receiver to ensure proper unregistration of the close system dialog receiver
updated import statement from ` org. apache. ambari. server. state. Cluster ` to ` org. apache. ambari. server
added support for introspection endpoints in ClientDetailsEntity and related classes to enhance client experience by allowing introspection functionality
replaced direct write calls with a dedicated method for HTML encoding to improve code readability and maintainability by encapsulating encoding logic
added link annotations to PhraseQuery and PhrasePrefixQuery in Query. java to improve documentation for query functionality
updated size checks from ` size ( ) = = 0 ` to ` isEmpty ( ) ` in ` CommentsInserter ` and ` CommentsParser
refactor isLiteralString and isThisElementAnOperandInABinaryStringConcatenation methods to improve clarity and maintainability of the code
updated method parameters to use ` Object ` instead of ` A ` to improve type safety and clarity in assertions
refactor ThrowingFunction interface to use generics for better type safety to improve type safety and maintainability of the codebase
renamed ` getUploaderBehaviour ` to ` setUploaderBehaviour ` across multiple classes to improve clarity and maintainability of the uploader behavior configuration
fix : don't print final field in constructor
replaced BitmapDrawable instantiation with Robolectric's newInstanceOf method to improve compatibility with Robolectric's Bitmap class
removed the ` isValidSEnding ` and ` isValidEnEnding ` methods from ` DutchStemmer. java ` to
changed the icon resource from ` ic _ pageindicator _ add ` to ` ic _ pageindicator _ current ` to accurately reflect the current
added a counter for reinvocations in BasicInvocation. java to track the number of backups completed and reinvocations
updated topPadding calculation in DefaultLookAndFeel. java to correctly account for inner height in the layout
added a break statement in Recognize. java to terminate early without terminating the loop
added haptic feedback functionality across multiple preference classes to enhance user experience by providing tactile feedback during home screen interactions
updated Excel cell type handling in ExcelBatchReader. java and added a test for text formula in TestExcelFormat. java to improve support for
fixed issue with anonymous inner class method assignment.
added a ` userAgent ` field to the ` CommaFeedConfiguration ` class and updated ` HttpGetter ` to retrieve its value to ensure that
camel - core - optimize data format to reduce memory usage.
changed log level from info to debug for file not found messages to reduce log verbosity and reduce noise in logs
renamed the test class from QueueTest to QueuedPipeTest to clarify the purpose of the test class
updated version check logic in BukkitMain. java to ensure compatibility with newer Bukkit versions
( chore ) camel - core - dsl : avoid npe when includepattern be empty
added support for vertex coloring in PShape3D to enhance visual clarity by allowing customizable vertex colors
updated references to ` referencedTable ` and ` pkPortIds ` and ` isPkColumnFiltered ` in ` SchemaDotFormatter ` and `
removed ShadowMatrix dependency from ShadowMotionEvent. java to simplify code by eliminating unnecessary shadow extraction
changed the package of MetaRules from ` com. facebook. buck. parser. api ` to ` com. facebook. buck. parser `
refactor class handling logic in GroovyEngine. java to improve clarity and maintainability of the code
added a new ` PluginContextListener ` class and integrated it into the ` BrandingServlet ` and ` BrandingPlugin ` to
removed the print statement from NativeCodeGenerator. java to streamline output by eliminating unnecessary console output
replaced updateMotors ( ) and updateActiveInstances ( ) with fireChangeEvent ( ) in FlightConfiguration. java to improve event handling
added tests for ExpectedException behavior in ThrowableAssert _ hasCause _ Test. java to improve test coverage and ensure correct causes are thrown
removed unnecessary flattening of model and package names in AutomaticDependencies. java to streamline code by eliminating unnecessary complexity
changed variable name from requestedScopes to allowedScopes in ClientDynamicRegistrationEndpoint. java to improve code clarity by using a more descriptive variable name
simonstewart : add marionette test for firefoxoptions and capability.
camel - core - add getter / setter for route description.
refactor JavacTreeMaker to improve code structure to enhance maintainability and readability of the code
added a line to set the weight of an edge in ImporterCSV. java to ensure the edge's weight is correctly applied
bug : fix get tariff cost per month in usage record ( # 4441 )
updated SQL queries in DatabaseMetaData. java and modified tuple assignment in DatabaseMetaData. java to ensure correct retrieval of pg _ attribute values and improve
added a null check for binarized sentences in SentimentAnnotator. java to ensure that Binarized sentences are not built by the
replaced the return statement in User. java with a StringBuffer to improve readability and maintainability of the code
updated Body extraction logic in MessageHelper. java to handle null values to improve error handling and provide clearer feedback when the body is null
[ hotfix ] [ runtime ] remove unused parameter from task deploymentdescriptorfactory
fixed roster access for a user that don't have permission
added a reference for " maven. test. classpath " in AbstractJRubyMojo and removed the @ SuppressWarnings annotation in CucumberMojo
updated type handling in MethodHandleImpl and added a test for user classes in MethodHandlesTest to improve type safety and ensure compatibility with user classes
added imports for StopFilterFactory and NamedSPILoader in CommonGramsQueryFilterFactory, AnalysisSPILoader, LegacyHTMLStripCharFilterFactory,
updated width and height checks in URLImage. java to ensure images are only processed when they are equal to their dimensions
added a condition to check if the name starts with " META - INF / " before appending it to the list to ensure that only unique names
added import statements and scheduled background task calls in ImageDownloadService. java to improve code clarity and ensure proper execution of createImageToFileSystem and createImage
updated assertions in StackWalkerTest to expect the correct number of values based on the version check to ensure the test accurately reflects the expected
changed the visibility of the addViewportJob method from protected to public to allow access to the method from other classes
removed the ` partitions ` parameter from the ` buildFlow ` method and replaced it with a single parameter in multiple test files to simplify the flow
setRestartOnShutdown and checkRunning methods in TestDatabase. java to ensure server restarts correctly when the application is stopped
added null and empty check for block in NodePathsConvertOperator and modified currentIndex logic in SchemaQueryMergeOperator to improve error handling and ensure correct
added methods to retrieve and display harvesting time in CallInfoFrame, IceUdpTransportManager, RawUdpTransportManager, Transport
updated sprite batch parameters for FPS and count in ParticleEditor. java to improve visual clarity by adjusting frame rates
added configuration properties for " hadoop - env " in UpgradeCatalog240. java and corresponding test cases in UpgradeCatalog240Test. java to ensure
added a transparent background color to the SVG view in SvgViewerFactory. java to improve visual consistency by using a solid color
removed the minSdk parameter from the @ Config annotation in ShadowKeyguardManagerTest and ShadowKeyguardManager to simplify the test configuration for better
updated containsExactly method to accept varargs as a parameter and added a new test for array contains exactly to enhance functionality and ensure correctness of array containance
updated the Bandwidth and refillGreedy settings in Bucket4jFilterFunctions. java to improve performance and ensure proper handling of bucket configurations
updated GermanAnalyzer and GermanStemmer classes to support external list of stopwords to enhance text analysis capabilities for german language
added hooks to the Generator class and updated transformations to use postExecHooks to improve handling of hooks during query execution
added error handling for NoClassDefFoundError in REngine. java to improve robustness by gracefully handling potential NoClassDefFoundError
updated ` TraceFilter ` and ` TraceWebFilter ` to use ` SpanAndScope ` instead of ` Span ` to improve span management and
added a null check for ` getCause ( ) ` before setting the exception message to avoid potential NullPointerExceptions when ` getCause ( ) ` is
updated the construction of SolrServerException to include a base URL to ensure the correct URL is used for error handling
modified the condition for setting and retrieving the landscape orientation in HSSFPrintSetup. java to ensure correct behavior when setting and retrieving landscape orientation
replace NullWritable. get ( ) with a null check for the object to improve robustness by avoiding potential NullPointerExceptions
added a check for illegal argument names in ArgDesc. java to ensure proper error handling for invalid argument names
added functionality to handle background location updates in AndroidLocationPlayServiceManager to improve user experience by allowing background location updates to be requested and removed
modified the conditional check for primitiveType from `! = GL10. GL _ POINTS ` to ` = GL10. GL _ POINT
trufflestring. execute ( byte [ ] a, int b, int lengthcmp ) : don't return false if
added command list handling in ComboBox to improve user experience by ensuring the correct command list is used
nifi - 7651 : escape forward slash in pem file
updated command line arguments in ZkCLI. java for improved clarity to enhance readability and maintainability of the command execution
updated equality checks from ` = = ` to `. equals ( ) ` in ` FirmwareUpdateProgressInfo `, ` BridgeHandler `
added a conditional check for remote grpc status before posting a console event to ensure that the event is only posted when the remote grpc status
refactor methods in various classes for consistency and clarity to improve code maintainability and readability
added entity ID to the tick's entity in ForgeChunkManager. java to ensure that the tick's entity is properly tracked and
added error string handling in GLSurfaceViewAPI18. java to improve error reporting for EGL10 errors
added a method to retrieve supported locales in FeatureRegistry and updated InfoRequestHandler to handle locale selection to improve localization support and error handling for unsupported
updated server URI assertion to use " http " instead of " server. getServerURI ( ). toASCIIString ( ) to ensure consistency in
added a call to addToHelperList in Construction. java to enhance functionality by allowing helper lists to be added
added handling for the escape sequence in GlyphLayout. java to improve character rendering by skipping the first 2 characters
added security permissions and refactored context class loader handling in Transport and TCPTransport classes to enhance security by enforcing permissions and ensuring proper
updated the handling of file paths in ` ReceiveExternalFilesActivity. java ` and added null checks in ` Folder. java ` to ensure proper
added null check for m _ serviceLoaderClassLoader before loading the ITestNGListener to avoid potential NullPointerExceptions when m _ serviceLoaderClassLoader is
removed debug logging statement in BarrowmanCalculator and updated the deltap calculation in TubeCalc to improve logging clarity and ensure accurate deltap
added type checking for Node and Edge columns in TimelineControllerImpl. java to ensure proper handling of edge and node data types
added registerExtraComponents method to BaseBrokerStarter to enable extra components for broker admin applications
added a new test method ` testBug4658 ` in ` MultiCfQueryExecIT. java ` to verify the bug4658
replace ArrayList with LinkedList for candidates and optimize version checking logic to improve performance and maintainability of the code
fix for ` invalid cycle'' error.
removed configNodeSimpleConsensusSnapshotTriggerThreshold from ConfigNodeConfig and updated retry attempts in ConfigNodeDescriptor and RatisClient to streamline
refactor multiple Java classes to improve code organization and readability to enhance maintainability and readability of the codebase
added conditional registration of JMXHelper based on class annotation to ensure JMXHelper is only registered when the managed service is present
tika - 2776 -- add support for non - Unicode name in zip file.
added a new file TestSplitThruPhiDivMod. java with a main method to demonstrate the behavior of division by two integers in
added methods for handling generic interfaces and superclasses in TemplateRegistry to improve type lookup functionality for parameterized types
increased the buffer size from 512 to 1028 in ByteArrayOutputStream to optimize memory usage for improved performance
added TODO comments to the ` languagesExcluded ` array in ` PlayerSettingsScreen. java ` to indicate unsupported symbols are not yet available for improved
updated byte array size from 4096 to 8192 to accommodate larger data sizes to improve data transfer efficiency by accommodating larger data sizes
updated window focus listeners to be final in SIPCommMenu and SIPCommPopupMenu classes to ensure proper handling of focus events and improve code
refactor error handling in SemanticAnalyzer to check for null values before throwing a SemanticException to improve robustness by preventing null pointer exceptions
added scaling functionality to the SkeletalMesh in SkeletonRenderer. java to improve rendering accuracy by correctly applying scaling factors
added ` getSolrHome ( ) ` method to ` DistributedClusteringComponentTest ` and overridden it in ` BaseDistributedSearchTestCase ` to
added @ ComponentScan annotation to SpringWebConfig. java to enable scanning of components in the web application
removed the getAccount method from UserListItem to streamline the code by eliminating unnecessary account retrieval
added unit tests for PackageInfo installation in ShadowPackageManagerTest and modified processName handling in ShadowApplicationPackageManager to ensure correct behavior of package
refactor AvailableSettings to improve code readability to enhance maintainability and facilitate future updates
added constructors for TransactionTrace and ReceiptCapsule in TransactionTrace. java to enable proper initialization and execution of transactions
add support for shuffle member list in client
replaced ` Text ` with ` CrawlDatum ` in ` SegmentReader. java ` to improve clarity by using a more descriptive identifier
refactor JsonDeserializer to improve code readability to enhance maintainability and facilitate future updates
updated configuration name from " tsfile - engine. properties " to " tsfile - engine. properties " and changed fetchSize from an int
updated the method name from ` trunk ( ) ` to ` trunc ( ) ` in ` GenericUDFTrunc. java ` to improve clarity
removed unused import of ExecutionContext in TaskletStep. java to streamline code by eliminating unnecessary dependencies
initialize the title variable to an empty string to ensure the title is set to an empty string before use
added body handling for empty response in AsyncHttpClientCall. java and corresponding test in AsyncHttpClientCallTest. java to ensure proper response body is
added a new interface ` EmbeddedServerInstance ` in the ` io. micronaut. runtime. server ` package to indicate that `
refactor JabRefFrame to use reflection for registering MacEvents to improve compatibility and error handling for MacEvents registration
rename ` SecurityTokenServiceAuthenticationMetaDataPopulatorTests ` to ` SecurityTokenServiceTokenFetcherTests ` and update related references to improve clarity and
modified the return statement in HandlerLibrary. java to ensure the enum type is correctly assigned before proceeding
changed the visibility of the hideUnprivilegedObjects variable from private to final to ensure that the variable cannot be modified after initialization
updated logging level from info to fine in ThreadedAcousticScorer. java and modified audio data source setup in AudioDataSources
added a check for Android Q in IOUtils. java to ensure compatibility with newer Android versions
added support for serializing and deserializing variable instances in ByteArrayType. java and ServiceTaskVariablesTest. java to enhance data handling capabilities and ensure
refactor multiple service classes for consistency and clarity to improve maintainability and readability of the codebase
refactor logger retrieval logic to use a computeIfAbsent method to improve code readability and maintainability by using a single computeIfAbsent call
hbase - 2657 remove outofmemoryerror from outofmemoryerror
updated transaction ID and bucket ID in TestAcidOnTez. java to ensure accurate tracking of transactions in the test cases
changed log level from info to debug for enhanced class file logging to reduce log verbosity and provide more detailed logging information
added a method to retrieve the default provider name and updated the SSL provider name logic to improve clarity and maintainability of provider identification logic
added Captor annotation processing in MockitoBeforeTestNGMethod. java to ensure Captor annotations are processed for TestNG test cases
added checks to ensure only run and test cases exist in TestSuiteBuilder. java to improve error handling when no test cases are found
refactor GroovyAutoComplete and its related classes to improve code readability and maintainability to enhance maintainability and ensure proper handling of special characters in completion
updated GraphHopper initialization to use GraphHopperOSM instead of GraphHopper to ensure compatibility with the latest graphho
[ java ] use clientconfig. withretries ( ) instead of httpClientfactory. createclient ( ).
changed the visibility modifier of mHideSysUiScrim from final to non - final and added a callback for showing the top shadow to improve
updated the enqueue method to include a canceled flag and modified exception handling in OkHttpCall to improve error handling clarity and ensure proper cancellation of
refactor swipe handling logic in WindowTransformSwipeHandler. java to improve clarity and maintainability of swipe handling logic
updated RequestMatcher interface to extend from org. springframework. security. web. util. matcher. RequestMatcher to enhance security by integrating
added support for conditional statements in DeferredAttr and created a new class ImplicitLambdaConsideredForApplicabilityTest to enhance functionality and
refactor test methods in Main. java for clarity and consistency to improve readability and maintainability of the test cases
added tests to populate display metrics with default density and non - specific dimensions to ensure that the application correctly populates display metrics with different screen sizes
replaced IOException with RuntimeException in ExternalViewReaderTest and updated timestamp handling in PinotDataTypeTest and PluginClassLoader to improve error handling consistency and
updated icon resource from ` drawable. logo ` to ` mipmap. ic _ launcher ` to improve the visual appearance of the launcher icon
added content text to the error builder in FileUploader. java to improve error reporting by displaying relevant content
refactor ConcurrentHashMap to improve code readability to enhance maintainability and readability of the code
added methods to adapt user trades and their sizes in AbucoinsAdapters and AbucoinsTradeService to enhance trade data
updated plot claim logic and added new cases in PlotSquared. java and SetBlockFast _ 1 _ 8. java to improve plot management
simonstewart : allow the htmlunitdriver to specify the browser version.
added handling for " java. sql. Types. VARBINARY " definition in BlobType. java to ensure correct data type is returned when the
refactor cookie version handling in SetCookieSupport. java to improve clarity and maintainability of cookie versioning logic
added synchronization to the language's simple type mapping and array type retrieval to ensure thread safety when accessing shared resources
updated InboundBuffer to use ContextInternal instead of Context to improve compatibility with Vert. x threads and ensure proper context handling
updated timeout settings and refactored dead server timeout tests in LdapTimeoutTest. java to improve test reliability and ensure proper timeout durations
updated usage message from " UniocdeData " to " UnicodeData " in CharacterName. java to clarify the purpose of the command
camel - 7999 fixed the unit test error of camel - cxf
refactor multiple UI classes for consistency and clarity to improve maintainability and readability of the UI components
added support for BoosterSet in ComponentAssemblySaver. java and changed return value from true to false in BoosterSet. java to
added authentication methods for proxy requests in JabRef. java to enhance security by ensuring proper authentication based on request type
replaced the usage of BLOCKCHAIN __ FORK _ COUNT with BLOCKCHAIN _ FORK _ COUNT across multiple files to standardize the
updated error handling in mmm Class. java and return false in ppp Class. java to ensure compatibility with JEP 359 support and
updated imports and logging statements in TestIPCUtil. java to improve code clarity and maintainability by using LogFactory for logging
removed the chunked transfer encoding check from the HttpClient request to simplify the request handling by eliminating unnecessary chunked transfer
added a call to clearAttributes ( ) in PatternTokenizer. java to ensure that attributes are cleared before processing
refactor VerificationAfterDelayImpl to include a pollingPeriod parameter and handle MockitoAssertionError to improve error handling and provide clearer feedback during verification failures
added compaction control to session state and updated related methods to ensure proper compaction behavior during query processing
[ zeppelin - 4443 ] fix the issue that docker image be not work when run in zeppelin - zeppelin - 444
hbaseadmin # gettableregions should return region count instead of region count ( jesus camacho rodriguez
added an @ Ignore annotation to PartialEscapeAnalysisTest. java to temporarily disable the test due to known issues
removed unused methods for calculating X - axis bounds in multiple chart renderers to streamline the code by eliminating unnecessary complexity
added error handling for parsing and release XML reader in SimpleSAX. java to ensure proper resource management and prevent memory leaks
release the header buffer in HttpSenderOverHTTP. java to ensure proper resource management and prevent memory leaks
added a new test class ` UseDiamondOperatorWithVarTest ` and updated ` Java17TypeSignatureBuilderTest ` to use it
added null and closed check before closing the ResultSet to ensure proper resource management and prevent potential memory leaks
updated driverVersionMajor and driverVersionMinor from - 1 to 6 in DerbyDatabase. java to ensure compatibility with newer database versions
fixed bug in usestringbufferlength that result in an npe.
removed error logging statement from RemoteSparkJobMonitor. java to streamline error handling by eliminating unnecessary logging
refactor createDb method to return a Connection instance to ensure proper resource management and prevent potential memory leaks
renamed classes CreateCustomMetric, ListResources, CreateCustomMetricTest, and ListResourcesTest to improve clarity and consistency in naming conventions
hbase - 19790 add max compact size off - peak to compaction configuration
added JSON unmarshalling functionality in BitstampDepositAddress. java and created a new test class DepositAddressJSONTest. java to
replaced IllegalStateException with IllegalArgumentException in BufferingResponseListener to ensure proper handling of buffer capacity errors
updated the method call from ` linkInDeletedDirectories ` to ` linkPath. toAbsolutePath ( ) ` to ensure the correct absolute path is
updated InvocationFinishedEvent to implement MetricsEvent instead of String to enhance event handling capabilities for better monitoring and monitoring
added support for multicast network interfaces in OptionsTest. java to ensure that only valid network interfaces are processed
added a loop to check for valid check sums in ChangeSet. java to ensure that only valid check sums are processed
added a clone ( ) method to BufferedChecksumIndexInput class to ensure proper cloning of IndexInput instances
updated return statements in Circle. java to include radius checks to ensure that the circle is within defined radius for accurate calculations
added conditional check for frequency band identifiers in P25Channel. java and overridden methods in P25ExplicitChannel. java to ensure proper handling of
rename tapSquareSize, tapSquareCenterY, tapRectangleCenterX, tapRectangleCenterY to improve clarity and maintainability of the gesture
change the default value of DEFAULT _ REPLICATE _ ON _ WRITE from true to false to disable replication on writes by default
added a ` lastFillTime ` parameter to the ` getCryptoFacilitiesFills ` method and updated its usage in ` CryptoFacilities
added ` getDelegate ( ) ` method to ` TraceCallable `, ` TraceRunnable `, and corresponding test cases in ` TraceCallableTests `
refactor error handling in FileActivity and FileDisplayActivity for better clarity to improve error reporting and maintainability of the code
added error handling for writing to a stream in the ForeignIncubatorQuicheConnection class to ensure proper error management and prevent application crashes
updated the method call in JavascriptContext. java to include an additional boolean parameter to enhance functionality by allowing conditional execution based on value
refactor TableCell constructor to accept OutputFormat as a parameter to improve flexibility and maintainability of the code
added a new configuration class ` TracingAutoConfiguration ` for tracing functionality to enable tracing capabilities for brave integration within the application
replace p. addContent ( T _ s _ info1c ) with a call to addPara ( ) to improve code readability and maintainability
refactor ` getPrunedQueryableSegments ` method to use a list of ` IndexSegment ` instead of ` List < IndexSegment > `
refactor VertxBufferTest to improve code readability to enhance maintainability and facilitate future updates
updated date extraction logic in MessageSubmissionChunk. java and added unit tests in AllHSMFTests. java to improve date handling accuracy and
changed the access modifier of mContext from private to protected to allow subclasses to access and override the mContext variable
removed unused imports for SortedSet and TreeSet in ShowTablesOperation and ShowViewsOperation to streamline code by eliminating unnecessary dependencies
added a new exception class MongoDataIntegrityViolationException to handle data integrity violations in MongoDB operations
[ hotfix ] [ coordination ] return the job completion future from the master context
refactor ` bitsToHumanReadable ` method to use a new ` mimeType2HUmanReadable ` structure to improve code readability and maintainability
replaced MergePolicy with TieredMergePolicy in TestUpgradeIndexMergePolicy. java and added a test for no pathological merges in Test
added a conditional check to return early if mOverviewStateEnabled is false to improve performance by avoiding unnecessary processing when mOverviewStateEnabled is false
updated error log message in CpuNDArrayFactory. java to provide more context about binary execution issues
refactor loadSettingModels method to accept InputStream as a parameter to enhance flexibility in loading settings from external sources
added null checks for incoming fields and terms in FilterLeafReader. java to ensure proper error handling and prevent NullPointerExceptions
added key size handling in JceCRMFEncryptorBuilder and updated test cases in AllTests to improve key size verification and ensure correctness
updated IOException handling to include the exception message to improve error reporting by providing more context about the exception
removed javax. inject. Inject annotations from multiple Java files to streamline dependency injection by eliminating unnecessary dependencies
updated the expected size in BundledDistributionTest and added assertions for database user attributes in PostgreSQLTest to improve test coverage and ensure correct data
[ flink - 3598 ] [ stream ] add pipeline. name option for default job name.
updated scaling logic based on device profile to differentiate between two - panel layouts
updated IcePlainsBiome class to extend SnowyBiome instead of GrassyBiome to enhance the biome '
refactor methods to remove DateTimeZone parameter and simplify date time parsing logic to improve code clarity and maintainability by reducing dependency on DateTimeZone
added an ` isQualified ` boolean parameter to the ` ThisReference ` class and updated the ` CompilationUnitBuilder ` to include it to enhance
updated regex patterns in XhamsterRipper. java for URLs ending with " wmde. " to ensure correct matching of URLs
create a temporary list for all glow entities before iterating over them to improve efficiency by avoiding repeated iteration
mondrian : fix oracle table name when schema be null
fix a syntax error in the FlutterConsoleFilter. java file to improve code readability and maintainability
added functionality to select and deselect all files in the FileMenuFilter class and updated related methods accordingly to improve user experience by allowing users to select
[ java ] : fix term offset for network publication.
refactor GuildUpdateOwnerEvent class for improved readability to enhance maintainability and readability of the code
modify inPortalTicks logic in Player and Entity classes to ensure proper handling of inPortalTicks based on creative state
added compression functionality and adjusted chart spacing calculations in ClusterMonitorTileSkin. java to enhance chart rendering by allowing compressed dimensions
refactor multiple Transactional - related codecs to improve code organization and maintainability
change variable types from int to long for length calculations in Base64. java to ensure compatibility with larger data sizes and prevent potential overflow issues
removed unnecessary null check for the renderer in RendererConfiguration. java to simplify the condition for better readability and maintainability
server : skip disk offering change when use custom service offering
updated import statements and refactored Order and LimitOrder builders in HitbtcAdapters. java to improve code clarity and maintainability by
rename idleCount to consecutiveIdleCount in LLRealtimeSegmentDataManager. java to improve clarity by accurately reflecting the number of idle
updated the label in the ConfigurableService annotation from " automation " to " automation : jrubyscripting " to align the label with the
replaced name with displayName in ConfigCategory. java to improve clarity by using a more descriptive variable name
added a condition to check for negative exchangeAmount in ParticipateAssetIssueActuator. java to ensure that exchangeAmount does not exceed zero
removed loop condition for iteration in FeedUtils. java to streamline code by eliminating unnecessary iterations
added a new test method ` testHDF4 ` in ` HDFParserTest. java ` to verify the functionality of HDF4 files through
added a new constant CALCITE _ 6092 _ FIXED in SqlOperatorTest. java and modified check cases in SqlOperatorTest
added null check for file and languageServer in IDEEditor. java to ensure robustness by preventing potential NullPointerExceptions
added methods to quietly close multiple AutoCloseable instances to improve resource management and prevent potential memory leaks
updated button string resource from ` int _ POSITIVE _ BTN _ RES ` to ` string _ POSITIVE _ BTN _ RES `
added null checks for srcWidth and dstWidth in Pixmap. java to prevent drawing errors when dimensions are non - zero
replaced ReflectionHelpers with Unsafe's method for defining classes to improve compatibility with Robolectric's Unsafe API
updated regex pattern for fqdn validation in GUIUtil. java and added validation tests in GUIUtilTest. java to ensure proper validation of domain names
changed the type of ` conflicts ` from boolean to long in ` CachedRowSetWriter. java ` to improve performance by avoiding unnecessary boolean comparisons
update version check to use null instead of a hardcoded version string to improve code robustness and avoid potential NullPointerExceptions
added a conditional check for reference equality in ReferenceMemory. java to ensure proper handling of references based on the current reference
added error handling and logging for seed file injection in Injector. java to improve robustness and provide clearer feedback when dependencies are missing
added a condition to check if the original view is hidden before displaying it to ensure the original view is displayed only when the original view is hidden
updated maximum tri limit logic in DefaultLoopPolicies. java to ensure that the maximum number of iterations does not exceed the defined maximum limits
added logging for texture coordinate type compatibility in CombinedTexture and UVCoordinatesGenerator classes to improve debugging capabilities and provide better insights into texture
added error handling and validation for barcode file deletion in multiple classes to improve robustness and prevent runtime errors during file operations
added seek and close methods to TracingConsumer and TracingProducer classes to enable proper resource management and resource management during seek operations
updated handle retrieval logic in HandleDAOImpl. java to ensure correct handling of string lengths
replaced the addition operation with a direct assignment of convertedValsList to streamline the code by eliminating unnecessary addition operations
added a deprecated constructor to AbstractTimer that accepts a Clock and a PauseDetector as a parameter to indicate that the constructor should no longer be
added a warning dialog for the nightly build in MainWindow. java to inform users about issues related to the Universal Gcode Sender
added a boolean parameter to the getResponsesSortedByRecipient method and modified the team name comparison logic to enhance functionality by allowing team names to be
updated return message to include ` throws ` declarations to improve clarity of exception handling
deleted ` CacheApplication ` and renamed ` cacheObj ` to ` CommonsApplication ` and renamed ` data ` to ` CacheData ` to stream
replaced calls to ` realObject. getApplicationContext ( ) ` with ` RuntimeEnvironment. application. getApplicationContext ( ) ` to ensure compatibility with
refactor StatisticsServlet to improve code readability to enhance maintainability and facilitate future updates
updated configuration handling for devices running KitKat or later to ensure compatibility with newer Android SDK versions
added a constant for stack repository update link existence in VersionDefinitionResourceProvider. java and corresponding test cases in StackManagerTest. java to ensure
refactor ApplicationImpl, NodeImpl, and Witness classes to improve code organization and maintainability
add a null check for oldIndexName in CFMetaData. java to prevent potential NullPointerExceptions during index updates
added " com. sun. org. apache. xml. internal. resolver. helpers. " and " com. sun. org. apache
renamed methods in JobRepository, SimpleJobRepository, ItemOrientedStep, SimpleJobRepository, and related tests to improve clarity and consistency
added handling for LoopExitNode in GraphUtil. java to ensure correct processing of loop exit nodes
replaced RecyclerView with WidgetsRecyclerView in SearchAndRecommendationsScrollController to improve layout consistency and maintainability by using a dedicated widget
added a check for supported terminal types in ConsoleReader. java to ensure proper handling of terminal types when supported
changed data types from ` long ` to ` int ` for time allowed values in ` CloudExitableDirectoryReaderTest. java ` and added
added validation check for session validity in AbstractSessionCache. java and updated test case in RemoveSessionTest. java to ensure proper handling of session
refactor code to handle null columnNames in ChangedIndexChangeGenerator. java to improve robustness by avoiding potential NullPointerExceptions
replaced Vector with ArrayList in ButtonGroup. java to improve performance and memory efficiency
updated UserManagerCompat and UserManagerCompatVL to support different Android versions to ensure compatibility with newer Android versions and improve user management
added getDatabaseMajorVersion ( ) and getDatabaseMinorVersion ( ) methods to MockDatabase, AbstractDatabase, HibernateDatabase, and ReorganizeTable
added MAX _ MISMATCH _ RULES _ TO _ PRINT constant and improved error message formatting in ActionGraphCache. java to enhance
added two new classes ` LockDatabaseDesc ` and ` UnlockDatabaseDesc ` to manage database lock and unlock operations effectively
updated RankingTopComponent and RankingUIModel to use getter methods for node and edge transformer to improve code readability and maintainability by central
added handling for DisconnectMessage in HandshakeHandler. java and updated logging in NodeImpl. java to ensure proper handling of disconnection messages and improve
added a test method for setting and deleting storage groups in IoTDBAuthorizationIT. java to ensure correct functionality of storage group deletion operations
documen : update documen to v1beta1 and v1beta2 to v1beta2
added support for variable declarations in type validation logic to enhance type safety and improve error reporting for missing variable types
added two methods ` afterTestClass ` and ` beforeTestClass ` to the ` StepScopeTestExecutionListener ` class to facilitate test execution
[ java ] use a cached epoch clock instead of a sufficiently large array.
updated log messages to use parameterized formatting for step and email addresses to improve readability and maintainability of log output
added cloning of joinKeys in JoinDesc. java to ensure proper handling of keys during join operations
added PrincipalResolver to WebAuthnConfiguration to enable customizable PrincipalResolver behavior
added an ` ImmutableList < Path > ` parameter to the ` addSettingsFromFile ` method in ` XcconfigParser ` and updated related tests
added'final'modifier to several fields in Oracle. java to enforce immutability and prevent accidental modifications
[ hotfix ] [ doc ] add documentation about unaligned checkpoint rescaling
fix unsupportedoperationvisitor to support order _ by, order _ by, etc.
added println methods to CompileTheWorld for better debugging and logging to improve code readability and facilitate easier debugging during compilation operations
removed the check for LocalVariable in LambdaRewriter to simplify the code by eliminating unnecessary exception handling
added support for MySQL databases in CreateTableGenerator to ensure proper handling of NULL values for Sybase and Sybase ASA databases
added class loader management in EnvConfiguration. java to ensure proper context class loader management during application startup
added a conditional statement to set the Ejection delay based on stageNr in SimulationListHandler to ensure the Ejection delay is
renamed methods and variables related to command line runner configurations to improve clarity and maintainability of the code
refactor TransactionUtil2 class to improve code readability to enhance maintainability and facilitate future updates
updated ` getIssuer ` method to accept an ` Optional < OAuthRegisteredService > ` parameter to enhance issuer resolution flexibility by allowing optional service
added null checks for collection and ref in ClusterState. java to improve error handling and provide clearer feedback when a null DocCollection is encountered
replaced getStyle ( ) method with getAllStyles ( ) method to improve code readability and maintainability
added getter methods for foreign database and schema names in ForeignKeyColumn and ForeignKeyColumnMutator classes to enhance functionality by allowing configuration of foreign database and
[ java ] log a warning when a leader join fails.
refactor ShadowActivity and ShadowBluetoothDevice to use Shadow. extract instead of shadowOf to improve code clarity and maintainability by centralizing shadow extraction
refactor selection root handling in FileSelection. java and add new test cases in TestBugFixes. java and TestTools. java to improve
add oninventorytick method to allow for removal of vanilla slot and item
refactor Zip output handling to use ByteArrayOutputStream instead of FileOutputStream to improve efficiency and memory usage during file operations
added a null check before invalidateOptionsMenu in SingleUploadFragment to prevent potential NullPointerExceptions when getSherlockActivity ( ) is not initialized
updated widget binding logic and added error handling in Launcher and PendingAddItemInfo to improve widget management and ensure proper error management during widget binding
[ ecobee ] add capability for air pressure, air quality, co2pm, vocpm
reformatted code in OperationSetServerStoredContactInfoFacebookImpl. java for better readability to improve code clarity and maintainability
added environment variables for AAPT and AAPT2 in Genrule. java and updated tests in GenruleTest. java to ensure
don't dump access table if truffleinstrumentbranch be not set.
added null check before disposing of a message to prevent potential NullPointerExceptions
added @ Getter annotation to DB and modified init method visibility in TxCacheDB, SnapshotManager, Manager, and TransactionCache classes to enhance
log warn about logwatch not yet implement for log4j
replaced print statements with return statements in CategoryPlotTests. java to improve error handling and provide clearer feedback during cloning failures
replaced ByteArrayOutputStream with SmallByteArrayOutputStream in IOSImplementation. java and added a new class SmallByteArrayOutputStream. java to improve handling of large byte
updated attribute retrieval methods in OGLESShaderRenderer and Shader classes to use VertexBuffer. Type instead of String to improve performance and
changed the connection close from ` close = true ; territory = en _ US ` to ` shutdown = true ` to ensure proper resource management
added null checks for firstExchangeCompletedTimestamp and lastExchangeCompletedTimestamp in RouteInfo. java to ensure robust handling of null values and prevent potential
updated command line arguments and output verification in TestHtmlTag. java and TestUseOption. java to ensure consistency in command line arguments and improve
added a check for incomplete items in the completion result to ensure that only valid items are processed
updated command line argument handling and refactored time column name retrieval in HybridClusterIntegrationTestCommandLineRunner. java to improve clarity and functionality
updated output format handling to include " svg. html " and " svg. xml " extensions to ensure correct file extension is used for SVG output
updated condition in DeviceProfile. java to check for QSB enable condition to ensure QSB margin does not exceed the hotseat bar bottom
added ` equals ` and ` hashCode ` methods to ` AnimationList ` class and updated equality checks in ` SceneKey ` and ` Gltf
added a Buffer field and methods to store and retrieve the timestamp buffer in HTTP headers to facilitate storing and retrieving the timestamp buffer in HTTP
replaced Adler32 with CRC32 in Store. java to improve accuracy in checksum calculation
xen. heartbeat. interval default value should be ` any # of seconds'' instead of ` ` any # of seconds''
added a new constant ` ZERO _ AREA _ FIN ` and modified warning handling in ` FinSetCalc ` to ensure that zero area warnings
updated ElasticsearchIO to use Jackson's StdSerializer for document metadata serialization to enhance JSON serialization capabilities and maintain compatibility with newer Jackson versions
hhh - 11736 - add support for date trunc function in h2
added checks for " Memory Pool not found " error messages in MetricUtils. java and MetricUtilsTest. java to ensure proper error handling and
added JavaScript support and modified error handling in UserContext and FileAccess classes to enhance security and improve error handling during file access operations
refactor error messages in ValidationTask. java for clarity to improve readability and maintainability of the code
change the BACKFILL path from " / generateAnomaliesInRange " to " / replay " to clarify the purpose of the
updated data retrieval logic in PrecompiledContracts. java to include the latest proposal ID to ensure correct data is returned based on the proposal '
updated AllAppsContainerView to handle BubbleTextView items more efficiently to improve user experience by ensuring correct badge updates during item updates
chore ( deps ) : upgrade gapic - generator - java to 2.8. 0 and update gax - java to 2.18.
updated context start logic in ResourceHandlerTest and ServletContextHandler to ensure correct behavior after ContextHandlerCollection is started
added a condition to check if mDrawIdentifier equals WORKSPACE _ CUSTOM to ensure proper handling of custom drawing identifiers
remove assertion from TruffleJDKServices. java to improve code reliability by eliminating unnecessary null checks
added @ Ignore annotation to the shadowInvocationWhenChildIsInstrmentedButUnshadowed method to temporarily skip the test due to call
updated import statements in ItBitDemoUtils, ItBitOrderBookDemo, ItBitTickerDemo, ItBitTradesDemo, and It
ww - 4441 fix npe in profilingactivationinterceptor
changed inner classes to be final and private constructors in Utils, ApplicationUtils, AsyncSocketFactory, Whois, and others to enforce immutability
bug fix : handle ioexception when deserializing a user account
updated externalizable classes to use " java. util. Vector " and " java. util. Hashtable " instead of " java. util.
added tableNameWithType to the warning log message to enhance logging clarity by associating retention time with table type
added trimming for empty string checks in QueryExecutorImpl. java to ensure proper handling of empty values and prevent potential issues with empty strings
updated the path from ` path ` to ` modFile. getFilePath ( ) ` in ` ModFileResourcePack. java ` to ensure
updated the handling of TransformerBuilder instances in PartitionToolbar. java to improve clarity and maintainability of the code
modified conditional logic in RecentsView. java to include checks for task view focus and visibility to ensure that only visible tasks are displayed during scrolling
replace Map < String, String > with BMIViewObject in the Calculator and CalculatorRestEndpoint classes to enhance functionality by displaying BMIView
updated sorting logic in QueryCommand to improve readability and maintainability of the code
fixed damage for hay bale block. close # 151
refactor environment variable handling in WindowsProcessAddressSpace and J9DDRImageProcess to improve clarity and maintainability of the code
added support for custom plugin properties in OptionsParser to enable flexible configuration of plugin properties
updated the condition to check if the hashTable is not empty instead of null to ensure that the joinType is only performed when the hashTable
updated timestamp handling in Timestamp. java and added new test methods in TimestampTest. java to improve accuracy of timestamp representation and enhance test coverage for
[ java ] use context. archivecontext ( ). clone ( ) instead of ctx. archivecontext ( ).
added a condition to check if the method is not compiled before proceeding to ensure that the method is only processed when the method is not compiled
added test cases for image processing in AbstractTest. java and updated test cases in DB2OnlineTest. java and GeoRasterOnlineTest.
refactor TogglableFlag to use constants for launcher and tag to improve code readability and maintainability by using named constants
updated log messages to include detailed error messages to improve logging clarity for troubleshooting issues
added a conditional check for Android platform in SnapshotScreenListener. java to prevent execution on unsupported Android platforms
updated test assertions in RoutesTest. java to use Hamcrest matchers to improve test readability and maintainability by using Hamcrest matchers
added new functional interfaces BytePredicate, FloatToLongFunction, ShortPredicate, and ShortToLongFunction in the com. speedment. common package to
changed the return type of ` getSubsColor ` methods from ` int ` to ` String ` and added logging for bitrate limits in multiple video
added a conditional check before deregistering the invocation from the invocation registry to ensure invocation registration is only attempted when the future completes
replace queue. append ( frameBytes ) with output ( null, nop, close. asFrame ( ) ) in AbstractWebSocketConnection. java
added a check for the " redirected " flag in the intent in LoginActivity and SignupActivity to ensure that the intent does not contain a
added ShadowCheckedTextView class to facilitate testing of CheckedTextView functionality in Robolectric
added Serializable interface to ParserState and made fields transient in AccessorProperty and Property classes to enable serialization of ParserState and ensure proper serialization of
added a new certificate " identrustdstx3 [ jdk ] " to VerifyCACerts. java to support identrust
removed duplicate context. setAttribute calls for TEMPDIR _ CONFIGURED and TEMPDIR to streamline code by eliminating redundancy
added presence handling and assertion in MultiUserChatTest. java to verify the presence of a user's nick in the room occupant
updated QuicConnection and QuicSession classes to remove context parameter and streamline connection handling to improve clarity and maintainability of the code by
replaced references to ` NoMergeScheduler ` and ` NoMergePolicy ` with ` LogMergePolicy ` in ` CreateIndexTask. java `
updated character type handling in ICU4JImpl. java and modified endX and endY references in TextPosition. java to improve accuracy
added support for ComputedDateValue and ComputedNumericValue in AddDefaultValueChange. java and AbstractDatabase. java to enhance data handling capabilities
updated NbtScoreboardIoService. java file to improve code clarity and maintainability
refactor SAML provider metadata handling to ensure writable resources are handled correctly to improve reliability and prevent runtime errors during metadata generation
change graphprinter dumperethreadhandler to protect so that graphprinter can be subclassed
added a method to set the average price in HuobiAdapters. java to ensure the order's average price is accurately
refactor field handling in ProjectionOperation and TypeBasedAggregationOperationContext to improve clarity and consistency to enhance code readability and maintainability by using more
modify the player handling logic in FakePlayer. java to check if the player viewers before adding it to the player connection to improve player management
added constant state management in FolderAdaptiveIcon and ShiftedBitmapDrawable to improve code readability and maintainability by centralizing constant state management
refactor SPDYConnection creation and session handling in SPDYClient. java to improve code readability and maintainability by consolidating connection logic
added null check for object in ProtostuffObjectOutput and created a new test class ProtostuffObjectOutputTest to ensure proper handling of
pdfbox - 4071 : improve error handling, a suggest by valerybokov
refactor BarrowmanCalculator class to improve code readability to enhance maintainability and facilitate future updates
ggb - 196 axis should not show 0 / 1 if they don't
replaced setFilter and wrap methods with unsafeSetFilter and unsafeSetWrap calls to improve performance by avoiding unnecessary filtering and wrapping operations
modified the returnToWorkspace method to remove unnecessary whitespace to improve code readability and maintain consistency in formatting
added SSL configuration for HTTPS connections in CustomUrlJob. java and created a custom URL trust manager in CustomUrlTrustEverything. java
added a method to retrieve the real used clock rate string in multiple classes to improve accuracy of clock rate representation in media formats
updated TextureAtlas class to improve texture handling to enhance performance and maintainability of texture management
replaced getProductName with getModuleName in ProjectGenerator and added a setModuleName method in AppleLibraryBuilder to improve clarity and functionality of project generation
added locking and unlocking logic in TestSlot. java to ensure proper resource management and prevent potential race conditions
add a check for ID _ LIST type in SqlTreeBuilder and create a new test class TestFindIdsWithInheritance to enhance query handling
added assertions to verify the response header connection in WebSocketServletRFCTest to ensure proper handling of response headers and improve test reliability
[ wasm ] clear reference multi - value stack when create a function.
added a ttl property and corresponding getter / setter methods in ClickHouseLogCollectClient and updated database connection settings in LoggingClickHouseLogPluginTest
updated serialization type from NESTED _ OBJECT to NAMED _ FIELD and implemented related methods in CustomPreconditionWrapper and XMLChangeLogSerializer
replaced the use of ` Executor ` with ` Server ` and ` HandlerCollection ` in ` DeploymentExceptionTest. java ` to improve server setup
added error handling for vector drawable creation in CommonsApplication and NearbyController to improve robustness by logging exceptions and logging them during initialization
added a null and empty check for objectName in PostgresDatabase. java to ensure that the object name is trimmed when it is not empty
updated error message from " could not find file " to " could not open file " in Command. java and TestPrint. java to improve
[ hotfix ] [ table - planner - delegation ] make planner and executor class constant
updated variable names and improved subject handling in KeyTool. java and Resources. java to enhance clarity and maintainability of subject generation logic
added a deprecation annotation to RuntimeOptions. java to indicate that the feature will be removed in future versions
replaced ByteBuffer buffer handling with a method that uses UTF - 8 encoding to simplify code and improve readability by using UTF - 8 encoding directly
added a new interface PermissionEvaluator in the org. springframework. security. expression package to provide a mechanism for evaluating permission based on authentication
added support for ERASE _ LINE _ ON _ FINISH option in LineReader and LineReaderImpl classes to enhance functionality by allowing prompt
hbase - 2658 master should not try to connect to a server that don't exist
updated exception types from CALC _ MERKLE _ ROOT _ FAILED to BLOCK _ MERKLE _ ERROR across multiple files to ensure
replaced JarFile retrieval method with URLConnection for improved URL connection handling to enhance code reliability and maintainability by using a standardized URL and URLConnection
add error handling for HttpClientResponseException in DefaultHttpClient. java and improve error logging in FullNettyClientHttpResponse. java to enhance error reporting and
changed the container initialization from center to centerAbsolute in Picker. java to ensure the component is positioned relative to its parent layout
[ hotfix ] [ network ] make networkbufferpool # requestmemorysegments interruptable
added a new static variable ` newMbeanServer ` and updated related logic in ` TestJmxIntegration. java ` to improve memory management
replaced JUnit runner with a retry test rule in AbstractIT. java to improve test reliability by integrating retry functionality
refactor QueryStateMachine to use transactionManager for auto - commit checks to enhance transaction management and improve code maintainability
updated import statements in CsvFieldType, CsvTable, CsvTableScan, CsvTest, and added a new package - info. java file to
added tests for distinguished name parsing in InstrumentationConfiguration to address issues related to " javax. microedition. khronos.
[ hotfix ] [ runtime ] remove unnecessary lambda usage in streamtasktimertest
refactor URI retrieval logic in Request. java and add unit tests in RequestTest. java to improve code clarity and ensure proper handling of CONNECT requests
replaced the constant ` KEY _ LAST _ SEEN _ VERSION _ CODE ` with a direct reference to ` WhatsNewActivity ` across multiple files
added methods for session availability and session unavailable in the SessionManager class to improve session management and provide better error handling
added a new package " liquibase. pro " to the scan package to facilitate the scanning of the Liquibase project
replaced ` deleteSyncFolders ` method with ` deleteOtherSyncedFolders ` method in ` MainApp ` and ` SyncedFolderProvider `
updated the ` loadWithNewGlobal ` method to accept an additional argument to enhance functionality by allowing additional arguments during the loading process
updated startIdx logic in FastPathResolver. java for better clarity to improve readability and maintainability of the code
updated the weigher method to use ` getRetainedSize ( ) ` instead of ` length ( ) ` to ensure accurate retrieval of
renamed method from ` isExceedRandomizationdepth ` to ` hasExceededRandomizationDepth ` across multiple classes to clarify the purpose of the method
added support for handling " LEAD " and " LAG " functions in UnsupportedOperatorsVisitor. java and corresponding tests in TestWindowFrame.
clear the proxy request's headers in AbstractProxyServlet. java to ensure that proxy requests do not modify stale headers
added a check for SA attach in CompressedClassSpaceSizeInJmapHeap. java to skip tests that are not expected to work
added null check for bgColor in GraphicsDevice. java and created TranslucentWindow. java to enhance robustness by preventing potential NullPointerException
added null checks for user information before displaying them in UserInfoActivity to improve user experience by preventing potential null pointer exceptions
added a custom field serialization implementation in PrecompiledHeaderData. java and removed Preconditions check in PreprocessorDelegate. java to ensure that precompiled
[ flink - 20536 ] [ table - planner - blink ] add update - mode property to kafka table source sink
added integration tests for named output groups in MultipleOutputsIntegrationTest. java to ensure that named outputs are correctly used in the project workspace
updated regex pattern in FileSettings. java to handle duplicate entries to ensure that only unique entries are processed to maintain data integrity
nifi - 1065 : fix npe in stateless flow
replaced manual array conversion with ArrayUtils. EMPTY _ OBJECT _ ARRAY in BinaryCipherExecutorTests. java to improve code readability and maintainability by using
added @ TaskbarModeSwitch annotation to TaplTestsQuickstep. java to enable taskbar mode for persistent testing
added entries for " leaving - dock " and " energy - save - mode " to DeviceStatus to enhance device status management for better user experience
catch more specific exception ( for item loading ).
removed unused imports and added an @ Ignore annotation in KrakenFuturesStreamingPublicDataTest. java to clean up the code and temporarily
added a conditional check for non - 2x graphics before retrieving the current surface scale to ensure compatibility with devices running 2x graphics
refactor RussianLowerCaseFilter to improve code readability to enhance maintainability and facilitate future updates
replaced server and client properties in CsvBulkLoadToolIT and updated setUpTestDriver method in QueryUtil to simplify configuration handling and improve test setup
replaced file separators with path separators in FileDisplayActivity to ensure consistent formatting of file names across different operating systems
changed visibility of ` in ` and ` inRead ` from private to protected in ` LittleEndien ` and introduced a ` Resettable
added a boolean flag ` repeatFirstLineIndent ` and modified indentation logic in ` ColumnText. java ` to improve indentation control based on the
cast the oid comparison to an Object type to ensure proper type handling for comparison operations
remove redundant code for setting metric and health check registry in HikariPool. java to streamline the configuration handling and ensure consistent connection setup
loopex : use controlflowanchored instead of controlflowanchornode
added setFocusPainted ( false ) method to buttons array in WindowsPlacesBar. java to ensure that the buttons are not painted when focus
added a check for UniqueConstraint in DatabaseSnapshot. java to handle cases where there is no backing index ( disabled PK on oracle )
added a new method ` getAccountLedgersWithParams ` to the ` AccountAPI ` class for retrieving account ledgers to enhance functionality by
[ community ] fix npe in community admin group
refactor GapInsertionDetector to handle empty utterance words before processing to improve robustness by ensuring only valid words are processed
added unit test base on user forum issue
updated thread naming from getBackgroundThreads to getDatabaseUpdateThreads in FeedRefreshUpdater and added getter and setter methods in ApplicationSettings to improve clarity of thread
increased FASTSCROLL _ THRESHOLD _ MILLIS from 40 to 10 to improve performance during scrolling operations
changed the type of SystemClassName from a raw string to an instance of " Ljava / lang / System " to ensure compatibility with the latest Java
hhh - 13644 - em. getall ( ) return empty stream instead of null
added a null check for ` getApiProperties ( ) ` before initializing ` apiProperties ` to avoid potential NullPointerExceptions when ` getApiProperties (
added new ` BinaryFrameGenerator ` and ` TextFrameGenerator ` classes for WebSocket frame generation to enable support for binary and text WebSocket frames in
simonstewart : use selenium to wait for element presence.
refactor lat, lon, and radius calculations in RandomGeo3dShapeGenerator. java to improve code readability and maintainability by simplifying random
added a keepAlive method to manage ClassLoader references to improve resource management and prevent potential memory leaks
changed return value from false to true in SQLiteDatabase. java to ensure the method accurately reflects the intended functionality
bump jm _ JSR166 _ lockmonitorenter to use a constant for util / concurrent signature.
added MkdirStep to multiple AndroidAar, AppleBundle, ApplePackage, FatBinary, and FatBinaryTest files to
modified coordinate validation in MeshLeveler. java to include error messages for x and y coordinates to improve error handling and provide clearer error messages for
[ drools - 5351 ] avoid npe when applypmmlmodelcommand be not available on classpath ( # 5352 )
updated the condition for locationMode to thermalStatus to ensure proper validation of the thermal status
added OS - specific temporary directory handling in MountableFile. java to ensure temporary directory is only created on macOS to avoid conflicts
don't use mmap by default for non - windows platform
added a null check for the organization in PluginManager. java to ensure that plugins require organization in the pom. xml file
removed contributor license agreement from SepPostingsWriterImpl. java to address licensing issues with distributed files
deleted the TerminateWebSessionListener class to remove unused code to streamline the session termination process
updated the method call to retrieve the Java class path to ensure compatibility by using the system property ` java. class. path `
replaced ArrayUtils. EMPTY _ BYTE _ ARRAY with new byte [ 0 ] arrays in KM200Device. java to improve memory efficiency and avoid
added tests to verify behavior of Javadoc changes in AddLicenseHeaderTest. java to ensure Javadoc is not changed during the rewrite process
change the default value of LAUNCHER3 _ PHYSICS from false to true to enable physical rendering in the launcher
added a div class'noPrint'to the HTML output to indicate that the output should not be displayed
updated the version from LUCENE _ 31 to LUCENE _ 40 in multiple files to reflect the latest version and improve test
added private fields for symbolicator and task in BsdDebuggerLocal. java and updated platform detection in PlatformInfo. java to improve handling of
use weakreferences to prevent memory leak in fmlclienthandler.
don't log ` ` connection reset by peer''
[ java ] use commonconfiguration. admin _ dir _ name when construct client conductor.
added a break statement in TouchImageView. java to improve control flow during image processing
chore : [ dialogflow ] update to v3.15. 0
refactor FeedableBodyGenerator to simplify SSL handshake handling to improve code readability and maintainability by reducing complexity
added support for handling CONTRAVARIANT and CONTRAVARIANT generic types in TypeUtils. java to improve type inference capabilities and
don't use nonblocking hashset in memtablespendingflush. patch by brandonwilliams, review by brandonw
added null checks for tree. errs in MemberEnter. java and introduced new classes ParseErrors. java and Erroneous. java to
replaced the use of SWT. NO _ BACKGROUND with SWT. NONE in BugInfoView. java to ensure the browser is displayed without background
updated the method call from ` finish ( ) ` to ` dialog. cancel ( ) ` in ` AboutActivity. java ` to ensure proper
updated lowerBound and upper bound calculations in IntegerStamp. java and added a new test method in IntegerStampTest. java to ensure proper handling of
added a method to read an input stream from an InputStream in ITextUserAgent. java to improve image loading efficiency by using a ByteArrayOutputStream
added variables defining and undefining in SwitchCompiler and updated CaseStmtToken to extend StmtToken and manage local variables more effectively
replaced the boolean flag ` needFailover ` with a try - catch block to handle unsupported cipher providers to improve error handling and provide debugging information during
removed " psapi. lib " from the AdditionalDependencies list in WinGammaPlatformVC10. java to streamline dependencies by eliminating unnecessary
updated SQL comment handling and assertion in StringUtilsTest. java to improve readability and maintainability of the test code
added compatibility and encoding settings to TemplateEngineFreemarker. java and updated maliciousJavascript alert formatting in ApplicationControllerTest. java to ensure
refactor byte array handling in CRDGeneratorTest. java to improve clarity and maintainability of the code
changed access modifier of ` hold _ samples ` and ` type ` from private static to default in ` SampleSenderFactory. java ` to allow
added a conditional check for the " testngEmailableReporter " system property before adding it to the addReporter method to ensure the addReporter
added quoting logic in CommandLineBuilder and updated test cases in CommandLineBuilderTest to ensure proper handling of escaped characters and improve test coverage for quoted values
removed public interface from multiple classes to allow access to these interfaces from other packages
added job. setNumReduceTasks ( numFetchers ) to FreeGenerator. java to set the number of reduce tasks for the job
updated field retrieval logic in SchemaGeneratorHelper. java to improve handling of default object fields and their definitions
updated file version from 505365 to 532077 to reflect the latest release version
added GL _ ARB _ texture _ float extension checks in FloatTextureData. java to ensure compatibility with ARB texture rendering
added file writing functionality and refactored closeFile method in FileServer. java to enhance file management and improve resource management
added a null check for outputDirectory and jarStream before setting it to avoid potential NullPointerExceptions when outputDirectory is null
added PerfStatsCollector to measure the duration of a database execution in ShadowSQLiteConnection to improve performance tracking for SQLite operations
updated the method calls from ` getCurrentJDKTool ` to ` getTestJDKTool ` in ` JMapHProfLargeHeapTest. java `
add a new enum ResourceErrorHandling in the org. geoserver. config package to categorize error handling related to configuration issues
lucene - 986 : don't throw eofexception if the file be large than the buffer size.
added error handling for missing resources in DefaultServlet and JspServlet to improve error reporting by providing context for missing resources
updated ForkJoinPool and ForkJoinWorkerThread to accept an innocuous flag and added AccessControlContext class for permission testing to enhance thread behavior and ensure
updated CHECK _ EVERY _ N from 10000 to 0xFFFF and added logging statements to improve memory management and enhance debugging capabilities
hbase - 26945 testsplittransaction. testopenregion fails due to race condition ( chunhui )
added null check for currentSelectionArea before accessing its properties to prevent potential NullPointerExceptions when currentSelectionArea is not initialized
added a parameterized test for JaasDemo in DemoModulesTests. java to enable testing of Jaas functionality in the Jetty environment
added spanX and spanY checks in CellLayout. java to ensure proper spacing calculations for folder creation
[ hotfix ] [ test ] fix typo in cachoffheap
added support for referencing a later table in CreateTable. java and corresponding test cases in TestCases. java to ensure that tables cannot be referenced
added conditional logic to handle extra XML gid values in TiledLoader. java to improve error handling by logging warnings when extra XML gid values are
synchronized the setWorkingSet method to ensure thread safety during job set operations
added a new Java file named Solution. java to implement a solution for determining the starting stone based on a specified number of steps
added an interface AddressChecker and refactored the TrackerRequestProcessor to use it to improve code clarity and maintainability by centralizing address validation
[ forge ] remove unnecessary check for translucetranslucentmovingblock ( ).
remove the default tag from the tooltip. close # 359
changed ` thingTypeVersion ` from ` int ` to ` String ` and updated its assignment to use ` Integer. toString ( ) ` instead
added a null check for recieptents before sending messages to prevent potential NullPointerExceptions when recieptents is not initialized
added a private method ` isSingle ( RouteMatch <? > finalRoute, Class <? > bodyClass ) ` to simplify the logic
updated DockerClientFactory and RemoteDockerImage to use a boolean flag for failure handling to improve reliability of Docker operations by allowing control over failure
added resourcesMode parameter to AndroidMetadata and updated related methods to support resource management based on device boot properties
replace DateUtils. truncate with Calendar. getInstance ( ) for date manipulation to improve code readability and maintainability by using a standardized Calendar instance
replaced ` gradleImporter. importProject ( projectFile ) ` with ` gradleImporter. importProjectCore ( projectFile ) ` to ensure the
added handling for CommandFailedException in LiquibaseCommandLine. java to improve error reporting for command - related exceptions
refactor TreeMap class structure to improve code readability and maintainability
added methods to enable and disable asynchronous stack traces in Display. java and created DebugRunnable class for exception handling in Display. java to improve performance
added a method to set the glow color in BubbleTextView and updated folder glow color in Folder to improve color customization for folder items
added CSS class assignments for link and desc in LinkedFilesEditor. java to ensure consistent styling across different file types
updated AbstractJdbc2ResultSetMetaData to return " java. lang. Short " instead of " java. lang. Short " and added new test
removed the success flag from the write operation in Lucene40LiveDocsFormat. java and removed the call to deleteFilesIgnoringExceptions in Simple
added null check for _ info in HttpConnection. java to prevent potential NullPointerException when upgrading is not initialized
added a constructor to ShadowLocation that accepts a provider string to facilitate the creation of a custom location object
added a condition to ensure maxRAM is greater than 2048 when using 32 - bit RAM to prevent excessive RAM usage
added support for empty local map stats when no data map be present.
added logging functionality to FileProfileActivator for file existence and missing checks to improve debugging capabilities and provide visibility into file activation processes
updated the name in the addToBody method from " noname1234 " to " invalid _ " to ensure the method accurately reflects the
change from ` toList ( ) ` to ` toSet ( ) ` in ` GuildImpl. java ` to ensure proper conversion of roles to
updated the return value from - 1 to 1 and modified the array size check from 30 to MAX _ NUM _ UPLOADS _ SHOWN
added unit tests for delete operations in DashboardUserMapperTest. java to ensure that the delete operation behaves as expected and maintains the integrity of
replace recipient identifier with primary participant identifier in InstructorFeedbackResultsPageData. java to improve clarity and maintainability of the code
LLVMDerefHandleGetReceiverNode, LLVMPointerStoreNode, LLVMStoreNodeCommon, LLVMDerefHandleGet
added a method ` getBufferSize ( ) ` to the ` BufferedIndexOutput ` class to provide a way to retrieve the buffer size from the
updated the terasology cli command to include usage help and added a footer for alternatives to enhance user experience by providing context on usage instructions and
refactor switch statement for better readability in DrawerActivity. java to improve code clarity and maintainability
refactor CommandLineParserTest to improve test coverage to enhance reliability of command line parsing functionality
added constants and interpolators for the ALL _ APPS animation behavior in PortraitStatesTouchController to enhance animation control and improve user experience
updated the method to use ` javaNameFromExternal ` instead of ` javaName ` to improve clarity and consistency in naming conventions
removed native methods for setFrame and release in CWrapper. java to streamline the codebase by eliminating unused native methods
added error handling for non - constant elements in the Checker class and created a new ValueTest class with corresponding test cases to ensure that only
updated test files for MontgomeryMultiplyTest, TestMulAdd, and TestSquareToLen to improve test coverage and ensure
removed null check for constructors in PojoUtils. java to simplify the condition for better readability and maintainability
refactor JiraConfiguration to improve code readability to enhance maintainability and facilitate future updates
updated string concatenation logic in UploadBuild. java to improve readability and maintainability of the code
updated bounds calculations in DeviceProfile. java to include search bar offset adjustments to improve layout accuracy by accounting for search bar positioning
don't schedule next disconnect if idle timeout be 0.
replaced direct calls to ` getLauncher ( ). runOnUiThread ( ) ` with a call to ` getLauncher ( ) ` to improve
added a method ` getSourceGroupOptional ( ) ` to the ` AppleSource ` class to provide access to the ` getSourceGroupOptional ( )
increased the timeout duration from 220000 ms to 320000 ms in TestSimTriggerIntegration. java to improve test reliability by allowing more time
[ hotfix ] [ runtime ] fix typo in floatstreamreader
added null checks for bestSoFar and improved path comparison logic in AbstractNodeCostSearch. java to ensure robustness by preventing null pointer exceptions
added a check to skip certain component types in ResourceEditorView. java to ensure that only valid component types are processed
replaced the use of ` UiThreadHelper. getBackgroundLooper ( ) ` with ` LauncherModel. getWorkerLooper ( ) ` in ` Drag
added a check for the latest commit point in ReplicationHandler. java to ensure that the correct commit point is retrieved from the core
added unit tests for retrieving IMEI and MEID in ShadowTelephonyManagerTest to ensure correct functionality of IMEI and MEID
removed unused debug method from SimpleHostRoutingFilter. java to streamline code and improve readability by eliminating unused complexity
added methods for destorying and closing resources in multiple classes to ensure proper resource management and prevent memory leaks
[ hotfix ] [ test ] fix npe in normalmessagemsgendandrecvit
replaced Charset. forName ( " UTF - 8 " ) with StandardCharsets. UTF _ 8 in OutputStreamWriter initialization to ensure consistent character encoding usage
hbase - 2658 bulk load should not crash if multi - family file be not find.
added a nullable commission parameter to DefaultWithdrawFundsParams and updated RippleWithdrawFundsParams to include the commission
removed unused import of StreamTerminator in AutoClosingReferenceStream. java to streamline code by eliminating unnecessary dependencies
updated exception handling to include both SolrServerException and IOException in LoadSolrBuilder. java and SolrLocator. java to improve error handling consistency and
refactor Java2TypeScriptTranslator to include error handling for abstract methods to improve robustness and maintainability of the code
replaced direct logging of ` FileSessionDataStore ` with a try - with - resources statement to improve resource management and avoid potential memory leaks
added a new ` unknown ` type to ` MutableColumnDataType ` and updated ` Entities ` classes to include ` XML `, ` HTML
renamed test classes SubExactLConstantTest and SubExactLNonConstantTest to improve clarity and maintainability of test cases
added a null check for claimRequestString before parsing to avoid potential NullPointerExceptions when claimRequestString is null
updated HiveFilterSetOpTransposeRule to use RelBuilderFactory instead of FilterFactory to improve compatibility with Hive's builder pattern
updated the ` processTypeHintForNestedDocuments ` method to handle null source and nullable values correctly to ensure proper handling of null values and improve
replaced direct calls to ` mcr ` with ` coreStatus ` in ` CollectionsAPIDistributedZkTest. java ` and added
initialize moddirtransformer and moddirlocators lists to ensure proper initialization of mod dir moders and locators
updated error message formatting in AbstractQuerydslProcessor. java to improve readability of error messages for better debugging
pe graph decoding : use getcallerbytecode ( ) instead of getcallstack ( )
replace setOf ( ) with copiedSetOf ( ) in RestTemplateBuilder. java to improve code readability and maintainability by using a consistent method
( chore ) camel - mail : use identity hashcode for mailmessage
added null checks before setting the redelivery policy and original destination in ActiveMQConnectionFactory and PrefetchSubscription classes to prevent potential NullPointerExceptions and
fix for http : / / code. google. com / p / mybatis / issues / detail? id = 465 : add
added a new ` WaveGeneratorActivity ` to the ` InstrumentsFragment ` and modified ` InstrumentsFragment ` to launch it to improve
added logging for sheet overrides and improved null handling in KeyedProperties. java and SheetOverlaysManager. java to enhance error handling and provide clearer
added test methods for logging, exec, and shell functionality in PodIT. java to improve test coverage and ensure shell functionality is monitored
added a test method to detect no index and create a new Solr server to ensure proper handling of no index and create a new Solr server
added a conditional statement to call the superclass's dispatchMethodKernelOkra method to ensure proper handling of method dispatching in the Graal
added sorting functionality to DefaultDnsClient and MxRecord classes and modified DefaultMxRecord to implement Comparable for MxRecord to improve record
refactor thread creation to use a lambda expression for cleaner code to improve readability and maintainability of the code
added validation to SelectBox and set the selected value of " Linux6 " in UITest to ensure the dropdown reflects the correct operating system
replaced IllegalStateException with Collector. printStackTrace ( e ) to improve error handling and provide more detailed stack trace information
added a parentSplit parameter to the createState method and updated related logic in FlowBuilder and SplitState classes to enhance state management by associating
changed connectionState from int to volatile to ensure thread safety during connection state retrieval
increased the default polling period from 10 to 1000 in AbstractPollingEndpoint. java and added an assertion for periodic trigger duration in EnableIntegrationTests.
refactor MemoryStack and MemoryUtil to improve memory allocation methods to enhance clarity and maintainability of the code
added error handling for ` DocletAbortException ` in ` HtmlDoclet ` and ` AbstractDoclet ` classes to improve error reporting and
[ java ] use enum instead of class in unusedmodifierrule
updated method names for consistency and clarity in logging statements to improve code readability and maintainability
updated the test parameter name from " ssl = { 0 } " to " ssl = { 0 } " to improve clarity and consistency in test
added exception handling for IllegalFormatException in TransformationHelper. java to improve error logging and provide clearer error messages during transformation failures
replace userPermissions with activeConnectionPermissions in ActiveConnectionRESTService. java to ensure correct retrieval of active connection permissions
replaced the equality check with a new EqualsBuilder implementation to improve code readability and maintainability by utilizing Apache Commons Lang3's EqualsBuilder
added null check for outputRoot in FileProcessor. java to prevent potential NullPointerException when outputRoot is null
pdfbox - 2576 : add annotationfilter interface for interactive annotation.
refactor StackTraceCleaner class to improve error handling to enhance reliability of stack trace cleaning processes
modify content type handling in PluginServlet to differentiate between CSS and JavaScript files to ensure correct content type is set based on file extensions
hhh - 14686 skip test due to sybase
updated parameter names and logic in the upgrade method to improve clarity and maintainability of the upgrade process
added getStats methods to AbstractDataImportHandlerTest and Context classes and replaced AtomicInteger with AtomicLong in DocBuilder to improve performance by utilizing AtomicLong for
updated the executor service to use a configurable long polling mechanism to enhance flexibility in handling long polling scenarios
added AccessibilityManagerCompat imports and refactored gesture handling in PagedView and BaseOverview classes to improve accessibility testing and streamline gesture
updated the initialization of unlocks in UnlocksDialog and added a new button in PausedDialog to improve clarity and functionality of unlocking functionality
clear all the drops in the player event to ensure that only relevant player data is processed
added a constant DEFAULT _ PARAM in StreamResult. java to define a default value for the input name
updated testNormalizeOrder method to throw IOException instead of MalformedURLException to ensure proper handling of IOException in test cases
updated the output format in TsFileSketchTool. java and added strBuffer flip in LocalTsFileInput. java to improve clarity
added exclusion of Swift headers in UmbrellaHeader. java and updated related tests in ProjectGeneratorTest. java to ensure proper handling of
renamed the method ` onHttpError ` to ` onHttpHeaderError ` in ` GrizzlyAsyncHttpProvider. java ` to
added encoding functionality to RequestPlugin. java to ensure proper data encoding for requests
mondrian : fix ` ` expr'' for mondrian's test
added null or blank password validation in LdapAuthenticationProviderImpl and created corresponding test cases in TestLdapAuthenticationProviderImpl to ensure proper error handling for
pdfbox - 4071 : fix typo find by codespell on fossies. org
added a condition to clear complexWriters in ProjectRecordBatch. java to ensure proper resource management and prevent memory leaks
added @ SuppressWarnings ( " serial " ) annotations to multiple cache - related classes to suppress serialization warnings for better debugging and maintainability
added null check for classInfo in ClassGraphClassLoader. java to prevent potential NullPointerExceptions when classInfo is null
added schema error parsing logic in ErrorResponseException to ensure proper handling of schema errors when location is empty
added a constructor to the EventSourcingRepository class that initializes the eventStore and snapshotTriggerDefinition to ensure that the eventStore is properly
refactor symbol handling logic for binary nodes in Attr. java to improve clarity and maintainability of symbol definitions
updated text retrieval logic in SearchedPeopleCursorAdapter and added error handling in QustomDialogBuilder to improve robustness of text handling and ensure
updated command handling in NuvoConnector and NuvoHandler to support standby mode to improve command processing and ensure proper handling of stand
tiff : use ` tiffBaseline. planarconfig _ chunk ` instead of ` tiffExtension. planarconfig _
added close ( ) method to ItemListTag. java to ensure proper resource management and prevent memory leaks
added a new ` AverageUtil ` class and modified ` TileAdvancedCraftingTable ` and ` TileAssemblyTable ` to use it
added new classes SigInt and SigIntBarrier for signal handling in concurrent scenarios to facilitate asynchronous signal management in the application
added handling for HierarchicalGraph and EdgeIterable in ExporterGEXF. java to improve graph management and support hierarchical edges
replaced byte array with Text in TCTLSeparatedProtocol. java to improve handling of character encoding errors
added constructor to ` FeedbackRubricQuestionDetails ` and ` FeedbackRubricResponseDetails ` to initialize rubric descriptions and handle invalid
updated condition to compare catalog and schema cases using ORIGINAL _ CASE to ensure correct comparison between DB2Database and CatalogAndSchema objects
simonstewart : reset the proxy before each test.
added Integer. toString ( ) calls to criticalErrors to ensure accurate representation of diagnostic information for better debugging
replaced the call to mTextWatcher. reset ( ) in InPlaceEditView. java to ensure that the textWatcher is reset consistently across the
refactor InternalByteArray and TruffleString classes to improve code readability and maintainability
[ flink - 2594 ] [ gelly ] make outedge function generic
renamed classes related to soft assertions to improve clarity and maintainability of the assertion framework
deleted the file ClassA \ 314 \ 201. java and created a new test class DiacriticTest. java for Mac OS X
[ java ] use a cyclic barrier in cluster membership test.
added error handling and improved null checks in DefaultMaven. java and DefaultGraphBuilder. java to enhance robustness and prevent potential null pointer exceptions
updated SSL logic in ServiceRegistryConfig and added dynamic configuration assertions in TestServiceRegistryConfig to improve SSL handling and ensure correctness of IP port configurations
updated Mockito library version to ensure compatibility with the latest testing framework
removed unnecessary whitespace in Jdbc3Connection constructor to improve code readability and maintain consistency
added a synchronized method ` ensureInstance ( ) ` to the ` ServletHolder ` class to ensure thread - safe initialization of the servlet instance
added logging for server time and expiration in BinanceExchange and BinanceBaseService classes to improve traceability and traceability of delta server time
added support for " NonStop ( tm ) Servlets For JavaServer Pages ( tm ) v8. 5 " in Tomcat container adapters to
added null check for the current form in InfiniteProgress. java to ensure that animations are only registered when the current form is available
updated the ` decodeResource ` and ` drawBitmap ` methods to accept an additional ` BitmapFactory. Options ` parameter to enhance flexibility in bitmap decoding
[ java ] add executor to the aeron so that it can be use in the rate subscriber.
added functionality to prevent next click and long click actions in TimelineArrayAdapter to improve user experience by preventing accidental clicks and improving text formatting
added " text " to the unmodifiable data types in PostgresDatabase and updated NumberType checks in ColumnSnapshotGenerator to enhance data type handling and ensure
fix entryprocessor bounce test ( # 3683 )
updated state checks in AmbariManagementControllerImpl and related classes to improve clarity and maintainability of state management logic
added null check for bridgeUid before adding it to the inbox in CreateBridgeServlet. java and updated test cases in CreateBridgeServletTest.
refactor robots handling in PreconditionEnforcer and CrawlServer classes to improve clarity and maintainability of the robots fetching logic
added a null check for the display name in multiple conditions to prevent potential NullPointerExceptions when checking for the display name
added a default shader parameter to the SpriteBatch constructor and updated related methods accordingly to ensure shader is initialized with a default shader when available
added " - c synchronous _ commit = on " option to properties to enable synchronous commit functionality in tests
added TypeCoercer to handle element type coercion in SortedSetTypeCoercer to ensure proper handling of duplicate elements during type coercion
updated message strings for folder and local removal actions in RemoveFileDialogFragment and RemoveFilesDialogFragment to improve clarity of user feedback regarding folder and local
added a range check for safe characters in URLPathEncoder to ensure safe characters do not exceed the allowed range
added port assignment and updated fragment storage registration logic in UserContext. java to ensure the correct port is used for fragment storage registration
removed andReturn statement from HostResourceProviderTest to simplify test setup by eliminating unnecessary assertions
[ hotfix ] [ yarn ] remove log parameter from yarnentrypointutils
refactor SIPCommFrame to use a separate init method for color and background color initialization to improve code readability and maintainability by centralizing initialization
removed ShadowHtml from HtmlTest. java and updated assertions in HtmlTest. java to streamline test code and improve readability by eliminating unused
added a new implementation of ` StarTreeRecordStoreFactoryBlackHoleImpl ` in the ` com. linkedin. thirdeye.
replaced ` logger ` with ` h3Logger ` and ` quicLogger ` in ` HttpClientLoadTest. java ` to improve logging consistency
removed the private modifier from the addListeners method in MockSettingsImpl. java and added a test for listener validation in MockSettingsImplTest.
[ hotfix ] [ runtime ] fix typo in statehandlestore javadoc
updated import statements for Constraint from org. eclipse. jetty. util. security to org. eclipse. jetty. http. security in multiple test
updated default section value from " None " to " Const. DEFAULT _ SECTION " across multiple classes to ensure proper handling of different sections and
refactor resource handling in JMeterUtils to use try - with - resources to ensure proper resource management and avoid potential resource leaks
camel - 1145 : fix the test failure on port not available.
added buildTarget and getAbiJarParameters methods to multiple classes to enhance functionality by associating jar parameters with the build context
updated the error message in TrustEverythingTrustManager. java to provide clearer guidance for peer certificate verification
api : remove override getpagesizeval ( ) from listcapacitycmd
added handling for the CLOSED case in IteratingCallback. java to prevent further processing when the callback is closed
added an ` isAuthorized ` boolean and modified related methods in ` AccessControlContext ` and ` AccessController ` classes to enable conditional authorization based on
refactor event sending logic in OSGiDeployer. java to improve clarity and ensure proper handling of application types
added support for both " tiff " codec and " tiff " container in DLNAMediaInfo. java to enable compatibility with additional image
replaced ` result ` with ` types ` and ` assumption ` in ` OptimizedCallTarget. java ` to improve clarity and maintainability of
added a new file ` CubocDesktop. java ` and modified loops in ` Map. java ` and ` MapRenderer. java `
updated test resource and file paths in PolicyMonitorTest. java to ensure test resources are correctly located in the target directory
removed all files from trashbinListAdapter in TrashbinActivity to ensure that the trashbin list is clean up before processing new data
replaced ` org. eclipse. jdi. Bootstrap. virtualMachineManager ( ) ` with ` com. sun. jdi. Bootstrap.
truffle - llvm : make checkglobalvariablestoragenode an abstract method.
updated the ` createLauncherEvent ` method to accept an ` Intent ` parameter and adjusted related logic to enhance event data handling by incorporating
added a constant for maximum burn target LOWER floor in BurningManPresentationService to ensure that the burn target LOWER falls below a
migrate UniqueConstraintSnapshotGeneratorSnowflake to use H2Database for creating unique constraints to enhance compatibility with H2 database features and improve
modify the SQL item selection logic in DMLTransformer. java to ensure correct syntax for selecting named values and values from DUAL
updated service ticket URL from " http " to " https " to ensure secure access to the service ticket URL
added an ` isStatement ` parameter to the ` getDefaultValidFunctionName ` method and introduced a ` hideDefaultName ( ) ` method to
refactor JarLauncher class to improve code organization to enhance maintainability and readability of the code
[ hotfix ] [ runtime ] use generic < t > instead of raw < t >.
added new dimension to deviceconfiguration and modified firstCallPeerIsGV to false in CallGTalkImpl and TransportManagerGTalkImpl to improve
added a test for updating a PGobject in ResultSetTest. java to ensure proper handling of date values in the database
added a check for empty results in the password reset endpoint to handle cases where the user does not have an UAA origin
replace getChildNodes ( ). item ( 1 ) with getDocumentElement ( ) to retrieve the document element directly from the XML document
refactor Cache class to improve cache management to enhance performance and maintainability of the code
renamed ` timeInSec ` and ` prevTimeInSec ` to ` timeMillis ` and ` prevTimeMillis ` in ` Isochr
added a check for valid binding in the TileLightRelay class to ensure that only valid light relayes are processed
added a new ` Chainer ` class and updated related methods in ` CollectionSubject ` and ` MySubject ` to enhance testing capabilities for chained
refactor Model class to improve code readability to enhance maintainability and facilitate future updates
updated recordedTime value from a fixed value of 619315200000L to a dynamic value of 619315200000L to ensure
added handling for Windows terminal types in LineReaderImpl. java to ensure proper resizing of status based on the terminal type
updated the method to conditionally set the host version state based on the state of NOT _ REQUIRED to ensure that the host version is only set when
updated test root paths and added JRE _ PATH constants in IntegrationTestCase and JsInteropRestrictionsCheckerTest to improve clarity and maintainability of test
replaced HashSet with LinkedHashSet in multiple classes to ensure predictable iteration order for artifacts
remove try / catch from operationservicemanagerimpl ( # 759 )
refactor configuration resolution in KnativeEnvironment. java to improve code readability and maintainability
[ hotfix ] fix typo in commitlogarchiver
added connection methods to CloudSolrClient and created a test for upload configuration in TestCloudSolrClientConnections to enhance functionality and ensure correct handling of
synchronize allbindings in Breakpoint and DebuggerSession classes to ensure thread safety when accessing shared resources
added cache and files directories to ShadowContext and refactored file handling methods to improve code organization and maintainability by centralizing file management logic
added LinkedHashSet and TreeMap to the list of classes in SecureXStream. java and added assertions in XStreamPersisterTest. java to ensure that
kiemodefromebuilder and kiemodefromebuilder to be compatible with kiemodefromeb
added handling for Farmland objects in BlockEventListener. java to ensure proper processing of farmlands based on their state
added a default implementation of the getLocalIp method to ensure that the method returns a default value
replaced ` rs. getObject ( " OBJECT _ VAL " ) ` with ` SerializationUtils. deserialize ( ) ` in ` JdbcStepExecutionDao
updated Chinese character handling in multiple dictionary classes to improve consistency and clarity in language processing
added " python37 " to the list of Python resource files and updated the extension to " - gpu " to ensure compatibility with the latest Python
replaced ArrayList with a JButton to refresh the table in PluginTab. java to streamline the code and improve user experience by allowing users to refresh
changed log level from info to warn for history file errors to provide more granular logging during development
vmware : fix npe in vmwarestorageservice. updatetargetvm ( )
camel - sftp - fix flaky test on ci server
rename ExperimentalMockitoJUnitRunner. java file to improve clarity and maintainability of the test code
updated GpsSettingsActivity and Session classes to use Utilities. GetBuildSerial instead of Build. SERIAL to ensure compatibility with newer Android versions
updated SwapGBuffers class implementation to improve performance and memory efficiency
added null checks for skeletonControl in AnimControl. java to prevent potential NullPointerExceptions when skeletonControl is null
added methods to set and retrieve smart replies in ShadowRankingTest and updated ShadowRanking to use reflector for accessors to
[ java ] only add segment file if they don't already exist.
updated the initialization path for ` carrot2ResourcesDir ` in ` CarrotClusteringEngine ` to ensure the correct resource directory is used for
added null check for testRect in WindowsTreeUI. java and created a new test class for bug8004298. java to ensure robust
updated ASM _ API _ VERSION from Opcodes. ASM7 to Opcodes. ASM9 to reflect the latest ASM features and improvements
mahout - 121 : improve error message when vector in map file be empty.
added client information to SurrogateAuthenticationEventListenerTests to track client interactions during test execution
added isUserView variable initialized to false in CardPresenter. java to reset user view state for better user experience
refactor Graphviz utility methods for better clarity and consistency to improve code readability and maintainability
refactor the creation of ` constructBatchHistogram ` and ` syncLogTimePerRequestHistogram ` in ` LogDispatcherThreadMetrics. java ` to
added a new module - info. java file for SQLite connector module to establish module dependencies for SQLite - related components
added a sleep delay of 500 milliseconds in StreamResetTest. java to improve test stability by avoiding unnecessary waits
removed conditional check for " api " in permissions manager initialization to simplify permission management logic for API types
updated DateParser and TestDateParser files to improve date parsing functionality and maintainability
added a new method ` getDepth ( Context context ) ` to the ` SpringLoadedState ` class to provide a default depth value for improved
replaced manual array copying with a constant MIN _ SIZE in BinaryDecoder. java to improve code readability and maintainability by avoiding magic numbers
[ hotfix ] fix typo in executiongraph
removed the notification from NotificationActivity and replaced SwipeLayout with a click listener in NotificationRenderer to streamline user experience by eliminating unnecessary notifications
updated exception handling in DefaultExceptionConverter and updated test assertions in ExceptionsTest and EndpointTest to improve error reporting clarity and ensure proper handling of null
fix npe in glowcontainer. getsnapshotinventory ( )
replaced MethodHandle method lookup with java. lang. reflect. Method to improve code readability and maintainability by using reflection
fix for http : / / code. google. com / p / mybatis / issues / detail? id = 579.
updated subject formatting to include both metrics and datasets in BaseEmailContentFormatter. java to improve readability of email results by including both metrics and datasets
added logic to manage and hide the layoutProvidedPanel in LayoutPanel. java to improve user experience by ensuring the layout is properly managed and
added null check for location in ServerCallable. java to prevent potential NullPointerExceptions when location is null
renamed BuilderFactory, Pipeline, and PipeliningTest classes to improve clarity and maintain consistency in naming conventions
added a check for missing key parameters in BasicChecker. java to ensure proper validation of key parameters when generating public keys
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 46689. ignore
updated task number handling in LlapBaseInputFormat to improve clarity and maintainability of task assignment logic
added a SpringBootTest property to the EventServiceTests SpringBootTest to allow bean definition overriding in the test configuration
added null check before closing indexReader to prevent potential NullPointerException when indexReader is not initialized
changed package and import statements for BTCMarketsStreamingService and BTCMarketsStreamingExchange to improve organization and clarity of the streaming service
added a new test method ` issue151 ` to the ` FencedCodeBlockParserTest ` class to ensure that the ` issue151
added a new file CompatibilityTest. java to test internal DTD compatibility to ensure proper handling of XML properties during testing
added new utility classes for handling push notifications and security to improve code maintainability and facilitate push notification functionality
hbase - 25836 table rebalancer should not try to recover from current replica if target be not available
bump version to 2.7. 0 for exoplayer library
log4j2 - 1349 fixed test failure on window
added handling for SocketTimeoutException in AjpAprProcessor. java to improve error handling and provide clearer error messaging
initialize ` friction `, ` restitution `, ` density `, ` isSensor `, and ` isSensor ` to zero
updated method signatures to use anomalyFunctionSpecMap instead of anomalyFunctionIdToAnomalyResult to enhance functionality by incorporating anomaly function specifications
added error handling for broadcast idle command execution in LauncherInstrumentation. java to improve reliability of broadcast idle operations
added unit tests for reading font and link tags with attributes in ResourcesTest. java to ensure correct string resource retrieval for font and link tags
move guistatscomponent. java from src _ work to src _ base
added permission handling for CALL _ PHONE in mmm Launcher. java and Utilities. java to enhance user experience by ensuring CALL _ P
updated return value in SimulationPanel, PlotDialog, BasicEventSimulationEngine, Startup, and L10n classes to correct return values and
refactor GeoPointDistanceQuery, GeoPointInBBoxQuery, GeoPointInPolygonQuery, and GeoEncodingUtils to improve code clarity and maintainability by
added a synchronized method ` isDockerAvailable ` to ` DockerClientFactory ` to ensure thread safety when accessing Docker resources
added a constant for VPX in CodecTypes. java to enable support for SVG graphics in the application
added coordinator address option to DistBuildFactory and updated its implementation in AbstractDistBuildExecutorArgs to allow users to specify a local coordinator address for
added a method to check if a path matches a specified pattern in FsUtils. java and modified timer scheduling in WrapTimer. java to improve
added a conditional check to ensure ` ent. getValue ( ) ` is only added when ` ent. getValue ( ) ` is greater than zero
[ web ] fix nullpointerexception in web
removed the @ Test annotation from TestPerfBenchMarkDriver. java to eliminate unnecessary test execution
added a test for setting the MaterializationTime in TestObjectStore to ensure that the MaterializationTime is correctly set during database operations
added handling for UnsatisfiedLinkError in VoskSTTService. java to improve error reporting when missing native dependencies are encountered
remove property JMSSampler. IS _ ONE _ WAY in JMSSamplerGui. java and update message formatting in JM
modified break weight logic in GlyphView. java to improve readability and maintainability of the code
refactor sync handling logic in RCFile. java to improve clarity and maintainability of synchronization checks
added an @ AwaitsFix annotation to AutoAddReplicasPlanActionTest. java to address unresolved issue SOLR - 13028 related to
replaced ` steps ` and ` processors ` entries with a loop to collect unwound steps and processors to improve code readability and maintainability by
removed the use of keysToDataFlavorArray and related methods in DataTransferer and ClipboardTransferable to streamline the code by elim
added " - infoport " argument to the TestThriftServerCmdLine to specify a random port for testing purposes
added a check for EOF in RegExpScanner. java to ensure proper handling of unexpected input
added checks for enabled metrics and timers in Debug. java to ensure that only meaningful metrics or timers are processed
added null check for multiUserChat's nickname in ChatRoomJabberImpl. java to ensure robustness by preventing potential NullPointerExceptions
show error message when filename be empty
refactor the creation of refresh tokens into a separate method ` createRefreshToken ` to improve code readability and maintainability by encapsulating refresh token creation
updated error message formatting in BuckConfig. java to improve clarity of error messages
[ hotfix ] [ runtime ] remove unused job clearing logic in yarnflinkapplicationmasterrunner
added a new method ` nativeGetHardwareBuffer ` to the ` ShadowNativeImageReaderSurfaceImage ` class to facilitate the retrieval of
updated BTCChinaExchange to set SSL URI for the polling market data service to ensure secure access to the BTCChina market data
pmd task : use absolute file path for output file
added OauthController and Oauth2PluginTest classes to implement OAuth2 functionality in the application
refactor SemgrexPattern to improve code readability to enhance maintainability and facilitate future updates
added new methods for ` flatMap ` and ` flatCollection ` in ` AbstractStreamEx ` and updated test cases in ` EntryStream ` and
updated error message format in RestCodec and added logging for exceptions in ExceptionToProducerResponseConverters to improve clarity of error messages and provide clearer error
updated the condition for excluding scala tests in RobolectricClassLoader to ensure compatibility with updated project structure
updated conditional check for sdp presence in MediaControl. java to ensure that only valid audio encodings are processed
replaced SequenceNextValueFunction with DatabaseFunction in CreateTableGenerator. java and added a test for default timestamp databases in CreateTableGeneratorTest.
added two test methods for checking Station GML 31 and WFS32 in NormalizedMultiValuesTest. java to ensure accuracy of feature
added a volatile boolean field ` wasInvoked ` to ` NetworkTestUtils ` and updated related test cases to enhance thread safety and improve test coverage
added a conditional check before expanding regex mapping in ColumnarDataSource and improved exception handling in RowProcessor to ensure regex mapping is only expanded when configured
updated the implementation of ` splitIntoThirtyParts ` and ` splitIntoThirtySecondsParts ` in ` CustomSeekProvider `
added XLCDCommunicator and XLCDController classes for handling G - code commands to enable support for XLCD communication in the
[ drools - 701 ] move kmodule. xsd from kie - api to kmodule - kie - api
added retry logic to check for non - empty triggers in EventQuery001, EventQuery002, EventQuery003, and EventQuery004 to
refactor thread state handling in WorkerProcessPoolTest to use a constant WAIT _ FOR _ TEST _ THREADS _ TIMEOUT to improve code readability and
refactor ` equals ` and ` hashCode ` methods in ` DelegatingMethod ` class and introduce a new test class ` DelegatingMethodTest `
updated energy values from 20000 to 10000 in EnergyCost. java to improve the efficiency of energy calculations
updated the ` command ` method to include ` throws ConfigurationException ` and removed unnecessary save and reload methods to improve error handling and ensure proper configuration
deleted SpringTransactionHooks. java to remove unused hooks to streamline the codebase
refactor AbstractClassAssert for improved readability to enhance maintainability and facilitate future updates
added a new file GetUninitializedStringValue. java that includes a test for uninitialized string values to facilitate testing of uninitialized string
added functionality to handle provided dependencies in AndroidLibraryDescription and GraphEnhancementQueryEnvironment to improve dependency resolution and ensure correct handling of dependencies
added a new feature flag ENABLE _ KEYBOARD _ TRANSITION _ SYNC to enable synchronization of keyboard open and close animations when transitioning
added a flag to track if a bugreport should be saved to ensure that the system anomaly message is only recorded when saved
added a new constant for " cinepack " format in FormatConfiguration. java and utilized it in LibMediaInfoParser. java to
added camera bobbing functionality to the player's hand movement animation to enhance player experience by allowing control over the movement of the player
replace data retrieval method from ` data. describe ( ) ` to ` digest. toString ( ) ` in ` GrpcCasBlobUploader
deleted HSQLDBServerFilesFilter. java and updated file listing logic in TestUtility. java to streamline file filtering logic and improve code
added a null check for restoreFromKey in WalletAppKit. java to prevent potential NullPointerExceptions when restoreFromKey is null
updated the latestVersion assignment to use the correct API data series version to ensure the latest version reflects the correct data series version
added a new method ` visitMethodInvocation ` to the ` HasTypes ` class to handle method invocations based on specified fully qualified class names to improve
replaced magic numbers with a constant for the number of values in AmbientCubemap. java to improve code readability and maintainability by using
add a confirmation dialog for resetting the current mode in MethodsFeature and ObjectsFeature to improve user experience by informing users when the current mode is
added handling for zero values in GenericUDFMask, GenericUDFMaskFirstN, GenericUDFMaskLastN, and GenericU
refactor BoundedOverheadBlockStoreTest and DerbyBlockStoreTest to use TemporaryFolder for file creation to improve test clarity and maintainability by
add itemstack. isItemStackDamageable ( ) and itemstack. getHasSubtypes ( ) to allow for more flexible item damage handling
add a new ` line _ width ` field to the ` RenderState ` class to allow customizable line width for rendering effects
simonstewart : set the default browser. startup. page to 0
added conditional logic to handle HTTP connection status checks in Http1xClientConnection. java to ensure proper handling of HTTP connection upgrades based on
updated task name from " compile " to " process - classes " to clarify the purpose of the task being processed
replaced ` ConnectionManager. shutdown ( ) ` with ` closeIdleConnections ( 1L, TimeUnit. MICROSECONDS ) ` to improve
added a check for the existence of the aggregate function suffix before creating a Metric instance to ensure metrics are only created when the aggregate function is present
added a method to set fullscreen parameters in TaskOverlayFactory and updated return value in TaskView to enhance functionality by allowing customizable fullscreen parameters
added a new Java class to calculate and display frequency counts to provide functionality for identifying and displaying frequency values in a text file
set ch1 to null in ClusteredAgentManagerImpl. java to ensure ch1 is initialized before use
updated MutisignOperationerGodicTest. java to improve test coverage and reliability
added error handling for ` readToStartFragment ( ) ` and ` readToEndFragment ( ) ` in ` StaxEventItemReader
replaced specific imports with a wildcard import and modified the return logic in ShadowTextView. java to simplify import statements and improve null handling in TestAttributeSet
updated import statements from ` nimbusds. jose. shaded. json ` to ` net. minidev. json ` to
updated OS family check from " Linux " to " AIX " to ensure compatibility with additional operating systems
cs - 15429 : router ip should use routerid instead of privateip
added a new method ` invokeWithoutBlockingWithResultSync ` to the ` Display ` class to facilitate non - blocking execution without blocking
deleted the PresenceMessageComboTests. java file to remove unused test cases
updated calculations in PortraitPagedViewHandler to use Math. round instead of int casting to improve precision of calculations and prevent potential rounding
updated path construction for KMeansDriver and FuzzyKMeansDriver in TestClusterDumper. java to ensure consistent path formatting across test cases
hbase - 2658 add row cache size align to key ( sergey )
camel - core - add type converter to the list of type converter.
added conditional task handling in SparkCrossProductCheck. java to enhance task processing capabilities in Hive
added and removed actions related to ACTION _ MANAGED _ PROFILE _ ADDED and ACTION _ MANAGED _ PROFILE _ REMOVED in
updated conditional logic in ` LoginInfoEndpoint ` and added tests for account chooser functionality in ` LoginInfoEndpointTests ` to ensure correct handling of
hbase - 2496 add a method to descriptive string for region state and server time to provide clearer information about the region's state
updated HuobiAccountInfo to include'msg'and'result'fields along with their respective getters to enhance clarity and functionality by
added reserved words " PERIOD " to MariaDBDatabase and a test for adding a period column in AddColumnGeneratorTest to ensure proper
[ beam - 8470 ] update defaultenvironmenttype documentation for portable worker
added information about dictionary loading mechanism in VersionChangeLogs. java to inform users about recent changes to the dictionary loading mechanism
updated NUM _ MILLIS _ IN _ DAY from private static final to public static final in IndexExpressionIT. java and TestUtil. java to
removed debug print statement from ImageResourceLoader. java to clean up the code and reduce unnecessary console output
[ java ] invoke aeron client invoker only if it owns aeron client.
updated validation logic in Attr. java and added a new NoWarnOnImplicitParams. java file with interfaces and methods to improve type safety and
refactor hideMenuItem method to showMenuItem for better readability to improve code clarity and maintainability by encapsulating visibility logic
added support for BTC _ deposit and BTC _ withdrawal types in BTCETransHistoryResult and BTCETransHistoryJSONTest
replaced List with Set for series and exceptions in RetryFilterFunctions. java to improve performance and maintainability of the code
added @ Deprecated annotation to PluginLoader. java to indicate that the class is outdated and should not be used in future development
updated conditional logic in LastQueryExecutor and added a new test for sequences timeseries in IoTDBLastIT to improve logic correctness and ensure
updated the newline character in the request string to ensure proper formatting of the request string
added a static block to set a logging level for HTTP wire errors to improve error handling and logging clarity
added functionality to set the safe area of the title bar to improve user experience by ensuring the title bar is accessible
reversed the iteration order of TimeSeriesChunkMetaDataList in OverflowSeriesImpl. java to ensure correct retrieval of series metadata from the list
added SQL command to the AlterTest class to ensure proper parsing and deparsing of SQL commands
changed the visibility of the copyState method from package - private to public to allow access to the method from other classes
fixed - rasyncservice. executecallable ( ) method return a completablefuture instead of a null value
added a new constant SUFFIX _ SPLIT _ FILE in Constants. java and updated file extension handling in FileLister. java and FileSystem
refactor multiple Orc - related classes for consistency and clarity to improve maintainability and readability of the codebase
added null check for nameArg in CompareFunctionsProcessor. java to ensure proper handling of null values during function processing
updated the ` reduceScopeForLimitedSpace ` method to accept an ` expectedSize ` parameter and adjusted related logging format to improve flexibility in
removed multiple ` toString ( IndexReader ir ) ` methods from ` SegmentTermVector `, ` TermFreqVector `, and ` QueryTerm
added a check for invalidated states in AbsSwipeUpHandler and unregistering task stack listener in TaskAnimationManager to ensure proper handling of invalid
refactor lock timestamp retrieval methods to use SharedPreferences instead of SharedPreferences to improve code maintainability and streamline preference management
refactor artist retrieval logic in MediaInfoParser. java to improve clarity and maintainability of artist retrieval logic
added a null check for the remoteMessage object before proceeding to prevent potential NullPointerExceptions when accessing remoteMessage
npe in splittext when there be no header line
added support for Windows key store in HttpsConnectorFactory to ensure compatibility with Windows key store types
increase default check timeout from 400ms to 1 _ 000ms in RestTemplateSenderTests and WebClientSenderTests to improve test reliability by allowing
added a condition to handle FILE _ NOT _ FOUND in FileSyncAdapter. java to improve error handling for remote folder operations
added animate animation functionality to the Slider class to enhance user experience by allowing customizable animation duration
updated assertions in LineSeparatorProcessorTest to ensure consistency in line separator assertions
changed maxWidth and maxHeight from 512 to 1024 in TexturePacker. java to accommodate larger texture sizes
added a test for negated Ternary handling in UnnecessaryParenthesesTest. java and modified the return condition in UnwrapParenthes
added null check for body before processing exchange in HazelcastQueueConsumer to avoid potential NullPointerExceptions when body is not provided
added TextFeedbackTest to the AllTests and TestRunner classes to facilitate testing of text feedback functionality in the application
replaced Math. round with Float. compare for score comparison to improve comparison accuracy for score values
updated DENSITY constants and error handling in AddAndScaleMultiImage. java and ResourceEditorApp. java to ensure proper resource management and
added a new method ` arrayClassElementOffset ( ) ` to ` HotSpotReplacementsUtil ` and updated its usage in ` ArrayCopySn
don't skip the stage total check if it's zero to improve performance by avoiding unnecessary processing
added support for remote SCM support in multiple classes to enable users to enable or disable remote management for different SCM systems
[ mielevicecommon ] add support for rinse _ hold state ( # 2595 )
replaced ` StatsLogCompat ` with ` SysUiStatsLog ` in ` StatsLogCompatManager ` and ` SysUiStatsLog ` to
rename log variable from log to LOG for better clarity to improve code readability and maintainability by using a more descriptive variable name
added tests for ProjectGenerationEvent's finished and started events in EventSerializationTest. java to ensure correct serialization representation of project generation events
apps - 283 show preview point only if there be any
refactor JavaCompiler to improve code readability to enhance maintainability and facilitate future updates
hbase - 25836 addendum : increase test execution time for random read in integrationtesttimestboundedrequestreplicas
renamed multiple Java files related to heap management to improve clarity and maintainability of the codebase
added " -- gc - sections " and " nocopyreloc " flags to ldflags in NdkCxxPlatform. java to enable additional
refactor URI handling in SpringCloudCircuitBreakerFilterFactory to utilize ServerWebExchangeUtils for dynamic fallback URI generation to improve flexibility and maintainability of URI
danielwagnerhall : update copyright year to 2020
added null checks for URI and localName in ReadOnlySharedStringsTable. java to improve robustness by preventing potential NullPointerExceptions
added a method to retrieve account net by HTTP requests in HttpMethed. java and corresponding tests in HttpTestAccount001. java to
added a check to return ` clipString ` if ` availTextWidth ` is non - negative in ` SwingUtilities2. java ` and modified
refactor FlatteningIterator to use push instead of creating a new FlatteningIterator instance to improve clarity and maintainability of the code
replaced color HTML formatting with regex patterns in NotificationUtils. java to improve readability and maintainability of the code
chore : integrate new gapic - generator - java and rules _ gapic ( # 359 )
added a test method to reload and delete any existing question in InstructorFeedbackEditQuestionsUiTest. java to ensure that question deletion functionality works
modified return values in HSSFSheet. java and added assertions in BaseTestSheet. java to ensure correct behavior of row numbers and improve test
added permission checks for launcher activities in InstallShortcutReceiver and Launcher classes to enhance security by preventing malicious intents from being executed
[ java ] send event when a cluster session be open.
added hashCode and equality checks to AbstractParquetMapInspector class to ensure proper hash code generation and prevent potential NullPointerExceptions
added handling for remotely closed buffer in HTTP3StreamConnection to ensure proper buffer is released when remotely closed
added AutoCloseable interface to SplitReader to enhance resource management and prevent potential resource leaks
removed the deepCopy ( ) method from GsonBuilder to streamline the code by eliminating unnecessary object creation
[ sparc ] fix npe in llsourcescanner
refactor fileOpenFuture initialization and improve file handling in RestClientRequestImpl. java to enhance code readability and maintainability by simplifying asynchronous file
updated the call to dispatchStatusString ( controllerStatus ) in GrblController. java to ensure proper handling of controller status updates
replaced ` MockFactory. class. getClassLoader ( ) ` with ` SearchingClassLoader. combineLoadersOf ( ) ` and added a new class
add a new test class ` TestRefreshFlagBug ` to test the behavior of ` rootNode ` to ensure that the ` rootNode ` contains a
updated condition checks in ConstantPropagateProcFactory to include LEFT _ SEMI _ JOIN to ensure proper handling of LEFT _ SEMI joins in
updated response and request completion logic in HttpReceiver and HttpSender classes to improve response handling and ensure proper termination of HTTP responses
use arrayoopdesclengthoffset ( ) instead of arraylengthoffset ( )
http : / / issues. apache. org / activemq / browse / amq - 2576 - set default policy for broker service
updated multiple Java classes for consistency and clarity to improve maintainability and readability of the codebase
added checks to ensure app context is not running before stopping to prevent application from terminating prematurely when the application is not running
changed the return type of drawItem method from void to GlyphLayout to ensure the method returns the correct glyph layout instead of void
updated metrics handling in SpringmvcClient and added error handling in CodeFirstSpringmvc to improve metric management and provide better error reporting
removed the constant SAFE _ ACCOUNT _ AGE _ DATE and simplified the return statement in AccountAgeWitnessService. java to streamline
refactor StructureHeader and StructureReader classes for clarity and consistency to improve code readability and maintainability
added support for ResourceUrlProviderExposingInterceptor in CasWebflowContextConfiguration and corresponding test cases to enhance the handling of resource URL providers
added a new class DexReturnInliner and modified the transform method in DexBody. java to improve the handling of return statements in the body
updated EnrichedRuleDTO to include configuration properties instead of a single configuration object to enhance flexibility in managing configuration properties within the rule
updated path handling in PathResource and added new test cases in AliasCheckerSymlinkTest to enhance functionality and improve test coverage for symlinks
[ hotfix ] [ table - planner - blink ] remove unused sql dialect configuration
replaced ` rDotJavaPackages ` with ` rDotJavaPackagesSupplier ` and ` hasRDotJavaPackages ` across multiple files to improve
add a new test class ` ASTPackageDeclarationTest ` to verify the functionality of ` PACKAGE _ INFO _ ANNOTATED ` in the `
added configuration for setting the minimum cross compaction unseq file level in IoTDBDescriptor to enhance flexibility by allowing configuration of the minimum cross compaction
[ hotfix ] [ runtime ] move active resource manager to active package
renamed the test method from ` testCheckColumn _ WrongOrder ` to ` DisabledTestCheckColumn _ WrongOrder ` to clarify that the
added error handling for URISyntaxException in ZipResource. java and created a test class ZipResourceTest. java to improve robustness of URI parsing
updated the ` mProgressListener ` field and modified thumbnail generation logic in ` ExpandableUploadListAdapter. java ` to ensure proper thumbnail updates and improve
refactor configuration handling in RobolectricTestRunner to improve clarity and maintainability to ensure proper merging of parent class and method configurations during tests
replaced direct usage of ` GameData. blockRegistry ` and ` GameData. itemRegistry ` with ` Iterables. filter ` to improve efficiency
refactor methods in AbstractDataChangedListener and WebsocketDataChangedListener to use a single method instead of abstract methods to improve code readability and maintainability by
updated JSONPojoConvertor to conditionally convert between Enum types and improved test assertions to enhance functionality and ensure correctness of enum value handling
added a deprecation warning for the ` -- view ` option in the project view parameters to inform users that the option is outdated and will be removed
replaced String with byte [ ] for originalPayload in GWTRequestWrapper. java to improve memory handling and avoid potential null pointer exceptions
updated GyroControl to implement OrientationEventListener and introduced OrientationCorrectionListener to enable or disable orientation adjustments based on device orientation
change the BIOME _ LIST _ SIZE from 256 to biomeGenBase. getBiomeGenArray ( ). length to ensure
removed println statements from eval function calls in GetInterfaceTest. java to simplify code execution by eliminating unnecessary console output
updated the way the environment is retrieved in FileCompilerConfig. java to ensure consistent initialization of the compiler environment
added a new interface ByteToLongCollector in the package com. speedment. common. function. collector to provide a structured way to collect Byte
added a boolean option to set the preload property in MMapDirectoryFactory to allow users to turn off preload functionality when specified
added custom metrics for various enabled components in BukkitPlatform to provide insights into component configurations for better analytics
refactor QuickConnectREST to improve code structure to enhance maintainability and readability of the code
added aspect ratio and default card image to CardPresenter. java to enhance visual representation of card images in the application
added error handling for login redirection in AuthenticationCountSelector. java and updated authentication logic in LoginRedirect. java to improve robustness by ensuring
added checks for empty values in VectorHashKeyWrapper. java to ensure that cloning does not result in an ArrayIndexOutOfBoundsException
added test methods for SystemNanoTimeJit in TimeChangeTest. java to improve test coverage and ensure accurate timing behavior during CRIU
added line trimming logic in MultiPartFilter and print parameter information in MultipartFilterTest to ensure proper handling of null lines and provide debugging information
fix experience drop event not fire for xpmorb attack
updated error handling in OpenUVBridgeHandler and OpenUVReportHandler to provide clearer error reporting for quota errors to improve user experience by providing more
[ beam - 1334 ] remove unsupportedoperatorsvisitor from dsls sql planner
added support for generating reverse dependencies in GraphEnhancementQueryEnvironment to enhance dependency resolution capabilities for query execution
refactor Character class to improve code readability to enhance maintainability and facilitate future updates
replace selectionOption. setSelectedIndex ( 1 ) with a boolean flag to handle the entire rocket to ensure that only one rocket is selected
updated assertions in UpdateableResultTest to remove unnecessary Arrays. toString calls to improve code readability and maintainability
added time boundary information handling for hybrid tables in BaseBrokerRequestHandler. java to improve clarity and functionality of time boundary queries in the application
added a boolean flag ` addToPoller ` to control the addition of socket references in ` AjpAprProcessor ` and ` Http11Apr
updated album title extraction logic and improved URL handling in EightmusesRipper. java to enhance clarity and maintainability of album title
replaced mDevice. wait calls with TestHelpers. wait calls across multiple test files to improve test reliability by using TestHelpers instead of m
added checks for phone profile in QuickstepLauncher. java to ensure proper layout behavior for non - landscape devices
updated assertions to use ` QueryImpl. unwrap ( QueryImpl. class ) ` instead of ` getValue ( query, PROPERTY ) ` to improve
refactor ` readMatchingLines ` method to use ` AccessController. doPrivileged ` instead of ` Files. readAllLines ` to improve code readability and
added dynamic check for the " getResultStream " method in JpaQueryExecution. java to ensure proper invocation of the " getResultStream " method for
added a null check for entity types in PhysicsProcess. java to prevent potential NullPointerExceptions when entity types are null
added test to ensure entry processor clears the map when value attributes are indexed
added request listener methods to JitsiMeetTools and created a new OperationSetJitsiMeetToolsSipImpl class to
updated color values in Utils and updated HTML message in UtilsTest to improve visual consistency and ensure correct background color formatting
added imports for StringUtil and EasyBind in DefaultMenu and EditorMenus to disable menu items based on text property presence
updated the scratch path format in Aapt2Link. java to improve clarity and maintainability of the generated scratch path
replaced instances of ` Capture < Supplier < Tool > > ` with ` Capture. newInstance ( ) ` in ` ExternalJavaccTest.
make sure selection be not update when click on the first point
added error handling for MarkedYAMLException and refactored exception handling in YsldValidator to improve error management and provide clearer error
added ` isCanceled ( ) ` method implementations across multiple classes to ensure consistent behavior of call cancellation handling
refactor isAnnotationPresent methods across multiple classes to use a default implementation to improve code clarity and maintainability by centralizing annotation presence checks
added a default implementation of the ` removeAllWidgets ` method in ` UILayout. java ` to ensure that the method is not overridden and provide
[ hotfix ] [ yarn ] [ test ] add test appender for jobclient
opensslcipher. getoutputsizeforfinal ( int inputlen ) : don't cache output size for update.
added conditional logic to handle VLC playback based on media sources to ensure compatibility with Fire TV Stick and improve video quality
[ beam - 8470 ] use mockdatasourcereader instead of readsourcetransfertransformbatch
replaced Date import with a wildcard import and modified listener management logic to improve code clarity and ensure proper removal of listeners based on preference
changed the data type of ` fullwidths ` from ` boolean [ ] ` to ` byte [ ] ` and initialized ` isWide
added support for BaseItemDragListener in FolderIcon to enhance drag - and - drop functionality in the application
added ` createEmptyArtifact ` method to ` RepositoryConnector `, ` AbstractRepositoryConnector `, ` FileSystemConnector `, and ` Signavio
updated configuration keys for consistency and clarity in RabbitMQPublisherImpl. java to improve code readability and maintainability
removed the condition for checking the year after Aug 1 in VideoViewerActivity. java to simplify the logic by eliminating unnecessary checks
added a line to compact the path in SftpOperations. java to ensure consistent path handling for SFTP operations
( chore ) camel - weather : fix flaky test
renamed variable ` groupSortStr ` to ` sortWithinGroupStr ` for clarity to improve code readability by using a more descriptive variable name
added support for large fall grass models in BlockDoublePlant. java and BlockType. java to enhance the system's ability to
replaced setFocusable ( false ) with setRequestFocusEnabled ( false ) in TranscodingTab. java to ensure that the tree focus is properly enabled
added exception handling in VirtualMachineManagerImpl. java to ensure that exceptions are properly propagated
updated license acceptance logic in DB2TestSystem and modified conditions in TableIsEmptyGenerator to ensure compatibility with DB2TestSystem and improve
changed the visibility of ` units ` from final to non - final and added a setter method for it in ` DoubleModel ` and ` General
added a static final CurrencyPair BTC _ ZMW to the CurrencyPair class to enable support for the ZMW currency in the
added logic to set the number of samples in TestPBRLighting. java to ensure that the number of samples does not exceed the current
updated tasklet assertions in StepWithSimpleTaskJobParserTests. java to ensure consistency in test cases
changed variable declarations from ` UsernamePasswordCredential ` to ` final ` in ` CentralAuthenticationServiceImplTests. java ` to enforce immutability of
corrected spacing in ggbabs function calls to improve code readability and maintainability
added multiple ` addServiceOutput ( ) ` calls to the ` addServiceOutput ( ) ` method in ` DDLSemanticAnalyzer.
jbrules - 2623 : add ability to covert bigdecimal to constraint parser
added a new import statement for " org. eclipse. jdt. " to hide jdt used by jetty in the project
changed the return value from super. useAuthCache ( ) to return false in NegotiateAuthentication. java to ensure proper handling of
updated namespace assignment to use a utility method for capitalizeing segments to improve readability and maintainability of the code
added a new class DirectConsumerNotAvailableException and updated exception handling in DirectProducer and SendToNonExistingDirectEndpointTest to ensure backwards compatibility
added null check for zooKeeper before accessing its state to prevent potential NullPointerExceptions when zooKeeper is not initialized
updated progressBar step message to remove unnecessary whitespace to improve code readability and maintainability
replaced direct calls to ` mVibrator. vibrate ` with a call to ` runOnUiHelperThread ` to improve code readability and
added a method to update the last remote stream ID to ensure accurate tracking of the last remote stream ID
added text anti - aliasing to Graphics2D in EditorHeader and EditorToolbar classes to enhance text rendering by allowing text anti - aliasing
[ java ] : fix flow control over position calculation.
refactor : remove static import of enums in ctannotationimpl
refactor ExoPlayer class to improve code readability to enhance maintainability and facilitate future updates
refactor getRGBPixelImpl method to use a Rectangle parameter to improve flexibility in retrieving pixel values
added a new method ` newPrintStream ` to handle different output stream encodings to improve flexibility in handling different output stream encodings
increased vibration duration from 1ms to 25ms in TouchableMovementMethod. java to improve user experience by allowing more time for vibration
updated import statements in AppEngineSqlCloudSession. java and FlybushDataClearer. java to improve code clarity and maintainability by
updated constructors in WebSocketClient to accept an Executor parameter to enhance flexibility by allowing custom executor instances
simonstewart : make i18n test more robust
replaced handleIllegalArgumentException and handleIncompatibleClassChangeError with handleLoadConstantException in BytecodeParser and SharedGraphBuilderPhase classes to improve error handling
added a call to restore the authentication system state in XmlWorkflowServiceIT. java to ensure that the authentication system state is preserved during tests
added a utility class ` LowercaseComparator ` for comparing strings in CoNLLUFeatures to improve code readability and maintainability by using
refactor JavadocTool to use a List instead of an Iterable for handling multiple JavaFileObject files to improve code readability and maintainability by simplifying file
danielwagnerhall : fixing test failure on firefox
added a check for the length of keys in HighestKvno. java to ensure that the length of keys does not exceed 9 to
added error handling for retrieving attributes in HDF5BatchReader to improve robustness by logging warnings when only Huge objects BTrees with 1 record
[ beam - 8470 ] use writeresult. in ( pipeline ) instead of pdone. in ( pipeline )
updated XML root name from " copySnippetRequestEntity " to " createTemplateRequestEntity " and added ApiImplicitParams annotations in ProcessGroupResource
added a new file ` TestMultiANewArray. java ` that implements a method that writes a class file to facilitate testing of
cloudstack - 7092 : add support for use secondary storage on management server
refactor head ID handling in SyncBlockChainMsgHandler. java to improve clarity and maintainability of block ID fetching logic
added a call to set the theme of the preview to ensure the preview displays the correct theme based on user preferences
added null check and closing of the reader in VectorizedParquetRecordReader. java to ensure proper resource management and prevent memory leaks
added idle timeout configuration and a test for HTTP idle time in ConnectorTimeoutTest. java to ensure proper handling of idle connections and improve test coverage
added constants for dictionary properties in Constants. java and utilized them in Dictionaries. java to improve configurability and maintainability by using
replaced calls to ` readIdentifier ( ) ` with ` readTagName ( ) ` and added a new method ` readTagName ( ) ` to
updated parameter values in JpaPagingItemReaderIntegrationTests and JobLaunchingGatewayParserTests to ensure correct type handling and improve test clarity
changed log level from warn to debug for child node detection to reduce log verbosity and reduce noise in logs
refactor color extraction logic to use a dedicated method for retrieving hotseat palette to improve code readability and maintainability by centralizing color extraction logic
added methods to set default data table entry and cell transformer in TypeRegistry to enhance data handling capabilities by integrating custom data table entry and cell
removed assertion for newAvailableShared in AtomicRemainder. java to ensure proper initialization of shared resources
chore ( regen ) : update license year for each voice request / response
removed the ` projectGenerated ` field and its getter method from ` ProjectGenerator ` and ` WorkspaceAndProjectGenerator ` to streamline the project
removed the check for ` info. contains ( USER _ PROPERTY ) ` from the condition to simplify the logic by eliminating unnecessary checks
added new contact form routes and created a new Contact class with getter and setter methods to enhance functionality for submitting contact information in the application
updated permission handling in SimpleUser. java to improve clarity and maintainability of permission management
updated the release version from 20 to 21 in IconCache. java to reflect the latest release and ensure compatibility
( chore ) camel - jbang : fix compilation error
updated method names from ` findWhereNameLikeAndActive ` to ` findWhereNameOrAliasLikeAndActive ` across multiple classes to enhance
replaced the use of ` IOUtils. closeSafely ( true, perDocConsumers ) ` with ` IOUtils. closeSafely (
refactor AbstractDataChangedListener, HttpLongPollingDataChangedListener, and RuleServiceImpl classes to improve code organization and maintainability
added a click listener for the overflow button in the menu to enhance user experience by allowing users to click on the overflow button
updated assertion messages for null and non - null references in multiple classes to improve clarity and consistency in error reporting
ggb - 196 fix problem with help button not update line height.
test : move protobufferutilstest to core / util
fix issue with double click on side pane
add crossref support to auxiliary generator ( # 2691 )
use metadatamap instead of map in geotools / geotools / resourcepool / geotools / geotools / geot
changed the type of ` extractTypes ` and ` dataTables ` from ` List < DataTableDescriptor > ` to ` List < DataTableDescriptor >
add a method to notify the metacontact's avatar update event of a meta contact.
updated the import statements for Command from org. apache. sshd. server. Command to org. apache. sshd. server. command
added a test method to clean up audit log tables by position in AuditLogTest. java to ensure proper cleanup of audit log data based on
added @ SuppressWarnings annotation to the inject method in ComponentContext. java to suppress unchecked cast warnings during injection
added regex patterns for handling comment lines in ACLFileParser to improve dependency on filtering of comment lines
updated MapRDBFormatMatcher and MapRDBSubScan to include FileSystemPlugin as a parameter to enhance functionality by integrating additional file handling
added ancestorDimensionValues to the StarTreeImpl and StarTreeNodeImpl classes to enhance dimension handling by incorporating ancestor dimensions
added user unlock handling in TouchInteractionService, BaseQuickstepLauncher, and RecentsAnimationDeviceState classes to ensure views are closed only when
updated condition from ` widthStr ` to ` positionStr ` in ` Photo. java ` to ensure proper handling of null values during processing
refactor PKIXValidator logic to improve clarity and structure to enhance maintainability and readability of the validation process
[ flink - 2601 ] [ test ] add archunit test for the test code
updated package structure for Alibaba and Apache dubbo classes to improve organization and clarity of the codebase
vpc : listnetworks api - include domainid parameter in listnetworks api call
added assertion to validate shape type in RuntimeTypeAdapterFactoryFunctionalTest to ensure correct handling of shape types in JSON processing
added methods to store undo information for properties in the App class to improve management of undo information during property modifications
replaced direct call to ` System. getProperty ( ` ` sun. java2d. xrgradcache'' ) ` with a privileged
updated the assertion in StreamCloseTest to use awaitility instead of assertEquals to improve test reliability by ensuring the expected number of streams is
removed the ` doAfterFlush ( ) ` method from multiple classes and initialized ` perFields ` to null in ` TermVectorsConsumer ` to
added support for handling non - deprecated configurations in ConfigurationMetadataGenerator and updated related imports in AbstractJpaProperties to improve compatibility with ENUMS and
replaced instances of ` capacity ` and ` mask ` with ` values. length ` in ` BiInt2ObjectMap ` and ` Int2
increased the number of files processed from 25 to 15 in HiveConf. java and refactored file renaming logic in Hive. java to improve
added logging for error handling in ` ParallelNioSender ` to improve traceability and debugging capabilities
added a null check for the context in SchemeAndroidIDE. java to prevent potential NullPointerExceptions when the context is not initialized
[ gr - 20536 ] fix native - image - generator - server to use the current context classloader.
refactor ` modifyGrantedAuthorities ` method in ` SwitchUserAuthorityChanger ` and ` SwitchUserProcessingFilter ` to improve code clarity and
refactor ` JaxrsIntegrationTest ` to ` JaxrsIntegrationTestTestBase ` and introduce ` JaxrsSpringIntegrationTest `
added support for setting query timeout in HikariPool and PoolUtilities classes to improve connection handling and support for JDBC 4 compliance
added DataProviders for general and supplementary character test cases in XslSubstringTest. java to enhance test coverage and ensure correct substring
replaced ` eventWriter. close ( ) ` with ` delegateEventWriter. close ( ) ` in ` StaxEventItemWriter ` and
added support for sequences in MariaDBDatabase and CreateSequenceGenerator to enhance database compatibility and improve sequence handling
updated string formatting in MappedResizeableBuffer, UnsafeBuffer, CompilerUtil, and Int2ObjectCacheTest files to improve code readability and maintain
added ` ServerMetrics ( new MetricsRegistry ( ) ) ` to multiple test classes to enable better tracking of server metrics across test cases
added support for enabling MFL extensions in the configuration to enhance functionality by allowing MFL extensions to be enabled
changed the type of ` iterator ` from ` ObjectHashSetIterator < T > ` to ` ObjectHashSetIterator ` and updated related methods accordingly to
added exception handling and adjusted character remaining length calculations in Compose. java and TweetFragment. java to improve error handling and ensure correct character
added a new constant DATAPOINT _ TTL and refactored related code to use it to improve code clarity and maintainability by
updated the ` checkForAndKillXcodeIfRunning ` method to accept a ` enablePrompt ` parameter to enhance flexibility in prompting when Xcode is
added a method to retrieve the terraing at a cell coordinate in TerrainGrid to enhance functionality for accessing terraing data based on
added default value handling in ` Pretty. java ` and created a new file ` T6665791. java ` with Java annotations to
added error handling for loading quest keys in ResourceLoader. java to improve robustness by logging errors when quest keys are not found
modified the return statement to check if the transport is not push capable to ensure that the operation only proceeds when the transport is not push capable
refactor PointValue class to improve code readability to enhance maintainability and facilitate future updates
removed the sign method call from blockCapsule in BlockUtil. java to streamline the code by eliminating unnecessary dependencies
updated root retrieval logic in FileSystemView. java and added security checks in Win32ShellFolder2. java to improve robustness of root retrieval
updated row height calculation and modified last row handling in ColumnText and PdfPRow classes to improve performance and ensure proper handling of table rows
replaced the ` undoTrash ` boolean with ` undoArchive ` and introduced a ` SparseArray < Note > ` for storing undo notes to
added methods to persist and adjust feedback question IDs in UploadBackupData. java to improve data handling and ensure unique feedback questions
added null check for data in getTransferData method to ensure data is not null before proceeding
remove pstmtdelegate interface ( no need to unwrap prepared statement )
replaced Padding class with Rect for widget padding retrieval in AppWidgetResizeFrame. java and Launcher. java to improve widget layout handling and ensure
refactor NashornBeansLinker to use a static block for ConsString arguments to improve code readability and maintainability by reducing redundancy
updated ClassGraph and ScanResult classes to improve code clarity and maintainability
renamed the variable ` latch ` to ` goAwayLatch ` for clarity to improve code readability by using a more descriptive variable name
replaced calls to ` getMessage ( ) ` with ` hasMessageThat ( ) ` in ` IterableSubjectTest. java ` to improve test clarity
initialize ` Workbook. currentBook ` to null in multiple files to ensure consistent access to the current book across the application
added support method for MethodInvocation in ContactSecurityVoter to enhance flexibility in handling method invocations
removed unused imports in DataLoader. java to improve code clarity and maintainability
updated the postUpdateLog method to accept an integer for affected rows to enable dynamic updates based on the number of affected rows
mow - 390 fix for margin - left and margin - top.
set default value of foregroundFPS and backgroundFPS to 60 in JglfwApplicationConfiguration. java to ensure FPS values are consistently
added assertions to track and release object releases in HdfsTransactionLog and TransactionLog to ensure proper resource management and prevent potential memory leaks
replaced DefaultWebSocketFrame with ChannelFutureListener for closing WebSocket connections to ensure proper handling of WebSocket closure events
updated test class names and added OnStateMachineError handling in StateMachineErrorTests. java and DocsConfigurationSampleTests. java to improve clarity and
replaced the finish ( ) method with a new method ` setListBackground ( ) ` to improve code readability and maintainability by centralizing the list
replaced Apache StringUtils with OpenHAB StringUtils in RMEThingHandler. java to improve compatibility with the OpenHAB library
added an ` accumulate ` method to the ` JavaUserDefinedAggFunctions ` class to facilitate the addition of ` WeightedAvgAccum
hbase - 2658 put and replicationsink don't work properly ( addendum )
replaced VALID _ CACHE _ SET set with REGEXP _ CACHE to improve performance by reusing regex instances
added a reset method to the GameThread class to enable resetting of the game thread state
added a new method ` login ` to the ` DigestAuthenticator ` class that checks if the credentials are equal to the login service name to ensure
refactor parameter handling in SavedRequestAwareWrapper to improve clarity and maintainability to enhance code readability and ensure proper handling of saved request parameters
updated InfoStatus messages to include the current configuration context to provide clearer context about the configuration being set
HAService should wake up waitPoint after hasNotified flag is set to ensure that waitPoint is only decremented once to avoid unnecessary synchronization
added a check for Android SDK compatibility in PhotoViewerActivity and UserAutoCompleteHelper to ensure compatibility with devices running Android O and above
updated schemaInfoLevel from minimum ( ) to basic ( ) to ensure compatibility with the latest schema information
replace zipOut with bufferedOutputStream in SaveTask. java to ensure proper resource management and prevent memory leaks
updated TestPayloads to use UTF - 8 encoding for string operations to improve compatibility with different character encodings
fix mc - 103516 not work properly.
added " psiprobe. Tomcat10ContainerAdapter " and " psiprobe. Tomcat101ContainerAdapter " to the list of
[ drools - 701 ] fix bug in protobufinputmarshaller when use accumulate
refactor case statements in NowSearchTerm and SearchTermBuilder for better clarity to improve readability and maintainability of the code
pdfbox - 4071 : make class public so that it can be use in other project
refactor RemoteEndpointServiceAccessStrategy to use Spring Expression Language ValueResolver for HTTP method resolution to improve code readability and leverage Spring's expression language
added a new method ` newResponseBuilder ( SolrQueryRequest req, SolrQueryResponse rsp, List < SearchComponent > components ) ` to
added notification to AsyncBackgroundTaskManagerTest to ensure proper notification behavior during background task execution
added a method to recompute preview drawing parameters in FolderIcon and PreviewItemManager to ensure that preview drawing parameters are updated only when a drawable
refactor tokenizer and filter factories in LukeRequestHandler to use CharFilterFactory instead of TokenizerChain to improve code clarity and maintainability by using Char
removed null checks for'plot ','generator ', and'hotspot'parameters in AbstractCategoryItemRenderer. java to streamline
updated the ` createSubContext ` method to accept an optional verbosity parameter to enhance flexibility in logging output based on verbosity settings
added schema determination based on database type to ensure compatibility with different database types
log4j2 - 1349 log4j2 - 1349 log4j2 - 1349 log4j2 - 1349
added a new file TestShrinkToOneRegion. java with a main method to facilitate garbage collection of objects during testing
replaced string splitting with Splitter for custom packages to improve code readability and maintainability
updated string conversion methods in AnalyzingInfixSuggester and added a test for binary context in AnalyzingInfixSuggesterTest to improve
added handling for local attachments in PushsaferMessageBuilder to ensure correct content type is used for attachments
added showLabelStats command annotations to ModelExplorer, SequenceModelExplorer, and StripProvenance classes to enable displaying label histograms in
pdfbox - 4892 : remove unnecessary null check, a suggest by valerybokov
added ` getVarByte ( ) ` and ` getVarChar ( ) ` to multiple field test classes to ensure proper formatting of field values in tests
updated the evaluate method to accept a nullable Double parameter and adjusted logging behavior to improve handling of null values and enhance logging accuracy
refactor injectionEnabled and useIncludedLibrary retrieval to use ConfigParser to improve code readability and maintainability by using valueAsOrElse method
changed the visibility of Test1 and Test2 classes from package - private to public to allow access to these classes from other packages
updated permission handling for plot entries in PlayerEventListener. java to enhance security by restricting access to plot entries
added session parameter to the getAdditional method in ConditionAndOr and updated related logic in ConditionInConstantSet to enhance session handling and ensure correct
replaced instances of ` LongProducer ` with ` NumericDocValuesField ` in ` BaseNormsFormatTestCase ` to ensure compatibility with updated Lucene library
fix box2dcharactercontrollertest. testresetfriction ( )
added tests for handling global and thread buffersize in TestBadOptionValues. java and implemented memory size validation in TestMemoryOptions. java to
removed unnecessary checks for " must be power of 2 " in ObjectAlignment and Options classes to streamline the code by eliminating unnecessary complexity
added a method to get the target package in AndroidInstrumentationTest and updated related classes accordingly to enhance functionality by allowing users to specify the target package
refactor DocHelper class to improve code readability to enhance maintainability and facilitate future updates
updated the acceptableThrowawayItems initialization to use an ArrayList instead of an ArrayList to improve flexibility in handling multiple items in the setting
replaced multiple calls to ` mh1. invokeExact ( x ) ` with direct type casting in ` Test6987555. java `
added a priority to prevent starving when a lot of fetcher threads are used to prevent starving when a lot of fetcher threads are used
refactor Inflection class to improve code structure to enhance maintainability and readability of the code
added getter and setter methods for locale in EvaluationContext to enable dynamic locale configuration in the EvaluationContext
removed the import of Plugin from SummaryPrinter. java to streamline the code by eliminating unnecessary dependencies
added a break statement in DrawerActivity. java to improve control flow during navigation
replaced ` where ` with a wildcard import and updated debug log message to use ` query. getQueryObject ( ) ` instead of ` where `
added support for the user logger factory in XWorkConstants and LoggerFactory to enhance logging capabilities by allowing customizable logger names
updated test methods in AdminAddPeerWithP2PDisabledAcceptanceTest to reflect functionality related to P2P disabled status
renamed LivenessStateHealthIndicator and ReadinessStateHealthIndicator to " livenessStateHealthIndicator " and " readinessStateHealthIndicator "
added concurrent map implementation for PStore instances in LocalPStoreProvider. java to improve efficiency by managing concurrent PStore instances concurrently
changed the visibility of the deleteFiles method from public to private to restrict access to the method for better encapsulation
renamed ` Provider < T > ` to ` ServiceProvider < T > ` and updated related methods accordingly to improve clarity and consistency in naming conventions
make javainteropreflect more robust by catching nosuchfieldexception
added checks for toolchain creation status in multiple classes to ensure that only valid Android SDKs are processed when toolchain names are present
add a flag to track if a context has already been added to the engine to ensure thread safety when adding and removing contexts
updated assertions from ` indexOf ` to ` contains ` for better clarity to improve readability and maintainability of the error message validation logic
updated linker flags from ImmutableList < String > to ImmutableList < String > in PrebuiltCxxLibraryDescription and PrebuiltCxxLibraryBuilder to
replaced the ` onConfigurationChangedInternal ` method with a new ` updateRecentsRotation ` method in ` AbsSwipeUpHandler. java `
updated generic type parameters for listener instances in multiple classes to enhance type safety and suppress serialization warnings
updated the method to retrieve the hash as a string instead of a new object to ensure the correct hash is used for the new block
defaultmessagestore : use getstorepathcommitlog ( ) instead of getstorepathcommitlog ( )
removed the try - with - resources statement for JvmGcMetrics to streamline the code for better readability and maintainability
updated message count retrieval logic in CompactionLog. java to ensure accurate reporting of message status in the CompactionLog
added @ Deprecated annotations to multiple classes to indicate that these classes are outdated and should no longer be used
added a method to check if the system UI object is present and execute a shell command to enhance functionality by ensuring the system UI object is
changed access modifiers from static to final for principals, sessionIds, principals, and sessionIds to ensure immutability of these fields
added checks in InMemoryCookieStore and NullUriCookieTest to ensure proper behavior when removeAll is called on an empty store
added tostring ( ) method to bonsaivalue and log message in bonsaiworldstatearchive
change the return type of the getText method from String to CharSequence in multiple repository classes to ensure that the method correctly handles both String and CharSequence types
[ java ] mark a test a unstable due to marionette regression
added a finally block to handle IOException in SocketConnector. java to ensure proper resource management and avoid potential resource leaks
rename ` CMD _ ESCAPER ` to ` CREATE _ PROCESS _ ESCAPER ` across multiple files to clarify the purpose of
added synchronization to the heartbeatExecutorService in DbTxnManager. java to ensure thread safety when shutting down the heartbeat executor
refactor ` transformBuildResultIfNotPresent ` to ` transformBuildResultAsyncIfNotPresent ` and introduce a new method ` wrapWithTracingAndCan
added a method ` updateFirstLineShowing ( ) ` to the ` TextArea ` class to ensure that text is displayed correctly for drag - and
added configuration paths for temporary and staging directories in TestInformationSchemaWithPrivilege. java to ensure consistent directory structure for different Hadoop configurations
refactor graphics configuration retrieval logic to improve clarity and maintainability of the code
tika 3.0. 2 : add support for oom in legacy mode
refactor the doProcess method to streamline exchange processing logic to improve code readability and maintainability by reducing duplication
refactor PrintTagList. java to handle command - line arguments and improve error handling to enhance user experience by providing specific parser and model file configurations
replaced ` getFullyQualifiedName ( ) ` with ` toString ( ) ` in ` InsertDeParser. java ` and added a new test for
updated exception handling logic in JournalCorruptionEofIndexRecoveryTest. java to improve clarity and maintainability of exception handling logic
[ java ] make startfromtruncatedrecordinglogtest more robust.
updated arc calculation in LineBorder. java and added a new test in Test4252164. java to improve accuracy of rounded rectangle rendering
added an empty check for galleryImages in PostGalleryTypeImageRecyclerViewAdapter to prevent potential NullPointerExceptions when galleryImages is empty
refactor deployment ID handling in StandardChangeLogHistoryService and CreateDatabaseChangeLogTableGenerator to improve code clarity and maintainability by using nullable columns
pdfbox - examples : use interactive form instead of fdf
removed the ` moreColumnsOk ` parameter from the ` getIndex ` and ` canUseIndex ` methods in ` AlterTableAddConstraint. java
added a provisional engine management mechanism in QuickfixjComponent. java and updated assertions in QuickfixjComponentTest. java to improve flexibility
added new fields ` displayZoomControls ` and ` mixedContentMode ` with their respective overrides to enable control over display zoom controls in the web
added corporea and corporeaSpark blocks to the corporea world to enhance corporea functionality and provide
refactor ConnectionFactory to improve connection handling to enhance reliability and maintainability of the connection management logic
added a new method ` EnableDisableMenuItems ( ) ` to ` GpsMainActivity. java ` to enable disabling of menu items based on
updated the message for empty favorite headline from ` server _ search ` to ` filter _ list ` to enhance user experience by providing a more relevant
updated service registry settings to use JUnit's @ ServiceRegistry annotation to improve test reliability by ensuring consistent service registry settings
added auto - resize and auto - create columns to MotorMountConfigurationPanel and updated MotorMountTableModel and MotorMountConfigurationPanel to
updated LINE _ SEPARATOR to use system property instead of hardcoded value to ensure consistent line separator handling across different operating systems
added getter and setter methods for creator, subject, and document properties in POIXMLProperties. java and TestPOIXMLProperties. java to
updated the call to super. doStop ( ) in HandlerWrapper. java to ensure proper handling of the doStop event
added a check for non - empty cncFile length in Aeron. java to ensure valid file input before proceeding
rename ` NonMarkedFoo ` to ` FooCommand ` and update related references to improve clarity and maintainability of the code
added methods to check jmods in ClassFileSourceImpl. java to enhance functionality for identifying jmods in jar files
added nullability annotations and improved null safety in TreeBackedElement and TreeBackedPackageElement to enhance code robustness and prevent potential
replaced Saml2TokenGranterTest with UserTokenGranterTest to initialize tokenRequest with a PublicTokenRequest instance to ensure
updated array index retrieval from array length to valueRangeObject to ensure correct reference to the value range object
added synchronization methods to ZKAssign and ZooKeeperWatcher classes to ensure proper synchronization of data between ZooKeeper instances
add check for EGL14. eglGetCurrentContext ( ) to ensure the current context is not equal to the expected EGL14 context
[ drools - 701 ] fix deactivate ruleflowgroup in executionflowcontroltest
added a return statement to HystrixDashboardConfiguration. java to ensure proper handling of command execution flow
removed exception handling for PipeNotExistException in DropPipeProcedure. java and added a try - catch block in IoTDBPipeIT. java
add cleanup to clientqueuedisruptiontest
replace SignaturePrinter with DefaultJavaPrettyPrinter in CtReferenceImpl. java to enhance functionality by utilizing the DefaultJavaPrettyPrinter for better
changed the visibility of the validateInstance method from public to protected to allow subclass access for instance validation
updated GeoPointField, GeoPointTokenStream, GeoPointInBBoxQuery, GeoPointInPolygonQuery, GeoPointNumericTermsEnum, GeoPointPrefixTermsEnum
added a new class FakeBuildable that extends AbstractBuildable and overrides getInputsToCompareToOutput and getBuildSteps methods to facilitate testing
remove nullability check from guiingameforge. renderhelmetoverlay ( )
updated variable names from " path " to " timeseries " in TSParser. java and SQLParserTest. java to improve clarity and accuracy
added a condition to return 0 if velocity is less than EPSILON to ensure proper handling of negative velocity values
replaced Blob retrieval methods with Blob storage methods in GcsPinotFS. java to improve code clarity and maintainability by using a dedicated Blob
added a finally block to close the transport vertx to ensure proper resource management and prevent potential memory leaks
added methods to create and recreate history views in DbTriggerBasedHistoryDdl, PostgresHistoryDdl, and PostgresHistoryDdl to enhance
updated the clustering engine version from 2 to 3 in the test to align the test with the new clustering engine requirements
added JUnit @ Ignore annotation to SynDataReplyDataLoadTest. java to temporarily skip tests that need to be rewritten
added a new ` ParserStateObjectInputStream ` class and updated ` ParserCacheCommandIntegrationTest ` to include a whitelist of ` RemoteDaemonic
added logic to retrieve and set the object quoting strategy in ChangeSet and DatabaseChangeLog to ensure proper handling of object quoting strategies in database operations
replaced ` MetainfoParser ( ). parse ( zipFile ) ` with ` MetainfoParser ( ). fromXmlStream ( zipFile
deleted the CsrfControllerAdvice. java file to remove unused code to streamline the codebase
added a method to quote the endorsed paths in AntCompiler. java to ensure proper handling of special characters in path formatting
added support for scrim animations in the Launcher and AllAppsBackgroundDrawable classes to improve visual feedback during screen resume from actions
updated the value of ` Long. parseLong ` from ` 2 < < 24 ` to ` 1 < < 24 ` and modified ` TypeInference
chore ( deps ) : upgrade gapic - generator - java to 2.7. 0 and update gax - java to 2.16. 0
added tests for various path types in WindowsPathParser and PathOps classes to ensure correct handling of relative and absolute paths in path operations
remove unnecessary InetSocketAddress creation in Promiscuous. java to simplify the code by eliminating unnecessary dependencies
replaced writer. close ( ) with wildcardQuery. close ( ) to ensure proper resource management and avoid potential memory leaks
replaced the return statement to clone the nBits array to ensure that the nBits array remains independent of its original state
changed the visibility of ` deriveCollectorName ` method from private to protected and added unit tests for ` ProfilerCollector ` to enhance accessibility
datamongo - 2043 - omits type hint when write simple type
added PerfStatsCollector to measure the creation of proxy factories to improve performance monitoring during proxy creation
added @ SuppressWarnings ( " unchecked " ) annotations to GroovyEngine. java to suppress unchecked warnings during compilation
added exception handling for ConnectException in TCPConnection. java to improve error reporting for connection issues
refactor reinflateWidgetsIfNecessary ( ) method to encapsulate widget inflation logic to improve code readability and maintainability by encapsulating widget inflation logic
added a new file ` DeleteInsideFileDialogTest. java ` for testing file deletion functionality to facilitate testing of file deletion within a dialog
update display update logic and auto flush handling in LwjglAbstractDisplay. java to ensure display updates occur only after auto - flushing is
added error handling and updated test methods in InstructorStudentListPageUiTest. java and InstructorStudentListPage. java to improve robust
added methods and only runs in TestIgnorance. java to manage test execution based on system properties
removed the ` pointer ` parameter from the ` fling ` method in ` ScrollPane. java ` to simplify the method signature by eliminating
added null check for pageable in QueryDslJpaRepository and created a test for null pageable in QueryDslJpaRepositoryTests to
added a method ` computeMemorySize ( double fraction ) ` to ` MemoryManager ` and corresponding test cases in ` MemoryManagerTest ` to
[ ci ] increase test timeout to 20 second.
refactor SnowballAnalyzer to improve code readability to enhance maintainability and facilitate future updates
updated previous index handling in StreamingAggTemplate. java to ensure proper index management during batch processing
added a new method ` pluginErrorMessage ` that returns a detailed error message to improve error handling and provide clearer error messages
added a new method ` stream ( TableIdentifier tableId ) ` to the ` StreamSupplierComponent ` class to provide a standardized way to stream
updated logging messages to include the fully played watched file instead of the watched file to improve logging clarity for better debugging and monitoring of file movement failures
refactor InjectorProxy and StandardInjectorProxy to use InvocationTargetException instead of setter methods to improve error handling and maintainability of the code
[ hotfix ] remove unnecessary closing of output stream in flinkstreamingcreatefunction
added test cases for ` CreateTable ` and ` Alter ` statements in ` ShowStatementTest ` and ` UnsupportedStatementTest ` classes to ensure
change return value from null to ImmutableList. of ( ) to ensure that the method returns an empty list instead of null
updated the expected values in NamedSetTest. java from Deliberate error to Quality Distribution, Inc. to ensure the test reflects the
added websocketReconnect flag and refactored WebSocket connection handling in DeconzBridgeHandler and WebSocketConnection classes to enhance websocket connection management and improve
replaced calls to setAttribute with removeAttribute for ACEGI _ SECURITY _ AUTHENTICATION _ KEY and ACEGI _ SECURITY _ TARGET _ URL _
hbase - 2658 testregionreplicateendpoint fail on slow ci server
added PMS configuration to FormatRecognitionTest. java to disable PMS functionality during testing
added a transition for creating OVA templates and updated event handling in TemplateServiceImpl and ObjectInDataStoreManagerImpl to improve template management and ensure proper event
updated PrincipalAttributeRegisteredServiceUsernameProviderTests to run JUnit4 tests using Spring Boot to improve test reliability and maintainability by using Spring Boot
added @ Override annotations in CentralAuthenticationServiceImpl, RemoteCentralAuthenticationService, and NoOpLockingStrategy classes to ensure proper method overriding and improve code
updated table and view names in AppendOnlySchemaIT. java to improve clarity and consistency in database schema handling
added a check to ensure deleted documents count does not exceed segment doc count to prevent indexing issues caused by mismatched document counts
changed the parameter name from ` ex ` to ` exception ` in ` logException ` and added methods for logging exceptions in ` SipLogger `
updated the length requirement for staves in FilamentFactory. java to ensure proper handling of staves with no starting barline
changed the default value of ` handleFileUploads ` from ` true ` to ` true ` in ` VertxPlatformHttpServerConfiguration ` and
added a test method to ` CsrfFilterTests ` to verify handling of case - sensitive CSRF protection matchers
refactor HotSpotObjectConstantImpl to use a local HotSpotResolvedJavaField variable to improve code readability and maintainability
replaced calls to ` add ` with ` addFrequency ` in multiple spell checker classes to improve code clarity and maintainability by using a more des
[ beam - 8470 ] use watermark instead of instant. now ( ) in fileio
fix for http : / / code. google. com / p / mybatis / issues / detail? id = 4.
added import statement for ResultSetMetaData in QueryCompilerTest. java to enable support for ResultSetMetaData in query compilation
updated library command to use the project root path instead of the library output to ensure the correct root path is used for library output
updated slider model from - 180 to - PI in RailButtonConfig. java to ensure correct slider positioning based on angle settings
updated the position of drawEncloser in OverlayRenderer. java and modified error handling in Saves. java to improve rendering accuracy and
added expressionLanguageSupported ( true ) to KerberosProperties. java to enable support for expression language in Kerberos configuration
removed rotation logic for remote mount point components in ThirdPersonRemoteClientSystem. java to streamline the process of setting the held item mount point
updated setupViews method to accept ScrimView as a parameter to enhance functionality by allowing custom scrim effects during view setup
[ hotfix ] [ state ] add configuration option to enable periodic materialization.
added getter and setter methods for the " value " attribute in the ProtocolParameter class and updated List and ParamTagHandler to use this value to
added a test for the ChunkingServlet with a HEAD request header to ensure that the ChunkingServlet correctly handles HTTP requests with both headers and
added a new boolean field ` isBumped ` and modified the ` parseDetails ` method to handle additional status information to improve handling of status
added " Content - Type " header to " Content - Type " in SwitchToPostInterceptor and SearchRequestUnitTest to ensure proper content type is
refactor EmbeddedClientConnector to improve code readability to enhance maintainability and facilitate future updates
added logging for setFetchSize in PhoenixResultSet. java to improve error handling and logging clarity
added new AndroidNet instances to AndroidDaydream. java to ensure proper initialization of AndroidNet instances
[ hotfix ] [ runtime ] fix typo in llrealtimesegmentdatamanager
updated deposit addresses for various currency types in KrakenAccountService. java to ensure accurate representation of deposit addresses for better account management
hbase - prefix - tree need to be part of hbase - prefix - tree module
added a boolean flag ` inflationFailed ` in ` DesignerActivity ` and changed ` root ` to final in ` XMLLayoutInflater ` to ensure
refactor PushbackInputStream to improve code readability to enhance maintainability and facilitate future updates
make loweringtool abstract and add schedule phase
updated error message from ` download _ folder _ failed _ content ` to ` sync _ folder _ failed _ content ` to accurately reflect the
added newline handling and improved rule mapping in Makefiles and tests to enhance readability and maintainability of the code
replaced direct retrieval of deleted documents with MultiFields's getDeletedDocs method to improve code clarity and handle potential null values more effectively
updated refresh flag handling in SimpleBatchNode to ensure proper refresh behavior based on device type
[ gr - 3594 ] guard against uninterruptible method in sharedmethod.
added framebuffer size callback to LwjglWindow to handle window size changes effectively
refactor translation handling in LauncherAppTransitionManagerImpl to improve clarity and functionality of task parallax animations
updated LiteralNode instances to use NullLiteralNode instead of NodeLiteralNode to improve type safety and prevent potential NullPointerExceptions
added methods to set lengths in CompoundFileWriter, FSDirectory, and IndexOutput classes to improve file length handling and ensure consistency in length calculations
updated AndroidNdkScriptGenerator and AntScriptGenerator to include " memcpy _ wrap. c " and modified imports in Lwjgl
camel - aws2s3 : use sourcebucket / sourcekey instead of copysource.
added permission handling for " * " role in RuleBasedAuthorizationPlugin and updated test assertions in TestRuleBasedAuthorizationPlugin to improve authorization logic and
refactor ZookeeperClientServerRegisterRepository to handle null and empty data cases to improve robustness and prevent potential NullPointerExceptions
renamed methods and variables related to deep stubs in ReturnsDeepStubs. java to improve clarity and maintainability of the code
added a check for ` size ( ) ` before calling ` getCallValue ( ). toByteArray ( ) ` to ensure ` getCallValue ( )
update log message format in BibEntry. java to improve logging clarity for date parsing failures
added exception handling for NoSuchAlgorithmException in PKCS12KeyStore. java and updated PBE _ ALGO string in StoreSecretKeyTest. java to
rename ` length ` to ` inputLength ` for clarity to improve readability and maintainability of the code
added validation for job parameters in CommandLineJobRunner and created a test for invalid parameters in CommandLineJobRunnerTests to ensure that invalid parameters are properly
updated assertions in SmtpTests and MailTests to remove carriage return characters to simplify test assertions for better readability and maintainability
updated case statements in ExtendedConnectionDataSourceProxy. java to use diamond operator to improve code readability and maintainability
refactor LongSequenceGenerator to use AtomicLongFieldUpdater for sequence ID retrieval to improve thread safety and atomicity in sequence ID generation
added a new file ` Test. java ` containing a static method ` sum ( ) ` to provide a utility function for calculating the sum of
updated minSdk and maxSdk configurations in ShadowWifiManagerTest. java and protected methods in ShadowWifiManagerTest. java to ensure compatibility with
added a new Java class for managing queries to facilitate the management of queries in the application
fix race condition in table. getcolumnfamilies ( )
refactor taskbar handling logic to improve clarity and maintainability to enhance code readability and ensure proper taskbar recreation based on orientation changes
refactor SyncFutureCache class to improve cache management to enhance performance and maintainability of the code
updatedUBBO _ PROTOCOL _ VERSION from " 2.1. 1 " to " 2.1. 2 " and updated LOWEST _ VERSION _ FOR _
pmd : fix checkstyle issue in util / uselessstringofrule. java
added a test method ` testEllipseNoseconeDrag ` to ` SymmetricComponentCalcTest. java ` for NoseC
added a default target max type shard size to the HollowProducer class and updated constructors accordingly to ensure consistent handling of different type shard sizes and
added new version identifiers " 5.5. 5. 2 - cfs " and " 5.5. 5. 2 - nocfs " to ensure compatibility with
updated CompilationTask. java file to improve code clarity and maintainability
added a comment to indicate that location is not shown in test mode and modified parameters handling in DDLTask to improve code clarity and ensure correct
added a call to execute the ClearDatabaseChangeLogTableStatement in AbstractJdbcDatabase to enable clearing of database change log tables during database operations
updated version handling in RestClient and CallPath classes and added null checks for path and version to improve robustness and prevent potential NullPointerExceptions
updated error handling and introduced a closed flag in PhoenixDriver. java to improve clarity and ensure proper resource management when the Phoenix JDBC driver is closed
replaced return statements with UnsupportedOperationException throws in TouchApp, AlgebraViewM, InfoDialog, InputDialog, and AppleLAF
added tests for deletion of files in ConflictsResolveActivityIT and modified FolderPickerActivityIT to extend AbstractIT and implement a screenshot test for
[ gr - 3594 ] don't remove input during dev mode.
added a check to return a value if the length of the copy is less than 2 to ensure proper handling of leading and ending quotes in the
added support for NOT _ CONTAINING in JpaQueryCreator and implemented a test for it in UserRepository to enhance query functionality and ensure correct
updated authentication logic in SipSecurityManager. java to incorporate a retry mechanism when authentication duration exceeds 25 seconds to improve reliability of push branch ID when
added a dispatch operation to P25MessageFramer to enhance message processing capabilities
added null checks for handlers in WebSocketImpl. java and implemented a test for clearing client handlers in WebsocketTest. java to ensure handlers are
[ ds - 3441 ] fix discovery test failure ( # 3442 )
refactor widget padding retrieval to use Launcher. Padding instead of Resources to improve code maintainability and reduce dependencies on external resources
added methods to hide all apps in TaskbarUIController and updated closeOverlay method in BaseActivityInterface to improve user experience by ensuring all
removed synchronization from the launch ( ) method and replaced sleep with a join ( ) method to improve thread safety and ensure proper termination of the launcher
updated coordinate calculations for zoom levels in JavaSEPort. java to ensure accurate representation of zoom level in graphical interactions
replaced notificationManager calls with startForeground calls for notification handling to improve code readability and maintainability by using the current foreground service
fixed the infinite loop in the excessivepubliccounttest.
hbase. client. retries. number should be set to 3 in testthrifthbasetimessagehandler. testthrifthbasetim
change log level from info to debug in TransactionalMessageServiceImpl. java to reduce log verbosity and reduce log verbosity
added error handling for filenotfoundexception in ResourceUtils and changed logging level from debug to trace in AbstractCipherExecutor to improve logging clarity
added a new class ` BittrexTickersResponse ` and integrated it into ` BittrexMarketDataServiceRaw ` and ` Bitt
refactor enumConstants handling in EntityEntry. java to improve code clarity and maintainability by using a dedicated method for enumeration constants
updated session registration methods to accept Object as the class type to enhance flexibility by allowing multiple endpoint instances to be registered
updated character range from'"'to'['in FileUtils. java to ensure proper formatting of input characters
added stylesheet handling capabilities to ResourceService and ResourceHandler classes to enable dynamic stylesheet configuration and improve resource management
added a call to clearIndex ( ) in TestFiltering. java to ensure the index is reset before further operations
replace ` getAddress ` method with ` PointerParameterStrategy ` in ` X86MethodGenerator. java ` to ensure proper handling of pointer parameters in
updated condition to check for CockroachDatabase in CreateSequenceGenerator. java to ensure proper handling of Cockroach databases
removed the condition checking for " java. lang. String " in ObjectStreamClass. java to simplify the logic by eliminating unnecessary checks
replace UnsatisfiedLinkError with SymbolNotFoundError in Library. java and add a new class SymbolNotFoundError. java to improve error handling by distinguishing
added conditional logic to handle only pseudo fields in BinaryResponseWriter to improve flexibility in document retrieval based on specified field requirements
added handling for WebSocket PING and PONG cases in WebSocketImplBase. java and created a test for WebSocket pause ping functionality in WebSocketTest.
updated NON _ IDENT _ ESCAPES string format in RegExpScanner. java to ensure correct handling of non - identity characters in regular expressions
updated DnsResolverProvider and HostnameResolutionTest to include rotation and caching options to enhance server selection functionality and improve cache management
added @ ConditionalOnClass annotation to TraceMessagingAutoConfiguration. java to ensure that messaging tracing functionality is only applied when appropriate
mondrian : fix test failure on oracle
updated import statements in IDELanguageClientImpl, EditorTextActionMode, IDEEditor, IDELanguageClientImpl, EditorTextActionWindow, and
added handling for closing XML tags in XMLLightweightParser to ensure proper handling of close tags during parsing
removed visibility setting from TouchCharInput to ensure TouchCharInput does not interfere with other input elements
added a null check for the current user before proceeding to prevent potential NullPointerExceptions when the current user is not available
refactor JSObjectLinker to conditionally set properties based on their index to improve clarity and maintainability of the code
refactor DefaultUniqueTicketIdGenerator and HostNameBasedUniqueTicketIdGenerator to initialize fields with default values to improve code clarity and maintainability by
added @ Deprecated annotation to SecurityConfig. java to indicate that the class is outdated and should not be used in future development
added @ Deprecated annotations to multiple Java files to indicate that these elements are deprecated and should no longer be used
deleted the JoglDebugAdaptor. java file to remove unused code to streamline the codebase
added ` toString ` methods to ` ExtraFieldPropagation ` and corresponding test cases in ` ExtraFieldPropagationTest ` and ` AWSPropagation ` to
added a PendingIntent import for PendingIntent in FileDownloader and FileUploader classes to enable notification updates with pending intents
refactor the ` nextOrd ` method to use a new ` set ` method to improve code readability and maintainability by encapsulating the logic logic
refactor DateTimeFormatter to improve code readability to enhance maintainability and facilitate future updates
updated desktop properties to include " Shell. shellFolderManager " instead of " sun. awt. shell. Win32ShellFolderManager2 "
added null and empty check for administrator credential in KerberosOperationHandler. java to ensure proper handling of null or empty principal and password in Kerberos authentication
added MAX _ WIDTH _ SCALE _ FOR _ LARGER _ SCREEN to limit widget width based on device profile availability
added rendering setup and end of sketch window color in PSurfaceJOGL to ensure proper rendering of sketch window colors
refactor Hashing class implementation to improve performance and maintainability of the hashing algorithm
renamed the parameter ` file ` to ` folderPath ` and ` fileName ` in the ` accept ` method to improve clarity by distinguishing between
updated UserInfoActivity to include user info strings instead of drawable resources to enhance user experience by providing more context about user information
removed null check for method type in J. java to streamline code by eliminating unnecessary null checks
increased ACTIVITY _ START _ DELAY from 500ms to 800ms to improve responsiveness during activity startup
added a constant WEBAPP _ HOME in SolrJettyTestBase. java and updated the path in JettyWebappTest. java to use
removed the assignment of the diameter variable and cleared the selection in ThrustCurveMotorSelectionPanel. java to simplify the code by elim
added BufferUtil. clearToFill ( buffer ) method to ByteBufferPool. java to ensure proper buffer is cleared before use
updated the ` processNotificationRules ` method to include an ` originatorId ` parameter and modified its implementation to enhance notification rule processing by incor
updated group references from " authorization. ldap. groupBase " to " authentication. ldap. groupBase " and " authorization. ldap. group
added deleteExchange ( " x " ) and queueDelete ( " q " ) methods in DurableOnTransient. java to facilitate
[ hotfix ] [ test ] fix testbulkslotproviderimpltest failure
added error handling for connection failures in PingService and ServerInfoService to improve reliability of connection attempts and provide better error reporting
refactor CompositeHandlerAdapter to improve code readability to enhance maintainability and facilitate future updates
refactor Quartz2Adapter to improve code readability to enhance maintainability and facilitate future updates
added error handling to the execute method in SulongLibrary. java to improve stability by catching potential IllegalStateExceptions
updated Spring Security schema version from 6.2 to 6.3 in multiple files to ensure compatibility with the latest Spring Security features and improvements
renamed ` newNameResolver ` to ` newNameResolver ` and introduced ` SynchronizationContext ` in ` DiscoveryClientNameResolver ` to improve clarity and
added handling for non - empty annotations in JavacParser and introduced a new class TestAnnotatedAnonClass with a test method to improve error handling
added " com. sun. naming. internal. " to package imports in CheckPackageAccess. java to ensure compatibility with internal naming standards
changed the strict flag from false to true in StaxEventItemReader. java to enable strict mode for improved event handling
modified the ` readPartition ` method to include an ` boolean [ ] isExhausted ` parameter and updated its logic accordingly to improve error
updated ActionResetingPool. java file to improve resource handling efficiency
added a check to ensure the light state's XY is not null before converting it toHSBType to avoid potential NullPointerExceptions
refactor folder creation logic to use a new method for better clarity to improve code readability and maintainability by encapsulating folder creation logic
replaced ` activity. showLoadingDialog ( ) ` calls with direct calls to ` showLoadingDialog ( ) ` in multiple fragments to streamline
added a null check for the gesture file before loading XML logs to avoid potential NullPointerExceptions when the gesture file does not exist
updated FieldNamingPolicyTest to use Locale. getDefault ( ) instead of name. toUpperCase ( ) and name. toLowerCase ( ) to ensure consistent
added listeners to the XmlSuite result to enhance listener management in the suite
added a new method ` loadWithNewGlobal ` to the ` Global ` class and updated its constructor to enhance functionality by allowing dynamic loading of
added new methods ` fromJsonString ` and ` toJsonString ` to ` StarTreeIndexSpec ` and updated tests in ` TableConfigTest `
updated HttpSecurity, HeadersConfigurer, OAuth2LoginConfigurer, OAuth2ResourceServerConfigurer, Saml2LogoutConfigurer, and ServerHttpSecurity
replaced occurrences of " \ \ " with " \ \ " in multiple files to ensure consistent character handling for file paths
[ drools - 701 ] fix npe in operator when a value be null
added imports for FieldCache and added commit ( ) method to ensure there's more than one segment to prevent FC insanity during distributed
add test case for boundary message event on subprocess and inside subprocess
rename method resolution from ` resolveInterfaceOrVirtualCall ` to ` resolveStaticCall ` across multiple files to improve clarity and consistency in method naming
http : / / issues. apache. org / activemq / browse / amq - 2576 - add messagegrouphashbucketcount to policy
added constants for network and key slot IDs in Secmod. java to improve code readability and maintainability by using named constants
added alignment support to the layout and introduced a method to set the mouse button in the GdxRenderer class to enhance layout flexibility and allow customization of
[ hotfix ] [ test ] ignore unalignedcheckpointitcase in unaligneditcase
added checks for class equality in JDK13Services. java to ensure proper validation of class types during processing
added a check to ensure the existence of a keyword in keywordToReference before adding it to keywordToReference to avoid duplicate entries when the keyword
camel - core - optimize size of multicast processor by use collection. size ( ).
added methods to retrieve start count and index in the SegToken class and modified the findInTable method in WordDictionary to enhance functionality and
escape telegraf character ( # 644 )
updated TRIBES _ MBR _ BEGIN and TRIBES _ MBR _ END to use a udp port instead of a multicast address
renamed ` OperatorMulticast ` to ` OperationMulticast ` across multiple files to clarify the purpose of the multicast operation
increased the send timeout duration from 1ms to 100ms in EventBusTracerTestBase. java to improve test reliability by allowing more time
added exception handling for node startup in VertxTestBase. java to ensure proper resource management and prevent application crashes
hhh - 14745 - fix race condition in sessionfactoryserviceregistryimpl
replaced the method ` openLocalhost ( ) ` with a new method ` getJwtTokenFromLocalStorage ( ) ` in multiple test files
[ hotfix ] [ test ] add test case for ivalueutilstest
added a task stack listener for pinned stack animations in RecentsView. java and removed the onEnterAnimationComplete method in BaseActivity.
[ itext ] improve performance of defaultsplitcharacter. checkdatepattern
camel - 14284 : configuring endpoint factory bean should set property on endpoint and not configuration object
refactor animation handling in ContentFillItemAnimator to use a new method ` endPendingAnimation ` to improve code readability and maintainability by encapsulating
added logging for play time calculations in LauncherAnimationRunner to improve debugging capabilities by tracking play time accurately
added a conditional check for BailoutOnException in C1XCompilation. java and defined a constant in C1XOptions. java
initialized signup and passwd variables to null in Links. java and updated assertions in IdentityZoneConfigurationBootstrapTests. java to ensure default values are set
[ hotfix ] [ runtime ] rename previousexecutiongraphallocations to getreservedallocations
changed the type of ` onlyFormat ` from ` SimpleDateFormat ` to ` String ` and updated related methods accordingly to improve clarity and consistency in
added NoDataContainer to the GeoTiffReader and corresponding test in GeoTiffReaderTest to enable garbage collection of no data in the
sulong : fix npe in llvmbasicblocknode and llvmbasicwritenode
replaced ` out. toString ( ) ` with ` out. toByteArray ( ) ` in ` JdbcExecutionContextDao ` and ` DefaultExecutionContextSerializerTests
replaced blockUntilConnected method with CountDownLatch for connection state handling to improve responsiveness in pathChildrenCache connection management
refactor ArrayTypeHandler constructor to improve null safety to enhance code reliability and prevent potential NullPointerExceptions
refactor RegexpTunnel to use reflection for retrieving the prefix to improve error handling and maintainability of the code
updated application pick method to use Application class instead of null to ensure compatibility with the latest application configuration
[ drools - 701 ] avoid npe on mutablelongglobal in ksession ( # 701 )
updated asset name and description validation methods in AssetIssueActuator. java and TransactionUtil. java to improve error handling and ensure valid asset names
don't copy text field in copy paste if it can't be copy
updated LGWebOSActions and LGWebOSUpnpDiscoveryParticipant to use @ text / actionShowToastWithIconDesc instead of
replace setSeedNodes and setActiveNodes with getTrustNodes in TronNetService. java to ensure all nodes are added to the configuration
updated assertions in BaseTokenStreamTestCase to improve clarity and error handling to enhance readability of test assertions and ensure proper thread management during analysis
added a boolean parameter ` modulus ` to ` increment ` methods in ` PatternProcessor ` and ` TimeBasedTriggeringPolicy ` classes to enhance
refactor ` performItemClick ` and ` performItemClick ` methods in ` ShadowAdapterView ` and ` ShadowListView ` to improve code clarity
pdfbox - 4892 : avoid unnecessary cast to cosstream, a suggest by valerybokov
added afterMethodScope method to GraphDecoder and updated debug dump logic in PEGraphDecoder to ensure proper handling of method scopes and improve debugging clarity
refactor HttpSessionDestroyedEvent to retrieve and store security context attributes to improve code clarity and maintainability by using session methods
added a test method to change the service name in Zipkin using Spring Cloud Sleuth to ensure that the correct service name is used in
added logging statements and modified SpoolMode handling in JavaInMemoryFileManager and JavacToJarStepFactory to improve visibility of classes during spool
renamed SeparatedProjectGenerator to SeparatedProjectsGenerator across multiple files to improve clarity and consistency in naming conventions
increased timeout duration from 4 seconds to 10 seconds in the tryLock method to allow more time for locking operations
added a default cache capacity to the ` of ` method parameters in ` ConfluentSchemaRegistryDeserializerProvider ` to optimize memory usage by allowing configurable
replaced JCheckBox named " Remind me later " with a JCheckBox named " checkAtStartup " to improve user experience by providing a more informative
added methods for key, weak, expireAfterAccess, expireAfterWrite, maximum, weighed, and factory specifications in NodeGenerator.
added a check for transient properties in CascadingActions. java to ensure proper handling of transient properties during cascading actions
added constants and methods for proto property names in ScriptObject. java to improve code readability and maintainability by using named constants
updated default read mode from " heap " to " mmap " in CommonConstants. java and added logging in ImmutableSegmentLoader. java to improve
added imports for ByteArrayTemplate and implemented byte type handling in ArrayTemplateBuilder to enhance functionality for byte type handling in array templates
added support for the Hipchat property in SamlServiceProviderProperties and created a new CasSamlSPHipchatConfiguration class to
replaced List with HashSet for commandRegistryUrls and updated resource retrieval logic to improve performance and maintainability of commandRegistryUrls
updated warning log message to include context and added debug logging for uncovered HTTP methods to improve logging clarity and ensure detailed context information during HTTP operations
added a boolean flag ` loggedIn ` to the ` login ` method in ` SvnRepositoryConnector ` and set it to true in ` S
camel - jbang - fix the issue that lazy creation of transaction manager be not work.
vmwareresource : fix typo in vmwareresource. java
refactor Timers class to improve code readability to enhance maintainability and facilitate future updates
replaced ` OVERWRITE _ EXISTING ` with ` APPEND _ TO _ ZIP ` in ` DefaultDefectReporter. java ` to
removed deprecated static final String constants in UAX29URLEmailTokenizer. java to streamline code and improve maintainability by eliminating unused
updated the type of ` ScriptObject ` from ` Map < Object, Object > ` to ` ScriptObject ` in ` ContextTest ` to
refactor EventBusMetrics class to improve code readability to enhance maintainability and facilitate future updates
[ ds - 3940 ] add getepersonlocale ( ) method to get supported locale.
updated JaversTransactionalDecorator to implement InitializingBean and added afterPropertiesSet method to ensure that the schema is properly initialized before and after properties
removed null check for pgTypeName in TypeInfoCache. java to simplify the code by eliminating unnecessary null check
added server setup in ScopedHandlerTest. java to ensure proper server setup and response handling
add call - time - out exception to ` ` call - time - out'' response
added a check to ensure the password is not empty before proceeding to prevent potential errors when the password is not provided
updated permission check from ` Objects. equals ( permissionNode, " " ) ` to ` Objects. equals ( permissionNode, " * "
rename ` setEncoding ` and ` setCharacterEncoding ` methods to ` setSourceCharset ` for clarity to improve code readability and maintainability by using
changed the type of ` postLogin ` from ` byte [ ] ` to ` String ` across multiple files to improve data type consistency and simplify
refactor simulation and parameter handling in GeneralOptimizationDialog. java to improve code clarity and maintainability by using final variables
camel - main - add contextreloadenabled option for camel - core
updated logging properties in CommonTestUtils. java for better clarity to improve readability and maintainability of logging output
refactor PrologSizeSanityCheck class to improve code readability and maintainability
refactor NearbyListFragment to improve code readability to enhance maintainability and facilitate future updates
added conditional check for non - closed input stream content type in RequestBody. java and created a test for it in RequestBodyTest. java to ensure
added check for embedded settings in EmbeddedNeo4jServer and modified conditional checks in DefaultBeanContext to ensure proper handling of embedded settings and
added movement and health functionality to the MovementDebugCommands class to enhance player experience by allowing customizable speed values
added half length calculation for random generator in RandomLoadBalancer. java to ensure random generator does not exceed defined weights
refactor GsonParser and MetricsResourceTest to simplify cache string construction and improve error handling to enhance code readability and maintainability while ensuring proper validation
added documentation for sorting parameters in ApacheHttpClientMediaWikiApi. java to improve understanding of sorting behavior based on property and direction
replaced ` checkTransactionSynchStatus ( ) ` with ` pulseTransactionCoordinator ( ) ` in ` AbstractSharedSessionContract ` and ` Session
refactor PipeTaskCoordinatorLock to use a new class PipeTaskCoordinatorLock to improve thread safety and maintainability of the code
added conditional logic to conditionally generate the dependency jar based on the presence of preinstrumented jars to enhance flexibility in specifying whether to use preinstrument
modified the conditional check from ` if (! isSilent ) ` to ` if ( isSilent ) ` to simplify the condition logic
added validation for dynamic field default values in IndexSchema. java and created a test for unsupported attributes in BadIndexSchemaTest. java to ensure
don't randomly read repair if command digest mismatch
replaced ImmutableSortedSet with Iterables for system include root management in PrebuiltCxxLibrary. java and added a test for includes directories in Prebuilt
updated date and subject key identifier handling in ` AdaptableX509CertSelector ` and added checks for sensitivity in ` ForwardBuilder ` to
log4j2 - 1343 use abstractappender. parse instead of string. parse
add an @ Deprecated annotation to GuiScreenEvent. java to indicate that the method is obsolete and should no longer be used
removed multiple methods for adding and removing categories in CategoryEditSearchRecyclerViewAdapter to streamline category management by eliminating redundancy
# 269 - enh : add servercachemanager. getcache ( string key, string type ) method to support different cache type
refactor mass, CG, and CDO overridden by assignments in RocketComponent. java to improve code readability and maintainability by using enhanced for
removed the ` final ` modifier from ` ReusableCompiler ` and modified ` doCompile ` and ` post ` methods in ` JavaCompilerService
refactor ` Task ` to use a ` Supplier < V > ` instead of an abstract method to improve code readability and maintainability by using a
added synchronization to the StripedExecutor in WanReplicationServiceImpl. java to ensure thread safety when shutting down the executor
added null checks and improved path retrieval logic in Partition. java and DDLSemanticAnalyzer. java to enhance robustness and prevent potential Null
refactored schema handling in LocalServiceRegistryClientImpl and RemoteServiceRegistry to improve code clarity and maintainability by using a more concise executor
added a new file ` FilesTest. java ` and a static method ` delete ` in ` Files. java ` to implement unit tests for
removed exception handling for closing resources in ServerSocketAdaptor and SocketAdaptor to simplify resource management by eliminating unnecessary exception handling
updated the class name check from " java. lang. System " to " Logger. class. getName ( ) " to ensure compatibility with the
replaced ` currentWorkingDirectoryList. clear ( ) ` with ` addWorkingDir ( f. toString ( ) ) ` in ` Project. java
added a null check for the variable cn in ItemInfo. java and set insets in Workspace. java to ensure proper handling of null values and
changed the visibility of the String variable from public to private to restrict access to the String variable for better encapsulation
updated Java URL and JSON type in SimplePostTool. java to ensure compatibility with JSON data format
fix for max and min command toggle in algebraitem
refactor client container startup and error handling in JavaxWebSocketClientContainerProvider and JavaxWebSocketClientContainer to improve error handling and ensure proper shutdown
modified the condition to check for both ` type ` and ` openWithApplication ( ) ` in ` Linux. java ` to improve clarity and
destroy webapplicationcontext after each test to ensure proper cleanup of web application context
added a method to retrieve the search string from a query in RemoteBrowseHandler. java to improve search functionality by allowing users to search for specific
hide the neutral button in SetupEncryptionDialogFragment to improve user experience by ensuring the button is visible
refactor item count method to use separate method for archived and withdrawn to improve code readability and maintainability by reducing redundancy
updated SQL statements to use single quotes for column and part key types to ensure compatibility with SQL standards for handling special characters
added error handling capabilities for OAuth2 exceptions in CheckTokenEndpoint to improve error reporting and provide better insights into OAuth2 errors
refactor multiple XY - related classes to improve code organization and clarity to enhance maintainability and readability of the codebase
refactor IdentityZoneEndpointsIntegrationTests and JdbcIdentityZoneProvisioningTests to use ParameterizedTypeReference and simplify response handling to improve code clarity and maintainability
increased the dismiss delay from 20000ms to 10000ms in ExtractionModelFrame, DataBrowser, and SQLConsole to improve user experience by providing
added SUREFIRE _ VERSION _ SAFE _ 5 to ActionProviderImpl. java and updated assertions in WarnPanel. java to
updated exception handling to use RuntimeException instead of HumanReadableException to improve error handling for external processes
[ hotfix ] [ table - planner - blink ] deprecate experimental annotation in flink - core
refactor StreamCepstrumSource for improved readability to enhance maintainability and facilitate future updates
added a check to ensure index does not exceed the size of items to prevent index out of bounds errors
updated expression type from OrExpression to Parenthesis in CloneHelperTest to ensure proper handling of parentheses in SQL queries
added confirmation option to the DebugPaste command to enhance user experience by allowing debugging actions
replaced direct calls to ` get ( ) ` with `. orElseThrow ( ) ` in multiple configuration classes to improve error handling by throwing an
ggb - 195 : prevent double click on mathquill ggb element
updated GoBinaryDescription to use GoBinaryDescriptionArg instead of Arg and removed unused imports to improve code clarity and maintainability by using more specific
added a check for the existence of the " application. env " configuration before retrieving the " application. env " value to ensure that the application
updated ` SimpleRetryExceptionHandler ` to implement ` RetryListener ` instead of ` RetryListenerSupport ` and created a new ` SecondDummyRetryListener
fix elastictrometerregistry. writecounter to report whole count with decimal ( # 498 )
refactor Contribution class to use a constructor for email and author to improve code readability and maintainability by encapsulating email and author information
refactor loop structure in JUnitFormatter to use a do - while loop for better readability to improve code clarity and maintainability by simplifying the loop
modified the handling of elements in Subject. java to ensure proper instantiation of LinkedList instances based on class type to improve type safety and prevent potential Class
updated exception messages to use ` resource. getURL ( ) ` instead of ` reader. isReadable ( ) ` to improve clarity and accuracy of
updated TestMultiRenderTarget to use PointLight array instead of geometry for particle effects to improve clarity and functionality of particle lighting in the rendering
added a null check for currentProfile before retrieving the client to prevent potential NullPointerExceptions when the currentProfile is not initialized
replace target. addNamespaceDeclaration with newElement. addNamespaceDeclaration to ensure the namespace declaration is added to the correct element
added BigInteger constants for p, q, and g in KeyStoreManager. java to enhance security by supporting additional cryptographic parameters
replaced ` getIndexBuffer ( ) ` with ` getIndicesAsList ( ) ` in ` GImpactCollisionShape ` and ` MeshCollisionShape
act - 5 : set the engine version to the persisted process definition ( act - 5 )
updated property keys for resource loader and parser in SpecificCompiler. java to improve clarity and maintainability of the code
updated thread verification logic in CEntryPointSnippets. java and added verification methods in VMThreads. java to improve thread verification logic and enhance clarity
added null check for maps in GenericUDFMapValues. java and created a new test class TestGenericUDFMapValues. java to
replace " interceptors " with " handlerInterceptors " in EndpointWebMvcAutoConfigurationTests to improve clarity by using a more descriptive identifier
added properties for Oil well generation and configuration options in BCEnergyConfig. java and OilGenerator. java to enhance control over oil
added error handling for directory cleanup in ImportContext. java and updated file existence checks in JobQueue. java and ImporterIntegrationTest. java
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4594.
removed redundant import statements in CRLDistributionPointRevocationCheckerTests. java to improve code readability and maintainability
added imports for ZipConstants and ZipConstants64 in ZipEntry. java and ZipConstants. java to enhance functionality by integrating additional Zip - related
refactor ZipFileSystemProvider to encapsulate file creation logic to improve code readability and maintainability by consolidating file handling logic
replaced a Box with a Box. createHorizontalGlue in IfControllerPanel. java to improve code readability and maintainability by using a standard
updated the connection creation method in FailoverUpdateURIsTest. java to ensure consistent connection setup across test cases
added Gson @ SerializedName annotations to ServiceOsSpecific. java to enable serialization of service dependencies for better data handling
added a method to delete a database entry in DatabaseAdapter and refactored database deletion logic in BookManagerFragment and FirstRunWizardActivity to
refactor multiple Java classes to improve code organization and readability to enhance maintainability and readability of the codebase
updated the calculation of response message position in AbstractAjpProcessor. java to correct the calculation of response message length
refactor admin console plugin startup and shutdown methods to improve resource management and error handling during startup and shutdown processes
refactor unregisterHandlers method to use instance variables for binary and text handlers to improve code clarity and maintainability by encapsulating handler registrations
added properties to enable ID transformation methods and log file settings in IoTDBDescriptor. java to enhance configuration flexibility for enabling ID tables and log
updated NUM _ DOCS _ PER _ TYPE from 2000 to 100 and refactored import statements in ExitableDirectoryReaderTest. java to
updated the condition to check for null in the mock tsp access error to ensure that the mock tsp access error is validated correctly
added encoding to the script code in Transaction. java and updated test assertions in TransactionTest. java to ensure correct script encoding and improve test accuracy
updated the expression in IndexSchema to include fieldType to enhance functionality by allowing custom fieldType expressions
added handling for NullCompleter in Completers. java and created a new test class for option completers in OptionCompleterTest. java
refactor object listing logic in S3Utils. java to improve readability and maintainability of the code
change data type of sourcePeerId from String to int across multiple classes to improve data handling by using a more appropriate data type
refactor file upload logic into a separate method ` UploadFile ` to improve code readability and maintainability by encapsulating file handling logic
updated the visibility of the reply button in TweetFragment. java to improve user experience by adjusting button visibility
updated timestamp formatting in AccessLogSupportTest. java for consistency to improve readability and maintainability of the test code
updated the file path in MaryCacheFile from " testfiles - deleteme " to " tmp / testfiles - deleteme " to
removed unnecessary null check for subscribers in SettingImpl. java to simplify the code by eliminating unnecessary null checks
replaced InitializationService initialization with IllegalArgumentException initialization in AbstractSamlObjectBuilder and AbstractSaml10ResponseView to improve error handling and provide clearer
replaced printStackTrace ( ) with LogUtil. warn ( t ) in DataBrowser. java to improve error handling by logging warnings
added a condition to check for non - existent assets directory when not in development mode to ensure proper handling of static assets when not in development mode
[ hotfix ] [ checkpointing ] add writeoptions to rocksdbkeyedstatebackend. write ( )
changed the value format from " value - tag - index " to " value - index " to standardize the format for better clarity and consistency
updated the GraphHopper instantiation and modified hints in MainActivity. java to ensure that the GraphHopper uses the correct request hints for
increased wait time from 30 seconds to 60 seconds in BesuNodeRunner, BesuCommand, SECP256K1, and
renamed ` DuclsSandboxTest ` to ` SandboxTest ` and removed the ` DuclsSandboxTest ` class to
camel - cxf : don't log a warning if a message can not be process.
changed the visibility of the forwardPropagateTree method from package - private to public to allow access to the forwardPropagateTree method from other
updated SQL query execution duration from 20ms to 20ms in JDBCExample. java to improve accuracy of time representation in SQL queries
add a warning for project expressions that are not supported during profile activation to improve error reporting for unsupported project expressions
refactor Style class to improve code readability to enhance maintainability and readability of the code
added support for back navigation in ShareActivity by introducing isZoom flag to enhance user experience by allowing navigation through zoom gestures
added a conditional check to skip fields marked as deprecated to ensure that only deprecated fields are processed
added animation listeners for floating compose animations in LauncherFragment to enhance user experience by providing smoother transitions based on user settings
updated method reference syntax in Utils. java and AbstractYarnClusterDescriptor. java to improve code readability and maintainability
added Progressable parameter to multiple methods in Utilities. java and PTFRowContainer. java to enhance functionality by allowing users to specify when to
[ hotfix ] [ log ] fix typo in sourcecoordinatorprovider
removed contributions from the panel by contribution in ContributionListPanel to ensure that only relevant contributions are retained in the contribution list
renamed ` HyervisorTemplateAdapter ` to ` HypervisorTemplateAdapter ` and updated condition checks to improve clarity and consistency in naming conventions
added a check to initialize dPath based on the user's directory to ensure the correct path is used when the user's home directory
update sample rate calculation in DefaultAudioSink. java to ensure correct maximum supported channel count for PassthroughV29
log4j2 - 1349 log4j2 - 1349 log4j2 - 1349 log4j2 - 1349
updated VerificationInOrderWithCallsTest. java file to improve test coverage and maintainability
updated the axis argument in the setFromAxis method from'z'to'x'to ensure the correct axis is used for rotation
updated the constant for COLLECTION _ DELIM from " colelction. delim " to " collection. delim " to accurately reflect
add a test to ensure that listener be connect at start.
updated conditional logic in DocRenderer. java and added new test cases in PHPCCDocumentationTest. java to improve code clarity and ensure correct documentation
refactor handling of one - handed mode in RecentsAnimationDeviceState. java to improve clarity and maintainability of the code
added onDetachedFromWindow method to AppsCustomizePagedView to ensure proper cleanup of running tasks to prevent memory leaks
updated MorfologikAnalyzer and MorfologikFilter to accept a dictionary resource instead of a Polish stemming dictionary to
removed count variable and thrown state from ResultSetTest. java to streamline test logic and ensure proper exception handling
changed the initialization message from " debug " to " " in GradleBuildService. java to standardize the message format for better clarity
replaced ` AtomicReference ` with ` AtomicBoolean ` for ` preventedByLocking ` and ` preventedByMVCC ` to improve thread safety and
refactor tooltip text handling in ComponentTree and ComponentTreeRenderer to improve code clarity and maintainability by consolidating tooltip logic
increased the timeout duration from 5 seconds to 10 seconds in ZipkinStreamTests. java to allow more time for the zipkin server to start
deviantart ripper don't log in if deviantart login fails
replaced hardcoded GOOGLE _ SIGNATURES array with constants to improve maintainability and readability of the code
updated the method name from ` commonApp. solutionBusiness ` to ` commonApp. createSolutionBusiness ( ) ` to improve clarity and consistency
added a method to notify window state changes in WWindowPeer. java to improve event handling for window state changes
added email description to templateData in EntityGroupKeyContentFormatter and set detection description in TestEntityGroupKeyEmailContentFormatter to ensure proper description
replaced ` remove ( sel ) ` method with ` data. remove ( sel ) ` method to improve code clarity and maintainability by using a
updated the method for retrieving ISO 3 language in Locale. java and added validation for language length in LocaleTest. java to improve locale handling and
replaced direct instantiation of ChangeLogParser with a dedicated method to improve code readability and maintainability by encapsulating the parsing logic in a dedicated method
added a check for screen pinning active in OverviewCommandHelper to prevent further processing when the screen is active
added methods to set and display chart data in Chart. java to improve user experience by providing meaningful chart data information
added synchronization and refactored cookie handling in Http1xServerResponse and Http2ServerResponse classes to ensure thread safety when accessing shared resources
refactor chunk handling logic in NettyResponse. java to improve readability and maintainability of the code
updated header limits from 8x1001 to 8x1144 in Http2TestBase. java and TestHttp2Limits. java to
fixed - rlocalcachedmap. getkey ( ) and rlocalcachedmap. getvalue ( ) method don't use cached
camel - jpa : fix npe if no jpa component be available
physicscharacter : set jumpspeed to fallspeed instead of fallspeed
added a null check for reparsedFunction in the Parser class to prevent potential NullPointerExceptions when reparsedFunction is not initialized
replaced log statements with logger statements in BitstampPusherService. java to improve logging readability and maintainability
added deprecated methods for HTTP and HTTPS URIs in FileUploadDownloadClient. java to improve code clarity and maintainability by using a unified URI
added a filter parameter to the findOne method in MongoDbTailTrackingManager to enhance filtering capabilities for tracking records
added a new method ` assertPredicateFails ` to the ` LanguageTestSupport ` class and assert assertions in ` JuelLanguageTest ` to
added alpha calculation using boundToRange to ensure alpha value is within valid range
updated string replacement in ManifestReversion. java to ensure consistent formatting to improve code readability and maintainability
refactor DataSyncConfiguration to improve code readability to enhance maintainability and facilitate future updates
added initialization of JavaSnippetRepository in JavaLanguageServer. java to ensure proper initialization of JavaSnippetRepository
modified the loop structure in StarTreeRecordStoreCircularBufferImpl. java to include a for loop for updating sums based on the number of
danielwagnerhall : update chromedriver url to point to the correct googleapis
( chore ) camel - pgjdbc : use prepared statement instead of createStatement ( )
updated import statements in FeedParser. java to use rome's Synd library to ensure compatibility with the latest rome library and improve
added handling for " Content - Length " header in TransferCompletionHandler. java and updated NettyTransferAdapter constructor in NettyAsyncHttpProvider. java
refactor Dialog class to improve code readability to enhance maintainability and facilitate future updates
removed the constructor of EnhancedRuntimeException that accepts both String and Throwable parameters to simplify the code by eliminating unnecessary parameters
added CountDownLatch to manage thread execution in SocketAppenderTest to improve test reliability and prevent interruptions
camel - event - admin : remove unused import
removed NoSuchMethodException and IllegalAccessException from the ` compare ` method in ` ByteArray. java ` to simplify method signature and improve error handling
added a method to disable the input proxy in RecentsAnimationWrapper. java to improve touch event handling during animations
removed the JUnit @ Ignore annotation from RestletDomainServiceTest. java to temporarily skip the test due to the CAMEL - 6770
rename method ` resizeAndRehashIfNeeded ` to ` resizeAndRehashIfNeeded ` in ` HashTableTemplate. java ` to improve method
rename com. hazelcast. test. modulepath to com. hazelcast. test. modulepath
added getter method for source directories in JavaLanguageServer and JavaServerConfiguration classes to improve clarity and functionality of compiler instance creation
removed the MENU _ OPEN _ WEB menu item from TweetPager. java to simplify the menu functionality by eliminating unnecessary functionality
updated method names and assertions in AncestorDescendantTests and Node classes to improve clarity and correctness of ancestor checks
use math. max ( 0, pos. gety ( ) ) instead of searchpos. gety ( )
updated selfCheckDataTypes method to include PathNotExistException to improve error handling for non - existent data types
updated closing brace formatting in JavaCompiler. java to improve code readability and maintain consistency
[ hotfix ] [ stream ] remove mailboxexecutor from abstractoperatorfactory and abstractstreamoperatorfactory
hbase - 2658 fix the authorization of settablestateinmeta and fixmetastorestate in secure test
updated mapping syntax in GatewayMetricFilterTests. java to improve code readability and maintainability
updated BlockJUnit4ClassRunner constructor to use getJavaClass ( ) instead of getTestClass ( ) to ensure correct class is passed to the constructor
[ drools - 7 ] use lasttimedata instead of remoteitems when delete an item
updated the calculation of allAppsCellWidth to include squared values to ensure that allAppsCellWidth does not exceed cell padding
[ hotfix ] [ core ] add parent first log formatter to core option
replaced calls to ` doc ( ) ` with ` this. doc ( ) ` in ` BooleanScorer2. java ` to improve code
added a call to ` writer. forceMerge ( 1 ) ` in ` TestMultiPhraseEnum. java ` to optimize the merging process by
hhh - 10863 make session. close ( ) return void instead of null
refactor GetLocations class to improve code readability to enhance maintainability and facilitate future updates
removed printStackTrace ( ) calls from SchemaValidatorTask. java to simplify error handling by eliminating unnecessary printStackTrace calls
replaced IOException handling with a specific ignore catch block to improve error handling clarity and maintainability
updated GeneratePubkeyActivity to use AppCompatActivity instead of Activity to ensure compatibility with newer Android features and support libraries
ruby flavor : use charsequence instead of string
changed log level from warning to debug in DerbyDatabase. java and added null checks in BaseLiquibaseTask. java to improve logging
removed useCaches from Nio2Endpoint and related classes to simplify cache management and improve code clarity
refactor CasGeoLocationConfiguration to use Resource instead of MaxmindProperties to simplify code and improve dependency management
updated test cases in InstructorFeedbackResultsPageUiTest. java for standard session results to improve test coverage for helper view functionality
updated the ` useEncodedQualifierListOptimization ` method to accept a ` Scan ` parameter to enhance flexibility in handling encoded qualifier list optimization
removed the'public'modifier from several methods in the ApprovalStore and ApprovalControllerService classes to enforce encapsulation by restricting access to
added a flag ` mStartedDownload ` to manage download progress in a delayed manner to ensure that download indicators are stopped when the download is
replaced the method ` getOpenView ` with ` getAnyView ` in ` TaskbarDragLayerController. java ` and added a new method
updated project version from " 1.0. 11 " to " 1.0. 13 " and removed " ( C ) opyright 2000 - 2009 "
replaced ` yield ( ) ` with ` Thread. yield ( ) ` in ` SyncThread. java ` to improve thread yielding consistency and
refactor GsonBuilder to improve code readability to enhance maintainability and facilitate future updates
added null checks for centerGeo before adding it to circleCenters to prevent potential NullPointerExceptions when centerGeo is not initialized
remove ` -- java. espresso. home ` from ` espresso. properties `
refactor CtCodeElement, CtIf, CtVariableWrite, and CtTypeInformation classes to improve code organization and maintainability
changed the deleteSession variable from protected to private and updated related logic to improve encapsulation and ensure proper handling of session timeout
rename InvalidDocumentStoreApiUageException to InvalidDataAccessApiUsageException to improve clarity and consistency in naming conventions
initialized sz variable to zero and modified result assignment logic in SolrIndexSearcher and TestJoin classes to ensure consistent size handling and improve test coverage for
updated the triggerMediaScan method to include a file parameter to enhance media scan functionality by allowing multiple media files to be processed
removed conditional printing of test results based on verbosity to simplify test execution logic by eliminating unnecessary verbosity checks
added multiple custom G - code settings in MainWindow. java to enable custom G - code functionality in the application
added UTF - 8 encoding to the output stream in AdditionalJaxbMappingProducerImpl. java to ensure proper handling of character encoding in output
refactor JsonElement class to improve code readability to enhance maintainability and facilitate future updates
added imports for SolrTestCaseJ4 and resetExceptionIgnores in TestBadConfig. java to ensure proper exception handling during tests
added a method to remove fragments and hide the action bar in GpsMainActivity to improve user experience by ensuring the action bar is properly hidden
added " NEWLINE _ TOKEN " to the list of spanish tokens in TokenizerAnnotatorITest. java to ensure proper formatting of tokens in
replaced ` asByteRange ( ) ` method with a new ` ByteRange ( ) ` method for handling empty ranges to improve handling of empty
updated gcode file paths and modified print statements in VisualizerCanvas. java and GcodeViewParse. java to improve clarity and functionality of
added new versions " 8.4. 0 - cfs " and " 8.4. 0 - nocfs " to TestBackwardsCompatibility. java
updated formatting in Assertions _ sync _ with _ InstanceOfAssertFactories _ Test. java to improve code readability and maintain consistency
added handling for query output stages in StatementResource. java to ensure proper resource management and avoid potential memory leaks
fix broken integrity check due to change in previous commit
removed unused SolrClient dependency from ChaosMonkey. java to streamline code by eliminating unnecessary dependencies
added null check for the file before retrieving the database configuration to prevent potential NullPointerExceptions when accessing the database configuration store
updated the implementation of the ListView in NestedRepositoryTreePanel. java to streamline the code for better readability and maintainability
added a constructor to the ExtensionTypeHeader class that accepts a length as a parameter to ensure that the extension type is within - 128 to 127
pdfbox - 2576 : don't throw ioexception, a suggest by valerybokov
rename pushonshutdown to deleteonshutdown
added handling of trigger errors and improved error logging in ReactiveStateMachineExecutor to enhance error management and provide clearer error reporting during queued events
added a test for handling multiple Python executables based on the first path to ensure that the correct Python interpreter is used when multiple Python executables
added a default button to the root pane of the initial account registration frame to enhance user experience by providing a signin button
added support for a new configuration option TEZ _ DYNAMIC _ SEMIJOIN _ REDUCTION _ FOR _ MAPJOIN to
updated error logging to include the exception as a parameter to improve error reporting by providing more context on the error
moved FieldAccessibilityCallback from org. axonframework. util. reflection to org. axonframework. util. reflection across multiple files to
added a static method ` listableCollector ( ) ` to ` OidcIdTokenClaimCollector ` and created unit tests for it to
removed private Vector2 center from Circle, Ellipse, Polygon, Polyline, and Rectangle classes to streamline the code by eliminating unnecessary
added a null check for the pcollection variable in RegisterAndProcessBundleOperation. java to ensure that the pcollection is valid before proceeding
refactor SslContextFactory to improve code readability to enhance maintainability and facilitate future updates
updated assertions in ConfigurationProperties and ConfigurationPropertiesTest to use default max expectations and max log entries instead of 5000 to improve test reliability by ens
changed return value from " access _ confirmation " to " access _ confirmation _ error " to provide clearer error message for access confirmation failures
added a new class ConsumerClassLoaderFilter to filter consumer class instances to enable flexible class loading based on the current class context classloader
added a boolean parameter ` copyRowHeight ` and ` resetOriginalRowHeight ` to the ` shiftRows ` method to enhance functionality by allowing
replaced setRolloverIcon and setRolloverPressedIcon methods with more descriptive names to improve clarity and maintainability of the code
refactor grid translation handling in TaskViewUtils and TaskViewSimulator to improve code clarity and maintainability by centralizing grid translation logic
refactor Assertions class to improve code readability to enhance maintainability and facilitate future updates
added checks to return currentDateTimeFunction in multiple database - related classes to ensure that the function returns the currentDateTimeFunction consistently across database implementations
added a method ` anonymousPath ` to ` IOUtils ` and created a test class ` TestIOUtils ` to facilitate anonymous path handling
added content description to methods in DigitalWellBeingToast and updated related calls in TaskView to improve task management by incorporating remaining time information
hbase - 2658 wait for the meta availability time to avoid false failure ( # 2657 )
refactor LineNumberTagAggregator and TestDominance classes to improve code readability and maintainability
updated the return statement in GenericItem. java to use StateConverterUtil for default state conversion to improve code clarity and maintainability by utilizing
added a new test method for fetching Post and PostDetails in BidirectionalOneToOneNPlusOneTest. java to improve test coverage and ensure
added functionality to remove an extra screen from the workspace and initialized startSearchPageIndex based on workspaceScreens to ensure that the startSearchPage
updated the initialization of baseDerivedRefs and derivedRefsOther in MarkBasePointersPhase. java and added null check in IndexedValueMap.
updated value formatting in GoogleLineChart and GooglePieChart to use double quotes to ensure proper formatting of values in charts
increase wait time for sendingaccountor. sendbatch ( )
added a ` position ` field and corresponding getter and setter methods in ` WALPrettyPrinter. java ` to enable tracking of the current position
updated NettyTransceiver port from 1 to 0 in TestNettyTransceiverWhenFailsToConnect. java to allow connections to the server
sort the events before generating a report in SimpleReport. java and add a test for event sorting in SimpleReportTest. java to ensure that
added a new test method ` getCsvLine _ DescriptionContainsDoubleQuote _ ReturnsCSVLineWithEscapedQuote ` to the CSVFileLogger to
add chinese srparser and test file to abstractsequenceclassifier. classifystdin and abstractsequenceclassifier. classifystdin
don't try to connect to a remote server if remote server be not available.
removed the @ JniImpl annotation from VM. java to eliminate unnecessary dependencies and improve code clarity
updated the last calculation in Fetcher2. java to use Protocol. CHECK _ BLOCKING instead of " http. plugin. check. rob
added a null check for video HDR format in FFMpegVideo. java and removed multiple print statements in MediaInfoParser. java to
updated package names from " other _ package " to " other _ package2 " in AstTests. java to ensure consistency in referencing the same
modify diameter calculation logic in WorldBorder. java and add integration tests in WorldBorderIntegrationTest. java to improve diameter handling and ensure
hbase - 2906 add getwalgroupsreplicationstatus ( ) method to hmaster to check if the region be online or not
[ web ] remove caller from checkopen ( )
updated data resource mark tests to include instance configurations to enhance test reliability by dynamically generating instance configurations
changed the visibility of the FieldAttributes class from final to public to allow access to the FieldAttributes class from other packages
added a test for handling erroneous Maven projects in ProjectBuilderTest. java to ensure that the project building process correctly handles invalid references and
removed unnecessary null checks for protoHistory in PropertyMap. java to simplify the condition for better readability and maintainability
updated the ` getControllerId ` method to accept a nullable ` configId ` parameter and streamlined its logic to improve the handling of relays
replaced sessionFactory. close ( ) with session. close ( ) to ensure proper resource management and prevent potential memory leaks
removed the condition checking for generate refresh token in OidcConsentApprovalViewResolver. java to simplify the logic by eliminating unnecessary checks
removed the print statement for the executor in Http2SolrClient. java to streamline output by eliminating unnecessary console output
refactor BaggagePropagation to use a singleton pattern for the NoopGetter class to improve code maintainability and reduce dependency on the singleton pattern
[ hotfix ] [ test ] fix typo in conditionalonenabledresourcechain
added a condition to check if the child is greater than zero in BarrowmanCalculator. java to ensure that only valid child elements are processed
replaced the method from ` getFilteredStream ( ) ` to ` getUnfilteredStream ( ) ` in ` JBIG2Filter. java `
updated log messages in FacebookImpl. java for better clarity to improve readability and maintainability of log outputs
updated return statements in ShadowICU and modified test cases in ShadowICUTest to ensure correct behavior of the getBestDateTimePattern method and
removed KeyguardManager dependency from TouchInteractionService to streamline code by eliminating unnecessary dependencies
server : fix npe in case disk offering be null
replaced FileChannel with AsynchronousFileChannel in UtowBodyHandler. java to improve asynchronous file handling capabilities
removed unnecessary whitespace in SigInt. java and SigIntTest. java to improve code readability and maintain consistency in formatting
refactor bounding box resizing methods to use a new method ` prepareBoundingBoxResize ` to improve code readability and maintainability by encapsulating bounding box resizing
changed return value from - 1 to 0 in Asset. java to ensure the method returns a value of 0 instead of 1
refactor compute benchmark function to use a mapping function for efficiency to improve code readability and maintainability by using a more descriptive function name
added a refresh listener to UploadListFragment to notify the adapter when a file is refreshed
fix : use optional path for bibdatabasecontext ( # 2595 )
replaced instances of ` ParticleEmitter ` with direct access to elements in the emitters array to simplify the code and improve performance by eliminating unnecessary
refactor Tomcat engine retrieval to use a loop for child hosts to improve efficiency and maintainability of the code
updated error message formatting in BuildRuleFactoryParams and Console classes to improve clarity and consistency in error reporting
added a check for playback state in PlaybackController. java to prevent further processing when playback state is not PLAYING
replaced the method of retrieving ServiceComponentDesiredStateEntity by using a direct call to findById to simplify the retrieval process and improve code readability
updated the handling of inner class declarations in Java2TypeScriptTranslator and added a new test class InnerClassFieldClash to improve clarity and
added support for follow redirect filter in DockerClientFactory and DockerClientProfile to enhance flexibility in handling redirects based on configuration
replaced direct calls to displayChanged ( ) with awtUnlock ( ) and awtLock ( ) in XToolkit. java to ensure thread safety during
hhh - 10183 - use sqlserver2008dialect instead of db2dialect
added a call to revert ( ) in OPCPackage. java and ensured resource cleanup in ZipHelper. java to ensure proper resource management
changed the visibility of the storeClassFile method from private to public to allow access to the method from other classes
updated assertion in SingletonSortedSetDocValues and added a new test class TestSortedSetDocValues to ensure proper handling of missing values without a check
updated error messages and added a new JavaVM callback handler in CGIHandler. java and CGIClientException. java to improve error reporting and ensure proper
added additional conditions to check for lines ending with " \ n \ 033 [ m " to ensure proper handling of line ending with " \
replaced List with Set in multiple fetch source files methods to improve performance and maintainability of the code
added a check for non - empty vertices in OGLESShaderRenderer to prevent rendering when no vertex is available
updated test methods and added verification error handling in IncorectBindingPuzzleFixedTest and IncorectBindingPuzzleFixedTest
replaced ` FileUtil. createData ( root, menuPath ). delete ( ) ` with ` FileUtil. createFolder ( root, menuPath
remove unused import of node in type system.
refactor JsonObject class to improve code readability to enhance maintainability and facilitate future updates
added checks for maximum idle time in SelectChannelEndPoint and HttpConnection classes to improve resource management and prevent potential issues with idle timestamps
fix farmlandblock. cansustainplant ( ) return false.
added test cases for the SALTEDTABLE functionality in QueryDatabaseMetaDataIT and ConnectionQueryServicesImpl to ensure correct retrieval of primary keys and
added Locale. US to SimpleDateFormat initialization in HttpCookie. java and created a new test class B6791927. java to ensure
removed multiple closing statements for the database object to ensure proper resource management and prevent potential memory leaks
increase poll timeout from 1 second to 5 seconds in BatchMessageListenerContainerIntegrationTests to improve test reliability by allowing more time for processing
make economyallocationstage constructor accept option for tracera
added save - database functionality in SourceTab and CodeAreaKeyBindings to enhance user experience by allowing saving changes to the code area
added line separator configuration to ObjectMapper initialization to ensure consistent line separator handling across different environments
change windows path'\'into'/'in nativeenvironmentrepository. rename ( )
replaced instances of ` Application ` with a single instance of ` Application ` in multiple test files to streamline the setup process and improve resource management
[ java ] remove dead code from recordinglog. validateexistinglog ( )
replaced GroupName with ErrorGroupName in ITSystemTest. java to improve clarity and maintainability of the code
removed sleep logic and printed memory used in TestFuzzOptimizations. java to streamline test execution and improve debugging clarity
added a private boolean variable ` reverseImage ` and removed its usage from shared preferences to streamline the process of retrieving the reverse image based on
updated conditional checks to check for " META - INF / " instead of " META - INF / INDEX. LIST " to improve clarity and correctness
[ ds - 2315 ] fix npe when there be no element in the field name.
updated test imports and annotations in AuthenticationSuccessListenerTests. java to improve test structure and ensure compatibility with JUnit 5 features
replaced the use of New. arrayList ( ) with a new ArrayList ( COUNT ) for TYPES to improve performance and maintainability of the code
refactor TypeUtil class to improve code readability to enhance maintainability and facilitate future updates
updated trigger time formatting in AbstractAlertNotifyHandler to use LocalDateTime with specified time zone to ensure accurate time representation by using the default time zone for
added a method ` maybeCreateAbstractMethodErrorThrower ` to the ` MethodHandleResolver ` class to improve error handling by creating a concrete abstract method
camel - 7999 : camel - core - optimize the body of agnl expression for good performance.
added a check for empty to explore in AbstractParser. java to ensure that the code does not return an empty TargetGraph instance
added IOHelper import and call copy method in JcloudsPayloadConverter to ensure proper handling of input stream operations
removed the @ Ignore annotation from CamelConsulTest. java to skip the test due to an OSGi bundle not released yet
updated the condition in Check. java and added a new test class CheckACC _ STRICTFlagOnDefaultMethodTest. java to
[ java ] set aeron. context. drivertimeoutms to 2 second in channelvalidationtest.
added a new file ` FileExtensions. java ` with various CLANG _ SOURCES, CPP _ HEADERS, and HPP _ HEADER
replaced ThreadLocalDateFormat with a static final static instance of FORMAT _ THREAD _ LOCAL to improve thread safety and maintainability of the DateFormat class
removed deprecated options " FastTLABRefill ", " DeferPollingPageLoopCount ", " SafepointSpinBeforeYield
added display name to client properties and disabled tests for CI environment to improve clarity and control over client customization settings
replaced RuntimeException with EarlyTerminationException in multiple operator classes to improve error handling by catching early termination exceptions
[ hotfix ] [ runtime ] fix typo in tracefunctionAroundwrapper
replaced direct calls to ` getResponse ` with a new method ` consumeResponse ` in ` HttpBindServlet ` and ` HttpConnection ` classes to
add null check for the parent before creating a new CapabilityDispatcher to prevent potential NullPointerExceptions when parent is null
wallettool : don't swallow keycrypterror exception
added @ Deprecated annotation to AsyncCompletionService and SubmitOrderedCompletionService classes to indicate that these components are outdated and should not be used in future
updated the length calculation in HyphenationTree. java to ensure the correct value is returned based on the current length
added a sleep delay of 200 milliseconds in IQRegisterHandler. java to improve responsiveness during event processing
reorganized the code structure in Resources. java to improve readability and maintainability of the code
updated the description of PARAMETER _ NEEDS _ TO _ BE _ NAMED to clarify the purpose of PARAMETER _ NEEDS _ TO _ BE
added a boolean flag ` providersChanged ` to the ` ConfigurationManager ` class to ensure that providers are only updated when necessary
added a method to quote identifier tokens in SemanticAnalyzer to ensure proper handling of identifiers in the query
pdfbox - 4071 : ignore'name'entry for postscript name in font
updated type casting for AnalysisSPILoader in SolrResourceLoader. java to improve type safety and suppress unchecked warnings
refactor condition in Window. java for better readability to improve clarity and maintainability of the code
added a null check for appManifest before retrieving target SDK version to avoid potential NullPointerExceptions when appManifest is not initialized
refactor ConfigurationMetadataGenerator and CasMetadataCatalog to use ObjectMapper for serialization and deserialization to improve code readability and maintainability by centralizing configuration management
added userName property and related getter / setter methods to Driver and SemanticAnalyzerHookContext classes to enable flexible configuration of user name in the driver
added setter methods for XSLT transformations in XsltBuilder and XsltComponent classes to enhance flexibility in configuring XSLT transformations and improve code maintainability
added HadoopShim support to ContainerRunnerImpl, TaskRunnerCallable, and TaskExecutorTestHelpers to enhance Hadoop functionality by integrating Hadoop shim
updated expectedFileSize calculation in ShadowAssetManagerTest, ShadowContentObserverTest, and ShadowDownloadManagerTest to ensure correct file size is used for
added null check for request mapping data context before logging access to prevent potential NullPointerExceptions when context is not available
( chore ) camel - throughput logger : improve log message
updated VM option checks to use ` Platform. isDebugBuild ( ) ` instead of ` System. getProperty ( " java. vm. version "
updated MeterStatisticsManager to use a new data structure for storing MeterDetailStatisticsModel to improve memory efficiency and maintainability of the MeterStatisticsManager
updated logback configuration handling in FrameworkLauncherExtended. java to ensure consistent logging behavior based on system properties
added @ NotNull annotations to several methods and classes to enforce non - nullability constraints to improve code safety and prevent potential NullPointerExceptions
updated Escaper references from BASH _ ESCAPER to SHELL _ ESCAPER across multiple files to ensure proper handling
refactor tests to use try - with - resources for GenericContainer to ensure proper resource management and avoid potential resource leaks
updated the test class name from " TestLucene50FieldInfoFormat " to " TestLucene60FieldInfoFormat " to reflect the
updated formatting in RelativeDateFormatTests. java to improve code readability and maintainability
added a new method ` generateShieldAddress ` to ` RpcApiService ` for generating shield addresses to enable handling of shield addresses
replaced byte [ ] with String for reading console input in JansiWinSysTerminal and JnaWinSysTerminal to improve code readability and
updated regex patterns in TestStabilityRule. java for presubmit and postsubmit conditions to improve accuracy of input validation for pre and post submit
updated DefaultSolrHighlighter to include a check for multi - valued fields and added a new test for preserveMulti functionality to enhance highlighting capabilities and
modified the ` tryToLogin ` method to accept a ` Uri ` and a ` username ` and a ` password ` parameter to enhance flexibility
updated handling of entity types in ` HandlerSceneEntityDrownReq ` and ` HandlerSceneEntityDrownRsp ` to improve entity management and
( chore ) camel - jms : fix checkstyle issue
removed the wrapping of collection in the update method to simplify the parameter handling logic
added logging for illegal currency exceptions in BTCEAdapters. java to improve error handling and provide better insights into currency issues
updated subscription name retrieval logic in DurableConduitBridge. java to improve clarity and correctness of subscription management
pdfbox - 2576 : increase the tolererance of the average character and spacing
updated startController methods to accept a boolean parameter for tenant isolation to enhance flexibility in managing tenant isolation settings
replaced ImmutableMap. builder ( ) with Map. class. cast ( response. getValue ( ) ) in HasSettings. java to simplify the code
added a condition to check if the size of the'attrs'is greater than 4096 to ensure that the size of the'attrs'is
added abstract methods to AbstractIjProjectConfig and updated IjProjectBuckConfig to use IjProjectConfig instead of BuckConfig to
updated the string " Experimenal " to " Experimental " in HiveSessionProperties. java to clarify the purpose of the optimization message
added unit tests for GrantedAuthorityEffectiveAclsResolver to ensure correct handling of user details during authority resolution
updated method to use the resolved JavaLangObject instead of ReflectionClassDeclaration to ensure compatibility with the current Java language specification
added logic to limit the number of buttons supported in XlibWrapper to prevent exceeding the maximum number of buttons supported
updated import statement from ` jdk. testlibrary. Asserts. assertEquals ` to ` com. oracle. java. testlibrary. Asserts
refactor MessagePack and MessagePackFactory classes to improve code organization and facilitate better message packing
added new tag keys for IS _ DESERT and IS _ CAVE in Tags. java and updated ForgeBiomeTagsProvider. java
renamed the ` present ` method to ` draw ` across multiple screen classes to improve clarity and consistency in method naming
added conditional checks for horizontal orientation in ComponentGroup. java to ensure proper UI updates based on the horizontal state of the component
corrected the variable name from ` DOI _ URL _ PATTERN ` to ` matcher ` to improve code readability and maintain consistency in naming conventions
replaced ` touchHandler instanceof AndroidMultiTouchHandler ` with ` hasMultitouch ` in ` AndroidInput. java ` and ` AndroidLock
[ java ] close commit position counter in cluster service agent.
add new ` UserSite ` and ` RecordIdClass ` classes for managing user site records to establish a structured way to associate users with their
added handling for MalformedURLException in HttpConverterRegistrar to improve error handling for invalid port configurations
cloudstack - 7091 : fix bug in listcapacity api response
updated file length calculation in NRTCachingDirectory. java to improve accuracy of file length handling
replaced ` beginCompile ( ) ` with ` generateClass ( ) ` and updated imports in ` JavascriptCompiler. java ` to improve code clarity
added synchronization to the store method in UISettings class to ensure thread safety during object storage operations
added a condition to return early if native input support and focus is enabled to improve performance by avoiding unnecessary processing when native input is not available
spannerio : add more informative error message when an emulator rejects a concurrent transaction
fix build failure in janino
updated array type check from double [ ] to short [ ] and added a new class CloneArray with serialization tests to ensure correct cloning behavior for
changed nonce retrieval from ` getClaim ` to ` getStringClaim ` for clarity to improve readability and maintainability of nonce handling logic
added handling for relationship fields in DCInputSet. java to ensure correct processing of field relationships
added server logging functionality to the capabilities table and updated related methods to improve user experience by allowing users to log into the capabilities table
refactor conditional structure in DrawerActivity. java to improve readability and maintainability of the code
added an import statement for JUnit's assumption in SolrRequestParserTest. java to ensure that the test only fails if there is a network
added a check for empty missing symbols in the MissingSymbolsHandler to prevent processing when no symbols are present
added new data entries 5 - 4 to StringHelperTest. java to improve test coverage for data data generation
added warning log for empty data provider returning an empty array or iterator to improve debugging capabilities by logging warnings when data provider returns an empty array or
replaced return values from Collections. EMPTY _ LIST and Collections. EMPTY _ SET with Collections. emptyList ( ) across multiple files to standardize return
update freeplane version to 1.9. 8
change the parameter of setRestitution from mass to restitution to ensure the correct restitution is applied for physics objects
added a new file AutoFtpActivity. java to test FTP functionality to facilitate testing of FTP interactions in the application
refactor token handling in BaseSemanticAnalyzer to improve clarity to enhance readability and maintainability of the code
added methods to retrieve imageX and imageY in ImageViewer, OnOffSwitch, Component, GenericSpinner, and UIBuilder classes to improve component
added a new class ` RemoteExecutionEnabled ` and corresponding test cases in ` BuildableSerializerTest ` to enable and disable remote execution exceptions during
pdfbox - 4071 : fix typo find by codespell on fossies. org
updated import statements to use InputStreamReader with UTF - 8 encoding to ensure proper handling of character encoding in file operations
added assertWorkingScoreFromScratch method to AbstractScoreDirector to ensure shadow variables are not stale during execution
updated SEMIJOIN _ CONVERSION configuration from " hive. enable. semijoin. conversion " to " hive. optimize. semijoin
added logging statements to ignore message content as it is not an io. netty. buffer. ByteBuf instance to improve debugging capabilities by providing insights
updated method names and error handling in SynchronizeFolderOperation and FileDisplayActivity to improve code clarity and provide user feedback when the current folder is
added assertions to check the presence and retrieval of transaction hash in PollingTransactionReceiptProcessorTest. java to ensure that the transaction hash is correctly
added a deprecated method ` testDeleteTimeseries ` to ` ISchemaRegion ` and updated the expected value in ` SchemaRegionBasicTest ` to
added a null check for sampleMimeType in MediaCodecRenderer to ensure proper error handling when invalid sampleMimeType is provided
replaced ` notify ( ) ` with ` notifyAll ( ) ` in ` QueryExecutorImpl ` and ` AbstractJdbc23PoolingDataSource ` classes to
updated the @ AllArgsConstructor annotation to include an onConstructor _ parameter to ensure proper handling of JSON creation in the constructor
added a check to throw a SQLFeatureNotSupportedException for creating an index on a view to inform users that creating an index on a view is not
added a new ` Website ` class and corresponding test cases in ` PopulatorImplTest ` to implement and verify the functionality of the ` Website
added a setup method to set the default locale in BSFormatterTest to ensure consistent test environment for different locales
don't crash fml when there be a lot of derp file.
updated the assertion in MultiPartParsingTest to use Matchers for better readability to improve test reliability by leveraging Hamcrest matchers for
added checks for single and non - single parameters in SimpleExprGenerator to ensure proper handling of single and non - single parameters in the query
added a volatile boolean flag ` createdVertx ` and modified the conditional check to ensure that the Vertx component is only created when it is
updated the writeAttributes method to use a local variable for node attributes to improve code readability and maintainability by using instance variables
updated logging statements in SynchronizeFolderOperation. java and added null checks in FileDisplayActivity. java to improve logging clarity and handle potential null
added a new boolean field ` ignoredReadStatus ` to multiple REST classes to indicate whether an entry should be returned regardless of its read status
updated resource resolution in TestAnnotationConfiguration and WebAppContextTest to use MavenPaths instead of MavenTestingUtils to improve code maintainability and ensure correct
added validation logic for URI and MetaData registrations to ensure that only valid data is processed
updated the condition to check if playback is paused in GwtMusic. java to ensure that playback does not occur when paused
added PERMISSION _ ADMIN _ SUDO _ AREA permission to the hasPermission method in MainCommand. java and updated Captions. java to include
refactor query option handling by introducing a new method ` updateQueryOptions ` to improve code readability and maintainability by encapsulating query options in
updated file name comparison logic to use ` getFileName ( ). toString ( ) ` instead of ` toUri ( ). getPath ( ) ` to
added a new test for detecting pure emoji in the attribute set to ensure that the correct representation of emoji in the test cases
changed native method name from " NMTWaitForDataMerge " to " NMTMallocWithPseudoStack " and updated its implementation to
[ flink - 30613 ] [ serializer ] migrate EitherSerializerSnapshot to JavaEitherSerializerSnapshot and introduce a new JavaEither
updated DEFAULT _ NDOTS and DEFAULT _ ROTATE _ SERVERS to use a new method for parsing rotation options to improve flexibility in
added a call to the superclass'__ associate'method in ` RequestRockerTemplate ` and a corresponding test in ` RequestRockerTemplate
pdfbox - 4071 : fix npe in nonterminal field
updated URLs from " liquibase / parser / core / xml / dbchangelog - ext. xsd " to " www. liquibase.
move commonmimetypelocator to test package
updated the default value of RepositoryVersionState from INIT to NOT _ REQUIRED in multiple classes to ensure that the state is not REQUIRED during the upgrade
updated the CompareControl to include additional schema comparison options to enhance comparison accuracy for better data organization
updated import statement from JUnit to TestNG in TestBackwardAnoamlyFunctionUtils. java to leverage TestNG's testing annotations for improved test
added a new test class ProgressiveJPEGTest for rendering progressive JPEG files to facilitate testing of progressive JPEG functionality in the
updated MaterialLoader to set properties for AlphaDiscardThreshold, ambient, emissive, and texName to ensure proper handling of alpha
improve error message for unsupported target architecture in ccompilerinvoker
added a null and empty check before setting the size of the label to avoid potential NullPointerExceptions when text is empty
updated the calculation of readVarInt ( ) to include a maximum of 1 000 000 to ensure proper handling of larger data values
changed class modifiers from public to final for PushUtils, ThumbnailsCacheManager, and PushUtils classes to enforce immutability of these classes and
updated the calculation of the length in RocketPanel. java to use curConfig's getLength method instead of bounds checking to improve code clarity
removed unnecessary casting of dir to enable virus scanner in TestDirectoryReaderReopen. java to streamline code by eliminating unnecessary casting
updated the regex pattern in the componentPresetDao load method to allow for more flexible matching of presets
added a condition to announce for accessibility only when in the app to ensure proper handling of accessibility notifications based on the current Android version
replaced the call to ` Args. getInstance ( ). getMyKey ( ) ` with ` RefreshTask ` in ` NodeManager. java `
pmd : add ant task to target jdk 1.5
test : migrate quotaresponsebuilderimpl to mockito
added error handling to System. out and System. err in TestSchemaToolCatalogOps. java to improve error reporting during schema compilation
added DFSClient as a final field and modified related methods in FanOutOneBlockAsyncDFSOutputSaslHelper. java to enhance security
updated MongoQueryMethod to use RepositoryMetadata instead of EntityInformationCreator to enhance query functionality by incorporating repository metadata
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 469
updated import statements and removed unused constants in MetaDataEndpointImpl. java to streamline code and improve readability by eliminating redundancy
increased ALLOWED _ REPEATED _ DEADLOCKS from 5 to 10 and added a deadlock retry interval in TxnHandler. java to
updated X - axis settings in BarChartActivity, LineChartActivity1, YAxisRenderer, YAxisRenderer2, and LineChartActivity
added methods to check and validate printable character names in FsUtils. java to improve character validation and support for different operating systems
rename ` in ` to ` using ` and update related method names to improve clarity and consistency in naming conventions
add process plugin configuration to project building request
change return value from ` getAndSet ( ) ` to ` getAndSet ( ) ` in ` and ` out ` counter in ` and `
updated resource path handling in ITSystemTest. java to ensure the correct resource path is used for testing purposes
updated return values in ModeledConnectionRecord and ActiveConnectionRecord, and added getRemoteHost method in AuthenticatedUser to improve error handling and provide
added admin button to the request in CommunityListServlet to enable users to access the Community list within the application
replaced the initialization of ` longCompactions ` and ` shortCompactions ` with an ` AtomicInteger ` threadCounter ` to improve thread management and
replaced ` getApplication ( ). getPackageName ( ) ` with ` resources. getResourcePackageName ( ) ` in ` WallpaperChooser. java ` to
replaced direct calls to ` getPlayersInPlot ( ) ` with a new method ` getPlayersInPlotVisible ( ) ` to improve clarity
updated AndroidManifest, ResName, ShadowMediaPlayer, and ShadowActivity files to improve code organization and maintainability
updated MlibOpsTest. java file to improve test coverage and maintainability
updated the handling of " com. sun. management. internal. OperatingSystemImpl " in JNIRegistrationManagementExt. java to ensure proper management
updated referencedContainer attribute assignment in SchemeGenerator and added a new test for buildable references in SchemeGeneratorTest to ensure correct reference handling and validate
removed encryption key and IV from UploadFileOperation. java to simplify code by eliminating unnecessary null checks
added @ Stability annotation to WorkProfileTest. java to address compatibility issues during testing
removed conditional check for bucketing version in TezCompiler. java to ensure proper handling of bucketing versions during the compilation process
replaced ` setCursorPosition ( x, y ) ` with ` input. setCursorPosition ( x, y ) ` to ensure the cursor is positioned
refactor LockFreeBucket to use an abstract class for contended time meter and introduce new classes LockFreeBucket _ FinalFields _ CacheLinePadding
added a method to print thread pool statistics in NodeProbe. java to enhance monitoring capabilities for concurrent operations
updated the method to retrieve the maximum bitrate from user preferences instead of calling Utils. getMaxBitrate ( ) directly to ensure bitrate is accurately
added methods to handle trace and span IDs with an interceptor in ZipkinHttpSpanExtractor to improve traceability and ensure only valid span identifiers are
refactor userPaymentAccounts and CreateOfferDataModel to use abstract methods for better encapsulation to improve code maintainability and readability by centralizing user payment account
refactor FlutterCompletionContributor to directly invoke the method withTypeIconRightAligned instead of reflection to improve code readability and maintainability by reducing
added a method to set the project in the LauncherUtils class to ensure the project is set before running the tests
added ProjectFilesystem parameter to JsBundle and JsBundleBuilder, JsBundleWorkerJobArgsTest, JsLibraryBuilder, JsScenarioTest, Js
refactor multiple Java classes for consistency and clarity to improve maintainability and readability of the codebase
refactor MetricsDSLContext class to improve code readability to enhance maintainability and facilitate future updates
removed the VersionConfig interface and refactored entries handling in VersionBuckConfig. java to improve code clarity and maintainability by using ImmutableSet for
added a try - catch block to handle TypeNotPresentException during shadow class binding to improve robustness by preventing application crashes due to type not
changed the visibility of the validateTypes method from static to public to allow access to the method from other classes
chore ( deps ) : upgrade gapic - generator - java to 2.8. 0 and update gax - java to 2.18.
added SLF4J Logger to SimulationStatus. java to facilitate logging of simulation status interactions
updated the VERSION _ POSITION _ Y value from 138 to 150 and the VERSION _ FONT value from 14 to 14 to improve the appearance of the
added a call to ` notifications. add ( ) ` in ` UserInterfaceComponentImpl. java ` to ensure notifications are added on the correct
updated the mock setup in ReturnsElementsOf. java to improve clarity and maintainability of the code
updated error message from " Drop partitions for a non - string partition column is not allowed using equality " to " Drop partitions for a non -
added a test method for LineFileDocs in BaseStoredFieldsFormatTestCase. java to ensure proper handling of line file documents during testing
added a method to retrieve the version code in MainApp and refactored FeatureList and WhatsNewActivity to use this method to improve code
camel - spring - boot - add support for bean explicit method with different parameter type.
replace ` getContentDispositionFilename ( ) ` with ` getSubmittedFileName ( ) ` in ` MultiPartInputStreamParser. MultiPart ` to ensure
added buffer ownership management to IndexBufferObject and VertexBufferObjectWithVAO classes to ensure proper resource management and prevent memory leaks
added a transition for the " forgotPassword " action in the PasswordManagementWebflowConfigurer to ensure that password resets are handled correctly in the login
refactor JerseyClientConfiguration to improve code readability to enhance maintainability and facilitate future updates
int - 1661, int - 1662, int - 1663, int - 1663, int - 1663, int - 16
replaced instances of ` s ` with ` o ` in ` InstanceOfPatternMatchTest. java ` and updated return values in ` TypeUtils
added methods to handle empty array cases in StringDict and Table classes to improve robustness by ensuring proper handling of empty strings
added deprecated annotations to the GenericContainer class and implemented AutoCloseable interface to improve code clarity and ensure proper resource management during container creation
changed logging level from info to error in MediaInfo. java and updated RendererConfigurationTest. java to throw ConfigurationException instead of ConfigurationException to
added schemapattern option to BundledDriverDatabaseConnector and PropertiesDataSourceDatabaseConnector to enhance configuration options for database connector configurations
added import for TlsUtils and modified return logic in ProvSSLSessionImpl. java to ensure proper handling of null tlsSession instances
updated calculations for width and height in AndroidGraphics. java to ensure that dimensions do not exceed defined limits
refactor Base64 class to improve code structure to enhance maintainability and readability of the codebase
sulong : add assumption for single - context assumption.
danielwagnerhall : ignore test that fail on iphone.
updated FlowBuilder and FlowJobBuilderTests files to improve code clarity and maintainability
changed the type of ` resName ` and ` resId ` from ` ResName ` to ` int resId ` and updated related methods accordingly to
refactor Docker context handling by introducing an Optional for TLS file resolution to improve code clarity and maintainability by centralizing TLS file resolution logic
use @ setup instead of @ after in simplereactiveelasticsearchrepositorytests
refactor type handling in mmm Attr. java and add a new class T6450290. java with generic types to improve type safety and
added support for logging level configuration in LoggingFlags and LoggingOptions to enable flexible logging behavior based on configuration settings
added logging statements to delete items from the database and updated import statements in ModelWriter. java to improve debugging capabilities and facilitate logging of
added methods to allFilesOption ( ) in FileActivity, FileDisplayActivity, and PreviewImageActivity to enable users to selectively re -
added deprecated method ` forEachOperation ` and ` hasMatching ` to the ` MutationOperationGroup ` class to improve code maintainability and deprecate
updated the calculation of numPredictiveAppCols based on device type to ensure correct number of app columns based on device type
added UTF - 8 character encoding to the content assignment to ensure proper handling of character encoding in the content
added new RequestMatchers class and corresponding test cases in RequestMatchersTests to improve request matching functionality and ensure correctness through unit testing
ggb - 196 don't remove ` ` invalid'' button in applet
adjusted height and width calculations for the ProgressBar to ensure correct positioning of the ProgressBar based on its dimensions
updated the file path for external functions in PrestoSparkNativeQueryRunnerUtils. java to ensure the correct resource is used for function definitions
updated ` extra _ L0 `, ` extra _ L1 `, ` extra _ L2 `, and ` extra _ L4
added a condition to check if the state handler is invalidated to ensure proper handling of gesture state when the state handler is invalidated
updated layout constraints in CellLayout and Workspace classes to improve layout handling for landscape and portrait orientations
added a condition to check if the host is " / robots. txt " instead of " / robots. txt " to ensure proper
added a static resource for the warning icon in JBrowseModule. java and removed it from CallHierarchyTopComponent. java to streamline the
updated button subscriptions from " continue " and " close " to " createWorld " and " return " respectively to improve clarity and functionality of button
updated null check in UDFOPDivide and added unit tests in TestUDFOPDivide to ensure proper handling of null values
updated exception handling in AbstractJob and FlowJob classes to improve clarity and maintain consistency in exception handling
sec - 1171 : added support for ` ` requiresauthenticationrequestmatcher'' property in logout and formauthenticationparser.
unbind the upload service connection in ShareActivity and ContributionsActivity to ensure proper cleanup of the upload service when the activity is destroyed
updated tag retrieval from ` thumbNail ` to ` thumbnail ` in ` WallpaperPickerActivity. java ` to ensure the correct thumbnail is
refactor multiple command handler and output format classes for consistency to improve maintainability and readability of the codebase
added a method to set the request timeout in RaftServerConfigKeys to ensure proper request timeout configuration for the Raft server
updated logging level from error to debug and added a new tsFileResource in TsFileResourceManager. java to improve logging clarity and ensure
updated the setModelSource method to set system properties to ensure system properties are preserved during model source initialization
added READINESS _ CHECK _ OK _ CALLS and READINESS _ CHECK _ BAD _ CALLS to multiple classes and updated related
added a custom model handler for the animated torch Block in BlockAnimatedTorch. java to enable the use of the animated torch model in the
added null check before closing the writer to prevent potential NullPointerExceptions
added a method to retrieve a Hive configuration from a specified directory and updated references to use this method to improve code organization and maintainability by central
added a link to indicate " Muting Users " in the FeaturesActivity to provide users with relevant data related to users
added initialization for jdk. reflect. useDirectMethodHandle in System. java to ensure proper handling of method handles in the system
hbase - 2657 splitonleadingvarcharcolumnspolicy should use steppingsplitpolicy instead of constantsizeregionsplitpolicy
[ hotfix ] [ yarn ] fix checkstyle violation in yarnclusterdescriptor
updated method calls in BuildTranscriptHMM and TrainerDictionary to use getWord ( ). getSpelling ( ) instead of getPron
updated JSON string format from " dingo " to " dingo " in JsonUtilsTest. java to ensure consistency in JSON representation
added intent extra data for tweet ID in TimeLineCursorAdapter, TimelineArrayAdapter, and Compose classes to enhance data handling by associating
added a warning log for when the message listener is terminating due to underlying ring buffer data loss to improve debugging and visibility into the topic's
replace IOException with NoClassesFoundToAnalyzeException in FindBugs2. java and add NoClassesFoundToAnalyzeException class in
changed import from Key to PublicKey in KeyFetcher. java to ensure compatibility with the latest security features
changed the ` isIncompatible ` variable from ` false ` to ` true ` in ` DLNAResource. java ` to ensure compatibility status is
updated the method signature of createAccount to use AccountCreateContract instead of Account to improve clarity and functionality of account creation process
pdfbox - 4892 : avoid npe if there be no range
http : / / issues. apache. org / activemq / browse / amq - 2576 - fixed test failure
updated default star tree format version from " ON _ HEAP " to " OFF _ HEAP " across multiple files to ensure compatibility with the
modify content title handling to ensure the title does not exceed a maximum of 2048 characters to prevent truncation of content that exceeds the length of the
refactor JColorChooser to use ColorChooserComponentFactory for retrieving the preview panel to improve code clarity and maintainability by using a dedicated method for
changed log level from info to debug for checking model extensions to reduce log verbosity and reduce noise in logs
added a null check for the reusable bitmap before initializing bitmap options to prevent potential NullPointerExceptions when the bitmap is not initialized
added a method ` getLayoutParams ( ) ` to the ` FakeView ` class to provide access to the ` LayoutParams ` object
added a check to ensure a Cursor is already closed in DefaultCursor. java and implemented a test for it in CursorSimpleTest. java to
pdfbox - 4071 : fix regression in pdfbox - 4071
added JUnit @ Ignore annotation to JMSClientTest. java to temporarily skip the test due to known issues
added a private field ` ts ` with getter and setter methods in ` Message. java ` to store and manage the timestamp associated with the message
added new ExceptionMapperUtils and updated GenericExceptionMapper to log exceptions while processing requests to improve error handling and logging capabilities during HTTP requests
changed the class declaration of AbstractExecutor from package - private to public to allow access to AbstractExecutor from other packages
added a static method to remove legacy parameters and updated related logic in RouteResource and IsochroneResource to improve code readability and maintainability
updated import statements and class declarations from public to package - private for several test classes to improve accessibility and organization of test classes
refactor CSRF setting into a separate method ` setCSRF ` to improve code readability and maintainability by encapsulating CSRF logic
added bootstrap checks for shadow class loading in EclipseLoaderPatcherTransplants. java to ensure shadow class loading is only applied when the bootstrap
[ drools - 7 ] add support for numeric disabled rule in xlsb file
changed log level from info to debug for default value usage in HiveConf to reduce log verbosity and reduce noise in logs
added null checks for axes and buttons in Lwjgl3Controller. java and refactored controller management in Lwjgl3ControllerManager
updated ObjectFactory import from ` cucumber. api. java ` to ` io. cucumber. core. backend. ObjectFactory ` in ` WeldFactory
refactor port forward saving logic in PortForwardListActivity to improve code readability and maintainability
added methods to toggle between snapshot data and default snapshot data in GlobalConfiguration to improve clarity and usability of snapshot data configuration
refactor SyncedFolderObserver to log events and improve file handling to enhance debugging capabilities and maintainability of the code
updated the LocationMarshaller class to improve data handling to enhance performance and maintainability of location management
refactor touch event handling logic in StatusBarTouchController and related classes to improve clarity and maintainability of touch interactions
renamed ` VectorReader ` to ` VectorReaderImpl ` and removed the ` ColumnVectorBatch ` interface from ` LlapInputFormat ` and `
replaced ArgumentMatchers with Matchers in multiple test files to improve test reliability by using Matchers instead of ArgumentMatchers
updated methods to use ` getRelativePath ( ) ` instead of ` getRelativePathName ( ) ` and ` getRelativePathSupplier ( ) ` to
updated the transform method to accept RecordReaderFileConfig as a parameter to enhance flexibility by allowing customizable RecordReader configurations
added a null check for the extractor in ControllerMethodInvoker. java and changed the annotation to @ WithArgumentExtractor in Params. java to ensure
cloudstack - 7091 : add api to list secondary storage by account and domain
fix potion shift event not work properly.
removed the deprecated key ` COLD _ READS _ TO _ OMIT _ KEY ` in ` SizeTieredCompactionStrategyOptions ` to
added a call to ` leech. stop ( ) ` in ` ClientTest. java ` to ensure proper resource management and prevent memory leaks
[ issue # 3598 ] fix pop message label for retry message ( # 3597 )
refactor KeyboardAddonSettingsFragment to improve code readability to enhance maintainability and facilitate future updates
added JUnit @ Ignore annotation to ShadowDateUtilsTest to temporarily skip tests that are not ready for a moment
rename ` EventLoopGroupMongoClientSettingsBuilderCustomizer ` to ` NettyDriverMongoClientSettingsBuilderCustomizer ` and update related references to improve clarity
added setUpgradeRequest method to UpgradeConnection and created a test for upgrade requests in ClientConnectTest to enable proper handling of upgrade requests in the
added timeout functionality to the AndroidImplementation class to enable configurable timeout duration for connection management
refactor getUserAccessPermissions and getTeamAccessPermissions methods to return a list of RegistrantAccessPermission based on user and team permissions to improve
added a new test method ` testQuotedCastExpression ` to ` SelectTest. java ` to ensure that the SQL parser correctly handles quoted cast
updated assertions in Misc. java to conditionally check for non - root directories to improve test reliability for non - root operating systems
added logging and thread per group configuration in FixedThreadExecutor. java to improve monitoring and monitoring of executor configurations
added null checks for field in AbstractChangeGenerator. java to prevent potential NullPointerExceptions when field is null
updated CasEventListener and related classes to use InitializingBean instead of CasEventListener to ensure compatibility with Spring's event handling framework
refactor animation end handling by introducing a private method ` endAnimation ( ) ` to improve code readability and maintainability by encapsulating animation end
added an ` close ` method to the ` DeflaterOutputStream ` class to ensure proper resource management and prevent resource leaks
added a new file gsp001. java that implements JVMTI's ` getSystemSystemProperty ` method to facilitate testing of system
refactor BeanDefinitionInjectProcessor to use annotation and concrete class metadata instead of annotation to improve clarity and maintainability of the code
added methods to read and write cam control data in CameraNode, LightNode, and CameraControl classes to enable proper management of cam control data
updated PopupMessageHandlerSwingImpl and PopupNotificationPanel to improve popup window handling to enhance user experience by ensuring proper disposal of the popup
rename ` infer'' to ` inference''
added a getter method to the FeatureField class to provide access to the feature value
changed the parameter type from ` int ` to ` long ` in the ` after ` method to allow for more precise time representation
added ` OnBuild ` and ` ExecutionDriver ` fields with their respective getter and setter methods in ` ContainerConfig ` and ` Info ` classes
added conditional logic for setting icons based on whether the target is rtl to ensure icons are only set when the target is notRTL
added enablePositionIncrements configuration to StopFilterFactory to enable position increments based on configuration
added an InternetAddress object to EmailsTest and SystemErrorEmailReportTest to enable users to access the TEAMMATES Admin email
added a new boolean variable ` mTryShareAgain ` to ` FileActivity. java ` to ensure shared resources are properly managed during file operations
added support for TTY _ COMMAND configuration in JansiNativePty. java to enhance compatibility with TTY and improve command execution
added memory size handling for transaction estimation in BandwidthProcessor. java to optimize memory usage based on dynamic properties
replaced direct assertions with Awaitility's await mechanism in Issue410Tests. java to improve test reliability by ensuring trace ID
removed multiple URL constants from EaseeBindingConstants. java to streamline the codebase by eliminating redundancy
[ beam - 8470 ] increase read timeout in kafkio integration test
replaced ` Matchers. anyOf ( ) ` with ` is ( itemName ) ` in ` SearchResultMatcher. java ` to improve clarity and accuracy
updated OkHttp. java to include trust manager for SSL connections to enhance security by enforcing trusted certificates during SSL operations
refactor button long click handling in NavbarButtonsViewController and update assistant button handling in TaskbarNavButtonController to improve code clarity and
added a new file ` HyperlinkFormula. java ` and modified byte and int types in ` StringPtg. java ` and ` String
added nullability annotations to stdout and stderr variables in ShellStep. java to ensure proper handling of null values and prevent potential NullPointerExceptions
increased TIMEOUT _ MILLIS from 1000ms to 2000ms in AsyncAppenderTest. java to allow more time for tests to complete
refactor escapeDatabaseObject method to accept objectName as a parameter to enhance flexibility in escaping database objects
added a boolean flag ` inputChanged ` to handle input validation in ` MaterialRenameDialog. java ` to ensure that only valid input fields are
added a test for state changes in ShadowDisplayTest and implemented a setState method in ShadowDisplay to ensure state changes are correctly applied to different display
added a new interface ` DirectInvocationService ` and refactored the invocation logic in ` Dispatcher ` and ` DispatcherTest ` to improve error
added handling for KEY _ X and KEY _ Y in GlobalKeyDispatcherW. java to improve key handling for GWT keycodes
updated SQL queries to conditionally include " pg _ catalog. pg _ depend " or " pg _ catalog. pg _ class. pg _ constraint
added nullability annotation to Message <? > in QueueChannel. java to improve code clarity by indicating potential nullability issues
updated the method signature of ` getPathsFromResource ` to use ` URI. getRawPath ( ) ` instead of ` String. getPath (
added support for Jenkins nodes in the RemoteCollector configuration to enable monitoring of Jenkins nodes in the application
refactor HeadersBeanDefinitionParser to use a new method for resolving secure headers to improve code readability and maintainability by centralizing the handling of secure headers
hbase - 2654 ProtobufLogReader don't seek to the end of the file if the position be negative.
added destroy ( ) method to nacosregistry to ensure proper cleanup of nacos service
camel - mybatis fixed switch / cases indentation see camel - 14540
refactor GoAwayGenerator and GoAwayBodyParser to use a dedicated method for handling HTTP status codes to improve code readability and maintainability by central
updated the type of AuditEvent to " BadCredentials " and added assertions for JSON output to ensure correct data type is returned in the audit event
updated the return value from ` a ` to ` 0 ` in ` Interpolation. java ` to ensure proper handling of floating - point errors
updated the path construction in ForgeWorldEdit. java to correct the path format for improved clarity
refactor the addition of the dx executable path to store it in a variable before adding it to the builder to improve code readability and maintainability by
added multiple assertions in TestPointQueries to ensure proper handling of PointRangeQuery instances
hbase - 25836 testhfilecleaner should use a mock archived hfile directory
added a check to ensure the file name differs from the file transfer request before updating the file label to improve file transfer handling by avoiding duplicate file
removed the throw statement from JedisClusterCommand. java to streamline error handling by eliminating unnecessary exceptions
[ hotfix ] [ table - planner - blink ] make rowtimemanagertestreamoperator chainingstrategy always
updated FilterInvocationDefinitionSourceEditor to use PathBasedFilterInvocationDefinitionMap instead of RegExpBasedFilterInvocationDefinitionMap to ensure correct decoration for
added multiple benchmark tests for ` QMapReadRandomKeyBenchmark `, ` QMapReadSequentialKeyBenchmark `, and ` QMapWrite
added a new HashMap G _ SCH _ B in HybridPlotWorld. java to initialize G _ SCH _ B dynamically based on
added a check for empty fields and refactored method identifiers in GroovyEngine. java to improve handling of GET METHODS and PARAMETERS in
added a call to setDrawable ( false, false ) on the GeoAngle object to ensure that the drawable is not set when the number is
added configurable SERVER _ READ _ SOCKET _ TIMEOUT and SERVER _ TCP _ KEEP _ ALIVE configuration in HiveConf. java and
renamed the method ` getRenameEmptyFiles ` to ` isRenameEmptyFiles ` to improve clarity regarding the purpose of the method
no need to log sql in dmlhandler, since we don't log sql
refactor RealtimeSegmentRelocator to use a lambda expression for cleaner code to improve readability and maintainability of the code
cloudstack - 3892 : fix bug in createvpccmdbyadmin. startvpc ( )
updated interpolation logic in WindowTransformSwipeHandler. java and modified condition in FloatingIconView. java to ensure proper handling of progress values and improve
updated schema declarations in SecurityNamespaceHandler. java to ensure compatibility with Spring Security 4.0 schema
refactor multiple proto assertion classes to improve consistency and clarity to enhance maintainability and readability of the codebase
[ hotfix ] make field final in disruptorprovidermanage and queueconsumer
added a new file ` TestConfigureUDF. java ` for configuring UDFs in Hive to facilitate testing of UDF configuration in Hive
updated regex pattern matching in LogMessageWaitStrategy and added parameterized test in LogMessageWaitStrategyTest to improve accuracy of regex matching and enhance test
replaced ` logger. debug ( msg, throwable ) ` with ` logger. info ( msg, throwable ) ` and ` logger. warn (
replaced calls to ` updatePurgedShardNodes ` and ` deletePurgedShards ` with direct calls to ` deletePurgedShardNodes `
updated JavaLanguageHandler versions from " 16 " to " 17 " and " 17 - preview " to ensure compatibility with the latest Java language features
added a timeout constant and refactored the ` TimeBasedRollingPolicy ` to wait for compression job completion to improve reliability and error handling
[ hotfix ] [ runtime ] fix assertion in volatilereadnode
added a method ` getSteps ( ) ` to return an unmodifiable list of ` steps ` to enhance immutability of the ` steps `
removed multiple fields fromBase58 and toBase58 in JsonRpcApiUtil and TronJsonRpcImpl to streamline data handling and eliminate
refactor the creation of CurrencyPair in BitstampAdapters. java to improve clarity and maintainability of the code
updated Measurement duration calculation to use baseTimeUnit ( ) instead of TimeUnit to ensure accurate measurement accuracy based on time unit
[ hotfix ] [ euphoria - euphoria - euphoria - euphoria
updated color handling in HostEditorActivity to use CharSequence instead of String for better type safety to improve code clarity and maintainability by using CharSequence for
rename ` IncompatibleDatabaseHandler ` to ` DatabaseVersionHandler ` and update related methods accordingly to improve clarity and consistency in naming conventions
added a constant MAX _ TWEETS _ IN _ CONVERSATION in ExpansionViewHelper. java to limit the number of
increase the refresh interval from 1ms to 2000ms in AbstractCachedLDAPAuthorizationMapLegacyTest. java to improve test reliability by allowing
[ hotfix ] [ runtime ] fix persistence of deleted tail page in queue
change the class reference from ` getClass ( ) ` to ` GlowServer. class ` to ensure the correct class is retrieved from the G
added a new method ` grow ` to the ` DataIO ` class and refactored its logic to improve code readability and maintainability by
removed import of java. io. DataOutputStream from GdxSetup. java to streamline code by eliminating unused dependencies
added a method ` getSubmittedFileName ( ) ` to the ` AttachmentHttpBinding ` class to provide access to the file name retrieved from the
added a call to markReadForLoad ( ) in LauncherFragment. java to ensure that read data is properly marked for loading
added handling for NegativeArraySizeException in JarInstrumentor. java to improve error handling and prevent unnecessary instrumentation
added a method ` checkForSpillPossibility ( int currentPartition ) ` to ` HashAggTemplate. java ` to handle potential sp
changed variable declaration from ` info. getDocStoreSegment ( ) ` to ` getDocStoreSegment ( ) ` in ` IndexWriter. java ` to
added a constant for the default name ID format in SamlProfileSamlNameIdBuilder to ensure a valid SAML name ID format is used
added error handling for password change aborted to improve user experience by providing feedback when password changes are aborted
removed unnecessary closing brace in Deadlock2. java to improve code readability and maintain consistency
added a method ` getMaxIdleTime ( ) ` to the ` NioReceiverMBean ` class to provide a way to retrieve the maximum idle time
deleted the FontScalingTest. java file to remove unnecessary test class for font size validation
added validation for filter begin and end dates in RRD4jPersistenceService to ensure that only valid date values are processed to prevent runtime errors
added checks for non - positive numVectors in GenericUDAFComputeStats. java to prevent potential errors when numVectors is non - positive
test : migrate executablereftest to junit 5
added null checks for view and GlassPane in JLayer. java and created a new test class for bug6994419. java to
camel - core - wiretap now support expression in rout eip.
changed the visibility of the setAction method from public to protected to restrict access to the method for better usability
added a new option ` TOPN ` in ` PlannerSettings ` and overridden ` matches ` method in ` PushLimitToTopN `
[ java ] remove duplicate aeron directory name in log agent test.
fixed - redissonconnection. getqueued ( ) method don't return queued value
replaced ByteArrayOutputStream with FileOutputStream and introduced a method to retrieve configuration variable URL to improve file handling and facilitate URL retrieval for default configuration
updated the method call from ` Device. defaultDevice ( ) ` to ` criteria. getDevice ( ) ` in ` BaseModelLoader. java
added methods to handle menu options in SimulationViewer to improve user experience by providing access to menu options
updated CertificateValidator to improve certificate validation logic to enhance security and maintainability of certificate validation
updated home directory path retrieval to use " hawtio. dirname " instead of " user. home " to improve flexibility in determining the directory
added handling for empty comments and whitespace in Space. java to improve code robustness by returning SINGLE _ SPACE instead of COMMENTS
changed ` mClosed ` and ` mActualDictionary ` to ` volatile ` across multiple dictionary classes to ensure thread - safe access to these fields
removed printStackTrace ( ) method from ContextHandler. java to improve error handling by eliminating stack trace printing
refactor CustomItemDropTest to extend BaseTest and add a test for custom items to improve test organization and facilitate testing of custom item
added an ` ifNotExists ` boolean parameter to multiple methods in ` DDLSemanticAnalyzer ` and ` AddPartitionDesc ` to enable conditional
updated input handling in NfsSecondaryStorageResource. java to improve performance and memory efficiency during input operations
[ java ] remove unnecessary control request stream id from service node.
added support for spatial operators in the CapabilitiesTransformer and WFSTestSupport classes to enhance capabilities and improve test coverage for spatial operations
added import for LuceneTestCase and annotated the BasicDistributedZkTest with @ LuceneTestCase. AwaitsFix to address a known issue related
modified the condition for preface matching in Http11InputBuffer. java to improve handling of invalid preface cases
[ java ] set default value of isIngressExclusive to false.
changed HBASE _ OFFHEAP _ PCT _ KEY to HBASE _ CACHE _ KEYS and updated job properties accordingly to support multiple
added runningRecordCount tracking and updated currentRecordNumberInFile method to improve tracking of record execution based on the current record number
added functionality to filter out specific year entries from mergedItems to ensure only valid year entries are removed from the mergedItems list
replaced ` 0x00000000 ` with ` 0, PorterDuff. Mode. CLEAR ` in multiple files to ensure consistent drawing behavior
added OpenGL ES 2.0 support in the Mesh class to ensure compatibility with OpenGL ES 2.0
added ActionContext import and set its context to null in BackgroundProcess. java to ensure proper context handling for invocation actions
refactor ` getUnescapedName ` method to accept a ` dbName ` parameter and update related methods accordingly to enhance flexibility in handling database names and improve
added connection timeout configuration in TestConnections. java and changed the count variable from static to final in StubConnection. java to improve connection stability
added test cases for approx _ percentile function in TestHiveAggregationQueries. java to ensure that the function returns expected values instead of actual values
updated default idle timeout from zero to 30 seconds in WebSocketConstants and WebSocketChannel classes to improve idle timeout handling and ensure consistent behavior across WebSocket connections
replaced the use of ` Account ` with ` user. toPlatformAccount ( ) ` in ` FileDetailSharingFragment. java ` to
updated Inet6Address to use generics for improved type safety to enhance type safety and maintainability of the code
rename variables and methods related to button visibility in PlaybackControlView. java to improve code readability and maintainability by using named variables
updated session presence check to use long literals for better type safety to improve code clarity and maintainability by using a more descriptive identifier
replaced ` getTransitiveClasspaths ( ) ` with ` getImmediateClasspaths ( ) ` in the ` DefaultJavaLibrary ` builder to ensure
changed the value of UseExceptionProbability from true to ____ to ensure consistent behavior across the codebase
updated the creation of a new plate color based on whether the app is themed to improve visual feedback based on the icon's status
refactor MySQLUser to use a unified init method for setting user permissions to improve code maintainability and reduce dependency on external services
added " centre " alias to the Middle class to support additional center - related functionality
added dependency injection for DirectUpload in CommonsApplicationComponent to facilitate injection of direct uploads within the application
set space top and bottom spacing for left and right axes in BarChartActivity and BarLineChartBase to improve chart layout consistency and readability
added support for CLASS _ ABI _ FLAVOR and VERIFIED _ SOURCE _ ABI _ FLAVOR in Android
added operationEventStatusType to requestParams in OnlineHubService. java and initialized services in CompositeLogService. java to ensure proper event status
added debugging and visibility annotation handling in DexAnnotation. java to improve debugging capabilities and facilitate visibility annotations
( chore ) camel - jms : add @ setup and @ teardown to all test method
updated ProcessBuilder to append the classpath to the process's classpath to improve logging clarity by specifying the classpath for better debugging
updated the file separator used for loading values from " values " to " res " to ensure consistent file path formatting across different Android versions
[ hotfix ] [ dataset ] rename DataSet. minBy ( ) to DataSet. maxBy ( )
added JUnit @ Ignore annotation to WorkProfileTest. java to temporarily skip the test due to a known issue b / 243855320
updated error message formatting in ` ShouldHaveMessage ` and added a test for escaping percentages in ` ShouldHaveMessage _ create _ Test `
fixed memory leak in jcache # close ( )
added logging level for ActivitiTaskAlreadyClaimedException in CommandContext. java to improve error reporting by reducing logging verbosity when an exception is already
refactor the instantiation of ALPNClientConnectionFactory in HTTP2Client. java to improve code readability and maintainability
fix entitypropertiepropertypacket to use base value instead of value
replaced ThingStatus checks with ThingHandlerHelper checks in SonosAudioSink. java to improve code readability and maintainability by using a dedicated
increased await timeout from 500 milliseconds to 5 seconds in ContextRegisterListenerTest and SpringMvcClientBeanPostProcessorTest to allow more time for latch to
changed log level from info to debug for determination of effect light type to provide more informative logging guidance when the effect light type is wrong
add db. properties to configure db. properties in asynchermanager
updated method signatures and formatting in Reporter. java and ReturnsSmartPointerException. java to improve code readability and maintainability
renamed parameters from Frame to DataFrame in DataGenerator. java to improve clarity and consistency in naming conventions
updated package and module info formatting in multiple Java files to improve code readability and maintainability
added a check for non - empty physical column names in OrcPageSourceFactory and created a test for column names with empty orc files to
added a call to ` methCla. mixPlay ( input, amp ) ` in the Engine class to enable audio mix functionality in the
refactor JComponent and SynthTextPaneUI classes to improve code readability and maintainability
updated calculations in ` FinderPatternFinder. java ` and modified test cases in ` QRCodeBlackBox1TestCase. java ` and ` QR
removed the check for presence of leadingIncludePaths in PreprocessorDelegate. java to simplify the logic by eliminating unnecessary checks
renamed the test method from ` testMatrixVectorMultiplicationShouldUseBrackets ` to ` matrixVectorMultiplicationShouldUseBrackets ` and
added " find ", " find ", and " findAll " to the string representation of search criteria in the SelenideElementProxy
update sample rate calculation in DefaultAudioSink. java to ensure correct maximum supported channel count for PassthroughV29
added getFormula ( ) and setFormula ( String formulaText ) methods to XSSFName class to enhance functionality by allowing formula values to be
increased the target value from 60000 to 90000 in HighDimensionsTest. java to allow for more time for scaling factors
gldialect : fix arrayindexoutofboundsexception when parse a pattern schema.
added unit tests for ClassPathXmlJobRegistryContext to ensure correct job handling in the classpath xml job registry
change variable types from float to long in MotionPauseDetector. java to improve handling of larger time values
camel - 12320 : camel - restlet - add support for advanced endpoint option.
( chore ) camel - log : remove unused method ` showout `
refactor ChromeTraceBuildListener to introduce a new method ` writeChromeTraceMetadataEvent ` to improve code readability and maintainability by encapsulating event
added checks to ensure only non - canceled, non - filled, and non - rejected orders are added to the limitOrders list to avoid duplicate
added pixel offset calculations in LCMSImageLayout. java and modified nextPixelOffset logic in BufferedImage. java and BufferedImage. java to improve image
replaced direct handling of timestamps with JrubyTimestampExtLibrary's timestamp retrieval to simplify timestamp handling and improve code maintainability
added handling for handling paths ending with " / " in ContextHandler. java and created a test case in WebAppContextTest. java to ensure
updated the type of the TypeErrorThrower from ` Lookup. TYPE _ ERROR _ THROWER _ SETTER ` to ` Lookup. TYPE
updated scroll handling logic in JEditTextArea. java to improve accuracy of scroll values
graphdecoder : fix nullpointerexception when callerloopscope be null.
updated import statements for SniperPrettyPrinter in SniperPrettyPrinterJavaxTest. java to align with the updated testing framework
refactor URLOutputStream initialization to use try - with - resources for better resource management to ensure proper resource management and avoid potential memory leaks
added multiple @ Entity annotations to Mail. java to enable Entity - based annotations in the Mail class
updated default values for tablespace and indexes in Main. java to enable flexible configuration of tables and indexes based on command parameter
added getter methods for ` metaDataBuffer ` and ` valuesBuffer ` in ` CountersReader ` to enhance data handling capabilities
added a boolean flag ` hasReadNonEmptyFile ` in ` ScanBatch. java ` and a test case in ` TestJsonReader.
added conditional failure handling for internal custom name comparison in StringSubject. java and updated assertions in StringTest. java to improve test reliability and
added a regex pattern for matching Cuda library names in LibUtils. java to ensure only valid Cuda libraries are processed
updated catch blocks to handle both ClassNotFoundException and NoClassDefFoundError in JrtJavaBasePackages. java and PackageHelper. java to improve error handling
hbase - 24690 add check for dfs safemode in hbase - client
updated error message formatting in TranslatingJavacPhaseTracer. java to improve clarity of error messages for better debugging
added cloning functionality to the DefaultPluginCache class to improve plugin management by centralizing plugin descriptor cloning logic
don't fire presence change event if there be a mobile indicator.
remove the withresourceandparams ( ) method from someresourceprovider and somerestfulservlet
added integration test for fetching account information in the BTCE exchange to ensure accurate retrieval of account information from the BTCE exchange
added mouseWheel methods to VDUInput and vt320 classes and modified mouse wheel handling logic in TerminalView to enhance mouse wheel functionality and improve
updated library path handling in Natives. java to conditionally set the library path based on the needJInput flag
no effective change - remove columnhstore annotation
added PLAYER _ SKIN _ FLAGS to the metadata index and updated metadata handling in MetadataIndex and MetadataIndexTest to enhance player skin management
replaced RequestFieldMatcher with SLF4J Logger in LoadBalancerWithServiceTests. java to enhance logging capabilities and improve code readability
refactor the createSimpleEntryView method to improve readability and maintainability to enhance code clarity and facilitate future modifications
replaced the use of ` System. getProperty ` with ` AccessController. doPrivileged ` for retrieving the operating system version to enhance security by ensuring
updated file suffix handling in TemplateEngineFreemarker. java to improve clarity and maintainability of file suffix configuration
updated hash code calculation in SelectMessageQueueByHash. java and added anotherOrderId values in SelectMessageQueueByHashTest. java to
add animation callback to toolbar panel. http : / / github. com / codenameone / codenameone / issues / 241
updated binding logic in StyledTextAreaVisual. java to improve readability and maintainability of the binding logic
added declaredPlatforms to PrebuiltAppleFrameworkDescription, CxxBinaryDescription, CxxGenruleDescription, and CxxGenruleDescription classes to enhance
replaced SimpleParameterAccessor with ParametersParameterAccessor in JpaCountQueryCreator and JpaQueryExecution classes to align with Spring Data repository's parameter handling
added a null check before setting the password attribute in LdapAuthenticationProviderConfigurer to avoid potential NullPointerExceptions when passwordAttribute is not set
added isArray check in DataUtilities and created a test for default values in DataUtilitiesTest to ensure correct handling of array types and validate default values
added host name verification logic in SslContextFactory to ensure proper host name verification and prevent potential null pointer exceptions
updated assertions in TestFSTableDescriptors to use assertTrue for cache hits validation to ensure that cache hits does not exceed expected limits
danielwagnerhall : delete a cookie named by the name instead of the whole path.
added a boolean flag ` mHasEndedLauncherTransition ` and modified logic in ` AbsSwipeUpHandler ` and ` RecentsView ` to
updated HTML head and title to include UTF - 8 encoding in HTMLListWriter and HTMLWriter to ensure proper handling of special characters in HTML content
refactor IndexReader to improve code readability to enhance maintainability and readability of the code
increased the default value of HIVE _ STATS _ KEY _ PREFIX _ MAX _ LENGTH from 200 to 150 to accommodate larger statistics
added a new class ` bug6337518 ` and modified ` comboBox. add ( arrowButton ) ` to implement a custom arrow button
updated TestRandomAccessBuffer. java file to improve test coverage and maintainability
refactor UserInfoActivity to improve code readability to enhance maintainability and facilitate future updates
added notification for changes to HomeContentProvider in multiple services to ensure consistency in content updates across the application
added state management for stealing actions in BubbleTextView and Launcher to improve user experience by ensuring smoother interactions with focused backgrounds
updated getFallbackResponse method to accept an Throwable parameter across multiple policy classes to enhance error handling by providing more specific error context
updated conditional check for ` env. _ dest _ dir ` to ensure ` env. _ dest _ dir ` is set only when ` env
added null checks for tags in ChannelUri and EntityUri methods to prevent potential NullPointerExceptions when tags are null
updated JAVA _ REGEX _ SPECIALS to " [ ] ( ) | ^ -+ *? { } $ \ \. " and
added functionality to update the action bar title in FileActivity to ensure the action bar title reflects the current state of the activity
updated type retrieval from ` Iterables. getOnlyElement ( convertedElements ) ` to ` Iterables. getLast ( convertedElements ) ` and added a new
clean service : set default schedule to zero
updated TransactionalValidationListener to validate table structure based on partitioned tables to ensure proper validation of partition data for partitioned tables
updated ReplicationHandler and SnapPuller classes to enable polling functionality to improve user experience by enabling polling functionality
changed the data type of generatedKeys from int to long in ShadowSQLiteDatabase. java and updated SQL statement execution in SQLiteDatabaseTest. java to
simplified the proxy retrieval logic in SimpleReferenceCache. java to improve code readability and maintainability
updated test cases to use " failed to inline " instead of " failed to inline : disallowed by ciReplay " to improve clarity and accuracy
increase the default value of keepAliveTimeoutShared and keepAliveTimeoutCustom from 60 to 10 to improve resource management and prevent potential issues with configuration
deleted the HttpTestAccount001. java file to remove unused test cases
changed exception handling from Exception to Throwable in Dispatcher. java and updated test assertions in DispatcherTest. java to improve error handling clarity and ensure proper
camel - cxf : avoid npe if cxf _ message be different from defaultcxfbinding
added case for the'~'character in ClientUtils. java to handle special characters in client data
camel - slack - add a configurable delay to the slack consumer.
fix blockutil. fireblockharvesting not fire correctly.
increased the preferred size of the encoded audio Passthrough checkbox in TranscodingTab. java to improve layout responsiveness and user experience during audio
added a new file ` bug8057791. java ` that implements a Nimbus Look and Feel for a JList to demonstrate the
modified the flags _ field logic in LambdaToMethod. java and added a new interface LambdaInterfaceStaticField. java to improve clarity and functionality
refactor subscription management in ` RunnerBuilder ` and add a test for EthSubscribeAvailable in ` RunnerBuilderTest ` to improve code clarity and
updated condition to check for non - null input to prevent potential NullPointerExceptions
added handling for reading large integers with a dictionary in ParquetFixedWidthDictionaryReaders. java and created a test case in TestColumnReader
refactor PortraitPagedViewHandler to use scaledDividerHeight instead of availableHeightPercent for layout adjustments to improve layout consistency based on
added Log annotation and created LogInterceptor class for logging functionality to enhance logging capabilities in Spring Cloud applications
updated the condition for adding threads to the dump based on the trace length to ensure that the thread's name and state are only added when
updated variable names from ` keyType ` to ` implementation ` for clarity to improve code readability and maintainability by using a more descriptive variable name
added totalFrameSize ( ) to the reference map creation in FrameMap. java to ensure that the reference map includes the total frame size for
refactor TypesafeConfigurator class to improve code readability and maintainability
add karaf test base on user forum issue
updated test methods in RFE2891944. java to improve test coverage for BigDecimal operations
updated URL encoding and exception handling in HttpClientIntroductionAdvice. java to ensure proper handling of special characters in URLs and improve error handling
refactor the ` unsupportedPlatformTool ` class to a new class ` UnsupportedPlatformTool ` to improve code clarity and maintainability by encapsulating the
changed the type of loopCount from double to int and updated log message format to improve flexibility in recovery process and enhance logging clarity
added ` size ( ) ` method to ` FlightConfiguration ` and ` FlightConfigurationImpl ` classes to provide a way to retrieve the
[ drools - 686 ] fix kieaddressmanagertest to not throw illegalaccessexception
updated layout parameters for columns and rows in VLCVideo. java to improve layout consistency and enhance user experience
update bisq to bitsquare. bitsquare in order to resolve issue.
updated AUTHORITY string from " com. klinker. android. talon. provider " to " com. klinker.
updated user configuration directory and improved file handling in MBoot. java and MavenCli. java to ensure users have the correct user. xml and
added a call to ` glBindBuffer ` in ` VertexBufferObjectWithVAO. java ` to bind the buffer to the correct buffer
refactor ServerHttpSecurity class for improved security handling to enhance security features and maintainability
added JUnit @ Disabled annotation to PostgresStoredProcedureIntegrationTests to temporarily disable tests that are not ready for execution
added default HTTP header management in HttpClientProperties and CasCoreHttpConfiguration to enhance HTTP client configuration by allowing customizable default headers
added new exception classes ` ThingsboardCredentialsViolationResponse ` and ` UserPasswordNotValidException ` in ` ThingsboardErrorResponseHandler ` to improve
deleted the NoOpConfigPathGetter. java file to remove unused code to streamline the codebase
replaced base16 decoding method with byte array conversion in EngineAuthService. java to improve performance and memory efficiency by using byte array methods
replaced CascadedStyle with CSS constants for styling to improve code maintainability and ensure proper handling of CSS properties
planner - planner - planner - planner - planner - planner - planner - planner - planner - plan
replaced instance of ` getDefaultHeaders ( ) ` with a private static method ` defaultHeaders ( ) ` in ` RestUtils ` to improve encapsulation
rename variable ` enc ` to ` charset ` across multiple classes to improve clarity and consistency in handling character encoding
added a method ` getJobId ( ) ` to ` StepContext ` and a test for ` getJobId ( ) ` in ` StepContext
updated comparison logic in ExpandableUploadListAdapter and FileStorageUtils to use ` Long. compare ` instead of ` valueOf ` to improve performance by
change log level from error to debug in DefaultJdkHttpClient and JdkBlockingHttpClient to improve logging granularity for debugging purposes
updated import statements in LegacyAuthenticationHandlerAdapter. java to improve clarity and maintainability of authentication handling code
changed the WingDings class from final to public to allow access to the WingDings class from other packages
added a condition to check if the filter's owner public key matches the filter's signature before removing it from the network to ensure that
added a wrap method to BCPGInputStream and removed it from PGPKeyRing and PGPSecretKeyRing classes to streamline input
updated DataOutputStream to use BufferedOutputStream for flushing and syncing to ensure proper resource management and prevent potential resource leaks
added a new test method ` testSelectAllFromView ` to ` TestJdbcDriver2 ` and updated assertions in ` HiveBaseResultSet `
updated FocusTransitionTest. java file to improve test coverage and maintainability
updated GWT import from org. gwtproject. core. client to com. google. gwt. core. client to ensure compatibility with the
added a null check for sourceTask before retrieving counters to prevent potential NullPointerExceptions when sourceTask is a MapRedTask
updated the assignment of _ readListener to ensure that the readListener is not null to prevent potential NullPointerExceptions
refactor color handling in AppearancePanel to use a ChangeListener for better event management to improve code clarity and maintainability by centralizing color
changed the constructor parameter from false to hidden in TaskHelper. java to ensure proper handling of hidden arguments in the constructor
http : / / issues. apache. org / activemq / browse / amq - 4623 - disable exponential back off for failover test.
pdfbox - 2576 : close file lock when create a pdf from a tiff file
added DefaultParameterHandler import in LanguageDriver. java to enable parameter handling in the language driver
added logic to check for the maximum loop depth before spilling the interval to ensure spill state is only set when the maximum loop depth is
added a new class MicronautAstBuilder for Groovy code compilation to facilitate the compilation of Groovy scripts using Groovy's
refactor PgResultSet and PgStatement to introduce a new closeInternally method to ensure proper resource management and prevent potential memory leaks
changed the initialization of ` serviceAdvisorType ` from ` null ` to ` PYTHON ` to ensure ` serviceAdvisorType ` is set to a
refactor GenericDatumReader to use a ThreadLocal for ResolvingDecoder management to improve thread safety and maintainability of the code
changed the type of ` Path ` from ` Collection ` to ` List ` and added a constructor to ` PdfCleanUpContentOperator ` to
refactor SendCoinShieldTest to use a memo instead of a new byte array to improve test clarity and maintainability by using a random byte
added a method ` setPersonalisation ` to the ` SkeinParameterSpec ` class for setting a personalisation date and email addresses
removed redundant conditional check for argument count in CodeGenerator. java to streamline code by eliminating unnecessary complexity
replaced hardcoded values for margins and steps in scroll methods across multiple classes to improve code readability and maintainability by avoiding hardcoded values
changed the visibility of ` pointer ` from private to public and added reset methods to enable external control over the pointer value in the FlatRecordReader
renamed ` ContentDigestHistory ` to ` BdbContentDigestHistory ` across multiple files to improve clarity by using a more descriptive class name
refactor CastExpression to use a wildcard import and improve type handling to enhance readability and maintainability of type inference logic
refactor the handling of accepted media types to use a boolean flag to improve clarity and maintainability of the code
added a boolean field ` false ` to the ` TaskView ` class to indicate that the task should not be displayed in the user interface
added isAutoIncrement functionality to LiquibaseDataType and LiquibaseDataType classes to ensure proper handling of auto - increment columns in the database
initialize errorText to a string " Command failed due to Internal Server Error " to improve error reporting for command failures
updated import statements and added - XX : + UsePerfData in LocalManagementTest. java to enhance performance testing capabilities by utilizing PerfData
replaced ` toSimulate. add ( currentStatus ) ` with ` toSimulate. push ( boosterStatus ) ` to improve clarity
added methods to create and set up AJP connector based on port settings in GitBlitServer. java to enable flexible configuration of AJP
added type erasure handling for IntersectionClassType in TransTypes. java and created a new Intersection03 class with a test method to ensure correct
renamed EmbeddingTest to EmbeddingITest to clarify the purpose of the test class
added a native method to start the toolkit thread conditionally to improve thread management by avoiding unnecessary creation of the toolkit thread
[ gr - 20536 ] add option to bundlecontentSubstitutedlocalizationsupport to compress the bundle content.
set ` ` surface'' visibility to ` true'instead of ` ` surface''
updated the temporary directory path for RecordTransformationTest to use the class name instead of a hardcoded string to improve clarity and maintainability of temporary directory
added new boolean flags for fullNodeHttpEnable, solidityNodeHttpEnable, and updated related service references to enhance configuration options for node HTTP
added a service property and modified the return statement in GoogleCloudFirestoreTicketDocument. java and GoogleCloudFirestoreTicketRegistry. java to
renamed methods in Generate. java to improve clarity and maintainability of the code
changed the annotation from nullableParameters to non - nullable in JsonFunctions. java and added test cases for JSON null handling in JsonFunctionsTest.
replaced hardcoded width calculations with a boolean flag for dot matching to improve code readability and maintainability by avoiding hardcoded values
removed the ` final ` modifier from the ` getConfiguration ` method in ` FreemarkerManager. java ` to enforce immutability of
added a test for invalid excluded package patterns in OgnlUtilTest to ensure that the configuration correctly handles invalid package patterns
added handling for " mac " platform and " iphone " SDK name in AppleTest. java and IdbRunTestsStep. java to
replaced error logging with warning logging in DefaultHttpClientFilter and updated test cases in TestDefaultHttpClientFilter to improve error handling and ensure proper response status
added null checks for mScript before binding and executing methods to prevent potential NullPointerExceptions when mScript is not initialized
added a boolean flag ` TEXT _ BURN ` to conditionally set shadow layers based on its value to enhance the visual appearance of text in the
added teardown methods to TestColumnAccess and TestReadEntityDirect classes to ensure proper cleanup of temporary tables and views during tests
added retrieval of parsers by name in SecurityNamespaceHandler to ensure proper configuration of parsers based on their names
updated the condition in BoundedLocalCache and added a fastpath test in BoundedLocalCacheTest to improve cache management and ensure fast path functionality works
added ` complete ` and ` flush ` methods to ` RawConnection ` and implemented flushing logic in ` WebSocketAsyncConnection ` to improve frame
added three test methods for assertions in SoftAssertionsPerfTest to improve test coverage and ensure comprehensive assertions
added a test failure exit code in PythonRunTestsStep and updated related methods in ProjectWorkspace to ensure proper handling of failure scenarios and improve code
added conditional checks for xAdvances in GlyphLayout. java to ensure proper handling of glyphs when markup is enabled
refactor score retrieval logic in TestBooleanRewrites. java to improve clarity and maintainability of score assertions
updated enumClass assignment to use getSuperclass ( ) instead of getEnclosingClass ( ) to ensure correct class hierarchy for anonymous classes
replaced player connection flushing logic with a dedicated flush method across multiple classes to improve code clarity and maintainability by centralizing player connection flushing
added a boolean flag ` mStarted ` and modified the removal of onDrawListeners in ` Launcher ` and ` LauncherAnimUtils ` classes to
refactor multiple classes to improve code organization and readability to enhance maintainability and facilitate future updates
updated import statements in ReplicaAssigner. java to include both NODE _ CAN _ BE _ ASSIGNED and NOT _ APPLICABLE conditions
changed the return value of getBoolean ( MEDIAPARSERV2, false ) from false to true to ensure that the media info parser is
added a new ` isAcceptable ` method and ` visitInterceptorTypes ` method and interceptor types based on the stereotype to enhance
added assertions and permission verification in FolderPermissionBase. java to ensure proper functionality of partition operations
add handling of registration state to the publishStatusInternal method to ensure that status updates occur only when due to registration state changes
modified the random number generation logic in PastelColor. java to adjust the color base for better randomness
refactor ScriptEngineFactory to improve code structure to enhance maintainability and readability of the code
refactor bitmap handling in HolographicViewHelper to use original and outline bitmaps to improve clarity and maintainability of state management
replaced direct HTTP request method handling with a utility method for better clarity to improve code readability and maintainability by centralizing request method logic
add a new method ` getTag ` and ` inferPOS ` to the ` MultiWordPreprocessor ` class to improve the handling of unig
[ hotfix ] [ test ] remove unused import in iochannelutilstest
added conditional class loading based on output format class name to ensure compatibility with different output formats in the application
refactor ChunkListener, AfterChunk, and BeforeChunk classes to improve code readability and maintainability
updated validation logic in DOMBuilder. java to ensure proper bounds checking to prevent potential ArrayIndexOutOfBoundsException
updated handling of HierarchicalUndirectedGraph in ClusteringCoefficient, EigenvectorCentrality, DiameterUI, GraphDensityUI
camel - 14850 - camel - aws2 - * : improve the verifier to check if a particular service work on a specified region.
added a new file ` PublicStaticInterfaceMethodHandling. java ` implementing interfaces with static methods to demonstrate the use of default methods in interfaces for
camel - core - defaultkeyselector now implement camelcontextaware so it can be inject from property placeholder.
replace Throwable catch with ThreadDeath catch in LogResolverBean. java to improve error handling for ThreadDeath scenarios
refactor multiple KeyManagerFactory, TrustManagerFactory, PolicyFile, and X509Certificate classes to improve code organization and maintainability
updated JGit version from " JGit 1.0. 0 ( 201109151100 - r ) " to " JGit 1.0. 0 (
updated the logic for retrieving the client's path in HttpClientIntroductionAdvice. java to improve clarity and maintainability of the code by using
added a new ` TransformerParser ` class and created ` TransformerContextTests ` class to facilitate the creation of ` Transformer ` objects within
updated BACK _ FACTOR constants and modified duration comparison logic in ResumeObj. java to improve clarity and correctness of duration calculations
added a method to check if the user is scrolling in CodenameOneImplementation and implemented scroll wheel detection in JavaSEPort to enhance user
updated usage string formatting in UtilityCommands and DocumentationPrinter classes to improve readability and maintainability of the code
updated request attribute assignment in CommunityListServlet. java to ensure consistency in setting the collection map
removed setter methods for seqFiles and unseqFiles in CrossSpaceCompactionResource and updated size retrieval in RewriteCrossSpaceCompactionSelector to streamline
removed duplicate @ Override annotations in Observation. java to improve code clarity and maintainability
refactor rule synchronization logic in ProjectPropertiesModelImpl. java to improve clarity and maintainability of the code
refactor field lookup logic in AbstractSootFieldRef. java to improve code readability and maintainability
updated ElasticMeterRegistry to use a dedicated naming convention for meter names to improve clarity and maintainability of the code by centralizing naming conventions
added methods for managing controller listeners and job length estimation in IController and TinyGController classes to enhance functionality and maintainability of the controller
added a new test method ` hugeHorizontalRule ` to the ` PathologicalTest ` class to verify the rendering of a horizontal rule in the
replaced System. out. println calls with TTY. println calls in TypeSystemTest. java and PartialEscapeAnalysisPhase. java to improve
updated method names and imports across multiple classes to improve clarity and maintainability of the codebase
[ java ] check for negative frame length in log inspector.
added default value for zeroValue in IntFloatMap and IntIntMap to ensure proper handling of zero values in the map
updated ImageDownloadService to use an asynchronous Runnable for setting icons and preferences to improve responsiveness and responsiveness of label elements
added null check for registered in HandlerRegistration. java to prevent potential NullPointerExceptions when registered is null
removed the native boolean ` hasNextSibling ( ) ` method from multiple node classes to streamline the code by eliminating unnecessary native methods
added null check for results before accessing its size in RedisDistributedMapCacheClientService to prevent potential NullPointerExceptions when results is null
added logging statements for enabling and disabling MobFileCache in MobFileCache. java to improve visibility into the configuration and performance of the MobFile
updated ColConvCCMTest. java file to improve test coverage and maintainability
refactor variable names for clarity and maintainability to improve code readability and facilitate future updates
pdftextstripperbyarea now use vector instead of hashmap
updated Json class to use ` asString ( ) ` instead of ` Float. toString ( ) ` and added a new ` X ` class with
added a return statement to the GenericFileConsumer class to prevent further processing when processing fails
added a new Runnable that runs on the Event Dispatch Thread to ensure that allInvoked events are executed on the Event Dispatch Thread
updated the maximum size calculation in CompressExtension. java to ensure the correct maximum size is used for message sizes
updated steeringValue values from + to - = 5f in multiple test classes to ensure steering values accurately reflect the intended
replaced ` Arrays. equals ` with ` MessageDigest. isEqual ` for password comparison to improve performance and maintainability of password comparison logic
refactor JdbcSerDe to use LocalDate and LocalDateTime for date and timestamp conversion to improve code clarity and maintainability by using local date and local time
updated metadata handling logic in ParseData. java to ensure metadata is written only when the version is less than 3
added FlywayJpaDependencyConfiguration to FlywayAutoConfiguration and FlywayAutoConfigurationTests to enable dependency injection for Flyway
added sorting functionality to ClassesImpl. java to ensure consistent ordering of classes during processing
added a method to retrieve the current stable state in LauncherStateManager and implemented a wait mechanism in AbstractLauncherUiTest to improve state management and ensure
refactor SharedInformer to improve code readability to enhance maintainability and facilitate future updates
refactor TestCloseScope0 to use Class for memory scope creation and closing methods to enhance compatibility with different Java versions and improve resource management
updated the timeout duration from 500ms to 5000ms in AdaptServerSocket. java to allow more time for tests to complete
updated CaptchaChannelProcessorTests. java file to improve test coverage and maintainability
added logic to update the OwningCollection in MetadataImport. java to ensure proper handling of collections based on their ownership
added retry times for saving properties in AbstractRegistry to improve reliability of cache file operations during retries
updated TrackingDirectoryWrapper instantiation to use the directory parameter to ensure tracking of directory data during indexing operations
fixed bug in unusedimportsruletest
added error handling for insert overwrite queries in HiveIcebergStorageHandler and IcebergTableUtil to ensure proper handling of insert overwrite scenarios and
updated assertions in BootstrapTests to expect a value of 2 instead of 3 to ensure correct handling of legacy SAML keys in the configuration
updated the method name from ` isAnonymousOrLocal ` to ` isAnonymousOrNonStaticLocal ` and added a check for non - static
[ bugfix ] ignore unexpected e - mail address
removed WAITING _ FOR _ LINE _ COMMENT, WAITING _ FOR _ BLOCK _ COMMENT, and WAITING _ TO _ LEAVE
added IOException handling and refactored release methods in IndexWriter, Lock, and NativeFSLockFactory to improve error management and ensure proper resource cleanup
changed package of DataSourceInitializer from ` org. springframework. jdbc. datasource ` to ` org. springframework. batch. test ` to
added a conditional check for non - unary operators in SpelExpressionTransformer. java and removed redundant imports in OperatorNode. java to improve code
updated ByteBuddy initialization to use TypeValidation. DISABLED to disable type validation during testing
refactor JavacRoundEnvironment to use TypeElement instead of DeclaredType to simplify type handling and improve clarity in processing annotations
updated lock timeout values from 100 to 1 in multiple test files to ensure that the test does not throw a PessimisticEntityLockException when
refactor LoggingApplicationListener to simplify system property setting to enhance code readability and maintainability by reducing redundancy
added a method to check HTTP redirect status and refactored the request method to improve error handling and maintainability of HTTP redirects
added constants for SERVICE _ MAPPING and VERSION _ MAPPING in ServiceCombConstants. java and refactored MicroserviceFactory. java to
updated the method call from ` getName ( ) ` to ` getBeanName ( ) ` to ensure the correct bean name is used for processing
replaced hardcoded DB _ PATH _ REGEX and DB _ PREFIX with static constants in BaseAndroidTestCase. java and GeocodeHelperTest. java to
updated the method to retrieve unread count from HomeDataSource to ensure accurate retrieval of unread count for the current account
renamed the test method from ` testVirtualThreadPool ` to ` testVirtualThreadPoolPreview ` and added a test for Jetty version in ` DistributionTests
updated ` getAllOrder ` method to accept a ` long ` limit parameter and modified ` marketPriceListBuilder ` to use it to limit the
added null check for the user before retrieving user settings to prevent potential NullPointerExceptions when retrieving user settings
fix ( localfilesystem ) : use ` ` absolute file'' instead of ` ` relative file''
added maximum dimensions for instance bounds in ComponentBuilders. java to ensure that the instance does not exceed defined dimensions
added logging statements and deprecated setConnectionManagerTimeout method in CommonsHttpSolrServer. java to improve error handling and log warnings related to connection manager timeout
added error handling for document creation errors in PrintController. java to improve error reporting for document creation failures
refactor file path handling in CrateType. java and add assertions in RustBinaryIntegrationTest. java to improve code clarity and ensure correct
added methods for identifying and validating number inputs in SpellChecker. java and created a test for it in SpellCheckerTest. java to
updated the MESSAGE constant to remove unnecessary whitespace to improve code readability and maintain consistency
refactor OCFileListFragment instantiation and show file actions in FileDisplayActivity. java to improve code clarity and maintainability by centralizing file action handling
added a daemon flag to the ReplicationHandler and wrapped the logReplicationTimeAndConfFiles call in a try - catch block to ensure the pull
updated the update method call syntax in StoreCachedTest. java to correct syntax and improve code readability
renamed the constructor parameter ` materials ` to ` theMaterials ` for clarity to improve code readability and maintainability by using a more descriptive
updated string descriptions for LibGDX and Controller / Gamepad API in DependencyBank. java to improve clarity and organization of dependencies related to Lib
added maximum number of recycled views based on available height and icon size in AppsContainerRecyclerView to optimize memory usage and improve user experience by
added a new test method ` testBuilding binariesSeparately ` in ` AndroidBinaryCrossCellIntegrationTest. java ` to ensure that binaries are
update examplebaritonecontrol to prevent cancelling.
added imports for ParsedNode, ParsedNodeException, and ResourceAccessor in CreateProcedureChange. java to enable proper parsing and resource management in the
added support for null value vector filtering in FilterOperatorUtils and created corresponding test cases in NullHandlingEnabledQueriesTest to enhance query capabilities and ensure
added validation for bootstrap method arguments in JDynamicInvokeExpr. java to ensure correct argument types and improve error handling
updated the port number from " jms : in " to " http : / / localhost : 9000 / myservice " and modified the transform
cleared the formatter in CucumberInstrumentation. java to ensure proper initialization of the runtime options
changed the type of ` contacts ` from ` ArrayList < RegisteredServiceContact > ` to ` ArrayList < DefaultRegisteredServiceContact > ` and updated
updated workspace cell padding logic in DeviceProfile. java to ensure workspace labels are hidden appropriately based on cell size
refactor assertions in ReplicationFactorTest to use assertRf for consistency to improve readability and maintainability of the test assertions
LLVMContext and related classes to handle context initialization deferreds to improve context management and ensure proper initialization during pre - initialization
removed JUnit @ Ignore annotations from ChaosMonkeyNothingIsSafeTest and ChaosMonkeySafeLeaderTest to temporarily skip tests
replaced RuntimeException with JsonIOException in Gson. java to improve error handling for JSON - related exceptions
replaced Integer. valueOf calls with Integer. parseInt calls in VisualScoreTagTest. java to improve code readability and maintainability by using modern Java
updated error messages to use source and target paths instead of target to improve clarity and consistency in error reporting
added a method to check if a segment name is a High - level consumer segment name and refactored related logic to improve clarity and functionality
added methods for starting activities in ShadowFragment and FragmentTest classes to improve fragment activity handling and ensure proper functionality through unit testing
updated the date conversion logic to use the current time instead of the current time to ensure accurate date representation based on the current time
added " - target " configuration for x86 _ 64 - none - linux - android to the return statement to support additional Android targets
added a method to delete all account files in FileDataStorageManager and integrated it into ManageAccountsActivity to improve account management by allowing deletion of
updated command line argument formatting in SchemaCrawlerCommandLine. java to improve clarity of command execution options
added a new constructor to the Description class that accepts a unique ID and updated hashCode and equals methods accordingly to improve flexibility in representing unique ID values
replaced the manual decoding of barcode with a new MultiFormatReader instantiation to improve code readability and maintainability by using a dedicated MultiFormatReader
removed ImmutableList dependency from BuckTarget and related classes to simplify code and eliminate unnecessary dependencies
added unit tests for range past end functionality in GWCZoomContextFinderTest to ensure correct range calculations in the zoom context finder
added support for dependency tracking in JRubyScriptEngineConfiguration to enable conditional execution of dependency tracking based on configuration
updated the request path check from ` getRequestURI ( ) ` to ` getServletPath ( ) ` in ` PromptFilter. java ` to ensure
don't attempt to create a new keyspace if it already exist
refactor WelcomeWindow to use BufferedImage for image handling to improve performance and maintainability of image processing
updated tuner configuration handling and error logging in multiple classes to improve tuner management and error handling during buffer resubmission
added HasTests interface to AbstractShBinaryDescriptionArg and implemented a test for it in ShBinaryRuleIntegrationTest to enhance test coverage for binary
added condition to set includeString to " db : hsqldb " to ensure compatibility with HSQLDB database configuration
removed unnecessary whitespace in the peek condition to improve code readability and maintain consistency
added a check for empty stack traces before materializing theHostException to ensure that the exception is only thrown when no stack traces are available
refactor service loading logic in GraalServices. java to improve clarity and maintainability to enhance code readability and facilitate easier integration with Java
added a test for handling duplicate command handler resolution in AggregateAnnotationCommandHandlerTest to ensure that the command handler correctly handles duplicate command handlers
[ flink - 20865 ] [ configuration ] add fine - grained resource management option
fix npe in entityfishhook. getblockboundingblock ( ). close # 3951
( chore ) camel - ftp : align javadocs with updated javadocs
rename ` getCommandRunner ( ) ` to ` getStepRunner ( ) ` across multiple files to improve clarity and consistency in naming conventions
renamed ` useShortNames ` to ` compressPackageNames ` in ` GangliaReporter ` and ` GangliaReporter ` classes to
added a check to return early if items are empty to avoid unnecessary processing when no items are available
added a conditional annotation for REPORTER _ BEAN _ NAME in ZipkinAutoConfiguration to ensure that the bean is conditionally created based on
updated XMLLayout to use StringBuilder instead of StringBuffer and added properties property functionality to improve performance and enhance logging capabilities
added a new parameter ` OMIT _ HEADER ` and implemented the ` remove ` method in multiple response writer classes to conditionally remove the response header
updated property name retrieval logic in EscherProperty. java and added unit tests for property names in TestEscherProperty. java to
refactor return statement to use Description. getBuildRuleType method to improve code readability and maintainability
modify the hierarchy before removing the method numberer in SootClass. java to ensure that the method numberer does not interfere with the
added null checks for disputesPerTradeIdItems and disputesPerDelayedPayoutTxIdItems in TradeDataValidation. java to
added ` getObjectHash ( ) ` and ` toString ( ) ` methods to ` AbstractNamedObject ` and updated related methods in ` TableRetri
wallet : set not _ seed _ in _ chain to not _ seed _ in _ chain
refactor argument handling in HttpClientIntroductionAdvice to improve clarity and maintainability of argument processing logic
added a condition check for JSON files in CraftingHelper. java to ensure only valid JSON files are processed
hbase - 2743 addendum : catch all exception in hregion. open
refactor length checks in Credential. java for better clarity to improve readability and maintainability of the code
[ java ] don't include correlationid in subscription check.
updated the destroy method to handle InterruptedException and refactored process destruction logic to improve reliability of process destruction and enhance
added support for Oracle databases in TestDefaults. java to ensure compatibility with additional database types
added error handling for connecting to a MailStore in MailConsumer. java to improve reliability by logging exceptions when testing for connected to MailStore
added token handling logic in the Parser. java file to ensure that tokens are only processed when they are not already consumed
added GEORGIAN, GREEK, GUJARATI, and GUJARATI languages to the Translate2Language
added a method to retrieve the data file name in the Model class and modified HMMModel instantiation logic in Voice. java to enhance functionality
added emailDomain field and its getter / setter methods to LdapIdentityProviderDefinition and IdentityProviderDefinition classes to enable users to set and retrieve email
added configuration constants for request timeouts in Configuration. java and updated ViewRegistry. java to use these constants to improve code maintainability and readability by
added a condition to check if myDeferredConcepts and myConceptLinksToSaveLater are empty before processing deferred concepts to ensure that deferred concepts
added RedisCategory import and annotated RedisServiceRegistryTests with @ Category annotation to enable categorization of Redis services in test cases
updated test methods in ` FindDeprecatedMethodsTest ` to use ` ParameterizedTest ` and ` NullAndEmptySource ` to improve test clarity and
added a call to super. paintComponent ( g ) in OverlayPanel and WaterfallPanel to ensure proper rendering of the UI component
removed unused imports from multiple Java files to improve code clarity and maintainability
updated event signature handling in ContractEventTrigger and LogEventWrapper classes to improve clarity and functionality of event signature management
updated file name filtering from ` contains ` to ` endsWith ` in ` FileTestHelper. java ` to improve clarity and accuracy of file name detection
replaced clearRect with fillRect for background color in MapView. java to improve rendering by using a color instead of clearing the clip rectangle
( chore ) camel - drools - plugin : fix compilation error for invoker
refactor various graph - related classes to improve code structure and readability to enhance maintainability and reduce clutter in the codebase
added a conditional check for NaN scores in TestFieldCacheSort. java to ensure tests are only executed when NaN scores are present
updated the method of obtaining oldKeys to use Set. copyOf for efficiency to improve efficiency by avoiding unnecessary object creation
added logic to handle zero time values in ColumnSnapshotGenerator and created a test for date default values in MySQLIntegrationTest to
rename offerermultiSigpubkey to offererbtcpubkey
updated type parameters in FunctionAllGroupHeadsCollector, FunctionAllGroupsCollector, FunctionFirstPassGroupingCollector, and FunctionSecondPassGroupingCollector
[ drools - 686 ] fix compilation error when edit a session model
updated constructor to use'this. conf'instead of'conf'to ensure proper configuration is used for HiveMetaStoreClient
added a conditional check for modalness in TaskView. java to prevent unnecessary processing when modalness is not set
added unit tests for CodecCapabilities creation and retrieval in ShadowMediaCodecList to ensure correct functionality of codec capabilities based on profile levels
fix # 5460 focus wrong when enter key be use
added validation to ensure width and height are non - negative and handle potential OutOfMemoryError in X11SurfaceDataProxy and XRPMBlitLoop
updated the thousands separator from ". " to " \ u00a0 " in FormatData _ uk. java to ensure consistency with the
replaced ` int [ ] _ loops ` with ` atomicinteger [ ] _ loops ` and updated related sleep durations to improve thread safety and
updated AchievementFragment and LeaderboardFragment to handle beta flight status and display feedback to improve user experience by providing feedback when beta
added access, name, and desc to the context in Search. java and SearchMethodVisitor. java to ensure accessibility and context information is
added sleep calls and modified exception handling in IoTDBInsertWithoutTimeIT. java to improve test stability and handle potential interruptions
refactor duration retrieval logic in DLNAResource. java to improve code readability and maintainability
camel - core - optimize the xml structure of the resequencer configuration to reduce the number of elements in the xml namespace
replaced transaction management methods in TableReader. java to improve transaction management and error handling
refactor keymanagertype and trustmanagertype to use getter methods to improve code readability and maintainability by centralizing key and trust manager algorithm retrieval
replaced JavaIsoVisitor with TreeVisitor in PrimitiveWrapperClassConstructorToValueOf. java to improve code clarity and maintainability by using a
exit ( ) for key _ tab event in Blockmania. java to ensure proper handling of keyboard events during tab completion
change access specifier from PACKAGE _ PRIVATE to NONE across multiple classes to ensure consistency in access specifier representation
renamed method ` unHandled ` to ` unhandled ` and introduced a new class ` T9961153 ` with error handling to improve
updated the logic for retrieving stripes and stripe statistics in OrcInputFormat. java to ensure accurate retrieval of stripes and stripe statistics from orc
added a null check for the exception in JCache. java to prevent potential NullPointerExceptions when processing
updated URLs from " http " to " https " in MyhentaicomicsRipper. java to ensure secure access for
added a command line option to display the current jar version to enhance user experience by providing the current jar version
replace split method with splitTokens method in Sketch. java to improve clarity and maintainability of the code
added keyboard configuration and improved rotation handling in ConsoleActivity and TerminalView to enhance user experience by ensuring proper rotation behavior based on keyboard settings
changed the type of ` PriorityQueue ` from ` HitQueue ` to ` PriorityQueue < ScoreDoc > ` and added a suppression for ` Score
added null check for ownerConnectionAddress in ClientSmartListenerService to prevent potential NullPointerExceptions when ownerConnectionAddress is null
camel - core - expose the headermapfactory class name through jmx mbean.
corrected a syntax error in JavaCompiler and Diagnostic classes to improve code readability and maintainability
added InitializingBean implementation and refactored JmsOutboundGateway to use Spring's bean factory methods to improve configuration flexibility and maintainability of the
updated index from 1 to 2 in ArrayFunctions. java to correct the index used in the condition
added error handling and refactored class loader initialization in AbstractScriptProcessor and InvokeScriptedProcessor to improve robustness and maintainability of the
added support for PostgreSQL statements in PooledConnectionImpl and ConnectionPoolTest to enhance functionality by allowing PostgreSQL statements to be proxyed
[ beam - 8470 ] add refresh size estimation to mem table flush test
changed log level from error to warn for memory errors in AtomicRemainder. java to improve logging clarity for potential memory issues
don't sort candidates by minTimestamp in CompactionController. java and add a test for aggressivefullyexpired in TTL
fixed - rblockingdeque. toseconds ( ) and rblockingdeque. toseconds ( ) method may return negative value. #
updated formatting in JobInspectCommand. java for consistency to improve readability and maintainability of the code
refactor Engine class for improved readability to enhance maintainability and facilitate future updates
refactor code to use ` entrySet ( ). stream ( ) ` instead of ` Stream. of ( children. values ( ) ) ` for
[ issue # 3598 ] fix the issue that aclclient don't have session credential.
corrected the condition from ` numIndexDims ` to ` numDataDims ` to ensure correct handling of dimension dimensions
[ hotfix ] [ zeppelin ] don't print stack trace in notebook server
updated the addition of the ExpressionNode to use lt instead of funN to improve clarity and functionality of the ExpressionNode evaluation
changed visibility of the method ` verifyIdsAreStable ` from public to package - private to allow access to the method from other classes
cs - 15422 : improve error message when volume be not attach to a vm
changed method visibility from public to package - private in ItemWriter. java to allow access to these methods from other packages
updated the expected thing ID from " AA : BB " to " test " to accurately reflect the functionality of the test
added a ` toString ( ) ` method to ` ImageNameSubstitutor ` class and created a test for it in ` ImageNameSubstitutorTest `
replaced FSDirectory with RAMDirectory in TestNorms. java to improve performance by using a more efficient directory structure
replaced the declaration of ` mLineHeight ` with a conditional check for its value to ensure ` mLineHeight ` does not exceed its defined
refactor WalletAppKit to improve code structure to enhance maintainability and readability of the code
removed the HAT _ JS _ NASHORN constant from OQLEngineImpl. java to streamline the code by eliminating unnecessary
remove a JCheckBoxMenuItem from the transport menu in ChatTransportSelectorBox. java to ensure that only relevant items are removed from the transport menu
added resolve and replaceTokens methods to AbstractDataImportHandlerTest and Context classes to enhance data import handling capabilities
added nullability checks for bsqBlockChainExplorer in PreferencesPayload. java to ensure that bsqBlockChainExplorer is only set when
added methods to retrieve and set attributes in StandardSession and Session classes to enhance session attribute management and maintain consistency across session management
added assertions to verify the existence of the plain bean in TestDbJson _ List. java to ensure the correct bean is retrieved from the database
updated averages array initialization from pageSize to initialPageCount to ensure averages are initialized with the correct initial page count
refactor BatchCommandLineLauncher to improve code readability to enhance maintainability and facilitate future updates
added EmbeddedDatabaseBuilder and JdbcTransactionManager to BatchMetricsApplication to enable support for HSQL database in batch operations
updated GlowrootLogHttpService to use HttpService instead of UnauthenticatedHttpService to simplify the service implementation by using HttpService directly
pdfbox - 4071 : fix regression in pdfbox - 4071
removed ` notifyAll ( ) ` from ` DocumentsWriter ` and added synchronization in ` DocumentsWriterPerThread ` to improve thread safety and ensure proper
added getter and setter methods for various options and constraints in UiBinding. java to enhance functionality by allowing dynamic property retrieval based on row and column
updated method calls to use ` toString ( ) ` instead of ` name ( ) ` for string representation to improve clarity and consistency in string representation
add a check to only update the stored copy of the subtrees when saving the whole tree to ensure that only updates the stored copy of the
updated the ` Affix ` class to use a new ` seenPatterns ` map instead of a single string to improve flexibility in parsing affix
updated KrakenFee values from ArrayList < KrakenFee > to ArrayList < > in KrakenAdaptersTest. java to
removed unused import of CharTermAttribute in DefaultIndexingChain. java to streamline code by eliminating unnecessary dependencies
rename NBJavacTrees. java file to improve clarity and maintainability of the code
added a check for unsupported data encoding in VectorizedPrimitiveColumnReader to ensure proper handling of unsupported encoding scenarios
added logging for Static Admin UI files in HttpSolrCall. java to improve logging clarity and facilitate troubleshooting
added a call to destroyMetadataServiceProxy to ensure proper cleanup of metadata service proxies
added a constant MAX _ LEVEL _ DEFAULT and modified the getLvlFilter method to handle it to prevent infinite recursion as early as possible
updated error message formatting in HubChangeExecListener to differentiate between Hub communication failure and database change log registration failure to improve clarity of error
added support for TRY _ HARDER _ HINT in AbstractBlackBoxTestCase to enhance error handling during decoding failures
refactor ` executeCompilation ` method to use ` ProcessExecutor. Result ` for exit code handling to improve code clarity and maintainability by using a
updated event handling logic in ObjectStore. java to ensure proper range management for events in query execution
refactor validation logic in ValidatedLocalValidatorFactoryBean to improve clarity and maintainability of the validation validation logic
clear temporary block entities list before iterating to improve performance by avoiding unnecessary clearing of temporary block entities
remove redundant type check in IntrinsifyArrayCopyPhase. java to streamline code by eliminating unnecessary type checks
added logging statements to TestCoyoteAdapter. java to ensure proper logging behavior for the CoyoteAdapter class
replaced ` WantedAnywhereAfterFollowingInteraction ` class with ` WantedAnywhereAfterFollowingInteraction ` and removed ` HasStackTrace
added null checks for ownerAddress and key address in AccountPermissionUpdateActuator and PermissionAddKeyActuator classes to ensure that only valid accounts
refactor CommandComparator to use TreeMap for sorted commands to improve code readability and maintainability by using a more efficient data structure
feat : add support for v2bet and google. cloud. lifescience to v2bet
replaced property assignments with setter methods in BaseSingleTreeBuilder. java to improve code readability and maintainability by using setter methods
updated AsmLoader instantiation to use the correct class loader to ensure proper loading of classes based on the interface class's class loader
pdfbox - 4071 : avoid npe if rlineto and rrcurveto have null point
updated print statements to conditionally print " declare " based on whether a class is definition scope to improve clarity in output formatting based on whether a class
updated the start method to use AbstractHandler instead of EmptyServerHandler to ensure proper handling of requests to the server
updated input listener names in HelloInput. java for consistency to improve code readability and maintainability by using uniform naming conventions
added a check for the root node in AbstractSqmPath to ensure that the root node is valid before proceeding
updated package structure for ReadFolderTest and RenameFileTest to improve organization and clarity of test files
refactor AwtCanvas to handle BufferedImage creation more robustly to improve code reliability and maintainability by simplifying image handling logic
[ gr - 20611 ] fix native image location qualifier in hotspotgraalruntime.
[ beam - 8470 ] remove dataflowportabilityapiunsupported from usestimersinpardo test
chore ( deps ) : upgrade gapic - generator - java to 2.7. 0 and update gax - java to 2.16. 0
added serialVersionUID fields to JumboEnumSet and RegularEnumSet classes to ensure proper serialization compatibility for these classes
refactor CallStack class for improved readability to enhance maintainability and facilitate future updates
log a warning if max size configuration do not allow any data in the map.
updated return statements to use LST elements instead of AST elements to ensure consistency in terminology across the project
updated score calculation and improved readability in ThreadedAcousticScorer. java to enhance code clarity and maintainability by using more des
replaced AssertionError with returning null in NetHooks. java to simplify error handling by returning a null value
use window ( ). title ( ) instead of serveraddress ( )
added makeString method to ParallelIterable, RichIterable, AbstractSynchronizedRichIterable, and AbstractMultiReaderParallelIterable classes to enhance string
replaced the constant ` Ordered. HIGHEST _ PRECEDENCE ` with a constant ` DEFAULT _ ORDER ` in ` OidcServices
added a weakAssociationRule parameter to the WeakAssociationsAnalyzer constructor and updated associated tests accordingly to enhance flexibility in determining weak associations based on rule
updated Deflater class implementation to improve compression efficiency and performance
added error handling for Throwable in Font. java to ensure proper resource management and prevent application crashes
added a null and empty check for content in VersionTypeBinding. java to ensure that a valid version is returned when content is empty
changed the return type of ` loadAttractionsFromLocation ` from ` List < Place > ` to ` List < Place > ` to improve
( chore ) camel - mail - converters : convert content - type to lowercase
changed the access modifier of AUTH _ MAGIC from private to public in OpenSSHPrivateKeyUtil and OpenSSHPrivateKeySpec classes to allow
updated the updateItemLocationsInDatabaseBatch method to accept a boolean parameter for binding to improve flexibility in updating folder names based on feature flag
updated inheritancecachetest to use @ cache ( usage = CacheConcurrencyStrategy. READ _ WRITE ) instead of @ cache ( usage = CacheConcurrency
updated import statements in ConnectOAuth2RequestFactory and added getUserApprovalRequest method in TofuUserApprovalHandler to align with OAuth2 request
fix influx naming convention ( # 645 )
replaced System. out. println with a new dump method in OneProblemHere. java and TwoProblemsHere. java to improve code readability and
updated cookie key from " Cookie " to " Cookie2 " to differentiate between cookies and enhance security
added a static method ` classMetadataUnsupported ( ) ` to ` Platform ` and removed it from ` Subject ` and ` Platform ` classes to
added functionality to clear all functionality in OverviewActionsView. java and integrated it into RecentsView. java to improve user experience by allowing
updated cluster stack version handling and adjusted timeout settings in ClusterStackVersionResourceProvider. java and HostStackVersionResourceProvider. java to ensure consistent
deleted the MemoryLeakTest. java file to remove unused test related to memory leaks
updated the method to retrieve the local IP address based on the local environment to ensure accurate retrieval of the local IP address for testing purposes
added conditional check for MvDWAPI in ServerListener. java and updated BAN _ DELETER flag in Settings. java to
add assertclustersizeeventually to abstractpartitionassignscorrectnesstest
refactor FFIProvider to use SingletonHolder for better management of FFI providers to improve code maintainability and facilitate easier testing of F
added unit tests for handling hierarchical file lists in BatchProcessTest. java to ensure correct functionality of file listing in the batch processing process
added null checks for objectToSave and collectionName in MongoTemplate. java and corresponding test cases in MongoTemplateTests. java to ensure robust
updated position determination logic in NodeClass. java to ensure correct iteration behavior based on input and successor count
added a new field ` accTradeValue ` and its getter method in ` BithumbTicker ` and corresponding test assertions in ` Bith
updated log messages to include segment name in RealtimeSegmentDataManager. java and AvroDocumentUtils. java to improve logging clarity and provide more
changed maxParallelThreads to a static final constant MAX _ PARALLEL _ TASKS in OverseerTaskProcessor. java to improve
replace ArrayList with CopyOnWriteArrayList for header and data readers in FixedByteMVMutableForwardIndex and FixedByteSVMutableForwardIndex to
rename multiple dictionary - related classes to improve clarity and maintainability of the codebase
added a null check for destBuffer in FlipTransition. java to prevent potential NullPointerExceptions when destBuffer is null
( chore ) camel - msv : disable test that fail for some unknown reason
updated boundary condition in DelegationService to ensure proper handling of cases with null values
increased the default value of RandomValueStringGenerator from 6 to 10 in JdbcExpiringCodeStore and CodeStoreEndpointsTests to accommodate
added a check for UniqueConstraint type in StandardObjectChangeFilter to ensure proper matching of unique constraints in the Liquibase database
added support for multiple language codes in MediaDetailFragment to enhance functionality by allowing multiple language codes to be processed
catch arrayindexoutofboundsexception and catch classcastexception in findbugs2
added support for reference and value filtering in ListImagesCmd and ListImagesCmdImpl classes to enhance image filtering capabilities and improve code maintainability
camel - 14284 : added support for bridge error handler in jms endpoint
added conditional checks for exclusion of all ops in OpExclusionUtils. java to ensure that only valid ops are excluded from the exclusion process
added return statements in DatabaseCommand. java to ensure proper execution of database commands
updated Politician names in HonestPoliticianExample. java for clarity to improve readability and maintainability of Polit
[ zeppelin - 2598 ] fix nullpointerexception in beanshellinterpreter
updated the restlet URL generation logic to conditionally set the port based on its value to improve flexibility in configuring REST API URLs based on the port
updated import statements in SchematicFormat. java for better clarity to improve code readability and maintainability by using uniform blocks
added system property to set the maximum query length to 100Mb in QTestUtil. java and removed overridden configurations in SessionState. java to optimize
changed access modifiers from public to private and refactored HttpConfiguration creation in WebServer. java to enhance encapsulation and maintainability of the code
updated sink names for Hadoop and Kafka to use " hdfsSink " instead of " hadoopSink " to improve clarity and consistency in naming conventions
updated the condition to check for the existence of " spark. app. name " before setting it in SparkClientFactory to ensure that the application name
refactor variable names from'whiteName'to'includedName'for clarity to improve readability and maintainability of the code
simonstewart : make maximisewindow more resilient to the rest api
refactor ` getEmbeddedCellsBuckOutBaseDir ( ) ` to ` getRootPath ( ) ` and ` getMainCellBuckOut ( ) `
added an assertion to check for the message containing " entity expansions " to ensure that the error message accurately reflects the context of
updated table offset and length calculations to ensure values are non - negative to improve data integrity by preventing negative values
added a null check for customized form in DirectMethodHandle. java to ensure that customized form is properly initialized before use
refactor coordinate calculations in LineChartRenderer to improve clarity and maintainability of coordinate handling logic
refactor flavor handling in AndroidBinaryDescription to use a loop for better readability to improve code clarity and maintainability by simplifying flavor validation logic
changed buffer index from offset to i in LwjglGL11. java to ensure correct buffer generation for improved performance
added new classes Property and PropertySuper, and created test classes TestClassResolutionFail for error handling to improve test reliability and ensure proper error messaging
added a condition to check if the shutdown hook is enabled before removing it to ensure that the shutdown hook is only removed when the shutdown hook is
updated FilterChainProxy to use FilterChjainProxy instead of String for URL and FirewalledRequest to improve code clarity and maintainability
replaced ` Collections. sort ( intermediateResult ) ` with ` Arrays. sort ( values, 0, size ) ` and updated the return statement
added checks to ensure ` schema ` is loaded before loading tables in ` MetaDataBasedSQLCompletionProvider ` and ` QueryTypeAnalyser ` to
initialized ` baseType ` to null in ` DatabaseInfoRetriever ` and initialized ` literalPrefix ` and ` localizedTypeName ` in ` MutableColumn
updated link syntax in multiple Java files to improve code readability and maintainability
replace instances of ObjectEqualEvaluator and ObjectNotEqualEvaluator with final static instances to improve efficiency by reusing instances
updated references from " osx _ x86 - 64 " to " osx _ x86 _ 64 " in multiple test files to ensure
added sound effect handling in AllAppsView. java to improve user experience by enabling sound effects during playback
changed the exception declaration from Exception to IOException in the main method to indicate that the main method should throw an IOException instead of a general Exception
added granularity support for left - axis in BarChartActivitySinus to enhance chart visualization capabilities
refactor version comparison logic in GdxSetup. java to use a new method to improve code readability and maintainability by centralizing version comparison logic
added OS support checks in ContextHandlerGetResourceTest. java to ensure tests are only executed on supported operating systems
added close methods to Connection, JsonAsyncHttpPinotClientTransport, and PreparedStatementTest classes to ensure proper resource management and prevent potential memory
log4j2 - 1349 use linkedblockingqueue instead of int - based event count
[ beam - 4142 ] skip hadoopresourceidstest. testisdirectory ( ) when expect a directory
removed unused import statements in IsometricStaggeredTiledMapRenderer. java to improve code clarity and reduce unnecessary dependencies
unbind the item from the item service to ensure the item is properly removed from the list
refactor Config and Attribute classes to improve code readability and maintainability
removed conditional checks for mDownHitTarget in OtherActivityTouchConsumer. java to simplify the condition logic for better readability and maintainability
refactor NavbarButtonsViewController to use Configuration for UI mode to improve code readability and maintainability by centralizing UI mode logic
replace ` abort ` with ` throw abort ` in ` PolyBenchLauncher. java ` to improve error handling by throwing an exception instead of
refactor variable assignments for bootstrapMethodIndex and refKind in ClassWriter. java to improve clarity and maintainability of the code
added BlockFormattingContext parameter to several methods in BasicPanel. java to enhance rendering capabilities by incorporating block formatting context
added a new method ` getStdErrorOutput ` to ` WorkerProcess ` and updated error handling in ` WorkerShellStep ` to improve error
added null checks for the wrapped list in CheckedListReplaceAll. java and improved error handling in Collections. java to ensure proper handling of null
added a test for handling asynchronous write operations in SslConnectionTest. java to improve test reliability and ensure correct behavior of asynchronous writes
added support for multiple device configuration change listeners in DeviceFlag and FeatureFlags to enhance functionality and improve device configuration management
added JUnit Ignore annotation to GatewayRSocketIntegrationTests. java to temporarily disable the test due to issue gh - 1114
removed the import of MalformedURIException from StandardRequestHandler. java to eliminate unnecessary dependencies and improve code clarity
added a JavascriptExecutor to focus the end date box in InstructorFeedbackEditPage to improve user experience by ensuring the end date box is
added synchronization for ownTradesObservableSet in KrakenStreamingTradeService. java to ensure thread safety when accessing shared resources
replace System. err. println with System. out. println in ChangeableUrls. java to improve logging clarity by using a standard output level
added support for ` randomAccessRows ` parameter in ` SparseRowMatrix ` to enhance flexibility in accessing sparse vector instances
bug : don't delete storage volume when there be no storage pool
updated file handling for HDFS paths based on configuration to ensure correct path is used for Hadoop tasks
updated import statement for ImmutableMap in UdfTestProvider. java to ensure compatibility with the latest Java version
added a method to reset internal state and registered the memory CCT provider in MemoryCallGraphBuilder to ensure that the memory CCT provider is
add null check for multiuserchatopset in conferencechatmanager. getpeer ( ).
don't save a file if it can not be write
added folder sync functionality in DrawerActivity and created FolderSyncActivity to enhance user experience by integrating folder synchronization functionality
[ hotfix ] [ test ] fix flaky test in sequentialchannelstatereaderimpltest
add handling for tokenization in SpanishTreeNormalizer to improve tokenization accuracy for numeric words
replaced the method of retrieving point values from heapPointWriter to use getPackedValueSlice to improve clarity and maintainability of point value retrieval logic
added a new LocaleRandomizer class and its associated test class to facilitate random locale generation in the application
tika - 3620 -- add test for font - type1 and font - printer - metric
updated NOI18N version from " 8.0. 2 " to " 8.0. 1 " in Installer. java and AutoUpgrade. java
refactor connection name handling in TCPTransport. java to improve readability and maintainability of the code
updated the read timeout logic in Http2AsyncParser. java to ensure read timeout is always zero when blocked
updated the initial delay value from 120 to 600 in TimelineMetricConfiguration. java to increase the delay duration for better resource management
fix typo in primary key error message
added support for custom date formats in ThirdEyeJiraClient to enhance date handling functionality in the integration tests
replaced the ` generatePriority ` method with a new ` generatePriorityBody ` method in ` HeadersGenerator ` and ` FrameHeader ` classes to
added a constant ` MAX _ SCALAR _ REPLACE _ CODE _ SIZE ` and updated the condition for scalar replacement to ensure that scalar replacement
added a new ` DATE _ TAKEN ` column to the ` projectionTest ` array and updated sorting order in ` MediaProvider. java `
updated drawImage parameters in TexturePacker2. java to account for image dimensions to ensure correct positioning of images based on their dimensions
added WebSocketUpgradeFilter to JettyWebSocketServerContainer and removed FilterHolder usage in JettyWebSocketServletContainerInitializer to ensure proper handling of WebSocket upgrade filters and
added shutdown calls to validateSignService, TransactionsMsgHandler, NodePersistService, and TransactionsMsgHandler to ensure proper resource management and
added support for RawJsonRequestBody annotations in JaxrsSwaggerGeneratorContext. java and created a new RawJsonRequestBodyAnnotationProcessor. java
added a new method ` newTarget ` to the ` LoggerUtils ` class to enable customizable logging of target types and extensions
updated ListBeanContainer to use ArrayList instead of ArrayList and added corresponding test class to improve type safety and facilitate testing of bean container operations
hbase - 2658 testmetricsregionserver # testblockcachecounthitpercent fails ( # 2657 )
camel - 14850 : add ondone to clear fileinputstream cache on completion.
added device ID to position in TeltonikaProtocolDecoder to ensure proper identification of position data
replaced ` Files. readFirstLine ( ) ` with ` Files. asCharSource ( ). readFirstLine ( ) ` to improve
added a visitAssignop method to Attr. java and created a new Test class in FailOver15. java to ensure proper handling of null
added a boolean flag ` enableAccountHandling ` to ` BaseActivity ` and modified the onCreate call accordingly to enable account handling functionality based on user
consolidated imports and refactored the heuristically find main component logic into a separate method to improve code readability and maintainability by
updated the ` DrillViewTable ` constructor to accept a ` List < String > ` along with a ` View ` parameter to enhance flexibility in
added default configurations for PooledByteBufAllocator in PooledByteBufAllocatorL to improve memory allocation flexibility based on system properties
updated array type check from double [ ] to short [ ] and added a new class CloneArray with serialization tests to ensure correct cloning behavior for
added LLAP _ IO _ THREADPOOL _ SIZE configuration to HiveConf to specify the number of threads to use for low - level IO thread
fix for jdk 11 ( jdk 8 and 11 )
updated latitude and longitude range calculations in LatLonGrid. java and added a test for growing polygons in TestLatLonGrid. java to
simonstewart : add invisibility check for element that don't exist.
added a new parameter ` isInsertOverwrite ` to the ` replaceFiles ` method and updated its logic accordingly to enable overwrite functionality during file
added testing methods for the SomeInnerClass reflector in ReflectorTest. java to ensure correct retrieval of the enclosing object from the reflector
updated configuration key from " disable _ r _ java _ idea _ generator " to " auto _ generate _ android _ facet _ sources " to
updated log messages to include author information in HubChangeExecListener. java to improve clarity of logged messages related to changesets
added properties and getter / setter methods to the Link class and updated QuickLinksConfigurationModuleTest to ensure proper handling of overridden properties and improve test
updated the ` @ EqualsAndHashCode ` annotation in ` YamlConfigFileDTO. java ` and added a ` toString ` method in ` InitialConfig
updated generic type parameters for startCall and newCall in AwaitableServerClientCallConfiguration. java to improve type safety and clarity in the
added @ CallerSensitiveAdapter annotation and modified forName methods in mmm Class. java to enhance security by ensuring caller - sensitive class loading
replaced ` Matchers. isEmptyOrNullString ` with ` IsEmptyString. emptyOrNullString ` in ` RequestItemRepositoryIT. java ` to
replace LinkedBlockingQueue with ThreadPoolExecutorEx in GroupExecutor. java to improve thread management by using a more specific implementation
changed the visibility of the setSecurityContextAccessor method from package - private to public to allow access to the method from other classes
updated imports and annotations in TimeStepdefs. java for better organization and clarity to improve code readability and maintainability by using updated options instead of
add spark _ isolated and spark _ recessive recipe to the mod banners list. close # 359
updated the ` createProxy ` method calls to use ` getUri ( ) ` instead of ` ExchangeSpecification ` to ensure the correct URI is used
removed debug print statements from RecordGenerator. java to clean up the code and improve readability
( chore ) camel - kafka : fix auto commit enable test
replaced lockService. releaseLock ( ) with outputStatement ( sql ) and added hasDatabaseChangeLogLockTable flag in LoggingExecutor and Standard
added @ SuppressWarnings ( { " unchecked ", " rawtypes " } ) annotations to AbstractAuthorizeTag and AuthorizeTagCustomGranted
added synchronization to pageStore methods in Database. java to ensure thread safety during file operations
camel - spring - boot - auto - configuration - maven - plugin : use resolvedproperty instead of project property
updated the currency pair from baseSymbol to counterSymbol in the VirtExTicker adapter to accurately reflect the trading accuracy of the ticker
( chore ) camel - core : migrate messagehelpertest to support. dump.
replace UUID. randomUUID ( ) with System. getProperty ( " testId " ) to ensure compatibility with system properties
added synchronization to date and number format parsing in DefaultJobParametersConverter to ensure thread safety when modifying date and number formats
updated package - info. java files for mmm and ppp packages to improve documentation clarity and maintainability
change height scale from 256 to heightScale in FractalHeightMapGrid. java to ensure consistent height scaling across the application
removed unnecessary equality check in SecurityConfig and replaced assertEquals with assertNotSame in SecurityConfigTests to simplify equality comparison logic and improve test clarity
updated the default value of ` dump - partition - id ` from ` true ` to ` false ` to ensure that ` dump - partition -
added unit tests for UTXO functionality in UTXOSetTest. java to ensure correctness of transaction data handling
added JavaRuleUtil for handling explicit unused variable names to improve code clarity and maintainability by centralizing rule handling logic
pdfbox - 4892 : avoid npe, a suggest by valerybokov
added a test for overriding previous restart parameters in JsrJobOperator to ensure correct behavior of job restart properties in the JsrJobOperator
added a new boolean field ` disallowBatchOnCascade ` to the ` DatabasePlatform ` class to provide functionality for disallowing batch - based
refactor principal assignment logic in JaasAuthenticationHandler. java to improve code readability and maintainability
replaced core closing logic with a custom executor service using MDCAwareFixedThreadPool to improve resource management and ensure proper closure of core resources
added conditional visibility logic for mActionsView in RecentsView. java to ensure mActionsView is displayed only when fullscreenProgress is zero
refactor JobParameters initialization to use a ternary operator to improve code readability and maintainability
refactor BasicEntity and TestUtil classes for improved clarity to enhance code maintainability and readability
added tests for matching devices in SchemaRegionBasicTest. java to ensure that the expected number of devices matches the specified criteria
added error handling for metric collection in MetricsEventBus to improve robustness by logging exceptions during metric collection operations
added conditional logic to calculate mSumChange when the max is non - zero and created EigenvectorCentralityBuilder class to ensure
updated port handling in LookupIPv6 and improved string formatting in LookupIPv4 and LookupNameWithColon classes to enhance port reliability and
updated geometry data handling to use UnsignedBytes instead of float arrays to improve compatibility with larger data sizes and ensure correct data type is used
set the amplifier to zero in BlockEntityBeacon. java to ensure that the entity's amplifier is always set to
refactor TubeCalc class to improve code readability to enhance maintainability and readability of the code
disable the health check feature by default and update the task scheduler to use a fixed delay to improve reliability of the health check process
updated the type of ` groups ` from ` List < Class <? > > ` to ` List < Class <? > > ` and
added timeout for JList selection in Nimbus L & F to address issues related to incorrect colors in Nimbus L & F
added a daemon flag for the scheduled executor in StatisticsReporterComponentImpl. java to allow application to exit via main method completion
fix the lexicon version for the gradle build.
added reflection access check in JavaAdapterFactory to enhance security by verifying access permissions
( chore ) camel - core : use lazysessioncreation = true for test
added an additional parameter to the initIOContext method and updated its usage across multiple classes to enhance record reading capabilities and improve code clarity
deleted ClassLoaderHolder, LoaderManager, and VerticleManager classes to remove unused components to streamline the codebase
added a method to handle workspace root changes in FileStore and updated file handling logic in JavaLanguageServer to improve file management and ensure correct file
added error handling around session callback registration and unregistration in PackageInstallerCompatVL. java to improve stability by catching exceptions during session callback
updated index creation paths for " index. cfs " and " index. nocfs " in TestBackwardsCompatibility. java to ensure compatibility with
refactor AkkaRpcServiceUtils to use a BiFunction for creating a new AkkaRpcService instance to improve code readability and maintainability by
added retry configuration for mapreduce map attempts in TestExportSnapshot. java to improve reliability of mapreduce operations by retrying attempts
pdfbox - 4071 : avoid npe if font be not symbolic
added a new test class SslConnectionTest for SSL connection handling to ensure proper handling of closed SSL connections before filling
added checks for IPv4 and IPv6 address types in InetAddress. java and NetworkInterface. java to ensure proper handling of invalid address types and
added a test for date serialization in the collection using Gson to ensure correct representation of date objects in the collection
refactor Message class to improve code readability to enhance maintainability and facilitate future updates
nifi - 1065 : fix npe in putdatabaserecord. insert (... )
adjusted the calculation of the loop index in TableOutput. java to correct the calculation based on the running width
pdfbox - 4892 : avoid npe, a suggest by valerybokov
added priority assignment for format strings in FormatStringChecker to ensure consistent handling of format strings based on their used state
[ java ] ignore non - final loop variable in a for - each statement.
added PDF version and full compression settings to PDFExporter and updated sample path in PDFExporterTest to enhance PDF generation capabilities and ensure proper display of
added unit tests for LdapUserDetailsMapper to ensure correct handling of multiple role attribute values
added LDAP read timeout configuration to LdapConfiguration to enable flexible configuration of LDAP connection timeout
updated TestDescription and TestDescription classes for consistency to improve code maintainability and readability
refactor Pixmap, ManifoldPoint, and TextureRegion classes to improve code organization and maintainability
replaced instances of ` shouldCacheIterator ` and ` shouldAvoidAllocation ` with ` shouldAvoidAllocation ` in multiple classes to improve memory
added a condition to check if the state handler is invalidated to ensure proper handling of gesture state when the state handler is invalidated
updated mMaxDistanceForFolderCreation from 6f to 55f and removed mOverScrollPageIndex from mOldRotationYs array to improve
updated OciConfigConfigSource to use ConfigProviderResolver instead of ConfigProvider to enhance configuration handling and improve code maintainability
refactor Testjsig. java for improved readability to enhance maintainability and facilitate future updates
updated mana calculations to use a new method for better accuracy to improve code readability and maintainability by standardizing mana handling logic
chore ( deps ) : upgrade gapic - generator - java to 2.7. 0 and update gax - java to 2.16. 0
added @ SuppressWarnings ( " serial " ) annotation to P11TlsPrfGenerator. java to suppress serialization warnings for the P11
updated logic for handling empty and non - empty files in DataRegion. java to improve error handling and ensure proper cleanup of deleted files
added new classes for handling various switch cases in Switch21. java and Switch19. java to improve code readability and maintainability by providing specific
updated error message from " java. lang. String cannot be converted to test. MyTest. ComparableType " to " java. lang.
added support for standalone XML processing in StreamHelper and created a test class TestStreamHelper to enhance XML processing capabilities and ensure correct handling of standalone
increased the maximum size check from Integer. MAX _ VALUE to Integer. MAX _ VALUE - 8 and improved error handling in Int2ObjectCache
updated WebSecurityConfiguration and WebSecurityConfigurationTests to ensure filter chains are ordered based on bean definitions to improve ordering of security filter chains during bean
updated the order type from TimeInForce. GTC to null in BinanceTradeService. java to ensure consistency in order type handling
refactor FloatRangeRandomizer to extend AbstractRangeRandomizer < Float > instead of LongRangeRandomizer to enhance flexibility in random float values and
changed the KEY _ SEP character from'\ 0'to'\ t'to correct the character representation for better clarity
camel - core - optimize to get component documentation and json schema.
added error handling for retrieving the upper bound in SourceUtils and created a new test class TestGetBound to improve robustness of the getBound method
refactor LeafFilterFactory to use a dedicated method for retrieving the leaf filter builder based on Parquet type to improve code readability and maintainability by central
added a check for the presence of the SCOPED _ TARGET _ BEAN _ PREFIX before extracting artifact name to ensure artifactName does not contain
added a loop to read certificate serial numbers and issuer DN in HttpsSegmentFetcher. java to improve certificate handling and logging for debugging purposes
refactor default value retrieval logic and introduce a new class DnsFallback to improve handling of null values and introduce a new class for testing DNS fallback functionality
added LocatableFactory import and modified exception handling in DefaultTheme. java to improve dependency management and provide more informative error messages
changed the type of the ` success ` field from ` boolean ` to ` String ` in ` DepositAddress ` class to improve clarity by
removed the ` drop ` method from the ` WindowsSecurity ` class and added a try - finally block to ensure proper resource management and prevent potential
removed " address " scope from the registration scope in CommonOAuth2Provider. java and its corresponding test in CommonOAuth2ProviderTests. java
replaced the ` submit ( ) ` method with a new ` Start ( ) ` class that manages the ` _ started ` state to improve thread
added new constants for hue and saturation values in WLedBindingConstants and modified the sendGetRequest logic in WLedHandler to
refactor the isValidCaller method to use a Set for VALID _ CALLERS to improve readability and maintainability of the code
added a method ` caseJSRInst ` to the ` InstSwitch ` class to enable handling of JSR instructions in the InstSwitch class
updated SubscriptionActivatingSubscriber to include a PlatformTransactionManager parameter to enhance transaction management during subscription activation
refactor DBMSProcessor to use StringBuilder for query and prepared statement operations to improve code readability and maintainability by using StringBuilder for prepared statements
set the contact elevation based on the Android SDK version to ensure compatibility with devices running Lollipop and higher
renamed ` typeInformation ` to ` identifier ` in multiple files to improve clarity and consistency in naming conventions
refactor file reading and writing to use AccessController for privileged actions to enhance security by ensuring privileged actions are executed
refactor GroovyParserVisitor and GroovyPrinter to improve handling of binary operations to enhance readability and maintainability of the code
updated error message formatting in MetaDataFetcher. java to improve clarity of error messages for better debugging
updated byte handling in RecordInputStream and UnicodeString classes and added a test for reading and writing of Unicode strings to improve data type consistency and ensure
added a test for downloading files with Norway characters in their names to ensure proper handling of special characters in downloaded files
replaced RuntimeException with CancellationException in AsyncResource. java and FingerprintScannerSample. java to improve error handling and provide clearer error messaging
added a null check for statistics before processing cache to prevent potential NullPointerExceptions when statistics is not initialized
updated test methods in MongoTemplateTests and added a new test for removing objects from explicit collections to improve test coverage and ensure correct behavior of MongoDB
refactor multiple Java files for consistency and clarity to improve maintainability and readability of the codebase
[ hotfix ] [ table - planner - blink ] correct error message for deterministic coder
added functionality to manage the scrolling behavior based on the state of the clear all button revealed to improve user experience by ensuring proper scrolling behavior
refactor HiveIcebergMetaHook to use a map for COMMON _ HMS _ PROPERTIES to improve code readability and maintainability by
added a method to check if an address is in use and updated related logic to improve error handling and address management in the server
added a call to ` argList. add ( 0, " - cp " System. getProperty ( " test. class. path " )
updated logger usage in Grep. java to use verbose _ schema instead of verbose logging to improve logging clarity and provide more detailed schema information
updated import statements and added @ Override annotations across multiple Java files to enhance code clarity and ensure proper method overriding
add support for nested use savepoint in transaction management
replaced int fetchSize with ThreadLocal < Integer > fetchSize and updated related methods to improve thread safety and ensure proper resource management
[ java ] use conductor idle strategy instead of shared network idle strategy.
refactor the handling of blocking calls into a separate method ` handleBlockingCall ` to improve code readability and maintainability by encapsulating the logic
added handling for HDP _ VERSION in SliderAppsViewControllerImpl. java to ensure HDP _ VERSION is correctly set based on configuration
added ` loaderClass ` and ` loader ` fields to ` JavacProcessingEnvironment ` and implemented ` close ` method in ` JavacProcessingEnvironment `
added DeepCloner to ParameterizedRobolectricTestRunner and updated method signatures in RobolectricTestRunner to enable deep cloning of parameters and improve
bind the Boolean instance to the WebServer's JETTY _ SHOW _ STACKTRACE property to enable stack trace visibility in the
added type checking in NativeObject. java to ensure proper handling of non - object types
refactor SystemDictionary to use new OopField constants to improve code clarity and maintainability by using more descriptive field names
added support for RSAPublicKey and ECPublicKey in JwkKeyListView. java and updated JsonWebEndpoint. java to enhance key management
make native image heap writable only when spawning.
updated MBeanServerMXBeanUnsupportedTest. java file to improve test reliability and maintainability
removed unused import of OrderClassLoaders in MavenPluginCollector. java to clean up the code and reduce unnecessary dependencies
replaced instances of ` Validator ( ) ` with ` validator ( ) ` and added ` getOwnerAddress ( ) ` method in multiple actuator classes
added a new file ` Main. java ` that implements a broker plugin for establishing a connection with a stomp broker
added min and max values to the sendCommand for ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYS
add empty index to protobuf dependency graph edge.
[ java ] don't add correlationid to the async command if it already exist.
added conflict saving logic in FileDataStorageManager and updated file handling in FileDownloader, FileUploader, and FileDataStorageManager to ensure consistent
updated type parameters in ExecutionContext, AbstractMethodInvokingDelegator, AbstractTransactionalResourceItemWriter, and AbstractTransactionalResourceItemWriter to improve
replaced ` StrUtils. splitFileNames ` calls with direct calls to ` splitFileNames ` across multiple filters to simplify code and improve readability
added conditional logic to set driver properties based on the driver type to ensure compatibility with different database drivers
added serialVersionUID to mockedMethods in SignedSupportingClassProxyFactory and updated ignore warnings in PartialMockingWithConstructorUsingEasyMock
updated timestamp handling in FileChangedExclusiveReadLockStrategy for clarity to improve readability and maintainability of the code
replaced instances of EnvironmentInstance with context wrapping in ExecutionContext. java and LocalExecutor. java to improve code readability and maintainability by using context
added onBufferChanged ( ) method to TerminalView and updated buffer height handling in TerminalTextViewOverlay to ensure proper handling of buffer changes and improve
updated the processConfigFile method to include a check for the existence of ". " to ensure that the pid value does not contain ". "
updated freeze logic to support V2 features in OperationActions and OperationRegistry to enhance compatibility with V2 features and improve performance
added an ` _ insecure ` property and its getter / setter methods in ` TlsConfig `, and modified the trust manager implementation in `
refactor JavadocTool to streamline location checking and introduce a new class T7091528 with test cases to improve code readability and facilitate
rename ` nodeColumns ` to ` edgeColumns ` and introduce ` EdgeColumnsGDF ` edgeIdColumn ` to improve clarity and functionality of
added cascade option to the OneToOne relationship in DefaultUserInfo. java to enable cascading of associations between users
refactor equals and hashCode methods in Message class to improve code readability and maintainability
updated UTF - 1 encoding in AsyncProvidersBasicTest. java to ensure proper handling of special characters in response body
removed the method ` isKeySerializerTypeVariableSized ( ) ` from ` RocksDBSerializedCompositeKeyBuilder ` to streamline the
added ` getStaticPermissionsField ` method to ` ProtectionDomain ` and updated ` SubjectDomainCombiner ` to use it to improve access
added null checks for recipe in RecipeHandlerBrewery, RecipeHandlerElvenTrade, and RecipeHandlerFloatingFlowers to improve stability
refactor parsing logic in Parser. java to improve readability and maintainability to enhance code clarity and ensure correct parsing behavior
added showConnectionErrorPopup ( ) method and modified error handling in UploadMediaDetailFragment and UploadMediaPresenter to improve user experience by providing a
added a new file ` Issue596. java ` to implement a test for handling HTTP 404 requests to ensure proper handling of unhandled requests
updated bitwise operation from ` ~ ( 1 < < bitIndex ) ` to ` ~ ( 1L < < bitIndex ) ` to ensure
refactor ImportLayoutStyle to improve code readability to enhance maintainability and facilitate future updates
updated ConsoleUIService to conditionally use the system console based on the TERM _ PROGRAM and MINTTY environment to enhance flexibility in controlling
refactor ShadowAccountManagerTest to use TestAccountManagerCallback instead of AccountManagerCallback to improve test clarity and maintainability by using more descriptive
replaced the declaration of ` enclosingType ` with a direct call to ` universe. lookup ( ) ` to simplify the code by eliminating
rename methods and variables in Pairs and InPairsExpression classes for consistency to improve code readability and maintainability
changed the timeout parameter from 0 seconds to 1 seconds in PutAllCallable. java to simplify the code by removing unnecessary timeout settings
fixed npe in mqclientinstance when consumer be empty or not
[ java ] generate source identity in preparation for driver.
added a new file TopTabAction. java that implements the Presenter interface for managing the toolbar panel to provide a visual representation of the toolbar
camel - core - dynamicrouteprocessor now use reactiveexecutorservice instead of a custom executorservice.
updated imports and annotations in AggregateItemReaderTests class to improve test readability and maintainability
updated AbstractObjectValueTypeMap to use generics for Procedure instances to improve type safety and maintainability of the code
added a method to set the number of wikidata edits in the AchievementsActivity and updated the OkHttpJsonApiClient to
added a check to ensure len does not exceed Short. MAX _ VALUE in OfflineSorter. java to prevent IllegalArgumentException from being thrown when len
added a BugAccumulator for tracking absolute values in DumbMethods. java to improve tracking of minimum values and ensure proper bug reporting
updated multiple category dataset classes for consistency to improve code maintainability and readability across the project
updated error handling in ProvisionClusterRequest to include acceptable credential types to improve clarity of error messages related to credential type validation
updated random value generation logic in TestVectorUtil. java to ensure values are uniformly distributed between iterations
changed the return type of the ` compareBy ` method from ` int ` to ` long ` in ` DateUtil. java ` to improve
added SSL configuration to TestUtil. java and set a system property " ssl " in PGPropertyTest. java to ensure SSL property is properly set
danielwagnerhall : enable safebrowsing by default in chrome
added null checks before setting light configuration in BaseMotorMount and RecoveryDevice classes to prevent potential NullPointerExceptions when setting light configuration
added a condition to exclude non - transparent transcoding configurations in DLNAResource. java to ensure that transcoding is only applied when the configuration
added handling for empty lists in DataTable and TableDiffer classes to improve error messages when dealing with empty lists
added a custom ignore tag handling in RobustJavaMethodParser to ensure proper cleanup of native code when the tag is not specified
camel - core - optimisticlockingexception should return optimisticlockingexception instead of runtimeexception
added a boolean variable ` requiresReflection ` to ` BeanDefinitionInjectProcessor. java ` and created a new class ` ParentConfigProperties ` to
updated PreferencesActivity to extend LimitlessIDEActivity and added onInsetsUpdated method to improve layout handling and ensure proper insets updates
deleted the ClusterNodeInfo class to remove unused code to streamline the codebase
corrected the return value in ShieldedTransferActuator. java to ensure accurate representation of the return value
added debug output statements for Standard and Legacy ciphersuite in ServerHandshaker. java to improve visibility into the handshake process for better debugging
added onTemplateChosen method to both ChooseRichDocumentsTemplateDialogFragment. java and ChooseTemplateDialogFragment. java to handle template selection
added functionality to handle duplicate nodes with labels in the ImportContainerImpl class to improve error handling and ensure unique identification of nodes
added a new file R2303044ListSelection. java to implement a GUI with a list selection functionality
[ java ] use hasclienttimedout instead of checkkeepalivetimeout in driverconductor.
added a null check for mWorkspace in Launcher. java to prevent potential NullPointerExceptions during execution
added a test for verifying the existence of a compound property in StepScopePlaceholderIntegrationTests to ensure that the correct name of the compound is
hive - 17515 : fix bug in statsruleprocfactory ( jesus camacho rodriguez, review by
added logic to handle path and query parameters in the SpringBootDocBuildTemplate. java file to ensure that mock values are correctly set based on the
replace Hashtable with a for - each loop in NotificationServiceImpl. java and SystrayActivator. java to improve code readability and maintainability by
replaced ` DistBuildCachingEngineDelegate ` with ` CachingBuildEngineDelegate ` and added conditional logic for materializing source files to enhance caching
updated the error message in RuntimeException to include additional context to improve error reporting for parsing errors
added a conditional check for debug logging in WidgetsModel. java to ensure log messages are only logged when debug is enabled
updated Console and Scanner classes to improve code readability and maintainability
updated the calculation of numTerms in SimilarityBase and added a test for discount overlaps in TestSimilarityBase to improve accuracy of discount over
added verification and reflection checks for mail sending methods in SimpleMailMessageItemWriterTests and MimeMessageItemWriterTests to enhance test reliability by
added new exit and quit functionalities to Global. java and removed the " quit " attribute from ScriptingFunctions. java to streamline exit
refactored LoanBrokerGateway and LoanBrokerSharkDetectorDemo to use Spring's context management to improve resource management and ensure
rename method ` getFirstUnverified ` to ` findFirstUnverified ` across multiple files to improve clarity and consistency in method naming
added error handling and cookie retrieval in VmwareContext. java to improve robustness by throwing exceptions when no cookie is found
updated authority assertions in ResinAcegiAuthenticatorTests to ensure consistency in authority retrieval logic
eckey. bigintegertobytes ( ) now take 32 byte instead of r, s.
updated the property key for disabledModList from " fml. disabledMods " to " fml. modStates " to ensure compatibility
refactor account selection handling into a separate method ` showAccountChooserDialog ` to improve code readability and maintainability by encapsulating account selection logic
improve error message when client can not connect to the server
added error handling for unexpected empty function return values in ValidatorContractController to ensure proper handling of empty results from validator smart contract calls
replaced JsonReader with a null check for the root file in TexturePackerFileProcessor. java to improve robustness by avoiding null pointer exceptions
removed null check for datasource properties in PooledConnection. java to simplify the code by eliminating unnecessary checks
updated the target MB value from 10 _ 000 to 1 _ 000 and modified the count calculation in TestRefprocSanity. java to increase
added null checks for currentConsole and systemErr before writing data to enhance robustness by preventing potential NullPointerExceptions
added a credential refresh delay in KinesisConfigUtil. java to improve resource management during Kinesis operations
replaced ` AlertDialog. Builder ( getContext ( ) ) ` with ` showInfoAlert ( R. string. media _ detail _ title, R
updated variable names and method signatures in T4501661. java for clarity to improve readability and maintainability of the code
updated Jetty version from 1.7. 0 _ 60 to 1.7. 0 _ 31 in ModulesTest. java and TestBadUseCases. java to
replaced multiple specific imports with a wildcard import and added a method to check dependency presence to simplify import statements and improve dependency resolution logic
added a HashSet to manage multiple ZipFileInputStreams to ensure proper resource management and prevent memory leaks
rename ` DATAMATRIX ` to ` DATA _ MATRIX ` across multiple BarcodeFormat files to improve clarity and consistency in naming
added methods to run active and idle processes based on the size of keyRanges to improve resource management and prevent potential resource leaks
[ hotfix ] fix typo in blobserver getactiveconnections method
replaced findAny ( ) and findFirst ( ) methods with findFirst ( ) and toSet ( ) methods in AnnotatedDelegate and SyntheticAnnotated classes to
added ppc64le architecture checks in Bits. java and ByteArrayAccess. java to ensure compatibility with additional PPC architectures
updated the error message in RoboMonitoringInstrumentation to provide more context on activity resolution issues to enhance debugging capabilities by providing more context on activity resolution
updated waitWithDeadline method to use Long. MAX _ VALUE instead of MINUTES to improve timeout handling and prevent potential overflow issues
use java. time. instant instead of java. time. instant for test
refactor BytesRef class to improve code readability to enhance maintainability and facilitate future updates
added a toast message to inform users that YouTube Player does not work on Lollipop yet to improve user experience by informing users that
added error handling for unexpected dollar quotes and named quotes in SQL statements to ensure proper parsing and error reporting for SQL syntax errors
added a null check for mVibrator before executing the vibration condition to ensure that the vibration functionality is only performed when the v
updated color settings and modified arrowhead and arrowtail values in DotRenderer. java to improve visual clarity and ensure correct representation of foreign key columns
added methods to check for encoded configuration in HiveConf. java and updated output format in SetProcessor. java to improve configuration handling and ensure correct
pdfbox - 2576 : catch stringindexoutofboundsexception instead of stringindexoutofboundsexception
refactor X509Certificate class to improve code readability to enhance maintainability and facilitate future updates
added a new method ` getUriString ` to ` WavefrontConfig ` and created a test class ` WavefrontConfigTest
removed BitmapLruCache from TimeLineCursorAdapter and added new methods for loading images in NetworkedCacheableImageView to streamline image loading
removed unnecessary parameters from the ofFloat method across multiple animation classes to simplify the code by eliminating unnecessary parameters
updated controllers version from " 2.0. 0 " to " 2.1. 0 " in DependencyBank. java to ensure compatibility with the latest version of
refactor LaunchedURLClassLoader to improve code readability to enhance maintainability and facilitate future updates
added imports for ResultSet and DataAccessUtils, and refactored query result handling in DataSourceHealthIndicator to enhance data retrieval capabilities and improve error
add cache - control : no - cache and no - store to admin - only filter
updated warning message to use Locale. ENGLISH for consistency to ensure consistent formatting of messages across different locales
added an Analyzer parameter to the SolrQueryParser constructor to enable customizable analysis of query results
updated copyright years and licensing for Universal Gcode Sender ( UGS ) to ensure compliance with UGS licensing standards and
removed the semicolon from MainTest. java to clean up the code and improve readability
refactor TypeContributions class for improved readability to enhance maintainability and facilitate future updates
added handling for VoidColumnVector in VectorizedBatchUtil to ensure proper memory allocation for non - void columns
updated method call from ` templateName ` to ` req. getName ( ) ` in ` StatementGenerator. java ` to ensure the correct request
removed the method ` isTypeMatch ` from ` AbstractConfig ` to simplify the configuration logic by eliminating unnecessary complexity
[ java ] : add offer method to the session decorator.
renamed methods in XForwardedRemoteAddressResolver from trustAllXForwardedRemoteAddressResolver to trustAll ( ) and maxTrustedIndex (
added a new annotation interface ` NoBootstrap ` and modified ` BootstrapInserter ` to check for non - bootstrap annotations to improve handling of annotations
hbase - 2657 tabledescriptorchecker # checkmaxfile and tabledescriptorchecker # checkmemstoreflush and tabledescriptorchecker # checkmem
replaced maxCommits with requestedCommits in BranchGraphServlet. java to ensure that the number of commits does not exceed the requested threshold
added InvocationTargetException to the main method and updated exception handling in SwingUtilities. invokeLater to improve error handling and ensure proper execution of UI components
added a new constant BUILD _ ID and a method to fill it in the cache based on its value to improve code clarity and maintainability by
removed unused imports from TransactionCapsule. java to clean up the code and reduce unnecessary dependencies
removed the markAsDone method call from HttpProtocol. java to streamline the code by eliminating unnecessary parameters
added import for TezConfiguration and integrated it into TezConfigurationFactory to ensure proper configuration is used for Tez integration
added a null check for keyPurposes in TimestampedSigner. java to prevent potential NullPointerExceptions when keyPurposes is null
removed the visibility check from the conditional statement to simplify the logic for better readability and maintainability
added a method to forget recent sounds in OpenALAudio. java and implemented it in OpenALSound. java to ensure that recent sounds are
updated state handling in SimpleBasePlayer and added a test for discontinuity reporting in SimpleBasePlayerTest to ensure proper state management and improve
added DecimalFormat constants for number tick units in NumberAxis. java to improve formatting accuracy for numeric tick marks
refactor TargetGraphAndBuildTargets to use ImmutableTargetGraph and AbstractTargetGraph to improve code readability and maintainability by consolidating target graph and
removed the ` IndexFileNameFilter ` class and updated the ` accept ` method in ` IndexFileDeleter ` and ` TestIndexInfoWriter `
added a flag for full bounding box handling in ForgeDummyContainer. java and updated related logic in ForgeHooks. java to improve
added a compression level parameter to several constructors in ApkBuilder and SignedJarBuilder classes to allow customization of compression behavior in the output jar
added a test method to include static fields in the MirrorTest class to ensure that static fields are correctly included in the stub jar
added handling for UNDEFINED _ METRIC _ SIZE in FieldSpec, MetricFieldSpec, SingleValueIterator, and SingleValueSet classes to improve data
updated formatting for messages in multiple failures error tests to improve readability and consistency of error messages
replaced ` id. hashCode ( ) ` with ` Objects. hashCode ( id ) ` and removed the super ( ) call in ` Kuc
added CacheManager integration and updated test cases in SpringDataJPAJoinFetchPaginationTest. java and ForumService. java to enhance cache
updated file path construction to use locale prefixes instead of german pronunciation files to ensure consistent localization across different locales
added a check for empty postBody before creating a FormBody builder in SimpleHttp. java and updated test cases in TestHttpPlugin. java
added a dispatcher to the ClientSideSlb and updated its usage in ClientSideSlbTest to improve thread management and ensure proper shutdown of
added conditional logic to calculate V2 based on flipY flag to ensure correct V2 value is returned when flipping is enabled
replace HazelcastException with InvalidConfigurationException in DefaultDiscoveryService. java to improve error handling by providing clearer exceptions for configuration issues
added null check for the ` contextPath ` variable in ` MetricsPublisher. java ` to ensure ` contextPath ` is set to ` " NA "
[ drools - 7 ] avoid npe when reiniting class in project classloader.
added B _ TREE _ MAP _ ROOT _ HEADER value in BTreeMap. java and initialized it in SerializationHeader. java to ensure
added support for ` prefix _ header ` and ` precompiled _ header ` in ` AppleDescriptions ` and ` AbstractCxxSourceRuleFactory
replaced WeakReference with a new class AccWeakReference for security checks to enhance security by ensuring weak references are accessed with a security context
changed visibility of findNextIndex method from package - private to private in ObjectMap, ObjectSet, and OrderedMap classes to enhance encapsulation and
changed the value of isDirect from true to false in VertexBufferObject. java to ensure proper handling of direct data
removed redundant code in MaryClient. java to streamline code for better readability and maintainability
changed the return type of ` localToAscendantCoordinates ` methods from void to Vector2 in ` Actor ` and ` Group ` classes to
pdfbox - 5764 : use input. limit ( ) instead of input. capacity ( ), a suggest by valerybokov
added a null check before removing the close hook from the context to prevent potential NullPointerExceptions when context is not initialized
updated border spacing logic in CellLayout and DeviceProfile classes to improve layout consistency based on container type
replaced NumberFormat. getInstance ( Locale. US ) with ValueNumeric class for handling numeric parsing to improve code clarity and maintainability by centralizing numeric
added a condition to check if the response is deferred before proceeding to ensure that the authentication process does not proceed when the response is not deferred
updated argument checks in StartArgs. java from " -- module - startd - ini = " to " -- add - to - start "
added a default value for Hive in DynamicPartitionFileRecordWriterContainer to ensure consistent retrieval of the default partition value based on configuration
[ hotfix ] [ stream ] add nullability to streamnode and streamgraph
updated resolution logic in DefaultArtifact. java to include classifier and artifact ID to improve accuracy of artifact identification based on classifier presence
camel - kafka : fix the bug that offset get state be call twice.
added error handling for NoClassDefFoundError in AnnotationSubstitutionProcessor. java to improve user feedback when dependencies are missing in the classpath
updated GMAIL NOTIFICATIONS plugin from " plugin. jabberaccregwizz. enabled " to " plugin. jabberaccregw
updated CryptoKey and CryptoKeyOrBuilder classes for consistency to improve code maintainability and readability
( chore ) camel - core : limit the number of thread in lumberjack test
added checks for player health and scoreboard in GlowPlayer. java and PlayerUpdateHandler. java to ensure player information is only returned when
refactor Exchange class to improve code readability to enhance maintainability and facilitate future updates
updateuser api key and secret key must be specify with apikey and secretkey
refactor switch - case statements to use a conditional operator for MfaProviderType to improve readability and maintainability of the code
refactor AbstractMetaDataExportMojo to improve code readability to enhance maintainability and facilitate future updates
added handling for SQLIntegrityConstraintViolationException in Hive. java to improve error messaging when materialized views are used by at least
updated property name from " githubAccessToken " to " gitHubAccessToken " to ensure consistency with the project property naming conventions
added a new file ` RoboExecutorService. java ` that extends ` org. robolectric. util. concurrent. RoboExecutorService `
added subgroups to the menu when a group is a root to enhance user experience by allowing hierarchical group additions
updated method name from ` buildServiceNameAndSpanName ` to ` buildServiceAndSpanName ` and modified the condition for path validation to improve
updated TestDynamicNumberOfGCThreads to use base arguments for dynamic number generation to improve flexibility in managing dynamic number of GC threads during testing
refactor ` getHostFlavorMap ` methods to return ` Flavor ` instead of ` ImmutableFlavor ` to improve type safety and clarity in handling host flavors
refactor SQL creation and parameter handling in CreateTable. java and CreateTableDeParser. java to improve code clarity and maintainability by centralizing
updated the background drawable initialization in ChatViewerFragment. java to ensure the background has a fixed alpha value of 64
test ( refactor ) : migrate ctiteratest to junit 5 ( # 2451 )
added clear calls to token and result methods across multiple tokenizer classes to ensure proper resource management and prevent memory leaks
pmd : don't crash on a block statement in a pmd file
added checks for missing configurers in StateMachineConfiguration, StateMachineFactoryConfiguration, and StateMachineFactoryConfiguration classes to ensure that state machine
simonstewart : remove the check for " link = " in ElementFinder. java and add TestLocators import in WebDriverSel
added maximum and minimum fractional digits for BigDecimal and Float types in StringConverter and corresponding test cases in StringConverterTest to improve precision handling and ensure
fix for http : / / code. google. com / p / mybatis / issues / detail? id = 479
updated touchable insets from ` TOUCHABLE _ INSETS _ CONTENT ` to ` TOUCHABLE _ INSETS _ REGION `
removed the condition checking for the presence of the'~'symbol in FencedCodeBlockParser. java to simplify the code by eliminating unnecessary
added support for a socket timeout property in multiple classes to enable configurable socket timeout values for socket read operations
added sleep functionality to ElementAttributeTest to prevent interruptions during test execution
updated BufferedReader initialization to use UTF - 8 encoding to ensure proper handling of character encoding in HTTP response
refactor List class to improve code readability to enhance maintainability and readability of the code
added constructors to AsyncFileImpl that accept URI and OpenOptions as parameters to improve error handling and context management in asynchronous file operations
added an API annotation to the CucumberEngineExecutionContext class and marked the CucumberEngineExecutionContext as final to enforce that the CucumberEngineExecutionContext
nuagevsp : listvspdomaintemplates command should return a list of domain templates only if hostid be not present
renamed the method ` retryUploads ` to ` retryFailedUploads ` and updated its implementation to improve clarity by accurately reflecting the
updated Java version handling in ConstantPoolTagTests to ensure compatibility with the latest Java version
reformatted code and improved error handling in Compiler. java to enhance readability and maintainability of the code
added an ` removeAllHeaders ` method to the ` AsyncHttpClient ` class to enable the removal of headers from the client header map
replaced Vector with ArrayList in Main. java to improve performance and memory efficiency
updated the default GRID COLUMN from 4. 0f to 3. 0f to adjust the GRID column's default value for better
added a condition to check if ` getQB ( ). hasTableDefined ( ) ` is not needed for view creation to ensure that
updated regex pattern in TestHS2HttpServer. java to ensure proper handling of special characters in date patterns
added error handling for object retrieval in GraphPrinter. java to improve robustness by catching potential exceptions during object creation
simonstewart : add a test that try to access pages with an insecure ssl certificate.
updated byteOffset calculation in ByteBlockPool and added a test for too many allocations in TestByteBlockPool to ensure correct byte offset handling and
make interactionvalueencoder locale - independent
added error handling for unexpected exceptions in TcpTransport. java to improve robustness by handling unexpected errors gracefully
added @ SuppressWarnings ( " serial " ) annotation to PApplet. java to suppress serialization warnings for the PApplet class
replaced ` AbstractBuildRuleWithResolver ` with ` AbstractBuildRule ` in ` OcamlDebugLauncher ` to simplify class hierarchy by using
add ability to save and discard any change to jabref
added checks for response type and client ID in OAuth20DeviceCodeResponseTypeRequestValidator and updated error logging in OAuth20AccessTokenEndpointController to
added a check for index value in DrillBuf. java to ensure proper validation of index values during buffer processing
added a new method ` initTableMapperJob ` to handle input format initialization in ` TableMapReduceUtil. java ` to improve flexibility in
removed the call to ` append ( jrubyClasspath, testClasspathElements ) ` in ` AbstractJRubyMojo. java ` to
llvmpolygloteval : don't throw an exception if no language be available
added deprecation warn log for RESERVE in ReplicationHandler. java to ensure that the RESERVE feature is only enabled for LUCE
renamed ` cacheVariableName ` to ` cacheForeignKey ` and updated related method names to improve clarity and consistency in naming conventions
changed the type of the ` generateECKeyPair ` method from ` long [ ] handles ` to ` Object [ ] keyBytes ` to ensure
added handling for ` JobStatus. SUSPENDED ` in ` StateWithExecutionGraph ` and refactored ` RestartingTest ` to
replaced the singleton instance of ` RotationTouchHelper ` with a direct instantiation of ` mRotationTouchHelper ` to simplify the instantiation process and
refactor port table filtering logic in UniFiControllerCache. java to improve readability and maintainability of the code
rename ` lwp _ id ` to ` unique _ thread _ id ` and introduce a new method ` getThreadIntegerRegisterSet0 ` to
refactor OfferBook list item deletion logic to improve clarity and maintainability to enhance error handling and logging clarity for offer management
update test to use testsupport. isDefaulttlsprotocolForTesting13 ( connector ) instead of testclientcerttls13
added conditional logic to handle mock types in MockitoMethodInvocationControl. java and updated test assertions in SystemClassUserTest. java to improve mock
replaced instances of NotLoadedException with a new instance of PartialDatabaseObject across multiple classes to ensure that NotLoadedException is consistently treated as a
replaced the import of DisplayUtils with a direct import of OCFile in FileDisplayActivity to simplify the code by eliminating unnecessary dependencies
added error handling and cleanup methods in StoreDirect and StoreWAL classes to improve robustness and prevent resource leaks during file operations
added a call to ` UI _ HELPER _ EXECUTOR. execute ( ) ` in ` AbsSwipeUpHandler. java ` to
added a boolean field ` hidden ` to ` CommandArgumentDefinition ` and corresponding getter / setter methods to enhance functionality by allowing toggling of hidden
updated the remote address from 8090 to 9092 in LoggingKafkaPluginTest to improve test reliability by using a more reliable network address
use geotools. bean ( ` ` catalog'' ) for get catalog from style group
added permission checks in InstallShortcutReceiver and modified completeAddShortcut method to handle malicious intents to enhance security by preventing malicious intents from being
added setId methods to TiledMapTile and AnimatedTiledMapTile classes and defined an integer id in StaticTiledMapTile to
refactor Manager class for improved readability to enhance maintainability and facilitate future updates
updated JDBC connection and session versioning in JDBCExample. java and SessionExample. java to ensure compatibility with the latest versioning and improve session
added new properties for schemas and includeSchema in LiquibaseGenerateChangeLogMojo. java to enhance the generation of change logs by incorpor
replace putIfAbsent with put for registryCache to improve performance by avoiding unnecessary operations on the same channel
plannerbenchmarkrunner # warmup ( ) now log a warning instead of error.
removed the ` final ` modifier from the ` doPutRecord ` method in ` AbstractCacheRecordStore. java ` to enforce immutability
updated path formatting in Tools. java and removed unnecessary CallbackBridge references in FileSelectorFragment. java to improve code readability and maintain consistency in path
added new test methods for handling large response content in FastCGIProxyServletTest. java to improve test coverage for HTTP GET requests with large
added startService call for ReadInteractionsService to enable interaction handling in the service
added a conditional check for ` lintClassfile ` before logging warnings to ensure warnings are only logged when ` lintClassfile ` is present
added logic to set the SMTP port dynamically based on configuration to allow dynamic port configuration for SMTP connections
added retry logic for SSLFactory renewal in TlsUtils. java to improve reliability of SSLFactory renewal operations during retries
updated the date format from " yyyy - MM - dd'T'HH : mm : ss'Z'" to " yyyy - MM
updated error message assertion in SpyingOnRealObjectsTest to clarify the reason for mocking a private class to Mockito
added an ` _ isEndsOnNL ` boolean and corresponding getter and setter methods in ` InlineBoxing ` and ` LineBox `
updated filePathString assignment to handle potential null pointer exceptions to improve robustness by preventing potential NullPointerExceptions
removed unused import of DocCollection in TopicStream. java to clean up the code and reduce unnecessary dependencies
refactor NinjaServletContextTest to use a dedicated ServletInputStream for multipart requests to improve code readability and maintainability by encapsulating input stream logic
added properties for web exposure in AbstractCasEndpointTests to enhance functionality by allowing exposure of web resources
added validation to ensure the current graph is a dynamic graph to prevent runtime errors caused by invalid graph configurations
added a new EagerInitFactory and modified DefaultBeanContext to throw a DisabledBeanException to enable bean creation with a disabled bean type
added support for suppressing of exceptions in the jsonpath expression to improve flexibility in handling JSON path expressions
replaced the call to ` ControllerLeaderLocator. create ( _ helixManager ) ` with a direct call to ` ControllerLeaderLocator. create
updated usage messages for CLHSDB and HSDB from " clhsdb " to " hsdb " to accurately reflect the command
refactor FaultTolerantStepFactoryBean and SimpleStepFactoryBean to streamline item listener registration to enhance code readability and maintainability by reducing redundancy
removed deprecated Write class from FlinkBatchTransformTranslators and SinkOutputFormat and WriteSinkITCase to streamline the codebase by eliminating
refactor ShadowAccessibilityManagerTest to use accessibilityManager instance instead of shadowAccessibilityManager to improve test reliability by ensuring accessibility manager is
register a notification for the group'Flutter Usage Statistics'in FlutterInitializer. java and register it in Analytics. java to enhance notification
refactor ` SourcePathRuleFinder ` and ` SourcePathResolver ` to implement ` AbstractBuildRule ` instead of ` AbstractBuildRuleWithResolver ` to
refactor PostgreSQLEnumDataTypeHelper to use a new class PostgreSQLEnumDataTypeHelper to improve code organization and maintainability by centralizing enumerated column data
updated the path assertion in LogFileTests to use File. separatorChar to ensure compatibility with different file separators
updated references from ` getMapLocalWork ( ) ` to ` getMapRedLocalWork ( ) ` across multiple files to ensure consistency in local work
added support for dropping index table in HiveMetaStoreClient to ensure proper handling of unsupported operations when dropping index tables
added a condition to update disabled flags based on visibility to ensure actions are only shown when the visibility is not visible
added a conditional to set a specific syntax highlighter for Windows in Repl. java to ensure proper highlighting for non - Windows environments
added an ` addOptionalLocalVariable ` method to ` BugInstance ` and updated related bug handling in ` CrossSiteScripting ` to improve
change from ` toUri ( ). getRawPath ( ) ` to ` toString ( ) ` in ` HadoopPinotFS. java ` to
removed the listener from the stage capture listener in SelectBox. java to ensure proper cleanup of the stage capture listener
changed the value of _ metaDataComplete from true to false to ensure that the metadata is complete before proceeding
refactor removeTaskTarget method to execute on a separate thread using THREAD _ POOL _ EXECUTOR to improve code readability and maintainability by
added support for environment variables in JsBundleGenrule and JsBundleGenruleDescription to expose release flavors as environment variables in Android builds
updated type casting logic in Lower. java and added a new class T6500701. java with a test method to improve type handling
added test cases for crlfNewLines in comments and Javadoc to ensure proper handling of new line characters in import statements
added hub mode configuration to AbstractLiquibaseChangeLogMojo and defined it in AbstractLiquibaseMojo to enable configuration of the hub mode
updated the instantiation of skipPolicy in JsrFaultTolerantStepBuilder. java and removed unnecessary null checks in JsrChunkProcessor.
added error handling for linkDb retrieval in IndexerMapReduce. java to ensure linkDb is only used when the path exists
refactor the initialization of ` setIndexerThreadPoolMethod ` to use reflection for accessing the ` IndexWriterConfig ` class to improve code maintainability and ensure
updated the address format in GameCanvasImplementation. java to ensure the correct phoneNumber is used for communication
refactor ` executionsById ` to use a new ` copy ` method for better serialization and deserialization to improve code readability and maintainability by encapsulating
added a new file ` DownloadTest. java ` for downloading images using HTTP requests to facilitate testing of downloaded images in the application
updated language handling in multiple classes to normalize language codes to ensure consistency and prevent issues with language codes
updated argument handling in GenericUDFRound to throw UDFArgumentTypeException for both input and output types to ensure correct argument types and improve error
added a null check for the selectedVersion before checking its presence to avoid potential NullPointerExceptions when the selectedVersion is not set
added multiple AntPathRequestMatcher entries in SecurityConfig. java to ensure compliance with the security configuration requirements
added JUnit @ Ignore annotation to TestConcurrentDppInserts. java to temporarily skip tests that are not ready for execution
added a check for class qualified names before creating a bean definition writer to ensure bean definitions are only created when the concrete class name matches the class
added an @ Ignore annotation to HttpClientRedirectTest. java to temporarily skip the test due to known issues
updated SUPPORTED _ THING _ TYPES from ENERGY _ MANAGEMENT _ SUPPORTED _ THING _ TYPES to ENER
remove conditional check for SocketStatus status in AprEndpoint. java to simplify code logic by eliminating unnecessary checks
deleted the SunToolkitSubclass. java file to the functionality was no longer needed in the project
replaced MathUtils imports with Matrix4 utility methods in DefaultRenderableSorter and Matrix4 utility classes to improve code readability and maintainability by centralizing
added a test for registering wrapper handlers before primitive types in TypeHandlerRegistryTest. java to ensure proper handling of type handlers before primitive types
added a method to convert PDLab objects to RGB images to enhance image processing capabilities for PDLab objects
updated URLs to use BuildConfig constants instead of CommonsApplication constants to improve maintainability and consistency in configuration across the application
camel - main - http : add fake health check for camel - http
added a null check for the block position before retrieving it to prevent potential NullPointerExceptions when accessing the getBlockPos ( ) method
added a test method ` testAlterTableWithViewsIT ` to verify the functionality of ` AlterTableWithViews ` with index extendment to
updated offset handling in FileFloatSource. java and added assertions in TestFunctionQuery. java to improve clarity and ensure correct indexing behavior based on
removed the ID field from fields in MongoRecordReader to ensure proper cleanup of unused fields
added disconnect method to YeelightHandlerBase and updated connection handling in DeviceBase and YeelightConnection to ensure proper handling of disconnection
added support for AUTO _ INCREMENT in SQL commands to ensure compatibility with database standards and improve error handling
added functionality to retrieve existing shared index informers in SharedInformerFactory to enhance the management of shared index informers in the application
server : fix npe in templatemanagerimpl. updatetail ( )
refactor image handling in ShadowBitmapFactory to use RobolectricBufferedImage for better clarity to improve code readability and maintainability by using a more des
removed deprecated static final constants in LauncherProvider and LauncherSettings to streamline code by eliminating unused constants
move stocktickstream. dat to org / drools / examples / broker
added legendTop variable and updated offset calculations in PieChart. java to ensure proper positioning of legend elements based on their properties
added a condition to return early if the world transformation is not zero to improve rendering efficiency by avoiding unnecessary processing
added a new file MaryScriptCreator. java to create a program that reads lines from a specified directory to facilitate automated testing of
added a flowFile attribute to store the remote host in the session to facilitate the retrieval of the remote host from the request
delete compaction log file when compaction log file be delete
updated the xlink : href attribute from " xlink : href " to " href " in the ComponentDescription class to ensure the correct hyperlink
( chore ) camel - aws2s3 : use a configurable timeout checker
hbase - 2658 make isclustershutdown ( ) public and add log for regionserver state
added null check for span before logging to prevent potential NullPointerExceptions when span is not initialized
added trimming of the active option string to ensure the option is trimmed before adding it to the configuration
added depth preference handling in DepthController. java to enable wallpaper zoom settings based on user preferences
added an assertion to check the success count of overseer actions to ensure the overseer accurately reflects the success state of the
removed the method ` getKernelVersion ( ) ` from ` LinuxFileStore. java ` to streamline the code by eliminating unnecessary
refactor ExecConstants to improve code readability to enhance maintainability and facilitate future updates
added ScreenRecordRule import and annotation in ThemeIconsTest. java to enable screen recording functionality in the test
added a new method ` setScanAttributeForPaging ` to ` TableSnapshotResultIterator ` and updated its implementation in ` ScanUtil `
added a condition to check if lowRange is less than 100000000000L in Request. java and RequestV2. java to ensure lowRange
changed access modifiers of keySizeEstimator and valueSizeEstimator from private to protected and updated cache size calculations to enhance encapsulation and improve cache size est
updated the method call from ` getUuid ( ) ` to ` getZoneUuid ( ) ` to ensure correct retrieval of zone UUID from the host
[ zeppelin - 5598 ] add utf8 encode to livy response
removed a redundant check for the existence of zfs before removing it to simplify the filesystem removal process by eliminating unnecessary checks
replaced Gson's toJson method with a String'json'and updated variable names for clarity to improve code readability and maintainability by using a
updated polling duration from 2 seconds to 5 seconds in SoftAutoCommitTest. java to improve test reliability by allowing more time for poll operations
catch exception when call listener before and after event.
renamed multiple classes related to dial functionality to improve clarity and maintainability of the dialing functionality
corrected formatting of error logging in SyncQueue. java to improve code readability and maintain consistency
updated the version of the Ryuk container from 0.4. 0 to 0.5. 1 to ensure compatibility with the latest features and improvements
updated the method to retrieve additional bootstrap paths in BootClassLoaderHook and created a new TestHook class to enhance functionality by integrating additional bootstrap paths
update patchy library jar path to use the correct cp version to ensure compatibility with the latest FML library versions
[ hotfix ] [ yarn ] use createyarnclusterdescriptor instead of yarnclient
add stats of no data in localmapstatsprovider when no data be present
deleted the AllTests. java file to remove unused test classes
added UNICODECHAR constants for nonbreaking and zero - width space in AbstractWordConverter to improve readability and maintainability of character handling
added a new test class ` ShouldNotStarveMemoryOnLargeStackTraceInvocationsTest ` to ensure that large stack trace invocations are not star
updated the method name from ` getResultMappings ( ) ` to ` getResultMappingsForRowKey ( ) ` to improve clarity and consistency in naming
added eventHandled flag to UIText. java to ensure that events are handled correctly during text processing
deleted the ` Controller. java ` file and renamed ` Weldby. java ` to ` WeldModule. java ` to remove unused
added a boolean flag ` monitorCaptureGroupsInEmptyCheck ` and modified conditional checks in ` TRegexBacktrackingNFAExecutorNode ` to
added a protected variable ` liquibaseProLicenseKey ` and removed the system property ` LIQUIBASE _ PRO _ LICENSE _ KEY
mondrian : rename setmeasureshierarchymemberreader to setmeasureshierarchymemberreader
added a debug info value update handler to SubstrateOptions to enable customizable debugging information generation
mondrian : fix typo find by codespell on fossies. org
added ` getFriendPaths ( ) ` method to ` KotlincStep `, ` KotlincLibraryDescription `, and ` KotlincTo
added BRAH, BRAHMI, and MANDAIC aliases to Character. java and updated file handling in CheckScript.
updated equality checks in ExecutionCommand and added a new method to StageUtils in TestActionScheduler and TestStageUtils to improve code readability and ensure
updated Mockito library version to ensure compatibility with the latest testing framework
refactor OCFile class for improved readability to enhance maintainability and facilitate future updates
added a ` toString ` method to the ` SystemScope ` class to provide a readable string representation of the object's properties
updated the handling of CSS parameters in CSSParser. java to improve clarity and maintainability of the code
added tests for the ` LocalIndexReverseScan ` functionality in ` LocalIndexIT. java ` to ensure that the query returns all rows for
replaced InstrumentationRegistry with ApplicationProvider in BaseAndroidTestCase. java and updated test methods in BackupHelperTest. java and LanguageHelperTest.
updated toast messages to use localized strings instead of hardcoded strings to improve localization support and maintainability of the code
refactor condition checks in RendererUtilities and add a new test method in RendererUtilitiesTests to improve code readability and ensure correctness of live item search functionality
refactor KrakenStreamingAdapters to use ArrayNode for storing ask and bid data instead of an iterator to improve code efficiency and maintainability
added error handling for SQLite operations in FileContentProvider. java to ensure that the same column is added twice when upgrading from 24 - > 30
removed System. err. println ( line ) statement from AsyncServletIOTest. java to eliminate unnecessary console output during test execution
added hashTableLoadFactor and improved data size computation in ConvertJoinMapJoin. java to enhance performance by utilizing hash table load factor for
updated the ` buildView ` method to accept a Context parameter and set background resources accordingly to enhance flexibility by allowing customizable background resources based on
added an ` withAuthentication ` method to ` SecurityMockMvcResultMatchers ` and corresponding tests in ` SecurityMockMvcResultMatchersTests ` to
vpc : set vpcid to null instead of long
[ beam - 10955 ] skip flink savepoint test on jdk11
changed the type annotations from ` int ` to ` @ Cue. TextSizeType ` and ` @ Cue. EdgeType ` in
modified condition for actions iteration in Actor. java to ensure actions are processed only when the index is valid
updated the BitmexStreamingExchange class to use BitmexExchange instead of BaseExchange to align with the latest bitmex releases and
add test for virtual metadata in relationshiprestrepositoryit
added null check for spatial before initializing numTris to prevent potential NullPointerExceptions when spatial is null
updated lastTokenFiltered in ConditionalTokenFilter and added setPositionIncrement functionality in FixedShingleFilter, TestRandomChains, and TestConditionalToken
fix unsafe store node state after graph creation
replaced the superclass method ` putAddress ` with ` io. putAddress ` to streamline the code by using a more descriptive method name
added a test to verify the presence of any CAS event in CasAuthenticationEventListenerTests to ensure that the test verifies that the event
removed unused final fields from AuthenticationAttrProcessor. java to improve code clarity and maintainability
added null check for the key in MacOSXPreferences. java and created a new class RemoveNullKeyCheck. java to ensure that a null
added a setTypeface method to CodenameOneTextPaint that throws a RuntimeException if typeface can not be set in runtime
implemented the ` open ` method in ` AzurePinotFS `, ` LocalPinotFS `, and ` HadoopPinotFS `
simonstewart : remove the deprecated fail ( string ) method
removed the condition checking for item size in SolrRequestParsers. java to simplify the logic by eliminating unnecessary complexity
refactor DefaultResultSetHandler to use a boolean field for constructor mappings to improve code readability and maintainability by centralizing constructor mapping logic
updated SQL syntax in CreateTableGeneratorTest. java to ensure correct SQL syntax for foreign keys
refactor filtering logic in VectorizationContext. java to improve clarity and maintainability of the code
updated the declaration of ` moveSelectorConfig ` in ` ExhaustiveSearchPhaseConfig. java ` to ensure that ` moveSelectorConfig
replaced the existing ReorganizeTableStatement constructor with a new modifyDataTypeStatement to streamline the code by eliminating unnecessary parameters
updated cluster name from " cluster _ name " to " cluster _ name " in SystemPropertiesUtils and related classes to improve clarity and consistency in
refactor peer connection handling in PeerGroup and ClientConnectionManager to improve error handling and logging clarity
added handling for multiple style strings in Nano. java to ensure consistent styling across different platforms
use nbtcompoundtag. fromadventure ( ) instead of nbtcompoundtag. fixup ( )
updated return message from " Use ` String ` " to " No # toString ( ) on String " to clarify the purpose of the returned string
updated memory allocation from " - Xmx64m " to " - Xmx32m " to optimize memory usage during testing
replace int retryFailed method with FailureContext retryFailed method and add DataProviderRetryAnalyzer and DataProviderRetryTest classes to improve error handling and
updated the return value from ` tokens [ 0 ] ` to ` tokens [ bandwidth ] ` to ensure the correct data type is used for token
simonstewart : implement the ability to capture network traffic.
refactor doPrintEntry method to simplify parameter handling and improve clarity to enhance readability and maintainability of the code
removed unnecessary whitespace in TaskAsyncCallTest. java to improve code readability and maintain consistency
added opacity and background color validation in Dialog and Frame classes to ensure dialogs are properly decorated and non - opaque to prevent runtime errors
made the ` state ` field final to ensure immutability of the ` state ` field
refactor Redis configuration handling for sentinel and standalone configurations to improve clarity and maintainability of the code
add a property to track the lastseendelayedmessage in chatroomjabberimpl.
replaced the instantiation of ` new Callback. Adapter ( ) ` with ` new Callback. NOOP ` in ` notifyContent ( listeners, response
refactor share operation creation to use OperationsService instead of GetSharesOperation to improve code maintainability and facilitate share operation handling
updated the logic for determining if a value is injected in BeanDefinitionInjectProcessor. java and added @ Inject annotation in FieldPropertyInject. java
updated y values from ` getMinBuildHeight ( ) ` to ` yStart ` in ` ClassicPlotManager. java ` to ensure correct
added handling for NullPointerException in SmackIntegrationTestFramework to improve robustness by gracefully handling NullPointerExceptions
tmi - jpeg : don't read sub - directory sub - file if they don't exist.
added support for versioned target graph mode ENABLED _ LS in VersionTargetGraphMode. java and modified the executor initialization in VersionedTargetGraphCache
added a condition to check if the video format is video before proceeding to ensure proper handling of video formats during parsing
refactor AutoMlClient to improve code readability to enhance maintainability and facilitate future updates
added a load method to LwjglNativesLoader and modified its visibility in LwjglApplet and LwjglNativesLoader to
added support for Unicode escape in CSV handling in CSV requests to enhance CSV processing capabilities and improve error handling
refactor grant type validation in ClientRegistrations and update test cases in ClientRegistrationsTests to improve clarity and ensure correct handling of grant types in
updated exception handling in Throwable and SuppressedExceptions to include detailed cause information to improve error reporting and provide more context for exceptions
added test cases and modified OrderedResultIterator initialization in DerivedTableIT. java and ClientAggregatePlan. java to improve test coverage and ensure correct
added " RSquare " to the map in RegressionEvaluator and assertion in StreamExpressionTest to ensure the correct representation of the " RSquare "
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4684. add
refactor SparkPlanGenerator to use a mapWork variable for input paths and maximum split sizes to improve code clarity and maintainability by centralizing split
added methods to retrieve folder and country images in PdfJndiReport and PdfSessionInformationsReport classes to improve image handling by centralizing
updated cache caching logic in JwtIssuerReactiveAuthenticationManagerResolver and added a test for trusted issuer in JwtIssuerAuthenticationManagerResolverTests
updated resource check from ` exists ( ) ` to ` isReadable ( ) ` in ` AbstractScriptDatabaseInitializer. java ` and added a
added an ` isMethod ` parameter to the ` Function ` constructor and modified related methods in ` CxxMethodsTest ` to enable conditional handling of
replaced milliseconds. sleep ( 500 ) with milliseconds. sleep ( 500 ) in AbstractBasicMockingIntegrationTest. java to improve test reliability
added a new file KernCrash. java to demonstrate font - related issues to implement and demonstrate font - related functionality in KernCrash
added fail ( ) method to LinkedHashTreeMapTest. java to ensure proper error handling during test execution
added a method to retrieve network interface IPs based on a specified prefix to enhance functionality by allowing users to specify network interface prefixes
added cleanup of housekeeper task in hikaripoolfactory.
updated the condition to check for the correct client address in syncStateSet to ensure correct handling of synchronization state for both client and slave addresses
refactor assertions in Assert. java to improve code readability and maintainability
added a new test class ` Issue247Test ` for database operations to ensure the functionality of the database operations is correctly implemented
changed the type of ` results ` from ` CategoryItem ` to ` String ` in ` CategorizationFragment ` to improve type safety and
added validation logic to validate max age based on whether the current year is less than 29 and not 28 to ensure that the person does not exceed
added new GrblLookups for alarm and error codes in GrblController. java to improve code readability and maintainability by centralizing error
added a check for non - screens before retrieving the workspace scroll format to ensure the correct string is returned when there are no screens available
removed the " count " parameter from the ` getTrades ` method in ` BittrexMarketDataService ` and ` BittrexMarket
refactor ConsoleReader and MemoryHistory to improve string handling and index validation to enhance code readability and ensure proper handling of empty strings
updated the file path format for jdkPath in JavaBuild. java to ensure compatibility with updated file naming conventions
refactor references from ` getDescription ( ) ` to ` getType ( ) ` across multiple classes to improve code clarity and maintainability by using a more
added a logger parameter to JFCModel constructors and updated related methods to accept a logger for better control logging
added a check for positive tolerance in MaximumInscribedCircle. java to ensure that the tolerance is non - negative to prevent runtime errors
added methods for creating and dropping views in TestUtil. java and corresponding test cases in DatabaseMetaDataTest. java to improve test reliability and ensure
added checks for stable float and double values in NaNTest. java to ensure tests are only executed on supported architectures
added DesktopTaskbarUIController and updated TaskbarManager to utilize BaseQuickstepLauncher to improve UI responsiveness during taskbar interactions
added and removed task count listeners in SearchModFragment and ModItemAdapter to improve task management and ensure UI updates occur on the UI thread
updated file handling methods in mmm and ppp files to improve code clarity and maintainability
refactor interceptor handling in AnnotationGrpcServiceDiscoverer and GrpcServerAutoConfiguration to improve clarity and maintainability of interceptor management
renamed DomainAwareServicesManager to DomainAwareServicesManager and updated its implementation to improve clarity and consistency in naming conventions
add debug log to resourcepackloader. getpackinfo ( modid )
chore : update gapic - generator - java version to 2.1. 0 ( # 505 )
added new grow and growY methods to the Cell class to enhance functionality for managing cell dimensions
refactor DefaultInputHandler to use a final map for bindings to improve code clarity and maintainability by using a more descriptive variable name
added a try - catch block to handle potential exceptions in ActiveMQTestCase. java to improve error handling and prevent application crashes
replaced long array with byte array in MetricsMemoryTester. java and added memory fail count check in TestDockerMemoryMetrics. java to improve
deleted JobParametersPrototype. java to remove unused code to streamline the codebase
added a security configuration option to the MappingsTable class and updated related tests to enable or disable security functionality based on configuration settings
rename ` APPLE _ SWIFT _ OBJC _ CXX _ HEADERS ` to ` APPLE _ SWIFT _ EXPORTED _ OBJ
changed the DUMP _ TO _ FILE constant from true to false to disable dumping functionality during tests
updated the ` codecNeedsEosPropagationWorkaround ` method to accept ` MediaCodecInfo ` instead of a string to ensure compatibility with different
[ java ] : remove conditional check before setting the publisher limit.
added a check for no output options in BaseFormatter. java to ensure proper handling of output options when no output options are available
don't use ssl when use 443
added error output options to DOMOutputOptions in DOMConverter. java to ensure proper error handling during DOM subtrees
refactor assertions in Assert. java to improve code readability and maintainability
added'retained'property to the'event'class and updated related methods accordingly to enhance event management by allowing broader retention of events
updated JSON structure in TestResultSummary and EventSerializationTest to include testCaseName to ensure accurate representation of failure cases in JSON output
[ flink - 2594 ] [ table - planner - blink ] add tumble operator to group window function
updated import statement for fastparse core in LatexToUnicodeAdapter. java to ensure compatibility with the latest parsing library
make ssl _ context _ native _ pointer volatile and refactored timeout handling in AbstractSessionContext. java to improve thread safety and ensure proper
updated condition from ` size ( ) = = 0 ` to ` isEmpty ( ) ` and modified print statements in ` AppModule. java `
replaced CalciteSqlDialect with AnsiSqlDialect in SqlNodeConvertContext. java to enhance compatibility with ANSI SQL features
changed log level from debug to trace for no firmware update handler availability to improve logging granularity for debugging purposes
added tests for handling null date and timestamp in DateTest. java and GetObjectTest. java to ensure that null values are properly handled and
refactor string handling in StringSubject and add new test cases in RelabeledSubjectsTest to improve code clarity and ensure correct string concatenation behavior
added unit tests for repository permissions in UserModelTest. java to ensure correct permission handling for multiple teams
added a new file Test7088020. java with a main method that performs a static method on a MethodHandle to facilitate testing of
replaced the matchAudienceRestriction method with a collection of audience URIs to improve clarity and maintainability of audience restriction handling
refactor cache handling in AbstractDataChangedListener and HttpLongPollingDataChangedListener to improve code clarity and maintainability by centralizing cache updates
replaced the initialization of ` _ stderr ` with a null check for ` _ stderr ` to ensure proper handling of stderr output when ` _ stderr
added a new warning constant SEPARATION _ ORDER and conditional logic in BasicEventSimulationEngine to manage stage active status based on the current status
updated the configuration of the pinot query optimizer from offlineTableConfig to realtimeTableConfig to ensure the query optimizer uses the correct data type for
updated SQL statement handling in PhoenixHBaseAccessor and added configuration for AMS _ HBASE _ SITE _ NORMALIZER in Upgrade
refactor SavepointV2 and FileStateHandle classes to improve code readability and maintainability
added Bluetooth class handling in ShadowBluetoothDeviceTest and ShadowBluetoothDevice to ensure proper functionality of Bluetooth class management in Bluetooth interactions
updated the method name from ` contains ` to ` containsProfile ` in multiple classes to improve clarity and consistency in naming conventions
[ flink - 20536 ] [ table - common ] fix sum function with empty list parameter
replaced graphModel. getGraph ( ). readUnlockAll ( ) with graph. readUnlockAll ( ) to ensure the graph is unlocked
updated coreNodeName retrieval to use getCoreName ( ) instead of getNodeName ( ) to ensure coreName is correctly retrieved from the nodeProps
updated ChatActivity to use an UpdateBackpressure class instead of updating recent chats and status bar to improve efficiency and responsiveness of chat updates
refactor TaggerParserPosTagCompatibilityITest to improve code readability to enhance maintainability and facilitate future updates
added @ LuceneTestCase. SuppressCodecs ( " SimpleText " ) to BaseVectorSimilarityQueryTestCase. java to suppress codecs for
updated tag comparison logic in mmm Types. java and added a new class T7005671. java with multiple test methods to enhance type
updated superTriangle values in DelaunayTriangulator. java and added a seed in LwjglDebugStarter. java to improve
added @ Override annotations to ArrayDeque, ArrayList, HashSet, LinkedHashSet, and LinkedList classes to ensure proper overriding of overridden methods in subclasses
refactor JWTClaimsSet initialization to use a builder pattern for setting audience and issue time to improve code readability and maintainability by utilizing
updated the handling of yellowZoneStateTL in StackOverflowCheckImpl. java to ensure proper management of the yellow zone state
added shadow methods for SQLiteDatabase and ContentValues in Robolectric tests to enhance testing capabilities for database interactions
replaced ` initiateGLInstances ( ) ` with ` initiateGL ( ) ` in ` LwjglAWTCanvas. java ` and `
replaced ` bytesPerDim ` with a custom ` comparator ` in ` BKDWriter ` to improve code clarity and maintainability by using a
added support for script and country in locale initialization to enhance locale management by allowing script and country to be set
updated return value from mIconCurrentTextAlpha to mIconLastSetTextAlpha to accurately reflect the last set text alpha value
corrected the spelling of " Configmap " to " PropertySources " to improve clarity and accuracy of log messages
replaced LimitedModeLoginMockMvcTests with UaaJunitSuiteRunner in DefaultConfigurationTestSuite. java and updated TokenRevocationEndpointTest
trim whitespace from token tokens in GzipFilter and related test cases to ensure consistent parsing behavior and improve test coverage
updated the assignment of _ outputType to ensure proper formatting to improve code readability and maintainability
updated the default regex implementation from JDK to JONI to ensure compatibility with the Nashorn regex implementation
replaced LooperExecutor with Executor and FutureTask in ViewCapture. java to improve concurrency handling and streamline task execution
added methods to retrieve styles and handle unknown values in Mary - related classes to improve support for voice styles in the application
added parent folder creation logic in GitBlit. java to ensure proper error handling for folder creation failures
updated node discovery bind IP from 0.0. 0.0 to 127.0. 0.0 to ensure compatibility with the latest network configurations
camel - jbpm : fix the unit test error of camel - jbpm
pdfbox - 4892 : remove unused import, a suggest by valerybokov
refactor AllAppsGridAdapter and AllAppsRecyclerView to replace WorkModeToggleContainer with WorkFooterContainer and update related references to improve code clarity and
refactor multiple op tag classes for consistency to improve code maintainability and readability across the project
refactor DefaultJavaPrettyPrinter to conditionally write annotations for type parameters to improve clarity and functionality of type parameter handling
[ hotfix ] [ table - planner - blink ] fix memory leak in operatorcontext
updated string formatting in QueryByExamplePredicateBuilder. java and removed assertion for parameterName in StringQuery. java to improve clarity of error messages and
replaced ` evictionCounter ` with ` AtomicLong ` for better atomicity in ` ConcurrentLRUCache ` and ` FastLRUCache `
replace ` runInJavaFXThread ` with ` runAndWaitInJavaFXThread ` and introduce a new method ` runAndWaitInJavaFX
fix networkaddressmanagertest. testnetworkaddressmanagertest failure
added RuntimeEnvironment initialization to set data and source root for the database to ensure the application uses the correct environment for database setup
added ` MarkedClientEnabled ` and ` MarkedServerEnabled ` methods to ` AdminClientBootstrapConfiguration ` and ` AdminServerBootstrapConfiguration
[ hotfix ] [ table - common ] fix typo in tableenvironment
refactor timeout handling in MapperBuilderAssistant and update fetchSize in ExecutorTestHelper to improve code clarity and ensure consistent timeout configuration
removed the ` hangingTscTimeout ` parameter from multiple TypeScript transpiler classes to simplify the code by eliminating unnecessary parameters
added GeoLocationRequest and GeoLocationResponse registration in CasCoreAuthenticationComponentSerializationConfiguration. java to enable serialization of GeoLocationRequest and Geo
updated error messages in ArtifactFilesystem and ArtifactFilesystemTest to use BuildArtifact instead of SourceArtifact to improve clarity and accuracy of error messages related to
tika - 4892 -- add unit test for jxl. xls and hpsf. xlsx
don't trigger concurrent modification on setvalue ( )
added a condition to check if the channel input stream is available before proceeding to improve reliability of data handling in TcpNioConnection
added tests for ` hasValue ` and ` hasValue _ Named _ Failing ` methods in ` GuavaOptionalSubject ` to ensure proper error reporting
updated ` getVisibleElements ` method to include ` VERTICAL _ SWIPE _ INDICATOR ` and modified ` ShelfScrimView
added a null check for the nav variable in MatDefEditorlElement. java to prevent potential NullPointerExceptions when accessing nav elements
drawimage : don't draw label if absolute location be not active
updated error handling logic in ErrorOccuredInOnExceptionRoute. java to improve error reporting accuracy and maintainability
astro discovery service now schedule at fixed rate
corrected the order of ` irrUnit ` and ` pemUnit ` assignments in ` SinglePassAndImageBasedLightingLogic. java `
added JUnit @ Ignore annotation to JmsJdbcXALoadTest and JmsJdbcXATest classes to temporarily skip tests that hang indefinitely
updated import statements in GuiceFactoryTest. java to improve clarity and maintainability of dependencies
added functionality to manage and check system features in Robolectric package management to improve the management of system features in the application
added support for augmenting path properties in RCAFrameworkLoader and created corresponding test cases to improve path handling and ensure proper functionality through unit testing
added logging for the Started cancellation watch dog to improve traceability of the cancellation process
added a null check for enumerationValues in RADProperty. java to prevent potential NullPointerExceptions when enumerationValues is empty
renamed variable ` needInline ` to ` needStartText ` and ` needEndText ` in ` BoxBuilder ` and ` InlineBoxing
replaced ` collectAndSendTelemetryData ` with ` collectAndSendTelemetryDataAsynch ` and added a new method ` collectAnd
updated database type handling in UpgradeCatalog260. java to ensure compatibility with both MYSQL and other database configurations
updated error messages for index and temp resources directories in BaseTableDataManager. java to provide clearer guidance on permissions issues for directory creation
[ hotfix ] [ dataset ] fix typo in datasetutilities
added functionality to append the selector's ID to the selection to ensure the correct identification of the selected element
corrected hex string concatenation syntax in GouraudShadingContext. java to ensure proper formatting of color information for debugging purposes
updated taskbar visibility and added new constants in StashedHandleViewController and TaskbarDragLayerController to improve taskbar visibility and enhance
updated the order of parameters in KeyExchange. java to improve clarity and maintainability of the code
added a check for ` conn ` before checking if ` conn ` is instance of ` JdbcConnection ` to ensure proper handling of connections that are
updated file index handling in ServerMainTest. java to ensure tests do not fail if the index is - 1
added methods to retrieve media ordering mime type in CodenameOneImplementation, MediaManager, and ImageIO to enhance functionality by allowing dynamic media ordering
changed the visibility of the ` useShaders ` method from private to public in multiple classes to allow external access to the shader use functionality
updated DruidAdapterIT return value from 6588 to 13500 to correct the expected value for Druid filtering
corrected the spelling of " zkConnectTimeout " in the ZkStateReader instantiation to improve code readability and maintainability
updated formatting and modified conditional checks in XMPMetaParser. java to improve code readability and ensure proper handling of XML namespaces
added a new interface ClientRegistrationIdentifierStrategy for managing client registration identifiers to facilitate the management of client registration identifiers within the OAuth2 security
replaced the condition checking for " < script > " with a while loop to improve code readability and maintainability
renamed the variable ` checkVarargsAccessDuringResolution ` to ` checkVarargsAccessAfterResolution ` and updated its logic accordingly to improve clarity
refactor border property checking to use a new method ` borderIsNotSetOrBlank ` to improve code readability and maintainability by encapsulating border logic
changed log level from info to debug in WatchConnectionManager and WatchHTTPManager to reduce log verbosity and provide more detailed logging information
added handling for HubRegisterResponse in InternalDropAllCommandStep and InternalDropAllCommandStep to improve project registration process and ensure proper project
change return values from ` b [ off ] & 0xff ` to ` Byte. toUnsignedInt ( b [ off + 1 ] )
removed unnecessary whitespace in the string " Hello RocketMQ " to improve code readability and maintain consistency
updated the default value from CachingBuildEngine. DepFiles. ENABLED to CachingBuildEngine. DepFiles. CACHE to ensure compatibility with the latest
changed the value of rangePannable from true to false to disable range panning for improved user experience
refactor work mode switching logic in AllAppsContainerView. java to improve clarity and maintainability of the code
changed access modifiers of GLCapabilities, GcodeRenderer, and FPSAnimator in Visualizer2TopComponent. java to enhance encapsulation and maintain
added exception handling for CancellationException in FunctionTest. java to improve robustness by preventing execution of cancelled tasks
changed visibility of ` JarFileResource ` and ` JarResource ` constructors from package - private to protected to allow subclassing of ` JarResource
updated the DefaultTrackSelector class to improve track selection functionality to enhance performance and maintainability of track selection logic
added a loop to wait for unseqMerging status in LevelCompactionTsFileManagement. java to ensure that unsequenced compaction tasks are
updated fee currency from AUD to BTC in BTCMarketsAdaptersTest to accurately reflect the trading type
updated test methods and assertions in Post, JPADTO, JPADTOProjectionTest, and HibernateDTOProjectionTest to improve test accuracy and
refactor Unicode class to improve code readability to enhance maintainability and facilitate future updates
updated the ` installAutoInstance ` method to include a ` Service ` parameter and updated its logic accordingly to enhance functionality by allowing dynamic configuration of
updated the onComplete ( ) method call syntax in SendHeadersFirstPublisher. java to improve code readability and maintainability
updated AwsModule to use SSECustomerKey. Builder instead of SSECustomerKey. Builder to improve clarity and maintainability of the
added handling for BIG _ DECIMAL value type in RangePredicateEvaluatorFactory to improve error messaging for unsupported value types
replaced inner references with javac processing environment references to improve clarity and consistency in naming conventions
removed annotation printing from ParameterInfo. java to streamline output for better readability and maintainability
added support for audio playback in the PlaybackController and VideoManager classes to enhance playback experience and improve user experience during audio playback
replaced the return statement to populate a map with null values in the HttpResponse to ensure that the response has a valid JSON representation of the value
added @ SuppressWarnings ( " deprecation " ) annotations to DelegatingStatement and DiskFileItem classes to suppress warnings related to Commons DBCP and
added a new test method ` testSelectInto ` in ` IoTDBExtendTemplateIT ` to verify the functionality of selecting data from a
refactor methods in RTimerTree class to improve code readability and maintainability
updated package structure from ` com. facebook. buck. rules. graphbuilder ` to ` com. facebook. buck. core. rules.
fixed gap calculation in Letters. java and created a new test class TestIssue358. java to improve text alignment and demonstrate the issue with
updated the ClientConnector to use a separate QueuedThreadPool and set the client scheduler with a configurable name to improve clarity and configuration of the client
changed access modifiers of treePane, resultPane, and errorCheckBox in ViewResultsFullVisualizer. java to improve encapsulation and ensure proper layout
added documentation for user's phone number in ScimUserEndpointDocs. java to enhance user experience by providing meaningful information about phone numbers
changed access modifiers of several classes from public to private in DeleteFiles, IndexFiles, IndexHTML, SearchFiles, and SearchFiles to allow
added null checks for property and responseMap in JsonHttpPropertyRequest and URLStreamProvider to improve error handling and logging for HTTP response errors
refactor SolrRequestHandler to improve code readability to enhance maintainability and facilitate future updates
added a condition to check if the ` DEFAULT _ PARALLEL ` is not equal to ` DEFAULT _ PARALLEL ` to
updated import statements in TestVmwareContextFactory, TestVmwareMO, and TestVMWare classes to ensure compatibility with the latest log4
added a condition to check for SCARD _ E _ NO _ SMARTCARD in the card creation logic to ensure proper handling of card
added SuppressSysoutChecks annotation to Test2BTerms. java to suppress system out checks for debugging purposes
( chore ) camel - bindy : fix binding of complex many - to - many key value pair
changed default value of " useOwner " and " useTimeStamp " from Boolean. TRUE to Boolean. FALSE to ensure consistent default behavior for users
updated method signatures to use ThrowingRunnable instead of Runnable to improve exception handling consistency and clarity
added null checks for via and viaContext in CrawlURI. java to improve robustness by avoiding potential NullPointerExceptions
camel - 14284 : configuring endpoint should set property on endpoint and not configuration object - aws - sdb
updated version from 4.1. 1 to 4.1. 2 and refactored object retrieval methods in LiquibaseXMLTransformer. java to reflect the
update proxy cert validity property from 7 to 90 to improve security by adjusting certificate validity property
updated frame and lastDeltaUpdate values in ThreadHandler. java to improve accuracy of delta calculations
added a null check for paginator in HttpBatchReader and HttpScanBatchCreator to prevent potential NullPointerExceptions when pagination is disabled
added null check for compaction info client in Worker. java and created a test for finding the next compact in TestWorker. java to ensure proper
refactor fragment state handling in ShadowFragmentActivity and add a test for onSaveInstanceState behavior in FragmentActivityTest to ensure correct behavior of fragment state saving
updated job identifier retrieval and file pattern formatting in BatchResourceFactoryBean. java to improve code readability and maintainability
added a test for parsing simple Android color references in ColorResourceLoaderTest to ensure that the color resource is correctly parsed from the application
added handling for NoResultException in AbstractJPAQuery. java and created a test for unique results in AbstractStandardTest. java to improve error
replace direct creation of a community with an owner community to improve community management by associating communities with their parents
updated the method used to retrieve the wallpaper depth effect from LawnchairApp to ensure compatibility with the latest Lawnchair library
removed unnecessary import of ProcessTools in LocalManagementTest. java to streamline code by eliminating unnecessary dependencies
updated the ` updateTotalEnergyAverageUsage ` method to retrieve the head slot instead of its timestamp to ensure the method retrieves the current head slot
refactor ExtensionStack to handle null extensions and improve string representation to enhance robustness and prevent potential NullPointerExceptions
2. x : fix infinite loop when inner subscription be cancel
added connection manager timeout configuration and improved error handling in multiple classes to enhance reliability of connection management and provide clearer error logging
refactor the assignment of AndroidPlatformTarget in AndroidPrebuiltAarDescription. java to improve code readability and maintainability
replaced NewModelTest with ModelTest in LwjglDebugStarter. java to align the test with the new model testing framework
replaced instances of SystemResourcesEdgeEventFetcher with TenantResourcesEdgeEventFetcher in EdgeSyncCursor. java and updated the inlineImage method in Base
removed conditional check for success type in CachingBuildEngine and added a test for output hash calculation in CachingBuildEngineTest to ensure that output hash
camel - netty : add option to turn off bytebuf on endpoint
updated the method to retrieve the table name from Warehouse instead of the old name to ensure compatibility with the current table context
improve error message when use vertx. prefernativetransport = true
move enumtypehandlerserializertest to extensiontypes, and add test for color.
refactor StreamEx class for improved readability to enhance maintainability and facilitate future updates
added hints for query timeouts in SessionImpl. java to improve session hinting for better debugging
added a new class ` StaticLoggerBinder ` for logging functionality to facilitate the creation of ` StaticLoggerBinder ` instances in the S
hbase - 26945 remove redundant clone familymap. put ( family, list ) call from hbase - client
updated orientation handling in TaskbarManager to improve accuracy in orientation changes
unescape xml for occupant's nickname to ensure proper formatting and prevent potential XSS vulnerabilities
updated the ` longStackPut ` method call in ` StoreDirect. java ` and added a new test class ` Issue265Test. java
added @ SuppressWarnings annotations to multiple Java files to suppress warnings related to mutable elements in the code
make executionflowcontroltest a single class for hold the value and outcome
updated type checks for audio and subtitle tracks in DLNAMediaInfo, DLNAResource, and FFMpegVideo to improve type safety and
updated NBWriteServlet and TestWriteListener to include an unlimited flag to enhance flexibility in handling write operations by allowing unlimited responses
updated the method for updating the total difficulty in BlockchainImpl. java and added a test for invalid blocks in ImportLightTest. java to
removed conditional check for current window seekability in DefaultPlaybackController to simplify action handling logic for better readability and maintainability
replaced ` Collections. synchronizedList ` with ` CopyOnWriteArrayList ` in ` NativeLibrarySupport ` and updated ` SecurityServicesFeature ` to use
added uniform allocation logic in AllAppsView. java to ensure proper positioning of elements based on their dimensions
added a check for the presence of a colon in the key to ensure proper handling of colon characters in the key
added @ Qualifier annotation to PrincipalResolver in CasSimpleMultifactorAuthenticationEventExecutionPlanConfiguration. java to enhance dependency resolution for principal
replaced ObjectMapper with JSONParser in DelegationTokenResponse. java to improve JSON parsing capabilities and handle potential parsing errors
added a method to remove trailing slashes from StringBuilder to improve string manipulation capabilities for better URL handling
added methods for matching patterns in PatternsMatcher and corresponding test cases in PatternsMatcherTest to enhance pattern matching capabilities and improve test coverage for
hbase - 2658 improve log message for loadincrementalhfiles ( ted yu )
added potion handling for BlockFadeEvent in BlockFire. java to ensure proper block fading events are fired when a potion is
removed unnecessary whitespace in the beginOrAdjustReorderPreviewAnimations method call to improve code readability and maintain consistency
updated calculations in ContractStateCapsule and ReceiptCapsule, and modified usage retrieval in ResourceProcessor to improve accuracy of dynamic energy calculation and
updated AsyncContentProducer to check for input unready state and improved logging in BlockingContentProducer to ensure proper handling of input unready states and
added a mandatory parameter check in DocumentDictionaryFactory to ensure that the weight field is mandatory before proceeding
added support for Info. plist substitution in AppleBundle. java and created a corresponding test in AppleTestIntegrationTest. java to enhance functionality and
increase the amount of lancer laser from 90 to 140 and update the damage logic to improve the lancer laser's
replaced instances of ` OrderCreateApiRequestBuilder ` with ` OrderCreateApiRequestBuilder ` in ` KucoinAdapters. java ` to improve
added a new file ` PreParseGrammarTest. java ` for testing XML schema parsing to facilitate testing of XML schema grammars
added @ SuppressWarnings ( " doclint : missing " ) annotations across multiple Java files to suppress warnings related to serialization errors
added FontManager import and called overrideFont method in ExtendedEditText. java to ensure consistent font handling across the application
added a null check for the current user in AuthorizeTag. java and implemented a test case in AuthorizeTagTests. java to ensure
camel - cxf fixed encode uri contain unsafe character.
added an overridden setUpData method to the JDBCGeometryTestSetup class to enable setup data for the test environment
removed unused import of DumpHandler in MultipartFilterTest. java to clean up the code and reduce unnecessary dependencies
added a check to ensure the backendCloseableRegistry is closed before proceeding to prevent operations on a closed backend
added support for creating RMI registry in RemoteJMeterEngineImpl to enhance flexibility in managing RMI registry creation
replace String. join with StringUtils. join for sstables to improve readability and maintainability of the log message
added display metrics configuration to multiple test classes to ensure default display metrics are used for testing purposes
[ java ] : add cluster member id to service heartbeat counter.
updated the attribute assignment logic in TestThreadMXBean to ensure accurate number of thread allocated bytes based on the major version
modified the calculation of double values and added validation for negative and positive infinity in CustomExpression. java to ensure proper handling of NaN values and prevent
updated logging statements in AjaxListener. java to improve clarity and ensure proper handling of continuation states
added methods for authentication and authorized routes in AuthenticityController. java and created corresponding tests in AuthenticityFormTest. java to enhance functionality and
added assertion to ensure nextNode is alive in SnippetTemplate. java to improve stability and prevent potential memory leaks
updated logger reference from ConnectionManager to HttpClientRequestImpl to accurately reflect the class being used for logging purposes
removed unnecessary comparison methods in DefaultTrackSelector. java to streamline code for better readability and maintainability
refactor RuntimeSerialization to improve code readability to enhance maintainability and facilitate future updates
added crop handling logic in DrawImage. java to ensure crop coordinates are removed only when croped is active
refactor UnitOfWorkFactory to improve code readability to enhance maintainability and facilitate future updates
added a new variable ` allAppsCellWidthPx ` and updated its usage across multiple classes to improve clarity and maintainability of the layout calculations
tika - 371 -- fix content disposition file name issue in mailcontenthandler
updated thumbnail URI retrieval to use local ID instead of remote path to improve accuracy of thumbnail generation by distinguishing between local and remote files
set mark to Integer. MAX _ VALUE in Source. java to ensure that mark operations do not exceed Integer. MAX _ VALUE
added @ Deprecated annotation to multiple AsyncProcessor, BehaviorProcessor, AsyncSubject, and SerializedSubject classes to suppress warnings related to the deprecated methods and
added configuration for server - show - error - stacks in multiple classes to enable or disable error stacks on the error page
bug 7119 : delete domain and account be part of domain cleanup.
removed redundant foreign call handling in SPARCArithmeticLIRGenerator to streamline the code by eliminating redundancy
drools 5. x api : implement addruletemplateconfiguration ( ) and getruletemplateconfigurations ( ) in decisiontable
added a ` waitingForResult ` variable to the ` onRequestPurchaseResponse ` method and modified the purchase error handling to improve code clarity and ensure
increased the default timeout from 100ms to 1000ms in UnboundedSourceSystemTest. java to improve test reliability by allowing more time for
updated import statements and modified parent handling in ShadowAssetManager. java to improve code clarity and ensure proper resource qualification based on parent presence
deleted two files MrefStat. java and MrefStat1. java to remove unused classes to streamline the codebase
updated dependency resolution logic to handle blank scopes to improve flexibility in dependency resolution based on request scope
added constant messages for no trades and improved error handling in BTCETradeServiceRaw. java to enhance clarity and maintainability of trade history
use hamcrest assertion instead of junit in test
added a method to retrieve payment request URLs in BitcoinURI. java and corresponding test cases in BitcoinURITest. java to enhance functionality
[ optaplanner - 383 ] handle collection wrapping in abstractfrompropertyvaluerangedescriptor
removed redundant line setting folder information in FolderPagedView. java to streamline code by eliminating redundancy
updated lock handling logic in JfrBufferNodeLinkedList and JfrChunkWriter to ensure only lock owner can release the lock to improve thread safety
refactor null value handling in BasicAbstractTuple to use a for - each loop to improve code readability and maintainability
refactor LintUtility to use InputResourceUtility for reading Linter configurations to improve error handling and maintainability of the code
replaced updateBackgrounds ( ) and updatePaddings ( ) with a post with a Runnable that runs on the UI thread to ensure UI
fix crash in inventory. oninventorytick ( ).
added a new case OCELOT _ BABY in PlayerEvents. java to support the functionality of the player event handling
[ hotfix ] [ runtime ] add miss @ publicevolving annotation to statettlconfig
added null checks for x in PreparedStatement. java and adjusted index handling in Array. java and PreparedStatement. java to ensure proper handling of
[ java ] add ` ` describe - all'' message to archive tool.
changed the character encoding from double quotes to single quotes to ensure consistent character handling across string operations
added a new test method ` jsonSnapshot ` to the ` SiteSnapshotVariationsTest ` class to enable JSON snapshot functionality in the database
added unit tests and refactored the removeTheTxAndBlock method in BroadTest. java to improve test reliability and ensure proper
added handling for LensMaskOpen and LensMaskClose events in AmcrestHandler and DahuaHandler to enable or disable the
removed the ` throws NoSuchBuildTargetException ` declaration from method signatures in ` BuckConfig ` and ` BuildRuleFactoryParams ` to simplify error handling
refactor ChangeLogIterator constructor to accept a list of ChangeSetFilter objects to improve flexibility by allowing multiple change sets to be processed
don't swallow guest exception in launcher
replaced the environment variable ` OPT _ OUT _ TRACKING ` with a system property ` OPT _ OUT _ TRACKING ` to ensure
added serialVersionUID fields to AuthCacheValue and AuthenticationInfo classes to ensure proper serialization compatibility for these classes
refactor SpacesVisitor to use getCursor ( ). dropParentUntil for cleaner code to improve readability and maintainability of the code
add copy ( boolean nearCache ) method to servercacheprovider to enable or disable near - cache copy functionality
added a new test method ` testHiddenBorder ` to the ` VisualRegressionTest ` class to ensure that the border is not visible on flo
replaced ActionGraph with TargetGraph in WorkspaceAndProjectGenerator. java and updated method calls in ProjectCommand. java to improve graph handling consistency and
replaced ` LIVE _ URI ` with ` PROD _ URI ` and added error logging for Kucoin sandbox host exceptions to improve clarity
updated error messages in SpringResourceAccessor for clarity to improve readability and maintainability of the code
updated unit tests for MICROGRAM _ PER _ CUBICMETRE and MICROWATT _ PER _ SQUARE
updated the method call from ` getMask ( ) ` to ` getMaskWithSizePacked ( ) ` in ` DefaultShader. java `
deleted the Tls12SocketFactory. java file to remove unused or redundant SSL socket factory
refactor TexBibEntriesResolver to use a stream for distinct citations and referenced entries to improve code readability and maintainability by simplifying
added a method to check if legacy resources are enabled in Robolectric legacy mode to ensure compatibility with legacy resources in the application
added a check for Firebird database type in DoubleType. java to ensure compatibility with Firebird database types
added null checks for ` this. dataSource ` and ` transactionManager ` before initializing ` DataSourceTransactionManager ` to prevent potential NullPointerExceptions when
added a new file ` package - info. java ` containing the ` @ API ` annotation to indicate that the API is intended for testing purposes
updated test timeouts in OutputStreamTest. java to improve test reliability by allowing more time for command execution
use try - with - resources to ensure proper resource management
updated the scoring logic in TermQuery to ensure proper scoring behavior based on score settings
dataflowmetrics : fix npe in dataflowmetric. setmetrics ( null )
cloudstack - 7091 : fix npe in uservmdaoimpl. findvirtualmachine ( )
refactor object inspector retrieval to use a new method for target object inspectors to improve code readability and maintainability by centralizing object inspector logic
added a method to remove build artifacts in ArtifactFilesystem and corresponding test cases in ArtifactFilesystemTest to improve artifact management by allowing deletion of build artifacts
added row selection logic in ThrustCurveMotorSelectionPanel. java to ensure that selected rows do not interfere with the table row selection
replaced ` assertThrows ` with ` assertThrowsArrayStoreException ` in ` Main. java ` and added a new method ` Asserts. java ` to
refactor PropertySource to improve code readability to enhance maintainability and facilitate future updates
added support for custom user agent in the HttpClientBuilder class to enhance flexibility by allowing different user agent configurations
refactor session management by introducing a new method ` computeIfAbsent ` to improve code readability and maintainability by encapsulating session restore logic
updated the expected size in IssueTest. java and changed the data provider's results set from HashSet to newSetFromMap in Reporter. java
npe fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4796
add miss activationrequestdenied event to character system.
added @ SuppressWarnings ( " serial " ) annotations and modified drawLine drawing logic in GraphApplet. java to suppress serialization warnings and ensure drawLine drawing
added ` updateTaskViewsSnapshotRadius ` method to ` RecentsView ` and renamed it to ` updateSnapshotRadius ` in ` TaskView
added logging for generated Swagger content in StaticMicroserviceVersions. java to improve traceability and debugging of microservice schemas
changed the return type of the put method from void to int to allow for more flexible data handling
updated Kafka container startup timeout and improved error handling in KafkaContainerCluster to enhance reliability and maintainability of the Kafka container initialization process
added retry logic for message sending in DefaultMQPushConsumerImpl. java to improve reliability of message sending operations
refactor header checking logic in StaticServerHttpHeadersWriter to ensure no headers are added when the header is already present to improve reliability of header
added package access check in EventListenerList. java to ensure proper class loading when package access is required
added a custom adapter class for the applications list in the ApplicationsFragment to enhance user experience by providing easy access to the applications list
updated the applyIcon method to include a nullable Task parameter to enhance functionality by allowing nullable task instances
refactor DownloadTracker and DownloadManager to use try - with - resources syntax to ensure proper resource management and avoid potential resource leaks
modified the insertion logic in BaseSqmToSqlAstConverter to use a stack instead of a single statement to improve code clarity and maintain
added JUnit test annotations to HibernateCursorItemReaderIntegrationTests and changed executionContext declaration in onSetUp method to improve test coverage and align with JUnit
added a new Poller class to handle reading data with a timeout mechanism to improve reliability and responsiveness of data reading operations
added ENABLED _ TS flag to VersionTargetGraphMode and implemented ToposortBasedDepsAwareExecutor in VersionedTargetGraphCache to enable versioned target
refactor UpgradeCatalog150 to improve code structure to enhance maintainability and readability of the codebase
[ hotfix ] [ network ] rename testnet ( ) to testnet ( )
remove updateIfInSelection method for selected geos in PropertiesViewD. java to ensure that the application updates only when there is one ge
updated onboarding preferences handling in AppsDividerView. java and added nullability annotation in ActivityContext. java to improve null safety and
updated HdfsIndexOutput to extend BufferedIndexOutput and added error handling to improve resource management and error logging during closing operations
pdfbox - 4071 : don't clip the clipping path if it's not complete
removed unnecessary synchronization for local address retrieval in SocketChannelImpl. java to streamline the code by eliminating unnecessary synchronization
refactor TemplateTransformer to use a new method ` addToRow ` for handling multiple values to improve code readability and maintainability by encapsulating logic for
added a method to check if the operating system is Windows and refactored file renaming logic to improve code readability and maintainability by centralizing
replaced ` char [ 39 ] ` with a constant ` CHECK _ DIGIT _ STRING ` in ` Code39Reader ` and ` Code39
added handling for unexpected values in NodeGenFactory. java to ensure proper type casting and handling of unexpected values
refactor string value retrieval logic in IndexingChain. java to improve readability and maintainability of the code
fix handling of timestamp with nanos in where clause
updated the handling of postedRunnableStacktraces in LwjglCanvas. java to ensure proper null safety for executed runnables
fix typo in the description of AbstractGCSProcessor. java to improve clarity and maintain consistency in the documentation
replaced assertInitialized method with waitUntilInitialized method in ConnectionPoolTest. java to improve synchronization and ensure thread safety during initialization
updated directory references from null to " single " in CachingDirectoryFactoryTest and RAMDirectoryFactoryTest to support a single directory context
refactored data handling in FaultTolerantChunkProcessor and added filter count tests in FaultTolerantStepFactoryBeanRollbackTests to improve
updated file handling in FileWithTabs. java and refactored main method in T4994049. java to improve code clarity and
replaced conditional checks with static imports in ConsoleReaderTest. java to improve code readability and maintainability by eliminating redundant checks
modify conditional logic in GetFeedbackSessionsAction. java to improve readability and maintainability of session handling logic
adjusted the calculation for newSelection and adjusted the condition for velocity checks to ensure correct selection behavior and improve accuracy of velocity validation
don't call initialize ( ) if there be no profiled app thread
added loadModelList ( ) and refresh ( ) methods to DataModelManagerDialog, DbConnectionDialog, and ExportPanel classes to enhance user
changed writeBufferSize from a static final variable to a static final constant WRITE _ BUFFER _ SIZE to ensure consistency in memory usage and improve code readability
lucene - 986 : don't create a new index when there's no document
updated ArmatureModifier. java to validate the structure before fetching data to ensure proper data handling and prevent potential null pointer exceptions
refactor FileDisplayActivity to improve code structure to enhance maintainability and readability of the code
replaced the instantiation of ` UnsupportedOperationException ` with a private inner exception ` fillInStackTrace ` to improve error handling by avoiding unnecessary stack trace
updated height calculation in LabelPainter to use a stream - based approach to improve accuracy of label height calculations
replaced the singleton instance of ` RotationTouchHelper ` with a constructor that accepts a ` DisplayHolder ` to improve flexibility in managing display configurations
added handling for quote characters in the parsing logic in AVA. java to ensure proper escaping of quoted strings when processing input values
replaced Long. valueOf with IdConversion. convertToLong in ServletHandlerInterceptor and added a test for preHandle in ServletHandlerInterceptorTest to ensure
added a new test method ` testSmall ` and ` testBig ` to the ` ServerDatagramConnectorTest ` class to improve test coverage
updated SQL query assertion in TestSqlEntityProcessorDelta. java to ensure accurate substring extraction from COUNTRY _ CODE _ s data
refactor Cache class to improve cache management to enhance performance and maintainability of the code
changed variable names from " email _ verified " to " ev " and set scopes to ensure consistency in naming conventions and improve scope management
updated the ` doBefore ` method to set ` seenDocIDs ` to a boolean parameter to improve code clarity and maintainability by avoiding unnecessary
added a test case for a persistent JTable in GcodeTable. java to verify the functionality of the GcodeTable component
updated WEBAPP _ CONNECT _ TIMEOUT to use configuration instead of a hardcoded value to improve flexibility and maintainability of the code
updated error logging and formatting in multiple classes to improve clarity and maintain consistency in error reporting
refactor TestMediaService to improve code readability to enhance maintainability and facilitate future updates
removed the constant HELP _ ABOUT _ DIALOG _ USER _ GUIDE _ LINK from Messages. java to streamline the code by elim
added a new file MarketsPrintTool. java for market transactions to facilitate printing of fiat, crypto, and btc market
added validation for hostname compliance in EndpointAddressInterceptor to ensure that only valid components are accepted as hostname inputs
added ` registerSecurityKeyStart ` and ` registerSecurityKeyComplete ` methods to ` AccountProxy ` and ` HttpAccount ` classes to enhance
refactor ServerSpanThreadBinder to improve thread management to enhance performance and maintainability of span processing
updated user object retrieval from getUserPointer ( ) to userData in BulletPhysics. java and adjusted spacing in BlockItemSystem. java to
updated the name of the geom in Csv2Shape from " Location " to " the _ geom " and " number " to improve clarity and
replaced ` callGasWord ` with ` gasCost ` in ` VM. java ` and removed unused imports in ` Program. java `
refactor Parameters class to improve code readability to enhance maintainability and facilitate future updates
added functionality to ignore null values in the pie plot to ensure that pie plots do not contain null values
refactor bundle loading logic in ResourceBundle. java to improve clarity and maintainability of the code
change the character from'_'to'-'in TaggedPdfReaderTool. java to ensure proper formatting of filenames
[ java ] allow perform script action on annotation during edit.
added userModified flag to LoginSamlAuthenticationProvider to enable modification of user data in the authentication process
added a new file ` TestSealedObjectNull. java ` to test the behavior of a SealedObject with a null cipher to ensure
refactor response handling methods in ConnectPromise and WebSocketClientConnection to improve clarity and maintainability of the code
added support for SNOW tags in 1.16. 5 to ensure compatibility with newer server versions
added lastTradeId tracking and updated trade ID retrieval in CryptsyAdapters and CryptsyPublicTrade classes to improve trade tracking accuracy and ensure
added a try - catch block to close the HMS connection to ensure proper resource management and prevent application crashes
use random. nextLong ( ) instead of system. currenttimemillis ( )
added a new device profile " Nexus 5 " in DynamicGrid. java to support additional device profiles in the application
2. x : fix npe when connection object be null.
replaced direct instantiation of SynthContext with ReflectUtil to improve flexibility and maintainability of the code
added support forROUND _ TEXTUAL _ OP in FormatToken and FormatVisitor classes to enhance whitespace handling capabilities in formatting
added checks for file existence and overwrite behavior in SaveTask. java and corresponding test cases in SaveAndLoadTaskTest. java to ensure that
make log writer thread - safe
log4j2 - 1349 add support for mutablelogevent in smtpmanager
replaced LengthLike with NonNegativeLengthLike in PrimitivePropertyBuilders to improve handling of negative lengths in the property builder
replaced calls to ` getUser ( headers ) ` with a direct call to ` createContext ( ) ` in multiple resource classes to simplify context creation
refactor exception handling logic in MethodIRBuilder and SootWorldBuilder to improve clarity and maintainability of exception handling logic
added platform - specific line separator for build tools in AndroidPlatformTarget. java to ensure proper installation of build tools using the Android SDK Manager
updated cache size calculation from 16 to 8 to optimize memory usage for improved performance
update invocation stage trace handling to include both finish and start conditions to ensure accurate timing calculations during execution
added a try - catch block around the load method in ProvKeyManagerFactorySpi. java to handle potential NullPointerExceptions when loading a BCF
updated the port handling in ` UpstreamCheckUtilsTest. java ` to ensure proper port assignment and improve test reliability
replace panelDim with otherParent in DockManagerW. java to ensure that the correct parent is stored in the shared panel
added checks for OpenGL extensions in GLRenderer. java to ensure proper handling of shader storage based on supported Caps
refactor PopulatorContext to improve code readability to enhance maintainability and facilitate future updates
skip saveall notification if project be not set
added a method to retrieve the character set based on the system's file encoding to ensure proper handling of character encoding in the ZQL job
added a check for non - empty arguments in the IkStepDefinition class to ensure that only valid arguments are processed
updated OSSO header names to use a constant prefix to improve code maintainability and readability by centralizing header names
added @ Deprecated annotations to several options in GenerateJavaSources, Config, and JavaGeneratorMojo classes to mark these options as deprecated and encourage
removed debug log statements for Apache Derby driver class access to streamline error logging and improve debugging clarity
[ drools - 605 ] avoid infinite loop in cepinteractions
replaced parallelStream ( ) with stream ( ) in PersonNameSuggestionProvider. java to improve performance and readability of the code
added checks for Liquibase hub mode before updating properties to ensure properties are only updated when the hub mode is set
added COREINFO _ VERSION _ SUCCESS _ KEYS and SUCCESS _ KEYS for IBM J9 VM and Eclipse OpenJ9 VM to
added handling for CompositeFont in FontFamily. java and created DebugFonts. java to improve font request logging and facilitate debugging of
added conditional check for HTTP version in NegotiatingServerConnectionFactory to ensure proper handling of negotiated HTTP versions in the server
added RateControl import and set it to NO _ RATE _ CONTROL in MaxConcurrentStreamsTest. java to disable rate control for improved HTTP
added a new file Test6741426. java containing a GUI test for NimbusLookAndFeel to demonstrate the use of Nimbus
updated error message assertion in CsrfAwareEntryPointAndDeniedHandlerTest to improve clarity of error reporting
added null checks for dbMgdPath and dbExtPath in HMSHandler. java to ensure that managed directories are only created when necessary
added package declaration for S3 in S3CopyObjectRequest. java to establish a foundational structure for S3 operations
refactor setup methods to remove accent color dependency to simplify code and improve maintainability by centralizing theme setup logic
updated error message in TemporaryFolderUsageTest to include " fileAtRoot " instead of " / temp1 " to improve clarity in error reporting
refactor MappingMongoConverter to use ClassTypeInformation. MAP instead of ClassTypeInformation. MAP to improve clarity and consistency in type information handling
add check for empty string and null as address in clientconfig. addaddress ( string, string )
added " keynectisrootca [ jdk ] " to VerifyCACerts. java to support trusted certificates in the application
change return type of compute method from void to int in multiple classes to improve performance by returning the size of the output batch
added a check for popup visibility before setting the menu's mode to ensure the menu is only shown when popup triangle is clicked
pdfbox - 4892 : avoid arrayindexoutofboundsexception if eof occur
added a new file FinalizerInfoTest. java for testing garbage collection of objects to facilitate testing of object finalization in the application
replace. map ( ) with. doOnNext ( ) in CachingRouteDefinitionLocator. java and CachingRouteLocator. java to ensure proper
refactor address handling logic in BurningManService to improve clarity and maintainability of address assignment logic
refactor StringSubject class for improved readability to enhance maintainability and facilitate future updates
increased the size of longData from 1000000 to 1000 and added an @ Ignore annotation to improve test reliability and temporarily disable the test due to
renamed the method ` setmaxInboundMetadataSize ` to ` setMaxInboundMetadataSize ` to improve clarity regarding the purpose of the method
updated the method to replace " from : " with " from : " in the saveRecentQuery call to ensure that the most recent query is
removed conditional check for rebalance in SimulatorDiscoverer. java to streamline the code by eliminating unnecessary complexity
added a new endpoint to handle account import in YubiKeyAccountRegistryEndpoint to enable users to import accounts from the YubiKey
added multiple shader program options in ShaderManagerLwjgl and LwjglRenderer classes to enhance shader functionality and improve error handling
added safe area handling and padding in SideMenuBar and Toolbar classes to ensure proper rendering of menu elements and improve layout consistency
refactor AbiWriterProtocol to improve code readability to enhance maintainability and facilitate future updates
added null check for subName in HierarchyBase. java to prevent potential NullPointerException when subName is null
changed data flag from DATA _ FLAG _ IMMOBILE to DATA _ FLAG _ GRAVITY in EntityItem. java to ensure proper
updated null checks and logic in CustomExpression. java for better null safety to improve code reliability and prevent potential NullPointerExceptions
replaced the method ` requestBlindVoteListFromNetwork ` with a new method ` sendRepublishRequest ` to streamline the request process
added a new test case ` testCase4 ` in ` PostgresTest. java ` to test the functionality of ` HikariDataSource ` to ensure
replace double quotes with single quotes for identifiers in SubtitleUtils and RemoteUtil to ensure proper handling of identifiers with single quotes
added a constant for line separators in DefaultJavaPrettyPrinter. java and updated comment test in CommentTest. java to improve code readability and ensure
truffle - dsl : use atomic field updatelater for single implementor snapshot
added null check for filters before adding them to the qlist to prevent potential NullPointerExceptions when excluding main queries
replaced ThingBuilder with GenericThingBuilder for better bridge handling to improve flexibility in handling different thing types
replace printHelp ( ) with error ( ` ` must be provided'' ) in Ktab. java to improve error reporting for unknown commands
added a check to return the output file if it doesn't already exist to ensure that the program does not overwrite existing output files
added logic to handle specific date formats in DateConverter to ensure correct parsing of date strings based on tee index
added JPALock queries and assertions in PostRepository and SpringDataJPALockTest to improve performance and ensure correct retrieval of posts based on
changed the type of ` canAccessDbaRecycleBin ` from ` boolean ` to ` Boolean ` and added a null check for `
added connection and read timeouts using SimpleClientHttpRequestFactory in ClientRegistrations. java to improve reliability of HTTP request handling in the application
updated Source file path assertions and assertions in SourceTest. java and Source. java to improve clarity and accuracy of file path handling and assertions
move graalvm. version system property to graalvmlocator
added validity checks for access token and refresh token in ClientAdminBootstrap. java to ensure proper handling of token and refresh token validity settings
updated the return statement to conditionally use the default API version based on options to ensure compatibility with the latest Android API version
refactor PropertyPlaceholderHelper to improve readability and maintainability to enhance code clarity and maintainability
updated certificate fingerprints and signature algorithm details in Resources. java to ensure compatibility with the latest cryptographic standards and improve security
refactor ZkSolrClientTest to use CountDownLatch for managing collection progress to improve synchronization handling and ensure thread safety during collection processing
removed BigInteger import and added BigInteger type in MongoMappingContext. java to streamline code by eliminating unnecessary dependencies
added a condition to check if the button text matches the view string to ensure that the toast is only displayed when the button text matches the view
added a condition to check if MEncoder is no out of sync when disabling Mc0 and Noskip to ensure proper handling of
increase the default event loop thread limit from 10 to 15 in ConfigurationProperties. java and ConfigurationPropertiesTest. java to increase the event loop thread
changed access modifiers of CountMin4 classes from abstract to protected to allow subclasses to access the CountMin4 class
updated the ` getFileFloatSource ` method in ` ExternalFileField ` and added a new test class ` ExternalFileFieldSortTest ` to
updated error message from " Invalid URL " to " Connection error " to accurately reflect the current error context
added handling for XML event IDs in OpenRocketSaver and FlightDataBranchHandler to improve event processing and ensure proper XML escaping for R
changed the visibility of the check method from private to protected final to allow subclasses to access the check method while maintaining encapsulation
added handling for SynchronizeFileOperation in FileActivity. java to improve file synchronization functionality and provide user feedback during file operations
updated the URI generation to use URLEncoder for file paths to ensure proper URL encoding and prevent potential issues with special characters
added initialization check for " cn1 $ infinite " property in InfiniteContainer. java to ensure proper handling of infinite container properties
updated the calculation of the ` total ` variable in ` IntHashSet. java ` to ensure that the ` total ` variable accurately reflects
added error handling for lock management in FeedRefreshUpdater to improve stability by logging errors during updates
updated handling ofCIAL _ OWNER, GROUP, EVERYONE, and IDENTIFIER _ GROUP flags in SolarisAclFileAttributeView. java
replaced ArrayList with a Edge array for managing edges in LatLonTree. java to improve memory efficiency and maintainability of the code
added a try - finally block to close resources in ZkCLI. java to ensure proper resource management and prevent memory leaks
updated regex in comment processing to remove leading zeros to ensure correct formatting of comments with leading zeros
added strict parameter handling in Main. java and corresponding test cases in MainTest. java to ensure that properties file parsing ignores unknown parameters when strict
add a custom constraint that will always fail if a custom annotation be miss.
camel - http4 should use http4 instead of http component
added a call to waitForThingsToLevelOut ( 30000 ) in TestCloudPivotFacet. java to improve test reliability by avoiding
removed unnecessary checks for Integer. MAX _ VALUE and Long. MAX _ VALUE in UBJsonWriter. java to streamline code for better
updated test cases in ApplicationTest. java to improve test coverage and ensure reliability
replaced String with StringBuffer in ConnectionFactoryImpl to improve performance and memory efficiency
rename ` Type ` to ` RoboType ` across multiple files to improve clarity and consistency in naming conventions
[ java ] : don't wait for dispatch complete in order to finish recording.
added support for CACHE _ KEY and CACHE _ LOOKUP attributes in EntityProcessorBase. java and updated related tests in TestCachedSqlEntityProcessor
added a new file PutfieldError. java that throws a RuntimeException when IncompatibleClassChangeError is thrown to provide a demonstration of error handling
don't return a public address if the public address don't have a public one
add log for memtables that have reach memtable _ flush _ after _ mins
replaced ` Space. build ( " ", emptyList ( ) ) ` with ` Space. SINGLE _ SPACE ` across multiple files to align with
replaced the method ` encodedLength ( ) ` with a new method ` encodedLength ( ) ` to improve code clarity and maintainability by using
refactor TestMethodResultMapBuilder to improve code readability to enhance maintainability and facilitate future updates
added handling for Integer class in FindNullDeref. java to improve error handling and prevent potential exceptions during method execution
[ hotfix ] [ runtime ] remove unused lock declaration in tasklocalstatestoreimpl
updated string return values in Utils. java for better clarity to improve readability and maintainability of the code
updated conditional checks for DeepShortcutView in Utilities. java and FloatingIconView. java to improve type safety and clarity in handling deep shortcuts
updated JwtClaimValidator to use Object instead of String for issuer checks to improve type safety and correctness in validating JWT claims
renamed methods and imports for clarity in Coinmate classes to improve code readability and maintainability by using more descriptive names
added coverage configuration in CoverageConfig. java and refactored class loading in CoverageController. java to improve coverage handling by conditionally defining project data
added a check to prevent registration of sticky events to ensure that sticky events are only registered when necessary
added ASCII - only handling for string normalization in NormalizerBase. java to ensure consistent handling of non - ASCII characters in string processing
[ hotfix ] [ table - planner - blink ] fix partition partition migration check
added error handling for SQL updates in SpillableGroupByIT and NoOpStatsCollectorIT to ensure proper error reporting and maintainability of statistics
( chore ) camel - test : migrate cometdproducerconsumertest to camel - test - junit4
updated HR and CELLSPACING attributes in HtmlTag. java and other test files to ensure compliance with HTML standards and
added HTML output formatting in HtmlCoreReport. java to improve readability of generated reports
updated the calculation of ramBytesUsed to handle null scores to ensure accurate memory usage estimation when scores is not provided
added StringHolder class and updated serialization and deserialization methods in CustomTypeAdaptersTest. java to facilitate serialization and deserialization of String objects
set extra data from mining parameters in MergeCoordinator and add a test for extra data retrieval in MergeCoordinatorTest to ensure that extra data is
added a static final Map < String, Integer > numArgs to manage the number of arguments passed to the DependencyParser
refactor PathParamServerEndpointConfig to improve code readability to enhance maintainability and facilitate future updates
updated threshold retrieval logic and added shutdown logic in DefaultMigrationAddressComparator and MigrationRuleListener to improve code clarity and ensure proper resource management during threshold
updated method parameters from ` part ` to ` partOrList ` in ` RestClientRequest ` and ` RestClientRequestImpl ` classes to
[ drools - benchmark ] fix copy of bootstrap. css and bootstrap. min. css
removed the pPOSTag pattern for category extraction in SpanishTreebankLanguagePack. java to streamline the code by eliminating
hhh - 16686 - implement load ( object id, session, lockoptions ) instead of loadbyuniquekey ( )
hbase - 25836 regionserverflushtableproceduremanager and regionserversnapshotmanager should not remove cancelled element from taskpool
set the width and height only if they are non - zero to ensure proper rendering behavior when no dimensions are provided
removed redundant call to fillPool ( ) in HikariPool. java to streamline the code by eliminating unnecessary calls
replaced the assureMatchVersion method calls in multiple FilterFactory classes to ensure compatibility with the latest Lucene version and improve error handling
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4594 and add
added a conditional check before matching the COMMA token in DRLParser. java to ensure the token is only processed when the input is valid
refactor multiple Subject classes including GuavaOptionalSubject, IterableOfProtosSubject, MapWithProtoValuesSubject, MultimapWithProtoValuesSubject, and Proto
added a check for invalid payload length in WsFrameBase. java to ensure proper handling of invalid payloads and prevent application crashes
refactor package structure and import statements for PublishSubscribeChannel and related classes to improve organization and clarity of the code structure
updated the data type of executionId from String to Long across multiple classes to improve type safety and maintainability by using a more appropriate data type
added width and height digest calculations in ImageProcessor. java to improve image processing accuracy
removed log statement for overlay version in SolrConfig. java and added necessary imports in SolrConfigHandler. java to streamline logging output and enhance
updated delay duration from 60 seconds to seconds to allow more time for synchronization operations
updated the file time retrieval logic in SegmentV1V2ToV3FormatConverterTest. java to ensure consistency in timestamp formatting across the
updated the ` addPathToMTree ` method to accept a ` Path ` parameter instead of a string to enhance flexibility by allowing paths to be
updated DefaultPackageScanClassResolver to handle URLs containing " file : " and improved exception handling for URISyntaxException to enhance URL processing robustness and
[ hotfix ] [ table - common ] introduce timestampextractorutils for backwards compatibility
added a new class SpringSecurityAuthenticationSource to handle LDAP authentication to enhance security by providing access to LDAP user details
refactor AbstractConcurrentArrayQueue and ManyToOneRingBuffer classes to improve code readability and maintainability
updated minSdk from LOLLIPOP to KITKAT in ShadowAlarmManager to ensure compatibility with KitKat devices
replaced the auto - suggest dialog implementation with caching file lists to improve user experience by displaying cached file names
added a new test method ` testNewput ` in ` TxInputUtilTest. java ` and updated assertions in ` StoreAPITest.
updated method signature and variable names for consistency in MongoTemplate. java to improve code readability and maintainability
updated zoom factor calculation and type casting in MapOverviewImageMouseHandler. java to ensure proper handling of zoom values and improve type safety
added DefaultSimilarity to KNearestNeighborClassifier and updated related tests accordingly to enhance similarity handling and improve test coverage for KNearestNeighbor
replaced SolrQueryParser with ConstantScoreRangeQuery in LukeRequestHandler. java to improve query performance by utilizing a more efficient query parsing
changed the method call from ` toString ( ) ` to ` getReason ( ) ` in ` LowResourceMonitor. java ` to improve clarity by
updated package - info. java files for mmm and ppp packages to improve documentation clarity and maintainability
added MTU request handling in ShadowBluetoothGattTest and implemented onMtuChanged method in ShadowBluetoothGatt to enable reliable MTU
refactor TestPayloadNameRequestWrapper to use createServletOutputStream ( ) instead of creatingServletInputStream ( ) to improve code readability and maintainability by
added logging for UnsatisfiedLinkError in VoskSTTService to improve error handling and logging clarity
replaced HashMap with ConcurrentHashMap for mProcessingChains to improve thread safety and performance in concurrent environments
updated Japanese and summary indicators in Resources _ ja. java to improve internationalization support and enhance user experience
updated condition from ` size > 0 ` to ` size > 1 ` in ` JDBCTypeMapping ` and test assertions in ` JDBCTypeMapping
added / removed players to ` addPlayer ` and ` removePlayer ` methods synchronized to ensure thread safety during player addition and removal operations
replaced direct accessibility active check with a dedicated state tester in TerminalView. java to improve code readability and maintainability by centralizing accessibility
added SIDE _ NAVIGATION to conditional statements in MenuBar. java and SideMenuBar. java to enhance navigation experience by supporting additional
removed the use of Disposable in PoloniexManualExample. java and added error handling in WampStreamingService. java to improve
added a validation check for the energy limit type in UpdateSettingForEnergyLimitContractActuator to ensure that the energy limit must be non -
updated URL handling in PostmanJsonBuilder and added protocol property in UrlBean to improve clarity and maintainability of URL management
added getter and setter methods for namespacePrefixRef in SoapJaxbDataFormat to enable configuration of namespace prefix references in the data format
added ONE _ MINUTE _ MILLIS constant and refactored date comparison logic in TestRange. java to improve test readability and maintainability by
added security status verification in BasicAuthIntegrationTest. java and updated ZkStateReader. java to use security properties to ensure proper server restart
added a PriceFeed parameter to the TradesChartsViewModel constructor to enable customizable market price based on trading preferences
refactor configuration retrieval in PhoenixHBaseLoaderIT and PhoenixHBaseStorerIT to use a single configuration object to improve code readability and maintain
replaced variable names from and end with a new variable for clarity to improve code readability and maintainability by using named variables
added file data storage management in FileDownloader. java to ensure the file is saved when it is downloaded
[ java ] set the length of a log file in a try - with - resources statement to ensure that the log file's length is
added a method ` checkIfRegistryRunning ` to ` TestLibrary ` and a retry method ` deleteFileIfExistsWithRetry ` in ` FileUtils
replaced multiple import statements with a call to componentPresetDao. startLoading ( ) in EditTest. java and TextureTest. java to
added @ SuppressWarnings annotations across multiple Java files to suppress warnings related to raw types and improve code clarity
added a null check for instances in TraceFeignContext to prevent potential NullPointerExceptions when instances are null
added handling for TRANSACTION _ READ _ COMMITTED and TRANSACTION _ SERIALIZABLE in PhoenixConnection and PhoenixDatabaseMetaData to ensure that transactions are only
added transaction attribute handling in AbstractStepFactoryBean and enhanced error handling in ItemOrientedStep and SkipLimitStep classes to improve transaction management and
updated CasManagementWebAppConfiguration to use DirectCasClient instead of CasClient to enable direct access to the CAS client in the
added functionality to edit the category in the ListFragment and NavigationDrawerFragment to enhance user experience by allowing category additions in the navigation drawer
renamed the method from ` cancel ` to ` cancelMatchingOperation ` in ` DownloadFileOperation ` and ` FileDisplayActivity ` to improve clarity
pdfbox - 4892 : simplify code, a suggest by valerybokov
updated font size handling in TerminalView and TerminalBridge classes to ensure consistent font size retrieval across the application
added validity check before modifying the ConstantFrame in ConstantAnalysis. java to ensure proper handling of exceptions and avoid unnecessary modifications
refactor code to improve readability and maintainability to enhance code clarity and facilitate future updates
replaced the return statement with a new ArrayList instance to improve memory efficiency and maintainability of the code
refactor code to simplify lockService initialization and improve readability to enhance code maintainability and reduce complexity in lock handling
added a method to set a revision in MicroserviceVersions and initialized it in TestInstanceCacheChecker to ensure the microservice versions have a valid
refactor foreign key handling and index name generation in TableRetriever to improve clarity and maintainability of foreign key management
camel - aws2 - s3 - added unit test base on user forum issue
added a new method ` getBitstampUserTransactions ` to ` BitstampAccountServiceService ` and updated its implementation in ` BitstampAccountService
added error handling for retrieving a component in BlueprintContainerRegistry to improve robustness by catching potential NoSuchComponentException
changed the return type of the push method from void to boolean in PushBuilder, ApplicationPushBuilder, Stream, and StreamProcessor classes to enable
refactor LegacyAddressTest to use BufferedReader for reading legacy addresses to improve code readability and maintainability by replacing BufferedReader with InputStreamReader for comparison
changed the access modifier of the findDropTargetAt method from package - private to public to allow access to the method from other classes
added a ` setupPushWarning ` method to ` NotificationsActivity ` for handling push notifications to improve user experience by providing a clear notification when
added debug logging for channel closure in NettyAsyncHttpProvider to improve traceability of channel closure processes
updated null and empty checks to use StringUtils. isEmpty ( ) instead of checking for null values to improve code readability and prevent potential NullPointerExceptions
refactor DefaultAnnotationEngine and Stubber classes to improve code readability and maintainability
added an @ Ignore annotation to MemoryManagerTest. java to temporarily skip the test due to PHOENIX - 2840
nifi - 746 : added timezone support to the about and flow resource
fix indexoutofboundsexception in splitstrategy
removed unnecessary try - catch blocks in BeanContextSupport. java to improve code readability and maintainability
don't wait for active circuits to become active.
replaced GdxRuntimeException with IllegalStateException in ShaderProgram. java to improve error handling by using a more specific exception type
flume - 198. move source and sink to separate runner class.
changed log level from error to info in FastBindLdapAuthenticationHandler. java to improve logging clarity for user authentication failures
refactor ContainerOrderFocusTraversalPolicy for improved readability to enhance maintainability and facilitate future modifications
make getpointlength ( ) return int rather than double
corrected the spelling of " source " in the CasRiskBasedAuthenticationEvaluationStartedEvent constructor to improve code readability and maintain consistency
refactor connection handling and logging in SchemaCrawlerMain and Executable classes to improve resource management and enhance logging clarity
bump default tl version for jdk 17
updated error messages in CountersManager. java for clarity to improve error reporting by providing more context about buffer issues
modified audio playback logic to handle cases when mCurrentAudioQueuePosition is zero to ensure correct audio playback behavior when no current audio queue is available
removed debug logging for cancelled connections in HttpConnection. java to streamline logging by eliminating unnecessary debug information
added support for the @ Transient annotation in JpaPersistentPropertyImpl and its unit test to ensure that transient fields are correctly treated as transient in
updated stack version ID from " HDP - 2. 1 " to " HDP - 2. 200 " in UpgradeResourceProviderTest
trufflevm : make eval method return object instead of symbol.
changed access modifier of ` isBinaryType ` method from private to public and modified logging statements in ` Proxy. java ` and ` SampleResult
updated TEZ _ DYNAMIC _ PARTITION _ PRUNING _ MAX _ DATA _ SIZE configuration from " hive. tez. dynamic.
added sorting logic for JavaProblem instances in JavaEditor. java and JavaProblem. java to improve performance by ensuring only JavaProblem instances are
replaced the DEFAULT _ OFFHEAP constant with a default value in DictionaryIndexType and BloomFilterHandler to ensure consistent handling of dictionary index configurations
added support for line separator in TableWriterTest to improve readability and maintainability of the table output
refactor DebugHelper to improve code readability to enhance maintainability and facilitate future updates
added a boolean flag ` ownsTexture ` to ` ParticleEffect ` class to ensure texture owns only when necessary
hive - 2658 : add additional configuration property to hive. server2. authentication. ldap. basedn, ldap. url, and
add google. cloud. datacatalog. v1beta1. searchcatalogrequest. scope to datacatalog module
replaced direct calls to getSystemService ( Context. INPUT _ METHOD _ SERVICE ) in DetailActivity. java to improve code readability and maintainability by
added a test for converting a primitive to a map of primitive types in DataTableTypeRegistryTableConverterTest to ensure correct mapping of primitive types to
increased the size of TestFileSystem from 100, 500 to 10, 000 to accommodate larger database files and improve test reliability
update error message in ContentTypeManager. java to clarify the nature of the triggering file to improve clarity and user understanding of the triggering file error
refactor dropSequences method to abstract and add exception handling for migration failures to improve code organization and provide clearer error handling for database operations
added null check for status in MainWindow. java to prevent potential NullPointerExceptions when status is null
replaced the assignment of'f'with a variable assignment in DocumentBuilder. java to improve code readability and maintainability
HierarchicalIcons. java to handle hierarchical icon events to improve handling of icon properties in the application
added a test for upserting a non - existing object in MongoTemplateTests. java to ensure that the findOne method correctly returns the inserted object
updated mid calculation logic across multiple classes to ensure correct boundary conditions for MIDI calculations
added functionality to record launches in Launcher and Stats classes to improve tracking of launches and avoid null pointer exceptions
added graphics drawing functionality in JavaSEPort. java to ensure proper resource management and prevent memory leaks
add team to last participant section and team for each response to ensure that team members are correctly associated with each response
added logic to return a player's inventory ID if it is zero to ensure proper identification of player inventory IDs in the inventory management system
added a conditional check before breaking the loop in ConfigDescriptionRegistry. java to prevent infinite looping when no matching entry is found
added ` returnType ` and ` returnTypeAnnotations ` to the ` emptyList ( ) ` and ` emptyList ( ) ` methods across multiple parser visitors to
added handling for blended tiles in TileMapRenderer. java to ensure proper initialization of tiles based on their properties
removed multiple Java utility classes from the Probe class to streamline the codebase by eliminating unused dependencies
added null checks and area calculations in IfcTools2D. java to improve robustness and prevent potential NullPointerExceptions
refactor lockOnSync initialization to use'key'instead of'currentThrottleRate'to improve code clarity and maintainability by using a
pipe : fix npe in case of a subclass of a superclass of the same class.
increased the timeout duration of ZkController instantiation from 1 second to 60 seconds to improve test reliability by allowing more time for ZooKeeper operations
added a test for generating a passcode token with client parameters in TokenMvcMockTests. java to ensure correct handling of client parameters in the
added constructors for LengthFilter and KeepWordFilter in TestRandomChains. java to ensure proper handling of input parameters and prevent miscellaneous
removed JUnit Ignore import from RandomPlaneTest. java to eliminate unnecessary dependencies during test execution
use Integer. toUnsignedLong instead of putI1 in llvmx86 _ 64bitvastart.
replaced the static native method ` upcast ` with a native method ` getinstance ` in ` btCollisionObjectArray ` and ` btRigid
added a method to retrieve the copyright year in BuildProperties and updated OPENROCKET _ URL in AboutDialog to improve copyright management and provide more
add getdistributedobjects ( ) method to jetclientinstancetest.
added print statements in FinSet. java and refactored expMOI values in MassCalculatorTest. java to improve debugging capabilities and
updated variable names from TOTAL _ MEMORY to MAX _ MEMORY in SmartDexingStep. java to improve clarity and consistency in memory management
changed exception handling from MetadataException to Exception in StandaloneSchemaFetcher. java and renamed the method to setCompressors in CreateAlignedTimeSeriesPlan
updated GENESIS _ OUTPUT _ PREFIX from " Bisq co - founder - " to " Bisq co - founder
updated JsonLoaderTest to use json for input parsing and added ignore and unignore exception handling to improve test reliability and ensure proper handling of
updated the capacity check from 1 < < 30 to 0x40000000 in ObjectSet. java to ensure that the required capacity does not exceed
updated import statements and added null checks for data scale in ColumnSnapshotGenerator. java to improve data scale handling and prevent potential NullPointerExceptions
removed @ AddToRuleKey annotations from several fields in AppleTest. java to streamline the code by eliminating unnecessary @ AddToRule
added handling for SecurityException in FileHelper. java and TextHelper. java to improve error management and prevent crashes due to security issues
added a static final constant StyleWithMultipleAttributes in R. java and created corresponding test cases in ShadowThemeTest. java to support multiple attributes
updated the doesContainsSheetName method to use the size of sheets instead of a fixed index to ensure the sheet name does not contain duplicate entries
replaced primaryColor with elementColor in ManageAccountsActivity to ensure consistent theming across the application
added a null check for the replyHandler in DefaultEventBus and simplified the path resolver in DefaultPlatformManager to ensure safe handling of null reply
added support for binary collation configuration in MariaDbDbDbmsType, MySqlDbmsType, and FilterSortedSkipOptimizer to enhance compatibility
added a new method ` whenType ` that returns an Optional < T > based on the type of ` treeType ` to enhance flexibility in
refactor the user view destination retrieval logic in ItemLauncher. java to improve code readability and maintainability by consolidating navigation logic
modify the return statement to create a temporary redirect URI based on the application settings service to ensure the application redirects to the public URL of the application
[ hotfix ] [ kinesis ] provide more informative error message when deserialization schema be not serializable
( chore ) camel - aws2 - dsl : fix javadoc warning
[ hotfix ] [ test ] shut down the scheduler in leaderelectiontest
renamed the method ` setIconsAndBannersTransitionProgress ` to ` setIconsAndBannersTransitionProgress ` across multiple classes to improve clarity
added a protected method ` read ( EndPoint endPoint, Buffer buffer ) ` to encapsulate buffer read functionality within the ` ProxyHandler ` class
replaced BufferUtil. allocate ( 32 ) with ByteBuffer. allocate ( length 11 ) in ABCase1 _ 2. java to optimize memory allocation
refactor prepareStreamsToUpload method to return a boolean indicating success to improve clarity and functionality of stream upload handling
updated order comparison logic to use Integer. compare instead of Integer. MAX _ VALUE in AbstractConfigLoader and TestMicroserviceConfigLoader to ensure
added a new file PicOfDayAppWidget. java for managing app widgets to provide functionality for retrieving and displaying images related to app widgets
bug fix : use system internal lb offering instead of internal lb vm offering
updated HiveParserCalcitePlanner to use HiveRelOptUtil instead of RelOptUtil and modified join condition handling to improve compatibility with Hive '
added @ Deprecated annotation to multiple transformation classes to indicate that these classes are outdated and should not be used in future development
added user and password options for JMXConnector in NodeToolCmd. java to enable better management of JMX credentials for the remote JMX service
refactored the scratch variable initialization in Stemmer. java to improve code readability and maintainability
updated page numbering logic in AppsCustomizePagedView. java to improve accuracy of widget app widget resolution
ggbapiw : don't show 3d thumbnail if there be no 3d view
updated rotation calculations in GcodeRenderer to ensure proper positioning based on rotation direction
added WORKSPACE option to DAEMON and updated TerminalClient to set the workspace directory to enhance functionality by allowing users to specify a workspace directory
updated the test file from " options. apt " to " options. html " to align the test with the intended HTML file format
updated ScimUtilsTest to use JUnit 5 annotations and added PollutionPreventionExtension to enhance test clarity and ensure proper error handling during user
updated the ` confimAccess ` method to accept a ` Map < String, Object > ` model instead of a single ` AuthorizationRequest `
added an assertion to assertually wait for the second level cache hit in HibernateIT. java to ensure that cache hits are accurately reflect in
refactor EventBusHook class to improve code readability to enhance maintainability and facilitate future updates
updated MultiPaintEventTest. java file to improve test coverage and maintainability
changed variable declaration from final to non - final in WorkspaceStateTransitionAnimation. java to ensure immutability of mNewScale for non -
refactor SyncFactory to improve synchronization handling to enhance performance and maintainability of the code
added functionality to handle unique key fields in LukeRequestHandler to improve data consistency by associating unique keys with unique fields
added support for rounded border colors in BorderEditor and EditableResources to enhance the visual appearance of rounded borders in the application
added @ TruffleBoundary annotation to Assert. java and introduced CompilerAsserts. neverPartOfCompilation in BinaryParserException. java to ensure
[ hotfix ] [ test ] replace slotpoolimpl with declarativeslotpoolbridgebuilder in defaultschedulerbatchschedulingtest
added logging statements for pending requests in GatewayRSocket, GatewaySocketAcceptor, and PingPongApp to improve traceability of pending requests
added a menu item click listener to the RecentChatFragment class to enhance user experience by providing easy access to recent chats
change ` InfoDropTarget ` from ` ButtonDropTarget ` to ` UninstallDropTarget ` and update related methods to return a boolean indicating
replaced calls to ` getTail ( ) ` and ` removeTail ( ) ` methods with ` push ( ) ` and ` pop ( )
updated wikimedia wiki URLs in CommonsApplication. java to ensure compatibility with the new wikimedia organization
refactor index management by introducing ` setIndex ` and ` updateIndex ` methods to improve code readability and maintainability by encapsulating index and index
replaced ` Collections. sort ` calls with direct calls to ` Collections. sort ` in multiple classes to simplify sorting logic and improve code readability
added DateTimePatterns for full and medium time patterns in hr _ HR. java to enhance date formatting capabilities for better data representation
clear focus from clickedView in DetailFragment. java to ensure focus is properly cleared when the view is refreshed
replaced notifyDataSetChanged ( ) with spinnerDescriptionLanguages. setSelection ( position ) and modified language selection logic in DescriptionsAdapter and SpinnerLanguagesAdapter to
updated time zone data from " WSST " to " WSDT " across multiple TimeZoneNames files to ensure accurate representation of time zone data for
added native methods for registering global and weak access fields in FastGetField. java to improve memory management and facilitate access to fields
added default value retrieval for fields in ReflectData. java and updated test assertions in TestReflect. java to ensure correct handling of null values
increase default offer timeout for seda blockwhenfull test
added a null check before remapping the R class in ResourceMerger to prevent potential NullPointerExceptions when the class is not initialized
added constructors to HapiFhirDialect and HapiFhirDialect2Dialect, HapiFhirMariaDB,
added support for explicit connection close in HttpProducer and created corresponding unit test to ensure proper handling of HTTP connections and validate test coverage
increased timeout duration from 60000ms to 120000ms in BasicDistributedZkTest to allow more time for distributed operations
added a test to verify that final _ price _ cts is not greater than zero in BaseReservationFlowTest. java to ensure that the
refactor Parser class for improved readability to enhance maintainability and facilitate future updates
refactor CasProcessingFilter to improve code readability to enhance maintainability and facilitate future updates
replaced calls to ` getFirstChild ( ) ` with ` getFirstElementChild ( ) ` in multiple parser classes to ensure compatibility with thymeleaf's
planner - 258 : add test case for remove enum from look up manager
[ java ] wait for cluster to shut down.
changed log level from warn to info in ELContextCleaner. java to provide clearer logging for potential issues when cleaning cached beans
set mContentType to " application / octet - stream " in WebdavEntry. java to ensure correct content type is used for HTTP response
added ` getQueueSize ( ) ` method to ` LazyTraceThreadPoolTaskExecutor ` and created unit tests for ` LazyTraceThreadPoolTaskExecutor `
added checks for distance between two coordinates in DistanceOp. java to ensure that distance calculations respect minimum defined coordinates
renamed the field'required'to'requiredLabel'in AbstractUITag. java to improve clarity by accurately reflecting the label
replaced the ` next ( ) ` method with an ` updateProgress ( ) ` method in ` PurgingPartitionIterator ` to streamline the
added a method ` getAsUnescapedPath ` to ` SchemaPath ` for handling top - level arrays to ensure proper handling of unescaped paths
added methods getHeight ( ) and getWidth ( ) to BaseMonochromeBitmapSource to provide access to the dimensions and width of the BaseMon
added validation to ensure polygons contain at least 3 points to prevent ArrayIndexOutOfBoundsException when vertices are shorter than 6 points
replaced ` ObjectMapper ` instantiation with ` ObjectMappers. newDefaultInstance ( ) ` in multiple test files to simplify object mapper initialization and improve code
added a null check for the ` coeff ` variable in ` GeoImplicitCurve. java ` to ensure that ` coeff ` is only initialized when
updated the method for reading Unicode names in ExternalNameRecord and added a corresponding test case in TestExternalNameRecord to improve handling of Unicode names
( chore ) camel - jms : fix typo in description
added logic to return both username and password in LoginInfoEndpoint and updated test cases in LoginInfoEndpointTests to ensure proper handling of login prompts
modify listener removal logic to use a conditional removal of listeners to ensure listeners are removed only if they are equal to each other
added functionality to toggle the spinning of the chart in PieChartActivity to improve user experience by allowing users to toggle the chart's rotation
xenserver : kill copy process on vdi uuid. vhd
hbase - 25836 hmaster. getstate ( ) should skip normalizing table if namespace have quota
updated import statements and added a resize method for pressure values in AndroidInput. java to improve code clarity and ensure proper resizing of pressure values
added a new method ` propertyValuesOf ` to the ` PropertySupport ` class to enhance testing capabilities by providing a list of property values
added JUnit @ Ignore annotation to ClientMapNearCacheTest to temporarily skip tests that are always failing and blocking PRs
fix the hopperhock not use the correct bounding box.
added authentication dialog implementation in SsoWebViewClient. java to enhance user experience by providing required authentication credentials
added methods for deleting documents and deleting queries in TestStressIndexing2. java to improve test reliability and facilitate deletion operations
[ flink - 22559 ] [ table - planner - blink ] ignore upsertkafkatableitcase due to flakiness
replaced the method ` get ( j ) ` with ` computeIfAbsent ( j, k - > new ArrayList < > ( ) ) ` for
added configuration for DeserializationFeature to enable single value as an array in DefaultEntityMapper to enable support for serializing multiple values in JSON
updated localization update log to include UK, and SL to improve localization support for the application
updated SHORTCUT _ CATEGORIES to use ResourceUtils for retrieving application categories to improve flexibility and maintainability of category retrieval logic
renamed the method ` visitExpressionInstanceOf ` to ` visitRelExpressionInstanceOf ` and updated its implementation to improve clarity and consistency in expression handling in
nifi - 746 : add content - type attribute to gethttp response
added a new ` toProvenance ` method to ` ResourceHistoryProvenanceEntity ` and updated ` FhirSystemDaoTransaction
renamed ` exit _ button ` to ` done _ button ` and updated corresponding references in ` HelpActivity ` and ` SearchBookContentsActivity `
updated NatsConfiguration. java file to improve configuration handling and maintainability
updated the ` invalidateStalePartitions ` method to accept a list of partitions instead of a single partition name to enhance functionality by allowing multiple partitions to
replace BoundedFifoBuffer with UnboundedFifoBuffer in ViewResultsFullVisualizer. java to improve performance by using a more efficient buffer
replaced ` ic _ group ` with ` ic _ chat _ bubble ` in multiple adapter files to provide a more visually appealing icon for users
replaced calls to ` getLong ` with ` getLongVolatile ` in both ` BroadcastReceiver ` and ` BroadcastReceiverTest ` to ensure data is
updated test methods in MocksCreationTest to improve clarity and consistency to enhance test readability and maintainability by following naming conventions
added a constant DATA _ SOURCE _ NAME in CSVThirdEyeDataSource and changed method visibility from package - private to public in YamlDetectionConfig
increased awaiter timeouts from 10 seconds to 30 seconds to allow more time for phaser synchronization
removed the ` BuildSlaveFinishedStatusEvent ` class and updated its implementation in ` DistBuildRunCommand ` and ` DistBuildSlaveEventBus
fix encode issue in vmwarestoragemanagerimpl. updatetemplate ( )
added a test for depositing a workspace item without a workflow item to ensure that the workflow item is correctly deposited without a workflow item
[ hotfix ] make classloadersupportimpl. classpath ( ). stream ( ) distinct
removed the method ` isBoxedPrimitive ` from the ` Unbox ` class to streamline the code by eliminating unused functionality
updated command - line argument handling in SpecificCompilerTool. java and added a test for ordering of flags in TestSpecificCompilerTool. java to
added logic to delete the directory if a table is not an external table to ensure that the directory is only deleted when a table is present
hive - 2658 : increase the number of async execution thread to 100 ( jesus camacho rodriguez,
added a try - catch block around the dismissDialog call to handle potential exceptions during dialog dismissation
updated UpgradeResourceProvider to use dynamic service and component names for RequestResourceFilter to improve clarity and maintainability of resource filtering logic
added a new ConferenceInfoDocument variable in OperationSetTelephonyConferencingSipImpl. java to store the current conference information for
clear the log model before reload the flutter log view ( # 3441 )
added checks for output and input shutdown events in ChannelEndPoint. java to ensure proper handling of socket shutdown conditions
refactor SetNullableGenerator to improve code readability to enhance maintainability and facilitate future updates
camel - example - reportincident : add servlet transport support
replaced form URLENCODED handling with a new static final MediaType in NettyRoutingFilter. java to improve code readability and maintainability by
added ApiOperation annotations to AbstractBaseService, IBaseService, MyEndpointWithInterface, and MyService classes to enhance the API endpoint's
updated lifecycle listener handling in Lwjgl3Application and Lwjgl3Window to ensure proper management of lifecycle listeners before disposing the window
updated the color of the FG _ FK constant from 90 to 200 to improve the visual appearance of the FG
added a required field for audio formats in SoundManager. java to ensure compliance with the required audio format requirements
use system keyspace's built index instead of system keyspace's built index
added version information to PMDPlugin and updated related components in StringKeys and GeneralPreferencesPage to provide more detailed versioning information for PMD
[ hotfix ] [ test ] use exceptionutils. findthrowable instead of throwable.
refactor MediaFormatUtil to improve code readability to enhance maintainability and facilitate future updates
added an ` isCellEditable ` method to the ` GeneralTab ` class to indicate whether the cell should be editable or not
added ` isOnlyPrintCommands ( ) ` method to ` AbstractUnusedDependenciesFinder ` and ` JavaBuckConfig ` classes to conditionally print command
added a static counter to track temporary vscales in VocalTractModifier and updated the vscales value in VocalTract
updated import statements for BaseScalarUdfTest in multiple test files to ensure compatibility with the latest Hive test utilities
added hashCode and equals methods to UaaAuthenticationDetails class to ensure proper comparison and hashing functionality for UaaAuthenticationDetails instances
refactor TestSkeletonControlRefresh to use AnimComposer instead of SkeletonControl to improve animation handling and streamline skinning management
renamed NodeFilter to NodeCountFilter across multiple files to improve clarity and maintainability of the code
updated the condition for checking sync block size in NodeImpl. java to ensure that sync block size does not exceed the batch size
updated the setState value from 365 to 366 and removed unused variables in DebugExpressionParser. java to improve code clarity and maintainability
updated dependency resolution logic in ExcludeDependency. java and Pom. java to improve dependency resolution accuracy and maintainability
replaced ` tmp ( ) ` with ` dst2 ( T v ) ` in the ` lerp ( T target, float alpha )
initialized'args'to an empty array to ensure proper initialization of'args '
updated linker argument handling in RustBinaryDescription and added a new test for linker flags in RustLinkerIntegrationTest to improve flexibility in linker
updated file names in AdminEmailPageUiTest. java and modified property loading logic in TestProperties. java to improve clarity and maintainability of
added configuration options for LLAP splits in multiple classes to enhance configuration flexibility and improve logging clarity
removed the import of java. io. File from TileAtlas. java to eliminate unnecessary dependencies and improve code clarity
replaced ByteBuffer buffer handling with AtomicBoolean for closed states and refactored error handling in GradleDaemonExecutor to improve resource management and enhance error reporting during
updated the ` validateQuery ` method to include an additional ` arguments ` parameter to enhance error handling by providing more context about query validation failures
updated INDEX _ VERSION from 1 to 2 and refactored the getTree method in LuceneExecutor. java to improve code clarity and maintainability by
[ hotfix ] [ kryo ] add unit test for default kryo registered class.
added null check before removing configuration properties in BlueprintConfigurationProcessor. java and updated test cases in BlueprintConfigurationProcessorTest. java to ensure
updated handling of boolean values in MetaStoreDirectSql. java to improve type safety and error handling for invalid input
added hideCustomizationDrawer ( ) method to mmm Launcher. java and ppp Launcher. java to improve user experience by hiding the customization
refactor TermVectorComponent to use a constant for warnings instead of a named list to improve code readability and maintainability by centralizing warning handling logic
added logging for optimistic types and disabled the compile job logging to improve logging clarity and provide better visibility into optimistic types during the compilation process
refactor Expect class to improve code readability to enhance maintainability and facilitate future updates
added UnixSocketConfigurationStrategy to DockerClientFactory and created a new UnixSocketConfigurationStrategy class to enable access to Docker with Unix local sockets in the
added tests for ` testEvenLowRateIP ` method in ` CloseableDoSFilterTest ` to address flakiness in tests related to
camel - 16400 : camel - reactive - streams should not throw an exception if there be no active subscription.
refactor Vectorizer to improve handling of TezTask and MapWork types to enhance functionality and maintainability of the vectorization process
added a new boolean parameter to the constructors in StringAppender and LogDivertAppender to enable customizable layout behavior during logging
added a null check for the GuiPackage before updating the current node and configuring it to prevent potential NullPointerExceptions when the GuiPackage is not
use long [ ] instead of long [ ] for encoded value
refactor multiple classes including XShareAuto, LoadClassNegative, XCheckJSig, and ReadFromNoaccessArea to improve code organization and
add unit tests for DefaultTransactionThreadLocal to ensure correct behavior of transaction retrieval methods
added a check for invalid operation handles in HiveStatement. java to improve error handling and logging for invalid operations
rename ALTER _ TABLE _ ALTER _ COLUMN _ DROP _ NOT _ NULL to ALTER _ TABLE _ ALTER _ COLUMN _ DROP _ NOT _ NULL
camel - aws - secrets - manager - add unit test for it
refactor SimpleTree class to improve code structure to enhance maintainability and readability of the code
updated the response status from INTERNAL _ SERVER _ ERROR to INTERNAL _ SERVER _ ERROR in UserREST. java to ensure that the error message is
added a boolean parameter to the fromContent method and updated its implementation accordingly to allow for a sub - tree in the result object
updated column width calculation in Sheet. java and added a new test method in TestHSSFSheet. java to ensure correct column width calculations and
added configPath parameter to the less command in Builtins. java to provide additional configuration options for better command execution
updated collections from Set to Collection for tables in DotWriter. java and GraphExecutable. java to improve performance and maintainability by using a more
updated Docker image version from 18aa929c653284189fc9cefa45b731021857b6047a
server : remove assertion from agentmanagerimpl. updatestate ( )
replaced conditional logic for generating raw key in DefaultGroupKeyGenerator to simplify key generation logic for multi - valued columns
updated test methods for seeking exceptions and improved error message formatting to enhance test reliability and provide clearer error reporting during seek operations
bcsilicon recipes : use setbuilder instead of set. of ( )
changed method name from ` put ` to ` putObject ` in ` GraphHopperConfigMixIn. java ` to clarify the purpose
modify visibility logic in CellLayout and introduce a doDragExit method in DragController and Workspace to improve drag handling and ensure proper drag exit behavior
refactor ModifyRequestBodyGatewayFilterFactory to use original body instead of rewrite function to improve handling of empty modify request bodies
added import for sun. reflect. misc. ReflectUtil. isPackageAccessible and modified conditional checks in ConstructorFinder, FieldFinder, and Method
changed log level from warn to trace in LoggingHandler. java to improve logging granularity for better debugging and monitoring
fix for issue #348 : wildcard in whitelist path be not work
added import statements and refactored gallery item handling in GalleryActivity. java to improve code organization and enhance user experience by ensuring gallery item
added a singleton pattern for MongoDB services in MongoDBServiceFactory to improve handling of null values and prevent potential NullPointerExceptions
added methods to prevent code formattingMakingFinal for boolean values in InlineConstantMutatorTest. java to improve code readability and maintainability by
added a Blackhole parameter to the decode method to enhance error handling during state decoding
chore ( deps ) : upgrade gapic - generator - java to 2.7. 0 and update gax - java to 2.16. 0
[ knx ] ignore group address / dpt not according to group address
added clearing of witnesses in ManagerTest. java to ensure that witnesses are properly cleared before tests are executed
added logging for SQLException in JdbcPageSink to improve error reporting during abort operations
replaced calls to ` getScriptStackString ` with getter and setter methods for ` stack ` and ` setStack ` in ` NativeError. java
added a check to return false if the name starts with a period in DrillPathFilter. java to ensure proper handling of periods in path names
renamed the variable ` onboard ` to ` autoLoadPinotMetricsService ` for clarity to improve code readability and maintainability by using a
added a call to clearIndex ( ) in BasicFunctionalityTest. java to ensure that the index is reset before further operations
changed BOLDWEIGHT _ NORMAL from 190 to 0x190 to align BOLDWEIGHT _ NORMAL with expected value
changed the visibility of ` fThreadGroup ` from private to private volatile and modified the ` fLookForStuckThread ` field to be
removed the final modifier from ValueResultData constructors to enforce immutability of ValueResultData instance
updated FuzzyQuery to use super. hashCode ( ) instead of super. equals ( ) to ensure proper comparison and hash code generation for objects
removed print statements from PushedResourcesTest. java to clean up the test output and reduce unnecessary console output clutter
changed the return type of the removeFile and removeDirectory methods from SharedRandomAccessFile to void to allow method overriding for better usability
updated product version from 2.16. 1 to 2.16. 0 in JdbcDriverInfoRetrieverTest and SchemaCrawlerCoverageTest to ensure
updated the principal creation logic in PersonDirectoryPrincipalResolver to ensure that the principal is resolved without any attributes
changed log level from info to warn in OpenWebNetBridgeHandler. java to improve logging granularity for better troubleshooting
updated method names from ` intHash ` to ` hash ` across multiple hash implementations to improve clarity and consistency in hashing operations
added a constructor to ThumbnailGenerationTask that accepts a FileDataStorageManager and an Account parameter to ensure that storageManager is not null before proceed
added a condition to check if the number of tries is less than 5 in the loop condition to ensure that the loop does not exceed defined limits
added a new file ` Bug1933922. java ` that implements a recursive compilation mechanism to demonstrate and test the behavior of recursive compilation in
removed unnecessary parentheses and simplified comparison logic in MultipleSeriesProvider. java and AjaxDecoratorMapper. java to improve code readability and maintainability
updated character validation from 33 to 32 in FileResolver. java to ensure compliance with character requirements
added focus request to the component in Display. java to ensure the component receives focus when needed
updated test cases and data retrieval in InstructorHomePageUiTest. java to improve test coverage and ensure correct data handling
renamed ` JsonParserAsync ` to ` JsonStreamParser ` across multiple files to improve clarity and consistency in naming conventions
replaced Crouton. cancelAllCroutons ( ) with Crouton. makeText ( mActivity, msg, onStyle. CONFI
added a test method for schema queries and fetching with unrelated templates in IoTDBSchemaTemplateIT. java to ensure correct behavior of schema
refactor Dialog class to improve code readability to enhance maintainability and facilitate future updates
replaced Runtime. getRuntime ( ). exec ( args ) with ProcessBuilder to manage Java TOOL _ OPTIONS environment for better command execution
updated metrics reporting to use a dynamic IP address to ensure metrics accurately reflects the local host's metrics
refactor metric handling to use a loop for better readability to improve code maintainability and reduce repetition in case statements
added assumptions to skip tests related to Apple platform availability in DaemonLifecycleManagerTest and InstallCommandIntegrationTest to ensure tests are only executed when macOS
refactor JVMCIVersionCheckVendorTest and JVMCIVersionCheck to use a dedicated method for property validation to improve code readability and maintainability by
updated Mockito library version to ensure compatibility with the latest testing framework
updated test cases in TestLargePageUseForAuxMemory. java to improve test reliability and maintainability
updated BinaryParser and PlainTextParser to include encoding handling and added methods to set and get charset in ParsingExecutionContextView to enhance parsing capabilities and
added support for MultiPartFormDataCompliance in HttpConfiguration and created a new MultiPartFormDataCompliance enum to enhance functionality and maintainability of
added Gradle version 7.2 to GradleDistributionManager. java to ensure compatibility with JDK - 17
added a method to add types based on their type in the SnapshotControl class to improve type management by allowing multiple container types to be added
refactor Term class to improve readability to enhance maintainability and facilitate future updates
added null and empty check for runWith in ChangeSet. java to ensure robust handling of null values and prevent potential NullPointerExceptions
added a test method for verifying the same XA resource in ActiveMQXAConnectionFactoryTest to ensure that the XA connection behaves correctly when using the
renamed multiple classes related to audio device information to improve clarity and maintainability of the codebase
pdf417 : don't count rotation when there be too many image
refactor variable assignment for clarity in TaskView. java to improve code readability and maintainability
added a new file SumZeroFunctions. java to implement gaggr sum functionality to enable users to aggregate zero values in the gaggr
[ flink - 20536 ] [ table - planner - blink ] fix typo in firstvaluefunctionit
hbase - 2658 bucketcache. getallocationfailwarningmessage ( ) should be a static method
added a null check before putting properties in JDBCRoleService to avoid potential NullPointerExceptions when propName is not set
replaced ` @ VisibleForTesting ` annotations with ` @ VisibleForTesting ` annotations in ` StatusBarTouchController ` and ` RecentsView ` to
added methods to log containers with a stream option to improve container management by allowing indefinite logging of logs
add a new test class TestMVStoreCachePerformance for caching performance testing to improve test coverage for MVStore caching functionality
updated LONG value from " L " to " J " to correct the representation of the long type
changed the visibility of the delegatingApplicationListener method from public to static to allow the method to be accessed without needing an instance of the class
added null body to the exchange message in RestBindingAdvice. java to ensure that the exchange's body is cleared before proceeding
added FileDeletingTasklet class to manage file deletion in batch to enable better management of file deletions in the batch application
update size keep drawables in EuclidianView and EuclidianViewCompanion classes to ensure proper initialization of
lgtm [ java / index - out - of - bounds ] : fix arrayindexoutofboundsexception
replaced calls to ` sendEventToTest ` with a new method ` sendStateEventToTest ` to improve event handling by incorporating state ordinal
added checks for video thumbnail requests in RequestHandler and RequestHandlerV2 classes to ensure proper handling of thumbnail requests based on user agent
don't scroll to specific line when there be no problem
updated SideMenuBar to conditionally add buttons based on UI theme to improve UI consistency and appearance of the toolbar
added preload = " libskia " to the value set in Skia. java to enable additional loading options for Skia in the project
added a static final ID constant for unit tests in NetworkParameters. java to ensure consistent identification of unit tests across different network configurations
added error handling for format arguments in QueryCommand and corresponding test cases in QueryCommandIntegrationTest to ensure that format arguments are properly specified and improve
refactor IntIterator to use a fixed length instead of a fixed capacity to improve code clarity and maintainability by using a more descriptive variable name
updated the ` walkRuleAndAdd ` method to include a ` projectConfig. getSrcRule ( ) ` parameter to enhance dependency resolution based
added support for an override module name in PatchModuleFileManager. java to enable customizable module patch locations based on source overrides
[ java ] don't check if a candidate term id be less than the protocol version.
added conditional logic to set default policy based on SAML authentication to ensure proper handling of SAML authentication scenarios
added null checks for mappedTableResource in ReadBatch and WriteBatch classes to ensure required fields are provided when building a readbatch
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4617
refactor AnonymousAuthenticationFilter to use a Supplier for deferred authentication handling to improve clarity and maintainability of authentication handling logic
updated actor removal methods to include an additional boolean parameter to enhance actor management by allowing for unfocusing of actors
updated the prompt function to use a valid configuration string to ensure that the configuration is valid before proceeding
added logging capabilities to NettyHttpServer and RoutingInBoundHandler to enhance logging capabilities and improve response handling
refactor multiple Java classes for improved consistency to enhance maintainability and readability of the codebase
replaced direct update ( ) with SwingUtilities. invokeLater ( this : : update ) to ensure UI updates are executed on the Event Dispatch Thread
( chore ) camel - groovy : fix issue with groovy cache
refactor plugin resolution logic to use HashSet instead of ArrayList to improve performance and simplify the handling of plugin dependencies
changed visibility of ARGS _ OPTION from package - private to public in CliFrontendParser. java and ProgramOptions. java to allow access
replaced ShadowSharedPreferencesEditor with TestSharedPreferencesEditor in TestSharedPreferences. java and added a test class TestSharedPreferencesTest. java to
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 469
simonstewart : catch and handle classcastexception in httpcommandexecutor
changed the visibility of the updateImage method from private to protected in ImageButton and ImageTextButton classes to allow subclasses to access the updateImage method
fix drop resource for serverlevel ( # 4987 )
added native methods for spatial location calculator configuration in DataOutputQueue and depthai classes to enhance functionality for spatial location management in the application
updated CommunityDetection, ConnectedComponents, GSAConnectedComponents, GSAPageRank, LabelPropagation, PageRank, SingleSourceShortestPaths
replaced keySet ( ). isEmpty ( ) with isEmpty ( _ root ) and added a new isEmpty ( Node < V > t ) method to
update AttributedStringBuilder to use background parameters instead of foreground and background to improve flexibility in rendering text with varying background colors
updated fingerprinting logic in PeerSync. java and added assertions in PeerSyncTest. java to ensure fingerprinting only occurs when the system property
changed the visibility of the moveFunds method from private to public to allow access to the method from other classes
replaced ` BeforeConvertEvent ` instantiation with a new method ` assertUpdateableIdIfNotSet ` in ` MongoTemplate ` and ` MongoTemplate
added logger initialization and refactored serialization methods in CollectionItem and SetTransactionTest classes to enhance logging capabilities and improve test reliability
close the input stream in TikaCLI to ensure proper resource management and prevent potential memory leaks
updated the rule modification rule to use an array instead of an array to ensure compatibility with updated API specifications
removed the ` cfgOverrideFile ` parameter from the ` loadConfig ` method to simplify the configuration loading process by eliminating unnecessary file reference
update teammates log message format in test files to improve clarity and consistency in log output
added'final'keyword to fields and removed'throws Exception'from constructors in ExternalWorkerService and JobServicePipelineResult to improve code clarity
updated step handling in HmDatapoint and HomematicTypeGeneratorImpl for consistency to improve code clarity and maintainability by standardizing step
added logging statements for shared and exclusive lock acquisition in PostgreSQLReadWriteAdvisoryLocksTest. java to improve visibility into shared and exclusive
fixed schedulejob ( ) method in basereschedulerservice
simonstewart : fix flaky testgettextcontent # istextpresent
replaced the static Deque < Boolean > openStack with a ThreadLocal logger to improve performance by reusing logger instances
added @ VisibleForTesting annotation to ` convertToCompilationUnit ` method and updated imports in ` FunctionInitializerTest ` to enable testing of method visibility and improve
added a new method ` boxedTypeOrType ` and modified type checking logic in ` Types. java `, and created a new class `
set the focused task view ID to INVALID _ TASK _ ID and update orientation state in RecentsView. java to ensure proper handling of task
hbase - 25835 testflushfromclient # testflushfromclient don't use live region server ( # 258 )
added logic to delete the original repository and save contract details to ensure that changes to the original repository are preserved during transaction execution
replaced TOKEN _ ISSUE _ FEE constant with asset issue fee in TokenIssueProcessor. java and updated balance setting in Program. java
added cache clearing functionality and improved error handling in RealisticRenderStrategy. java to ensure proper cleanup of texture caches and prevent resource leaks
refactor Raster creation in Blit. java and create a new test class Bug7049339. java to improve code clarity and facilitate
added a boolean flag ` isUnselectedStyle ` and refactored string width retrieval in ` Label ` and ` UIManager ` to improve handling of
updated ArrayList initialization to use an initial capacity of zero in multiple classes to optimize memory usage and improve performance by avoiding unnecessary allocation
removed the ` int ` parameter from multiple methods in ` ShadowApplicationPackageManager ` to simplify method signatures for better readability and maintainability
refactor PingRequestHandler to improve code readability to enhance maintainability and facilitate future updates
added support for MP4 asset with inclusion timestamps URI in multiple test files to ensure compatibility with the latest audio formats and improve test reliability
updated firmware check logic in TradfriGatewayHandler. java to ensure compatibility between old and latest firmware versions
refactor AjaxElementLocator to improve code readability to enhance maintainability and facilitate future updates
updated layout checks to include " table - cell " display in BoxLayout and DefaultLayout to enhance layout handling by supporting additional display options
updated JsonDecoder to reorder JSON tokens based on their position to ensure correct parsing behavior for nested JSON structures
add removalCause parameter to the releaseLocation method in BlockCache. java to enhance notification handling by associating cache locations with their removalCause
added JUnit @ Ignore annotation to SavepointTestBase. java to temporarily skip tests that are not ready for execution
added multiple @ Test annotations to DroolsMvelParserTest. java to enable unit testing for the MVEL parser functionality
changed fields to be final in ContextRegisterListener. java to ensure immutability of fields to enforce immutability
refactor ObjectHashSet to use a constructor that accepts initialCapacity and loadFactor as a parameter to improve flexibility in managing hash sets by allowing customizable iterator
added BATCH _ BYTES constant and updated conditional checks in SparkReduceRecordHandler, ReduceRecordSource, and VectorizedRowBatch classes to ensure batch
changed MODE _ WORLD _ READABLE and MODE _ WORLD _ WRITEABLE from MODE _ WORLD _ READABLE to MODE _ PRIVATE
updated logging statements in JdbcProxyGenerator. java for better clarity to improve error handling and logging clarity during database closure operations
added a condition to set important for accessibility in the workspace animation to ensure proper handling of accessibility for animations in the overview state
reduce log level from warn to debug when encounter a malformed edit.
updated scope assignment in UaaTokenServices and added a test for persisting revocable tokens in UaaTokenServicesTests to ensure that
updated import statements in SchemaRetrievalOptionsBuilderTest. java and renamed class names in AvailableJDBCDrivers. java and TestAvailablePlugins.
added a new interface ` ExecutableCommand ` in the ` org. kie. api. command ` package to provide a convenient way to execute commands
camel - jbang - remove jdbctableservice since it be no longer use.
added methods to retrieve padding values in CellLayout and modified bitmap creation in Launcher to improve layout handling and ensure proper bitmap scaling
added a check for a non - empty string before filtering candidates to ensure candidates are only processed when a valid string is provided
refactor ` SamlMetadataUIParserAction ` to include a null check for ` flow ` before adding ` samlMetadataUIParserAction ` to
added a method to check open ports for LDAP processes using a specified port to enhance testing capabilities for LDAP connections using a specified port
log4j2 - 1349 fix the default executor service shutdown to 0
updated URL handling and added conditional checks for content redirect and protocol redirect in multiple files to improve clarity and control over URL processing and prevent prohib
updated SolrQuery to use " name : samsang " instead of " name : fith + hope + loaves " to ensure correct
refactor terminal initialization to support old Karaf Console API to ensure compatibility with newer Karaf Console API
changed the visibility of ` getVerticesColors ` method from public to private and modified the size of ` mCol ` to improve encapsulation and ensure
added regex filtering for excluded timeseries in HTML report generation to ensure that only timeseries are copied to the report data directory
renamed test methods to validateName and validateName to improve clarity and maintainability of test cases
pdfbox - 4071 : remove unused method, a suggest by valerybokov
added error handling for form binding errors in FieldUtils. java to improve user feedback when form binding errors occur
removed the print statement from JoglInput. java to streamline output by eliminating unnecessary logging
added a method to allow extracting private fields in FieldSupport and updated test cases in FieldSupport _ fieldValues _ Test to enhance field extraction functionality
replace string " { name } " with device name in WebDataHandler. java to ensure accurate representation of the device's name in the
replaced direct instantiation of a constructor with MethodHandles. lookup for Java 8 types to improve compatibility with Java 8 and enhance method handling
updated the ` weights ` method from ` double... weights ` to ` int... weights ` and added a new method `
added ` Database ` parameter to multiple writeCustomHTML and PendingChangesWriter methods across multiple writer classes to enable compatibility with Liquibase's
added assertions to validate index and value in BTreeMap. java to ensure proper handling of null values during deserialization
added handling for BalanceInsufficientException in CancelDeferredTransactionContractActuator, UpdateDeferredTransactionContractActuator, and TransactionTrace classes to
added a conditional check for the ` org. netbeans. lib. profiler. heap. zerofile ` property in ` AbstractLongMap. java
removed log severe statements and streamlined message sending in Main. java to streamline error handling and improve readability of the code
updated byte buffer size from 14 to 13 in HortonworksEncodedSchemaReferenceStrategy and removed generic records in HortonworksEncodedSchema
added ItemProcessListener, ChunkListener, and ItemWriteListener imports in various batch - related classes to enhance batch processing capabilities by integrating additional
updated formatting and formatting in AbstractProviderModule. java for consistency to improve code readability and maintainability
added liveDocs parameter to countOneSegment method and updated messages list in MessageFilesParser to enable live document counting functionality and improve message management
updated Test7005594. java for improved test coverage to enhance reliability of test cases
updated error message formatting in ResourcesValidationProcess. java to improve readability and maintain consistency in error reporting
refactor TopKRollupPhaseOneJob class to improve code readability and maintainability
cloudstack - 7091 : don't throw npe when ntwk ben't specify.
replaced ` mModifierDigitalTriggers ` with ` mModifierAnalogTriggers ` and introduced a new ` MCOptionUtils ` for better
updated the ` iteratesOverSequence ` and ` iteratesOver ` methods to use ` Iterable < T > ` instead of ` Object ` to improve
camel - jbang fixed the issue of camel - http header with empty body.
added test cases for retrieving count of ACT _ HI _ PROCINST, ACT _ HI _ ACTINST, and ACT _ GE _ BYTE
updated BarChartActivityMultiDataset and BarLineChartBase to use a LargeValueFormatter instead of a hardcoded value to improve code maintainability and
replaced hardcoded character'z'with a constant'INNOCUOS _ CHAR'in CommentsParser. java to improve maintainability and
removed @ SuppressWarnings ( " argument. type. incompatible " ) annotation from Platform. java to suppress warnings about incompatible types
corrected the spelling of " Before register allocation " in TraceLinearScanLifetimeAnalysisPhase. java to improve code readability and maintain consistency in formatting
added TODO Auto - generated method stub in NullAssertionValidator. java to improve code maintainability and facilitate future updates
added support for RuleKeyAppendable in DefaultRuleKeyBuilderFactory to enable proper handling of RuleKeyAppendable instances in the build process
added directory creation logic in PmsConfiguration and setup methods in DLNAMediaInfoTest and SearchRequestHandler to ensure that system profile directories are created
refactor the creation of the ThreadFactory in TestcontainersDockerCmdExecFactory to streamline the code by eliminating redundancy and improving
refactor to use a dedicated method for retrieving messages from the HttpChannelOverHTTP and HttpReceiverOverHTTP classes to improve code readability and maintainability
added " accept " attribute to the el in ImageFileInputDialog. java to allow users to accept images in input fields
updated ElasticIndexWriter and TestElasticIndexWriter to use PreBuiltTransportClient instead of NodeBuilder to improve code clarity and maintainability by
added information about witnesses in ForkController. java to improve debugging capabilities by providing more context about witnesses
added a new test class ` NullPointerAndEmptyArrayTest ` to test the behavior of custom classloaders
removed the method ` findConfiguredGeneratedSourcePathsUsingDeps ` from ` BaseIjModuleRule ` and updated its implementation in ` Ij
added a new method ` constructWildcards ` to handle wildcard patterns with any character delimiters to enhance flexibility in constructing wildcard patterns with special characters
added checks for alias to work in Vectorizer. java to ensure that only valid aliases are processed during the map work
replaced MockitoJUnitRunner with JUnit's MockitoJUnitRunner in WeatherQueryTest. java to simplify test setup and improve test reliability
added error handling for setting values in TinyGFirmwareSettings. java to improve robustness by logging exceptions when setting settings fails
replaced multiple imports with a wildcard import and refactored the getLangs method to use a TreeSet to improve code readability and maintainability by
updated import statements and assertions in LazyTraceScheduledThreadPoolExecutorTests. java to improve clarity and maintainability of the test code
hbase - 2906. add prepare ( ) method to enable / disable snapshot handler.
added a new method ` createPlatformIsNullCall ` to ` RuntimeMethods ` and updated references in ` ImplementFinallyViaControlFlow ` to
added a test for updating the HTTP _ RPC endpoint in DockerQuickstartTest. java to ensure that the correct configuration of the HTTP _ RPC
added isSuspended flag and modified thread state handling in Thread. java and updated test cases in Test _ Thread. java to ensure thread behavior is
updated Javadoc visitor classes to use Hidden, Hidden, and Serial data instead of using streams to improve code clarity and maintainability by using modern Java
camel - spring - remoting : fix npe in camel - spring - boot
removed duplicate @ Override annotations across multiple security classes to improve code clarity and maintainability by eliminating redundant overrides
added module imports and updated enum handling in Java2TypeScriptAdapter. java and EnumTests. java to enhance module management and improve clarity in
updated XML language from W3C _ XML _ SCHEMA _ NS _ URI to " http : / www. w3. org / 2001
added logic to set content description based on badge availability in BubbleTextView to improve user experience by displaying appropriate content based on badge status
added a MouseWheelListener to the scrollPane to track wheel movements to enhance user experience by providing feedback on wheel movement events
added tests for positioning absolute in VisualRegressionTest and PdfBoxRenderer to ensure proper resource management and validate positioning behavior
updated currency codes from BTC _ ETH to XRB _ BTC in KucoinAdapters and KucoinIntegrationTests to
updated VacuumController and VacuumFrame to use String instead of Object for location handling to improve type safety and clarity in location management
removed currency case handling for DASH, QTM, and QTUM in BitfinexAdapters. java to simplify currency retrieval logic and
refactor JsonFormat to use ImmutableSet for message fields and update related imports to improve code clarity and maintainability by using ImmutableSet for message types
added handling for array and enum types in JacksonXmlFormatMapper to ensure proper serialization of byte arrays in JSON format
updated thread handling logic in VirtualThread. java to improve clarity and maintainability of thread management
replaced instances of ` readerManager ` with ` shouldRefreshReaderManager ` and added parameters for delimiter and prefixLen in ` DirectoryTaxonomyWriter
refactor VetoableChangeSupport to improve code readability to enhance maintainability and facilitate future updates
adjusted height calculation in BrowserContentPane. java to ensure proper positioning of elements based on their height
pdfbox - 4892 : throw ioexception instead of invalidpasswordexception, a suggest by valerybokov
added unit tests for setting and getting short and long support messages in ShadowDevicePolicyManagerTest to ensure proper exception handling for security exceptions related to
close online help button when exam be run
refactor LambdaBeanPropertyMemberAccessor and MemberAccessorFactory classes to improve code readability and maintainability
added sleep durations and adjusted controller state checks in BackendInitializerHelper, TerminalClient, and GcodeParserUtilsTest to improve responsiveness and
updated version checking logic in SwingStartup. java to ensure proper release status validation
added an ` includeGeneratedFileComment ` property and related getter / setter methods in ` DbMigrationConfig ` and ` DbMigration ` classes to
updated argument syntax from " < player > " to " < player | * > " across multiple files to enhance flexibility by allowing players to be
deleted files BadHdfsThreadsFilter. java and BadZookeeperThreadsFilter. java to remove unused filters to streamline the codebase
updated startCall calls to use " optionName " instead of " nameVariableName " to improve clarity and consistency in naming conventions
added a condition to check if XmlSuite. PARALLEL _ CLASSES matches the parallel class to ensure compatibility with TestNG's XML
updated the conditional logic for enabling acting master based on the presence of old version broker addresses to ensure that acting master is only enabled when
fix : use modelelementcontainerdefaultcapacities instead of modelelementcontainerdefaultcapacities
added serialVersionUID fields to multiple exception classes to ensure compatibility during serialization and deserialization processes
refactor DeadLetterEntry and JpaSequencedDeadLetterQueue classes to improve code readability and maintainability
updated the method to use CONST _ SEPARATOR instead of a hardcoded value in ShibbolethCompatiblePersistentIdGenerator to ensure consistent handling of
updated parameter handling in Parameters. java and changed condition in TestAction. java to improve null safety and ensure correct behavior of system actions
added a new class Person with a private field name to provide a structured way to store and retrieve the name of a person
use local _ address instead of local _ for node - ring gathering
modified the index check for column label in AbstractClient. java to ensure correct comparison of time strings
added assertions to retrieve time columns and their values in SegmentMetadataImplTest. java and stored in SegmentMetadataImpl. java to ensure accurate data
replaced ` java. awt. Color ` with ` net. sf. openrocket. util. Color ` in ` SimulationPlotPanel
added a call to disconnectEmitters. onNext ( new Object ( ) ) in NettyStreamingService. java to ensure proper handling of disconnect
changed scopeHierarchy from a list of String to a list of Class <? extends Annotation > in DefaultBeanContext. java to improve type safety
danielwagnerhall : make double - overflow clickable
added a try - catch block around the dismissDialog call to handle potential exceptions during dialog dismissation
added a custom JNDI lookup for JTA TransactionSynchronizationRegistry in JtaTransactionManager. java to ensure JTA TransactionSynchronizationRegistry is found at
changed access modifier of pickUri method from public to private to restrict access to the method for better encapsulation
removed the hasFunction method from Library. java to simplify the codebase by eliminating unused functionality
rename variable ` enabledCiphers ` to ` result ` for clarity to improve code readability and maintainability by using a more descriptive variable
chrono : add millisecond precision to bigquery sql timestamp ( # 1751 )
replaced IllegalArgumentException with requireNonNull for buffer and user credentials in Identifiers. java and DatabaseConnector. java to simplify error handling by using requireNonNull for
fix bug in valuesresolver. coercevalueforinputobjecttype ( )
added bounds checking for row and column in FlightConfigurablePanel. java to ensure that only valid row and column values are processed
added scrollSelectionVisible ( ) method to ThrustCurveMotorSelectionPanel. java to ensure that the selection is visible during scrolling
[ java ] unnecessarylocalbeforereturn rule should check if a node be a member of astclassselector.
replaced instantiation of ScriptEngine with direct calls to getEngineByName to streamline the code by eliminating unnecessary instantiation of ScriptEngine
mahout - 121, mahout - 122, mahout - 123, mahout - 124,
don't call storageservice. tasks. execute when an sstable be already incrementally
added a new method ` relativize ` to the ` MorePaths ` class for better path normalization to ensure that the relativize function correctly handles
updated column size and decimal digits handling in ColumnSnapshotGenerator and DataType classes to improve clarity and functionality of column size and decimal digits
updated file deletion logic in DeadLetterQueueWriterTest to exclude temporary files to improve efficiency by avoiding unnecessary deletion of temporary files
replaced ` ByteArray. toHexString ` with ` ByteArray. toJsonHex ` in ` TronJsonRpcImpl. java ` to improve code clarity and
renamed ErrorHandlerController to Error403Controller and created new controllers for error handling to improve clarity and organization of error handling controllers
replaced TerminalFactory. resetTerminal ( this ) with TerminalFactory. resetIf ( this ) in UnixTerminal. java and WindowsTerminal. java
updated imports and modified trigger patterns in Tiny. java to improve clarity and functionality of collection operations
fix possible deadlock in connectionpool # acquireconnection ( )
updated method names from getDateConverter to getLdapDateConverter in multiple classes to improve clarity and consistency in naming conventions
pdfbox - 4892 : avoid npe if there be no valid cosnames
updated error message formatting in JavassistUtils. java to improve readability of error messages for better debugging
added reader and writer exception fields to LargeStreamletTest to ensure proper exception handling during testing
updated page types in HomeFragment to conditionally set extra pages based on shared preferences to improve user experience by allowing extra pages to be displayed based on
added error handling for bitmap creation in AndroidImplementation. java to improve robustness and prevent crashes due to specific SDK versions
added @ SuppressSubnodes annotation to Sequence ( matchers ) methods in BaseParser. java to suppress subnodes during parsing
pdfbox - 4892 : use try - with - resources to ensure proper resource management
deleted the file TestDocInverterPerFieldErrorInfo. java to remove unused test files
added shell command execution for keyevent 82 in AbstractLauncherUiTest. java and removed assertion in LauncherInstrumentation. java to improve test reliability
added filenameToUrl mapping in FileDumper. java to enable dynamic filename mapping for output files
bugfix : don't synchronize on resultified flag
refactor texture loading methods to improve clarity and maintainability to enhance code readability and facilitate future updates
updated the assertion in SpringBootTestContextBootstrapperIntegrationTests and SpringBootTestContextBootstrapperWithContextConfigurationTests to ensure the context ID
updated the seed value in RandomizersTest. java from " 9781797745008 " to " 9781797845005 "
updated notification sound handling in AlarmReceiver. java to ensure correct notification sound is used based on user preferences
added a method ` reportLoopCount ` to the ` RootNode ` class to enable loop counting functionality in the application
added logic to finalize the version for specific cluster types in FinalizeUpgradeAction. java and updated clusterEntity merging in ClusterImpl. java to
updated the method call from ` getRangeId ( ) ` to ` getRegionId ( ) ` in ` PortableIpDaoImpl. java `
removed the call to ` streamManager. open ( stepExecution. getExecutionContext ( ) ) ` in ` ItemOrientedStep. java
added a new file CountedLoopProblem. java that implements a simple counting algorithm to demonstrate and test the behavior of the CountedLoopProblem
updated executeCompiledMethod and executeCompiledMethodVarargs methods to accept an array instead of a single parameter to enhance flexibility by allowing multiple arguments for
graalhotspotvmconfig : getpendingfailedspeculationoffset don't throw jvmcierror
renamed KafkaStreamsTracing class to ValueTransformerWithKeySupplier and updated related methods accordingly to improve clarity and consistency in tracing functionality
[ # 7739 ] student feedback : show average point by recipient ( # 7755 )
removed the call to DynamicColors. applyToActivitiesIfAvailable ( this ) to streamline the application by eliminating unnecessary activity transitions
added methods to dump all stack traces in CloseRace. java to improve error handling and provide better diagnostics during child threads
updated return value to use intValue ( ) method in IntPointField. java and added assertions in TestPointFields. java to ensure correct value
replaced hardcoded arcSize with a dynamic arcSizefraction to improve accuracy of arc size calculations
reduced the aspect ratio from 768 to 640 in AddAndScaleMultiImage. java and adjusted the ratioWidth in ImageBorderCuttingWizard.
renamed the property ` minifySqlEnabled ` to ` shrinkWhitespacesInSql ` and updated related getter and setter methods accordingly to improve clarity and
refactor launcher state transition handling in AbstractLauncherUiTest and WorkProfileTest to improve clarity and maintainability of state transition logic
added multiple CAS configuration classes to multiple test files to enhance configuration flexibility and improve test coverage
updated byte array handling in Volume. java to optimize reading operations to enhance performance and maintainability of the code
camel - http : fix test failure on slow ci server
refactor classpath handling in DeclarativeHintsParser to improve clarity and maintainability to enhance code readability and facilitate better handling of module boot
added a new ` MediaScriptScopeProvider ` class to manage audio and voice managers in the automation module to improve the management of audio and voice
added methods to retrieve and set layer manager in AnimComposer, AnimEvent, and TestJaime classes to improve layer management
added a check for empty mQueue in DeferredHandler. java and removed showDefaultScreen method in Workspace. java to ensure proper handling of empty
added null checks for mapOp and mapWork in MapRecordProcessor. java and modified exception handling in TezProcessor. java to improve robust
refactor CylinderRegion to use a more descriptive method for center calculations to improve code readability and maintainability by using a more descriptive
replaced usage of ` Assert. * ` with ` ExpectedException. none ( ) ` in ` TestBadUseCases. java ` to improve
added null check for subparams in QueryExecutorImpl. java and implemented a test for multi - execute method in StatementTest. java to ensure
modified the ` customizeEnvironment ` method to return a boolean indicating whether to customize the security environment to enhance flexibility by allowing customization of the security environment
added rctag = android% 20app% 20edit to the GET request in ReviewInterface. java to enhance security by allowing users to
updated test cases in Test. java to improve test coverage and ensure reliability
updated PBEKeySpec constructor to use keyLength instead of blkSize to improve clarity and maintainability of the code
chore ( deps ) : upgrade gapic - generator - java to 2.8. 0 and update gax - java to 2.18.
added a call to ` writeSectionDefinition ( ) ` in ` RtfDocumentHeader. java ` to ensure proper initialization of the section definition
added location distance and time difference calculations in GpsLoggingService. java to improve accuracy of GPS location detection
removed debug print statements from TableCellLayout, TableLayout, and TableLayout2 classes to clean up the code and improve readability
chore : integrate new gapic - generator - java and rules _ gapic ( # 359 )
replaced boolean rootNameFn boolean with reference < object > rootNameFnHash and sourceFilterFnHash in InsightFilter. java to improve
replaced binary search logic with a direct assignment of data and added elements to simplify code and improve readability by eliminating unnecessary binary search operations
replaced ` ThemedPreferenceActivity ` with a new ` PreferenceActivity ` and removed the ` ThemedPreferenceActivity ` to streamline
updated the value class name from " HostD " to " UsingUnresolvedD " to clarify the purpose of the value class in the testing
change assertion from assert assertRootArcs ( ) to assert assertRootArcs ( ) to ensure that the root arc assertion is correctly validated
added an assertion to verify the existence and file of a security policy to ensure that the security policy is valid and provide clearer error messages
added getConfiguration method to Olingo2Component to enable configuration retrieval for Olingo2 components
increased sleep duration from 1000ms to 5000ms in RecoveryZkTest. java to allow more time for synchronization during tests
removed the ` e ` parameter from the log message in ` MongoPersistentEntityIndexResolver. java ` to simplify logging output by eliminating unnecessary
added functionality to publish an image by HTTP using XMPP to enable users to easily upload images via HTTP using XMPP
camel - netty : fix npe if channel be not get from pool.
added validation for host name splitting in BalancedClickhouseDataSource to ensure proper URL formatting and prevent invalid host names
remove system property for disablejsr199 in fragment activator.
added nullStringValue property and related getter / setter methods to CSVRecordReader and CSVRecordReaderConfig to enable flexible handling of null values in CSV processing
added @ LiquibaseService annotation to multiple connection classes to enable skipping of specific Liquibase services during database connections
updated the method signature of ` addImportedStaticFieldNames ` to use ` JavaSourceFile ` instead of ` CompilationUnit ` to ensure correct handling
updated event topic handling in ItemCommandTriggerHandler and ItemStateTriggerHandler to improve clarity and maintainability of event topic management
replaced ` BeanCurrentlyInCreationException ` with ` BeanCreationException ` in ` TraceWebAutoConfiguration. java ` to improve error handling
updated the case name from " zkACLProvider " to " zkCredentialsProvider " in SolrXmlConfig. java and tests in TestSolrXml
fix the mana tablet not show the durability bar.
added a method to set the identifier collection in P25P2DecoderState. java to ensure that the current call event has the correct identifier
removed unused imports for DictionaryCompoundWordTokenFilter to streamline code by eliminating unnecessary dependencies
updated the method name from " deriveKeyWithScrypt - d " to " deriveKeyWithScrypt " to improve clarity and consistency in
refactor GeneratedCode class to improve code readability to enhance maintainability and facilitate future updates
added a null check for the definition in TypeDefinitionRegistry. java to ensure that the definition is not null before attempting to remove it
added visibility for the share with me icon in LocalFileListAdapter to improve user experience by hiding the share with me icon when needed
updated URLs for Bootstrap CSS links to use HTTPS instead of HTTP to improve security and accessibility of Bootstrap resources
updated import statements and method signatures in RouterFilter, RouterServerListFilter, RouterDistributorTest, and RouterDistributorTest classes
updated assertion message in TestIndexWriterMergePolicy. java to improve clarity of test assertions
added @ Deprecated annotation to multiple classes to indicate that these classes are outdated and should not be used in future development
added null check for context in CrawlerSessionManagerValve and implemented tests for context aware scenarios to ensure proper context handling and improve test coverage for
added a security check before retrieving the JspApplicationContext to ensure that the application context is only accessed when security is enabled
refactor RocketComponentConfig to use min and max values instead of hardcoded values to improve flexibility and maintainability of the component configuration logic
added Scopes. SINGLETON to the NonceService binding in OpenIDAuthenticationProviderModule to ensure proper scoping of the service in
added a new method ` updateChildLinks ` to ` FileWrapper ` for updating child links to enhance functionality by allowing child links to be updated
refactor method parameters and error handling in SpringCloudPlugin. java to improve code readability and maintainability
increase publish delay in retrevalblockingmessagestoretests from 100ms to 500ms to improve test reliability by allowing more time for publishing
added a boolean field ` mShiftCodesAlwaysOverride ` and modified the handling of the ` mShiftCodesAlways ` attribute to ensure that the
[ hotfix ] [ runtime ] don't wait for zk leader to become active.
removed unnecessary braces in NearbyActivity. java to improve code readability and maintainability
updated the filter condition to check if the identity referenced service is a reference instead of a simple name to improve clarity and accuracy in identifying service references
added a boolean parameter ` noop ` to the ` newInstance ` method across multiple classes to provide a default behavior when no caching is applied
added a delay to catch both IOException and InterruptedException in TestListenTCPRecord. java to improve error handling reliability and prevent interruptions
camel - core - optimize to avoid unnecessary array copy.
changed the type of ` libraries ` from ` Map ` to ` Set ` and modified related methods in ` RawNativeLibraries ` to improve efficiency
int - 196 added support for sequence attribute in channel name resolution.
added support for the " x509certs " endpoint in the ClientKeyPublisher and JwkViewResolver classes to enable handling of X.509 certificate
replaced the assignment of ` readers ` with a single assignment of ` readers [ 0 ] ` to ensure correct handling of multiple readers in the query
refactor ValueSourceParser to use Double2Parser for maximum and minimum values to enhance functionality by integrating maximum and minimum values
removed focus and grabs pointer events from the return statement to simplify the code by eliminating unnecessary null checks
removed unused variables from Highlighter, SpanGradientFormatter, and TokenSources classes to improve code clarity and maintainability
updated the VlanDao injection variable and modified the insert SQL statement to use a UUID instead of a fixed value to ensure compatibility with updated database
added @ ConditionalOnWebApplication annotation to CasMultifactorAuthenticationWebflowConfiguration and updated CompositeProviderSelectionMultifactorWebflowConfigurer to
added max _ connections and listRemainingConnections methods to WriteJdbcPTest. java to improve connection management and ensure proper cleanup of database connections
removed conditional check for " editor. laf " in DefaultPlatform. java to simplify the code by eliminating unnecessary checks
replaced calls to getStateEntity ( ) and getDesiredStateEntity ( ) with calls to getDesiredStateEntity ( ) and getDesiredStack (
simplified margin start calculation in FloatingTaskView. java to improve accuracy of margin positioning based on device profile
added conditional check for running status in RootFolder. java and updated UI status line message in NavigationShareTab. java to improve user experience by
updated thread ID assignment in CPUCallGraphBuilder. java to ensure correct identification of nodes during execution
updated default perspectives in Layout. java and modified EuclidianDockPanel constructor in GuiManagerD. java to ensure
added NetworkAddressChangeListener to HomekitImpl and updated log messages accordingly to enhance network address handling and improve error logging clarity
updated lease retrieval logic in TestHDFSEventSinkOnMiniCluster. java to ensure proper handling of lease renewal times
replaced ` Optional. < SourcePath > absent ( ) ` with ` Optional. absent ( ) ` in ` CxxLibraryDescription. java ` to
added null check for the message in ExceptionHandlerRegistryFactory and created a test for handling null IOException messages to improve error handling robustness and ensure
changed the ` nextID ` field to be volatile and modified the ` getSize ` method to return the nextID value to ensure thread safety and
fix vmtransportnetworkbrokertest failure on slow ci server
added HasSourcePath interface to AbstractThinArchiveArg and FileListableLinkerInputArg classes and implemented getPath ( ) method in SourcePathArg
replaced StringBuffer with IllegalArgumentException for string concatenation to simplify error handling by eliminating unnecessary string concatenation
added a custom index field name to the facet fields in OrdinalMappingAtomicReader and updated test cases in TestOrdinalMappingAtomicReader to improve
modified the ` toEpochMilli ` method to handle negative seconds and non - positive nanoseconds to ensure accurate conversion between seconds and non - positive
replaced calls to ` getAttribute ( ) ` with ` getAttribute ( ) ` in both OGLESShaderRenderer and LwjglRenderer
added block update scripts functionality in CopyPaste. java to ensure that update scripts are only applied when necessary
added a new file TestCMoveLimitType. java that includes a method to test buffer overflow in a CharBuffer to facilitate testing of
resetTemporalAttributes ( ) method in ChannelState and add contains method in RecordConfiguration and AudioPacketWaveRecorder to improve handling of audio packets and
( chore ) camel - sql - stored : fix arrayindexoutofboundsexception
updated vendor string from " Sun Microsystems " to " Oracle Corporation " in RealTimeSequencer. java to reflect the current
refactor ` Main ` and ` VersionCommand ` to use a custom console for version printing to improve code readability and maintainability by encapsulating version
refactor token validation logic in InputStreamBinder and NextcloudRequest classes to improve code clarity and maintainability by consolidating token validation logic
added EOFException handling in Http11InputBuffer. java to ensure proper error management during I / O operations
added unit tests for deleting members from a non - existent group in DefaultGroupProviderTest. java to ensure that deleting members from a non -
( chore ) camel - ftp : remove unnecessary object [ ] usage
deleted the V2ReplicationProtocol. java file to remove obsolete replication protocol implementation
updated the type of ` compileTimeClasspathDeps ` and ` compileTimeClasspathSourcePaths ` from ` ImmutableSortedSet < BuildRule > ` to `
added new files ConstructorArgsDemo. java and FinalDemo. java, and created new classes StrictDemo. java to demonstrate usage of constructor arguments
[ geot - 5657 ] : make directtemplatefeaturecollectionfactory more thread - safe
increase response count assertion from 1 to 2 * DatabaseDescriptor. getReplicationFactor ( ) to ensure that the response count does not exceed replication factor
added null check for item's dateCreated in ItemRowAdapter. java to ensure robustness by preventing potential NullPointerExceptions
renamed parameters from " showAnchestors " to " showAncestors " across multiple classes to improve clarity and consistency in naming conventions
added a check to return early if the width is less than 12 to prevent further processing when the width is below 12
updated comparison logic in ChangeLogParameters to use equals instead of = and added a test for SamePropertyNonGlobal in ChangeLogParametersTest to
changed the access modifier of loggers from static to final to ensure loggers cannot be reassigned after initialization
updated return statement to use the base plot instead of the current plot to ensure the correct plot is returned for the current plot
don't log an error if the upload directory don't exist
added a boolean flag ` sendStatus200 ` to multiple ` ServerGenerator `, ` HttpTransportOverFCGIConnection `, and ` Server
added a condition to check if the last character is not empty in the multi - line comment to ensure multi - line comments are only processed when
added file type management in BuckModule. java to ensure proper removal of duplicate Buck file types
updated the return types in ComposedUtil. java from ComposedToLong to ComposedToInt and ComposedToLong respectively to improve type handling and
added handling for unsupported CPU options in RTMGenericCommandLineOptionTest to improve error messaging for unsupported CPU configurations
corrected formatting in AccountsActivityTest. java for consistency to improve code readability and maintainability
refactor Player class to improve code readability to enhance maintainability and facilitate future updates
added a method ` mockitoPackageImport ` to ` AbstractModbusOSGiTest ` to facilitate the import of ` ChannelType
fix indexoutofboundsexception for guest to host reflective call.
added context management in ShadowFontsContract. java and implemented reset method in AndroidTestEnvironment. java to ensure proper context management during tests and
added a new method ` toMillis ` to ` TimeGranularity ` and updated ` PinotDataSourceMaxTime ` to use it to improve time
added handling for ` _ try. getFinally ( ) ` in ` ControlFlow. java ` to improve error handling and flow analysis in the
added error handling for arrays in Assert. java and updated test assertions in ArrayEqualityAssertTest. java to improve clarity and correctness of array comparison
added default handling for slot items in WindowClickLogic. java to improve default behavior for slot items
updated index calculation in MeshBuilder. java to ensure correct indexing logic for short indices
nifi - 6903 : remove unnecessary'this'keyword from standardprocessscheduler
added support for configuring Java annotation processor configurations in KotlincToJarStepFactory to enhance flexibility in configuring Java annotation processor configurations
updated RESCROLL _ DELAY to include PAGE _ SNAP _ ANIMATION _ DURATION in DragController and PagedView classes to
refreshShortcutsIfRequired ( ) method in LauncherModel and update DeepShortcutPermissionCheckRunnable in DeepHostManager to ensure shortcuts are refreshed only
added case HISTORY _ SEARCH _ BACKWARD in ConsoleReader. java to handle history search forward functionality
added null check for ` cname ` in ` CoreAdminHandler ` and created a test for handling null core names in ` CoreAdminHandlerTest
added marker management in NearbyMapFragment to manage marker visibility to improve user experience by hiding the bottom sheet when markers are selected
added error handling for Throwable in FileSyncAdapter. java to improve robustness by logging exceptions
refactor test assertions in TestMemoryAwareness. java to use OutputAnalyzer for better error handling to improve test reliability and maintainability by catching
updated FeedQueues to filter and filter feeds based on health checks to improve feed management efficiency based on application settings
changed visibility of DefaultDrmSession and added playback thread verification in DefaultDrmSessionManager and DefaultDrmSessionManager to improve encapsulation and
updated AndroidBinaryDescription and AndroidBinaryBuilder to use Locale for case sensitivity to ensure correct parsing of package type and resource compression modes regardless of
updated XML MIME type from " text / xml " to " application / xml " across multiple test files to ensure correct content type is used for
replaced ` INSTANCE. confFile ` with a direct reference to ` configFile ` to streamline configuration retrieval by ensuring the correct configuration file is
removed a " sleep 5 " statement from waitUntilReadyAndTimeout in HostPortWaitStrategyTest. java to simplify the test by eliminating unnecessary
replaced IntMath with LongMath in HiveExpandDistinctAggregatesRule. java to improve performance by using a more efficient data type
added checks for headless graphics in Toolkit. java to ensure proper exception handling for headless graphics
add a condition to check if a recipe can be smelt in ExoflameFurnaceHandler to ensure that only smelt items
added a ` moveThreadCountDescription ` to the ` DefaultSolver ` and ` DefaultSolverFactory ` classes to provide more context about the move
fix : search with rev include don't select wrong resource with same name
added a new test file ` Issue582Test. java ` to test the behavior of a tree map with sorting and sorting features to ensure
[ native ] add test for decimal overflow
refactor LoadingCache class to improve code readability to enhance maintainability and readability of the codebase
removed the findRule for " AvoidNonConstructorMethodsWithClassName " in NamingRulesTest. java to streamline the test by eliminating unnecessary
danielwagnerhall : catch and handle stale element reference exception
refactor ViewExistsPrecondition to improve error handling and introduce a new method ` hasView ` in ` DatabaseSnapshotGenerator ` and ` JdbcDatabase
refactor DOMUtil to improve code readability to enhance maintainability and facilitate future updates
added translation calculations in TaskViewUtils and implemented logging for matrix values in Utilities to improve visual feedback during animations and enhance debugging capabilities
changed the value of FLAG _ ENABLE _ FIXED _ ROTATION _ TRANSFORM from true to false in FeatureFlags. java and Rot
added a new method ` walk ` to ` TempFSTTermsReader ` and modified doc frequency handling in ` TempTermOutputs ` to improve
updated create method signatures to include SolrQueryRequest as a parameter to enhance functionality by allowing Solr query requests to be processed
added triggers for Post and Announcement types in SingleTableMySQLTriggerTest. java to ensure proper handling of null content and announcement
refactor comparator handling in FieldValueHitQueue and TopFieldCollector to improve clarity and maintainability of comparator management
updated SQL query assertions in PhoenixQueryBuilderTest. java to use double quotes for column names to ensure consistency and avoid potential SQL syntax errors
added Spark initialization to the init method to ensure proper initialization of Spark resources
added methods to handle TOTAL _ STORAGE _ POOL, TOTAL _ STORAGE _ FEE, TOTAL _ STORAGE _ LIMIT, and TOTAL _ STORAGE
added support for streaming files from a specified directory in AssetsController. java and tests in AssetsControllerTest. java to enhance asset loading
updated the key check in MapMarksManager to use getMapMarkKey to improve clarity and maintainability of the code
added an ` TokenRewriteStream ` parameter to several methods in ` BaseSemanticAnalyzer ` and ` DDLSemanticAnalyzer ` to enhance semantic
removed ` throws IOException ` from method signatures in ` JavaCompiler `, ` JavacProcessingEnvironment `, and ` Main ` classes to simplify exception
updated JxBrowserManager to use fullPath instead of fileName to improve clarity by using a more descriptive variable name
added a check to return the application version if it equals " AppVersion " and updated image format comparison logic to ensure compatibility with application versioning
updated the method call from ` getBridgeUID ( ). getId ( ) ` to ` getUID ( ) ` in ` SomfyT
disable alberto aggregator test on github ci
refactor OpenWireConnectionTimeoutTest to use static constants for keystore and password settings to improve code readability and maintainability by using defined constants for keystore
updated log levels and added handling for NaN values in DynatraceExporterV2. java to improve clarity and prevent unexporting of NaN
added a call to remove the session ID from the session info to ensure that the session info is properly removed from the session management system
added logic to set the hostname of alerts in HeartBeatHandler and updated log message formatting in AlertReceivedListener to ensure alert names are
modified the flushing logic in ChannelEndPoint. java to improve efficiency by returning false when all buffers are empty
updated the resource URL from " org / kie / kmodule. xsd " to " org / kie / api / kmodule. xsd "
added tests for seekToMode in ShadowMediaPlayerTest and implemented seekTo method in ShadowMediaPlayer to ensure correct playback behavior based on API level O
replace ` createTask ` with ` createThrowingTask ` in multiple executor classes to improve clarity by using a more descriptive method name
added a border border for the CloseButtonTabbedPane based on the IS _ AQUA _ LAF condition to improve visual appearance of the close
added connection and read timeouts to the TSPTimeStampService and updated test assertions in TestSignatureInfo to improve connection stability and ensure correctness of
drools upgrade to optaplanner 2.7. 0 ( # 2451 )
added error logging for non - generic diamond types in ` Attr. java ` and created a new file ` Neg12. java `
[ calcite - 3594 ] [ table - planner - blink ] fix type mismatch in reloptutil
updated argument validation logic in Http2Settings. java to ensure proper handling of unsigned 32 - bit values
deleted the MapInterfaceTest. java file to remove unused test files
[ test ] remove test that can not operate on disposed session
added a closing brace to the root object in GeoJsonWMSBuilder. java to improve code readability and ensure proper closing of the root object
updated selectedIndex setting method to use intValue ( ) instead of intValue ( ) to ensure correct index handling for table selection
added logic to check if ` canCurrentlyManuallyUnstash ` can be ` true ` to ensure that unstashing is only performed
camel - core - optimize route coverage to reduce code duplication.
modified getEventMismatchMessage method to include a waitForExpectedCount parameter to control the wait time based on the number of events processed
added a new file ` HeaderFileProcessor. java ` for handling licence header files to facilitate the processing of licence header files
added support for the FIRST _ LOAD _ COMPLETE broadcast in the launcher to enable users to initiate a loading complete before navigating away from the app
deleted the ` SuperJumperAndroid. java ` file to remove unused or redundant code related to Android development
updated the return value from ` true ` to ` table. isDistributed ( ) ` in ` SystemTableScan. java ` and modified the
removed KeyValuesProviderAware and ObservationConventionAware interfaces from Observation. java to streamline code by eliminating unnecessary interfaces
added missingBlocks and missingItems to the PersistentRegistryManager's processIdRematches method to ensure that remapBlocks and remap
updated return statements in AtomicIntegerArray, AtomicLongArray, and AtomicReferenceArray to cast the result to a long value to ensure correct handling of long values
added caching for lastDateFormat and lastFormats in HSSFCellStyle. java to improve performance by avoiding repeated calls to getFormats ( )
updated the query parameter in RemoteAuthenticationEndpointTests to include the username as a filter to ensure that the test correctly identifies users based on their
make sure def. finished ( ) be call in DeflateCompressor. java to ensure proper handling of def. finished ( )
updated getStatsLogManager log logging to include container information and workspace information to enhance logging clarity and provide more context about the current page
chore ( deps ) : upgrade gapic - generator - java to 2.8. 0 and update gax - java to 2.18.
deleted the DeadlockTest. java file to remove unused test class to streamline the codebase
added null checks and improved logging messages in BugContentProvider. java and BugGroup. java to enhance robustness and provide clearer feedback during marker
added an " Reopen in Browser " menu item to open the JavaScript server in the browser to improve user experience by allowing users to open the
added a new error message for OUTPUT _ SPECIFIED _ MULTIPLE _ TIMES in ErrorMsg and SemanticAnalyzer classes to improve error handling and
added two new entry listener implementations in BasicTest. java to ensure that the addEntryListener method correctly handles null values
fix coordinatearray. reverse ( coordinate [ 0, 1 ] )
updated the opening state condition in ToolbarPanel. java to ensure the toolbar opens when the state changes
added a boolean variable ` first ` initialized to ` false ` in ` TestPayloads. java ` to ensure ` first ` is initialized before
replaced the condition for entering overview mode with a call to showOverviewMode ( true ) to simplify the code and improve readability by eliminating unnecessary
added a method to set the destination in NetworkRouteTest to ensure proper handling of message dispatching
change return value from MIN _ VALUE to MAX _ VALUE in MessageHandlerInterceptorDefinition. java to ensure maximum value is always defined
updated variable declarations and suppress warnings in NestedArithmeticTest. java to improve code clarity and suppress warnings for unused variables
replaced references to pendingChunks with buff in HttpClientRequestImpl. java and updated HttpTest. java to improve code clarity and ensure correct buffer handling
updated artifact replacement logic in GetMavenDependenciesTask. java to ensure correct artifact formatting based on specific conditions
pdfbox - 2576 : use getcosdictionary ( ) instead of getdictionaryobject ( ), a suggest by valerybokov
refactor substring extraction logic in ReferenceUtil. java to improve code readability and maintainability
replaced ` observedTypes ` with ` observedTypes ` and ` queryTypeName ` in ` FieldVisibilitySchemaTransformation ` and ` VisibleFieldPredicate `
added constants for HTTP JSON RPC configuration and updated port and enablement logic to enhance configuration flexibility and improve code maintainability
added a check for ` folder ` type before removing it from ` mDragController. removeDropTarget ( ( DropTarget ) folder ) `
refactor StubJarTest to use a dedicated method for creating a stub jar to improve code readability and maintainability by encapsulating the logic in a
added a new feature for Setup wizard and Workflow helper in StartPageTopComponent. java to provide users with guidance on how to setup and test
fixed schedule of metered flusher in cassandra daemon
updated the condition for retrieving an availability check in OnlineTestCase. java to simplify the logic for checking availability availability
changed return value from NONE to ALL _ USER in LdapUserGraphicalAuthenticationRepository to ensure the correct return value is returned for all users
refactor onIdleTimeout handling in HttpChannelState. java and add failure listener in ServerTest. java to improve code clarity and ensure proper failure
updated CreateEndPoint to extend Invocable. NonBlocking instead of Runnable to ensure proper handling of non - blocking operations
updated TABLE _ HEADER _ SEPARATOR to use a constant for column separators and improved formatting logic to enhance readability and maintainability of the table rendering logic
change the return value from 32. 0f to 31. 5f in the Camera class to adjust the camera's aspect ratio for improved
added a preference for starting on boot setup in GpsSettingsActivity and updated return values in Utilities. java and GeneralLocationListener. java to
increased the client secret length from 128 to 512 in DefaultOAuth2ClientDetailsEntityService. java to accommodate larger secret values for improved
updated the error message in MySQLStoredProcedureTest and PostgreSQLStoredProcedureTest to include a parameter name to ensure that the error message accurately reflect
added JUnit @ Ignore annotation to ScheduledMethodMetricsTest to temporarily skip the test due to race conditions
refactor getInputPinotFS and getOutputPinotFS methods to include exception handling and initializations to improve error management and ensure proper initialization of
added locale checks before retrieving the date format in TimeLineCursorAdapter and TimelineArrayAdapter to ensure date formatting is only applied when the locale is
added import for MetalLookAndFeel and set it to UIManager in bug8032878. java to improve UI consistency by using a custom Look and
added preDestroy and destroy methods for ping task handling in Bot. java to improve thread safety and resource management during message sending
updated error message formatting in GlobalErrorHandler. java to improve readability and maintain consistency in error reporting
renamed method ` addReads ` to ` addExports ` and ` addExports ` in ` ModuleTable ` and ` PackageTable `
added error logging for CmdLineException in PinotAdministrator. java to improve error handling by logging specific exceptions
replaced super. equals ( o ) with isEqualTo ( o ) and added @ Deprecated annotations in the subject class to indicate that the equals ( )
updated references and method names for consistency and clarity in CustomPlaybackOverlayFragment. java and ImageButton. java to improve code readability and maintainability
changed zoom levels from ( byte ) 10 to ( byte ) 0 and ( byte ) 24 to ( byte ) 0 in BasicMapViewer.
refactor admin user handling to use ImpersonationUtil for process users and groups to improve code clarity and maintainability by centralizing process user and
replaced ` AccessController. checkPermission ( perm ) ` with ` sm. checkPermission ( perm ) ` in UnixFileSystemProvider and WindowsFileSystemProvider to
added ArgumentExtractor to DelegatedClientAuthenticationAction and updated service resolution in DelegatedClientAuthenticationWebflowConfiguration to enhance argument extraction capabilities and improve
changed defaultGroup from a non - final variable to a final variable to ensure immutability of defaultGroup and prevent accidental modifications
destroy tile cache and create tile cache in TileSizeChanger. java to ensure proper resource management and prevent memory leaks
removed unnecessary removeAllViews calls in CustomPlaybackOverlayFragment and InfoLayoutHelper to streamline the code by eliminating unnecessary view management
refactor databasecleaningService to use a separate method for cleaning feeds without subscriptions to improve code readability and maintainability by reducing duplication
replaced ` CoreAuthenticationTestUtils. getAuthentication ( ) ` with ` auth ` in ` ImmutableAssertionTests. java ` to ensure consistency in authentication
refactor FileBasedClusterNodeFirewallTest to use JUnit's TemporaryFolder for file resource loading to improve test reliability and maintainability by
make conic five point computation more robust
refactor EOF handling in RandomAccessReader. java to improve readability and maintainability of the code
added @ SuppressWarnings ( { " unchecked ", " vararg " } ) annotations in Fields. java and MockitoBeforeTestNGMethod. java
refactor CImage methods to use a native method for creating NNS images to improve code readability and maintainability by centralizing image creation logic
replaced ` WritableByteArrayComparable ` with ` ByteArrayComparable ` in ` MapRDBFilterBuilder. java ` to ensure compatibility with the latest HBase
rename ` runtimeVisibleMethodOfFieldAnnotations ` to ` runtimeVisibleFieldOrMethodAnnotations ` across multiple files to clarify the purpose of the annotation
replaced ` equals ` method calls with ` Objects. equals ` method calls across multiple classes to improve code readability and leverage built - in utility for
rename symbol resolution method from ` resolveClassFromCanonicalName ` to ` resolveClassFromBinaryName ` and update related references accordingly to improve clarity
added assertions to verify the retrieval of default views in NinjaDefaultTest to ensure proper handling of different views based on their properties
renamed the method ` updateAllAppsWidth ` to ` updateAllAppsContainerWidth ` and updated related calculations to improve clarity and consistency in handling
updated timestampsViewPaddingBottom calculation and adjusted listViewPositionOffset based on layout dimensions to improve layout responsiveness and ensure proper vertical margin for ListView elements
added handling for InterruptedException in ZkStateReader. java to improve error handling during cluster property updates
added null checks for field names and values in HttpFields. java and created a test for empty headers in RequestTest. java to ensure proper
cs - 15422 : don't check if static nat service be not support in network
added resetHeaderScrollingState ( ) and setFabVisible ( false ) to OCFileListFragment. java to improve user experience by hiding the UI
added functionality to remove the extra empty screen from the workspace to improve user experience by eliminating unnecessary UI elements
added a boolean variable ` fixedWidth ` and modified conditional logic for xAdvances to improve flexibility in determining if a glyph needs to be
removed the boolean parameter from the ` createFragment ` method and refactored the argument handling in the ` ChangeLogFragment ` class to simplify
added new methods for preEvent, preTransition, and postTransition in AbstractStateMachineFactory to enhance state management capabilities in Spring's state machine
refactor ConfigDescriptionProvider to improve code readability to enhance maintainability and facilitate future updates
updated role creation in TestAuthorizationApiAuthorizer and introduced HiveConf in StorageBasedMetastoreAuthorizationDrops to enhance role management and support
updated sorting logic in FacetComponent. java and added query parameters in TestDistributedSearch. java to improve clarity and functionality of facet sorting logic
refactor PropertiesExpander to use a local variable for overriding properties to improve code readability and maintainability by centralizing property handling
added logic to retrieve and stop Jetty in DeleteInactiveReplicaTest. java to improve test reliability by ensuring Jetty is stopped based on active
updated FileActionsDialogFragment to accept a filename as a parameter to enhance flexibility by allowing users to specify file names in the dialog
added an INVALID _ DIRECTION constant and updated conditions in CellLayout. java to ensure proper handling of reorder direction in the layout
updated field names and API endpoints in InnerTransferRequest. java and AccountAPI. java to improve clarity and maintainability of the code
add jobexecutionservice. getexecutionidforjobid ( long jobId ) method to return the execution id of a job
added a new annotation ` EnableAdminClient ` in the ` org. noear. solon. admin. client. config ` package to
replaced specific imports with a wildcard import and added a new visitIdentifier method to handle identifier resolution to streamline import statements and enhance functionality for handling
added action text color to AuthenticatorActivity to enhance visibility of action text in the application
added a new ` find ` method to ` Manager ` and ` StreamSupplierComponent ` classes for handling foreign key constraints to enhance functionality by allowing
refactor method names for consistency and clarity to improve code readability and maintainability
renamed the test method from ` invalidMethodWithNoArgs ` to ` validNoArgMethod ` in both ` HandlerMethodUtils ` and ` Method
added a new method ` cancelClient ` to the ` startDriver ` method and implemented it in ` RpcServer ` to handle client cancellation
added methods to retrieve implicit pre coercion values in SkylarkParamInfo, ReflectionParamInfo, and SkylarkUserDefinedRuleIntegrationTest to
initialize lastDisplayedUser to an Optional. empty ( ) to ensure lastDisplayedUser is initialized before use
added a new method ` findAll ` to ` QueryDslMongoRepository ` and a corresponding test in ` AbstractPersonRepositoryIntegrationTests ` to
added null checks before stopping the DataNode instance to prevent potential NullPointerExceptions when stopping the DataNode instance
planner : exit warm - up loop in case of a failure
add xread ( ) and xreadgroup ( ) method to multikeypipelinebase and redisxread ( )
updated the ` incrReadByteCount ` method calls in ` LinkedBufferInput ` and ` StreamInput ` classes to ensure consistency in read byte counting
added WebSecurityCustomizer to CasWebAppSecurityConfiguration and updated CasWebSecurityConfigurerAdapter to use it to enhance security configuration flexibility and improve
added a new test class TestJdbcWithDBTokenStoreNoDoAs in TestJdbcWithDBTokenStore. java to facilitate the
added a new method ` registerProviderInternal ` to ` ShadowContentResolver ` and modified ` ContentProviderController ` to handle provider registration to improve
updated the AttributeReader constructor to use ClassFile. Version instead of Version to ensure compatibility with updated class file versions
added keepalive configuration to SingleConnectionManager to ensure consistent handling of connection stability
[ java ] rename ` unicastsenderflowcontrol ` to ` unicastsenderflowcontrolsupplier `.
added null check for getCurrentPoint ( ) in GBasicStrokeD. java to ensure robustness by preventing potential NullPointerExceptions
added imports for ConcurrentHashMap and ConcurrentMap, and modified error handling in multiple classes to improve concurrency handling and enhance error reporting during reading operations
updated WebDriver initialization in HttpWebClient. java and added screenshot handling in FileDumper. java to enhance flexibility in WebDriver configuration and improve screenshot
replaced assertEquals statements with assertThat methods in multiple test files to improve readability and maintainability of the test assertions
remove trufflelanguage. getcontextreference ( ) because it be deprecate.
initialized ` e ` to ` null ` and added tests for handling bad exceptions in ` StubbingWithBadThrowablesTest ` to ensure proper
added exception handling for non - ascendant actors in Actor. java and Group. java to improve error handling and provide clearer context for invalid actors
added location permission handling in LocationPickerActivity to enhance user experience by allowing location access permissions
http : / / issues. apache. org / activemq / browse / amq - 4613 - add example for countermdb
added import for CookieSpecs and set the cookie specification in GetHTTP. java to enhance cookie handling capabilities for HTTP requests
simplified the overlap check in the Intersector class to improve clarity and maintainability of the code
replaced DeemphasisFilter with NonClippingGain in P25AudioModule. java and updated audio processing in AirspyTuner
added monitoring URL functionality to the ScrollingPanel and SystemInformationsButtonsPanel classes to enhance user experience by allowing external access to monitoring information
added a new configuration option for service creation timeout in KubernetesConfigOptions to allow configurable timeout values for service creation processes
updated the icon resource assignment for different place types in NearbyListFragment to improve clarity by distinguishing between different place types
added a null check for the package before accessing its names to prevent potential NullPointerExceptions when the package is not initialized
added a new file PrintInlining. java that prints " Passed " to facilitate testing of inlining functionality
refactor nested brace handling in Javadoc comments to improve clarity and maintainability of the code
[ java ] remove unused field in archive test.
replaced EdgeDataTableModel with EdgeDataTableModel with EdgeDataTableModel with EdgeDataTableModel and EdgeDataTableModel with EdgeDataTableModel and EdgeDataTableModel
removed unused imports from SpringResourceProperties and PasswordManagementConfiguration to improve code clarity and reduce unnecessary dependencies
updated playback speed logging from ` Invalid playback speed requested ` to ` Setting playback speed ` to improve clarity of error messages for better debugging
of - 257 : when a room be remove, it should remove it from the cluster
updated the precision from'replicas'to'cores'in AutoScalingHandlerTest to ensure correct scaling behavior for cores
added texture key settings in TextureHelper. java to enhance texture rendering capabilities
updated event handling in ` PythonDslProjectBuildFileParser ` and ` AbstractCell ` to use ` EventReportingProjectBuildFileParser
added support for library normalizations in J2clTranspiler and created LibraryNormalizationPass class to enhance the transpilation process by allowing
replaced the method ` nextResponseBodyConverter ` with a new method ` responseBodyConverter ` in ` GuavaOptionalConverterFactory ` and added a new test
[ hotfix ] [ test ] add @ visiblefortesting to memorysegment
consolelogvo : use java. persistence. temporal instead of javax. persistence. temporal
added a new file Hbs. java that implements TemplateEngine for handling Handlebars templates to enable the use of Handlebars templates in the application
modify chatmessagelistadapter to handle null or empty message
updated iteration from ` keySet ( ) ` to ` values ( ) ` in ` ImportCsv. java ` to ensure the correct number of measurement
added a test method to confirm dialog functionality in AlertTest. java and removed JUnit runner annotations in ConfirmTest. java to improve test coverage and
added a condition to return null for distinct column indices in ReduceSinkDeDuplication. java to ensure proper handling of cases where distinct column
fix for http : / / code. google. com / p / mybatis / issues / detail? id = 4
chore ( deps ) : upgrade gapic - generator - java to 2.7. 0 and update gax - java to 2.16. 0
updated dependencies from " websocket - server " and " websocket - client " to " jetty - websocket - server " and " jetty - websocket -
updated the return statement to use Collections. unmodifiableMap for identity attributes to improve immutability and readability of the code
added error handling to set the modified state of SketchCode in the Editor. java file to ensure the code does not overwrite the saved program
replaced instances of ` new Float ( bytes ) ` with ` new Float ( bytes ) ` in multiple files to improve performance by avoiding unnecessary object
updated timestamp retrieval from ` getDate ` to ` getTimestamp ` in ` JdbcDataSource. java ` to ensure accurate timestamp representation for data retrieval
added a check for " javax. naming. Context " class in HtmlJndiTreeReport. java to ensure correct class name is used for
added a switch - case structure for database options in StorageUtils. java and updated logging in Manager. java to improve handling of database options and
updated edge type check from " double " to " mutual " in ImporterGEXF. java to ensure correct handling of edge types
replaced the private static final integer FLAG _ SLIPPERY with an import for FLAG _ SLIPPERY to simplify code by eliminating
truffletconstantfieldprovider : don't use stable dimension for non - array field.
added methods to retrieve and set the Google Drive folder path in PreferenceHelper and updated Google Drive settings in GoogleDriveJob and GoogleDriveSettingsFragment
ggb - 196 add method to shuffle suggestion, and use it in drawequationweb
added @ Nullable annotation to assertThat methods in Truth. java to enable nullability checks for null values
updated the return values for case 2 in ArrayUtil. java to correct the value representation for cases 2 and 3
added a new test class ` ApiExceptionTest ` and modified ` ClassInstrumentor ` to use it to ensure that ` ApiException ` can be instrument
added waitingForAnticompaction to StreamIn and StreamInManager classes to manage concurrent Anticompaction waiting during stream processing
added methods to check if the keyguard is secure in ShadowKeyguardManager to enable secure keyguard functionality in tests
added serialVersionUID fields to StringDialog class to ensure proper serialization compatibility for these classes
updated string splitting logic to replace'>'with'>'and added a check for the length of overrideParts to ensure proper handling of
renamed the test method from ` assertEmptyThrowsMutipleFailureExceptionForManyThrowables ` to ` assertEmptyThrowsMultipleFailureExceptionFor
added an else clause to checkDrained ( ) in AsyncFileImpl. java and implemented a new test case in FileSystemTest. java
updated light intensity constants and modified loop iterations in HybridLightTest. java to improve light intensity and ensure correct loop iterations
replaced instances of ` FakeProjectFilesystem ` with ` workspace. getProjectFileSystem ( ) ` in multiple test files to simplify filesystem initialization by using a
refactor ` loadRerunFile ` method to use ` PathWithLines ` instead of ` String ` to improve code readability and maintainability
refactor Gson, JsonArray, and JsonObject classes to improve code readability and maintainability
removed the @ NotNull annotation from TEST _ DIRS in PubRoot. java to improve code clarity and maintainability
added a call to ` Shadow. directlyOn ( realObject, ParcelFileDescriptor. class ). close ( ) ` in ` ShadowParcelFileDescriptor
added a method to reset the prefix index in ` Stylesheet. java ` and modified ` BasisLibrary. java ` to use ` ThreadLocal
added LogLevel annotation to TestDistributedStatsComponentCardinality. java to enable debug logging for HTTP connection failures
added throwIfImmutable ( ) method calls in IntList. java to ensure immutability of the list instance
added @ NotNull annotation to onApplicationEvent method and updated URI creation in GrpcClientBuilder and UnitTestReadHelper to improve code clarity and
refactor ` workDir ` method to use a ` Supplier < Path > ` for better readability to improve code clarity and maintainability by using a
added synchronization to keysUnchangedAssumption and refactored related methods in InsightInstrument and InsightPerContext to ensure thread safety
added platform detection and improved manifest file handling in GenerateManifestStep. java to ensure proper line endings for generated manifest files on Windows
updated priority assignment in FindNullDeref. java and added a new class RFE3531161. java with a null check check
added nullability annotations to ConfigDescription methods and refactored null checks in ThingResource. java and ConfigDescriptionRegistry. java to improve
change return type of createCancellationException from Throwable to RuntimeException to improve error handling by using a more specific exception type
pdfbox - 4892 : don't initialize cropbox when there be no image
refactor ManagerBase class to improve code structure to enhance maintainability and readability of the code
added a new BooleanFlag named ENABLE _ ALL _ APPS _ IN _ TASKBAR to enable accessing All Apps from the system Taskbar
replaced FragmentActivity initialization with ActivityController in FragmentTestUtil. java to improve test reliability by utilizing Robolectric for fragment activity lifecycle
renamed methods ` getFileCoordinates ` and ` processFileCoordinates ` to ` processFileCoordinates ` and introduced a new method ` getDecimalCoords `
renamed classes ABCase1, ABCase2, ABCase3, ABCase4, ABCase5, ABCase6, ABCase
updated the parameter name from'num'to'value'in saveEnergyPriceHistoryDone method and added a null check in Manager to improve
refactor the handling of rocket changes in OpenRocketViewer to improve clarity and maintainability of the code
added a new class ChangeDependencyGroupIdAndArtifactId to manage Maven dependency IDs and artifactId to provide configurable options for dependency management in the Maven project
updated file system handling and added checks for indexable paths in IndexingJob. java and SegmentChecker. java to improve path validation and ensure
updated condition from ` lt ` to ` lte ` in ` GCObjectHeapIteratorAddressOrderedList _ V1. java ` to ensure
refactor PreprocessorDelegate to use a memoized supplier for replacementPaths and pathToSourcePathMap to improve performance and reduce memory usage during preprocessing
renamed ` JsonExamples ` to ` Examples ` in both ` JsonExamples. java ` and ` package - info. java ` to
added debug logging statements in ViewExtractor. java to improve traceability and debugging capabilities of the code
refactor methods in FindsByLinkText. java to improve code readability and maintainability
added a new Main class that prints the " java oop entry point hit " to facilitate debugging by providing visibility into the entry point
added synchronization to ensure thread safety when generating CSeqHeader to prevent potential race conditions during concurrent access to the header factory
removed duplicate continue statements in NativeScanner. java to improve code clarity and maintainability
updated package structure and import statements in RendererConfigurationTest. java to improve organization and clarity of configuration - related components
refactor AndroidLibraryDescription to use a Supplier for collecting queried dependencies and exported dependencies to improve code readability and maintainability by using a more efficient
changed the method from ` stream ( ). count ( ) ` to ` stream ( ). size ( ) ` for retrieving the size of
added charset retrieval and charset to metadata in ExtractingDocumentLoader to ensure proper handling of character encoding in metadata
updated SQL insert and select SQL queries to use parameterized queries to improve flexibility and prevent SQL injection vulnerabilities
added a null check for the slot in WindowListener. java to prevent potential NullPointerExceptions when accessing the slot
added support for ignoring transitive dependencies in Maven execution requests to enhance flexibility by allowing Maven to ignore dependencies introduced by transitive dependencies
removed the dependency on BackgroundJobManager in ContactsPreferenceActivity to streamline the injection process by eliminating unnecessary dependencies
updated ColorsActivity to use AppCompatActivity instead of Activity to ensure compatibility with newer Android features and support libraries
added null check before closing the selection to prevent potential NullPointerException when the selection is not initialized
added a condition to check if the index is equal to the end of the string to ensure that only valid regular expressions are processed
added " server. port = 0 " to the IntegrationTest annotation to configure the server port for integration testing
added a new class ` UDFReverse ` and registered it in ` FunctionRegistry ` to implement a reverse function in the Hive framework
replaced calls to ` getContextHandler ( ). getContextPathEncoded ( ) ` with ` getContextHandler ( ). getRequestContextPath ( ) `
updated Tracer class implementation to improve performance and maintainability of the tracing system
added JUnit @ Ignore annotation to RocksDBStateBackendReaderKeyedStateITCase. java to temporarily skip tests during development
replaced multiple import statements with a wildcard import in XMLChangeLogParserTest. java to simplify import statements and improve code readability
updated buffer handling in StarTreeRecordStoreCircularBufferImpl. java and added synchronization in TestStarTreeRecordStoreCircularBufferImpl.
updated default values for forecastMinutes and forecastHours in OpenWeatherMapOneCallHandler. java to improve the accuracy of forecast data by adjusting
[ hotfix ] [ test ] increase timeout in abstractpageoperationtemplatetest
updated RemoteTargetGluer and FloatingHeaderView to improve animation handling and suggestion mode to enhance user experience by providing smoother transitions and
changed the return type of ` parseRerunFile ` from ` Collection < FeatureWithLines > ` to ` Stream < FeatureWithLines
added items for livingwood planks and quartz chiseled blocks in BotaniaCreativeTab. java to enhance the
updated assertions in TestRadioButtons to check the size of retrieved options instead of optItem and retrievedOptions to ensure the test accurately reflects
added support for file sizes in RCFileCat and introduced a method to retrieve number of rows to enhance functionality by allowing users to specify file sizes
renamed multiple classes related to clustering coefficient calculations to improve clarity and maintainability of the code
added check for mxnet nd array that be already close
[ hotfix ] [ doc ] fix typo in blobserver javadoc
fixed false positive for unused private method.
updated variable names from ` lexicalScope ` to ` lexScope ` in multiple files to improve clarity and consistency in variable naming conventions
added a test for auto - startup in InboundChannelAdapterParserTests to ensure the SourcePollingChannelAdapter is correctly started and stopped
added methods to ` AbstractSTRtree `, ` Node `, ` Quadtree `, ` AbstractNode `, and ` STRtree `
updated version parsing logic to handle minor version more accurately to improve accuracy in extracting minor version components
added a check to ensure tags are not empty before persisting items to avoid potential errors when tags are not set
added a new method ` parseDateTimeStringToEpochMillis ` to ` DateTimePatternHandler ` and a new function ` fromDateTime ` in `
hhh - 17100 - fix nullpointerexception in customtype. disassemble
refactor Log4j2ConfiguratorServlet to improve code readability to enhance maintainability and facilitate future updates
refactor exception handling in StorageBasedAuthorizationProvider to return a new AuthorizationException instead of throwing an exception directly to improve error handling clarity and maintainability
updated CGoCompileStep to use String. join for C++ command prefix and added a new test for prebuilt C++ dependencies to improve
added Buildable annotation to CustomResource. java to enable or disable the builder package for the Kubernetes API builder
removed the @ Override annotation from mmm Only. java and ppp Only. java to eliminate unnecessary overrides and improve code clarity
added a timeout constant for connection timeout in HttpClientFactory to improve connection reliability by using a defined timeout value
added " nonresolving _ raw _ target _ node _ parse _ pipeline " and " configured _ raw _ target _ node _ parse _
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 469
removed the @ Singleton annotation from ApplicationController. java to ensure Singleton is consistently used throughout the application
added error handling for OwnCloudAccount retrieval in ShareActivity. java to ensure proper username retrieval based on account display name availability
added BatchStatus import and a test for resume paused job execution in SimpleJobLauncherTests to enhance job management capabilities and ensure correct job execution status
added a null check for cacheConfig before joining the comma separate list to avoid potential NullPointerExceptions when cacheConfig is not initialized
[ java ] make dockersession a public class to allow access to the docker session.
[ javaparser ] fix compilationunitcontext. isqualifiedname ( string )
pdfbox - 4892 : don't decrypt the entire pdf file if there be only one pdf file
mahout - 1147 - fix test for distributed lanczos
updated HttpServerTestBase. java for improved test coverage to enhance reliability of HTTP server tests
added unit tests for attribute retrieval in PortletApplicationMapTest. java to improve test reliability and ensure correctness of data retrieval
added tests for handling nested beans with null values in BeanTableSchema to ensure that the itemToMap method correctly handles null values for nested beans
added support for configuring Spring's ` RedissonAutoConfiguration ` by introducing a list of ` RedissonAutoConfigurationCustomizer ` interfaces to
refactor index handling in Indicator. java and add unit tests for the toDouble method in IndicatorTest. java to improve code clarity and
added new method ` execInContainerWithUser ` to ` ContainerState ` and ` ExecInContainerPattern ` classes to enhance functionality by allowing
update interestedInByteMessages and interestedInTextMessages logic to handle both WebSocketByteListener and WebSocketTextListener instances to ensure that only interested -
added test cases for semantic graph attributes in SemgrexTest. java to improve test coverage for semantic graph construction
added a broadcast intent for CLEAR _ PULL _ UNREAD in HomeFragment. java to enable users to clear read data effectively
removed conditional check for preGingerbread in TouchImageView. java to simplify code logic for better readability and maintainability
refactored ValidationSupportChain to use a dedicated method for default profile validation support to improve code clarity and maintainability by encapsulating validation logic
( chore ) camel - base - engine : use vetocamelcontextstartexception instead of atomicboolean
added FloatingActionButton functionality to ShareActivity to enhance user experience by allowing users to click on the main FAB menu item
added InlineParslet to handle inline date parsing in ToDateTokenizer to improve handling of special characters in date formats
updated TestAnonymousClassUnloading. java file to improve test coverage for anonymous class unloading functionality
updated error messages in ErrorMessages and XPATHErrorResources to improve clarity and consistency in terminology
added server check before binding operations service in AuthenticatorActivity to ensure operations service is only instantiated when the server is checked
updated Position constructor to use beginLine and endColumn instead of getBeginColumn ( ) and getEndColumn ( ) to ensure correct positioning of positioned
added methods to manage process termination and exception handling in CxxPreprocessAndCompileStep. java and ManagedThread. java to improve error handling and
added support for requiring all repository sources in PrincipalAttributesProperties and created a new test class for PrincipalAttributeRepositoryFetcherTests to enhance attribute handling capabilities
make getapproximatemaxsize method public so it can be use by other class.
added support for enabled SSL protocols in NettyWebServer and related classes to enhance security by enabling specific SSL protocols based on configuration
replaced AtomicBoolean with AtomicReference in SetOnce. java to improve thread safety and maintainability of the code
updated key retrieval logic in QueryDslMongoRepository and added a test for empty path expressions in SpringDataMongodbSerializerUnitTests to
updated test assertions in RoundRectBorderTest. java for consistency to ensure correct behavior of round rectangle borders with self - defined styles
added an empty check for Genesis configuration before verifying the existence of nodes to ensure that the configuration is valid before proceeding with the
deleted the ConfirmTest. java file and removed the ParallelTest. java file to streamline test code by eliminating unnecessary test classes
updated CountDownLatch and list initialization to use'min'instead of'cnt'and added validation for the'sign'array to improve synchronization efficiency
added a check for non - windows conditions in ProcessInformationsPanel. java to ensure that only active windows are processed
added a new static method ` empty ( ) ` and renamed the method ` greatest ( ) ` to ` greatest ( ) ` for clarity to
added null checks and refactored market data services in BitmexStreamingExchange and BitmexStreamingMarketDataService to improve error handling and
added validation checks for lat and lon in GeoPointField. java to ensure that invalid coordinates are handled correctly and improve error messaging
replaced the method ` createWorkflowFile ` and ` createFile ` with a new method ` getWorkflowDrafFileName ` and ` getWorkflowD
refactor ResponderId class to improve code readability to enhance maintainability and facilitate future updates
updated the ` getTableDocument ` method to accept a boolean parameter to control the behavior of dependent tables based on their dependencies
added a check for consecutive uploads without coordinates in UploadActivity and defined a constant for the COUNTER _ OF _ CONSECUTIVE _ UP
added a new method ` viewProfile ` to the ` ProfileResources ` class to retrieve and view profile data to improve profile management by caching profile
updated JpaMetamodelEntityInformation to handle nested entity properties correctly to ensure proper property value extraction for nested entity information
updated timestamp handling in UpgradeIT, ConnectionQueryServicesImpl, and ConnectionQueryServicesImpl to ensure correct bootstrap timestamps for tables and views during database
added support for registering default exception mappers in AbstractServerFactory and updated related configurations in DropwizardResourceConfig to enhance error handling capabilities and improve resource
added a boolean parameter to the storeFieldAction parameter to control the behavior of the storeFieldAction
updated the parameters of ` nativeCreateNSWindow ` and ` ownerPtr ` to use ` owner ` instead of ` nsViewPtr ` to
updated SQL statement to use FILE _ TABLE _ NAME instead of FILE _ REMOTE _ ID to improve clarity and consistency in database schema
added support for stock tiles in the Tile class to enhance the visual representation of stock items
fixed - rbuckets. get ( ) method throw classcastexception
updated logging statements in TypeFrameModelingVisitor and added DetectorUnderTest annotations in Ideas _ 2011 _ 07 _ 03, Ideas _
refactor LauncherBackAnimationController to use mProgressAnimator instead of handler methods to improve code readability and maintainability by centralizing progress handling
changed the type of ` _ initialPageNo ` from ` final ` to ` final ` and added pagination logic to ensure ` _ initialPage
fixed crc16 calculation to account for oddly divisible by 16384
added support for comment handling in FormattedSqlChangeLogParser to enhance flexibility in parsing formatted SQL changes
plexus - mavenarchiver should use setarchiver ( ) instead of create a new one
replaced HumanReadableException with BuckUncheckedExecutionException in DefaultClassUsageFileReader. java to improve error handling by resolving class usage file paths
updated conditional checks for aggregations in TSServiceImpl. java and added multiAggregationTest ( ) method in DaemonTest. java to improve code readability and
added validation for UNSIGNED _ BYTE format and type in GwtGL20. java to ensure only valid pixels are processed in the WebGL rendering context
updated test methods in OutputMemoryTest and refactored method calls in PrintR and VarDump to improve test clarity and maintainability by using
added error handling for UnmodifiableClassException in InlineBytecodeGenerator. java to ensure that Byte Buddy cannot instrument classes that are part of
[ gr - 20829 ] report class initialization trace in the log file.
updated query timeout parameter in BaseBrokerRequestHandler. java to ensure consistency in query timeout settings
updated TopicRouteService to use Caffeine's LoadingCache instead of Google'common'to improve cache efficiency and performance during topic
modify the createDataSource method to accept a readOnly parameter and set the Pragma to SYNCHRONOUS to ensure data source connections are
updated the regex pattern for INVALID _ SOURCE _ TARGET _ RELEASE in FindBuildToolFailures. java and added a fatal error message in FailureLog
updated URI generation logic to conditionally display latitude and longitude based on location availability to improve user experience by ensuring location information is displayed only when the
added a null check for inherited parameter contexts in StandardParameterContextDAO to avoid potential NullPointerExceptions when retrieving referenced IDs
updated ClassLoader class implementation to improve performance and maintainability of the code
added a method to set the origin response headers in ProxyRequestHelper and corresponding test in ProxyRequestHelperTests to ensure that origin response headers are
added a new ProfileSettingDrawerItem ( ) to GpsMainActivity to enable profile setting functionality in the application
added JASPER _ XML _ VALIDATION _ ATTR to various classes and updated TldParser initialization to use it to enable XML validation based
danielwagnerhall : fix firefoxdrivertest failure
added maxRows handling in IoTDBStatement to ensure fetch size does not exceed allowed limits
refactor the method name from ` isCountOptimizable ` to ` allActionsAreOptimizableFilters ` for clarity to improve readability and
added event handling for NODE and MOUSE LEFT CLICK events in StandardVizEventManager. java to improve user interaction responsiveness during mouse events
replaced Integer. valueOf calls with a new method ` zeroBuffer ` in ` ManyToOneRingBuffer. java ` to improve code readability and maintain
[ drools - 242 ] fix nullpointerexception in terminalnode
removed getter methods for height and width in LCDUIImageMonochromeBitmapSource. java to streamline the code by eliminating unnecessary
refactor SourcePathResolver to use a new method for retrieving absolute paths to improve code readability and maintainability by centralizing path retrieval logic
fix dstu2 encode for identifier value ( # 1751 )
refactor WebsocketRoutingFilter to improve URL encoding and enhance test coverage to ensure correct handling of encoded URLs in WebSocket upgrade requests
updated file paths in LLVMPaths. java and TestGCCSuiteCompile. java to replace " llvm / " with " llvm /
added a method to retrieve the C++ platform from HaskellBinaryDescription to improve code clarity and maintainability by centralizing platform retrieval logic
added import statements for IndexReader and Similarity in multiple Java files to enable proper usage of Lucene's indexing and searching functionality
modified ConcurrentLinkedStack to handle null values and added new test methods for bubble and iterator functionality to improve robustness of stack management and enhance test
added ` isMatched ( ) ` and ` setMatched ( ) ` methods to ` BinaryHeapQueueTest ` and ` BaseQueueable `
added a null check for mDirectories before initializing mDirs to prevent potential NullPointerExceptions when mDirectories is not initialized
added a condition to check if mOverviewStateEnabled and mFirstLayout is false to ensure proper handling of gestures when not in overview state
added multiple package - info. java files for various Lucene packages to improve documentation and maintainability of the Lucene project
added functionality to set the visibility of the autoleveler panel to improve user experience by providing a clearer indication of whether the autolevel
added postoptimizations to DirectUpdateHandler and DirectUpdateHandler2, and implemented optimize event listeners in UpdateHandler to enable postoptim
updated the compression logic in CompressionMode. java to ensure proper handling of compressed bytes to improve reliability and correctness of the compression process
removed the check for user data in Shaderc. java to streamline the code by eliminating unnecessary checks
added a check for local metastore in the retry logic to ensure retries are handled correctly when the retry limit exceeds the specified number of retries
updated import statements and added null checks for host status in HeliosSoloLogService. java to improve error logging robustness and handle connection
updated imports in Subject. java to improve code clarity and maintainability
updated the typeMap initialization to include weak and strong reference types to enhance thread safety by providing strong reference types
updated color distance calculations in HSSFPalette. java and added a test for finding similar colors in TestHSSFPalette. java to improve color
chore : integrate new gapic - generator - java and rules _ gapic ( # 444 )
danielwagnerhall : fix elementfindbynumericid and elementfindbyemptyid
added flags parameter to ShadowApplication and ShadowContextImpl classes to enable flexible receiver registration based on specified flags
refactor FFmpegTest to use InvocationOnMock for mocking the runFunc to improve test reliability by ensuring the correct method is called on
updated Ogg and OggInputStream constructors to include a previousInput parameter to ensure proper resource management and prevent potential memory leaks
added a constant for the response was null and updated the failure message accordingly to improve clarity and maintainability of the error message
[ te ] ignore anomaly warning if there be no migration
replaced Toast calls with a new showToast method in BaseActivity and DetailActivity to improve user experience by displaying toast notifications based on user settings
updated the method call from ` method ( ) ` to ` requestTemplate ( ) ` in ` TracingFeignClient. java `
added exception handling for LDAP names in LDAPCertStore. java to improve robustness and error management during LDAP operations
refactor retain method to accept a list of RSockets to improve flexibility by allowing multiple rSockets to be retained
renamed ` AdapterViewTest ` to ` ListViewTest ` and added a new test for item click functionality to improve test clarity and ensure item click functionality
[ hotfix ] [ test ] migrate checkpointfailuremanageritcase to junit5
deleted the GenericItemUIProvider. java file to remove unused code related to item UI functionality
added getter and setter methods for the selected object in SIPCommSelectorBox to improve object handling and accessibility of the selected object
added a @ Isolated annotation to MetaInfConfigurationTest to indicate that the static method of FileSystemPool cannot be accessed concurrently
added a line to set the server connector host to HTTP _ INFO to ensure the server uses the correct binding address for HTTP requests
updated token validity checks for different grant types in DynamicClientRegistrationEndpoint. java to improve accuracy of token validity settings based on configuration
added a CloverInstrumentationFilter to the TestInterfaceAudienceAnnotations class and modified the SplitLogCounters to check for Synthetic fields to enhance
added support for Smartmi Evaporative Humidifier in MiIoDevices. java and updated string formatting in ReadmeHelper.
make plausible to break only when there be no lava below.
changed the visibility of the setScrollRangeDelta method from package - private to public to allow access to the method from other classes
added error logging for empty repository lists in ClusterStackVersionResourceProvider and HostStackVersionResourceProvider to improve error reporting when the repository list is
updated the condition to check for missing values in the IntHashSet to ensure proper handling of missing values in the hash set
added Serializable interface to RuleAdministratorImpl to enable serialization of RuleAdministrator objects
updated allowedOrigins and allowedTimingOrigins to use sets instead of ArrayLists to improve performance and maintainability of allowed origins handling
added " g3d / knight. g3dj " to the list of test files in BaseG3dHudTest.
added error handling for solidified blocks in Manager. java to improve stability by logging errors when updating the latest solidified block
updated null handling logic in ExecResult. java and added a test for null return in TestServerCustomProtocol. java to improve robustness of
added a new method ` hasAccess ` to handle remote user access in ` HttpServer ` to improve access control by allowing administrators to access
refactor ClassMirror and StubJar classes to use ByteSource for generating stub classes to improve code readability and maintainability by centralizing byte source functionality
added functionality to display internal link text based on file type to enhance user experience by providing more context about file sharing operations
updated accuracy assertion to use Locale. ENGLISH in PredictionTest. java to ensure correct accuracy formatting regardless of locale settings
updated condition to check for SATURDAY in ModelZooTest. java to ensure correct validation of the SATURDAY value
added hideInput method to AllAppsContainerView and modified hideIme method in LauncherAllAppsContainerView to improve user experience by ensuringIme
added InMemoryEventStorageEngine to EventHandlingConfigurationTest and refactored registration of modules in SagaConfigurationTest to ensure proper event handling and
refactor ` BsdFileStore ` and ` BsdNativeDispatcher ` to use a new method ` getmntonname0 ` to improve
added a new test class ` Issue1599Test ` for testing the ` JavaParserTypeSolver ` to address issue # 1599 related to
added optional parameters to the " spawn " command in SpawnCommand. java to allow users to specify positional arguments for spawning commands
refactor content area height and width calculations to use a constant to improve code readability and maintainability by centralizing content area dimensions
graalcompilertest : use debug. scope ( ) for code installation
updated Directory initialization to rely on Windows semantics to ensure compatibility with Windows semantics
added class names to pluginChecks in UpgradeCheckRegistry and modified the addColumnsToUpgradeTable method in UpgradeCatalog280 to ensure proper error
refactor Environment class to improve code readability to enhance maintainability and facilitate future updates
added LuceneTestCase import and annotated RecoveryAfterSoftCommitTest with @ LuceneTestCase. BadApple to address a known issue related to SOLR -
updated home assignment logic in CodenameOneImplementation. java and removed a warning message in HashtableContent. java to ensure correct handling of file
replaced ` FLAG _ IGNORE _ HDMV _ DTS _ STREAM ` with ` FLAG _ ENABLE _ HDMV _ DTS _
updated resource handling in LiquibaseEntityResolver and XMLChangeLogSAXParser to use CompositeResourceAccessor for temporary files to improve resource management and
added security settings to disable TLS algorithms in ComHostnameVerifier and JavaxHostnameVerifier to ensure compatibility with disabled TLS algorithms
updated the ` @ Value. Immutable ` annotation and removed the ` EMPTY ` constant in ` CxxLibraryDescription ` and ` CxxLibraryTest `
renamed expected and actual directories to expectedStubDirectory and actualFullDirectory in StubJarTest. java to improve clarity by accurately reflecting the
removed the @ DoNotSub private field from Int2ObjectHashMap. java to streamline the code by eliminating unnecessary fields
updated folder name setting logic to handle empty title cases to improve user experience by providing feedback when the folder name is empty
updated client ID from " invalid _ client " to " uaa " in UaaResetPasswordServiceTests to ensure compatibility with the latest client
changed access modifiers of ` isEmptyOrWhitespace ` and ` isSpecialCaseOrUnknown ` methods from public to private to restrict visibility to enhance encapsulation
updated string concatenation syntax in AtomicCounter, AtomicLongPosition, and UnsafeBufferPosition classes to improve readability and maintain consistency in string representation
rename MimetypeIconUtil. java to improve clarity to enhance code readability and maintainability
renamed method ` supportsViewFor ` to ` supportsViewsFor ` across multiple view provider classes to improve clarity and consistency in naming conventions
added a test method for unnecessary parentheses in UnnecessaryParenthesesTest. java and modified the return condition in UnwrapParentheses
added functionality to manage the built state of objects in the Location class to enable dynamic retrieval of objects based on their state
replaced Base64 encoding methods with Base64Utils utility methods in TokenKeyEndpoint and TokenKeyEndpointMockMvcTests to improve code maintainability and
updated imports and statistics handling in TranslatorManagerHelper. java to improve code clarity and ensure accurate statistics reporting
rename ` ContainerAnnotation ` to ` ContainedBy ` to improve clarity regarding the purpose of the annotation
added an assertion to ensure that the getId ( ) method returns a non - null value to enforce that the method returns a non - null value
refactor the ` setUpRevampedTweet ` method to use a new variable for retweeter handling to improve code readability and maintainability
added conditional logic to retrieve verified text based on theme settings to ensure verified text displays correctly based on the addon theme settings
changed visibility of instance and secretKeyBase64 in AbucoinsDigest. java to enhance encapsulation and prevent potential NullPointerExceptions
added autowire annotations to MongoDbComponentConfigurer and refactored mongo connection resolution in MongoDbEndpoint to improve dependency injection and ensure proper connection resolution
added a sourceIndex field to the AttributeMapping class and updated related constructors accordingly to enhance functionality by allowing specification of the source index during attribute mapping
added error handling for corrupted partition statistics in SemiTransactionalHiveMetastore to improve robustness by logging warnings when statistics are corrupted
added a call to UserGroupInformation. isSecurityEnabled ( ) in AuthParams. java to ensure proper handling of security settings in the application
refactor ConnectivityReceiver, TerminalKeyListener, AbsTransport, and EastAsianWidth classes to improve code organization and maintainability
escape the contact email in GeoServerHomePage. java and update test cases in GeoServerHomePageTest. java to ensure that the contact
refactored the enriching of reflections with subsystems in TerasologyEngine and ModuleManagerImpl to improve modularity and maintainability
refactor how features are written to the mmfStream in JoinModeller. java to improve clarity and maintainability of the data structure
added a check for non - empty cmd before verifying if the command starts with " < " to ensure that the command does not contain an
[ hotfix ] [ kafka ] only log ` ` update offset'' if log level be debug
updated playback action from ACTION _ SET _ PLAYBACK _ SPEED to PlaybackStateCompat. ACTION _ SET _ PLAYBACK _ SPEED
updated IgnitionConfigurationHandler, MotorMountHandler, AxialStage, FlightConfigurationID, and IgnitionEvent classes to
tika - 2852 -- improve error message for mismatch ascii name length.
added an @ Ignore annotation to JdbcFrontJdbcBackLinqMiddleTest. java to temporarily skip tests that are non - deterministic on JDK
refactor lock file creation methods in MavenDependencyResolver and MavenDependencyResolverTest to improve code readability and maintainability by encapsulating lock file creation logic
updated notification settings for version 5 _ 3 and version 5 _ 3 _ 1 in UpdateUtils. java to ensure compatibility with the latest version and
added a check to return null if the username equals the federated user to ensure that the authentication process handles federated users appropriately
added TruffleObject check in ExecuteMethodNode. java to ensure proper handling of non - TruffleObject instances
replaced Collectors. toList ( ) with Collectors. toList ( ) in JakartaClientShutdownWithServerWebAppTest. java to streamline
added FilterAttachable and WarnStatus imports and modified error handling in LogbackValve. java to enhance logging capabilities and ensure proper access control
refactor Collection and Map classes to improve code readability and maintainability
removed unused import of Version from CreateIndexTask. java to clean up the code and reduce unnecessary dependencies
added handling for missing primary keys in the MissingPrimaryKeyChangeGenerator for Oracle and AbstractDb2Database to ensure correct schema and table mappings during comparison
updated exception handling in MsckOperation and added a test for invalid partition names in TestMSCKRepairOnAcid to improve error handling
[ hotfix ] [ kafka ] make kafka committable retryable
remove receipt handle from forward message to dlq activity
added support for Docker services in DockerComposeContainer and created a new test class for it to enhance flexibility in managing Docker services and ensure proper
replace manual iteration with a static method ` copySet ` to improve code readability and reduce boilerplate code
removed HtmlCleaner and SimpleHtmlSerializer from FeedParser. java to simplify code and improve readability by eliminating unnecessary code
updated the logic in mAppsCustomizeContent to use numCustomPages ( ) instead of mLauncher. getWorkspace ( ). getChildAt ( 0
do not use int type in meterrealtimebodydata
added a new file ` bug4150029. java ` that implements a file chooser to demonstrate the use of ` java. io.
added a boolean flag ` isSparkConfigUpdated ` and corresponding getter / setter methods in ` HiveConf `, and refactored SparkClient
added a long press indicator for deep shortcuts in multiple classes to enhance user experience by providing a convenient long press indicator for deep shortcuts
added checks for polygon and empty data types in WKBWriter and WKBWriterTest to ensure correct handling of empty geometries and improve test coverage
refactor UnflavoredBuildTarget to use a builder pattern to improve code readability and maintainability by centralizing the builder pattern
added a new file ` MultiplyByMaxInt. java ` containing a test method for integer multiplication to implement and test the multiplication operation for
removed the check for the current file in OCFileListFragment to enable drawer indicators based on the current file state
updated package structure and import statements in TestRAMDirectory. java to improve organization and maintainability of the code
replaced FixedBitSet with BitSet in Automaton and Operations classes to improve performance and memory efficiency
drools - 587 dmn error message should be in DMNEvaluatorCompiler and DMNEvaluatorCompilerMessage2 to improve clarity and
replaced instances of ` @ ContainedBy ` and ` @ Repeatable ` with ` @ Repeatable ` across multiple test files to
updated the message formatting for file sending duration in AbstractController. java to improve clarity of file output by including duration information
updated class name handling in OpenMBeanAttributeInfoSupport. java to ensure proper package access and improve class name resolution
move response count from responseresolver to writeleresolver to allow reuse of response count.
updated the calculation of freeSize in StoreDirect. java to ensure proper handling of memory sizes
add touch event handling to the areTouchesDisabled method in AnyKeyboardView and AnyKeyboardViewBase classes to improve touch event management and ensure
replaced SslContextFactory with SslContextFactory. Server in HttpServer, RESTServer, and ThriftServer classes to ensure proper SSL context is used for server communication
removed the privilegedSocket class from PG _ Stream. java to streamline the code by eliminating unnecessary dependencies
[ hotfix ] [ test ] fix typo in inputtest
updated the ` finishRecentsAnimationOnTasksAppeared ` method to include a null check for QuickstepLauncher to ensure proper handling of
refactored location marker handling in NearbyMapFragment. java to improve code clarity and maintainability by consolidating location marker functionality
updated the method to retrieve the client ID in ClientAdminEndpoints to ensure the correct secret is removed based on client context
updated XML configuration in SqlSourceBuilderTest to use \ \ t for newline characters to improve readability and maintain consistency in SQL statement formatting
fix for http : / / issues. apache. org / activemq / browse / amq - 2576 - use executorservice. awaittermin
added a new test method ` testKeys ` to ` SlidingGanttCategoryDatasetTest ` to ensure that ` SlidingGant
added null and empty handling for condition data sets in ShenyuTrieRuleListener. java and ZookeeperSyncDataService. java to
light control now use clone instead of spatial.
added @ SuppressWarnings ( " UnusedAssignment " ) annotations and modified stack trace handling in StdErrLog. java to suppress warnings and improve
added a null check for the ApplicationContext in HttpSessionEventPublisher to ensure the correct context is published to prevent potential NullPointerExceptions
added a semantic exception for CREATE CQ statements in ASTVisitor. java to inform users that the syntax of CREATE CQ statement has changed from
[ hotfix ] [ doc ] fix typo in flinkiotdbsink javadoc
add a counter for custom simplification considersed nodes in canonicalizer.
updated fileIcon setting to use context instead of null to ensure proper context is used for file type icons
updated indexOrConstraintName retrieval to use the correct schema name to ensure proper handling of index names based on the specified schema
added support for BigQuery's TIMESTAMP type in BigQueryTableRowIterator and created a test for it in BigQueryUtilTest to enhance functionality for reading timestamps
added ` findViewWithTag ` method to ` ShadowView ` and ` ShadowViewGroup ` classes and corresponding test cases in ` ViewGroupTest `
updated parameter enumeration types to use generics for better type safety to enhance type safety and prevent potential runtime errors
removed unused imports from IndexToolForDeleteBeforeRebuildIT and MetaDataClient to improve code clarity and maintainability
added JSON _ VALUE and JSON _ CREATOR constants to DocAnnotationConstants and updated related logic in SpringBootDocBuildTemplate and JavaClassUtil to
[ gr - 20536 ] support jar resource in classpath feature.
updated CUDA _ R _ 32F, CUDA _ C _ 32F, CUDA _ R _ 64F, CUDA _ C _ 32I
refactor ResourceLoader class to use FileFilter for filtering layout directories to improve flexibility in resource loading by allowing layout directories to be excluded
added support for SimpleAttachableMaterialData in BlockRedstoneTorch to enhance functionality by allowing custom attachment behaviors
[ hotfix ] [ table - planner - blink ] support varbinary type in reltostageconverter
removed unused import of DateHelper in NoteAdapter. java to improve code clarity and maintainability
updated backup message handling to include success and failure messages to improve user feedback during backup operations
change the position of the eview1 element from absolute to relative to ensure the element is positioned relative to its parent element
refactor the creation of a temporary file in ShadowParcelFileDescriptor. java to simplify the file creation process and improve error handling
replaced the use of ` getStackForThread ( ). offer ( ) ` with ` getStackForThread ( ). addFirst ( ) `
updated the rule from " optimizations " to " controversial " to accurately reflect the functionality of the BooleanInversion test
added test methods for Xor neutral references in IntegerEqualsCanonicalizerTest and IntegerEqualsNode to improve test coverage for Xor neutral
removed the static final Type STRING _ ARRAY from TypeFactory. java to eliminate unnecessary dependencies and improve code clarity
added hideIme method to AllAppsContainerView and refactored logging in LiveSearchManager and LauncherAllAppsContainerView to improve user experience by
fix network crash in blockstatecontainer. resize ( ).
updated error messages in TimelineMetricCacheSizingTest and TimelineMetricCacheTest for clarity to improve readability and maintainability of test assertions
added a new method ` getGLMaximumTextureSize ` to calculate the maximum texture size to optimize texture size retrieval for better performance
[ java ] fix typo in stop log recording method.
added a condition to reset startPosn when isInTransform is true to ensure proper initialization of startPosn based on transformation state
updated star tree handling methods to use a new flag to improve clarity and maintainability of star tree functionality
introduced a boolean flag ` lockNearbyView ` and refactored related methods in ` NearbyActivity. java ` to improve locking
added methods for creating immutable bimaps in MapTransformer to enhance immutability of bimaps during transformation
refactor EmeddedObjects and EmbeddedObjects classes to improve code readability and maintainability
added support for loading launcher widget span information in LauncherPreviewRenderer and PreviewSurfaceRenderer to enhance widget management by allowing dynamic span information retrieval based on
replaced ChangeEvent with EventObject in StageSelector class to utilize the updated event library for better event handling
added methods to retrieve calling processes and their uid in ShadowBinder to enhance functionality by allowing retrieval of calling processes and their uid
replaced AutoValue with Guava's Objects class for better null safety to improve code maintainability and prevent potential NullPointerExceptions
added a warning log indicating no support for deserializing messages to improve error handling and logging clarity
updated calculations for width and height in ImageReplacedElement. java to ensure correct scaling of images based on input values
added handling for specific Markdown escape characters in CoreMarkdownNodeRenderer and MarkdownWriter to ensure correct processing of escaped characters in Markdown
added a new method ` setPassword ` to handle sharing files with links based on file type to improve user experience by allowing users to share files via
refactor MappingMethods to use a static class for better error handling to improve reliability and maintainability of the code
updated method visibility from public to default in AbstractAssert _ describedAs _ printed _ to _ console _ Test. java to ensure consistent access level
renamed OPTION _ ARGS, OPTION _ LOGLEVEL, OPTION _ CHAOS _ MONKEY, and introduced a new slider keytab directory
updated ` tearOutGraphViewContainer ` method to accept a JFrame parameter and added animation control functionality to enhance functionality by allowing users to enable
added synchronization for loading workspace and shortcut existence in LauncherModel. java to improve performance by ensuring complete runs are executed only when the workspace is
replaced ` isFinished ` boolean with ` final ` Set < String > nodePaths ` in multiple operator classes to ensure immutability of the data
updated method signatures to include messageType, type, guid, and check results in IssueInterface and ValidationReport classes to enhance functionality by allowing more detailed
added a method to retrieve the cipher provider and updated output formatting to improve error handling and provide clearer output
[ hotfix ] rename ` getDynamicConfiguration ( ) ` to ` getFlinkConfiguration ( ) ` across multiple files.
changed log level from WARNING to OFF in CCJSqlParserUtil. java to disable logging during parsing
added a condition to append " | \ n " to the output if the index does not match the expected size to ensure proper formatting of output
changed BITMAP _ HEIGHT and BITMAP _ WIDTH from private to public to allow access to these constants from other classes
added an @ Ignore annotation to CovariantOverrideTest. java to mark the test as ignored since it does not implement covariant
refactor ` curly ` and ` curly ` methods to use a new ` Qtype ` to improve code readability and maintainability by using a more
camel - core - optimize the loading of route from xml to avoid npe.
added space settings for X - axis in ScatterChart to improve visual spacing for better visualization
updated the format of the INTERVAL expression in ExpressionStringBuilder. java to improve clarity and consistency in SQL syntax
added a new method ` shouldPreserveDataStateOnReapply ( ) ` to multiple classes and implemented it in ` SplitScreenSelectState
added a check to ensure the UTF8 key is present in the system resource to prevent runtime errors when the UTF8 key is missing in the
replaced super. prevSysOut. println with super. prevSysOut. println and added @ SeedDecorators annotation in LuceneTestCase to
added a UI event for long - pressing an AllApps item in StatsLogManager and logging it in ItemLongClickListener to enhance user experience by
added null check for log in StoreWAL. java and created a new test class Issue112Test. java to ensure that double commits do not
added a condition to check if ` showSectorLandInfo ` is true before proceeding to ensure ` showSectorLandInfo ` is
[ hotfix ] [ table - planner - blink ] fix compiler warning in typeinfo
refactor Enum class to improve readability to enhance maintainability and facilitate future updates
refactor buildNearbyRandom method to accept a boolean parameter for better control over random selection to enhance flexibility in choosing nearby random values based on
remove temporarycache. removetest ( ) from minecraftserver and use it in nettyplayerconnection.
updated visibility settings for DataStoreInfo and WMSStoreInfo in NewLayerPage. java to ensure proper visibility of components based on store type
initialize Availability _ availability to UNAVAILABLE to ensure availability status is consistently set to unavailable
updated PBFT commit message processing logic to include peer synchronization status to improve synchronization handling during PBFT operations
updated retry settings in PhishingProtectionServiceV1Beta1StubSettings to use a single retry parameter instead of multiple retries to improve reli
changed the type of ` _ freeSpaceReclaimDisabled ` and ` _ freeSpaceReclaimQ ` from boolean to integer to allow for
changed KDC _ OPT _ PROXIABLE and KDC _ OPT _ FORWARDABLE from public to private and added a new KDC
replaced the assignment of ` writer ` with a null assignment and initialized ` writer ` to null to ensure proper handling of null values and prevent potential
updated mentions list and favorites in ProfilePager. java to improve user experience by displaying relevant mentions
renamed the method ` paintBackground ` to ` paintComponentBackground ` in ` Slider. java ` to improve clarity by using a more descriptive method
added a method to retrieve a value from a class constant in Configuration. java to improve flexibility in handling object value constants
added error handling for service initialization in KafkaService. java to improve robustness by logging exceptions during service initialization
changed the type of ` RESOURCES _ TO _ ALWAYS _ ACQUIRE ` from ` Sets. newHashSet ` to ` ImmutableSet. of `
updated channel naming and error handling in MessageBus. java and EndpointParser. java to improve clarity and maintainability of channel management
added functionality to index metadata based on the " keywords " property in HTMLDocument. java and created a test case in TestDemo. java to
updated SDK version check from S to R in FileUploader. java to ensure compatibility with newer Android versions
refactor address assignment logic in MemcachedSessionDataMapFactory. java to improve readability and maintainability of the code
removed the instantiation of CorrespondenceSubclassToFactoryCall in CorrespondenceSubclassToFactoryCallTest to simplify the test by eliminating unnecessary
refactor Builder class for improved readability to enhance maintainability and facilitate future updates
use ebook. de / de / tools / isbn2bibtex instead of internet connection.
[ polyglot ] increase keepalive timeout to 10 second.
added a null check for the text before firing data changes to prevent potential NullPointerExceptions when the text is not initialized
added TreebankLanguagePack and simplifiedModel fields to the SentimentModel class and updated related methods to use RNNUtils to improve
added trimming of lines in SuffixURLFilter to ensure proper formatting of URLs
added a check to return early if the player is in godmode to prevent processing when in godmode is enabled
don't register a new popup if the keyboard be haviur feature be not available
updated constructor parameters for LinkedHashMapCache and BoundedLinkedHashMap in CacheType. java and TCache. java to ensure consistent initialization of cache types and
corrected formatting in ChannelEndPoint. java to improve code readability and maintain consistency
added null checks for keyIndex in FixAcidKeyIndex. java and changed access modifiers in OrcOutputFormat. java and OrcRecordUpdater.
updated exception handling in DirectUpdateHandler2 to use Locale. ROOT to ensure consistent error reporting across different locales
added support for a store check guard in the WriteNode class and updated relevant usages in DefaultJavaLoweringProvider to enhance control over store check
do not follow exception dispatch block when there be no exception dispatch.
added ` getClassificationDisagreement ` method to ` AbstractCloud `, ` DBCloud `, and ` ViewFilter ` classes to implement
removed unnecessary calls to BuildTarget. copyOf ( ) in multiple files to streamline code by eliminating unnecessary method calls
[ hotfix ] [ test ] fix typo in sqlrunner
changed the type of ` date _ taken ` from ` String ` to ` long ` in ` InstantUploadBroadcastReceiver ` and ` FileStorage
changed the type of ` knownSdks ` from ` SortedMap ` to ` SortedMap < Integer, Sdk > ` and updated related methods accordingly to
change ` ProgressIndicator ` to ` ConfidenceProgressIndicator ` in ` CreateOfferView. java ` to improve UI consistency by using a more
updated USER _ AGENT header value from " Cling / " to " UMS / " in multiple files to standardize user agent handling for
fix for iterablelistener infinite loop
added constants for view types in CrowdfundingChatAdapter to improve code readability and maintainability by using defined constants
replaced ` memEncodeUTF16 ` with ` memEncodeASCII ` in ` LinuxLibrary ` and ` MacOSXLibraryDL ` to ensure proper
make sure we don't throw an exception if we don't have a root
modified the insert method to accept a rotation parameter and added duplicate padding handling to improve flexibility in inserting nodes based on rotation settings
replaced the method ` getVisitors ( ) ` with a new ` apply ( ) ` method in ` RefactorModule. java ` to
added methods to retrieve child elements by their names using recursive methods to improve efficiency and maintainability of XML element retrieval
set the Content - Charset header to " UTF - 8 " in HttpSolrServer and its corresponding test in BasicHttpSolrServerTest to ensure
replaced static UI _ STATE _ ALLAPPS with a @ SystemUiControllerFlags annotation in AllAppsTransitionController. java to improve UI state management
removed the private ClientConfigurationService from IntrospectingTokenService to streamline the code by eliminating unnecessary dependencies
updated error message formatting in HiveRecordSet. java to improve clarity of error messages for better debugging
removed the ownerId field from NodeEntry. java to streamline the code by eliminating unnecessary fields
updated BackupSnapshotAferTakingSnapshot to BackupSnapshotAfterTakingSnapshot in both Config. java and SnapshotManagerImpl. java to ensure consistent
added score to the merge method in TextFragment to ensure the fragment's score matches the existing score
added a private Digester field to Md4PasswordEncoder to enhance security by managing digester instances
added validation to ensure maximumUnimprovedStepCount is non - negative to prevent IllegalArgumentException when maximumUnimprovedStepCount is
added a check for empty opened editors in EditGcodeFile. java to ensure that only valid editors are processed
added overloaded ` verify ` methods to ` BDDMockito ` and corresponding test cases to enhance flexibility in mock verification behavior
updated ClassLoader retrieval from ` Thread. currentThread ( ). getContextClassLoader ( ) ` to ` PathScanner. class. getClassLoader ( ) ` to
updated the ` sayHi2 ` method in ` CodeFirstPojoClient ` and ` CodeFirstPojoIntf ` to use ` CompletableFuture
added logging initialization to AbstractSplitBrainProtectionTest and updated method signatures in ScheduledExecutorConfig and PNCounterConfig to enhance logging capabilities and
added null checks for logout configuration in DefaultLoginPageConfigurer and ServerHttpSecurity to ensure logout occurs only when logout is enabled
[ giac ] use degree instead of degree for ideal var
added log consumer functionality to DockerComposeContainer and created a new test class DockerComposeLogConsumerTest to enhance logging capabilities and improve test
updated the formatting of the test method signature in StandardJavaTypeMappingTest. java to improve code readability and maintain consistency
removed unnecessary import statements in AmbariMetaInfoTest. java to streamline code by eliminating unnecessary dependencies
added a static method ` fromSupplier ` to the ` ThrowingSupplier ` class to facilitate the retrieval of a ` Supplier < T
replaced a break statement with a return statement that returns a boolean value to improve code clarity and maintainability
added support for Buffer body in VertxPlatformHttpSupport and created a test for text content post in VertxPlatformHttpEngineTest to enhance
added platform - specific path handling methods in MorePaths. java and updated references in CopyStep. java and AarWithLibsIntegrationTest
added a null check before processing parameters in AuditEvent. java to avoid potential NullPointerExceptions when parameters are not initialized
replaced ` loadLibraryOnlyIfPresent ` with ` throwExceptionIfFail ( ) ` in ` NativeLibraries. java ` to enhance error handling by
updated SDK version from 4611349 to 4514284 in SdkConfig. java and corresponding test cases in ShadowTextToSpeechTest. java
make transactionlogkey serializable and add equal and hashcode method to it
added support for SQL without profile configuration in JdbcEnvironmentProperties and JdbcEnvironmentRepository to improve flexibility in enabling SQL without profile execution
added a try - finally block around the write operation in ConnectHandler. java to ensure proper resource management and prevent potential memory leaks
fix eclipse compiler warning in modloadingstage
updated the formatDate method to use a calendar instead of a fixed date to ensure consistent date formatting across the application
added a stack trace depth constant to the ` getThreadInfo ` method in ` CachedThreadStatesGaugeSet ` and ` ThreadStatesGaugeSetTest
added a protected field ` prevTlogOnPrecommit ` and modified sleep durations in ` LeaderTragicEventTest ` to
updated the FastAsyncWorldEdit library version from P2 - V6 to 1. 17 to ensure compatibility with the latest version of the latest
added null check for path and improved error handling for file existence to enhance robustness and prevent potential NullPointerExceptions
added methods to calculate normal vectors in ObjUtils and updated TriangulationHelper to use this new method to improve code readability and maintainability by
updated find method to accept identity zone ID as a parameter to enhance flexibility by allowing dynamic identification of audit events based on the identity zone
updated SpanCollector class to improve performance to optimize data processing efficiency
added a null check for the current session in AuthorizationFilter. java to ensure that only valid executions of the session are processed
refactor TransactionIsolationLevel class to improve code readability to enhance maintainability and facilitate future updates
corrected method names from ` printLVgroups ` to ` printLogicalVolumegroups ` to ensure consistency in naming conventions for logical volume
added thread name handling in TestSession. java to improve clarity of thread identification during testing
refactor CookieManager to improve cookie management to enhance security and maintainability of cookie management
replaced the instantiation of ` ar ` with a return statement returning ` new ArrayList < > ( ) ` to simplify the code and improve readability by
added a new OverviewToAllAppsTouchController to the list to enable interaction with the All Apps TouchController in the list
refactor methods to retrieve hotseat scale and translation in LauncherState and WorkspaceStateTransitionAnimation to improve code clarity and maintainability by centralizing
added a check for JUnitRule class in DefaultStackTraceCleaner and created a test for filtering elements above MockitoJUnitRule in StackTraceFilterTest
replaced usage of BufferUtil constants with direct buffer usage to improve memory efficiency and maintainability by using direct buffer implementations
added a private BalanceListener to the walletService to manage balance listeners more effectively
added edge mode check before setting color values in RealisticRenderer to ensure color values are only set when the edge mode is stander
added null check for httpClientResponse in HttpClientBeanPostProcessor and updated Log initialization in multiple test classes to ensure robustness by preventing potential NullPointerExceptions
remove unused import of PatternUtil in Gl200ProtocolDecoder. java to streamline code by eliminating unnecessary imports
refactor playback timing logic in FullDetailsActivity. java to improve clarity and maintainability of playback event checks
added methods to check if an elliptic node is present in SpanishXMLTreeReader to improve handling of elliptic tokens
clear the language DC if the value is an empty string to ensure proper handling of empty values in the item
updated the handling of the HTTP override scheme in ReactiveLoadBalancerClientFilter and added a test for it in ReactiveLoadBalancerClientFilterTests to
( chore ) camel - core : fix memory leak in defaultmessagestore
changed the visibility of ` fullFilePathFromClassName ` from final to non - final in ` DebugInfoBase ` and ` NativeImageDebugInfo
refactor the return statement in ShadowBackupManagerTest to use a lambda expression to improve code readability and maintainability
updated references from ` isNonUSLangSupported ( ) ` to ` isNonENSupported ( ) ` across multiple files to improve clarity and
simplified null check for redeemData in LocalTransactionSigner. java to improve code readability and maintainability
added a new file MinecraftForgeClient. java for Minecraft rendering to enable custom rendering of terrain textures in Minecraft forge clients
added a return statement in TxCacheDB. java to ensure proper execution of operations
updated import statements from ` sun. xml. internal. ws ` to ` jdk. internal. org. objectweb. asm ` to ensure
refactor FastDictionary class to improve performance to optimize data processing efficiency
fix for http : / / issues. apache. org / bugzilla / show _ bug. cgi? id = 4
updated FlightEvent types for GROUND _ HIT, GROUND _ HIT, SIMULATION _ END, and TUMB
[ beam ] update grpc dependency to v1p26p0.
replace target. addNamespaceDeclaration with newElement. addNamespaceDeclaration to ensure the namespace declaration is added to the correct element
updated methods in InstructorFeedbackResultsPageData to use getStudentProfilePictureLink instead of getProfilePictureLink to improve clarity and maintainability of
added support for short password rules in DefaultPasswordValidator to enhance password validation by allowing alphabetic and numeric sequences
added a new Command class and updated return values in RemoteControlConfiguration and SeleniumDriverResourceHandler to improve code organization and maintainability by standardizing
removed the @ Test annotation from ProxyClassSerializationTest. java to simplify test execution by eliminating unnecessary dependencies
updated thumbnail ratio argument format in DLNAMediaInfo. java to improve thumbnail representation accuracy
add canonicalization phase to truffle compilation test.
added condition to exclude aliasing of AUTHENTICATION _ MANAGER in AuthenticationManagerBeanDefinitionParser to ensure that multiple authentication managers inherit from the same namespace
added handling for PortSetHostPort in ForwardedRequestCustomizer and updated test cases in ForwardedRequestCustomizerTest to ensure proper handling of forwarded
added a line to reset the StringBuilder to zero to ensure the StringBuilder is cleared before use
changed access modifiers of allowedRoles and disallowedRoles from private to protected to allow subclasses to access and override functionality
updated OpenIDE - Module - Specification - Version from 1.2. 54 to 1.2. 67 in project. properties and project. properties to reflect the
hbase. server. netty. tls. wrapsize be configurable by hbase. server. netty. tls. wrapsize.
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
added unit tests for FixedLengthTokenizerTests to ensure correct error handling and tokenization logic
added a method to set the protocol binding in OpenSamlAuthenticationRequestFactory and created corresponding test cases in OpenSamlAuthenticationRequestFactoryTests
refactor surface control transaction handling in DepthController. java to improve clarity and maintainability of surface management
updated version check from " - SNAPSHOT " to " 2.0. 5. x " to ensure compatibility with the latest releases
updated bulk load action from WRITE to CREATE in AccessController. java to ensure proper bulk load operations in the application
updated unSeqMergeList initialization and adjusted measurement IDs in MergeTaskTest. java to ensure correct handling of unseq compaction data and improve measurement
camel - 7999 : fixed fileinputstream to work with java. io. file.
added a build method to DefaultShardManagerBuilder and updated ShardManager to conditionally login based on the presence of a login flag to enhance security by
removed unnecessary whitespace in DeleteGlobalRef method to improve code readability and maintain consistency
updated the table name from " RegisteredServiceImpl _ Properties " to " RegisteredServiceImpl _ Props " to reflect the correct naming convention for the Registered
modified the response completion logic in HttpSender. java to check if the completion flag is marked before terminating the exchange to ensure that the exchange terminates
added a condition to check if the user is a student based on the giver status to ensure that the giver status accurately reflects
added security checks for linked profile settings in BMPImageReader. java to enhance security by ensuring only valid profile paths are processed
updated the calculation of the world coordinates in ClassicPlotManager. java to correct the calculation for world coordinates
added a wait message to the PMDOpenTool class and wrapped the actionPerformed method in a Runnable to improve user experience by providing informative feedback
refactor gridPresenter initialization to use a dedicated method for setting poster sizes to improve code readability and maintainability by encapsulating gridPresenter logic
updated return values from false to true in ContributionsListFragment. java to ensure correct representation of contributions in the UI
added a test for skipping distinct prefixes in ` DistinctPrefixFilterIT. java ` and modified filtering logic in ` BaseResultIterators.
added a test method for acrobat checkbox properties in PDButtonTest. java to ensure correct handling of checkbox properties in the acrobat
added a method ` getFileLastModified ( String file ) ` to ` BlackBerryImplementation ` to retrieve the last modified timestamp of a file
added a condition to validate metadata table properties in HiveIcebergStorageHandler to ensure that only valid metadata tables are processed
replaced TextField with ComboBox for currency selection in CashDepositForm. java to improve user experience by allowing users to select a default currency
changed exception handling from IOException to Throwable in WriteFlusher. java to improve error handling by catching more specific exceptions
added a boolean flag ` mStartedEnterAnimation ` and modified conditional logic in ` IconRecentsView. java ` to ensure animations are only
added a new public String field ` activeKeyId ` to the UaaConfiguration class to enable tracking of the activeKeyId for improved configuration management
rename sendmail to sendattachmentmessageactionlabel and sendattachmentmessageactiondescription
changed the ` isActive ` variable from non - volatile to volatile to ensure thread - safe access to the ` isActive ` variable
removed the method ` isDesc ( ) ` from ` OrderByExpressionContext ` and updated assertions in ` SelectionPartiallyOrderedByDescOperation
use ` ` char [ ]'' instead of ` ` char [ ]'' for string. tostring ( )
added a condition to check if the app name is equal to " ownCloud " in DisplayUtils. java to ensure the app name is valid
hbase. rootdir. perms should be configurable in hbase - site. xml
updated method calls from ` httpServletRequest ` to ` httpServletResponse ` in JakartaServletWebExchange and JavaxServletWeb
refactor Instant class to improve readability to enhance maintainability and facilitate future updates
updated getStateFormat method to return String instead of int for default state format to ensure consistent representation of state format in the collection
updated type handling in CentralAuthenticationServiceImpl. java and modified conditional checks in AbstractTicket. java to improve clarity and correctness of ticket type checks
pdfbox - 4892 : check for iae instead of profiledataexception, a suggest by valerybokov
removed trailing slash from file name check in AbstractFileResourceSet. java to ensure only valid file names are processed
[ mng - 4441 ] avoid npe in pluginparameterexpressionevaluator ( # 4442 )
[ beam - 8470 ] move protobufcoder to extensions / protobuf ( # 1791 )
updated JpaQueryParsingToken to include a boolean parameter in HqlQueryRenderer and added a new test for signed numeric literals to enhance query parsing
updated the ` generateLaunchLugFromRASAeroRailGuide ` method to accept a parent length and adjusted its properties accordingly to
removed the getNonceFactory method from BitmexStreamingExchange to simplify the code by eliminating unnecessary complexity
( chore ) camel - mail : improve log message formatting
[ java ] use default timeout ns for test.
changed the initialization of classes from true to false in FastClasspathScanner and ScanSpec classes to disable loading of classes during classpath scanning
added functionality to grab focus in FullTextSearchPanel to improve user experience by ensuring focus is properly managed
replaced the declaration of ` NioParams ` with ` NioParams ` for setting SSL engine configuration to improve code readability and maintainability by using a
removed an assertion that returns a double value from the ResultSet to simplify the test by eliminating unnecessary assertions
updated the assertion to check for expected values in TestSolrConfigHandler. java to ensure that the expected value is correctly retrieved from the server and
replaced HttpMethod with ServerHttpRequest and ServerWebExchange mocks in CsrfWebFilterTests to improve test reliability and maintainability by using a more
updated density string handling in FilterResourcesStep. java to ensure consistent formatting for density values
added a new variable ` buttonUIID ` and ` elementPrefix ` in ` ComponentGroup. java ` to improve clarity and maintainability of
removed DENSITY _ 600 from the conditional check in RecentsAnimationDeviceState. java to simplify the condition for better readability and maintainability
added two new files ` TestCloneArrayWithDifferentLengthConstness. java ` and ` TestArrayCopyWithLargeObjectAlignment. java `
added import for LuceneTestCase and annotated ReplicationFactorTest with @ AwaitsFix to address a known issue related to SOLR - 6157
fixed - nullpointerexception in redissonexecutorservice # schedule ( ) method
updated the condition for ` needsToUpdateCredentials ` in ` FileDownloader ` and ` FileUploader ` classes to ensure proper handling of credential updates based
added null check for the StoreFileScanner before closing it to ensure proper resource management and prevent potential memory leaks
replaced calls to get ( ) with getOrDefault ( ) in NetMetrics. java to ensure default values are set when retrieving metrics
added nonce handling in TokenMvcMockTests to ensure that nonce values are correctly retrieved from the token
refactor multiple ChartEditor, ChartEditorFactory, ChartEditorManager, DefaultAxisEditor, DefaultChartEditor, DefaultChartEditorFactory, DefaultColor
added width and height settings to formLayeredPane to ensure proper layout of the form layered pane
added a method ` maxY ` to calculate the height of the owner to ensure that the owner's height does not exceed its defined height
changed the return type of openSharedDatabase method from void to boolean and updated its implementation accordingly to improve database connection handling and ensure correct database status
replaced direct calls to ` execute ` with a static method ` execute ` in ` Platform. DOCKER _ COMMAND ` to improve code readability and
added a null check for the input stream before reading lines in TestIsartorValidationFromClasspath. java to prevent potential NullPointerExceptions when
updated drawLeaveBehind method to accept a color parameter to enhance flexibility by allowing customizable folder leave behind colors
add a new method to report the version of the Flutter plugin compatibility to inform users that the plugin does not work properly with the latest version
added a null check for the IdentityProxy table name before retrieving its UUID to avoid potential NullPointerExceptions when the identity proxy table name is not
added getter and setter methods for module persistence options in StartArgs. java to enhance functionality for enabling and disabling module persistence in the application
updated argument handling logic in GeminiMarketDataService. java to ensure correct argument validation for last trade time
replaced HashSet with LinkedHashSet in VerifyPasswordResetRequestAction. java to ensure predictable iteration order for questions
added a new class ` TesterResponse ` and a test class ` TestRealmBase ` for testing security constraints to facilitate the handling of
updated exclusion URLs in AuthCheckFilter. java to ensure proper exclusion of JSP files during authentication
refactor scheduled runnable execution logic into a separate method ` runOrQueueRunnable ` to improve code readability and maintainability by reducing duplication
updated method signatures in AbstractCommandRunner, AuditCommandRunner, CommandRunner, and AuditCommandRunner to use varargs instead of String [ ] to
refactor character reading logic in XMLParser. java to ensure proper handling of characters to prevent parsing errors
added a new test method ` testHorizPageOverflowHidden ` to ` TextVisualRegressionTest. java ` to address issues with overflow pages
added pivot properties for mArrow in DeepShortcutsContainer to improve arrow positioning based on icon presence
removed printStackTrace ( ) calls from JabRefExecutorService and FileUpdateMonitor to simplify exception handling and improve logging clarity
refactor condition checks and update thumbnail logic in AbsSwipeUpHandler. java to improve clarity and maintainability of the code
pdfbox - 4071 : fix usage message, a suggest by valerybokov
added a boolean parameter to the InternetAddress constructor and modified validation logic in HostnameFormatSpecifier to enhance input validation and improve error handling for invalid
removed references to ` DrawerActivity ` and ` SyncedFoldersActivity ` in multiple activities to streamline code by eliminating unnecessary references to `
replaced counter variable with a constant for maximum document ID across multiple classes to improve code readability and maintainability by using a named counter
added overloaded ` promptToOpenFile ` methods to ` FileDialoger ` for better file handling to improve flexibility in prompting opening files based
updated widget span settings and refactored page counting logic in AppsCustomizePagedView. java to improve widget management and ensure accurate page
added handling for instance context updates in FlightConfiguration. java to ensure correct component bounds are applied based on active instances
( chore ) camel - micrometer : fix typo
updated DateTimeFormatter to use Locale. ROOT for default date time format to ensure consistent formatting across different locales
added permission filtering functionality to DSpaceObjectConverter to enhance object retrieval by filtering metadata based on context
added a new test method ` testMissingRequired ` to ` TestStarTreeConfig ` to ensure that the configuration of ` StarTreeConfig `
added a new parameter element to the recipientList method in FromBuilder. java and updated SpringRouteBuilderTest. java to enhance functionality by allowing dynamic
refactor InlineLayoutBox handling and improve repaint handling in HoverListener and InlineLayoutBoxTests to enhance layout management and ensure proper repaint behavior based
refactor AuthenticatorActivity to use OperationsService instead of DetectAuthenticationMethodOperation for better service management to improve code maintainability and facilitate better
