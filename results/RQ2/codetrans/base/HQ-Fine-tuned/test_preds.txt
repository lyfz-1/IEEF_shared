updated SocketAppender instantiation to set remote host and port to ensure proper configuration of the socket appender
refactor header handling in BasicAuthPlugin to use a dedicated method for setting prompt headers to improve code readability and maintainability by centralizing header
updated method call from ` RecordDescriptor . msgLengthOffset ` to ` msgLengthOffset ` in ` ManyToOneRingBuffer . java ` to
updated the logic for determining CPU and RAM overcommit ratio in CapacityManagerImpl . java to ensure correct handling of overcommit ratio based on
added an ` flags ` field and its getter method in ` ShadowPaint ` and updated related tests in ` PaintTest ` to support antialiasing
updated title in MassSetFieldsDialog to use localization for field management to improve user experience by providing more informative title for field management
modified the condition for reporting no bugs in DetectorsTest . java to improve error handling and provide clearer feedback when Eclipse is not
updated nonce check in Realm . java and modified NettyAsyncHttpProvider . java to check for empty nonces to ensure nonces are not
added a ` RemoteInputListener ` interface and a ` onConnected ` method to manage connection state to improve the handling of connection state during remote input
reformatted conditional statements in OrcEncodedDataReader . java for consistency to improve code readability and maintainability
updated filtering logic in HomeConnectBridgeHandler to check if a home connection thing is enabled to ensure that home connection items are only processed when enabled
added null checks before calling AuthorizeManager . removeAllPolicies and AuthorizeManager . addPolicies to avoid potential NullPointerExceptions when bs is null
refactor assertions in DefaultTypeAdaptersTest and ObjectTest to use matches instead of isEqualTo for Java 9 or later to improve code readability and
added JSON representation of the DAG information in TezTask . java to provide users with detailed dag information for better debugging
added methods to calculate header and tag time in ComputedSummary and HprofHeap classes to improve accuracy of time calculation by using header and heap time
updated the method for retrieving upload count in ContributionsActivity and removed the RxJava2Tasks class to streamline the code and eliminate redundancy
removed redundant conditional checks for lockMode in MVTable . java to simplify the code and improve readability
[ issue # 4985 ] fix max message size constraint ( # 4989 )
added a null check for the folder before accessing it in Launcher . java to prevent potential null pointer exceptions when the folder is not open
added a new test method ` testSortOrder ` to validate the ordering of PGProperty values in ascending order to ensure that PGProperty names are correctly sorted
removed the constant HOVER _ MESSAGE _ EVALUATION _ POINTS _ GIVEN from Common . java to streamline the code
updated method signatures to use ItemInfo instead of Object to improve type safety and avoid potential NullPointerExceptions
updated assertions in RequestBuilderTest to use ` assertThat ( e . getMessage ( ) ) . isIn ( ) ` instead of ` hasMessage ( )
refactor NearbyActivity to use NearbyListFragment instead of RetainedFragment for fragment creation to improve code clarity and maintainability
updated the parameter name from ' status ' to ' sessionStatus ' in FlatProfileContainerFree . java to improve clarity and consistency in parameter naming
added a new boolean field ` sendZeroAnomalyEmail ` and its getter and setter in ` EmailConfiguration ` to allow users to send zero
[ hotfix ] [ kafka ] fix checkstyle violation in flinkkafkaconsumerbase
added methods ` getUser ` and ` getGeofence ` to retrieve users , geofences , and geofencing from the database to
added a new constructor to BlockingResponseListener that accepts a maximum length of 2 MB to allow for a maximum request size of 2 MB
refactor member broadcast handling in McastService and McastServiceImpl to use byte arrays instead of ChannelData arrays to improve data handling efficiency and
[ hotfix ] [ coordination ] fix resource leak in multileaderserverimpl
updated URL formatting in LoginSAMLAuthenticationFailureHandlerTest . java to improve code readability and maintain consistency
refactor ConfigMetadataProviderTest . java for improved readability to enhance maintainability and facilitate future updates
removed unused imports and updated method signatures in ListFragment and SnoozeActivity to streamline imports and improve code clarity
added a new ` AcceptAllFilter ` class and refactored directory stream handling in ` Files ` and ` WindowsDirectoryStream ` to improve
refactor JdbcTestDataSet class to improve code readability to enhance maintainability and facilitate future updates
updated the ` lookupType ` method to throw ` ClassNotFoundException ` and added exception handling for ` NoClassDefFoundError ` to improve error handling
added validation for Docker image names in GenericContainer . java and created new DockerImageName . java , along with a new DockerImageNameTest .
updated message messages from ` login _ failed _ username ` and ` login _ failed _ password ` to ` login _ failed _ wrong _ credentials `
added ` setAutofocus ( " autofocus " ) ` method to multiple form classes to enhance user experience by enabling focus focus during form updates
added unit tests for SAML configuration and configuration in SamlIDPRefreshMockMvcTests to ensure correct handling of SAML configurations in the IdentityZone
added checks for empty and non - digit lists in ComparableVersion . java and updated test cases in ComparableVersionTest . java to ensure proper handling of
updated Sheet . java to replace topLeftMode and topRightMode with bottomRightMode and adjusted preferred dimensions to ensure correct layout rendering based on
updated import statements and package structure for ParallelUniverse in RobolectricTestRunner , ParallelUniverseTest , and ParallelUniverseTest classes to align ParallelUniverse
updated method return type handling in LocalCacheFactory and NodeFactory to use a new factory _ CALL variable to improve code clarity and maintainability by
changed the fill pattern from SOLID _ FILL to SOLID _ FOREGROUND in FrillsAndFills . java to
added methods to draw self loops based on the graph ' s showEdges ( ) and graph ' s self loops in ProcessingPreview . java
updated ALLOW _ TVM _ SOLIDITY _ 0 _ 5 _ 10 to ALLOW _ TVM _ SOLIDITY _
rename the method ` addManaged ` to ` manage ` in the ` DropwizardAppRule ` class to improve clarity and consistency in naming conventions
set the drag handle position to 0 in the AllAppsTransitionController to ensure the drag handle indicator reflects the correct positioning of the launcher
removed duplicate log messages in CollectionViewer , CommunityViewer , and ItemViewer to streamline logging output for better readability and maintainability
updated the configuration message for pushing filters down in the operator tree during query optimization to provide clearer guidance on how filters are pushed down in the operator
added an assumption to check if the build server is not OSX before proceeding with the ScanningAppProviderRuntimeUpdatesTest to ensure that the
added Maven bundles for Jetty ALPN client in TestJettyOSGiAnnotationParser . java to ensure compatibility with Jetty '
do n ' t retry async job if it do n ' t have a lock
refactor Transaction class to improve code readability to enhance maintainability and facilitate future updates
updated GenruleBuildable to exclude Genrule execution from rule key to ensure Genrule execution is not relevant to artifact caching
added a method to retrieve the executable file based on a specified command path in AsyncExecute . java and modified FirefoxCustomProfileLauncher . java to
added a check to ensure the existence of the named column in colFamToDynamicColumnsMapping is only created when it does not already exist to
[ hotfix ] [ python ] fix npe in hadooptupleunwrappingiterator
phoenix - 164 add support for view view in phoenix - core ( jesus camacho rodriguez
updated import statements and added a method to update student attributes in AccountsLogic . java to improve code clarity and ensure student attributes are updated correctly when
removed the import of TestCellReference from AllXSSFTests . java to streamline the code by eliminating unnecessary dependencies
fix lens piston to use block . getblockhardness ( worldobj , pos ) instead of block . getblockhardness (
added a new file LongPointerPressTest3049 . java to implement a test for long - pointer press functionality to ensure proper handling of network errors
truffle : do n ' t use trufflecompileroptions . getValue ( trufflecompileroptions ) .
refactor null checks in BaseBuilder , ResultSetType , and XMLConfigBuilder to improve code readability and maintainability
removed unnecessary check for ` matched instanceof ` in ` ListBlockParser ` and added a new test for deeply indented lists in ` SpecialInputTest
added a new abstract class ` AbstractOptionalAssert ` and refactored ` OptionalAssert ` to remove the ` OptionalAssert ` class to simplify the
added JUnit @ Ignore annotation to WebfluxNotIncludedTests . java to temporarily disable tests due to issue # 1070
removed the ` NativeString ` annotation from the ` saveMessage ` method in ` TestCaseLogger . java ` to simplify the method signature and eliminate unnecessary
updated formatting in RouteStartupOrderLastTest . java to improve code readability and maintain consistency
added a condition to check if the video format is a video format before executing web subs to ensure that web subtitles are only processed when the
added Security . setProperty ( " jdk . tls . disabledAlgorithms " , " " ) to ComHostnameVerifier and JavaxHostnameVerifier to disable
cloudstack - 5292 : do n ' t allow vms that have local storage ( cloudstack - 5292 )
updated logging statements in Driver . java and QueryResultsCache . java to include cache entry information to improve debugging by providing more context about cache entries
added a ` maybeUpdateModel ( ) ` option to the ` AddManagedDependency ` and ` ManageDependencies ` classes to skip updating the model
added a test method ` send ` to ` ShadowActivityTest ` and implemented intent sending functionality in ` ShadowPendingIntent ` to ensure correct behavior of
refactor GLJPanel initialization and graphics configuration in RocketFigure3d . java to enable and disable FBO functionality to improve rendering efficiency and
refactor HydrawiseAccountHandler to use synchronized lists for listener management to improve thread safety and ensure thread safety during listener removal
added a ` @ BeforeClass ` annotation to ` TestCoreAdminApis ` and a test method to check for Java 9 compatibility to ensure that EasyMock
updated year retrieval logic in TimestampUtils and added a new LOCAL _ TIME _ FORMATTER in SetObject310Test to improve date handling accuracy and
add null check before disconnecting the connection in ProtocolProviderServiceJabberImpl . java to avoid potential NullPointerException when the connection is not initialized
updated the variable name from " cur _ ws _ commit _ id " to " cur _ ws _ commit _ id cur _ ws _ commit _
refactor BufferedInputFilter to use ByteBuffer instead of ByteChunk for better memory management to improve performance and maintainability of the buffer handling logic
added a method ` toSync ` to convert ` CompletableFuture < T > ` to ` T ` and created a corresponding test class ` AsyncUtils
added ActionGraphBuilder imports and updated method signatures to include ActionGraphBuilder in multiple compiler factories to enhance action graph management and improve code clarity
added a new test method ` testUploadingWithHiddenFileInput ` to ` UploadTest . java ` to verify upload functionality with hidden file inputs
removed redundant try - catch block for creating tables in SQLManager . java to streamline code and improve readability
added a check to return a local Maven directory if the file does not exist to ensure the correct directory is used when the file does not exist
do n ' t show algebra label if there be no hidden prefix
added null checks for the metadata map in CtElementImpl . java and updated assertions in MetadataTest . java to ensure robustness by preventing null
replaced ` setFlags ` with ` addFlag ` in ` DefaultTrackOutput . java ` to improve code clarity and maintainability by using a more
added a condition to check if the cached entity is sorted by ID before proceeding to ensure proper sorting behavior when the entity can be reordered
updated error message from " Method call not specified for verify ( mock ) here : " to " Missing method call here : " to clarify the purpose
added null check for backupFolder before logging expire information to prevent potential NullPointerException when accessing backupFolder
added a new file ` ArrayNewInstanceOfVoid . java ` implementing a test for Array . newInstance ( void , int ) to demonstrate the functionality of
added @ AddToRuleKey annotation to ToolType fields in ClangCompiler and GccCompiler classes to ensure toolType is added to rule key
updated the timeout logic in PinCheck . java to use a constant for PINCODE _ TIMEOUT to improve code readability and maintainability by
Implement the ` isSampled ( ) ` method in ` PrometheusMeterRegistryTest ` and ` PrometheusExemplars
removed @ Ignore annotations from multiple test classes to clean up code and improve maintainability
updated import statements and modified assertions in ConsumeUncompressedCompressedMessageTest . java to improve readability and maintainability of the test code
updated the condition to check if the mdTable is not an artifical table to ensure proper handling of artifical tables in the metadata processing
hbase - 13232 fix fileoutputcommittercontainer and launchmapper to use isdir instead of file . isfile ( )
refactor session attribute handling in MongoSessionManager . java to improve clarity and correctness to enhance code readability and prevent potential null pointer exceptions
replace setFixedSize ( 320 , 240 ) with setSizeFromLayout ( ) in CameraSurfaceView . java to improve layout responsiveness by
added null check for CountDownLatch before calling countDown ( ) in AbstractConnector . java to avoid potential NullPointerException when stopping is not initialized
removed unnecessary whitespace in the constructor signature of HuobiStreamingService . java to improve code readability and maintain consistency
camel - 14263 : camel - message - history should use system . currentTimeMillis ( ) instead of camel . util . stopwatch
refactor subscribe calls in DelayedMonoPublisherTest to streamline exception handling to improve code readability and maintainability by reducing redundancy
updated assertion in WebsocketTest to check if the error is an instance of WebSocketHandshakeException before verifying its type to improve error handling by ensuring
added the ` View . OnLayoutChangeListener ` interface to the ` AllAppsTransitionController ` class and updated the ` addOnLayoutChangeListener `
refactor variable names from ` theHandler ` to ` handler ` in PolicyBasedAuthenticationManager . java to improve clarity and consistency in naming conventions
int - 132 add default - output - channel attribute to xpathrouterparser to allow xpathrouter to set a default output channel
updated cacheSeconds from int to String and added DurationCapable annotation in MessageBundleProperties and CasCoreWebConfiguration to allow longer cache durations
updated openapi format from ' 3.0 - rc1 ' to ' 3.0 . 0 ' across multiple Java files to ensure compatibility with the
removed the call to append ( buffer , true ) in ByteBufferPool . java to simplify the append method for better performance
added a check for the presence of the alt - rt . jar in the boot class path and implemented a method to skip test execution if it detect
updated user names from ' jo @ FOO . COM ' to ' jonah @ EXAMPLE . COM ' in JdbcSc
updated FlightRecorderProfiler to return a list of options instead of a list of strings to improve flexibility in configuration options for different Java versions
added a method ` isStreamEmpty ( ) ` to ` WebCamInputPanel ` and modified the image drop logic in ` WebcamInput
added a condition to check if the content view has content before processing the buffer in HttpParser . java and implemented a new test for chunked PUT
refactor AtmosEndpoint class to improve code readability to enhance maintainability and facilitate future updates
added support for " printf " and " print " methods in Java2TypeScriptAdapter . java to enhance method handling to support additional output formats
added a new file TestCapacityUntilGCWrapAround . java to test the metaspace capacity calculation on 32 - bit platforms to ensure that the
updated package - info . java files for mmm and ppp packages to improve package documentation clarity and maintainability
added logic to calculate the end time based on the result ' s time stamped at start to ensure correct calculation of the end time based on the
added a new test class ` ErrorHandlerAdviceIssueTest ` to validate the behavior of error handler advices to ensure correct behavior of error handling in
updated warning handling in JPEGImageReader to use ` processWarningOccurred ` instead of ` throw IIOException ` to improve clarity and accuracy of warning messages
fix tornado rod not be reequip animation , close # 323
added a conditional check to exclude configuration and environment classes before registering bean registration in SpringModule and JoobyExtension to improve flexibility in bean registration
refactor WebappLoader to use the container ' s parent class loader instead of the current thread ' s parent class loader to improve code clarity and
add support for additional name update properties in NameUpdater . java to enhance name update functionality to support additional name updates
added a variable ` started ` to the ` EllipsoidRegionSelector ` class to track the starting state of the ellipsoid region
updated URLs from " http " to " https " for codenameone protocols in JavaSEPort . java to ensure compatibility with the new
[ geos - 8071 ] validate sort by parameter in getfeature . ( # 1179 )
removed unnecessary null check for grantTuple [ 0 ] in AbstractJdbc2DatabaseMetaData . java to simplify code and improve readability
updated image rendering logic in DiagramGenerationTest . java to use compatibleImage instead of expectedImage to ensure that the image is displayed in the correct
add a null check for sidedDelegate in FMLCommonHandler . java to prevent potential NullPointerException when attempting to install FML on top of
refactor DataUtilities and ReTypeFeatureReader classes to improve code organization and maintainability
refactor LockTest to use CountDownLatch for better clarity and consistency to improve code readability and maintainability by using a more descriptive variable name
added methods to tokenize a whole word and join tokens in StringUtil . java to enhance tokenization functionality for better user experience
refactor error handling in CoyoteAdapter to use ` response . sendError ( 404 , " Not found " ) ` instead of ` res
refactor command handling in SystemHighlighter to improve clarity and functionality to enhance maintainability and readability of the code
updated version string and version date from " 2012 - 07 - 14 " to " PENDING " and set version date to " PENDING " to
updated buffer position assignment from ` idx ` to ` dimensionSize ` in ` StarTreeRecordStoreCircularBufferImpl . java ` to ensure accurate position
added drag - and - drop handling functionality to SystemUiProxy and updated related classes to enhance drag - and - drop functionality and improve code clarity
added a new test method ` testSocketTrafficClass ` to ` SecureSocketAppenderSocketOptionsTest ` and ` SocketAppenderSocketOptionsTest ` to
added a new cipher type " PSK - AES256 - GCM - SHA384 + TLSv1 . 2 " in TestCipher .
updated description retrieval method from ` getDescription ( ) . getText ( ) ` to ` getLongDescription ( ) ` in ` NearbyMapFragment .
added JsonProperty annotation to ScimGroupMember . java to enable JSON serialization of the group member data
updated HqlQueryRenderer to handle reserved words and added a new test for schema scoping in HqlQueryRendererTests to enhance query parsing
corrected the spelling of " d " to " s " in ObjectHelper . requireNonNull to improve code readability and maintain consistency
refactor Parser class to improve code readability to enhance maintainability and facilitate future updates
updated the ` offsetStreamIndex ` method to include a new parameter ` indexStartsAtOne ` and adjusted related logic to improve track index handling
updated magic decoding logic in MagicDetector . java and added new test cases in TestMimeTypes . java to ensure correct handling of specific content types and
[ hotfix ] [ table - planner - blink ] remove unused method in flinksqloperatortable
added inheritance methods for equality and toString methods in OneTimeTokenAccount and OneTimeToken classes to enhance object comparison and hashing capabilities for better object
added a condition to check if the assistant is not launched before flinging to ensure that fling only occurs when the assistant is not launched
added a new file SolarisShortDSA . java that tests the DSA signature using KeyPair to ensure compatibility with Solaris ' s D
added a call to toggleSearchLabel ( false ) in ListFragment . java to disable the search label toggle functionality
cloudstack - 6417 : lock volume lock before create snapshot
refactor ServiceConnection initialization to use a new class DetailsServiceConnection and add null check for mConnection to improve code clarity and prevent potential NullPointerException
refactored exception handling in HttpClientTLSTest to use AtomicReference for throwable to improve code readability and maintainability by centralizing error handling logic
removed the equals method from ConjunctionScorer . java to streamline the code by eliminating unnecessary complexity
added a null check for the variable ' v ' in Launcher . java to prevent potential NullPointerException when binding items fail
added a new method ` GetRaftGroupIdsOp ` and modified ` CPMemberAddRemoveTest ` to use ` getMetadataGroupId ` instead of
updated cache size calculation in DefaultCache . java to use a desired size instead of a hardcoded value to ensure the cache shrinks to a
updated API endpoints from v2 to v3 and updated related methods in CryptoFacilities and CryptoFacilitiesAuthenticated classes to ensure
added an empty method ` empty ( ) ` to the ` freenect2 ` class to check if the list is empty to provide a way
drill - 8023 , drill - 8416 , drill - 8023 , drill - 8023 , drill - 8416 , drill - 8023
added a new parameter ` accountSubscribe ` to the ` buildChannelName ` method and improved argument validation in ` SerumStreamingService . java `
add a config option to disable the charge animation when an item is charging on top of a mana pool .
[ java ] : add egress subscription . isConnected ( ) to the error message when a timeout occur .
added error logging for InterruptedException in WaitForHelper . java to improve error handling and provide clearer error messages
refactor test assertions in DefaultServletTest to use JUnit ' s Assume . assumeTrue for directory creation to improve code clarity and maintainability by
reformatted style injection calls in ResourcesInjectorFull . java to improve code readability and maintainability
replaced ` String ` with ` FileResource ` in ` BaseLiquibaseTask ` , ` OutputFile ` , and ` DBDocTask `
fix blockworldvector . equals ( ) to use getx ( ) and getz ( ) instead of gety ( ) .
refactor LongConcurrentLRUMap to use a final modifier for key and value fields to enhance immutability and enforce immutability of the
updated regex handling in ReflectionProcessor to use Pattern . quote for string literals to ensure proper handling of literals in resource configuration
updated the method for retrieving the KRB5CCNAME and modified arguments in FileCredentialsCache . java and EmptyCC . java to improve cache retrieval
updated the database path in ValidateMultiSignContractTest from " output _ PrecompiledContracts _ test " to " output _ ValidateMultiSignContract
[ p2p ] fix checkstyle issue in protocolmanager
removed unnecessary whitespace in sessionLogHandler attachToCurrentThread method call to improve code readability and maintain consistency
added a condition to return false if the expression is not an instance of GeoSegment to prevent expansion of segment arrays in geoformat expressions
added a check to clear pendingRenderingOperations if it exceeds 20000 and minimized to ensure pending rendering operations are cleared only when minimized and minimize
do n ' t try to sleep if the deadline do n ' t exist
fix concurrency issue in writebehind queue ( # 13377 )
added a call to set the icon of the JLabel in GroupTreeCellRenderer to nullify the icon for better readability and performance
changed test methods from ` testRedirectMatches _ strict ` to ` testRedirectMatches _ nonstrict ` and ` testRedirectMatches _ nonstrict `
added close method to ShutdownMonitor and updated test methods in ShutdownMonitorTest to improve resource management and ensure correct behavior of the ShutdownMonitor
updated the calculation of moveSize and adjusted the fillRate logic in RandomAccessStore . java to improve memory management and ensure correct chunk handling based on
refactor field retrieval logic to use a new method ` readFields ` and introduce a new method ` readFields ` to improve code readability and
[ hotfix ] [ coordination ] refactor componentclosingutils to use futureutils . ortimeout
cloudstack - 5292 : delete volume when vm be in error state while create snapshot
updated the method call from ` getIpv6Range ( ) ` to ` getIpv6RangeFromCidr ( ) ` to ensure correct
rename ` InitializeUserDetailsManagerConfigurer ` to ` InitializeAuthenticationProviderManagerConfigurer ` and update references accordingly to improve clarity and consistency in naming conventions
increased the retry timeout from 15 seconds to 30 seconds in the CollectionsAPIDistributedZkTest . java file to allow more time for the leader retrieval
refactor error message formatting across multiple parameter classes to remove unnecessary string concatenation to improve code readability and maintainability by reducing redundancy
updated drawImage calls to use - x and - y coordinates instead of - x to ensure correct rendering of images in the correct position
updated condition from ` solrDocument1 ` to ` solrDocument2 ` in ` SolrTestCaseJ4 . java ` to ensure correct comparison of field
refactor exception handling in SetFunDef . java by introducing a new method isItemZeroHighCardDim to improve code readability and maintainability
[ hotfix ] [ stream ] add exception parameter to streamtaskexception
refactor tag parsing logic in Preprocess . java to improve code clarity and maintainability to enhance readability and maintainability of the code
updated the formatting of the ` read ` method in ` MessagePack . java ` to improve code readability and maintain consistency
added a new annotation ` Mapper ` in the ` org . apache . ibatis . annotations ` package to provide a mechanism for defining the ` Mapper `
added a condition to check if the extension list supports FhirComment and updated the conditional check in JsonParser to ensure proper handling of empty extensions and comments
updated regex patterns in Artifact . java and added checks for external meta entries in LibraryManager . java to improve code clarity and ensure proper handling of external
added an alias for the " node _ popup _ scripting " entry in ScriptingMenuEntryVisitor . java to enhance the functionality of the Scripting menu
removed HIDDEN _ FOCUSED _ SCROLL and HIDDEN _ SPLIT _ SCREEN constants from OverviewActionsView
camel - 14263 : camel - jms should use getout ( java . lang . message . jmsmessage ) instead of getout ( java
removed unnecessary IOException declaration from multiple Java files to improve code readability and maintainability
deleted the ` AbstractDelegatedVerb ` , ` FailureContext ` , and ` FailureContext ` classes to streamline the codebase by eliminating obsolete
modified GzipHandlerTest to use static final variables and added a new MicroServlet to handle gzip compression to ensure proper handling of gzipped content and
replaced the method ` getAndAdd ` with ` BackpressureUtils . getAndAddRequest ` in ` OnSubscribeRedo . java ` and
added logging functionality to the SpeedmentImpl class to improve debugging capabilities and enhance debugging capabilities
add a new class LoadDSpaceOAIConfig to load configuration from the servlet context to enable dynamic loading of OAI configuration from the servlet context
modified StoreScanner and TestWideScanner to handle null values and row matching logic more effectively to improve robustness by preventing potential NullPointerExceptions and ensure
camel - 16144 : camel - Nagios - enable jmx for test that do n ' t fail on slow machine
updated SourceLineAnnotation and SourceCodeDisplay to use a constant for the file separator to improve code clarity and maintainability by using a constant for the
added YARNBIN configuration and improved application information retrieval in HiveConf and RemoteSparkJobMonitor to enhance application management and provide clearer application information
added support for " maria " database names in DbConnectionManager to enhance database connection handling for different database types
updated log message formatting in SplitLogManager . java and adjusted time calculation in SplitLogManager . java to improve readability and accuracy of log output
added a new file ExecuteAndReturnStringTest . java to test network error handling to ensure proper handling of network errors and display a network error message
added a new interface ` I ` and a new file ` InvokespecialInterface . java ` that implements ` I ` and invoked dynamic methods to implement
refactor EvictingBoundedList class implementation to improve performance and maintainability of the code
refactor traversal mode and encoding manager initialization in GraphHopper . java to improve code clarity and ensure proper initialization of encoding manager
added a null check for backgroundDisabled and improved selection validation in SelectBox . java to ensure proper handling of selection values and prevent potential NullPointerExceptions
added a null check for the md variable in RpcServer . java to ensure proper handling of unsupported methods by throwing an exception
updated hotseat cell size calculation and border spacing in TaskbarViewController . java to improve layout responsiveness and ensure proper border spacing based on device
updated string concatenation logic in ExpressionTree . java to use ` values . get ( partitionColumnIndex ) ` instead of ` keyEqual ` to simplify
implement Versioned interface in NamedTaskDecorator and modify writeData and readData methods in TaskDefinition to ensure compatibility with versioned serialization and prevent serialization
updated the method from ` getIndexDir ( ) ` to ` getNewIndexDir ( ) ` in ` ReplicationHandler . java ` to ensure the correct
changed the default value of the ` equal ` variable from ` false ` to ` true ` and updated the comparison logic to ensure that the comparison logic
updated UnicodeToLatexFormatter to handle high - codepoints correctly and added a new test case for high - codepoints to ensure correct formatting of
added null checks and modified value assignment logic in OAIDCCrosswalk . java and Item . java to ensure proper handling of non - null values
added a lastFrame map and modified window selection logic in WebDriverBackedSelenium . java to improve window selection management and ensure proper handling of
added a clear button to the StringSearchPanel , BookmarksPanel , and DataBrowser classes to enhance user experience by allowing users to close all
refactor OAuth2AuthorizationRequestRedirectFilter to use UrlUtils for building the base URL to simplify the URL building process and improve code readability
updated date parsing logic in SoftAssertionsTest . java to use static imports and improved error message formatting to enhance code readability and maintainability
modified the ` adaptOrders ` method to include a ` reverse ` parameter and adjusted related logic to allow order adaptation based on the ` reverse `
added null or invalid variable type handling in PrettyPrinter . java and created a new Java11Var class with a test method to improve robustness by
simonstewart : remove unused import and fix typo
updated Configuration initialization to set the default value to false and removed redundant debug logging to simplify configuration handling and improve code clarity
updated method call from ` drawChildren ( batch , parentAlpha ) ` to ` draw ( batch , parentAlpha ) ` to ensure proper rendering of
added a new test class ` FileSplitStreamingWithChoiceTest ` to validate the behavior of streaming with a choice to ensure correct functionality and functionality of
replace usage of System . getProperty ( Globals . CATALINA _ BASE _ PROP ) with context . getCatalinaBase ( )
added unit tests for ` getBestDateTimePattern _ returns _ jmm _ US ` and ` getBestDateTimePattern _ returns _ jmm _
added color codes to the object in PlotSquared . java to enhance the visual representation of color codes in the UI
added ZuulProperties to the TraceRestClientRibbonCommandFactory and TraceZuulAutoConfiguration classes to enhance flexibility by allowing customizable Zuul properties
tika - 164 - add time zone support to fontparserstest to ensure correct time zone handling in metadata retrieval
added new classes ` SampleApplication ` and ` BuildInfoMojo ` , and modified ` BuildInfoMojo ` to use ` getBuildTime ( )
updated the calculation of xDist in PagedView . java to use Math . abs instead of Math . abs to ensure accurate xDist is calculated
deleted the GUIRWTester . java file to remove unused code to streamline the project
removed NullableDecl annotations from method signatures in LazyMessage and StandardSubjectBuilder classes to simplify method signatures and eliminate unnecessary null checks
updated the error message in TestStream . java from " Got : " to " % s " to improve clarity of error messages for better debugging
changed package declarations from ` org . thymeleaf . templateparser ` to ` org . thymeleaf . templateparser . markup `
added a new test method ` testXPathString ( ) ` in ` XPathTest . java ` and updated assertions in ` XPathTest . java `
added @ Nullable annotation to FutureUtils class to indicate that the class can not be null
added warning for dynamic invoke expressions in OnFlyCallGraphBuilder to warn users that invoke expressions are not resolved during call graph construction
changed email from " myfakeemail @ gmail . com " to " myrealemail @ example . com " in ContextTest . java
refactor HTTP response handling in HttpConnectionTest and simplify URIUtil comparison logic to enhance code readability and maintainability by reducing redundancy
added a ` getColumnDataType ` method to ` AbstractResultSet ` , ` ResultSet ` , and ` ResultTableResultSet ` classes to provide a default implementation
replace ` ABSTRACT ` with ` DEFAULT ` in ` AsyncClientInterface ` , ` SyncClientInterface ` , and ` AwsClient `
refactor HSSFPictureData class to improve code readability to enhance maintainability and facilitate future updates
replaced ` long ` with ` Instant ` for ` startTime ` and updated logging logic to use ` Duration ` instead of ` long ` to improve performance
added version handling for MediaInfoLib and updated related options in LibMediaInfoParser . java to ensure compatibility with the latest MediaInfo library version and
removed reflection - based proxy handling for IdeaDependency in ProjectReader . java to streamline dependency management and improve code clarity
added a new file ` SerialHeap . java ` and renamed ` GenCollectedHeap ` to ` CollectedHeapName . java ` and updated
added @ SuppressWarnings ( " serial " ) annotations to $ Gson $ Types . java to suppress serialization warnings for better debugging
updated mouse position handling in mouse wheel events to use Vector2i instead of Mouse . getPosition ( ) to improve clarity and maintainability of mouse position
added null check for next parameter in MongoQueryCreator and created a new test for findByFirstNameIgnoreCase with null in AbstractPersonRepositoryIntegrationTests to
[ hotfix ] [ type ] add multiset type info for maptypeinfo
added an ` retrieveByIssuer ` method to ` XOAuthProviderConfigurator ` and corresponding tests in ` XOAuthProviderConfiguratorTests ` to ensure correct
added checks for delimiters in CMapParser and modified condition checks in CMapParser . java to ensure proper handling of whitespace characters and improve code
updated ContactsBackupJob to use OperationsServiceConnection for managing file expiration to improve service management and ensure proper service management during backup operations
modified the clazztype initialization and added a new class T6938454a to improve type constraint handling and introduce a new class T6938454
added a new method ` isConfigHidden ( ) ` to check if an account is hidden and added a new method ` isConfigHidden ( )
added a check to ensure the number of displays differs from the number of supported bounds to improve error handling and provide clearer feedback on display state
updated schema removal method to use ` getSchemaKey ( ) ` instead of ` SchemaUtil . getSchemaName ( ) ` to simplify schema removal logic and
ggb - 132 add support for passive login in ggb ( loginpassive )
added a new file ` Box2DTest . java ` and modified ` GDXTester . java ` to include a new class ` Box
corrected the spelling of " - deleted - " in ColumnFamily . java and added debug logging in Table . java to improve code clarity and
updated the DEFAULT _ BUFFER _ REQUEST _ TIMEOUT from Duration . ofMillis ( 5 ) to Duration . ofMinutes ( 5 ) to improve
added DEFAULT _ GENERATOR _ NAME and DEFAULT _ GENERATOR _ VERSION constants to SpeechSettings . java and updated generator header
added a help button to the OpenOffice panel to provide user feedback during integration testing
[ java ] use child option instead of option in nettyacceptor and nettypublishdecodingserver for tcp _ nodelay .
updated method signatures to accept wildcard parameters for keepAliveUserDataStream , closeUserDataStream , and checkWapiResponse to enhance type safety and prevent potential NullPointer
refactor class reference handling in ScanResultObject . java to improve clarity and maintainability to enhance code readability and prevent potential NullPointerExceptions
refactor connection handling and redirection logic in DecodeServlet . java to improve code readability and maintainability
added a new method ` toQueryDslNullHandling ` to handle null handling in ` Querydsl . java ` and created corresponding integration tests
added null check for actor before iterating over actions in ParallelAction and SequenceAction classes to prevent potential NullPointerExceptions during action processing
reformatted code for consistency and clarity in CtTypeTest . java to improve readability and maintainability of the test code
added synchronized block for synchronization in HDFSEventSink . java to ensure thread safety when accessing sfWritersLock
added a new file ` Issue888 _ JavaI . java ` that implements ` JJ ` , ` JK ` , and ` KJ
added a command to revoke an existing agent certificate in CertificateManager . java and modified certificate generation logic in CertGenerationTest . java to enhance certificate
added a check for non - empty response codes and modified the condition in AbstractHttpTest . java and HttpServerTestBase . java to ensure proper handling of
refactor script handling in ScriptTransformer to improve error reporting to provide clearer error messages for unsupported scripts in Java 6 and above
added support for a new connection pooling type " DBCP " and " HikariCP " in Hive configuration to enhance connection pooling capabilities
replaced calls to ` mDevice . pressHome ( ) ` with ` mLauncher . pressHome ( ) ` in multiple test files to ensure consistency
added methods to filter and hide files based on lock conditions in FileMenuFilter and OCFileListFragment to improve file locking functionality and ensure
refactor version handling in Version . java to improve code readability and maintainability
added import statement for Table and cleared endpoint cache in UpdateKeyspace . java to ensure the endpoint cache is cleared when a new keyspace is created
refactor waitForState methods in Locks and ThreadExecutionSynchronizer to use a dedicated method to improve code readability and maintainability by centralizing thread
refactor ` getCoercedAttrValues ` to use ` SkylarkRuleContextAttr ` instead of ` Map < String , Object
refactor LocalStorage and SessionStorage to extend the ` Storage ` interface and introduce a new ` Storage ` class to improve code organization and maintainability
added a null check for the existing view before checking the new row type to avoid potential NullPointerExceptions when accessing the existing view
change exception handling from Exception to Throwable in SegmentGenerationJobRunner . java to provide more informative error messages for better debugging
updated query string retrieval to use rb . getQueryString ( ) instead of params . get ( CommonParams . Q ) to improve robustness by avoiding
added validation for header values and improved error handling in Headers . java to ensure proper handling of header values and provide clearer error messaging
refactor instance size and array base offset in HybridLayout , HostedInstanceClass , and UniverseBuilder classes to improve clarity and maintainability
[ apex ] move setcontainscomment to abstractapexcommentcontainernode instead of astcommentcontainer
hhh - 12288 add log for fetch mode join with lazy
refactor ` NoGetOperationsFilter ` , ` NoUserOperationsFilter ` , and ` RemoveInternalParamsFilter ` to extend ` AbstractSpecFilter
added assertions to verify database and table names in TestCompactionTxnHandler and set them in TxnHandler to ensure correct retrieval of database and table names
added Suspendable interface to TimerConsumer and created a new TimerGracefulShutdownTest class to ensure that the TimerConsumer implements Suspendable
added a condition to check if the block is processed before adding it to the traces collection to ensure that traces are only added when the block
updated ProviderManager to use CollectionUtils for checking for null elements and added unit tests for handling null elements to improve code robustness and ensure robustness
removed redundant check for PostgresDatabase version in InsertOrUpdateGeneratorPostgres . java to simplify the code and improve readability
added SQL query assertions and modified page filtering logic in LocalIndexIT , BaseScannerRegionObserver , and ExplainTable classes to improve query performance and
added a check to ensure that a collection with the same name is compatible with a previous collection type to prevent invalid requests when multiple collections have already been
updated cursor calculations in VDUBuffer . java and refactored cursor handling in vt320 . java to improve accuracy of cursor position and
removed the constant USE _ RETRIES from HttpShardHandlerFactory . java to streamline the code by eliminating unnecessary complexity
updated the VERSION _ NUMBER format in JavaVersion . java and added a new test for JavaVersion . parse in TestJavaVersion . java to ensure
added a check to return early if all input gates are empty in StreamTask . java to avoid unnecessary processing when no input gates are available
added a new test method ` test ( ) ` in ` TestReceivingMessageSourceParserTests ` to ensure that the test functions correctly
added a null check for properties before retrieving the value to avoid potential NullPointerExceptions when properties are null
replace the throwing of an IOException with a copy of the original exception cause to improve error handling by providing a more informative exception message
updated error messages in ClusterStackVersionService , RepositoryVersionResourceProvider , and HostRoleCommandDAO to improve clarity and consistency in error reporting
refactor confidence handling in TxIdTextField to use a new TxConfidenceListener to improve clarity and maintainability of the confidence update process
added a constant G1 _ PERM _ GEN and modified its usage in JmxSupport . java to support G1 perm generation functionality
removed unused imports and simplified return statements in NearbyController . java to streamline code and improve readability by eliminating unnecessary code
pdfbox - 4892 : make clonefornewdocument public , a suggest by valerybokov
added a check for ` ACTIVITY _ TYPE _ HOME ` activity type in ` BaseSwipeUpHandlerV2 . java ` to ensure that
refactor DefaultEdgeClientFilter to use EdgeAddHeaderClientFilter instead of DefaultEdgeClientFilter to improve clarity and maintainability of the edge client
updated methods in ShadowTelephonyManagerTest and ShadowTelephonyManagerTest to convert network and sim ISO values to lower case to
removed the call to setUnfreezeAmount in UnfreezeBalanceV2Actuator . java to streamline the code by eliminating redundancy
updated timeslot and room descriptions from " per minute " to " per match " in ConferenceSchedulingXlsxFileIO . java to clarify
use apache commons . io . fileutil . copydirectory instead of google . common . io . fileutil . copy ( )
refactor multiple assertion classes to improve code organization to enhance maintainability and readability of the codebase
refactor Observable class methods for improved readability to enhance maintainability and facilitate future updates
updated the ` Update ` class to replace ` BasicDBObject ` with ` addMultiFieldOperation ` and added a new test for multiple push all
added a null check before setting the UUID for hubChangeLog ID to avoid potential NullPointerExceptions when the UUID is not provided
added a default method ` onHoverEvent ` in ` InputConsumer ` , ` OverviewInputConsumer ` , and modified ` InputConsumerProxy `
added a check for the " boostrap _ conf " configuration before accessing its value to ensure proper handling of boostrap configuration when the zk server
updated URI parameters in NettyHttpConfiguration and NettySharedHttpServerBootstrapConfiguration to include label " consumer " and " maxHeaderSize " to
increased HBASE _ CLIENT _ RETRIES _ NUMBER from 5 to 15 in HBaseTestingClusterAutoStarter . java to increase client retries
updated file path resolution in SourceSnippetHelper . java to use absolute paths instead of absolute paths to ensure consistent file path resolution across different operating systems
refactor graph caching logic in EncodedGraphCacheTest . java to improve clarity and efficiency to enhance test reliability by ensuring that cached graphs are
updated query command to use " all _ tables " instead of " customer _ count " and added a new test for querying system tables to improve
added currencies mapping for each KrakenAssetCode in KrakenAdapters . java to enhance currency handling by associating assets with their respective currencies
added a ` toString ( ) ` method to ` AnyOf ` class and created a new test class ` AnyOf _ toString _ Test ` to
refactor email handling in AlertTaskRunnerV2 to use DimensionMap instead of entry . getKey ( ) to improve clarity and maintainability of email
[ influxdb ] do n ' t publish metric if there be no measurement / database .
renamed ` doTransform ` methods to ` downcast ` across multiple converter classes to improve clarity and consistency in method naming
modified the condition for checking unique local addresses in NetUtils . java to enhance the accuracy of local address validation checks
refactor column name handling in DataTextFormatter to use a new method ` quoteColumnNames ` to improve code readability and maintainability by en
added methods to set properties and set properties in WrapSystem , StrUtils , and CompileMethodEntity to enhance property management capabilities and improve method signatures for
added a constructor to the UpdateRequest class that accepts a URL parameter to initialize UpdateRequest with a URL parameter
removed static modifier from enumSerialization in ProtoTypeAdapter . java to improve code readability and maintainability
removed the ` addExperimentalFormatWarning ` method in ` DataImportHandler ` , ` ReplicationHandler ` , and ` RequestHandlerUtils ` to
added a method to format module names in JpmsUtil . java to improve logging clarity by providing more descriptive output
added a method to retrieve the default label font in UITools and updated row height calculations in multiple UI classes to utilize UITools ' s size
updated method signatures and formatting in DefaultBrokerHeartbeatManager . java to improve code readability and maintain consistency
refactor CqlInputFormat to handle null values for mean and partition sizes and split counts to improve code clarity and prevent potential null pointer exceptions
removed unnecessary condition check for name type in JUnitTestsShouldIncludeAssertRule . java to simplify the condition for better readability and maintainability
added equals and hashcode methods to RuleTerminalNodeLeftTuple class to ensure proper object comparison and hash code generation
added StageIDsRearranger to handle HIVESTAGEIDREARRANGE configuration in TezCompiler . java to ensure StageIDsRearranger
updated mbean registration name from " MESSAGING - SERVICE - POOL " to " MessagingService " in MessagingService . java to align mbean
updated memory allocation logic in LotsOfOutput . java to include memory delta logging to improve memory management and provide clearer debugging information
added imports for ` org . apache . lucene . document ` in multiple Java files and modified dimension configuration in ` FacetsConfig ` to
updated LDAP properties to set anonymous read - only to true and refactored related methods in LdapProperties to enhance flexibility in managing anonymous read - only
refactor DatabaseMetaData class to improve code readability to enhance maintainability and facilitate future updates
changed the access modifier of EchoInputDoFn from public to private in ExampleEchoPipelineTest . java to restrict access to the EchoInputDoFn
added finishMocking method to MockitoSession and updated related implementations in DefaultMockitoSession and StubbingWarningsTest to improve error handling and ensure
refactor GoTestDescription to remove extraDeps and add new test cases for genrule as src and wtih libs as src to simplify
replaced ` buffer ` and ` handler ` with ` readBuffer ` , ` writeBuffer ` , and ` writePending ` in ` SPDY
change the block retrieval method from ` getStaticBlock ` to ` getFlowingBlock ` in ` BlockLiquidWrapper . java ` to ensure the
updated backgroundClass handling in AndroidLocationPlayServiceManager and modified BackgroundLocationHandler to handle location URLs more effectively to ensure proper location retrieval and improve
refactor AprEndpoint class to improve code readability to enhance maintainability and facilitate future updates
[ hotfix ] [ runtime ] handle streaming plan in clijsondumpgenerator
updated item hash and count calculations in CraftingManager . java and replaced direct retrieval of shapedRecipes with a computeIfAbsent method to improve
flume - 232 . fix test failure on window due to file channel restart .
simplified conditional checks in TabsAndIndentsVisitor . java to improve code readability and maintainability
added a new regex pattern " pg _ temp _ . * " to the NeuteredLinesFilter class to enhance the filtering capabilities for temporary files
chore ( deps ) : upgrade gapic - generator - java to 2.7 . 0 and update gax - java to 2.16 . 0 (
added support for handling " INTERVAL " and " NCLOB " data types in DataTypeFactory and updated condition checks in UnknownType to ensure
added a ` isPublishingHistogram ( ) ` method to ` WavefrontDistributionSummary ` and modified timer registration logic in ` WavefrontMeterRegistry
updated DivideUpstream to include warmup configuration in ShenyuClientRegisterSpringCloudServiceImpl . java and modified DivideUpstreamUtils . java
added a new method ` registerListener ` to the ` ShadowSensorManager ` class to provide a mechanism for registering sensors with specified parameters
added test methods for handling HTTP requests and URIs in SelectChannelServerSslTest . java to ensure proper handling of socket exceptions and improve error logging
added null check before closing the ignite resource in IgniteComponent . java to avoid potential NullPointerException when ignite is not initialized
updated print statements in AbstractClient . java to handle empty set cases to improve clarity and handle cases where the total line number is zero or empty
pdfbox - 4892 : catch unsupportedflavorexception instead of ioexception , a suggest by valerybokov
added unit tests for the ` setDisplayHdrCapabilities ` method in ` ShadowDisplayTest ` to ensure correct functionality of the ` setDisplayHdrCapabilities
set classLoader to null in JavacInMemoryStep . java to ensure proper resource management and prevent potential memory leaks
updated error messages in SemanticAnalyzer and added a toString method in SemiJoinHint to improve clarity of error messages and provide more context in error messages
added a default constructor to the Message class to provide a default constructor for the Message class
added GUI class handling and improved bug reporting in SerializableIdiom . java to enhance compatibility with non - GUI components and enhance bug reporting accuracy
updated the constructor of PhoenixDecimalObjectInspector to accept PrimitiveTypeInfo and updated BigDecimal conversion logic to enhance type safety and ensure proper precision scaling for decimal values
refactor CompressionResponseStream to use OutputStream instead of GZIPOutputStream for gzip compression to improve efficiency by avoiding unnecessary gzip compression when the response is already committed
rename WWWWWWAuthenticate parameter to authenticateHeader in Authenticator . java to improve clarity and consistency in naming conventions
removed unnecessary checks for " EJS " and " org \ \ ibm " in DCD . java to simplify the code and improve readability
refactor thread name retrieval in ThreadLeakTest to use a dedicated method for retrieving the thread group to improve code readability and maintainability by
added logging functionality to MethodInvocationPrivilegeEvaluator for unauthorized access decisions to improve debugging and traceability of unauthorized access decisions
updated package from ` org . apache . nutch . crawl ` to ` org . apache . nutch . tools ` in DmozParser
updated import statements in RegisteredServiceChainOperatorTypes , ChainingRegisteredServiceDelegatedAuthenticationPolicy , and ChainingRegisteredServiceDelegatedAuthenticationPolicy
vm : add iso volume to storage pool for user vm
refactor Signal handling in SigInt . java and SigIntTest . java to simplify error handling logic and improve code clarity
updated import statements to use ` ArrayUtils . isEmpty ` instead of ` org . apache . commons . lang3 . ArrayUtils . isEmpty ` to
updated imports and annotations in AxonAutoConfigurationWithSpringCloudTest . java and added a new discoveryClient bean in SpringBootTest .
added methods for setting and transforming ColorRGBA in ColorRGBA . java to enhance color interpolation functionality and improve code clarity
added resetInitializedPlanningEntities functionality to PlanningEntityConfig , PlanningEntitySelector , PlanningVariableDescriptor , and PlanningEntitySelector classes to ensure planning entity
added ` setBuildTimeMs ` parameter to ` ArtifactInfo ` and modified ` CachingBuildRuleBuilder ` to include ` artifactBuildTimeMs
refactor field handling in GroupByOperator to use getDeclaredFields instead of getFields to improve clarity and maintainability of the code
added null check before adding block appearance in Wallet . java to avoid potential NullPointerException when block is null
added CNC _ BTC and CNC _ BTC currency pairs to the Currencies classes to support currency pairs for Chinacoin and improve
updated skewAllowance values in SamlIdPResponseProperties , SamlRegisteredService , and SamlProfileSamlAuthNStatementBuilder to use
updated SongListActivity to use ItemSortBy instead of ItemFields and adjusted sorting logic in Utils to ensure consistent sorting behavior for songs based on item
removed unused imports and refactored the ` readBodyToBytesIfNecessary ` method in ` Utils . java ` to improve code clarity and maintainability
refactored MobSpawnerBlock , SignBlock , and SkullBlock classes to extend LegacyBaseBlockWrapper instead of BaseBlock to
refactor snapshot retrieval logic in IcebergBranchExec . java and add a new test in TestHiveIcebergBranchOperation . java to
replaced the use of ` newArrayList ` with ` Collections . singletonList ` in ` AbstractLdapMockMvcTest . java ` to improve code readability and
updated HybridDemoSsboInstancing and PhotonMappingDemo to remove redundant initialization and streamline bounce count handling to improve code clarity and
updated password change validation logic in IdentityProviderEndpoints . java and added logging for invalid operations in IdentityProviderEndpoints . java to improve error handling and provide
added a call to ` notInitializedInConstructors . removeAll ( assumeReflective ) ` in ` UnreadFields . java ` to ensure that
updated DatabaseException handling to handle closed connections correctly to ensure accurate SQL execution error reporting based on the connection ' s state
added a new test method ` testRequiredBody ` for user data retrieval in ` SpringmvcClient . java ` to ensure that user data is
updated user and password regex patterns to use dot notation for user and password in CredentialInjector . java and CredentialInjectorTest . java to ensure
added " Item4 " to the list of menuItems in ActionListenerCalledTwiceTest . java to support additional menu items in the test
updated assertions in TestCoreParser to use class name instead of string concatenation to improve clarity and maintainability of the test output
updated comparison logic in SimpleNode . java to use ' id ' instead of ' children ' to ensure consistency in object equality checks
changed the access modifier of the PopulatorContextStackItem class from public to package - private to restrict access to the class for better encaps
updated the method for retrieving the number of documents and added a test for small sample from corpus to ensure accurate document retrieval and improve test coverage for small
reformatted code for better readability in QuestManager . java to improve code clarity and maintainability
[ hotfix ] [ test ] make networkbufferpooltest extend testlogger
updated the query append method to include the upper bound in the EXPIRY clause to ensure that the upper bound is properly appended to the query
added a new native method ` unsafeGetLong ` in ` CompilerDirectivesSubstitutions . java ` to provide a native method for retrieving long values
updated time zone values from " ARAST " to " EET " across multiple files to standardize time zone representation across different locales
updated the ID from 90000010 to 90000011 in DeprecationLogger . java to reflect the correct classification of the class
hhh - 13257 handle JDBCexception in sessionimpl . getlock ( )
updated suffix handling in DownloadExternalFile . java to handle empty links more robustly to improve robustness by ensuring only valid suffixes are returned
[ freeplane ] set apple . laf . usescreenmenubar to true on macos
added a piecewise integration test for piecewise operations in GeoGebraCasIntegrationTest . java to ensure correct functionality of piecewise integration tests
changed access modifiers of ` STATE _ SCREENSHOT _ CAPTURED ` and ` switchToScreenshot ` methods in ` BaseSwipeUpHandler
added a ` modWhiteListPattern ` assignment to ` HiveConf ` and a corresponding test case in ` TestJdbcWithSQLAuthorization ` to ensure
updated the handling of invalid classes in EntryLoader . java to improve code clarity and maintainability
updated the team reference from ` Team . sharded ` to ` Player . team ( ) ` in the ` Geometry . findClosest ` method to
change cookie domain from " comp1 " to " comp1 " in CookieImplementationTest . java to ensure correct domain is used for cookie creation
added nullable validation logic in MissingColumnChangeGenerator , MissingTableChangeGenerator , and Column classes to ensure proper validation of nullable values based on search conditions
refactor multiple SecurityToken and related classes for improved organization to enhance maintainability and readability of the codebase
refactor CompositeIdRouter to use static final constants for separator and bitsSeparator to improve code clarity and maintainability by using static final constants
added snapshot generation functionality to ExecutablePreparedStatementBase and updated dependenciesChangeLog initialization in PostgreSQLIntegrationTest to enhance compatibility with Postgres database snapshot
updated conditional checks for cache size and file size in DefaultServlet . java to ensure correct handling of cached files , size , and gzip - equivalent file
added drag - and - drop handling for tabs in JabRefFrame to enhance user experience by allowing copies of tabs when drag and drop events occur
refactor execution unit tests to use ` Description . createTestDescription ` instead of ` createDescription ` to improve clarity and maintainability of test description
replace ` ! myVersion . isEmpty ( ) ` with ` StringUtils . isNotEmpty ( buildTimeString ) ` in ` CommandLineUtils . java ` to
changed access modifiers of several methods from public to package - private in TimeUtils . java and TimeUtilsTest . java to enhance encapsulation
removed initialization of jdk . reflect . useDirectMethodHandle and added version check for SecurityFrame and InjectedInvoker in RefectionMHTests to
updated file name check from " jpg " to " . jpg " in PreviewImageFragment . java to ensure correct file extension is used
updated method return logic in NativeImageDebugInfoProvider to handle HostedMethods to ensure correct Java class names are returned based on the method type
added ` getIcon ( ) ` methods to ` Data ` classes and updated ` ClassDisplayed ` from NONE to NODE in ` DataTableTopComponent ` to
modified the way the substring method is returned in CounterRequestAggregation . java to handle cases where the last occurrence of ' . ' is not found to
fix $ { $ } $ { $ } in findandreplace and add a test for dollarsignstolerated
refactor connection handling in ProtocolProviderServiceJabberImpl and SmackPacketDebugger classes to use Connection instead of XMPPConnection to improve
refactor SchemaExtractionProcessor class to improve code readability to enhance maintainability and facilitate future updates
added a new method ` copyDir ` in ` IO . java ` and refactored imports in ` SpecWebAppTest . java `
added a throw statement for unknown datum classes in JacksonUtils . java to provide clearer error handling for unknown datum types
refactor ABI handling in DefaultJavaLibraryBuilder to streamline ABI dependency retrieval to improve code clarity and maintainability by centralizing ABI
removed background padding calculations for item height in SelectBox . java to simplify height calculations and improve code readability
added normalization of identifiers for dbName and tableName in ObjectStore . java to ensure consistent identifier normalization across different database and table names
added schema handling for postgres and oracle databases in DbSqlSession . java to ensure proper schema is set for oracle databases and improve table
removed the logout call from HomeFragment . java to simplify the code and improve readability
updated MockStreamingRuntimeContext values from 0 to 1 across multiple test files to reflect the correct streaming runtime context for tests
added null check for the candidates list in FastImportAction . java to prevent potential NullPointerExceptions when accessing the candidates list
updated the condition for managing a bean in ContainerLifeCycle . java and updated assertions in ContainerLifeCycleTest . java to improve the accuracy of bean lifecycle checks
rename ` IExecutionAttributesDialect ` to ` IExecutionAttributeDialect ` across multiple files to improve clarity and consistency in naming conventions
added a call to ` metadata . clearUnsafe ( ) ` in ` AlterTest . java ` to ensure the metadata is cleared before processing new data
added null checks for ` loc ` before retrieving day , month , and ordinal string to prevent potential NullPointerExceptions when ` loc ` is null
added null check for measurement and refactored disruptor queue builders to use a custom exception handler class to improve code clarity and maintainability by
deleted the Session2Token . java file to the class is no longer needed for the current functionality
volume : do n ' t log error when fail to create dest volume
added ` Install ` functionality to ` SystemShortcut ` and implemented it in ` PopupDataProvider ` , ` SystemShortcut . java ` , and `
added a constructor to ` LdapAuthenticationProvider ` and modified ` LdapAuthenticationProviderTests ` to use ` NullAuthoritiesPopulator ` to improve handling of null
updated the handling of the retrolambda jar path in Executor and added a check for the retrolambdaJarPath property in CN1Build
replaced ` buildOrThrow ( ) ` with ` build ( ) ` in ` ShadowCamera . java ` to simplify the code and improve readability
refactor the ` sortLiveDocs ` method to use ` Bits ` instead of ` FixedBitSet ` to improve code clarity and maintainability by
added a call to handle null results in JMESPathExtractor . java to ensure proper handling of null values in the extraction process
updated import statements and added null and empty check for authorities in AuthorizeTag . java to improve robustness and prevent potential NullPointerExceptions
updated assertions in multiple test files for consistency and clarity to enhance readability and maintainability of logout URL assertions
corrected the spelling of " VGU " to " vGPU " in the exception message to ensure accurate error reporting for unsupported VM snapshot
updated configuration handling in RobolectricTestRunner to use methodClassConfig and testClassConfig instead of classConfig to improve clarity and maintainability of
replaced SelectChannelConnector with SocketConnector in JettySolrRunner . java to utilize a more efficient socket connector implementation
added a partial equality check for partition keys in HiveAlterHandler . java and updated related test cases in TestHiveMetaStore . java to
added a new BooleanFlag ENABLE _ ICON _ IN _ TEXT _ HEADER to FeatureFlags . java to enable icon in text header by default
removed unnecessary whitespace in SimulationStatus . java to improve code readability and maintain consistency
replaced SharedBlockingCallback with Callback in multiple classes to simplify code and improve readability by using a more descriptive class name
added WorkspaceListener support to the PreviewControllerImpl and PreviewUIController classes to enable workspace updates during the preview process
added a check for VMAnonymousClass before influencing methods in ReflectionFactory and ReflectUtil classes to ensure proper influencing behavior for non -
refactor TransportHelper class to improve code readability to enhance maintainability and facilitate future updates
updated file path formatting in CatalinaAcegiUserRealm . java to improve code clarity and maintain consistency in file path formatting
updated logging statements in AmbariServer . java for improved clarity to enhance readability and maintainability of the server initialization process
added null checks for forNode ' s init and modify methods in JSONWriter . java to improve robustness by preventing potential NullPointerExceptions
refactor method signatures in SliderAppsViewControllerImpl to accept a FileSystem parameter instead of a hardcoded value to improve code readability and
added a check to ensure backgroundManager is attached before attaching it to avoid potential IllegalStateException when the backgroundManager is not attached
added functionality to set the current tab in AllAppsTabbed , Launcher , and PagedView , and adjusted page positioning in Page
added a null check for the URL parameter in BaseDataSource and created a test for it in SimpleDataSourceTest to ensure proper handling of invalid URLs
added JUnit compatibility checks in PebbleModuleTest . java and updated engine initialization in PebbleTemplateEngine to ensure compatibility with JRE
added EditNameDialog functionality to manage directory creation in FileDisplayActivity to improve user experience by allowing the creation of a directory with a specific name
added case statements to set bar border widths in multiple chart activity classes to ensure consistent bar border behavior across different activity components
updated SSL URIs from " okcoin . com " to " okex . com " in OkCoinExchange . java to ensure compatibility with the
[ jbrules - 2576 ] add a naturalscorecomparator to the acceptedforagertest so that it can be use in
replaced ` FileChannel . open ( path ) ` with ` SeekableByteChannel ` in ` Files . java ` and updated the read method in ` Bytes
refactor getFlattenFieldTransferPair method to accept a FieldReference parameter instead of a hardcoded value to improve code clarity and maintainability by
rename ` MockHandler ` to ` MockHandlerImpl ` across multiple files to improve clarity and consistency in naming conventions
refactor conditional checks for PROXY _ SERIALIZATION _ TYPES _ KEY in SerializationConfigurationParser . java to improve readability and
added imports for ActivityManager and set watch heap limit in QuickstepProcessInitializer to ensure proper memory management during debug devices
refactor sumWithCompensation method calls to use a variable for the value to improve code readability and maintainability
[ log4j2 - 1342 ] do n ' t throw exception when bundle can not be resolve .
modified the condition for serializing the deletion information in PrecompactedRow . java to ensure proper serialization and serialization of the top - level deletion time
updated renderingIntent return logic and modified color conversion logic in ICC _ Profile and ColorConvertOp classes to improve rendering intent handling and ensure correct rendering intent
added MeterRegistryLifecycle bean and associated lifecycle methods to MetricsAutoConfiguration and MetricsAutoConfigurationTests to enable monitoring and management of meter registry instances in
[ hotfix ] [ config ] change log level from warn to info for config center
added error handling for generating certificates in CertificateFactoryTest to ensure proper handling of CertificateExceptions during certificate generation
camel - 11436 : simple - predicate - parser should handle ambiguous binary operator . thanks to krisztian for the patch .
refactored the onTabUnselected method in EditorActivity and added focus handling in IDEEditor to improve code clarity and ensure windows are closed
updated error logging to include the user ' s name in the log error message to enhance logging clarity by providing more context about the user ' s access
added null check for submeshnames before accessing them in SkeletonModelGpuSkinningTest , OgreXmlLoader , and 
removed InterruptedException from the createOrThrow method signature in DefaultProjectFilesystemFactory . java to simplify method signature and improve code readability
added @ Deprecated annotations to UpgradeResponse . java to indicate that these methods are outdated and should no longer be used
added functionality to generate d . ts files along with the JavaScript output directory in JSweet to enable dynamic generation of d . ts files
added a new test method ` testKinesisFetchTimeout ` to validate the ` fetchTimeoutMillis ` value in the ` StreamConfig ` class to ensure
added a new file extension to the timestamp parameter in StreamingDataflowWorker . java to support HTML files for dataflow processing
updated METASTORESERVERMAXTHREADS from 100000 to 1000 in HiveConf . java to increase the metastore server ' s maximum concurrent threads for
changed the return type of the onTaskSnapshotChanged method from void to boolean to allow the method to return a boolean value instead of void for snapshot
updated the shadow radius setting from mMaxShadowRadius to shadowRadius in SwipeUpAnimationLogic . java to ensure the correct shadow radius is used
added a new test method ` chainNestingAndAggregation ` to the ` ChainParserTests ` class to ensure proper handling of chainNest
updated loop condition from ` limit ` to ` end ` in ` MarketSellAssetActuatorTest . java ` to ensure correct iteration order
change the condition from ` isInternal ( ) ` to ` isInteractive ( ) ` in ` PolyglotContextImpl . java ` to ensure
updated conditional logic in CreateKeytabFilesServerAction . java to handle null values more gracefully to improve robustness by preventing potential NullPointerExceptions
added DisplayController import and updated WindowManagerProxy instantiation in LauncherPreviewRenderer . java to enable the use of DisplayController in the WindowManagerProxy
removed redundant checks for the existence of the home directory in MetalFileChooserUI and SynthFileChooserUIImpl to simplify the code and improve readability
replaced ` getToolkit ( ) ` with ` getDefaultToolkit ( ) ` in ` LooksFrame . java ` to ensure compatibility with the new toolkit
change return type from List < ? extends RecognisedObject > to List < CaptionObject > in TensorflowRESTCaptioner and
added unit tests for ` cat ` entity handling and updated import statements in ` JPASQLBase . java ` to enhance test coverage and ensure correct
removed drag index logic from FreeformFinSetConfig . java to streamline the code and improve readability
updated the moe version from " 1.1 . 2 " to " 1.1 . 0 " to ensure compatibility with the latest moe versions
updated error message from " canot set call value . " to " cannot set call value . " and added program . spendAllGas (
updated error formatting to include a newline character in multiple files to improve readability and maintainability of error messages
added a @ Deprecated annotation to the Weights class to indicate that the class is outdated and should no longer be used
refactor unsafe plugin registration logic to use a separate method for registering platform - specific Unsafe plugins to improve code readability and maintainability by
added @ Hint annotation to AndroidAppModularityDescription , AndroidGraphEnhancerArgs , and added a new test for blacklisting modules in
changed mCenterPagesVertically from true to false in AppsCustomizePagedView . java to disable vertical scrolling for better user experience
remove redundant call to migrationInfo . doneProcessing ( ) in MigrationRequestOperation . java to improve code readability and maintainability
updated constant names and variable names from " HOST " to " BASE _ URL " across multiple files to improve clarity and consistency in naming conventions
updated WSFederationClaimsReleasePolicy to use List < Object > instead of Object and added new assertions in WSFederationClaims
added database creation and processing methods in TestJdbcWithMiniLlap . java and modified database handling in LlapBaseInputFormat . java to enhance
added a new test method ` testCaseInsideBrackets ` in ` CaseExpressionTest . java ` to validate SQL parsing and deparsing to ensure
added copy mode functionality to ConsoleActivity on ICE - CREAM _ SANDWICH and improved event handling in ConsoleActivity to enhance user experience
refactor XML output writing to use a try - with - resources method to ensure proper resource management and avoid resource leaks
camel - 14263 : fixed npe in customaggregationstrategy when the exchange be null .
camel - 16165 : camel - core - log should show the cause of the exception .
move basicconfigurator from ch . qos . logback to ch . qos . logback . classic
added a check for ` ValueNumber . PHI _ NODE ` before comparing ` targetVN ` to ensure that ` targetVN ` is
added import statement for SharedStringSource in TestXSSFRichTextString . java to utilize the SharedStringSource class for improved functionality
added a new method ` invokeMethod ` to the ` ObjectInvokeHelper ` class to provide a way to invoke a method with additional parameters
refactor BoxAndWhiskerCalculator , BoxAndWhiskerXYDataset , HistogramDataset , and Statistics classes to improve code
[ hotfix ] [ test ] move parameterized test to junit 5
changed the NormUpdate class to be static and updated field comparisons to use ` . equals ( ) ` and ` . equals ( ) `
changed the access modifier of the singleton instance of IndexFileNameFilter from public to private to restrict access to the singleton instance for better encapsulation
refactor test cases in IfStatementTest to improve code clarity and maintainability to enhance readability and maintainability of the test code
replaced ` getPutOnlyTableHeaderRow ` with ` getTableHeaderRow ` in ` ConnectionlessQueryServicesImpl . java ` to simplify the method
removed the ` nullSafe ` method from the ` TypeAdapter ` class and its usage in ` StreamingTypeAdaptersTest ` to simplify the
updated the size ( ) test from 12 to 13 in BundledDistributionTest . java to reflect the correct number of items in the distribution
added a new file EXIFReader . java to handle EXIF metadata processing to improve image processing capabilities for EXIF files in the application
meterregistry : return ` ` none ' ' instead of ` ` unknown _ to _ sdk _ version ' '
[ drools - 133 ] fix apply pmml parameter type check in pmml4datafactory
[ flink - 20535 ] [ protocol ] add note about countercurrencytransferstartedmessage in log message
added a check to return early if the bubble bar is not visible to improve performance by avoiding unnecessary processing when the bubble bar is not visible
[ gr - 26464 ] reset label range when branchtargetoutofboundsexception in aarch64backend .
added a try - finally block around the initialization of the JDKLogManager initialization to ensure proper resource management and prevent potential memory leaks
added a ` find ` method to ` TicketCatalog ` , ` DefaultTicketCatalog ` , and ` DefaultTicketCatalog ` classes , and updated
reformatted code for consistency and clarity in TestSSL . java to improve readability and maintainability of the code
[ hotfix ] [ table - common ] fix synchronization issue in sortmergeresultpartition
replaced instances of ` Read ( ) ` and ` Write ( ) ` with ` Read ( null , Long . MAX _ VALUE , null , null
updated the ` PluginHandleController ` , ` PluginHandleDTO ` , and ` PluginHandleDO ` classes to include additional parameters for filtering and sorting
updated DefaultSpanCreator and SleuthAdvisorConfig to use ` . start ( ) ` instead of ` . start ( ) ` in `
added GLKViewDrawableColorFormat , GLKViewDrawableDepthFormat , and GLKViewDrawableMultisample to IOSGraphics and IOS
replaced direct calls to ` sendKeys ( ) ` with ` attemptLogin ( ) ` and added a new test method ` userLockedoutAfterFailed
[ pytorch ] add support for real ( ) and complex ( ) in pytorchutils
modified loop conditions in SynchronizationStatistics . java to use do statements instead of boolean checks to simplify code and improve readability by reducing redundant checks
refactor Implements and ShadowPicker classes to improve code organization and maintainability
refactor HttpClientOptions initialization to utilize a dedicated method for creating HTTP2 client options to improve code readability and maintainability by centralizing HttpClient
added support for DynamicArray and DynamicStruct types in DynamicStruct , SolidityFunctionWrapper , and SolidityFunctionGenerator classes to enhance type
updated CSS property retrieval to include a default value of true in InlineLayout . java and FontUtil . java to allow dynamic configuration of text alignment and
added a boolean parameter ` shouldRecurse ` to the ` CopyStep ` constructor and a corresponding test in ` CopyStepTest ` to allow
fixed - rsemaphore . acquire ( ) and rsemaphore . acquire ( ) method do n ' t work correctly
camel - 14105 : fix the test failure of camel - jbang - jbang
added a new ` FlavorParser ` class and updated ` BuildTargetParser ` to use it for parsing flavor strings to improve flexibility in parsing flavor
change type of lists from List < String > to List < ByteString > in WitnessScheduleStore . java to ensure compatibility with protobuf ' s ByteString
added a conditional check for non - empty resultsMeta before printing it to avoid printing an error when resultsMeta is not empty
refactor ConcurrentLinkedQueue to simplify null checks and introduce a new RemoveLeak class for testing to improve code readability and maintainability by simplifying
added a boolean parameter ` addSpecialTokens ` to several methods in ` HuggingFaceTokenizer ` and ` decode ` methods in ` HuggingFace
replace ArrayList with Collections . nCopies for resourceProfiles in TaskManagerServices . java to simplify the code and improve readability
updated chunk data handling in LoadSingleTsFileNode . java to use AlignedChunkData instead of PageIndex2ChunkData to ensure
added a new constant for session storage context and updated view state creation in DuoSecurityMultifactorWebflowConfigurer to enhance session management functionality and improve
added a new test method ` testSchemaValidation ` to ` TestJspDocumentParser ` to validate XML schema validation to ensure correct parsing of XML
added a default constructor to TypeAdapter and modified @ Ignore annotations in Java17RecordTest and ReflectionAccessTest to ensure proper initialization of TypeAdapter and
added a new ` SuspendedEvent ` instance and modified the event dispatching logic in ` Debugger . java ` and ` SuspendedEvent
refactor AntPathRequestMatcher to improve request matching logic to enhance code readability and maintainability
removed unnecessary parameters from createResourcePolicy method calls across multiple classes to simplify method signatures and improve code readability
added null check before releasing the deflaterEntry in GzipHttpOutputInterceptor to avoid potential NullPointerExceptions when releasing the deflaterEntry
added JUnit AfterEach annotation to ReactorCoreAutoConfigurationTests to ensure proper cleanup of tests after each test execution
updated MD5 calculation to normalize Unicode characters in CheckSum . java to ensure consistent normalization of Unicode characters in MD5 checksums
refactor command handling in Example . java to improve clarity and prevent potential NullPointerExceptions to enhance code readability and prevent potential NullPointerExceptions
changed the visibility of the keyListener variable from private to final in BasicProfilerState . java and added multiple overrides in BaseAppState . java
changed the type of ` objectToSave ` from ` T ` to ` DBObject ` and added a new test for saving JSON strings to ensure
added a method to check for multiple remote addresses in RequestUtils and a corresponding test case in RequestUtilsTest to ensure proper handling of multiple remote addresses
replaced ` String ` with ` ObjectBuilder ` in ` getJobArgs ` and ` BiFunction ` methods in ` JsLibrary . java ` to
refactor CookieManagerTest and UnmodifiableMaps to use a static method for retrieving the local host address to improve code readability and maintainability
modified the wrapping logic in GlyphLayout . java and added a text test in BitmapFontTest . java to ensure proper handling of whitespace and improve test
added pause / resume methods to pause and resume splits in PulsarSourceReaderBase and PulsarPartitionSplitReaderBase to
added a new configuration variable for the script operator ID in HiveConf and updated ScriptOperator to use it to enable dynamic configuration of the script operator ID
refactored the ` getListedTermCounts ` method to use ` Stream ` for sorting term counts to improve performance and maintainability of the
added a new file UseSeparateStepSizeAction . java to facilitate the use of separate step size menu items in JOG to enhance user experience by
refactor FileMenuFilter to use final fields and improve code clarity to enhance encapsulation and ensure immutability of field variables
hbase - 24227 roundrobintableinputformat should use listlist instead of listlist to avoid nullpointerexception
updated the value of the ` Sampled ` header from " false " to " 1 " and changed the value of ` PARENT _ SPAN
pdfbox - 4892 : remove unnecessary null check , a suggest by valerybokov
updated GwtApplication , GwtGraphics , GwtApplication , GwtGraphics , GwtGraphics , and GwtApplication classes to improve fullscreen handling and ensure proper screen
updated WebfingerIssuerService to use URI instead of String for URI handling and improved resource normalization to enhance compatibility with different URI formats and improve resource
add unit tests for SoulApacheDubboClientConfiguration to ensure correct behavior of Dubbo configuration in the application
replaced Gdx . files . internal with resolve for asset resolution in SkinLoader . java to improve code clarity and maintainability by using a more
updated logging levels from warn to info in ChainingAttributeReleasePolicy . java and OidcDefaultJsonWebKeystoreCacheLoader . java to
updated lock method calls to use ` lockInterruptibly ( ) ` instead of ` lock ( ) ` in multiple files to ensure proper locking behavior
changed package declaration from ` java . lang ` to ` java . lang ` to ensure consistency in package structure
added exception handling logic in NullDerefAndRedundantComparisonFinder . java to ensure proper handling of exceptions in JSR subroutines
updated the ` ManifestFetcher ` constructor to use ` DefaultHttpDataSource ` instead of ` contentId ` and ` onSingleManifestError ` methods to
added a new configuration property ` EXECUTION _ SCHEDULER _ MAX _ STATEMENTS _ PER _ CONNECTION `
rename ` WritableConfig ` to ` Configuration ` across multiple classes to improve clarity and consistency in naming conventions
removed the checkErr method from AutoScalingHandler . java to streamline error handling for command operations
refactor CombinedDataset class to improve code readability to enhance maintainability and facilitate future updates
updated byte array usage from a byte array to a byte to improve efficiency by using a more efficient byte array
added methods to remove cryptography restrictions in the Utilities class to ensure proper removal of encrypted cryptography restrictions
refactor chunk generation logic to check if the event is cancelled before proceeding to improve event handling and ensure proper execution when the event is canceled
added a new test method ` testPageMarginsLongTextTransform ` to the ` TextVisualRegressionTest ` class to ensure correct functionality of page
refactor vectorization context handling in Vectorizer . java to ensure proper initialization of vectorization contexts
update speed calculation in WialonProtocolDecoder to include a factor of 0.0539957 to ensure correct calculation of the speed value based on the
hbase - 24165 disable metric user aggregate by default in testclientclustermetrics ( sergey )
added an ` isEmpty ( ) ` method to the ` JsonObject ` class and a corresponding test in ` JsonObjectTest ` to provide a method to check
added new boolean variables and adjusted related logic in Launcher . java to improve code clarity and ensure proper handling of attached receivers
refactor multiple request and response classes for improved clarity to enhance maintainability and readability of the codebase
updated zadd method to include parameters in the score addition operation to enhance functionality by allowing the addition of scores with additional parameters
updated assertions in multiple test files to use ` unusedUri ` instead of ` uri ` to ensure correctness of metadata retrieval and improve code clarity
rename ` TestAsyncMessages ` class to ` TestAsyncMessagesPerformance ` to improve clarity and consistency in naming conventions
added a method to retrieve an Optional < BuildTarget > and updated related logic in VersionedTargetGraphBuilder , VersionPropagatorBuilder , and
updated epoch seconds from high to low in TimeZoneProvider . java to improve accuracy in time zone calculations
updated the return value in EscherBlipRecord . java and added a new test class TestOLE2Embeding . java for embedding
removed redundant initialization of row and column in JSONParser . java to streamline code and improve readability
replaced instances of ` JavaType . ShallowClass . build ( ) ` with ` Pattern . compile ( aspectjNameToPattern ( ) )
added functionality to play trailers based on local trailer count and error handling to enhance user experience by providing feedback on trailer playback and error handling
added a native method to remove glyph information from the cache in CStrike . java and implemented glyph removal in CStrikeDisposer . java
do n ' t delete execution entity if it be not in active state
camel - 14263 : camel - xml - type - strategy should use @ xmlroot instead of @ xmltype . name ( ) .
updated the endpoint in SimpleHttpClientTests from " http : / / scottb . html " to " https : / / apereo .
add an option to reset all preferences to default values in JabRef . java to allow users to reset all preferences to default values
hbase - 24166 make thrift metrics protected and add method to create thrift metrics
[ danfossairunit ] remove deprecated manual _ fan _ speed channel .
use hamcrest assertion instead of junit in unit test
removed redundant calls to stop expansionHelper in TweetActivity . java to streamline code and improve readability
added equals and hashCode methods to PartitionPanel and PartitionFactory classes to ensure proper handling of null values to prevent potential NullPointerExceptions
added a check for the existence of the ROOT _ DISK _ SIZE parameter in UserVmManagerImpl . java to ensure the correct disk size is
updated prediction visibility logic in PredictionRowView . java to include a preference for showing suggested apps in the drawer to enhance user experience by ensuring predictions
[ geos - 8071 ] fix bboxfilter api to handle invalid crs
added validation for value , position , and depth parameters in LibrustzcashParam . java to ensure that non - negative values are validated to prevent
mark the IThrowableEntity class as deprecated to indicate that it should no longer be used in any way in the future
added new variables ` x ` and ` y ` in ` NodeDataImpl . java ` to adjust the random positioning of the node data to
updated the ` validateRefreshToken ` method name from ` validateRefreshToken ` to ` validateRefreshToken _ happycase ` and added a new test method to validate
refactor ` JavacStep ` to use ` declaredDepsBuildResult ` and ` firstOrderStdout ` and ` firstOrderStderr `
updated the VERSION constant from " 0.9 . 1 " to " 0.9 . 2 " to reflect the latest release version
added a condition to check for DEEP _ SHORTCUT type in LoaderCursor . java to ensure proper handling of DEEP shortcuts in
added a hashCode ( ) method to the TimeGranularitySpec class to ensure consistent hash code generation for different time types and columns
changed classes visibility from private to protected in BooleanQuery , DisjunctionMaxQuery , and Similarity classes to allow subclasses to access these classes for
added a boolean flag ` useProxyResponseCode ` to control proxy response code behavior in ` HttpURLConnection ` to ensure proper handling of NTLM
refactor AArch64Move and AArch64MacroAssembler to use static imports and improve register allocation to enhance code clarity and maintainability by
server : do n ' t increment ram size if it ' s n ' t exist
added a null check for the maximum score in JSONResponseWriter . java and modified the query method in TestDistributedSearch . java to ensure proper handling
updated audio recoder from 22050 to 44100 in AudioRecorderTest . java to adjust audio playback duration for better audio quality
updated the calculation of newOriginX in RocketFigure . java to adjust the origin based on the scale factor to ensure correct positioning of the
updated DruidQueryBasedInputFormat to check for non - empty data sources and initialized intervals to use DEFAULT _ INTERVAL to ensure proper handling of empty
added ORIGINAL _ TYPE ( " Original Type " ) to the CustomProperty class and updated regex patterns in CustomPropertyTest to enhance property validation
added a new method ` create ` to the ` Index ` class to create an instance of ` IndexImpl ` to facilitate the creation of an index
removed redundant assignment of checkLowerBoundaryPeriod and checkUpperBoundaryPeriod in Dates . java to simplify the code and improve readability
updated schema compatibility logic to include location parameter and added a new test for schema incompatibility to improve compatibility checks and ensure correctness of schema compatibility
added support for entity path handling and updated join logic in QueryUtils . java to enhance data integrity by ensuring correct association types are processed correctly
updated synchronization in TestSpanHandler to ensure thread safety when accessing spans to improve thread safety and ensure thread safety when accessing spans
updated method parameters from List < Object > to List < ? > in multiple classes to allow for more flexible argument types in method signatures
changed exception handling from error logging to debug logging for username and default realm in ViewContextImpl . java to improve logging clarity and provide more informative
refactor OAuth2AccessTokenEntity class to improve code organization to enhance maintainability and readability of the code
updated error messages to remove " STATUS = DOWN " and added a null check for the invocation in multiple classes to improve clarity of error messages and
added new project resources for iOS data and moe resources in GdxSetup . java to ensure proper resource management for different iOS environments
updated TestSearcherManager to use ConcurrentMergeScheduler instead of ArrayList and added a new method to set the merge scheduler to improve performance by utilizing a
modified condition in QTestUtil and improved list handling in GenericUDTFInline to enhance code robustness and prevent potential null pointer exceptions
refactor MapIterable , FJIterate , and ParallelIterate classes to improve code organization and maintainability
added multiple calls to ` e . preventDefault ( ) ` in ` SpreadsheetKeyListenerW . java ` to ensure proper handling of preventDefault events
hhh - 12274 fix osgi osgi stop ( ) test
update timeout calculation in HikariPool to use connectionTimeout instead of elapsedTimeMs ( start ) to ensure proper timeout calculation for connection connections
added a non - packaged resource directory and modified the createComponentFile method to create a component description file to ensure that the component description file is
updated file name handling in Compat . java and FileOpener . java to improve file naming consistency and ensure correct file handling
changed the return type of the row ( ) method from Cell < T > to void to simplify the method signature and improve code clarity
added a check for duplicate port numbers in the BesuCommand class and corresponding tests in BesuCommandTest to ensure correct handling of multiple port numbers
added null mask functionality to WebSocketClient and updated WebSocketConnection initialization to use FixedMaskGen to improve WebSocket connection handling by allowing customizable mask generation
refactor the ` genUDTFPlan ` method to return a ` Pair < RelNode , RowResolver > ` instead of creating a new
added node selection statistics for bucketed and non - preferred and non - preferred nodes in the NodeScheduler and TopologyAwareNodeSelector classes to enhance
added a new file ` Person . java ` with a private ` name ` field and its getter / setter methods to provide a way to store and
added a boolean variable ` hasOwnerPtr ` and modified the execution logic in ` CPlatformWindow . java ` to ensure proper handling of the owner
added clock animation functionality to PlaybackOverlayFragment to improve user experience by providing a smoother transition to the clock
replaced multiple calls to world . updateComparatorOutputLevel ( pos ) with getPos ( ) in multiple files to improve code readability and maintainability
removed the ' final ' modifier from the ` IMPL ` variable and added security exception handling for the ` SegmentReader ` class to improve code clarity
added SwingUtilities . invokeLater to fireCellUpdatedEvent in Sudoku . java to ensure that the event fired from the SwingUtilities is notified when the cell
replaced instances of ` DefaultInetAddressAdapter ` with ` Class < InetAddress > ` and removed the ` INET _ ADDRESS _ ADAP
added methods to retrieve double , long , boolean , and string values in LongSeries to enhance functionality for handling null values in the Series class
updated the option from " -- no - audio - time - stretch " to " -- audio - time - stretch " in VideoManager . java to
updated boundary checks in GeoRelationUtils , GeoUtils , and TestGeoPointQuery to use Math . max instead of Math . min to improve accuracy
cloudstack - 5292 : fix bug in getdiskofferingbyid ( ) method in vmmanagerimpl
added cleanup method to HazelcastTest to ensure proper resource management and prevent memory leaks
added exception handling for AES cipher modes in BlockCipherTest . java to ensure proper validation of cipher modes and provide clearer error messages
added filters for printing operations logs in QFileClient . java to enhance logging capabilities
added new classes ChildIntroduction , InjectParentInterface , and ParentInterface for handling type argument injection to enhance type safety and maintainability of the
added a null check for the current connection address in ProtocolProviderServiceSipImpl . java to ensure the current connection address is set before use it
replaced Math . addExact with MathUtils . cappedAdd for demand calculation to simplify calculation logic and improve performance by utilizing MathUtils
refactor image output handling to use try - with - resources for better resource management to ensure proper resource management and prevent potential memory leaks
replaced calls to ` TvApp . getApplication ( ) . showSearch ( Activity , boolean musicOnly ) ` with ` Intent ` in multiple activities
removed the ' this ' declaration from the ` SchemaCrawlerOptions ` constructor and updated the ` toString ` method in ` GrepOptions ` to improve
http : / / issues . apache . org / jira / browse / amq - 4217 - add osgi configuration to the web console
added a @ Autowired annotation to PersonRepository in RepositoryIndexCreationIntegrationTests . java to enable dependency injection for the PersonRepository class
changed exception type from Exception to InterruptedException in UIServer . java and updated log message formatting in TestVertxUIManual . java to improve error
refactor case statements in BlockCactus . java for improved readability to enhance maintainability and clarity of the codebase
refactor mouse event handling in ThemeSelector . java to use MouseMotionAdapter for mouse events to improve code readability and maintainability by encap
replaced ` AbstractMinMulticastFlowControlFields ` with ` AbstractMinMulticastFlowControlRhsPadding ` and refactored related byte classes to
added vertical alignment and vertical alignment parameters to the editStringAt method in IOSImplementation . java and IOSNative . java to enhance editing functionality
updated exception handling in StatTokSentAnnotator to throw an IllegalArgumentException instead of throwing an exception to improve error handling and provide clearer
added a condition to check if the query is distinct and modified group column handling in QueryGenerator to ensure that distinct queries are handled correctly based on query
change method visibility from private to public and introduce a new method to get the similarity score in JNINativeLinkage to allow external access to the
bug fix : jsyntaxtextarea do n ' t work with jmeter 2 . x
added null check for children before iterating in PartitionPruner . java to avoid potential NullPointerException when children is null
added ` tokenPosition ` and ` currentPosition ` fields to ` MessagePackParser ` and updated corresponding tests in ` MessagePackParserTest ` to
added locale setting and cleanup in AbstractSolrMorphlineTestBase . java to ensure default locale is set to english during tests
removed unnecessary conditional checks for DrawerActivity in LauncherFragment . java to simplify the code and improve readability
added a new file ` MetricsReporterTest . java ` to implement unit tests for the ` MetricsReporter ` class to ensure proper functionality and functionality of
added a typeCacheMap field to OsgiServiceRegistry and removed unused import from CamelMockBundleContext to improve performance and reduce dependencies on service registry
added equals and hashCode methods to the Rectangle class to ensure proper object comparison and hash code generation
[ hotfix ] [ kinesisp ] add test _ nonexistenttopic to streamkafkaptest
refactor DSAParameterGenerator to use BigInteger . ONE instead of a static final BigInteger for strength checks to improve code readability and maintainability by
added support for FQDN configuration in LLAP configurations and refactored LlapUtil methods for better host name retrieval to enhance flexibility
test : fix clientoutofmemoryhandlertest . testoutofmemory
added a method to retrieve the getCmoObjectId for shape IDs across multiple shapes to ensure correct object ID retrieval for shapes in the HS
added a new test method ` testWithDistinctScalarQuery ` to ` DistinctTest . java ` to ensure that the ` distinct ` query works
refactor Driver , SearchTravRetLoadFieldSelectorTask , and SearchTravTask classes to improve code organization and maintainability
added extension adapter registration and unregistration methods to ManagedKubernetesClient to ensure proper handling of ExtensionAdapter instances in the client
refactor DetailsDescriptionPresenter and Utils to utilize a new method getInfoRow for retrieving subtitle information to improve code readability and maintainability by
updated JUnit annotations from ` @ Before ` to ` @ AfterEach ` in ` TestAuthHandlerBoot ` and ` TestRSAProviderTokenManager
added exception handling for generating summary HTML in BugCollectionBugReporter and XMLBugReporter to improve robustness by logging exceptions when generating summary HTML
replaced calls to ` intPool . reset ( ) ` with ` bytePool . reset ( ) ` in ` TermsHash . java ` to
added multiple @ Override annotations in FilterInputStream . java to ensure proper method overriding and improve code clarity
added a new ` WindowSessionDelegateU ` class and modified the API level check in ` ShadowWindowManagerGlobal . java ` to ensure compatibility with
updated UrlHelper to handle both HTTP and HTTPS schemes correctly and added a new test for forcing URLs to ensure correct handling of different request schemes
added MSSQLDatabase import for OracleDatabase and MSSQLDatabase in AddForeignKeyConstraintGenerator . java to ensure compatibility with MSSQLDatabase for foreign key
hbase - 24195 fix checkstyle issue in hstore . replacestorefiles
removed debug print statements from ContainerEmzuliPipe _ BC8 . java and added FilterEventHandler . java for pipe event handling to streamline
simonstewart : do n ' t log html identifier in debug mode
updated method calls from ` getProducedTableSchema ( ) ` to ` getTableSchema ( ) ` in ` HiveLookupTableSource ` and `
refactor Player , ListenerSet , ExoPlayer , ExoPlayerImpl , ExoPlayerImpl , ExoPlayerImpl , and Exo
updated the schema name assignment in SequenceSnapshotGenerator . java to utilize CatalogAndSchema ' s customize method to ensure the correct schema name is used
updated color calculations in SpriteBatch , SpriteCache , and LwjglDebugStarter to use AlphaTest instead of ProgressiveJ
fixed - redissonconnection . tocompletableFuture ( ) . join ( ) method return batchpromise instead of tocompletableFuture ( ) . join (
added base URL conversions to statistic year cores in SolrLoggerServiceImpl . java to ensure proper handling of HTTP and HTTPS URLs in
renamed ` launchTask ` methods to ` launchTaskFromView ` and updated method signatures to use ` Task ` objects instead of ` TaskHolder `
refactor MorfologikFilter to use a new method for loading dictionary resources to improve code clarity and maintainability by centralizing dictionary resource loading
updated sorting options in GridFragment to use " _ community _ rating " instead of " _ stars " and " lbl _ critic _ rating " to
added imports for ViewKt and ListRow in CustomListRowPresenter . java to enable visibility checks for non - ListRows in the header
refactor client handling in StressAction . java to use try - finally blocks for better readability to improve code clarity and ensure proper resource management
refactor HttpClient class to improve code readability to enhance maintainability and facilitate future updates
replaced calls to ` isCaseSensitive ( ) ` with ` isCaseSensitive ( ) ` in ` CatalogAndSchema ` and ` CatalogComparator `
added JACKSON module registration and initialization for JSR310 support to ensure compatibility with Jackson ' s JSR310 serializers
updated import statement from ` org . apache . log4j . MDC ` to ` org . slf4j . MDC ` to ensure compatibility with
replaced TypeBearer with Type in PhiTypeResolver . java to simplify type handling and improve code clarity
removed unnecessary line breaks in CoinbaseTransaction . java to improve code readability and maintainability
added a method ` getBuildTargetList ` to ` BuckConfig ` and modified ` ProjectCommand ` to utilize this method to improve build target
removed redundant call to System . gc ( ) in Ping . java to streamline code and improve performance
updated ` OCFile ` to use ` ContentResolver ` instead of ` ContentProvider ` to streamline the code and improve clarity by using the
refactor event handling in ReportPanel . java to improve clarity and maintainability to enhance code readability and maintainability
added a null check for slotOwner in TestingLogicalSlot . java to ensure slotOwner is not null to prevent potential NullPointerExceptions
added a new file ` RemoveCallsToSystemGc . java ` with recipes for removing calls to ` System . gc ( ) ` and
removed redundant super ( ) calls from multiple exception classes to streamline exception handling and improve code clarity
added a method to set the UIID for setting the icon in ScaleImageLabel to ensure the icon is correctly displayed when the label is updated
updated variable names from ` foundEntry ` to ` update ` in FeedUpdateService . java to improve clarity and consistency in variable naming
added support for " - cp " in command - line arguments in Main . java to enhance command - line flexibility by allowing additional command - line arguments
updated the link parameter from ` options = { " default " , " nodeprecated " } ` to ` compiler = { " default " } `
updated initialization logic in StorageService . java to ensure proper initialization of the storage service
refactor Test7196045 . java for improved readability to enhance maintainability and facilitate future updates
updated density and decay values in ShaderParametersLightShaft . java and adjusted decay values in ShaderParametersLightShaft . java to improve clarity and
added ` withState ` and ` stateData ` fields to ` OidcConfiguration ` , modified ` OidcRedirectActionBuilder ` to
added null checks for unique and non - nullable columns in BaseTableDdl . java to ensure unique constraints are correctly applied when nullable
updated federated share handling in UsersAndGroupsSearchProvider and EditShareFragment to enhance file sharing control based on federated sharing status
added a method ` needsDocValues ( ) ` to the ` TestBBoxStrategy ` class to determine if doc values need to be included in
updated BufferAlignmentAgent , BufferAlignmentInterceptor , and StringWriterOutputManager classes to improve error handling and provide clearer error messages for unknown source files
added a new method ` intForEach ` in ` Int2ObjectHashMap ` and updated related imports in ` SpecialisationGenerator ` to enhance
fix scoreboard save data not share with the global map storage . close # 1498
changed the return type of count methods from Long to long in QueryDslMongoRepository , QueryDslPredicateExecutor , and SimpleMongoRepository to
refactor MTree snapshot creation logic to improve clarity and consistency to enhance readability and maintainability of the logging output
updated the ` dotProductScore ` calculation in ` VectorUtil ` and updated test assertions in ` TestVectorUtil ` to improve accuracy of dot product
added an IRREVERSIBLE _ THRESHOLD constant and methods to set and get the last confirmed block number in DynamicPropertiesStore and Manager classes
refactor locale setting logic in GpsMainActivity , MainPreferenceActivity , and Systems to utilize PreferenceHelper for locale management to improve code
added a condition to check if the new database was created in LauncherClings . java and implemented methods in LauncherProvider . java to
refactor collection handling in BasicAclEntryAfterInvocationCollectionFilteringProvider . java to improve code readability and maintainability
added a null check for the ` datamodel ` variable before determining the ` is64Bit ` variable to ensure proper handling of ` datamodel `
added a check for the current thread in TestIndexWriterDelete . java to prevent unnecessary processing when the current thread differs from the current thread
changed the access modifier of the closeDatabase method from private to protected to restrict access to the method for better encapsulation
updated imports and imports in FullDetailsActivity , FullDetailsActivity , and BaseRowItem to use ModelCompat to ensure compatibility with the latest
added a loop to set imported SVG attributes in BatikSVGDrawer . java to ensure that imported SVG attributes are properly processed in the document
refactor error handling in ConsoleKeys . java to use a try - catch block to improve readability and maintainability of the code
added functionality to set the " WaitForResult " attribute to false in AndroidImplementation and CodenameOneActivity to ensure proper handling of the " WaitForResult
refactor ` PriorityQueue ` and related classes to use ` Supplier < T > ` instead of a boolean parameter to improve flexibility in handling sentinel
replace WidgetImageView with TextView and update widget description handling in WidgetCell . java to improve clarity and functionality of widget description display based on widget information
added a maximum attribute count limit in the Attribute class to prevent exceeding the allowed number of attribute types
update package structure in PredicatesTest . java to reflect the new package structure to improve organization and clarity of predicate - related components
camel - 11436 : camel - core - add caseinsensitive to the default headerfilterstrategy to allow for case - insensitive filtering .
refactor inline layout logic in InlineLayout and Breaker classes to improve handling of boundary conditions to enhance code clarity and maintainability while ensuring proper handling
added avatar radius dimensions and null checks in ShareUserListAdapter . java to improve robustness and prevent potential NullPointerExceptions
removed android packages and excluded Android SDK packages from the instrumenting logic to streamline the code and improve compatibility with Android SDK
added a check for insert destinations before the source association in BrowserContentPane . java to ensure proper handling of insert destinations before the source association
refactor memory limit calculation to use a dedicated method for retrieving the memory limit file path to improve code clarity and maintainability by centralizing memory limit
added a new constant ` EMPTY _ INSTANCE ` in ` AbstractCxxDeps ` and modified ` CxxLibraryDescription ` to use it to improve
added a null check for the rule in JavaTestRule to throw a HumanReadableException when the source is not among its dependencies to improve error handling
refactor proxy initialization to use a map for better clarity and maintainability to improve code readability and maintainability by reducing redundancy
added a check for negative index values in the StringUtils class to ensure that the index is non - negative before proceeding
increased timeout duration from 100 milliseconds to 500 milliseconds and adjusted sleep duration from 1000 milliseconds to 500 milliseconds to allow more time for timeouts and improve test
refactor TaskOverlayFactoryGo to use a AssistContentRequester for assist content requesting to improve flexibility and maintainability of assist content request
updated the method for retrieving the witness address to use encode58Check instead of createReadableString to ensure that the witness address is correctly encoded before processing
refactor DefaultMethodRegressionTests for improved readability to enhance maintainability and facilitate future updates
refactor WorkloadManagerMxBean to improve code structure to enhance maintainability and readability of the code
renamed KafkaProducerException to KafkaException in KafkaOutboundAdapterParserTests . java to improve clarity and consistency in naming conventions
added a call to container . closeLoader ( ) in DesktopGeneratorController . java to ensure proper resource management and prevent memory leaks
added ` clear ` method to ` ExceptionThrowingTaskletStub ` and corresponding tests in ` FaultTolerantExceptionClassesTests ` to
updated error message formatting in ConfigBuilder . java to include both RemoteApplicationRunner and BeamContainerRunner to improve clarity of error messages for better debugging
added a ` extraProperties ` parameter to multiple classes to enhance the ability to specify additional tuner configurations
added handling for in - progress realtime segments in PinotRealtimeSegmentsManager to ensure only valid instance names are added to the list of segments
added a null check for disabled touchables in Table . java to prevent potential NullPointerExceptions when accessing disabled touchables
added a new test method ` testBuildUsingPrecompiledHeaderInOtherCell ` to ` PrecompiledHeaderIntegrationTest ` to ensure that the build uses
added a null check for cacheConfig in AbstractCacheAllPartitionsRequest . java to ensure proper error handling when the cache configuration is not yet created
refactor npm module installation logic into a separate method ` isNodePackageInstalled ` to improve code readability and maintainability by encapsulating
added MBeanContainer and Destroyable annotations to MBeanContainer and Destroyable classes to enable management of MBean registrations and operations for components
changed the condition from ` if ( settings . inAppBrowser ) ` to ` if ( false ) ` in ` LongClickableSpan . java `
updated string comparisons to use ` . equals ( ) ` instead of ` . equals ( ) ` for equality checks to improve code readability and
updated the condition in ` isReifiable ` and added new classes ` T6558559a ` and ` T6558559b
updated player print statements in WorldEditListener . java to include position and position information to improve clarity and accuracy of player interactions in the world edit
[ hotfix ] [ kafka ] make sure to shutdown the executor when the consumer be stop .
removed the default implementation of the ` examples ( ) ` method from the ` Schema ` class to simplify the code by eliminating unnecessary default implementation
modified thread interrupt logic in AgentRunner . java to return early instead of interrupting the thread to ensure proper handling of timeouts and improve error handling
remove time column from the result set in DefaultAggregationLoader and PinotDataSourceDimensionFilters to ensure proper removal of time column dimensions from the data source
updated condition in FacetComponent . java to improve readability to enhance code clarity and maintainability
replaced direct calls to ` LinkerProvider ` with ` CxxPlatforms . getParseTimeDeps ( cxxPlatform ) ` in Rust
added name property getter and setter methods to JdbcAuthenticationProperties , AbstractLdapProperties , and NtlmProperties classes to allow configuration of the name property
added debugging information and improved error handling in CFGPrinterObserver , IdealGraphPrinterDumpHandler , and IGVPrinterDumpHandler to enhance debugging
phoenix - 1078 small scan for point lookups should not be use in phoenix . query . small _ scan _
updated the formatting of the RetryGatewayFilterFactory to include routeId and exception details to enhance readability and maintainability of the code
replaced direct calls to ` redisplay ( ) ` with ` callWidget ( name ) ` in ` LineReaderImpl . java ` to improve code
refactor overview showing logic in ActivityControlHelper , WindowTransformSwipeHandler , and WindowTransformSwipeHandler to improve code readability and maintainability by
removed unnecessary null checks for min and max packed values in CheckIndex . java and added a new test method in TestPointValues . java to improve
updated the publish method call from ` true ` to ` updateLastState ` in ` ZkController . java ` to ensure the state updates the
updated string concatenation syntax in MetastoreDirectSqlUtils . java to improve readability and maintainability of the code
removed the call to exp . add ( 0 , null ) in SpliteratorCollisions . java to simplify the code and improve performance
simonstewart : make the text case - sensitive condition case - insensitive
removed redundant ` do ` statements from ` while ( true ) ` calls in ` ManyToManyConcurrentArrayQueue . java ` to streamline the loop
# 118 - enh : add query engine . forwardonlyfetchsize ( ) and query engine . fetchsize ( ) .
added a check for ClosedChannelException before sending 404 back to the server to avoid sending a 404 back to the client if the channel is already
pdfbox - 4892 : initialize pdobjects to use the size of beads , a suggest by valerybokov
updated window radius initialization in QuickstepAppTransitionManagerImpl . java to use a constant for initial window radius to improve flexibility in window positioning based
refactor background handling in DesktopTaskView to use View instead of ShapeDrawable to improve code clarity and maintainability by centralizing background view management
refactor UpstreamCheckServiceTest to create a new instance of UpstreamCheckService to improve code readability and maintainability by centralizing the
removed redundant warnings and debug statements in AbstractSession and AbstractSessionManager classes to improve code readability and maintainability
replaced error logging with a return statement to return locks instead of throwing LockException to simplify error handling and improve code readability
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
added a boolean flag ` containsCustomData ` and modified mipmap generation logic based on its value to ensure mipmap generation only occurs when
updated test cases in DefaultMaskingFormatterTest to use quotes instead of hardcoded strings to improve readability and maintainability of the test cases
added selectable property and methods to manage selection state in the List class to improve user interaction by preventing touch events when not selectable
removed redundant check for empty field vectors in LlapArrowBatchRecordReader . java to streamline the code by eliminating unnecessary checks
refactor PolicyContext to improve file separator handling and print statements to enhance readability and maintainability of the code
replaced HashSet with ArrayList for flatQueries and expandQueries in FieldQuery . java to improve performance by utilizing a more efficient data structure
refactor TLSRestrictions class to improve code readability to enhance maintainability and facilitate future updates
added a Runnable to ensure the producer is not null before closing it to prevent potential NullPointerExceptions when closing the producer
updated the ` assertNodeStateProvider ` method to include a ` ignorableNodeValues ` parameter and modified its usage in ` TestSnapshotCloudManager `
added a check to delete the LOCK file before deleting it in RocksdbMavenPomCache . java to ensure that the lock file is
updated the instantiation of NIOServerCnxn . Factory to use InetSocketAddress instead of a hardcoded integer to ensure compatibility with IPv6
refactored the ` getResponse ` method in ` RestClient ` to improve error handling and logging to enhance maintainability and traceability of web service
updated the handling of segment tar URI arrays in IngestionUtils . java to improve performance by avoiding unnecessary array creation
updated loginStudent method calls to use TEST _ STUDENT1 _ PASSWORD instead of TEST _ STUDENT2 _ ACCOUNT
added a null check for mCurrentItem in EnhancedBrowseFragment , StdBrowseFragment , and EnhancedBrowseFragment to ensure proper handling
increased the number of strings from 500 to 100 in TestSpecialOperations . java to ensure that the number of strings is at least 100 to avoid overflow
refactor ByteArrayInStream initialization and remove hexToBytes method from WKBAttributeIO . java to simplify byte conversion logic and improve code maintainability
rename method ` messageWithHeaderEntry ` to ` messageWithHeaderKey ` in ` MockitoMessageMatchers . java ` to improve clarity by using
added a method to check if a transition is a direct substate in AbstractStateMachine to ensure proper handling of transitions in the state machine
added type checks for ListMultimap and SetMultimap in MultimapSubject and corresponding unit tests in MultimapTest to ensure correct behavior of multimap equality
added JoinOperation interface to PostJoinOperation class to enhance functionality to support join operations
added a new test method ` testDataIssue258 ` to the ` AdditionalPostgreSQLTest ` class to verify the functionality of the
added error handling for the destroyDurableSubscriber method in AMQ5035Test . java to ensure that the destroyDurableSubscriber method returns a
refactor AvaticaDatabaseMetaData to improve code readability to enhance maintainability and facilitate future updates
updated MongoDbConnectionPoolProperties to use ` @ DurationCapable ` instead of ` int ` for lifeTime , idleTime , and maxWaitTime
replace the casting of MediaFormatFactory with SipActivator ' s MediaFactory for creating audio media formats to ensure compatibility with the latest MediaFormatFactory
refactor filter handling in FacetProcessor to return a boolean indicating applied filters to improve clarity and functionality of filter processing logic
added a timeout handler to disable timeouts based on the enabled state of the TIMEOUT _ HANDLER constant to improve flexibility in handling timeout configurations
updated the initialization of ` mQuickStepStartingRotation ` to use a constant ` QUICKSTEP _ ROTATION _ UNINITIALIZED `
camel - 11436 : camel - xpath : add more debug log for xpathbuilder and xquerybuilder
updated the import statement and resource path in NNDataSet . java to use DataResource to ensure compatibility with the latest data resource structure
added a new test class ` EdgeCasesTokenizerTest ` to validate the handling of escaped back slashes in GoTokenizer to ensure correct behavior of
added a check for the " atlas " property before processing textures in AtlasTmxMapLoader . java to ensure that the map does not
camel - 10276 : camel - core - remove propertyplaceholders from camel - core .
added a call to levelDbDataSource . closeDB ( ) in BlockchainTest . java and removed redundant ReceiveSource initialization in KafkaTest . java
refactor line processing in CoreMarkdownNodeRenderer to use a new method ` getLines ` to improve code readability and maintainability by centralizing
updated import statements in WebServiceInboundGatewayParserTests . java to improve code clarity and maintainability
replaced ` ImmutableList . Builder < Object > ` with ` List < Object > ` and added deprecated methods to ` SQLBindings ` and ` Projectable
added a check for the " OpenJDK " Java VM name in the VirtualMachine class to ensure compatibility with OpenJDK VMs during
added keepAlive ( true ) to the baseUrl setting in ReactorClient . java to ensure proper resource management and prevent potential memory leaks
updated VertexAttribute constructors to use ShaderProgram ' s POSITION _ ATTRIBUTE and TEXTURE _ COORDS _ ATTRIBUTE instead of string
camel - 14263 : camel - core - add support for camel - properties to allow custom component to be use in camel - core .
refactor account retrieval logic in UnfreezeBalanceActuator . java to improve null safety and avoid potential NullPointerExceptions
update version number from 3 , 8 , 0 to 3 , 8 , 1 , and change the release status from Release to Alpha to ensure compatibility with
refactor type handling in Types . java to use ` t . unannotatedType ( ) ` instead of ` t ` to improve type
refactor assertions in StorageGroupProcessorTest to improve clarity and consistency to enhance readability and maintainability of the test code
updated multiple classes to include a DumpableCollection for environment management and added a method to retrieve all available environments to enhance debugging capabilities and ensure consistent
added a parameter ` waitbeforestart ` in ` FFMpegVideo . java ` to set the wait time for video processing to improve
removed the ` skipCorrupt ` parameter from the constructors of ` OrcEncodedDataConsumer ` and related classes to simplify the constructor signature and eliminate
updated import statements and added new test methods in AccessorsTest . java to improve code clarity and ensure correct behavior of list index operations
added a new method ` compileMethod ` to ` GraalCompiler ` and implemented a new ` frameMap ` method in ` LIRGenerator `
updated test imports and annotations in DynamoDbTicketRegistryTests , BaseAuthenticationRequestRiskCalculatorTests , and BaseAuthenticationRequestRiskCalculatorTests to
adjust the height of the boat ' s boat to account for the water target type to ensure proper handling of water blocks in the boat
updated the ` toString ( ) ` method in ` Directory ` and added a ` getLockID ( ) ` method in ` RAMDirectory `
removed the method ` allowExperimentalOptions ( ) ` from the ` allowExperimentalOptions ( ) ` method in ` Launcher . java `
added methods ` then ` and ` assertDelegateTarget ` to ` BDDAssertions ` for testing path assertions to enhance testing capabilities for path assertions
corrected variable name from ` hp ` to ` hostField ` in ` ForwardedRequestCustomizer ` and updated related tests accordingly to improve code
[ hotfix ] [ kubeconfig ] change kubeconfig log level from debug to warn
added functionality to cancel and manage file uploads in UploadListActivity to enhance user experience by allowing users to cancel or cancel uploads based on file
added a new file ` ProviderLoader . java ` and refactored ` TerminalManager . java ` to use ` ProviderLoader ` instead of `
replaced instances of ` Span ` with ` TraceMessageHeaders ` in ` StreamEnvironmentPostProcessor ` and ` StreamEnvironmentPostProcessorTests ` to use
updated the SelectFromDatabaseChangeLogStatement instantiation to use a ColumnConfig with a computed value set to simplify the selection of columns for better readability
hhh - 15499 fix test failure on postgresql ( postgresql )
added a check for non - negative dataMembersSize before calculating partitionsPerMember in InternalPartitionServiceImpl and InternalPartitionServiceLiteMemberTest to ensure
added error handling for scheduler state and improved scheduling logic in ExecutionScheduleManager , ExecutionSchedulerImpl , and ExecutionSchedulerImpl classes to enhance robustness and
refactor conditional logic in BoxBuilder . java to improve readability to enhance code clarity and maintainability
reformatted checkArgument calls in StatisticMap . java for consistency to improve code readability and maintainability
updated the return value of getStagedRectSlideEnd ( ) from 383 to 500 in TabletSplitToConfirmTimings . java to
updated WaveInfoDialog and PlacementFragment to use Core bundle strings instead of hardcoded strings to improve maintainability and readability of the code
updated conditional logic in BukkitMain to include plotArea and getOwnedPlotAbs to ensure proper handling of plot areas in Kill _ ROAD
added a test to verify the functionality of TouchExplorationEnabled in ShadowAccessibilityManagerTest to ensure that the TouchExplorationStateChangeListener is
pdfbox - 5328 : optimize cmapsubtable . getcharcodes ( ) , a suggest by valerybokov
remove testelement . propertyasstring ( ) from testelement . getname ( )
replaced instances of NPOIFSFileSystem instantiation with POIFSFileSystem . create ( big ) to simplify the code and improve readability
added plot area retrieval and null check for plot area in Move . java to ensure proper handling of plot areas and prevent potential NullPointerExceptions
updated version regex pattern in TestWebHCatE2e . java to ensure compatibility with the latest version requirements
updated the condition from ` count > 0 ` to ` count < 1 ` in ` Filters . java ` to ensure the count is within the
refactor KafkaConsumerProcessor to use beanType instead of beanDefinition for groupId and clientId to improve clarity and maintainability of the code
added a check to throw an exception if the javac execution fails to improve error handling by providing a clear error message when the execution fails
ggb - 2195 repaint the draw list when the selection be change .
camel - 14263 : camel - spring - batch - fix header - value should not be null .
added a method ` isAnimationFinished ` to check if an animation has finished to provide a way to determine if an animation has finished
added a new test method ` testCustomFavIcon _ With _ LineBreaks ` in ` LoginMockMvcTests . java ` to ensure
added null check for ` otherUrl ` in ` TimeLineCursorAdapter . java ` and updated refreshing text in ` HomeFragment . java `
updated the parameter name from ` newValue ` to ` newValue0 ` in ` RadioButtonTreeItem ` and added space replacement in ` DrawEquationWeb
refactor ObjectHashSet class to improve code readability to enhance maintainability and facilitate future updates
simplified null comparison logic in DataUtilities . java to improve code readability and maintainability
fix mc - 12770 , allow for deletion of enchanted book , allow for deletion of enchanted book , mc - 12770
add unit tests for the AsyncResource class to ensure correct behavior of async requests and responses in the microprofile server
rename ` target - flat ` to ` target - user ` and update related constants from ` target - flat ` to ` target - user `
added error handling for SendFailedException in MailService to improve logging clarity and provide better error reporting for failed messages
replaced calls to ` resetTaskItemView ( ) ` with ` resetToEmptyUi ( ) ` in ` TaskHolder . java ` and `
added unit tests for retrieving partitions by name in HiveMetaStoreClientApiArgumentsChecker . java to ensure correct retrieval of partitions with different batch sizes
added a closing brace in FileListListAdapter . java to improve code clarity and maintainability
changed the type of ` fileId ` and ` sharees ` from ` ArrayList ` to ` List ` in ` OCFile ` and `
updated the position of removeViewInLayout from 1 to getChildCount ( getChildCount ( ) - 2 ) in BubbleBarView . java to correct the
removed unnecessary references to " org . eclipse . jetty . websocket . util . server . internal . " and removed the " org . eclipse . jetty
modified the S3Request constructor to set expiresSeconds to false and modified the S3Request initialization to ensure compatibility with the latest S3 API changes
refactored the initializeComponents method to remove unnecessary parameters to simplify the code and improve readability by eliminating unnecessary parameters
added error handling for zero splits in DeweyNumber and created a test for zero splits in DeweyNumberTest to ensure proper
added a static string variable ` categorySetString ` and updated the return statement in ` MwVolleyApi . java ` to improve readability
updated assertions in WebSocketClientTest . java for clarity to improve readability and maintainability of the test code
added a null check for the classLoader before returning an empty array in WebappLoader to avoid potential NullPointerExceptions when the classLoader is not provided
refactor persistent field collection logic in PersistentAttributeTransformer . java to improve readability and maintainability of the code
pdfbox - 4892 : avoid npe , a suggest by valerybokov
added a new test class ` TestPorterStemFilter ` to validate the functionality of the ` PorterStemFilter ` to ensure correct functionality and functionality
modified the ` postBatchMutate ` method to include a success flag and modified the ` postBatchMutateIndispensably ` method to include a
updated package names from ` org . springframework . batch . core . exlore . support ` to ` org . springframework . batch .
added synchronization to chat panel management in ChatWindowManager . java to ensure thread safety when accessing chat panel state
removed multiple calls to Sys . touch ( ) across multiple Java files to streamline code by eliminating unnecessary static imports
added " - mardu " and " - unknown " to the untrackedFiles command in HgCmdLineInterface , NoOpCmdLine
camel - 14263 : camel - netty - improve the performance of camel - netty and camel - netty
refactor DirectionalLight , PointLight , and SpotLight to be final in DirectionalLight , PointLight , and SpotLight classes
updated width and height calculations in X11GraphicsConfig and WGLGraphicsConfig to ensure correct dimensions are used for rendering targets
added ` toString ( ) ` methods to ` DelegatingSecurityContextCallable ` , ` DelegatingSecurityContextRunnable ` , and corresponding unit tests to
added a new ` AnnoFilterTreeSet ` class to filter annotation classes based on the current context class loader to improve class matching logic based on
updated the overflow handling logic in BytesColumnVector . java to handle positive and negative lengths more effectively to ensure proper handling of integer overflow scenarios
refactor assertions in WriteBehindMapStoreWithEvictionsTest to use a new assertTask for thread - safety to improve test reliability by
updated method signatures in MotifScrollPaneUI and XTextAreaPeer to use JComponent instead of JScrollPane in MotifScrollPaneUI and
added a method ` isEqual ( PolyFunction poly ) ` to the ` PolyFunction ` class and updated the ` GeoFunction ` class to util
added a null check for the table before retrieving the column class to avoid potential NullPointerExceptions when the table is not initialized
added error handling for class loading in CustomChangeWrapper . java to improve robustness by catching ClassCastException during class instantiation
added methods to retrieve BuckConfig and its optional whitelist in DistBuildConfig , DistBuildFileHashes , and RecordingFileHashLoader to
updated the ` isDoubleEntryEnabled ` method to return a default boolean instead of a default value and adjusted related logic in ` ExportDialogFragment ` to
added JUnit @ Ignore annotation to BasicDistributedZkTest . java to mark the test as ignored due to tracking down issues
changed the return type of ` doJoin ` methods from ` void ` to ` boolean ` in ` JoinTemplate ` , ` JoinWorker ` ,
removed the ` getAutodeps ( ) ` method from ` JavaLibraryDescription . java ` to streamline the code by eliminating unused functionality
updated Intent flags in LauncherTimelineCursorAdapter to include FLAG _ ACTIVITY _ NEW _ TASK to ensure that the action is only executed when
added a method ` checkPagingOrderBy ( ) ` to the ` SpiQuery ` class to enhance paging functionality for better query performance
updated assertions in RepositoryConventionPluginTests to retrieve the second MavenArtifactRepository from the list to ensure correct repository URLs are retrieved for the specified repository
add a new ` AffiliationTask ` class to manage affiliate affiliations to facilitate the creation and management of affiliate nodes in the pubsub node
replace RequestUtil with URI normalization and add error handling for invalid taglib URIs to improve error handling and provide clearer error messages when invalid URI
changed the access modifier of the buildUserProfileByClassCompleteName method from private to public to allow access to the method from other classes
added array - based update functionality in CacheKey . java and updated related test cases in CacheKeyTest . java to improve cache key handling and ensure
refactor GnomeFileTypeDetector to utilize FileSystemProvider for file type detection to enhance file type detection capabilities across different operating systems
added a call to ` wsSession . close ( ) ` in ` TestWsWebSocketContainer . java ` to ensure proper resource management and prevent
replaced ShadowVirtualDeviceManagerTest with ShadowVirtualDeviceManager and added VirtualSensorCallbackDelegate and VirtualSensorDirectChannelCallback methods in ShadowVirtualDeviceManager
added a condition to check if the context object is not equal to the contextBeforeExecution parameter in HttpSessionSecurityContextRepository to ensure that the context is
updated loopback address handling in NetUtil . java to handle both up and point - to - point addresses to ensure correct handling of loopback addresses
changed BUF _ SIZE from BUF _ SIZE to DEFAULT _ BUF _ SIZE and modified buffer initialization in Zlib . java to enhance default
added secure validation and improved error handling in various classes to enhance security by ensuring proper handling of retrieval methods and improving error messaging
added a boolean flag ` iconChangeListenerInstalled ` and modified the icon action listener removal logic to ensure that the icon listener is only removed when it is
added Russian language support in Language . java to enhance language support for Russian users
hhh - 15564 fix wrong temporal unit for duration in sqm query
disable frame state verification in substrategraphkit
added configuration settings for robolectric SDKs and alwaysIncludeVariantMarkers in RobolectricTestRunnerTest . java to ensure test configuration is correctly reset
added a system class " org . slf4j . " to the ViewClassLoader and implemented tests for the parent class loader to ensure correct class loading
updated conditional checks in ChangePackaging . java and added a new test in ChangePackagingTest . java to ensure proper handling of null packaging and
updated file download method calls in FileDownloadViaHttpGetTest and FileDownloadViaProxyTest to include an extension to enhance file download functionality by allowing
added a call to ` nk _ buffer _ clear ( cmds ) ` in ` GLFWDemo . java ` to clear the command
rename ` defaultUnits ` to ` preferredUnits ` across multiple files to improve clarity and consistency in naming conventions
updated date formatting in DatePatternConverterTest to use UTC timezone to ensure accurate date formatting based on the specified time zone
reformatted return statement in Terminator . java to improve code readability and maintainability
updated error messages in FileSystem , LocalFileSystem , and DistributedFileSystem classes to provide clearer guidance on resolving file URIs to improve error handling and
( chore ) camel - jabref : increase timeout for show tracking notification
updated FtpReconnectAttemptServerStoppedIT to use Awaitility for reconnect attempts and added countConnections method to FtpEmbeddedService to improve reliability
updated the KeyedProperties class to extend ConcurrentSkipListMap instead of ConcurrentHashMap to ensure thread - safety for concurrent modifications
added an ` ignore ` method to ` JavaUtilLog ` , ` Logger ` , and ` StdErrLog ` classes to manage ignored logs to
added a null check for runningTaskView in LauncherActivityControllerHelper . java to prevent potential NullPointerExceptions during execution
removed unnecessary casting in getDamage ( ) calls in BukkitWorld . java to simplify code and improve readability
removed the use of ` GraphicsUtil . cleanImage ( img ) ` in ` PanelManager . java ` to streamline image handling by eliminating unnecessary
added MMapDirectoryFactory and SimpleFSDirectoryFactory to handle directory creation and unmap functionality to enhance directory management capabilities for users using MMap and
added a null check for the ` ic ` object before initializing ` cleanUpColor ` to avoid potential NullPointerExceptions when ` ic ` is null
updated the assertion in QueryEqualityTest from " field1 _ s " to " field1 _ s " to ensure the correct field reference is used
refactor ExtendedOperatingSystemMXBeanImpl to improve code readability to enhance maintainability and facilitate future updates
added functionality to install left commands and update the title bar status based on the client ' s property to improve user interface by ensuring the right commands are
added a new boolean field ` advanceWindowed ` and modified window setup logic in ` TweetActivity ` , ` UserProfileActivity ` , and
added SybaseDatabase to the DropPrimaryKeyGenerator condition to ensure compatibility with Sybase database types
refactor Client class to improve code readability to enhance maintainability and facilitate future updates
[ java ] reset the last recording position when the leader be ready .
replace invalidate ( ) with setCellLayoutPressedOrFocusedIcon ( ) in BubbleTextView . java and implement shouldDelayChildPressedState ( )
added a return statement to the return statement in NearCachedClientMapProxy . java to ensure proper handling of client map requests
updated package - info . java files for mmm and ppp packages to improve package documentation clarity and maintainability
added a shutdown method to the HTTP server in ListenHTTP . java to handle potential exceptions when starting the server to ensure proper shutdown of the HTTP
camel - aws2 - s3 : fix checkstyle issue in camel - aws2 - s3
[ hotfix ] [ webmonitor ] remove unused parameter from taskmanagermetricshandler
added a method to drop keys that exist in the 226 to 227 version of the DB to ensure that keys are removed from the database when
added a new test class ` TestThriftCLIServiceSecurity ` to verify the validity of the password in TOpenSessionReq to ensure that the password
added a maxEnergyLimit field and updated energy limit assignment logic in VMActuator . java to ensure the maximum energy limit is set based on
added maxInMemorySize property and its getter / setter in HttpClientProperties and updated webClientPlugin constructor to accept HttpClientProperties to allow configurable maximum in
refactor caching logic in Cache . java to improve performance and maintainability of the code
added new Cucumber test classes for RunCucumberTest , StepDefinitions , and Example classes to facilitate testing of Cucumber tests in
added error handling for JSON parsing in TypeJsonUtils and updated test cases in TestArrayOperators to improve robustness by handling JSON parsing errors and
removed duplicate hex strings in Utf8StringBuilderTest . java to streamline the code and improve readability
added a check for parameter sets before appending to parameters in Params . java to ensure parameters are only appended if they are set before processing
camel - 16137 : camel - core - allow to specify a maximum number of output on a loadbalancer .
updated the assertion in TestIndexWriterExceptions to set the maximum buffered documents to ensure that the test accurately reflects the maximum number of documents written
replaced instances of ` putUnencodedChars ` with ` putUnencodedChars ` and ` putUnencodedChars ` with ` Sha1HashCode `
removed multiple static methods from AsmRuntime . java to streamline code by eliminating unused methods
added new biome tags for MANGROVE _ SWAMP , IS _ WET , IS _ HOT , IS _ SPOOK ,
refactor image loading logic in PApplet . java to utilize ExecutorService and improve thread management to enhance performance and maintainability of image processing
changed access modifiers of fields and methods in BaseTableUpsertMetadataManager to protected and refactored preloading logic to improve encapsulation and
updated date strings from " \ u0646 \ u0648 \ u0627 " to " \ u0623 \ u064a
replaced instances of ` equals ` with ` hasImageEqualTo ` in ` AbstractSunSecureRule . java ` to improve clarity and consistency in image
camel - 13236 : camel - jbang - add -- repos option to run - dcamel . jbang
refactor score handling in CrawlDbReader . java to handle NaN scores more gracefully to improve performance by avoiding unnecessary processing of NaN scores
added a cleanup method to manage file modification times in OnStartupTriggeringPolicyTest . java to ensure proper resource management and prevent memory leaks during
replaced ` values . requestFocus ( ) ` with ` values . requestFocusInWindow ( ) ` in ` FilterConditionEditor . java ` and updated focus
[ hotfix ] [ test ] make sure checkpointscleaner be close asynchronously
added a new file XPathWhiteSpaceTest . java that tests XML schema parsing with a specified file to ensure proper validation of XML schemas by validating
add a check to ensure the trie log is not empty before persisting to the world state storage to avoid potential null pointer exceptions when the trie log
refactored the FilledNewArrayInstruction class to improve code readability to enhance maintainability and facilitate future updates
added timeouts to multiple @ Test annotations in SimpleNetworkTest . java to allow more time for tests to complete before proceeding
updated the method to check if the parent path ends with a slash to ensure correct handling of paths ending with a slash
added a print statement to indicate the failure of loading the skin file in JavaSEPort . java to improve error reporting for skin file loading failures
added ` markDirty ( ) ` and ` isValid ( ) ` methods to ` LgoLevel2BatchSubscription ` and modified ` LgoLevel
added a static final ` UNDEFINED ` constant to the ` Result ` class and modified the return statement in ` TestStep ` to provide a clear
updated exception assertions in TestTransactionCallback to use NullPointerException instead of PersistenceException to improve error handling for null pointer exceptions
refactor UploadJobMultiPartOperation to implement IdentifiedDataSerializable instead of AsyncJobOperation to improve data serialization handling and ensure JetServiceBackend is
[ hotfix ] [ runtime ] do n ' t throw ioexception if file can not be recover .
refactor SummaryLevels to include an optional ignoreChildNodes parameter and update its usage in VerticalNodeViewLayoutStrategy to improve flexibility in
changed the visibility of ` pos ` and ` sizeMask ` in ` DataOutput2 ` and refactored the ` ensureAvail ` method
added JUnit @ Ignore annotation to ChaosMonkeySafeLeaderTest and RecoveryZkTest to temporarily disable tests related to cruelty to animals
replaced the allocation of targets with a subset of endpoints in StorageProxy . java to improve performance by reducing the number of items in the array
removed unnecessary whitespace in FileManager . java to improve code readability and maintain consistency
added " plus " , " minus " , " times " , " arithmetic " , " arithmetic " , " log " , " log " ,
added methods ` getSimpleName ( ) ` and ` getEnclosingElement ( ) ` to ` VariableElement ` and updated package - info files to enhance functionality
updated RFC3280 encoding from " RFC3280 " to " RFC5280 " across multiple Java files to ensure compatibility with modern Java standards
updated version number from 2.17 . 3 to 2.17 . 4 and changed type casting from int to Character in SearchAnnotationVisitor to reflect the
replaced ` HashMap ` with ` SparseBooleanArray ` for item retrieval in ` ListActivity ` and ` NoteAdapter ` to improve performance and performance by
removed unnecessary semicolons in conditional statements in DirectUpdateHandler2 . java to improve code readability and maintainability
refactor path handling in ConfigFileApplicationListener to use ResourceUtils for URL checks to improve code clarity and maintainability by utilizing ResourceUtils for
updated PreviewPositionHelper initialization to accept a Context parameter and modified layout offsets based on multi - window mode to enhance flexibility in positioning based on
[ java ] : use gettermentry instead of findtermtimestamp for newleadershipterm .
pmdcoveragetest : improve error message
refactor byte array handling in ByteArrayInputStream and introduce a new Skip class for testing skipped bytes to improve data handling accuracy and provide a test case for
reformatted conditional statements in UpdaterTask . java for clarity to improve readability and maintainability of the code
changed the visibility of MAX _ HEADERS from final to public and modified the blockChainDownload call condition to allow access to MAX _ HEADERS from
added " rt . jar " to the list of standard libraries in the ModClassLoader to include additional runtime libraries in the application
refactor connection handshake logic to simplify code and improve message processing to enhance code readability and maintainability by reducing redundancy
updated GranuleDescriptor , RasterLayerResponse , RasterManager , GTDataStoreGranuleCatalog , and GTDataStoreGranuleCatalog to use utility
added a condition to check if the response is committed before sending error 500 to ensure error responses are sent only when the response is already committed
refactor conditional checks in HttpSession . java for better readability to improve code clarity and maintainability
changed the fadeOutFakeTaskView parameter from true to false in HomeGestureTutorialController and added color handling in SwipeUpGestureT
updated prefab deserialization and serializer logging levels in PrefabFormat and PrefabSerializer classes to improve error handling and provide clearer logging for unknown components
refactored ScimGroupExternalMembershipManager and ScimGroupBootstrap initialization in LdapMockMvcTests . java to improve code clarity and maintainability
added a validation check for the minimum amount of a transfer in FreezeBalanceActuator and added a validation in TransferActuator to ensure
updated the lastIndexOf method from ` ` / ' ' to ` ` File . separator ' ' in ` FileResolverTestBase . java ` to ensure correct
do n ' t show input help panel if error message be null
updated description retrieval in GpsMainActivity and added command event handling in AnnotationViewFragment to improve clarity and maintainability of the code by using the
updated JsoupNonVisualRegressionTest to check if the number of pages is less than 3 and added a conditional check for the number of pages
replaced ` AndroidBufferAllocator ` with ` AndroidNativeBufferAllocator ` in ` OGLESContext . java ` and added a new ` AndroidNative
modified flag handling logic in Main . java , PrimaryItem . java , and Util . java to remove " ! " prefix from flag names to ensure
added a NOPMD comment to JDBCHistoryCache . java to improve code clarity and maintainability
updated the comparison of " ITEM _ USE _ GRANT _ SELECT _ REWARD " to " ITEM _ USE _ GRANT _
refactor QueuePriorityTest to improve test assertions and add a toString method for PriorityElement to enhance clarity and maintainability of the test code
add unit tests for AffinityGroup creation and validation in AffinityApiUnitTest . java to improve test reliability and ensure correct behavior of affinity group creation
added a null check for the main command and modified the argument check to include a help option to enhance user experience by providing help when no command is
increased the light output size from 5 to 4 across multiple classes to optimize performance and reduce memory usage
changed the Scanned class from static to public to allow access to Scanned class from other packages
added a boolean flag ` showBlank ` and modified conditional logic in ` ClassWriter . java ` and created a new class ` T80328
removed an assertion check for the length of the sn variable in the Person class to simplify the code and improve readability
added null check for file extensions in VirtualFile . java to ensure robustness by preventing potential NullPointerExceptions
change return statement from returning to continuing in ContactRightButtonMenu . java to ensure that the continue statement reflects the intended behavior
refactor slot handling logic in SimpleSlot and SlotSharingGroupAssignment classes to improve code clarity and ensure proper handling of cancelled slots
refactor loop calculations in InstallShortcutReceiver . java for improved readability to enhance code clarity and maintainability
refactor PlainSocketImpl to ensure proper resource management and closure of socket descriptors to improve code clarity and ensure proper resource management during socket binding
added functionality to remove removed items from the media details in BookmarkListRootFragment and MediaDetailPagerFragment to improve the management of removed media items
updated log message from " the center of element " to " the element ' s in - view center point " to clarify the purpose of the log
added a new file ` bug4865918 . java ` that tests the scrollbar ' s value to verify that the mouse is incorect
replaced the use of VelocityEngine with Velocity in ADKerberosOperationHandler . java to simplify the code and improve readability by using Velocity
updated import statements and added group trigger notification handling in QuestCommand . java to improve code clarity and provide clearer feedback when a group trigger is
added file chooser functionality for selecting GnuCash accounts in the AccountsActivity to enhance user experience by allowing users to select GnuC
added Lombok ' s @ ToString annotation to PartitionChangeEvent , TbApplicationEvent , and PartitionChangeEvent classes to ensure compatibility with Lombok
updated the configuration URI for the OpenHAB Cloud service from " io : openhabcloud " to " io : openhabcloud " to ensure
removed setting of viewport component and JScrollPane in BrowserPanel . java to streamline the code and improve maintainability
updated input handling to use ` KEYCODE _ FORWARD _ DEL ` instead of ` KEYCODE _ DEL ` in multiple files to improve
added a conditional check for the ` moreIndexingFilter . indexMimeTypeParts ` configuration before retrieving MIME type parts to ensure that MIME type parts are
added author regex pattern and modified constructor check logic in JSDoc . java to enhance clarity and support for authoring comments in constructor declarations
updated metrics constants to use CREATE _ TOTAL _ DATABASES and CREATE _ TOTAL _ TABLES and CREATE _ TOTAL _ TABLES
updated HiveDatabaseSchema and HiveSchemaFactory to utilize DrillHiveMetaStoreClient for retrieving database tables to enhance flexibility in accessing Hive
updated the ` oauth2LoginLinks ` method to accept a ` MultiValueMap < String , String > ` parameter and added error handling to the
updated Hijrah calendar name from " Hijrah - umalqura " to " Islamic Umm al - Qura Calendar " and
added support check for Firefox in WebAudioWrapper . java to ensure compatibility with non - Firefox environments
added a method ` appendInterceptor ` to ` GrpcServerBuilder ` and modified the constructor in ` InterceptorConstants ` to enhance server configuration flexibility
added readIf ( " DEFAULT " ) and readIf ( " DEFAULT " ) in Parser . java and updated CREATE TABLE TEST _ 6 in Test
[ hotfix ] [ runtime ] fix checkstyle violation in streamingaggtemplate
[ hotfix ] [ runtime ] change allocationtimeout to timeout in executiongraph
added a boolean flag ` hasFrom ` and updated related methods in ` Delete ` , ` DeleteDeParser ` , and ` DeleteTest ` to
replaced the ` isSuccess ` method with ` isMultiStatus ` and updated related exceptions handling in ` SynchronizeFolderOperation . java ` to improve
refactor RecipeScheduler to use a new method ` RecipeSchedulerUtils ` for matching applicable tests to improve code readability and maintainability by
updated regex pattern in LogAnalyser . java to ensure consistent formatting to improve code readability and maintainability
camel - 16165 : camel - test - add support for google - cloud - integration - test
fixed - rsearch . getscore ( ) method do n ' t handle exclusive and min exclusive parameter
refactor CCLicenseStep to use generics and improve code readability to enhance type safety and maintainability of the code
added a null check before storing the global ID in IfcModel . java to avoid potential NullPointerExceptions when the global ID is not initialized
updated equality check from ` equals ` to ` areEqual ` in ` OptionalAssert . java ` to use ` comparisonstrategy . areEqual ` for
added a boolean flag ` hasLMB ` to the ` NoNewLineParagraphCssApplier ` and ` ParagraphCssApplier ` classes to
added a new file ` TestArrayCopyToFromObject . java ` that tests the ` System . arraycopy ` method to ensure that the ` System
refactor sys . path insertion lines to use Python strings instead of double quotes to improve readability and maintainability of the code
updated condition checks from ` state = = = ` to ` state ! = ` ` state ' ' in multiple protocol classes to ensure proper handling of
added a new parameter ` visitAllFiles ` to the ` findFiles ` method in ` CraftingHelper ` and refactored the ` find
added JUnit @ Ignore annotation to TestLlapSignerImpl . java to mark the test as unstable to address issue HIVE - 22621
added a null check before executing the request in TestInternalInputBuffer . java to avoid potential NullPointerExceptions during request execution
refactor autoload call methods to include a lower case name parameter and update lock management to improve clarity and maintainability of the autoload locking
removed unused imports and implemented the getServerVersionEqualOrGreater method in CustomPlaybackOverlayFragment , PlaybackController , and PlaybackController classes
refactored the initialization of ` OneKDC ` and ` BasicKrb5Test ` to use a static variable for ` localhost `
updated Jsr250Voter to conditionally return ACCESS _ DENIED and ACCESS _ ABSTAIN based on the boolean flag
updated import statements in MP4Parser . java for improved clarity and consistency to enhance code readability and maintainability by centralizing import statements
added a constant for HS2 _ PROXY _ USER and modified session parameter formatting in ConnectionFactory . java to improve session parameter handling and ensure
camel - 13237 : camel - hdfs - add snappy codec to support compression with bzip2 and snappy
added a sleep delay of 1000 milliseconds in HttpClientTest . java to ensure proper synchronization during test execution
fix bug # 232 , when set cell type in multi - cell array formula .
updated glyph calculations in GlyphLayout . java and modified test text in BitmapFontTest . java to improve glyph positioning accuracy and clarify test coverage for
updated Fabric8IstioIT . java to use Commons . ISTIO _ BIN _ PATH instead of hardcoded paths to
updated method calls from ` ReportPlaybackStartAsync ` to ` ReportPlaybackProgressAsync ` in ` PlaybackController ` , ` Utils ` , and
refactor accessProperties initialization to use BufferedInputStream and ensure proper resource cleanup to improve resource management and prevent potential memory leaks
added checks to ensure records are in memory before processing in PutFromLoadAllBackupOperation , PutFromLoadAllBackupOperation , and DefaultRecordStore
updated the return statement in ResponseFlag . java from LENGTH _ BIT & ERROR _ BIT to LENGTH _ BIT to ensure correct
[ dspace ] add support for add read policy to community
added a SoftReference to the ` ConcurrentHashMap < PhysicalFont , CompositeFont > ` and refactored the ` findFont2D ` method to
initialize prefHeight to 0 and initialize prefHeight to 0 to ensure prefHeight is set to 0 and prevent potential null pointer exceptions
[ drools - 1076 ] add miss syntax error message to dmn evaluator
removed unused import statements from multiple Java files to streamline code and improve readability by eliminating unused imports
changed access modifier of ` finishRunningRecentsAnimation ` method from private to public and modified execution logic in ` NavHandleLongPressInputConsumer `
added null checks for node ID and type in ElementFactoryImpl , ImportContainerImpl , and ImportContainerImpl classes to ensure proper handling of null values
[ beam - 10220 ] do not throw an exception if the client do n ' t have a response .
nifi - 145 : fix flowfile overflow in binfiles . createbin ( )
refactor the finding logic in the Teams class to use a loop for finding the closest CoreBuild to improve code readability and maintainability by
added content - length header handling in RestTemplateCopyHeaderFilter and a corresponding test in TestRestTemplateCopyHeaderFilter to ensure proper handling of content
refactored Java2TypeScriptTranslator and SyntaxTests to improve handling of literal values to enhance code clarity and maintainability by reducing redundancy in handling
updated parameters in FilterFactory , ChannelizerViewer , and PolyphaseChannelManager classes to improve clarity and maintainability of the code
hbase - 11636 add - allregions option to canary to allow - allregions to be specify in regionserver mode .
[ hotfix ] [ cassandra ] remove unnecessary node . environment parameter from cassandraconnectorfactory
added a call to resetCursorPosition ( ) in KahaDBStore . java to ensure proper cursor positioning during index resets
added minimum frame size checks in CallDialog and OneToOneCallPanel to ensure that the new call panel displays correctly based on its minimum size
fix fall block state loss during world gen
refactor TestHTTPSamplersAgainstHttpMirrorServer to use static variables instead of hardcoded values to improve code maintainability and reduce
refactor KerberosPrincipalDAO and KerberosPrincipalHostEntity to improve entity management and entity management to enhance code clarity and prevent potential null pointer exceptions
removed the parameter ` true ` from the ` getTableSnapshot ` call in ` StatsOptimizer . java ` to simplify the method call by removing unnecessary parameter
refactor error handling in AprEndpoint . java to handle throwables and update poller maintain logic to improve robustness by handling uncaught exceptions and
updated the error message for android . licenseKey in AndroidGradleBuilder . java to clarify the purpose of the build hint to provide clearer context
updated the file folder initialization to use getDisplayName ( ) instead of getName ( ) and removed the isInsideTranscodeFolder ( ) method from FileTrans
drools - 161 add support for use spring - boot - inf . classes .
added an assumption to check if the runtime version is 19 in CheckIndexTest . java to ensure compatibility with the current version of CheckIndexTest
removed context parameter from the ` assignTargetsForSplitScreen ` method and updated related methods to simplify method signatures and improve consistency in handling animation targets
refactor LeaderLatch class to improve code readability to enhance maintainability and facilitate future updates
added methods to initialize ZKS nark parameters in SolidityNodeHttpApiService to ensure the ZKS nark parameters
refactor transaction confidence handling to use a new method ` getDepthFuture ` and introduce a new method ` getDepthFuture ` to improve code clarity
added a new method ` createMediaRecorder ( String path ) ` to ` CodenameOneImplementation ` , ` Location ` , and ` MapComponent
set platformName to " ios " in JavaSEPort . java to ensure platformName is set to " ios " for compatibility
refactor PageEditClient to improve code organization to enhance maintainability and readability of the code
added conditional checks for mozDash and webkitLineDash in Graphics2D . java to improve code readability and maintainability
refactor CreateVisibleSignature class implementation to improve code readability and maintainability
added error handling for outgoing frames in AbstractExtension . java to improve robustness by handling potential exceptions during frame processing
refactor classloader handling in ContextHandler to use AccessController ' s doPrivileged method to improve code readability and maintainability by utilizing AccessController for
added logic to clear the parent of feed categories in CategoryREST . java to ensure that only children of a feed category are removed from the feed
updated ContributionManagerDialog to use a title string instead of a hardcoded string to improve readability and maintainability of the code
added a ` vwap ` field and its getter / setter methods to the ` Ticker ` class to enable dynamic adjustment of the ` 
added a TextView parameter for no widgets in SearchAndRecommendationsScrollController and updated bottom inset handling in WidgetsFullSheet to enhance user experience
added a new class ` RenderGraphAPI ` and updated ` WorldRendererImpl ` to utilize it for rendering graph functionality to enable dynamic tint
added a primary color setting to the NCFirebaseMessagingService to enhance the visual appearance of the messaging component
refactor ShadowUsbManagerTest to improve test coverage to enhance reliability and maintainability of the test cases
updated methods in AbstractDifferenceRecommenderEvaluator and RMSRecommenderEvaluator to use evaluationPercentage instead of trainingPercentage and added logging for user IDs
added a call to ` this . selectedConfiguration . update ( ) ` in ` Rocket . java ` to ensure the selected configuration is updated correctly
updated the calculation of bounds in AndroidGraphics . java to use Math . max for maximum values to ensure that stroke widths do not exceed the bounds
replaced HashMap with LinkedHashMap in multiple classes to maintain a consistent order of elements across the codebase
refactor NativeClosureFactory to use ClosurePool instead of ClosureManager to improve flexibility and maintainability of closure handling
camel - 14197 : upgrade to junit 5 ( # 11818 )
added two new files , WebsocketIngressIntegratedBootstrap . java and WebsocketPluginTest . java , and created a new WebsocketPlugin
removed generic type set ' RecordType ' from AbstractImportMetadataSourceService and its corresponding test in DSpaceServiceManagerTest to ensure correct service retrieval
refactor authentication comparison logic to use a new method ` areAuthenticationEssentiallyEqual ` to improve code readability and maintainability by centralizing
added a conditional check to return false if the JNI compilation mode is not set to false to ensure that the method is only executed when the 
refactor code to use ` callNodeType ` instead of ` callNode . getType ( ) ` for consistency to improve code readability and maintainability
added an Insecure annotation to the MessageBuffer class and refactored the MessageBuffer constructor to use it to enhance security by restricting access to
added configuration variables for various database configurations in HiveConf . java to enhance configuration options for database configurations
replaced Set with HashSet for scopes and policies in ResourceSet . java and added a null check in DefaultResourceSetService . java to ensure consistent initialization
added a final modifier to the ` decrefOnClose ` array and modified the constructor to include ` readerFinishedListeners ` to ensure immutability
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
simonstewart : fix a bug in selenium that cause the test to fail .
replaced instances of ` $ Gson $ Types ` with ` final class ` in multiple files to enforce immutability of the ` getFirstTypeArgument `
changed the return types of keySet ( ) and values ( ) from Set < Integer > to KeySet and Values in Int2IntHashMap . java
added a duration parameter to the FlipTransition class and updated related methods to allow dynamic animation durations for better user experience
removed trace logging for setting subsAreValidForStreaming in DLNAResource . java to streamline the code by eliminating unnecessary trace logging
update major and minor version from 8 to 9 and 10 to ensure compatibility with newer versions
replaced System . err . println with LowLevelLogUtil . log for warning messages in StackLocator . java to improve logging clarity for unsupported Java versions
added new Java parser classes and updated language level constants in ParserConfiguration . java , Java15Validator . java , and Java16PostProcessor . java
updated padding logic in ExpansionViewHelper to handle cases with 1 or 0 replies to ensure proper padding for background elements based on the number of replies
refactor callback handling in AbstractPartitionPrimaryReplicaAntiEntropyTask to improve clarity and ensure callback is invoked only when versionMap is empty
added metadata handling in SeedUrl , SeedResource , and SeedResource classes to provide access to metadata information for the seed resource
added a null check for the declaration before cloning the pattern to avoid potential NullPointerExceptions when the declaration is null
refactor TestCoprocessorWhitelistMasterObserver to improve code readability to enhance maintainability and facilitate future updates
ww - 3811 add package name to annotation action validator ( # 11824 )
updated IterableTest to cast ` Object ` to ` Object [ ] ` instead of ` null ` to improve type safety and clarity in test assertions
added default stream methods for ` MapIterable ` , ` PrimitiveObjectMap ` , and ` PrimitiveObjectMap ` classes to enhance stream handling capabilities for
modified the return statement to clone the notifInfo before returning it to ensure that the notifInfo is not mutated before returning it
refactor command comparison logic to use commandConstants ' s getString method to improve code readability and maintainability
refactor AEADBlockCipher class to improve code readability to enhance maintainability and facilitate future updates
added a method ` isVariableLocal ` to ` ILocalVariableAwareVariablesMap ` , ` VariablesMap ` , and ` WebVariablesMap `
added a null check for the resource ID in PackageResourceTable . java and changed the default resource mode from best to legacy in Robolectric
added a condition to check if ` ulSize ` and ` ulPos ` are zero before retrieving the underline metrics to avoid potential null pointer exceptions when
updated SignPlugin to accept a list of HttpMessageReaders instead of a static list to enhance flexibility by allowing configuration of message readers
refactor Int2ObjectCache class to improve performance to optimize performance and reduce memory usage
added validation check for MavenDeployer in StandardMavenAuthenticationProvider . java to ensure proper handling of Maven artifacts in the authentication process
refactor AudioNode class to improve code readability to enhance maintainability and facilitate future updates
updated LinkyHandlerFactory to utilize SSL context and improved cookie handling in EnedisHttpApi to enhance security and error logging during HTTP client
added imports and modified HiveFunctionRegistry to utilize Stream for function name replacement to enhance compatibility with Oracle and Oracle SQL function names in the Hive
[ amq - 6572 ] fix the build error of jmx jmx and jmsconnections .
modified the ` getBuildTargetForAlias ` method to accept a ` possiblyFlavoredAlias ` string and adjusted the return logic accordingly to ensure correct
added a check for empty ODataFeed instances in Olingo2Consumer . java to ensure that only valid ODataFeed instances are processed
added a map for equivalent versions and modified version retrieval logic in MetaStoreSchemaInfo . java to improve version management and ensure accurate version retrieval based on
do n ' t advance expunge on vm that do n ' t exist
added @ Deprecated annotations to multiple methods in AbstractDateAssert . java to indicate that these methods are outdated and should no longer be used
refactor ONDashClockExtension and AlarmReceiver to use a new getNoteTitle method for better title retrieval to improve code clarity and maintainability
renamed ` GoogleAuthUserConfigTable ` to ` GoogleAuthUserConfigTableTest ` and updated assertions in ` TotpEndpointIntegrationTests ` to
replaced calls to ` editor . commit ( ) ` with ` editor . apply ( ) ` across multiple classes to streamline the code and improve clarity
added a TestIdleListener to the StandardSession constructor and modified session initialization to use it to enable tracking of idle state during tests
updated the format of the ` testBigQueryTable ` variable in ` BigQueryIOIT . java ` to ensure consistent formatting of the ` test
added background resources and resetting of the icon in HotseatPredictionController and BubbleTextView to enhance the visual appearance of the predicted icon in the
renamed the method ` getFlushAfterQuery ` to ` FlushAfterQuery ` in ` MondrianProperties . java ` to improve clarity and consistency
added a new file AbstractTestNativeSystemQueries . java to implement unit tests for native system queries to ensure proper functionality and functionality of native query execution
updated the way active features are retrieved in LIMEExplanation . java and added assertions in LIMEColumnarTest . java to ensure correct retrieval of
added an ` List < String > args ` parameter to ` InstallCommand ` and modified ` InstallCommand ` to utilize it for argument processing to
replace direct calls to getArea ( ) with GenericStyledArea < PS , SEG , S > area retrieval to improve code readability and
added a check to ensure the pipeline state is available in ContainerBase , StandardContext , and StandardContext classes to ensure that only available pipeline states are
added a call to setClipToOutline ( true ) in QsbWidgetHostView . java to ensure the background is drawn to the outline
added logging for flag conversion progress and updated split method in SQLManager , BlockTypeListFlag , PlotArea , and BlockTypeListFlag classes to
updated import statements and modified depth test logic in FloatingTextRenderer . java to enhance depth testing capabilities based on the floating text ' s occlusion
[ gr - 16220 ] fix typo in nfi feature .
refactored transaction propagation behavior handling in JdbcAggregationRepository to improve code clarity and maintainability by encapsulating propagation behavior settings
added regularization checks for L1Regularization and L2Regularization in LayerValidation . java to ensure that only valid regularizations are set
added exception handling for read / write operations in AbstractChecker . java to improve robustness by catching potential exceptions during connection operations
changed the visibility of the ` colorStack ` array from static to instance and updated the assignment of ` colorStack ` to improve code clarity and ensure
updated method calls from ` getMappedStatement ` and ` hasStatement ` to ` true ` in ` Configuration . java ` to enable mapping functionality for
change ` BTCEDepth ` retrieval from ` tradableIdentifier ` to ` currency ` in ` BTCEPollingMarketDataService ` to ensure consistent
updated the MQTTpublishValue assertions to include additional values for channel state to ensure the tests accurately reflect the expected values for the channel state
added a JSON property ` versionedHashes ` to the ` EnginePayloadParameter ` class and updated related methods to streamline the handling of versioned
added functionality to reset the trigger price text in MutableOfferView to ensure the trigger price is set correctly when the text field changes
refactor conditional checks and return logic in StudentFeedbackSubmissionEditSaveAction . java to improve code readability and maintainability
removed debug print statements from I18NPageController . java to clean up the code and reduce unnecessary console output
hbase - 24195 fix test failure in hstore ( # 242 )
# 118 - fix bug in savemanybeans . setmanyproperty ( ) and savemanybeans . save ( )
added a new boolean field ` _ alwaysSaveUri ` and its getter / setter methods in ` FormAuthenticator ` to control URI saving behavior based on
added new methods ` nSetLayerType ` and ` nSetLayerPaint ` to ` ShadowRenderNode ` for setting layer types and paint to
updated import statements and added a method to hide the popup menu in LWChoicePeer . java to enhance user experience by ensuring the popup menu is
modified the initialization of the insert map in StressProfile . java to ensure proper handling of null values to avoid potential NullPointerExceptions
replaced ` asScalaIterable ` with ` collectionAsScalaIterable ` in multiple test wrapper classes to simplify the code and improve readability by
added null check for requests and improved logging in MockServerEventLog and HttpForwardObjectCallbackActionHandler to enhance robustness by preventing potential NullPointerException
added warning log for unable to load properties file in DefaultEnvironment to improve error handling and provide clearer feedback when properties file cannot be loaded
refactor code to use try - with - resources for SessionDataSet initialization to ensure proper resource management and avoid potential memory leaks
added support for multicast support in SetOutgoingIf . java to ensure that outgoing connections are only set when the network is up
updated the initialization of sqlCommand to include a length parameter to ensure proper handling of command lengths in the SQL command initialization
updated method calls in UnDelegateResourceActuator , BandwidthProcessor , and EnergyProcessor to set the latest consume time and consume time for energy
added a method ` invalidSessionStrategy ` to ` SessionManagementConfigurer ` to allow configuration of an invalid session strategy to enhance flexibility in session management configuration
update failed serialization error message to include empty index and known labels to improve debugging by providing more context in error messages
added a new test class ` MapAssert _ containsKeys _ Test ` to verify the behavior of ` MapAssert . containsKeys ` to ensure correct
added a new ` JDBC4TemporaryPreparedStatementMethods ` interface and modified ` genclass ` method calls in ` JdbcProxyGenerator . java ` to
added a static method ` ensure ` to ` ServerWebSocketContainer ` and updated related methods to use ` Handler ` instead of ` ContextHandler ` to
replaced ` ImmutableMultimap ` with ` ImmutableListMultimap ` in ` CxxFlags . java ` to use ` ImmutableListMultimap ` instead of ` ImmutableMultimap
pdfbox - 2576 : use point2d instead of float , a suggest by valerybokov
added a static final MethodHook [ ] EMPTY and refactored the initialization of hooks in Method . java to improve code clarity and maintainability by
added a boolean flag ` grantAccess ` to the ` MockAuthenticationManager ` class to allow access control to the authentication manager based on the grantAccess
updated the ` afterJob ` method to accept a ` JobExecution ` parameter across multiple classes to enhance functionality by allowing the listener to handle job execution
added a check to ensure the file can execute before attempting to write it to ensure that the file can only be write if it can execute it
added a method ` hasTimeSeriesQueryLanguage ( ) ` to ` TimeSeriesQuery ` and its implementation in ` TimeSeriesQueryOrBuilder ` to
corrected the parameter name from ` SampleResult ` to ` event ` in multiple files to improve clarity and consistency in handling sample events
added new constants for battery , annotation , distance , and profile names in BundleConstants and CustomUrlManager to enhance code readability and maintainability by
change the return type of applyRule from Hashtable to Map in SearchExpression . java to improve type safety and reduce potential NullPointerExceptions
use absolutescreenlocateable instead of geowidget
updated texture handling in JoglGraphics and ProjectiveTextureTest to use RGB565 and MipMap filters to ensure correct rendering of textures
refactored the ` setResourceToDelegate ` method to return a ` File ` instance instead of void to improve code readability and maintainability
camel - 14263 : fix property placeholder for endpoint in intercept from endpoint . thanks to jbellis for the patch .
updated the condition in ActionScheduler to check for the last attempt time instead of the last attempt time to ensure that the correct number of attempts is returned
added a null check for the debug _ log before setting the dbg _ zip file to avoid potential NullPointerExceptions when debug _ log is null
updated imports and logger references in RenderingDebugConfig and NotificationOverlay to use RenderingDebugConfig instead of WorldRendererImpl to improve clarity and
fix pipe . resetgate ( ) not call worldobj . markblockneedsupdate ( ) .
refactor TestSupplementary to use a try - finally block for locale management to ensure proper resource management and prevent potential memory leaks
updated the random color values in the Team constructor from 0 . 8 to 0 . 4 in the Color . HSVtoRGB constructor to ensure
changed the type of activeMatchedStates from Set to Collection and modified logging statements in SequenceMatcher . java to improve performance and enhance logging detail for better
updated the condition for checking expected exceptions in SoftAsserts . java to ensure proper handling of null annotations to avoid potential NullPointerExceptions
updated error handling in StorageResources . java and added logging for plugin encoding exceptions in StoragePluginRegistryImpl . java to improve error reporting and provide clear
refactor call tree csv output to use a new method ` toCsvFile ` to improve code readability and maintainability by centralizing csv file
added null checks for note and modified note retrieval logic in DetailFragment . java to improve robustness by preventing potential NullPointerExceptions
added peakTasks variable and adjusted the calculation of loaded and fractionalLoaded based on tasks size to ensure accurate tracking of loaded and fractionalLoaded based on the
simonstewart : disable native event on window on firefox
added new metadata keys for score and fetch interval in Injector . java and updated score extraction logic in CrawlDatum initialization to enhance data handling and
updated imports from commons . collections to commons . collections4 in ScimExternalGroupsTypeResolvingFactoryBean and RsaJsonWebKey
changed the condition from ` zkController ! = null ` to ` zkController = = null ` and added a new method ` isShareSchema `
updated size calculations in multiple classes to use a new parameter for sizeInBytes ( true ) instead of info sizeInBytes ( false ) to ensure
replaced assertions with a null check for the Version1 _ 2 object to improve code readability and avoid potential NullPointerExceptions
updated SQL query to include type ' t . typtype ' and added support for null domain columns in database metadata to ensure correct handling of null values
[ java ] do n ' t set follower commit position if the leader be n ' t follow .
removed the buildMediaType method from WebClientPlugin . java to streamline the code by eliminating unused code
replaced termBytesReader . fillUsingLengthPrefix with termBytesReader . fillSlice across multiple files to streamline method calls and improve code readability
modified AcidUtils to use a boolean variable for the isCompactedBase method and added a new test for cleanup after major table compaction to
added null checks for storageScheme and qualifierEncodingScheme in PTableImpl . java to ensure proper handling of null values to avoid potential NullPointerExceptions
added two new classes , PojoProducersCustomized and RestProducersCutomized , and PojoProducersCustomized , and Rest
updated the retrieval of cache paths from " cache " to " CACHE _ SECTION _ NAME " in ArtifactCacheBuckConfig . java to ensure
added multiple calls to AesGcmSivProtoSerialization . register ( ) in AesGcmSivKeyManager . java to ensure
added a replacement for the wooden slab with a wildcard value " slabWood " in OreDictionary . java to ensure that the slab
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
replaced ` AbstractBuildRuleWithResolver ` with ` AbstractBuildRule ` and removed ` pathResolver ` parameter from ` UndefinedSymbolsLinkerScript
update version number from " 3.0 " to " 3.0 " to ensure compatibility with the latest features and fixes
hhh - 15499 fix typo in denormalizedtablephysicalincludedtableconstrainttest
corrected the positioning of the spriteBatch call in HelloWorld . java to ensure the spriteBatch draws correctly based on the correct positioning of
refactor PlayerFunctions and PlotId classes to simplify code and improve string concatenation to enhance readability and maintainability of the code
added a deprecated static final version constant for Lucene _ 8 _ 5 _ 0 to indicate that the version is outdated and should no longer be used
added " selfInitiated " to the println statement in SSLSocketImpl . java to improve readability of the log output for better debugging
added a new test method ` testCastToSignedInteger ` in ` SelectTest . java ` to validate SQL parsing and deparsing to ensure
refactor dependency type handling in CoNLLUOutputter and SemanticGraphCoreAnnotations to use a new DependenciesType enum to improve code clarity and
replaced direct calls to ` makeTargetDescription ` with ` parseContext . makeTargetDescription ` in ` NoSuchBuildTargetException ` and ` ParseContext `
updated the method call from ` testFromMain ( ) ` to ` test ( ) ` in ` TestOutOfMemory . java ` to ensure the
updated the array size from Block . blocksList . length to 256 in Configuration . java to optimize memory usage by reducing the array size
updated logging statements and version checks in PlotSquaredMain . java to improve clarity and functionality to enhance user understanding of PlotSquared features and ensure compatibility with
updated SQL statement escaping logic in AbstractSQLChange . java and added a new test case in AbstractSQLChangeTest . java to ensure proper handling of
added methods ` ofAll ` and ` withAll ` to ` MutableBagFactory ` and corresponding implementations in ` MutableBagFactoryImpl ` to
pdfbox - 4892 : fix buildnavandpdfbody to properly handle . adoc file .
updated the MqttBrokerConnection instantiation to set the client side to false to ensure proper connection configuration for broker connections
updated the retrieval of a ChangeSet from a direct call to getChangeLog ( ) to ensure that the change set is retrieved from the root change
removed unnecessary ` new MethodResult ( ) ` instantiation in ` StaticMethodInterceptor ` , updated log output handling in ` PrometheusPluginBootService
added HiveMetaStoreClient to drop databases in TestHiveMetaStorePartitionSpecs . java and added logging in TestObjectStore . java
added a new parameter " order _ currency " to the endpoint generator in BithumbAuthenticated . java and updated the method in BithumbAccountServiceRaw
deleted the SSEFluxWebConfig . java file to remove unused configuration classes to streamline the codebase
updated method return checks to use method . getReturns ( ) . isVoid ( ) instead of method . getFullyQualifiedName ( ) to ensure correct
replace YAML _ READER with YAML and add a new method ` listYamls ` in ` YamlResource . java ` to streamline YAML handling
changed the access modifier of equals ( ) and hashCode ( ) methods from public to package - private to allow access to these methods from other classes
replaced direct instantiation of ThreadFactory with a lambda expression in Basic . java and modified thread termination logic in GroupOfOne . java to improve code read
added unit tests for adding to list with simple and mapping converters in MongoTemplate and created a new PersonWithAList class to ensure correct functionality
ggb - 2195 fix issue with appw . syncappletpanelsize ( ) .
refactor toolbar visibility setting to use a postDelayed method to improve code readability and maintainability by encapsulating the toolbar visibility logic
refactor the page unpacking logic into separate methods for better readability to improve code maintainability and reduce redundancy in handling overlapping pages
server : do n ' t save password if vm be n ' t run on router
added boolean variables usingOutputStream , usingWriter , and isCharacterEncodingSet to manage output streams and character encoding settings
added a warning check for assignment side effects in GroupDialog . java to improve user experience by avoiding unnecessary processing when side effects are detected
refactor JSON and JSONObjectConvertor classes to improve code readability and maintainability
updated icon width check from maxWidthWithMargin to maxWidthWithMargin in FileUploadApiController . java to correct icon width validation logic
refactor RegisteredServiceProperty , JwtTokenCipherSigningPublicKeyEndpoint , and JwtTokenCipherSigningPublicKeyEndpoint to use JcaPEMWriter
added content type checks in Basic . java and implemented content type checks in checkContentTypes method to ensure compatibility with non - linux operating systems and
updated compression handling in NettyConnection to use JZlibDecoder and JZlibEncoder to improve compression handling and ensure compatibility with JZlib
replaced the ` doesClassLoaderDescendFrom ` method with a static method ` doesClassLoaderDescendFrom ` in ` Util ` and ` MethodHandles
removed unnecessary parameters from the ` doConnect ` method in ` ChannelProvider ` and ` ProxyChannelProvider ` to simplify the connect method signature and improve
added a new test method ` testEmptyFinalColumn ` to ` TextReader ` and a corresponding test in ` TestCsvHeader ` to ensure correct
added compass gravity and margin settings to NearbyMapFragment to enhance the visual appearance of the map view
added a new test method ` testInterpolation ` to ` GeoPathTest ` to verify the interpolation functionality of geopaths in the ` GeoPath `
added HiveException handling and improved error messaging in LeafFilterFactory , ParquetFilterPredicateConverter , and TestParquetRecordReaderWrapper to enhance error
added language handling for video streams in LibMediaInfoParser . java to ensure correct language is set based on stream type and language
added a warning log message for schemas in the MicroserviceRegisterTask . java file and added compatibility warning for schemas in the new version to
removed duplicate arraycopy calls in Array , FloatArray , IntArray , and LongArray classes to streamline code and improve readability by eliminating redundancy
reformatted try - catch blocks in DataSourceProxy . java to improve code readability and maintainability
added constructors and tests for InMemoryClientRegistrationRepository , InMemoryReactiveClientRegistrationRepository , and InMemoryClientRegistrationRepository classes to ensure proper handling of
added a method to reset the UI state in SchemaUpgradeHelper . java to ensure the UI state is reset correctly based on the current cluster status
added a new boolean flag ` failedStep ` and modified conditional logic in ` JUnitReporter ` to improve error handling and ensure proper handling of pending
add a new file PlayerSelector . java that implements entity selector patterns and modified regex patterns to enhance entity selector functionality and improve regex matching accuracy
added Closeable interface to the Selector class to ensure proper resource management and prevent potential resource leaks
updated MaxConcurrentStreamsTest to use MultiplexConnectionPool for connection management to improve reliability and maintainability of connection management within the jetty client
added multiple calls to stringType ( ) in CoreOptions . java to ensure proper handling of string type configurations
updated HqlQueryRenderer to handle character , parameter , and escape clauses more effectively to ensure correct token processing based on context properties
updated status codes in HttpGenerator , HttpChannel , HttpChannelState , and Response classes to use HttpStatus constants to improve code clarity and maintainability by
pdfbox - 4892 : fix typo , a suggest by valerybokov
refactor HikariCPCollectorTest to use a custom StubConnection class instead of hardcoded JDBC URLs to improve maintainability and clarity
refactor ParquetFormatPlugin and ParquetGroupScan to improve file selection handling to enhance code readability and maintainability by centralizing file selection
updated the ` isSuccess ` variable from ` false ` to ` true ` and improved error handling in ` Jsr199Javac `
added a new ` BaseTableModelListener ` to the ` DefaultSortedTableModel ` class and introduced a new ` BaseTableModelListener ` for model events to
updated the range check from 49152 to 65535 in ServerConfig . java to ensure that the number is within the valid range of 65535
added DocumentsContract import and notification for root URIs in AuthenticatorActivity , AccountRemovalJob , and DocumentsStorageProvider to ensure correct handling of document
removed the call to Log _ OC . startLogging ( getAppContext ( ) ) in MainApp . java to streamline logging process by
added ThrowableAnalyzer for handling RequestRejectedException in FilterChainProxy to improve error handling and ensure proper handling of wrapped RequestRejectedExceptions
updated the calculation of the newSize variable and modified the arraycopy method to use ' this . length ' instead of ' length ' to improve code clarity
added a check to throw an IllegalArgumentException for an empty filter list in Filter . java to ensure that an IllegalArgumentException is thrown when the filter list
added a new file ` TbStopWatch . java ` that implements a new class ` TbStopWatch ` with methods for managing stop and
pdfbox - 4892 : fix typo , a suggest by valerybokov
added @ Deprecated annotation to multiple continuation classes to indicate that these classes are outdated and should no longer be used
updated the context class loader setting in RemoteInterpreterServer . java to ensure proper context class loader is used for the current thread
fix typo in commandsourcestack . getentity ( ) . fix # 118
updated minSdk version from P to O _ MR1 in ShadowRttCallTest . java and ShadowCall . java to ensure compatibility with
updated variable names from ` indexInTickArray ` to ` tickArrayIndex ` in ` DeadlineTimerWheel . java ` to improve clarity and
# 118 - add simplename to beandescriptor , beandescriptorelement , beanpropertyassocmany , and cqueryplan
updated URLs from " wro / all . js " and " wro / all . css " to " static / all . css "
added a new test method ` showLatestTimeseriesTest ` to ` IoTDBMetadataFetchIT ` for testing the ` showLatestTimeseries
rename ` appContextLocation ` to ` contextConfigLocation ` across multiple files to improve clarity and consistency in naming conventions
refactor exception handling in OCSPChecker to use direct type casting to improve type safety and maintainability of the exception handling
added ` writeOutputSolutionEnabled ` property and related getter and setter methods to ` ProblemBenchmark ` and ` ProblemBenchmark ` classes to allow configuration of
chore : set default maxinboundmessagesize to max int ( # 43 )
added a new file ` Issue _ 815 . java ` to implement a test for slice size functionality to address issue # 815 and ensure correct
added a shapeless recipe for a slime ball in the BuildCraftTransport class to enhance the crafting process by using a shapeless recipe
refactor SequentialAccessSparseVector to improve index handling and add a new test for iterators in AbstractVectorTest to enhance code clarity and ensure
added Shulker and SHULKER metadata handling in BukkitMain and updated EntitySpawnListener to handle ownerplot metadata correctly to ensure proper
added a method ` getDebugLogger ( ) ` to ` DIHWriter ` and overridden it in ` SolrWriter ` to provide access to the
updated import statements and added getter methods for maximum directory and file name lengths in IOHelper . java and MultiKahaDBPersistenceAdapter .
refactor UpToTagChangeSetFilter instantiation and add isSeenTag method to UpToTagChangeSetFilter to improve error handling and provide clearer feedback
replaced ` LinkedList ` with ` ArrayList ` in multiple Java files to improve code clarity and maintainability by using a more descriptive list type
refactor BrokerRoutingManager class to improve code readability to enhance maintainability and facilitate future updates
updated color values in CandlestickRenderer from GRAY and GREEN to GRAY and GREEN to ensure consistent color representation across the Candle
refactor layout parameters in InsettableFrameLayout to use a unified LayoutParams class to improve code clarity and maintainability by consolidating layout parameters
added a new ` duration ( ) ` parameter to the ` BuildTargetDurationListener ` class and updated test cases accordingly to enhance the listener ' s
updated database migration integration test classes to use static imports for system properties to improve code clarity and maintainability by using static imports
added a null check for the user before processing claims in OAuthConfirmationController to avoid potential NullPointerExceptions when user is null
add support for replace route from endpoint in camel - test
replaced ` ConcurrentSkipListSet ` with ` NonBlockingHashSet ` in ` CassandraConnection . java ` to utilize a non - blocking hash set instead of
api : add listpublicipaddresses api parameter to list public ip address by source network id
added ` isIgnoringBatteryOptimizations ` and ` setIgnoringBatteryOptimizations ` methods to ` ShadowPowerManager ` and ` ShadowPowerManager `
updated version property retrieval to use ` __ buildProperties . getProperty ` instead of a hardcoded value to ensure compatibility with the latest Jetty version
added unit tests for verification logic in NumberOfInvocationsInOrderVerifierTest . java to ensure correct behavior of invocation counts in the verification mode
modified debug force evaluation logic in TRegexExecNode . java to handle cases where no match instances are found to ensure accurate evaluation of regex results
added " - foreground " parameter to the startProfile method in NewProfileExtensionConnection . java to enable foreground profiling for improved user experience
replaced ` executor ` calls with ` executorLauncher ` and ` executorCloser ` in MiniSolrCloudCluster . java to improve resource management and ensure proper
changed the type of ` parseFieldnames ` from ` Map < String , String > ` to ` String [ ] ` in ` MetadataIndexer .
updated logging method to use getFile ( ) . getName ( ) instead of getFile ( ) . getName ( ) in CodeEditorView . java and added
updated skippedEntries logging in ClassFileReader . java and JdepsTask . java to improve error reporting and provide clearer context for skipped entries
replaced LogStorage with LuceneStorage for document storage in Fetcher and FetcherMain classes to enhance document storage functionality and improve handling of unknown content types
modified the populateBubble method to accept a Nullable BubbleBarBubble parameter and adjusted related logic to enhance bubble populate functionality and ensure proper handling of null
updated error handling in ScheduledRoutePolicy and related classes to throw an IllegalArgumentException instead of an IllegalArgumentException to improve robustness by providing clearer error
removed the ` methods ` parameter from ` buildRpcExt ` and ` buildRpcExtJson ` methods across multiple classes to simplify the method signatures and
[ java ] : add miss multicast delay generator for loss loss .
updated Gson instantiation in ClientInformationResponseView . java to improve JSON serialization and deserialization of client information to enhance code clarity and ensure proper handling of client
added a condition to check if the field amount is greater than zero before adding the order to limitOrders to ensure the order is only added when
removed the ` rawExecutionReports ( ) ` method from ` binanceStreamingMarketDataService ` to simplify the code and improve readability
added a new method ` fail ( Exception e ) ` to ` LdapTimeoutTest ` and updated error handling in ` LdapTimeoutTest ` to improve
added a check for the existence of the user dictionary file before reading it in JPhonemiser , JPhonemiser , and Mary classes to
added a check for blank or blank credentials before updating the password in AmbariServerConfigurationHandler . java to ensure that the password is only updated
added a check for already parsed segments in ParseSegment . java and modified the SegmentChecker . isParsed method in ParseSegment . java to ensure that
[ hotfix ] [ yarn ] add configuration option for application attempt failure interval
[ geos - 8036 ] add log for h2 driver not include in init ( )
hbase - 13232 add readtype configuration to tablesnapshotinputformatimpl ( jesus camacho rodriguez , review by s
added fixed height and width options for instance login info in LoginInstanceRequest . java to enhance user experience by allowing customizable sizes for instance login
added a corner radius parameter to multiple update methods in ActivityControlHelper , LauncherLayoutListener , and WindowTransformSwipeHandler to enhance functionality by allowing
updated COMMANDS _ TO _ REMOVE to include DESCRIBE and DESCRIBE conditionals in QFile . java to enhance
added retry logic to handle connection exceptions in TxnHandler . java to improve robustness by retrying on connection pool failures
rename ` txnEnsureReserve ` to ` txnCheckReserve ` and introduce a new method ` txnEnsureBackupReserve
added a new field ` strings ` to the ` FirstOfStringsMatcher ` class to enable access to the ` strings ` array from other classes
updated DELETE statements to use " ROWS SERVER SELECT " instead of " DELETE ROWS " , and added a new test class Ex
added retryable logic in BaseServiceException and updated test cases in BaseServiceExceptionTest to ensure retryability of SocketException and improve test coverage for
added support for rapid install types in AdbHelper , AndroidDevicesHelperFactory , and BuckConfig classes to enable dynamic configuration of rapid install types for
updated the SeedPattern pattern to include a trailing comma in the seed value to ensure compatibility with the latest version of the seed pattern
refactor MultimapSubject to improve handling of iterable entries and string representations to enhance code clarity and maintainability by using a more descriptive
updated the return statement in Workspace . java to adjust the display size based on device orientation to ensure correct display positioning based on device orientation
added support for a transmux parameter in the Transformer class and updated related classes to enhance flexibility in transcoding behavior based on the transmux flag
added localization functionality to the Picker class to improve user experience by ensuring localization of strings
camel - 16165 : camel - cxf - do n ' t throw exception if the client can not find the customer
hhh - 15597 fix postgreSQL81dialect to correctly handle lock acquisition and lock not available
updated query ID creation logic in TestJdbcDriver2 . java and modified imports in HiveStatement . java to ensure proper handling of null queries and
[ beam - 11420 ] add test case for unbounded pcollections in pardotest
updated HTML entities in GpsSimpleViewFragment to use HTML entities instead of HTML entities to improve readability and maintainability of the code
[ java ] remove unused parameter ` leadershipTermId ` from joinLogAsFollower method calls to simplify method signature and eliminate unnecessary complexity
refactored the initialization of the HttpExchange variable and updated its usage in HttpSender . java to improve code clarity and maintainability by centralizing
[ hotfix ] [ test ] migrate failoverstrategycheckpointcoordinatortest to junit 5
rename ` token ` method to ` apiToken ` in ` AppOpticsPropertiesConfigAdapter ` to improve clarity and consistency in naming conventions
added null check for the tree before accessing markers in Recipe , Markers , and SearchResult classes to improve robustness by preventing potential NullPointerException
change font size from float to double across multiple classes to allow for more precise font size calculations
changed the return type of ` email ` from ` String ` to ` String [ ] ` in ` MatchDoCoMoResultParser . java `
refactor exclusion handling in RawMavenResolver to use a set of GroupArtifact instances to improve clarity and maintainability of dependency exclusion handling
added null checks for DSXExchangeInfo and adjusted currency handling in DSXAdapters , DSXPairInfo , and DSXBaseService to
refactor test classes for improved organization to enhance maintainability and readability of the test suite
drools - 90 : incremental build fail if kiemodule pom be invalid
updated the initialization of ` copy ` to use ` finale - k ` and added a conditional check for ` sobj . has ( k )
refactor JacksonDataFormat and JacksonXMLDataFormat classes to improve code organization and maintainability
refactor method calls in HostFieldDesc . java to use CompilerAsserts instead of MethodHandles . publicLookup to improve code clarity and maintainability
added a new method parameter for CompletableFuture in DefaultNullnessAnnotations . java to enable handling of asynchronous completion stages in the database
updated freeze point calculation in PlaybackController . java from 9000 to 10000 seconds to adjust freeze point calculation based on playback duration
removed unnecessary imports and simplified the run method in AbstractCommonPowerMockRunner and PowerMockRunner to streamline the code and improve readability by
updated the method call from ` typeCode ` to ` realType ( ) ` in ` AnyImpl . java ` to ensure the correct type is
refactor conditional logic in TabsAndIndentsVisitor to improve handling of method invocations to enhance code readability and maintainability while ensuring proper
updated TestSingleTokenTokenFilter to extend TestCase instead of org . apache . lucene . util . LuceneTestCase to ensure compatibility with the latest test framework
updated the write method to include wrapping text in HtmlProcessInformationsReport . java to improve readability and maintainability of the code
refactored ` JdbcStepExecutionDao ` , ` MapStepExecutionDao ` , and ` SimpleJobRepository ` to utilize ` ExecutionContext
added a conditional check to add a child if the media folder is not hidden to ensure that the mon child is only added when the media folder is
added null checks for ` actor ` and ` firstWidget ` and ` secondWidget ` in ` SplitPane . java ` to ensure proper handling of
added handling for JavaType . Parameterized in RemoveUnusedImports . java to ensure proper handling of parameterized types in the code
updated logging statement to use the method ' this . getVersion ( ) ' instead of ' this . getModInfos ( ) . get ( 0 )
changed the logger variable from final to static in TicketGrantingTicketImpl . java to ensure static logging is used for better thread safety
updated SQL string in PhysicalPlanTest . java to include a new version of SNAPPY . RLE . 81 + 12 to ensure compatibility with
added a method ` isValue ` to check if a string is a value in ` AttrData ` and updated converter logic in ` Converter ` to
updated conditional checks in CPlatformResponder . java and added new methods in LWCToolkit . java for character modifier checks to enhance compatibility with international
[ java ] add aeron _ publication _ connection _ timeout to aeron _ publication _ connection _ timeout .
added a check to return false if the request URIs start with " / css " , " / images " , and " / favicon "
added assertion to verify the failure of the install wellbeing test apk to ensure that the device is rooted before executing the shell command to avoid
# 118 - remove oracle ansisqlrowslimiter since it ' s no longer needed
updated test assertions from 1 to 3 in TestSimpleBodyHandler and TestVertxTLSBuilder to reflect the correct number of enabled secure transport protocols
updated path references in DiffRuleKeysScriptIntegrationTest . java to use fc76b63ddddc08f22676c09c95be
added a boolean variable ` mIsDismissHapticRunning ` and modified the condition in ` TaskViewTouchController ` to ensure proper handling of
refactor explosion handling in MixinEventWorldExplosion . java to use EntityThrowable and ProjectileSource for better exception handling to improve
removed the ` setHasStableIds ` method and its implementation from ` SymbolInputAdapter ` to streamline the code by eliminating unused functionality
updated GET endpoint parameters in Bitfinex . java and modified limit _ bids and limit _ asks values in BitfinexPollingMarketDataService . java
added a check to replace single quotes with double quotes in StaxConverterTest . java to ensure proper handling of single quotes in string conversions
add tostring ( ) method to KubernetesLeaderElectionDriver and generate leader latch path in KubernetesLeaderElectionDriver
refactor SqlSessionFactoryBean class to improve code readability to enhance maintainability and facilitate future updates
refactor TripleInvoker to check for null method descriptor before retrieving it to improve robustness by avoiding potential NullPointerExceptions
replace Gdx . app . error with GdxRuntimeException in PolygonRegionLoader . java to improve error handling by throwing a GdxRuntimeException instead of
added a method to check if the thread local deadline is already started in Deadline . java to ensure that the Deadline instance is properly registered and
added handling for ClosedChannelException in NettyRequestExecutor to provide clearer error messages for channel closure issues
added null check for genres before setting text in ItemListActivity to prevent potential NullPointerException when genres are null
[ hotfix ] [ checkpointing ] do n ' t call master . reset in region recovery
added a new ` MappedContainerComponent ` class and a corresponding test in ` PrefabTest ` and ` ProtobufPersistedData ` to enhance
[ hotfix ] [ table - planner - blink ] fix nullpointerexception in walnode
added a new test method ` testRetrySameHostOnCallbackFailure ` in ` Endpoint . java ` and a corresponding test in ` HttpTest .
updated package declaration in package - info . java for clarity to improve code readability and maintainability
added a new test class SQLServerEscapeQuestionCharacterTest to validate SQL query functionality to ensure correct functionality and functionality of the query handling in the database
added null checks and improved constructors in CamelModule and JoobyBeanRepository to enhance code robustness and prevent potential NullPointerExceptions
replaced synchronized block with Util ' s wait method in JavaFXSEPort . java to improve code readability and reduce unnecessary synchronization
updated package imports from ` com . kenai . jaffl ` to ` com . kenai . jaffl . provider
refactor CropperUtils to utilize a new method ` createCropperBehaviour ` for handling image objects to improve code readability and maintainability
removed appName parameter from configure methods in InputRC . java and LineReader . java to simplify method signatures and improve code readability
add unit tests for ` InstallCommand ` , ` UninstallCommand ` , and ` UninstallCommand ` classes to ensure proper handling of ignored dependencies
replaced instances of ` options . setHeadless ( true ) ` with ` options . addArguments ( " -- headless = chrome " ) ` in
updated the value assignment in VersionedValue . java to use ` value . intern ( ) ` instead of ` value ` to ensure proper handling of
added support for " MOVE " status in the connection status check to enhance functionality to support move operations
updated ISO8601 _ PERIOD _ MICROS call parameters in FixedDateFormat . java to ensure correct formatting of ISO8601 _ PERIOD _ MI
updated import statements from ` org . apache . curator . shaded . com ` to ` com . google . common . collect ` in multiple test
[ hotfix ] [ runtime ] fix npe in hsbuffercontext and hssubpartitionmemorydatamanager
added permission checks for untrusted visit flags in Visit . java to ensure player access only for non - trusted plots
added a check to return early if the service is already registered before proceeding to avoid unnecessary processing when the service is already registered
updated the condition to check for curly braces in BasicURLNormalizer and added a new test for curly braces in TestBasicURLNormalizer
changed access modifiers of methods from protected to private in QuickstepTransitionManager . java to enhance encapsulation by restricting access to private methods
updated clock rate comparison logic in EncodingConfiguration . java to ensure accurate clock rate comparison between two encoders
added a method ` getProjectPath ( ) ` to ` ProjectGenerator ` , modified ` SeparatedProjectsGenerator ` to return an ` ImmutableSet
refactor calendar ID retrieval logic in HostLocaleProviderAdapterImpl . java to improve code clarity and ensure correct handling of calendar IDs
added a new file MSwingUtilities . java that utilizes the MSwingUtilities class for image scaling and exception handling to provide a utility for
camel - 16165 : camel - mail - use asyncproducer instead of defaultproducer so that it can be use in a blocking mode .
added @ RefreshScope annotation to CasCoreWebConfiguration and PasswordlessAuthenticationConfiguration to enhance scope management in authentication configurations
added unit tests for the OnExceptionHandleAndThrowNewException class to ensure that the OnExceptionHandleAndThrowNewException class correctly handles and throws
added new files ` Main . java ` and ` ScriptRenderer . java ` , and implemented the ` ScriptRenderer ` class for rendering template templates to
modified the condition for query encoding in Request . java and added a new test for query handling in RequestTest . java to ensure proper handling of input
added checks for width and height in BitmapFont , improved touch focus handling in Group , FlickScrollPane , and SelectBox classes to ensure proper
replaced ` reportFailure ` with ` context . runCloseHooks ` in ` DeploymentManager ` and added a new test in ` DeploymentTest ` to
refactor LexiconRecipeMappings to use a new method ` stackToString ` for stack handling to improve code readability and maintainability by centralizing
[ hotfix ] [ test ] increase timeout for constanttimebackofftest
updated import statements and condition in LoincHandler . java to include a check for non - blank shortName before proceeding to improve code clarity and
updated URL construction in JollyDayHolidays . java to use getClass ( ) ' s getClassLoader ( ) instead of ClasspathURLStreamHandler to improve
added a new file ` FieldUtils . java ` containing utility methods for field accessors and mutators to provide utility methods for handling field names and
updated assertions in DeferredAttr . java and added a new DoubleStaticImport . java file with static imports in DoubleStaticImport . java to improve
updated layout resource from ` workspace _ custom _ content ` to ` workspace _ screen ` and added padding for custom content to improve layout consistency and ensure
added an ` updateSettingsWithSaveLastAccount ` method to ` XabberAccountManager ` to handle invalid XMPP accounts to ensure proper handling
added a new method ` setvar ` to handle variable setting in the ` LineReader ` class to provide users with help information for setting variables in
add a patch for cat entity event handling in CatEntity . java to ensure proper event handling for animal tame events
added null checks and improved handling for unsigned values in WindowFrame . java to enhance error handling and provide clearer error messages for unsigned values
pdfbox - 4892 : add unit test to verify that there be only one HELV font
added a call to set the app ' s mode to the application ' s mode to ensure the application ' s mode reflects the current application ' s
added build arguments and build arguments to ImageFromDockerfile and created a new DockerfileBuildTest class to enhance the functionality of ImageFromDockerfile
added a null check before setting threadInfos [ threadId ] to avoid potential NullPointerExceptions when accessing threadInfos
updated the condition in PieChartRenderer to use Utils ' s FLOAT _ EPSILON constant to improve code readability and maintainability by using a
[ hotfix ] [ checkpointing ] add more logging for checkpoint and barrier handler
added new tables to the Schema class to support various database types in the application
added support for minimum similarity in FuzzyQuery and FuzzyTermEnum to enhance flexibility by allowing users to specify a minimum similarity threshold
renamed the method ` addActionsView ( ) ` to ` setActionsView ( ) ` in ` RecentsView . java ` to improve clarity
refactor ` LayoutWrappingEncoder ` to use ` OutputStreamAppender ` instead of ` boolean ` to improve flexibility and maintainability of the immediateFlush property
added Kafka and Rabbit auto configuration classes to the AutoConfigureAfter annotation to ensure compatibility with different configuration packages in the application
added null check for the component before removing it in JLayer . java and created a new test class bug6875716 . java to ensure
updated import statements from ` avro . shaded . com ` to ` com . google . common . base . Function ` in multiple Java files to
refactor block management in BciBlockMapping and add methods to retrieve return and unwind blocks in GraphBuilderPhase to improve code clarity and maintainability
refactor conditional checks in Label . java for improved readability and maintainability to enhance code clarity and maintainability by reducing redundancy
replaced ` intToFourBytes ` method with ` Bytes ` method in ` AbstractJweDecrypter ` and ` AbstractJweEncrypter
added null check for mObserver in NavigationModeFeatureFlag . java to prevent potential NullPointerException when mObserver is null
updated the default type of Comparator from Comparable < ? super U > to Comparable < ? extends Comparable < ? super U > > and added a new
refactor DocIdSet class to improve code readability to enhance maintainability and facilitate future updates
updated the end time setting in UserRuleAnomalyFunction to use bucketMillis instead of null to ensure the correct end time is set for the
added error handling for NumberFormatException in VisualScoreTagTest . java to ensure proper handling of NumberFormatException during parsing
updated the class loader setting in MockFactory to use the class loader from MockFactory to ensure the correct class loader is set for the enhancer configuration
added the OriginalFormat class to the ConverterWithEnumFormat class to enhance the functionality of the ConverterWithEnumFormat class
replaced hardcoded string " yyyy / MM / " with a constant PATTERN _ YYYY _ MM to improve code maintainability and
refactor JAWTRenderer class implementation to improve code readability and maintainability
camel - aws2 - lambda : replace autowire with autowire in camel - aws2 - lambda
cloudstack - 5292 : add macaddress validation to uservmmanagerimpl to ensure macaddress be generate for a valid nic in the network
modified Authorization header check in ProxyServlet . java to ensure proper handling of Authorization header in proxy requests
corrected the method call from submit to execute in TraceableExecutorService . java to ensure correct execution behavior for command execution
added ` getDetails ( ) ` method to ` Authentication ` , ` AbstractAuthenticationToken ` , and ` UsernamePasswordAuthenticationToken ` classes , and
updated the randomUsePoints initialization in SolrTestCaseJ4 . java to improve the probability of use points based on a fixed value
replaced calls to ` appendDot ( ) ` with ` endSentence ( ) ` across multiple classes to streamline sentence processing and improve code clarity
updated TimeFormat to use Locale for locale - specific formatting methods to ensure consistent locale - specific formatting across different locales
updated import statements in GroovyParserVisitor and added sorting logic in GroovyPrinter to improve code clarity and ensure correct line number comparisons for named arguments
added checks for non - negative inset positions in Border . java to ensure correct inset calculations for border rectangles
refactor gesture state initialization to use a static final DEFAULT _ STATE instead of a new instance to improve code readability and maintainability by reducing redundancy
replaced DateTime with Instant and updated version formatting in LlapServiceDriver . java to improve date formatting flexibility and ensure accurate version representation
refactor openblas and openblas _ nolapack classes to improve code organization and maintainability
replaced Apache Commons IOUtils with java . io . IOException in TorrentsStorage . java to ensure proper resource management and prevent potential memory leaks
added synchronized keyword to the initTxnMgr method in SessionState . java to ensure thread safety during transaction initialization
increased the timeout duration from 120 seconds to 480 seconds in AbstractDistribZkTestBase and adjusted socket timeout settings in AbstractFullDistribZ
added a new file ` SearchResults . java ` that contains a class that returns a list of documents based on search hits to facilitate the retrieval of
refactor thread CPU refresher initialization to improve clarity and functionality to enhance maintainability and readability of the code
[ j2kt ] fix npe in bytecodenode . getprimitives ( ) .
added new versions " 8.1 . 0 - cfs " and " sorted . 8.1 . 0 " to the TestBackwardsCompatibility . java
updated feature flag " ENABLE _ TWOLINE _ ALLAPPS " from DISABLED to TEAMFOOD in FeatureFlags . java and
added a new API endpoint to retrieve tenant pools for an instance to provide users with information about tenant pools for the current instance
refactor TopFieldCollector to improve equality checks based on doc ID and prefix to enhance code readability and maintainability by reducing redundancy
updated InlineBytecodeGenerator to check for ` isToString ( ) ` instead of ` isNative ( ) ` in ` InlineByteBuddyMock
added logging statements for compiling , preprocessing , and error handling in CxxCompileStep , CxxPreprocessStep , and CxxCompileStep
add a method ` removeCharacter ` to handle character removal from a string to improve character management by allowing the removal of characters from strings
fix the metadata service protocol configuration to be consistent with the rest of the application
[ drools - 1342 ] add datatransformer interface to allow to compile and transform a kie expression
updated the type of ` Object [ ] ` to ` Number [ ] [ ] ` in ` DistributionGraph . java ` to improve type safety and
removed the interesting flag from the visit method and adjusted the condition for variable arguments in FormatStringChecker . java to simplify the code and improve readability
updated the initialization of the SolrCore variable in ElectionContext . java to ensure proper initialization of the SolrCore instance
refactor ITestDbTxnManager to improve transaction management methods to enhance code readability and maintainability
refactor connection handling in DatabasePlatformFactory to use try - with - resources for better resource management to ensure proper resource management and prevent potential memory leak
added a test method ` testMapModel ` to ` CodeFirstPojoClient ` , ` CodeFirstPojo ` , and ` CodeFirstPojo `
pdfbox - 4892 : avoid npe , a suggest by valerybokov
updated selection option item listener logic in ScaleDialog . java to improve selection handling and ensure proper selection state management
rename ` updatePlayerStepStatus ` to ` tickBelt ` and update related methods to improve clarity and functionality of the ` tickBelt `
replaced IOException with logging for appearance stream creation in AppearanceGeneratorHelper . java to improve error handling and provide clearer logging for widget appearance failures
replace SortedSet with LinkedHashSet in ExecuteSqlCommandStep . java to ensure uniqueness of keys in the iteration order
updated TIME _ BETWEEN _ TOUCH _ AND _ DRAG constant from 1500 to 1000 in CancelEventTimer . java
updated preload library reference from " libdc1394 - 22 " to " libdc1394 - 25 " in dc1394 . java to
added a conditional check before setting all constructors to the public class and created two new test classes for mocking static methods with private constructors to
pdfbox - 4892 : do n ' t add object to the list of object in securityhandler , a suggest by valerybokov
mow - 132 add window title to the main window for the x11 jmeter
updated depth assignment logic based on pixel size in XRSurfaceData . java to ensure correct depth calculation based on pixel size
added error response body handling in OkHttpDataSource . java to improve error reporting for unsuccessful responses
added a static method ` exit ` to the ` TopLogging ` class and modified the exit method in ` TopThreadGroup ` to improve error handling
modified the calculation of the start index in NativeRegExp . java to ensure the start index is set correctly based on the regexp ' s global state
[ planner - 468 ] ignore failing test due to planner - 468 upgrade to optaplanner 5.6 . 1
corrected the variable reference from ` lowAllocation ` to ` highAllocation ` in the DefaultAllocator class to ensure the correct allocation is allocated based on
added a method ` cleanEntriesWithoutFeeds ` to ` DatabaseCleaner ` and ` FeedEntryDAO ` to cleanup entries without feeds to improve
changed the return type of appendToLabel method from void to this to allow the method to return the current instance of AtomicCounter
[ java ] replace BusySpinIdleStrategy with NoOpIdleStrategy in LowLatencyMediaDriver to streamline idle strategy management and improve code
added handling for NOT _ MODIFIED status in CacheControlHeadersWriter and corresponding tests in CacheControlServerHttpHeadersWriter to ensure proper handling of not
refactor InstrumentationPartialEvaluationTest to use ToolEvalNodeFactory instead of SpliceInstrumentListener and replace SplicedNode with ToolEvalNode to improve
removed unused method ` paintTabArea ` from ` SynthTabbedPaneUI ` to streamline code and improve maintainability
updated the getKrakenDepth and getKrakenTrades methods to accept an additional object parameter and improved argument handling to enhance flexibility in
added methods to normalize file paths in FileEndpoint , GenericFile , and RemoteFile classes to enhance file path normalization functionality and improve code clarity
added a new ` build ` method to ` JavaProvenance ` and modified ` MavenProjectParser ` to utilize it to enhance the functionality
added trace logging for registered Hive UDFs in HiveFunctionRegistry and a corresponding test in TestInbuiltHiveUDFs to enhance trace
updated loop iteration from 100 to 200 in CloudStateUpdateTest . java to increase test coverage for cloud state updates
replace UnserializableColumnFamilyException with UnknownColumnFamilyException across multiple files to improve error handling for deleted columnfamily scenarios
added a check for writable output files in NativeErrors . java to improve error reporting for read - only test cases
added package info retrieval logic in LauncherModel . java to ensure that the application is enabled before proceeding with the getPackInfo method
cloudstack - 10274 : upgrade410to420 should throw a cloudruntimeexception if the database upgrade fails
refactored exception handling in AbstractFaultTolerantChunkOrientedTasklet and added a new test for non - skippable exceptions
updated string comparison logic in LineReaderImpl . java to include case sensitivity options to ensure accurate matching of completed strings in case - insensitive comparisons
added imports for SourcesFileResults and SourcesFileErrors , and refactored data table handling in Recipe . java to improve code
added overview task handling in TaplTestsTaskbar to dismiss all tasks when overview tasks are available
added a new ` DbUpgradeSystemVmTemplate ` interface and modified ` Upgrade41400to41500 ` to implement it to enhance database upgrade
removed unnecessary null checks and simplified connection handling in LdapClient . java to improve code clarity and reduce unnecessary null checks
refactor index handling in SequenceAction . java to use a variable for the current index to improve code readability and maintainability
added ThreadLocal access levels for loginDone and curKeyspace in CassandraServer to improve thread safety and ensure proper access control during login operations
added a check to skip synthetic fields in ReflectUtils . java to ensure proper handling of synthetic fields in the codebase
added LoggerProvider to manage SLF4J loggers in Configuration and ApplicationController classes to enhance logging capabilities for better debugging and monitoring
updated the type of ` ImmutableMap ` and ` ImmutableMap < String , String > ` from ` String ` to ` ImmutableMap < String , Object > `
added a deprecation warning for deprecated spring context configurations in SpringFactory . java and updated test cases in SpringFactoryTest . java to warn users
added a method ` deepStart ` to ` Startables ` that returns a ` CompletableFuture < Void > ` for processing startables to
removed the ` reservePrimitiveExtensionArray ` method from ` Shape ` and its implementation in ` ShapeImpl ` to streamline the code by eliminating outdated
added ILaserTargetBlock interface to BlockLaserTable and updated TileLaser to implement ILaserTargetBlock to enhance the
modified the condition for determining if the object name contains " - " in AbstractJdbcDatabase . java to simplify the logic for determining if the object name
removed unused imports from TestSolr4Spatial2 . java to clean up the code and improve readability
set expire messages period to 0 in MemoryLimitTest . java to ensure that the test does not consume 2 * pageSize mem
updated null and length checks for handlerName and handlerName in RequestHandlers . java to improve code clarity and avoid potential null pointer exceptions
replace ' - ' with ' . ' for servlet names in ProxyServlet . java to ensure consistent naming conventions for servlet names
updated import statements and refactored environment variable handling in ProjectBuildFileParser . java to improve code readability and maintainability by reducing redundancy
updated audio handling to use stream . getFormat ( ) instead of stream . getFormat ( ) and improved error handling in DirectAudioDevice . java to enhance
added null check for ` enums ` before returning ` Optional . empty ( ) ` to avoid potential NullPointerException when ` enums ` is null
updated error message formatting in CommitLogReader . java to improve clarity of error reporting for better debugging
added a call to ` setPolicy ( ) ` in ` WebSocketSession ` to set the WebSocket policy based on the container scope ' s policy
removed conditional check for static fields and simplified the initialization logic in Java2TypeScriptTranslator . java to simplify the logic and improve readability of the
updated context creation to use a webroot argument instead of a hardcoded UI _ DIR to improve flexibility by allowing dynamic configuration of the web
updated JUnit imports from ` org . junit . Test ` to ` org . junit . jupiter . api . Test ` across multiple
[ netbeans - 1076 ] use editorregistry . componentlist ( ) instead of registry . componentiterator ( )
replaced calls to ` printHeaderObject ` with ` createHeader ` in multiple formatter classes to streamline header creation process and improve code clarity
replaced multiple specific trade - related imports with a wildcard import and added a placeholder method for placing stop orders to simplify import statements and provide a default
added multiple calls to buffer . reset ( ) in ReduceRecordProcessor . java to ensure proper resource management and prevent memory leaks
added null checks before setting foreground and background in FloatingWidgetBackgroundView to avoid potential NullPointerExceptions when mOriginalForeground or mOriginalBackground are
removed redundant semicolons in FloatingDecimal . java and added a new ToString . java file with a test case to improve code readability and
updated property type check in PropertyDescriptor . java and added a new test class Test7189112 . java for property setters to ensure proper
removed the maxVersion parameter from the ` getVersions ` method call in ` RealTimeGetComponent . java ` to simplify the method call and eliminate
added a conditional check for the ORIGIN header before setting it in NettyRequestFactory . java to ensure that the ORIGIN header is only set
refactor task visibility and animation logic in RecentsView and TaskView classes to improve user experience by optimizing task visibility and animation behavior based
updated error messages and variable names in ORCRecordReader . java for clarity to improve readability and maintainability of the code
updated sample URLs in DemoUtil . java to include new files for Tears of Steel and Basic 4x3 to enhance user experience by providing
removed HIBERNATE52 _ ENTITY _ MANAGER _ INTERFACE and HIBERNATE43 _ JPA _ METAMODEL
hbase - 24165 use hadoop - ipc . rpcengine instead of hadoop - hbase - exec
added diagnostic logging for warnings produced when compiling generated code with - Xlint : all to improve error reporting and debugging capabilities in the compilation process
refactor websocket session handling in WebSocketEndpoint and add a new test for session closure in WebSocketIT to improve session management and ensure proper handling of closed
increased random delay from 1 second to 10 seconds in multiple service classes to allow more time for state change notifications after batch processing
updated mappings for XWork from OpenSymphony Group and Apache Struts to Apache Struts in XmlConfigurationProvider . java to ensure
modified stream stop logic in WebCamInputPanel . java to conditionally call stop ( ) on the first video track to ensure proper handling of
changed the type of ` chartData ` from ` List ` to ` ArrayList ` and added a new ` BittrexChartDataPeriodType `
[ geot - 6754 ] fix gml example to work with geotools 3 . x
updated the method call from ` substream ( 200 ) ` to ` skip ( 200 ) ` in ` TargetType58 . java ` to ensure
hhh - 10956 - add getidentifiergenerator ( ) method to simplevalue to avoid npe
rename ` FindFullTextAction ` to ` DownloadFullTextAction ` and update related references to improve clarity and consistency in naming conventions
[ type : refactor ] fix issue with uriregisterexecutorsubscriber and shenyuclientregisterdefaultserviceimpl
renamed WebSocketMapping and WebSocketUpgradeFilter classes to improve clarity and consistency in naming conventions
added a check for blank OSDB hash before retrieving information from OpenSubtitle . java to improve robustness by preventing potential NullPointerExceptions when the
added a method to transfer tokens based on call token values in RuntimeImpl . java and MUtil . java to validate token balances for smart contracts
camel - 10263 : camel - ftp - make sure to change the current directory when delete a file .
updated method call from ` getSearchBindDN ` to ` getSearchBindPassword ` in JacksonLDAPConfiguration . java to correct the method signature for
added checks for empty result sets and improved join result handling in MapJoinOperator and HybridHashTableContainer classes to enhance join functionality and ensure proper
updated the ` HTTPSPDYAsyncEndPoint ` constructor to include an ` EndPoint ` parameter and updated related methods to utilize it to enhance
added intent extra for the tweet ID in multiple adapters , TimeLineCursorAdapter , TimelineArrayAdapter , TimelinePager , and Tweet
added proxy authorization handling in HttpURLConnection . java and refactored disconnectInternal ( ) method in HttpURLConnection . java to improve proxy management and ensure
replaced ` int _ numChildren ` with ` AtomicInteger _ numChildren ` and updated its usage in ` TraceContext ` and ` TraceContextTest `
removed redundant JWT and RESPONSE constants from multiple Java files to streamline code and improve readability
disable the test until we fix it .
[ drools - 133 ] change resourcefactoryserviceimpl to implement kieresources instead of resourcefactoryservice
updated predicate types from ` IN ` to ` NOT _ IN ` across multiple classes to ensure consistency in naming conventions across the predicate implementations
refactor exception handling in FileActivity , Preferences , ReceiveExternalFilesActivity , and ReceiveExternalFilesActivity to use Account objects instead of AccountUtils to
added null check for witnessService before calling validateWitnessPermission to avoid potential NullPointerException when witnessService is not initialized
updated the retrieval of ` taggedCol ` to use ` getExprString ( ) ` instead of ` getExprString ( ) ` to ensure consistency
added a conditional check before setting the JavaDoc in AbstractJavaClassTranslator . java to avoid setting the JavaDoc if it does not exist
refactor ` CompiledICHolder ` to use ` holderMetadata ` instead of ` holderMethod ` and ` holderKlass ` to improve clarity and
replaced direct calls to revalidate ( ) with revalidateWithAnimationSafety ( ) in Tabs . java to improve code readability and maintainability by
[ hotfix ] [ connector ] return unregisteredmetricsgroup instead of throw unsupportedoperationexception
updated the calculation of the y coordinate in Polygon . java to ensure correct positioning of the polygon ' s y axis
updated CacheConfigTest to use Configuration < Object , Object > instead of null to ensure proper type handling for cache configuration
added length check for stringConstant in InheritanceUnsafeGetResource . java and created a new Bug2974855 . java file with a test
refactor ShadowCookieManager class to improve cookie management functionality to enhance performance and maintainability of cookie management
added a new configuration option ` METASTORE _ AUTHORIZATION _ EXTERNALTABLE _ DROP _ CHECK ` in ` HiveConf `
added a semicolon to the condition in Stage . java and adjusted the width calculation in ProgressBar . java to improve code readability and ensure
add getplatformbyteorder ( ) method to get byte array support .
updated the property name for PING _ TIMEOUT _ PROPERTY _ NAME from " namedpipesocketprovider . timeout " to " windowsprovider . timeout
updated the ` initWebViewLogin ` method to accept a ` baseURL ` parameter and modified the ` initWebViewLogin ` method to accept a base
corrected the spelling of " Paramter " to " Parameter " in the ExecutorException message to improve code readability and maintain consistency in error
modified the ` @ DateTimeFormat ` annotation in ` AuditEventsMvcEndpoint ` and added a new test in ` AuditEventsMvcEndpointTests ` to
rename ` ExponentialTimer ` to ` PreciseThroughputTimer ` across multiple files to improve clarity and consistency in naming conventions
added a call to remove a soft body in the SoftBodyTest class to ensure proper handling of soft bodies in the world
changed interface visibility from package - private to public in SinkFunctionProvider , SourceFunctionProvider , OutputFormatProvider , and ScanTableSource classes to
updated log messages to include exception details in ZeppelinhubClient , ZeppelinWebsocket , and ZeppelinhubWebsocket classes to
add a new test class ` JingleTest ` to validate XML handling for non - redundant namespaces to ensure that the XML representation of jingle
add a null check for redPlasma in the BuildCraftEnergy and update related logic in BCStatCollector to ensure proper handling of null
added HTTP _ 2 header prefix to BareResponseImpl and modified HttpInitializer to extend HttpToHttp2ConnectionHandler to ensure proper handling of HTTP
replaced calls to ` getTrusted ( ) . contains ( uuid ) ` with ` getMembers ( ) . contains ( uuid ) ` in ` Remove
updated delimiter length and formatting in SimpleReport . java to improve readability and maintainability of the code
removed the option ` - XDignore . symbol . file ` from ` JavapFileManager ` and added a new class ` T686
renamed ` TickerDemo ` to ` StreamingTickerDemo ` and updated its usage in the ` TickerDemo ` class to improve clarity and
refactor contract validation logic in Runtime . java to improve error handling and provide clearer contract validation checks to enhance robustness and provide clearer error
g3d : do n ' t create input3d if it be not applet
added an @ Ignore annotation to the KinesisIntegrationTests class to temporarily disable the test during development
removed the ParserException declaration from the parsePayload method in ScriptTagPayloadReader . java to simplify the method signature and improve code clarity
added an override annotation for getRepositoryFactoryClassName and getRepositoryFactoryBeanClassName in JpaRepositoryConfigExtension . java to ensure compatibility with the latest repository configuration
refactor ` getExecutableCommand ` methods to return a ` List < String > ` instead of a ` String ` to improve type safety and clarity
added properties to IOSGLES20 in IOSGLES20 . java to ensure proper initialization of the IOSGLES20 object
removed the UploadPathActivity class from the ComponentsModule . java file to streamline the codebase by eliminating unused components
updated return statements in SimpleTextFieldsReader to handle DOCS _ ONLY index options to ensure accurate term frequency calculations based on index options
fix : implicit constructor should be set to true when the constructor be declare .
added a ` Database ` parameter to the ` populateValidateNullableIfNeeded ` and ` populateValidateForeignKeyIfNeeded ` methods in ` ColumnSnapshotGenerator ` to
refactor Database class to improve code readability to enhance maintainability and facilitate future updates
refactor SpringApplicationBuilder class to improve code readability to enhance maintainability and facilitate future updates
updated the initialization of ` iterator ` in ` PointInSetQuery ` to use ` this . iterator ` instead of ` indexOptions ` to ensure
removed a method call to substring from rawName in SchematicHandler . java to simplify the code and improve readability
added support for handling specific collection types in AbstractCollectionAssert and updated test cases in CollectionAssert _ isUnmodifiable _ Test to enhance collection assertion
changed the ` Option ` enum from static to non - static in ` ProcessExecutor . java ` to allow external access to the ` Option ` enum
refactor dialog creation in Compose . java and ComposeActivity . java to use AlertDialog for better user experience to enhance user experience by providing a
refactor the ` toggleKeepInSync ` method to use a CheckBox for file synchronization to improve code clarity and maintainability by centralizing file synchronization
replaced ` DatatypeConverter . parseBase64Binary ` with ` Base64 . getMimeDecoder ( ) . decode ` in ` ImageUtil `
added new files ControllerCounter . java and DBCallback . java , along with a corresponding DBCallback . java , and implemented a new DBCallback interface
added ' final ' keyword to the deleteTicket method in EhCacheTicketRegistry . java to enforce immutability of the ticketId parameter
added a new file FlywayMigrationRunner . java to run migrations in the application to facilitate migration of flyway data sources in the application
updated HashMap . java and created a new NotEmptyHashMap . java file with a new class NotEmptyHashMap . java to improve code readability and
updated the version number from 0.0 . 0 to 0.0 . 0 in TsFileDBConstant . java to reflect the latest release version
added nullability annotations to the modify method in CompressionCodec , WriterImpl , and ZlibCodec classes to enhance code robustness by preventing null pointer
added null check for mainValue and modified jar creation logic in LauncherHelper , Arrrghs , and TestHelper to improve error handling and
rename test classes for consistency in naming conventions to improve code readability and maintainability
rename ` setCompiledGraphSize ` and ` getCompiledIRSize ` methods to ` setCompiledIRSize ` and ` getCompiledGraphSize `
refactor CellCopyPolicy to use a constructor that accepts a CellCopyPolicy instance to improve flexibility and maintainability of the CellCopyPolicy class
added a method to reset the icon load result in FloatingIconView to ensure proper resource management by resetting the icon load result
updated method call from ` getValues ( ) ` to ` getRawValueCharSequences ( ) ` in ` EntityCapsManager . java `
added landscape orientation support and updated item decoration logic in IconRecentsView . java to ensure consistent item decoration based on landscape orientation and improve
deleted the AddAdapter . java file to remove unused adapter classes to streamline the codebase
refactor constructor code handling in NonStaticLifter . java to improve readability and maintainability of the code
modified the ` processSortCols ` parameter in ` OpTraitsRulesProcFactory . java ` to include a ` processSortCols ` parameter to
refactor the looper logic in TestLogWatcher to improve message validation to ensure that no messages are found when a new watcher finally gets registered
added a print statement to print an empty < any > element in Java2TypeScriptTranslator . java to enhance readability and maintainability of the
updated SDK version from 4799589 to 4913185 to ensure compatibility with the latest SDK version
added a check to set the SPRING _ AOP _ PROXY _ TARGET _ CLASS property to " true " to ensure that the
removed the singletonLock boolean flag from TypeCachingBytecodeGenerator . java to simplify the code and improve readability
renamed methods ` responseClassCallback ` and ` forwardClassCallback ` to ` responseClassCallbackWithClass ` and ` forwardClassCallbackWithString `
added a ` appendToFile ` parameter to the ` writeFile ` methods in ` Utils ` and refactored related methods in ` SuiteHTMLReporter `
updated condition checks in MavenExecutionContextView and refactored MavenRepositoryMirror to use getMirrors ( ) method to improve code clarity and maintainability
added a ` name ` parameter to ` BuildRuleSourcePath ` , ` PathSourcePath ` , and modified constructors to accept a ` name
refactor code in OAuth20CallbackAuthorizeEndpointController to use matches method instead of equals method to improve code readability and maintainability
replaced instances of ` values ( ) . toArray ( ) ` with ` AnnotationParser . toArray ( map < Class , Annotation > annotations ) ` to
replaced instances of ` getBadgedDrawableForUser ` with ` getBadgedIconForUser ` and ` getBadgedLabelForUser `
updated the default value for the line separator from " OS default " to " CRLF or CRLF . Defaults to OS default to ensure consistent
updated method from ` isImplementingInterface ` to ` isDerivedClass ` in ` ConfigurationManager ` and added assertions in ` CMUTests `
refactor input handling in BaseController to use a new ` sanitizeInput ` method to improve code readability and maintainability by reducing redundancy
chore : update java and python dependency ( # 43 )
updated the ` buildFileNamesCanBeDifferentCrossCell ` method to throw an IOException and modified the output file handling logic to improve error handling and
refactor CountersReader class to improve code readability to enhance maintainability and facilitate future updates
refactor methods in AllAppsRecyclerView , UserEventDispatcher , and DeepShortcutsContainer to streamline container type assignment to improve code clarity and
hbase - 11620 deprecate max buffer size and max buffer count ( jesus camacho rodriguez , review by j
updated query assertions in AbstractTestNativeJoinQueries and added a new lineitem method in AbstractTestNativeWindowQueries to improve clarity and functionality of query
added a new method ` getAllGenericParameterTypes ( ) ` to retrieve all generic parameter types in ` Executable . java ` to enhance functionality to retrieve all
refactor TestFSTs . java for improved readability to enhance maintainability and facilitate future updates
refactor methods in CanvasDrawable , DrawInputBox , and LaTeXTextRenderer to use getLabelTop ( ) instead of yLabel to
hbase - 24225 increase regionsplitpolicy . increasingtoupperboundboundingtoupperboundingtoupperboundingtoupperbound
removed redundant calls to resetLoadedState and startLoader in LauncherClings . java to improve code clarity and maintainability
removed redundant initialization of keys and updates in ManagedSelector . java to streamline code and improve clarity by eliminating redundant variables
added a set of excluded datasources in SpringDataSourceBeanPostProcessor to control the exclusion of specific Spring datasources
added undo info storage in TableValuesView . java and removed null check in TableValuesPanel . java to streamline code and improve readability by
refactor KinesisClient creation methods to utilize SdkClientException instead of AmazonServiceException to improve error handling and provide more informative error messages for
refactor channel handling in VelbusSensorHandler to use a loop for better control over input events to improve code readability and maintainability by reducing
disable unfavorable benchmarks in localcacheselectorcode and disable test in boundedlocalcache
added a new test method ` illegalDatabaseNameTest ` to ` IoTDBSessionSimpleIT ` to validate illegal database name handling to ensure proper
added a call to resetNewFiles ( ) in GarbageCollector . java to ensure new files are reset during garbage collection operations
renamed ` desiredWorkspaceLeftRightRightMarginPx ` and ` desiredWorkspaceHorizontalMarginPx ` to ` desiredWorkspaceHorizontalMarginPx `
refactor CharTokenizer to improve code readability and maintainability to enhance maintainability and readability of the code
chore : update gapic - generator - java version to 2.1 . 0 ( # 43 )
updated the constant name for XENSERVER _ NETWORK _ LABEL from " xenservernetworklabel " to " xennetworklabel "
updated libgdx version and nightly version from " 1.6 . 5 " to " 1.6 . 7 " and updated nightly version in DependencyBank
added a private Set < String > metricNames and its getter method in SolrCore . java to provide access to metric names from the SolrCore class
refactor URI handling in MavenManifestFactory to use Path instead of URI to simplify code and improve readability by using Fs . fromUrl for
added a static final boolean variable ` IS _ MAC ` and modified the conditional check in ` OisControllers . java ` to improve code read
refactor JdbcAggregationRepository class to improve code readability to enhance maintainability and facilitate future updates
added clear and addAll methods to slotList in Frame . java to ensure proper handling of duplicate slots in the frame
initialize m _ predCount to - 1 in PredicatedNodeTest . java to ensure proper initialization of the predCount variable
added imports and overridden ` mergeProperties ` method in ` ConfigurationSpringInitializer ` to merge configuration properties to improve configuration management and ensure proper merging of
changed the type of the ` rootLogger ` parameter from ` Logger ` to ` org . slf4j . Logger ` in ` setupLogging `
[ hotfix ] [ table - common ] use linkedhashmap instead of hashmap for operator
added a check to determine if jdbcHandlerMap is null and the type is an instance of Class to improve type safety and prevent potential NullPointerExceptions
added debug logging statements in Hibernate , Jpa , and JmsItemWriter classes to improve traceability and traceability of item writing operations
modified the way the language range is parsed by removing a semicolon if it ends with a semicolon to ensure correct parsing of the language
updated Http2ServerResponseImpl and VertxHttp2Handler to execute close handler from IO to ensure proper context management during server closing operations
modified SXSSFEvaluationWorkbook and BaseXSSFEvaluationWorkbook classes to improve table caching functionality to enhance performance and maintainability of the code
updated the SchemaTextDetailType from BASIC to BASIC and refactored conditional checks in BaseSchemaTextFormatter . java to improve clarity and
replaced instances of ` MongoFactoryBean ` with ` MongoClientFactoryBean ` in ` MongoNamespaceReplicaSetTests . java ` to ensure compatibility with
replaced HashSet with LinkedHashSet for roots and leaves in SparkWork . java to ensure uniqueness of elements in the collection
refactor SkewJoinOptimizer to check if the join operator tree is properly cloned to ensure that the operator tree is properly cloned before proceeding
added a null check for the client ID before accessing it in DynamicRegistrationClientConfigurationService and JsonFileRegisteredClientService to avoid potential NullPointerException
added a patch to AchievementList . field _ 187981 _ e . clear ( ) in StatList . java to ensure the achievement list
set default values for userName , productName , and connectionUrl in MutableDatabaseInfo and MutableJdbcDriverInfo classes to ensure default values are set to
updated permission string from link _ share _ read _ only to link _ share _ view _ only in QuickSharingPermissionsBottomSheetDialog and Sharing
added LongBuffer support and implemented readLongs method in ByteBuffersDataInput . java to enhance readability and maintainability of the code
updated UnixFileAttributes to include additional timestamp fields and introduced a new method to convert timestamps to milliseconds to improve precision in file time calculations
added a new file TestNoEagerReclaimOfHumongousRegions . java that tests the garbage collection of humongous references to
added visibility handling for the search bar in AllAppsContainerView to ensure the search bar is visible only when it is not hidden
updated the method call from ` env . router ( ) . get ( ) ` to ` env . routes ( ) . get ( ) ` to
added null checks for cur and next in LineChartRenderer . java to prevent potential NullPointerExceptions during rendering
added a new action ReloadPageAction to manage the reloading of the current page to enhance user experience by allowing users to reload the current page
change log level from info to warn in SQLManager . java to reduce log verbosity for non - existing entries
updated the minimum Spring version from " 3.0 . 7 . RELEASE " to " 3.0 . 8 . RELEASE " to ensure compatibility with the latest
added a null check for currentClusterConfigForService in UpgradeHelper . java to ensure that the configuration type does not have a selected version before
[ geos - 8036 ] use ServiceLoader instead of factoryregistry to load extension
added a finalize method to close the table in HiveHBaseTableInputFormat to ensure proper resource management and prevent potential memory leaks
added a call to ` stopStatementExecutor ( ) ` in ` JdbcConnector ` , ` HiveViewImpl ` , and ` HiveViewImpl `
refactor DocumentFactory , XMLSAXHandler , ComplexElementHandler , and ElementHandler to use generics to improve code clarity and maintainability by
updated JdbStopThreadidTest to use ` contToExit ( 1 ) ` instead of ` waitForPrompt ( 1 ) ` to improve test
added a method ` getType ` to the ` ShadowContentResolver ` class and corresponding tests in ` ContentResolverTest ` to provide a way to retrieve the
replace occurrences of ` runnable ` with ` entry ` in ` ExpressionThreadPoolManager . java ` to improve type safety by using a more descriptive
updated DEFAULT _ HTTP _ PORT from " port " to " vertx . httpPort " in HttpTestBase . java to ensure compatibility with the newer
replaced ` addCaptureListener ` with ` addListener ` in ` buttonTable ` to improve clarity by using a more descriptive listener method
increased the default batch size from 10 to 3 in NewSessionQueueOptions . java to optimize memory usage by using available processors instead of 10
[ hotfix ] [ runtime ] log exception in taskexecutor . establishresourcemanagerconnection ( )
added null check for ClassFile and modified return statement logic in LambdaRewriter . java to ensure proper handling of null classFile and improve error handling
updated error message to include ' min . min ' and ' max . min ' in IllegalArgumentException to improve clarity of error messages for better debugging
updated onMessage method signatures to include an owner parameter and improved logging functionality to enhance state management and provide more informative logging for delayed telegram messages
added new interfaces ` Cursor ` , ` Database ` , and ` Row ` in the ` com . codename1 . db ` package to provide
refactor multiple assertion classes to improve code organization to enhance maintainability and readability of the codebase
added ` setBeanId ` method implementations to ` EbeanServer ` , ` DefaultServer ` , and ` TDSpiEbeanServer `
updated XSLT file transformation from " tools / xslt / add - menu - to - site - descriptor . xsl " to a method call to improve
added a private List < RequestMatcher > matchers to manage request matchers to enhance the efficiency of request matcher management
added hashcode and equals methods to ContactResource class to ensure proper comparison and equality of ContactResource instances
removed redundant ` Request ` and ` Response ` from multiple processor classes to streamline code and improve maintainability by eliminating redundancy
updated log messages and improved error messages for saved Persistable checks to enhance clarity of log output and provide clearer context for user feedback
added resetting of mockControl in TestJdbcDataSource and modified tearDown method in TestIndexSearcher to ensure proper resource management and prevent memory leaks during
updated import statements and added import statements for LambdasWithInterfaces in SyntaxTests . java to enhance code clarity and maintainability by standardizing import
refactor ConnectionModel and ModeledConnection classes for improved readability to enhance maintainability and facilitate future updates
remove parserdecorator , it do n ' t need to be refactored
update the fml security manager to check for server - specific fml calls to ensure proper handling of server - specific fml calls
removed unnecessary parameters from AccountUtils , IndexedForest , and CustomPopup classes to streamline code and improve readability
updated method name from " swap " to " rename " in TestCoreAdminApis . java and updated the RENAME command in CoreApiMapping
added a new test method ` testJsxComment ` in ` JsLexerJsxTest ` and modified the parsing logic in ` Parser `
added ScreenRecordRule import and annotation to AddWidgetTest . java to enable screen recording functionality for test cases
added a new test method ` printsErrorWhenBuckConfigIsMissing ` and updated error handling in ` BuildEndToEndTest ` to
added physical memory handling in TestStringBufferAndBuilderGrowth . java to ensure that the machine can handle large physical memory sizes effectively
added a deprecated annotation to ` ConversionService ` and refactored ` MapToLocalDateConverter ` to use a new conversion service to improve code
added a success flag to HiveMetaStoreClient . java to indicate success status of the Hive meta store operation
updated conditional checks in ResourceReferenceInfo . java and changed Bundle initialization in Dstu2BundleFactoryTest . java to ensure correct handling of empty
updated condition checks to include " amp . twimg . com / v / " in TimeLineCursorAdapter . java and TweetActivity . java
mark the AreaReference class as deprecated to indicate that the class should no longer be used in favor of an alternative implementation
refactor ElementType and Target classes for improved clarity to enhance maintainability and readability of the codebase
added assertions for reference kinds in MemberName . java and modified reference kind handling in MemberName . java to improve assertion accuracy and ensure correct reference kind
updated the default value of ` submitKeyUpdates ` from " false " to " true " and added synchronization for the ` runChange ` method to
modified the conditional check for MouseEvent in EditNodeTextField . java to ensure proper handling of mouse events in the code
camel - 14263 : fixed bean expression to support static bean . thanks to jbellis for the patch .
refactor multiple Java classes to improve code organization and maintainability to enhance maintainability and readability of the codebase
refactor exception handling in AgentRunnerTest to use LangUtil . rethrowUnchecked for ClosedByInterruptException to improve code clarity and maintainability by
added ` getDescription ( ) ` methods to various classes to provide detailed descriptions for the specified Maven project properties to improve user understanding of Maven project properties
refactor face addition logic in ObjLoader . java to improve code readability and maintainability
refactor ProcessEngine class to improve code readability to enhance maintainability and facilitate future updates
replaced instances of ` reentrantLock ` with ` lock ` in multiple JavassistProxyFactory , JBoss6VFS
updated ` PrintMavenAsCycloneDxBom ` to include ` mavenPackaging ` parameter and modified ` getBomReference ` method
updated back method to use the component ' s component instead of a hardcoded component to improve code clarity and maintainability by using the event '
refactor certificate verification logic in SASLAuthentication . java to improve readability and maintainability of the code
changed the generic type annotation from @ Nullable [ ] to @ Nullable Object in ObjectArraySubject . java and StandardSubjectBuilder . java to improve type
updated method calls from ` NutchConf . get ( ) ` to ` getConf ( ) ` in multiple Java files to improve code clarity and
replaced OMR . gui . removeBoardsPane ( ) with tab . deselected ( ) and added a check for the selected sheet stub in
added a method ` getSessionId ( ) ` to the ` RemoteWebDriver ` class to retrieve the session ID to provide access to the session ID
added null checks before setting time interval in ImportContainerImpl . java and updated time interval handling in ImporterGEXF2Test . java to
updated command from " - logLevel INFO - serverPort " to " - serverPort " in MockServerContainer . java to improve clarity and consistency in
updated error logging to include the exception message in FunctionRegistry . java to improve error reporting by providing more context for exceptions
refactor robotsHonoringPolicy getter and setter methods to use CrawlMetadata instead of RobotsHonoringPolicy to improve code clarity
added JUnit @ Ignore annotation to ITSystemTest . java to temporarily disable the test due to potential issues
camel - 10266 : fix test to work with jdk 11 +
added imports for ByteArrayInputStream , DataInputStream , FileInputStream , and ZipInputStream in ExpectNewDemo . java and implemented alternativePath method in ExpectNewDemo .
updated input initialization method to use getFirstFilter ( ) . init ( ) instead of input . init ( ) to ensure proper initialization of the first filter
added protectionDomain parameter to the constructor in BufferAlignmentAgent . java to enhance security by allowing protection domain for buffer alignment
added dispose ( ) method to WaterRipples . java to properly dispose resources to ensure proper resource management and prevent memory leaks
added a new configuration variable ` hive . disable . unsafe . external . table . operations ` and modified ` DynamicPartitionPruningOptimization ` to
updated the description of the " Authorization " header in TokenKeyEndpointDocs . java to clarify that the authorization is not required for public keys
updated wallpaper offset from - 30 to 0 in Launcher and Workspace classes to improve wallpaper positioning for better user experience
updated return value from false to true in SybaseASADatabase and modified SQL query logic in CreateSequenceGenerator to ensure proper handling of Sybase
updated PutSQL to conditionally commit and rollback operations based on the auto - commit flag to ensure that operations are only executed when the auto - commit
added directory creation checks in SnapPuller . java and updated test assertions in TestReplicationHandler . java to ensure proper directory creation and verify replication
updated the AppTarget identifier from " id : launcher " to " launcher : launcher " in AppEventProducer . java to ensure consistency in app target
added a ` ByteBuf ` parameter to the ` frame ` method in ` AbstractHandshakeHandler ` , ` MessageFramer ` , and ` Framer
added a parameter to the constructor of OAuth2AuthorizationRequestRedirectFilter and related classes to simplify constructor parameters for better readability and maintainability
added an extended description for the map creation in GenericUDFStringToMap . java to provide clearer guidance on how to split key - value
updated ` PlainFormatter ` to use ` ChronoUnit ` and ` TemporalUnit ` in ` PlainFormatter ` and removed the ` formatInstance ` method
refactor the timeout handling in the AgentRunner class to use a retry - close timeout of 3000 milliseconds to improve flexibility in timeout management for agent
hhh - 13276 remove unused method in classloadingstrategyhelper # getprivatelookup ( )
refactor Mockito class to improve code readability to enhance maintainability and facilitate future updates
updated log message from " Closing " to " New " in HiveProtoLoggingHook . java to clarify the purpose of the log message for better
added JUnit @ Ignore annotation to the SamplingNamingTest class to temporarily disable the test due to potential issues related to sample results
updated the exception message in GridLayout . java from " Rows and columns must be greater than zero " to " greater than zero " to correct the
refactor DecisionNode and WagonCART classes to improve string concatenation and error handling to enhance readability and maintainability of the code
added handling for BoundSheetRecord in XLS2CSVmra and implemented BOF sorting functionality in BoundSheetRecord to enhance sheet sorting functionality and
refactor average impulse calculations in ThrustCurveMotor . java for clarity and consistency to improve readability and maintainability of the code
updated the instantiation of InputSystemJme to include an inputManager parameter to ensure that the input system can be instantiated with the correct input manager
refactor hash code field offset calculations in UniverseBuilder . java to improve code readability and maintainability
remove block . getmesh ( ) since it ' s no longer use .
updated variable names from ` keytabPath ` to ` localKeytabPath ` in YarnApplicationMasterRunner . java and YarnTaskManager
added a new option ` EMPTY _ WORD _ OPTIONS ` and modified matcher logic in ` LineReader ` and ` LineReaderImpl ` to
added a condition to check if writeCommitLog is true before pushing view replica updates to ensure that view replica updates are only pushed when written to the
added functionality to handle button presses and default button IDs in CaptureActivity , ResultHandler , and PreferencesActivity to enhance user experience by enabling web
added a new test method ` testBatching ` to the ` JoinedTableTest ` class to validate batching behavior to ensure that batching
added exception handling for EntityExistsException in JpaPersistenceService to improve error logging for duplicate items during persist operations
updated CucumberOptions and RuntimeOptions classes to use a specific plugin instead of a deprecated format option to ensure compatibility with the latest Cucumber
removed the save ( ) method call from PMS . java to streamline the code by eliminating unnecessary saving functionality
simplified the back key handling logic in ExtendedEditText . java to improve code readability and maintainability
updated the calculation of ` newCapacity ` in ` AbstractStringBuilder ` and added a new ` Capacity ` class for testing the ` Capacity `
replaced ` goHome ( ) ` with ` onNoteSaved ( noteTmp ) ` in ` DetailFragment . java ` to improve user feedback
added endnotes handling in XWPFDocument and updated related classes to support retrieval of endnotes from EndnotesDocument to enhance functionality
added clientInfo parameter to CasAuthenticationTransactionSuccessfulEvent in DefaultAuthenticationManager and updated method calls in CasEventsReportEndpointTests to include client
added a test method ` testVersion ` to ` BridjOGRDataStoreTest ` to verify the functionality of the GDAL version information
added a new file ` Lifecycle . java ` implementing network error handling in the ` Lifecycle ` class to improve network error management and ensure proper handling of
added error handling for 404 URLs in DeviantartRipper . java to improve the robustness of URL downloading by using a custom cookie
removed unnecessary import statements from BodyTubeShapes . java and RocketFigure . java to streamline code and improve readability by eliminating
added support for dynamic surface scaling based on ScalableSurface to enhance rendering capabilities by allowing dynamic adjustment of surface scales
update settings step to use setInitialValues ( ) instead of the getComponent ( ) method in FlutterCreateParams . java to ensure proper initialization of
replaced the usage of PackedInts with BlockPackedWriter for writing values in DiskDocValuesConsumer . java to streamline the code and improve
refactor DefaultStatusRoute to use SortedSet instead of ArrayList to improve performance and maintainability of the code
removed unnecessary data handling in GoAwayTest . java to streamline code and improve readability
added property property handling in ReflectionUtils and created a new FluentSetterBean class with a name field in EasyRandomTest to enhance property management capabilities and
replaced ByteStreams with HttpResponse in BlockingHttpEndpoint and added a new HttpResponse class to improve response handling and enhance code clarity
refactor file URL construction in FileSortByExpressionTest and add a new test method in FileSortByIgnoreCaseExpressionTest to improve code clarity and
updated logging statement to use getLastAppearedTaskId ( ) instead of mLastAppearedTaskTarget to improve clarity and accuracy of logging for better debugging
added image scaling configuration properties and methods for writing image scaling information in RtfDocumentSettings . java to enable dynamic configuration of image scaling settings for PDF
added logic to handle aggregate function names in TSServiceImpl . java to improve clarity and functionality of column names based on query parameters
updated ` Nested2 ` and ` Base ` classes to extend ` WithNestedTests . AbstractNestedTest ` instead of ` LuceneTestCase ` to enhance
added functionality to select and display the X - CAP server URI in the PresencePanel to enhance user experience by allowing dynamic configuration of the X -
added a new constant ` STRUTS _ HANDLE _ EXCEPTION ` and modified error handling logic in ` Dispatcher ` to enhance error handling by
added stopEditing methods to CodenameOneImplementation , Display , and AndroidImplementation classes to ensure proper stopping of text editing in the application
[ flink - 20535 ] [ flow - runtime ] fix npe when group attribute be null
modified the ` showDialog ` method to include ` isNewComponent ` and modified the ` selectPreset ` method in ` ComponentConfigDialog ` to
added error handling and synchronization in ChatAnnotation . java to improve error reporting and ensure thread safety when sending messages
added a check for Windows OS in HTMLDataFlavorTest . java to ensure the test is only run on non - Windows platforms
added SQL _ SERVER _ SNAPSHOT ( 0x1000 ) to the TRANSACTION _ SERIALIZABLE setting to support SQL server snapshot
modified the way recids are put and added a loop to handle potential exceptions to ensure proper resource management and prevent potential resource leaks
replace JreCompat . getInstance ( ) with java . util . zip . ZipFile in multiple files to simplify the code and improve compatibility with the latest
added a null check before setting the command class in RegisteredServiceSimpleFormController . java to avoid potential NullPointerExceptions when accessing the command
change disk failure policy from best _ effort to ignore in Config . java and add ignore option in CassandraDaemon . java to improve configuration flexibility and allow
changed access modifiers of methods from public to package - private in RipperInterface . java and RipStatusHandler . java to enhance encapsulation
updated the filtering logic in PeerDiscoveryAgent to use InetAddresses . isInetAddress to ensure that the filtering logic only applies to specific IP addresses
removed the setJobIdentifierFactory method from SimpleCommandLineJobRunner to streamline the code by eliminating unused method
updated import statements in PinotSegmentRebalancer . java to use ClusterDataCache instead of AutoRebalanceStrategy to improve code clarity and maintain
simonstewart : remove the deletecontainer ( ) method from the docker api
refactor DefaultSeleneseCommand to improve input line parsing logic and introduce a new test class for handling pipe - separated commands to enhance code robust
added multiple attempts rule to CreateGlossaryTests . java to enhance test reliability by allowing more time for failures
updated schema references to reference Components . COMPONENTS _ SCHEMAS _ REF instead of allOfSchemas _ REF to ensure
refactor EntityDeletedEvent to use JsonUtils for serialization and deserialization to improve code clarity and maintainability by utilizing a centralized utility method
added support handling for " gop " support lines in FormatConfiguration . java and updated DLNAMediaInfo . java to enhance support handling and
added a new file TestProfileReturnTypePrinting . java containing a class with multiple methods to demonstrate the functionality of the TestProfileReturnTypePrinting class
added locking mechanism for CURRENT _ VERSION _ INFO and refactored item retrieval logic in ParseConfigUtils . java to ensure thread safety and
added AcquireReleaseColumnsSegmentOperator to acquire and release IntermediateResultsBlock in MinMaxValueBasedSelectionOrderByCombineOperator . java to ensure proper
removed multiple @ Ignore annotations from FirefoxProfileTest . java to temporarily disable tests that are not showing up
updated method signatures and return types in HasAndroidDeviceDetails . java to improve clarity and functionality to enhance code readability and maintainability by providing more
removed unused imports and added null checks in ProjectStats and SortedBugCollection classes to streamline code and improve code clarity
updated text formatting in ImportPanel . java to use disabled text based on the current look and feel to improve visual clarity and maintainability of the import
removed multiple redundant @ Override annotations in CacheControlImpl . java to improve code clarity and maintainability
added a check for empty by days in the scheduled action and a corresponding test in ScheduledActionTest to ensure that weekly actions without a weekday set
refactor upload button handling in ShareActivity to use Menu instead of uploadButton to improve user experience by allowing the upload task to be displayed in the
updated multiple Java files for consistency and clarity to enhance maintainability and readability of the codebase
added a method to load exchange metadata from InputStream in MeXBTExchange and RippleExchange classes to ensure proper metadata loading for exchange metadata
added a new ` WritableSerializer ` to the ` CrawlDbReader ` class to handle JSON serialization of ` Writable ` objects to enhance JSON serialization
removed the TesterRequest class and updated import statements in TestJaspicBasicAuthenticator . java to streamline the code by eliminating unused imports
added a configurationPid parameter to the MDNSDiscoveryService component to enable dynamic configuration of the MDNS discovery service
added null check for messageItem before calling scrollToPositionWithOffset to prevent potential NullPointerException when messageItem is not provided
updated ForkJoinPool instantiation in TestBPIndexReorderer . java to include a custom ForkJoinWorkerThread to enhance performance by utilizing a random thread pool for better
removed unnecessary assertions for datanode and namenode roles in RoleCommandOrderTest . java to streamline test assertions by eliminating unnecessary roles
added a new method ` restoreLocalInfoFromTableInfo ` and modified the ` writeObject ` method to include a ` dedupWithTableInfo
updated formatting and formatting in multiple Java files to improve code readability and maintain consistency
updated BitmapFontTest . java to use Matrix4 for scaling and flipping to ensure proper rendering and rendering of the verdana39 image
[ hotfix ] [ python ] fix check for builtin aggregate in streamphysicalpythongroupwindowaggregaterule
remove the ` hasPendingEcho ` state and related methods from ` EndpointState ` , ` Gossiper ` , and ` Server ` classes to
added a method ` getUnreachableTokenOwners ( ) ` to retrieve unreachable token owners in ` Gossiper ` and `
[ geot - 7136 ] fix coordmultiplication ( ) to not change to multiplication
refactored content type handling in FormAuthenticator and added getter and setter methods in SavedRequest to improve code clarity and ensure content type is correctly
removed static variables and added null checks for localGraphicsEnvironment in XToolkit . java to improve code clarity and prevent potential NullPointerExceptions
refactor RecommenderJob and AbstractJob classes to improve code organization and maintainability
replace Object with ReentrantReadWriteLock for locking and unlocking metaLocks to improve thread safety and ensure proper resource management during concurrent operations
added a test method ` testReadIdentityProviderInOtherZone ` to ` IdentityProviderEndpointsMockMvcTests ` to verify the functionality of reading identity providers
updated job scheduling in ObjectTypeNode and added null check for timestamp in PointInTimeTrigger to improve job management and prevent potential NullPointerExceptions
removed unused import of Service in SendTicketGrantingTicketActionTests . java to streamline code and improve maintainability
[ rocketmq - 2576 ] update heartbeat to ensure that rebalance be send to all broker when a topic rebalance be update .
added ` detachedMkDirMode ` property and its getter methods across multiple classes to allow configuration of the ` detachedMkDirMode ` property
added a new test method ` sendMessageToSlowDownService ` to the ` ClusterTest ` class and modified related tests to improve test coverage and
update default label pattern from " authors3 ] [ year ] " to " auth " in JabRefPreferences . java to align label with the
refactor dependency handling in DBinaryDescription , DLibraryDescription , and DLibraryDescription to utilize CxxPlatforms for parse time dependencies to
refactor GoogleCloudAPI to ensure proper cleanup of OAuth client services to improve resource management and prevent potential memory leaks
camel - 16165 : camel - core - file consumer should consume dynamic don ' t consume file that contain a file : name
added a boolean flag ` reopenReaders ` to the ` SolrConfig ` and modified the conditional check in ` SolrCore ` to enhance configuration flexibility
added a new constant for the dialect version in FreeplaneVersion . java and updated MapWriter . java to include it in MapWriter . java to
added new methods ` currentDate ` and ` currentTimestamp ` to the ` Update ` class and corresponding tests in ` UpdateTests ` to enhance functionality
added a ` dup ` method to ` ResultInfo ` and created a new ` PrimitiveTypeInBoundForMethodRefTest ` class with a mapper
refactor condition classes to implement a new interface and simplify its implementation to enhance code readability and maintainability by encapsulating condition implementations
replaced Term with ConstantScoreQuery in TestFacetsCollector . java to improve query performance by using a constant score query
removed multiple specific Java classes from ConcurrentClassLoadingTest . java to clean up the code and reduce unnecessary dependencies
updated method signatures to include direct nearby upload preferences in CommonsApplicationModule to enhance user experience by providing direct nearby upload preferences
added support for the " SYSDUMMY1 " database mode in Parser and Mode classes , and implemented test cases for DB2 and Derby
updated log formatting and added conditional properties for sampler properties in TraceGatewayEnvironmentPostProcessor and SamplerAutoConfiguration classes to enhance code readability and maintain
added a last PID field and a method to retrieve the last PID in POIXMLProperties . java to ensure proper handling of PID
fix geotiffreader . getnodata ( ) to check for isFinite instead of isNaN
refactor execution logic in CliDriver and update session state handling in SessionState to improve code clarity and ensure proper resource management during execution
replaced ` Executor ` with ` Scheduler ` in ` MockRestAdapter ` and updated ` Observable ` methods to use ` Scheduler ` instead of ` Executor
added a default method ` selectByRuleIdSet ` to the ` selectByRuleIdSet ` method in ` RuleConditionMapper ` to enhance
added a method ` addExitDescription ` to ` ExitStatus ` for adding exit descriptions based on ` Throwable ` to simplify the exit status handling
added an entity player check before executing right click actions in MultiblockRenderHandler . java to ensure correct player interaction when clicking on a multiblock
rename ` columnFamily ` to ` columnFamilyColumn ` in ` SliceReadCommand ` to improve clarity and consistency in naming conventions
removed unnecessary import statements in PlotConfiguration . java to streamline code and improve readability
refactor ` DefaultIOSInput ` to use ` UIAlertController ` instead of ` UIAlertView ` to improve flexibility and maintainability of
updated method call from params . getBuildTarget ( ) to nativeLinkable . getBuildTarget ( ) to ensure correct build target retrieval for native
updated the parameter name from ` arrayValue ` to ` values ` in the ` ofArray ` method to improve clarity and consistency in method naming
added an assertion to verify the presence of a message in the service to ensure that the service ' s message is not null to avoid potential errors
refactor key handling in MappingMongoConverter to use potentiallyEscapeMapKey instead of potentiallyConvertMapKey to improve key escaping and simplify key conversion logic
updated log message formatting in NearbyMapFragment . java to improve readability and maintain consistency in log output
camel - 14263 : camel - jbang - fix typo in camel - jbang
added null check for terms in FuzzyLikeThisQuery and implemented a test for non - existing fields in FuzzyLikeThisQueryTest to ensure
modified the ` writeApplicationsLinks ` method to accept a boolean parameter for the ` tabularList ` parameter and adjusted related logic accordingly to enhance
[ dspace ] use dspace . identifierservicefactory instead of dspace .
updated the call to ` assignBytes ` to use ` bw . getLength ( ) ` instead of ` bytes . length ` in ` VectorColumnAssign
changed the return type of getDisplayScript method from abstract to non - abstract to provide a default implementation for the method
updated sequence handling in RemoteWebDriver to use ` keyToPress ` and ` keyToRelease ` instead of ` keyToPress ` to ensure
pdfbox - 4892 : initialize cosobjects with the size of the list , a suggest by valerybokov
added a check to ensure active interfaces are empty in NetworkConfigurationWatcher . java and suppressed null checks in NetworkManagerListenerImpl . java to improve
refactor HSSFWorkbook to use a separate method for retrieving embedded objects from HSSFShapeContainer to improve code readability and maintainability
removed import of Shdr from ShaderNodeLoaderDelegate . java to streamline imports and improve code clarity
refactor role parameters initialization in AmbariManagementControllerImpl . java to improve code readability and maintainability
pdfbox - 4892 : do n ' t try to load font with symbol , a suggest by valerybokov
replaced GlStateManager . popAttrib ( ) with GL11 . glPopAttrib ( ) in ModelHourglass . java to ensure proper GL state
refactor LiveTvGuideActivity to use mCurrentGuideStart and add a method to retrieve the current start date in ProgramListAdapter to improve
updated method invocation from ` getDeclaredMethod ` to ` getMethod ` in ` MockGateway . java ` and added new test classes ` CommonParentTest .
added dlopen calls for " libfreetype . so " , " libfontmanager . so " , and " libfreetype . so "
refactor multi - variable function handling to utilize a new method ` inverseOrPower ` to improve code readability and maintainability by consolid
[ fix ] loopsafepointelimination : add support for unsigned range guard .
refactor ` isInstance ` method handling in ` TypeFrameModelingVisitor ` to improve clarity and functionality to enhance code readability and maintainability by
added a new ` LocalizedString ` class and updated related methods in ` Formattable ` , ` Resolve ` , and ` Resolve ` classes to
added a new boolean field ` disableClasspathSearch ` and its getter and setter in ` ServerConfig ` to allow configuration of classpath search functionality based on
updated AudioFormat array initialization to be final and replaced System . arraycopy with Arrays . copyOf to ensure immutability and prevent potential memory leaks
updated the default retries from 0 to 2 in Reference . java and updated related assertions in AnnotationPropertyValuesAdapterTest . java to increase the default retries
added functionality to load settings from a file and updated usage message to improve user experience by providing additional configuration options
added text views for uploaded and used images in AchievementsFragment to improve user experience by providing clearer feedback on upload progress
added mockLogger and endRunAnnotationProcessors ( ) methods to TranslatingJavacPhaseTracerTest . java to enable testing of annotation processing
added a new ` CategoryInfo ` class and its getter / setter methods in ` MwQueryPage ` to enable retrieval of category information from the
updated assertions in AuthzAuthenticationRequest . java to remove " username " and " password " to ensure consistency in assertion messages
refactor taskbar timeout handling in TaskbarStashController to utilize AccessibilityManager to improve accessibility support and maintainability of the taskbar
updated signature character checks to include ' ^ ' in GenericSignatureParser . java to ensure proper handling of NoSuchElementException during signature parsing
updated access flags handling in ClassVisitorDriverFromElement . java and added new test cases in StubJarTest . java to ensure correct access flags are
added null checks for input in IntervalFilter and added null check in LowpassIntervalsSource to ensure robustness by preventing potential NullPointerExceptions
added two test methods in MapInterfaceTest . java to verify the behavior of entry sets in a map to ensure that the iterator behaves as expected
added a serialVersionUID field to the TreeMap class to ensure proper serialization of the TreeMap class
updated the timestamp conversion from milliseconds to seconds in ImageData . java to ensure accurate timestamp representation for image creation
updated the SINGULAR _ LIB _ GROBCOVCX to SINGULAR _ LIB _ GROBCO
added encryption utilities to delete private and public keys in AccountRemovalJob . java to ensure consistent key management across accounts
refactor keepAlive header value retrieval in JDKAsyncHttpProvider and add a new utility method in AsyncHttpProviderUtils to improve code readability
added a check for empty interceptorList in PostJoinMapOperation and a corresponding test in PostJoinMapOperationTest to ensure proper handling of empty map
removed multiple redundant processors from StandardDialect . java to streamline the code by eliminating redundancy
removed the spillEnabled parameter from several methods in BaseHybridHashTable , BinaryHashTable , and LongHybridHashTable classes to simplify the hash table
refactor environment variable handling in EnvironmentVariableHelper to utilize Optional for better null safety to improve code clarity and maintainability by centralizing environment variable
ww - 4892 add miss import to defaultactionmapper
added import statement for SerializableMode in Mockito . java and removed unnecessary closing brace in PluginSwitch . java to enable the use of SerializableMode in Mockito
added null handling for field injection point in AbstractBeanDefinition . java to ensure proper handling of null values when setting field values
refactor SQL parsing logic in Parser . java and add isolation level handling in Mode . java and TestCompatibility . java to enhance compatibility handling and ensure
added constants for HIVE _ SERVER2 _ TRANSPORT _ MODE and HIVE _ SERVER2 _ THRIFT _ HTTP
added an ` isCacheable ` method to ` GlobalOrdinalsWithScoreQuery ` to ensure that ` GlobalOrdinalsWithScoreQuery ` is
added a new file TestStrangeControl . java that implements a thread - safe test for the StrangeControl class to facilitate testing of Strange
updated the generated file name from " . json " to " . jsfile " and " . jslib " in JsFile and Js
added selection methods and their corresponding getters and setters in ShadowEditText . java to enhance the functionality of the selection functionality in the application
refactor GRPC server initialization to use Closeable instead of void to improve resource management and prevent potential memory leaks
added a ` use ` method to the ` Jooby ` class and updated the ` Router ` class to accept a ` path ` parameter to
added a null check for fst in FreeTextSuggester . java to ensure that lookups are only supported at this time to avoid runtime errors
updated line separator handling in T4975569 . java and modified URL verification in T6729471 . java to improve code readability and
added ABI writer class loading and logging in JavacInMemoryStep . java to ensure proper handling of ABI writer classes in the application
added a suppression warning for BooleanMethodIsAlwaysInverted in PubRoot . java to suppress unchecked warnings related to boolean methods
added a check for ` isStopped ( ) ` before scheduling pull requests in PullMessageService to ensure pull requests are executed only when the service is
refactor EnergyEndpointer class to improve code readability to enhance maintainability and facilitate future updates
refactor ` ComponentPresetChooserDialog ` to use a list of displayed column keys instead of an array to improve code readability and maintainability by
removed unused imports from BazaarRepository , CVSRepository , and IndexDatabase to improve code clarity and reduce unnecessary dependencies
refactor case statements in GoogleSheetsEndpoint . java for consistency to improve code readability and maintainability
added a method ` getExportedHeaderStyle ` to ` CxxLibraryDescription ` and updated methods in ` CxxLibraryMetadataFactory ` to
deleted files Constants . java and DistanceUtils . java to remove unused files to streamline codebase
refactor key splitting logic in RandomPartitioner . java to improve readability and maintainability of the code
[ gr - 26136 ] fix jdk initialization of fallback linker when build - time be fail .
[ hotfix ] [ k8s ] add inline create operation to rolebindingoperationsimpl
added debug logging statements to UaaSessionCookieConfig . java for session cookie configuration to improve visibility into session cookie configuration processes
updated file name calculation in HotseatFileLog . java to use calendar ' s day of year instead of log _ days to ensure correct file name
updated variable name from ' o ' to ' v ' in ObservableBlockingSubscribe . java to improve clarity by using a more descriptive variable name
added error handling for IllegalArgumentException in JavapTask . java and created a new class T8033711 . java to improve robustness by
replaced calls to ` Collectors . toList ( ) ` with direct calls to ` Collectors . toList ( ) ` in multiple Java files to simplify
updated logging level from error to warn and modified error handling logic in TaskDriver . java to improve logging clarity and handle shutdown scenarios appropriately
[ hotfix ] [ network ] add option to enable tiered storage in inputgatespecutils
added a new static method ` isNotSuccessStatus ` to check for non - successful status codes to improve code readability and maintainability by using
added useGL20 configuration to Cuboc and modified LwjglApplication instantiation in CubocDesktop to enable GL20 support for the
remove redundant check for VoidType in JimpleBody . java to simplify the code and improve readability
refactor OutputMacroExpander to replace DefaultSourcePathResolver with a new Arg constructor to improve code clarity and maintainability by encapsulating
rename assertNoJobsLeftEventually method to assertNoLightJobsLeftEventually in LogExceptionSqlTest and SimpleTestInClusterSupport
added a check for the " \ \ build " in the input file path condition to ensure that the input file does not contain the " / build
change return type of getResponseComments method from Map < FeedbackQuestionAttributes , List < FeedbackResponseAttributes > > to Map < String , List
reformatted conditional statements in Container . java for consistency to improve code readability and maintainability
added a new file ` TestEscapeThroughInvoke . java ` implementing a class ` A ` with methods for escaping objects to implement a test case for
replaced stream . skip ( ) with IOUtils . read ( ) in FilePreviewService . java to improve performance by avoiding redundant calls to IOUtils . read
added handling for connection pool startup and improved error logging in ConnectionPool and JdbcInterceptor to enhance connection management and provide clearer error reporting during interceptor initialization
change catch block from Exception to Throwable in CoreContainer . java to improve error handling by catching more specific exceptions
hbase - 24265 lrublockcache . getcurrentsize ( ) should return 0 if the block cache do n ' t exist
removed conditional check for taskCount in RecentsView . java to simplify the code and improve readability
added instance config change listener to HelixBrokerStarter and adjusted sleep duration from 1000ms to 5000ms in HelixServerStarter to ensure
added ` CoinmateMetadataServiceRaw ` and ` CoinmateStatic ` classes , and created ` CoinmateMetadataServiceRaw ` , and ` Coin
added checks for unresolvable paths in DefaultModelValidator and updated test assertions in DefaultModelValidatorTest to improve error reporting and ensure correct
pdfbox - 4892 : do n ' t overwrite the object key if the key do n ' t match
added a method to set display data and updated populateDisplayData method to accept a displayData list to enhance functionality by allowing users to set display data
replaced instances of ` DefaultSubject ` with ` assertThat ( ( Object ) null ) . check ( ) ` and ` assertThat ( ( Object ) null
added a property to disable MD2 and RSA cert path algorithms in ClientJSSEServerJSSE . java to enhance security by restricting certificate
added checks for option type compatibility with addSubcommands and addSubcommandGroups in OptionData . java to ensure compatibility with the latest command - line
refactor module - info . java files for mmm and ppp modules to improve code readability and maintainability
added error handling and exception handling in IOSImplementation . java to improve robustness by handling unknown server errors and ensuring proper error management
removed unnecessary whitespace in LauncherInstrumentation . java and set mFinished to null in LogEventChecker . java to improve code readability and ensure proper
refactor exception handling and add methods to close writers and record writers to improve error logging and ensure proper resource management during file sink operations
added diagnostics printing to the task call in SchemaGenerator . java to improve debugging by providing detailed diagnostics during task execution
replaced instances of ` SemanticException ` with ` OptiqSemanticException ` in ` SemanticAnalyzer . java ` to align with the new semantic exception type
refactor DataSourceMonitorTests for improved readability to enhance maintainability and facilitate future updates
added a check to ensure loaded resource paths are only processed when they are found to improve resource scanning efficiency by avoiding unnecessary processing
updated the method to retrieve the test instance from ` extensionContext . getTestInstance ( ) ` to use ` orElse ( null ) ` for better
added null check for ` o ` in ` RoutingInBoundHandler . java ` and updated response handling in ` RoutingInBoundHandler . java `
added natIp property and updated warning message formatting in EkeyUdpPacketReceiver and EkeyHandler classes to provide more context about the source IP
updated ArrowByteBufAllocator imports to use ArrowByteBufAllocator instead of BaseAllocator to improve compatibility with the latest Netty architecture
refactor CommitLogArchiver , CommitLogReplayer , and JdbcDecimalTest classes to improve code organization and maintainability
modified HttpConnection to conditionally set the state based on the parser ' s header and body buffer lengths to ensure correct parsing behavior when the parser
refactor Subscription handling in MultiTimeout to use AtomicReference and AtomicReference for upstream and requestedInitial to improve code clarity and maintainability by centralizing subscription management
added a new compaction counter and refactored candidate retrieval logic in LeveledManifest . java to improve compaction handling and enhance code clarity
added a @ Test annotation to TestOrcTimezone1 . java to enhance test coverage for timezone tests
refactor metric and timer system property parsing to utilize a new method for matching metrics and timers to improve code readability and maintainability by
updated JSON handling in PinotSegmentRestletResource and TraceContext to use a try - catch block to improve error handling and provide clearer error
added null check for columnClass and created a new test class for JTable to ensure proper handling of null and prevent potential NullPointerExceptions
added a conditional check for the existence of the shell file before adding it to the arguments to ensure the command is only executed when the shell file exists
updated the number of deleted entries from 10 to 1 in DatabaseCleaningService . java to ensure the deletion process correctly reflects the correct number of subscriptions
changed the type of testInstances from List to Set in MockitoExtension . java and added dependency injection in JunitJupiterTest . java to
refactor FieldMonitor class to improve code readability to enhance maintainability and facilitate future updates
added transaction disable and fileMmapEnable methods in BTreeMapTest . java to ensure proper transaction management and prevent file deletion issues
added a reset method to the iterator in SortedIntList . java and created a new test class SortedIntListTest . java to ensure
added JMXHelper unregistering method and modified exception handling in DefaultRemoteProxy . java to ensure proper management of JMX objects and improve error handling
updated the default write buffer size from ' 4MB ' to ' 64MB ' in RocksDBConfigurableOptions . java to ensure compatibility with
removed the ` true ` parameter from the ` this ` constructor in ` Style . java ` to simplify the constructor parameters for better readability
updated the method call from ` addArgument ` to ` addArgumentNoEncoding ` in ` FacebookShare . java ` to ensure proper handling of message
added JSON graph configuration to the SamzaRunner class to enable dynamic configuration of the JSON graph used in the pipeline
replaced Vector3f . ZERO with Vector3 . ZERO and added MouseInput mapping in HelloAudio . java to simplify the code and improve input handling
refactor LoopRotateBadNodeBudget class to improve code readability to enhance maintainability and facilitate future updates
added TypeInformation parameter to convertToMongoType methods across multiple classes to enhance type handling and prevent potential NullPointerExceptions
[ geo ] fix imaginary unit display in input box
[ java ] fix copyright year in sendkeytoactiveelement .
added methods to get and scale a BufferedImage instance with specified sizes and transparency to improve image rendering efficiency by reducing unnecessary image sizes
removed the extendArgumentCheck ( ) and extendWrapStore ( Engine engine ) methods from DBMaker . java to streamline the code by eliminating unused
added a call to updateShiftStateNow ( ) in AnySoftKeyboard . java to ensure shift state updates correctly when the key is pressed
removed the detected activity constant and updated log URL formatting in multiple classes to enhance code clarity and maintain compatibility with backwards compatibility
updated import statements from ` ExtensionConfig ` to ` protocol ` in multiple Java files to align imports with the new package structure for the ExtensionConfig
removed the import of Buildable from AaptPackageResources . java to eliminate unused dependencies and improve code clarity
updated references from ` readUnsignedShort ( ) ` to ` readUnsignedShort ( ) ` in multiple Java files to improve code readability and provide clearer
updated error message in WebSocketUpgradeHandler to include the HTTP status code to provide clearer context for invalid upgrade protocol responses
updated blockMode assignment in P11Cipher . java to improve code readability and maintainability
refactor Mockito class to improve code readability to enhance maintainability and facilitate future updates
refactor conditional checks for player ownership in Merge . java to improve code readability and maintainability
removed the deprecated ` getConversationID ( ) ` method implementations from multiple classes to streamline the code by eliminating unnecessary functionality
updated imports in DummyFreeTTSVoice . java and updated PhoneSet initialization in DummyFreeTTSVoice . java to utilize the new
refactored the ` stripQuotes ` method in ` BaseSemanticAnalyzer ` and ` PlanUtils ` to utilize ` PlanUtils ` for
removed the static class ` Rendering ` and refactored the ` updateRendering ` method in ` DLNAResource ` to simplify the rendering
added resolution and remote artifact repositories to DefaultPluginManager to enhance plugin management by associating resolution and remote artifact repositories
camel - 14497 : camel - cxf - cxf - client - factory - cache should close the applicationcontext if it be null
refactor PhysicsClient class to improve code readability to enhance maintainability and facilitate future updates
added JUnit @ Ignore annotation to SessionTest . java to temporarily disable the test due to frequent failure
added a file initialization to the ZipFile class to ensure the file object is properly instantiated
added a deprecated method ` handleAll ( ) ` to the ` TryType ` class to indicate that the method should no longer be used
added a new test class ` ChannelTest ` and modified ` Channel ` to use a default constructor for ` ChannelUID ` to ensure that the `
added a new ` StackTraceUtils ` class and modified imports in ` GenericDAOImpl ` , ` ForumServiceImpl ` , and ` Forum
removed the @ Test annotation from FormLoginIntegrationTests . java to clean up the code and improve readability
refactor unparseList calls in FunDefBase and ParenthesesFunDef classes to handle conditional arguments more effectively to improve code clarity and
updated SQL query construction and improved error logging in CheckDatabaseHelper . java to enhance code readability and maintainability by using a more descriptive
corrected the spelling of " supressWarnings " to " suppressWarnings " in UnsafeAutomaticSubstitutionProcessor . java to ensure compatibility with Java
added handling for END _ ARRAY , END _ DOCUMENT , and END _ DOCUMENT in JsonTreeReader to improve error handling and provide clear
added a new option ` -- ` to the ` TestCommand ` class and implemented an extra argument test in ` ExternalTestRunnerIntegrationTest ` to ensure proper
added ` dedup ` and ` indexSolr ` methods to ` SolrDeleteDuplicates ` , ` SolrIndexer ` , and ` SolrDelete
[ hotfix ] [ table - common ] add planner option to streamsqlexample
added a call to ` clearDatabase ( ) ` in ` MssqlIntegrationTest . java ` to ensure the database is cleared before running tests
refactor progress handling in Progress and add dispose method in RSSReader to improve code clarity and ensure proper cleanup of progress listeners
added a check to ensure the parent file exists before proceeding to avoid potential errors when the parent file does not exist
added methods to write and close POIDocument instances in IOUtils . java to improve resource management and prevent resource leaks during file operations
updated print statements to include newline characters in JavaBuild . java to improve readability and maintainability of the output
changed the type of the ` _ root ` variable from ` Box ` to ` BlockBox ` and added getter methods for ` dotsPerPoint `
added user search functionality in CustomQueryFilterFactory and updated test cases in TestLdapAtnProviderWithMiniDS to enhance user authentication capabilities and
added default port handling in NettyHttpServer , DefaultRouteBuilder , and FilteredRouter classes to enable dynamic configuration of default port values for routing
added ThingHandlerHelper import and modified status verification methods in SnmpTargetHandler , AbstractSnmpTargetHandlerTest , and StringChannelTest to
[ # 818 ] instructor : only allow submit session in section ( # 818 )
added @ Incubating annotation to AvailableSettings . java and marked the class as deprecated to indicate that the class is outdated and should not be
refactor path extraction logic in FileResolverImpl . java and add a new WarFileResolverTest . java file to improve code clarity and ensure correct
updated the format of newFlushedSize in DocumentsWriterPerThread . java to include docstores to enhance the clarity of the written segment size
replace func _ 149739 _ a ( ) with getunlocalizedname ( ) in dirt . getunlocalizedname ( )
updated conditional checks from ` settings . stripWhitespaceX ` to ` settings . stripWhitespaceY ` in ImageProcessor . java to ensure consistent handling of
updated the calculation of locks in FeedRefreshUpdater . java to allow more time for thread locks to improve performance by reducing the number of threads
updated the parameter of ` MetadataIndexNode . deserializeFrom ` from ` false ` to ` exactSearch ` in ` TsFileSequenceReader `
removed the ` DateFormat ` parameter from the ` makeResultFromDelimitedString ` method in ` CSVSaveService . java ` to simplify the method signature
added a Dimension import and updated the pane ' s preferred size in NavigationShareTab . java to improve layout responsiveness by adjusting the pane
replaced OffsetAttribute with State in BeiderMorseFilter and added a new test for custom attributes in TestBeiderMorseFilter to
refactor Upnp - related classes to improve code organization and maintainability
change the position of the burst ' s collidedat setting from the block pos to a new BlockPos instance to ensure the burst ' s position
added a new ` toJson ` method to the ` JsonTest ` class and updated imports in ` JsonTest ` to improve test coverage and
refactor MutableContextDataSupplier class to improve code readability to enhance maintainability and facilitate future updates
do n ' t throw exception when logwatcher can not be load
updated KubernetesMockServer to include HTTPS as a parameter to enhance server configuration by allowing HTTPS connections
refactored the creation of ` ForeignCallNode ` in ` DefaultJavaLoweringProvider . java ` to use ` UnaryMathIntrinsicNode
refactor response handling in DefaultServlet and update test assertions in DefaultServletTest to ensure proper handling of POST requests and improve test coverage for GET requests
added imports and modified the LAT _ LONG _ FORMAT initialization in TikaExtractor . java to ensure consistent formatting across different locales
refactor error handling in ShowFileRequestHandler to use setException instead of throw SolrException to improve error reporting and provide clearer error responses for 404
added a new ` TryCatch ` class to handle exception handling in ` ReflectorClassWriter ` to improve error handling by providing a way to handle
added a clamp method to the Vector and Vector2 classes to allow clamping between min and max values in vectors
added OAuth2Authentication imports and modified access token creation logic in ChainedTokenGranter . java to ensure proper handling of client scopes and improve
refactor BC _ instanceof class to improve code readability to enhance maintainability and facilitate future updates
replaced setSaveFlags ( SAVE _ ALL ) with a static Logger instance in EditorBottomSheetBehavior . java to improve logging for better debugging and
updated UaaUrlUtilsTest to use JUnit 5 annotations and changed method visibility from public to private to enhance test structure and ensure compatibility with J
updated NativeSQLQueryScalarReturn to use BasicDomainType instead of Type in multiple classes to enhance type safety and maintain consistency in type handling
added a WeakHashMap to track font appearance in SunLayoutEngine to improve performance by avoiding concurrent modifications to font appearance
replaced ` IntBigArray ` with ` IntArrayList ` in ` TypedSet . java ` to utilize the new ` IntArrayList ` class for
updated driver variable names from HTML _ UNIT _ JS to REMOTE and modified related test annotations to improve clarity and consistency in test naming conventions
refactor BrokerRequestUtils to improve code readability to enhance maintainability and facilitate future updates
refactor instance handling in InjectorBuilderImpl to utilize a map for injectablesSet to improve clarity and maintainability of the code by
updated path handling in RawTargetNodeFactory and BuildTargetToRawTargetNodeTransformer to use buildTarget ' s base path instead of absolute path to
added null check for the value before retrieving the result in EchoMessage . java to avoid potential NullPointerException when the value is null
removed redundant packet listener calls in OperationSetPersistentPresenceJabberImpl and added a new KeepAliveManager in ProtocolProviderServiceJabberImpl
updated DEFAULT _ LOAD _ FACTOR from 0.0 67F to 0.0 67 in IntHashSet . java to adjust loading factor for improved performance
added methods to retrieve all DataTypePhysicalVariations in VectorizationContext , Vectorizer , and VectorPTFDesc classes to enhance functionality by allowing retrieval
change package declarations from com . google . zxing to com . google . zxing . client . j2se to align code with
refactor OverviewState to conditionally return RECENTS _ CLEAR _ ALL _ BUTTON based on ENABLE _ OVERVIEW
added Entity annotation to BaseActivityEventEntity . java to ensure proper entity management for activity events
added trace sections for TouchInt and TouchInteractionService in NavBarSwipeInteractionHandler , NavBarSwipeInteractionHandler , and TouchInteractionService classes to
added a new file ` InvalidOptions . java ` implementing a class ` InvalidOptions ` that validates Java options to ensure proper functionality and error handling
added a check to ensure the number of displays differs from the number of supported bounds to improve error handling and provide clearer feedback on display state
refactor OAuth20UsernamePasswordAuthenticator and OAuth20Utils to utilize OAuth20Utils for client ID and client secret retrieval to improve code organization and
changed the default value of the _ unwrapServletException variable from false to true in ErrorPageErrorHandler and AsyncContextTest to enable unwrapping servlet exceptions in
added a condition to set the status of the shortcut info to default to ensure that the shortcut info is correctly updated when the status is set
camel - 14263 : camel - seda - use default value for queue size to avoid nullpointerexception .
added batchUpdateStart ( ) and batchUpdateEnd ( ) methods to Kernel and App classes to facilitate batch updates in the application
added HttpClient configuration to ThirdEyeApplication to enable custom HTTP client functionality in the application
added a sort parameter to the JobInstanceFetchRequest and its getter / setter methods in JpaJobPersistenceImpl and JobInstanceFetchRequest classes to
refactor order cancellation logic in CryptoFacilitiesTradeService to use a currency pair for order cancellation to improve code clarity and maintainability by
ggb - 2195 hide keyboard when click in algebra view
replaced the ` memMove ` method with a direct call to ` memMoveHandle ` in the ` LLVMHeap ` class to simplify memory
refactor code to improve readability and maintainability to enhance code clarity and maintainability
added a new boolean field ` blockToolTip ` and its getter / setter in ` ToolTipManagerW ` to control tooltip blocking behavior to enhance user experience by
updated DefaultDateTypeAdapter to accept a DateFormat parameter and modified related methods to support both date and time style to enhance flexibility in handling date and time
updated playerSet to include the UID format to improve clarity and consistency in player display format
added a check to return an empty list if it is empty to ensure proper handling of empty lists to prevent runtime errors
do n ' t throw commandexception for invocationtargetexception in parametriccallable
refactor getLikeExpression method to accept a boolean parameter for better handling of UDFRegExp to improve flexibility in evaluating UDF expressions based on the
added ` start ( ) ` and ` stop ( ) ` methods to ` StreamSupplierComponent ` and ` NativeStreamSupplierComponentImpl ` classes to
added locale handling to the runChild method in LuceneTestCase to ensure proper locale management during tests
updated multiple Java files for consistency and clarity to enhance maintainability and readability of the codebase
refactor context handling logic into a separate method ` initContextHandler ` to improve code readability and maintainability by centralizing context initialization logic
added a test method ` testRouteBuilderRef ` to the ` OSGiBlueprintTestSupport ` class to verify the correctness of the route
nifi - 10266 : fix testcase that fail on window due to stringindexoutofboundsexception
refactor ` returnTypeSubstitutable ` and ` isSubtypeUnchecked ` methods to simplify return type substitution logic to enhance code readability and
added a ThrottleType enum and modified processThrottled method calls to handle CHARS and BYTES to enhance performance by allowing differentiation between CHAR
modified the assignment of the argb variable in ColorBleedEffect . java and added a conditional check in SpriteBatch . java to ensure
refactor Annotation and AnnotatedElement classes for improved readability to enhance maintainability and facilitate future updates
added a new interface Model and updated Sheet , Workbook , and Sheet classes to implement it to enable the use of the Model interface for model
camel - 14263 : camel - http - fix filter pattern for camel - cxf and camel - cxf - http
added a ` clearEntityManager ` property to ` JpaItemWriter ` and ` JpaItemWriterBuilder ` classes to allow configuration of entity manager
added null checks for shortcut creation in InstallShortcutReceiver , Launcher , and Workspace classes to improve robustness by preventing potential NullPointerExceptions
updated TwoDimensionalCollectionValuedMap constructor to include a boolean parameter to enhance flexibility by allowing the instantiation of two - dimensional collections
updated exchange specifications from " btc - e . nz " to " Wex " and changed host and exchange name from " BTC
added null checks and null checks in OrcEncodedDataConsumer , EncodedTreeReaderFactory , and EncodedTreeReader to improve robustness by
added a null check for files in SegmentInfos . java and a test method in TestIndexReader . java to ensure that a valid file is returned
updated the search parameter from " lower - ord " to " lower " in HSearchSortHelperImpl and modified test methods in FhirResourceDao
updated the calculation of the percentage value in DeviceHandler . java to ensure correct handling of positive and negative values to prevent potential overflow issues
updated condition checks in RangeInputStream and RangeReader to return - 1 if the limit is non - negative to ensure proper handling of negative limits in range
camel - 16165 : camel - routes - add log level to debug log message in defaultroutescollector .
refactor methods in HlsChunkSource and HlsPlaylistTracker to improve calculation of start and end times to enhance code readability and maintainability
updated package names and import statements for NumericRangeFilterBuilder , NumericRangeQueryBuilder , and NumericRangeQueryBuilderTestCase to improve clarity and consistency in naming convention
[ hotfix ] [ runtime ] fix stateful output handler for keyed stream operator
removed null check before setting bitmap shaders in Area . java and Line . java to simplify code and improve readability
removed the ` dbExists ( ) ` method and related imports from ` Blockchain ` , ` LevelDbDataSourceImpl ` , and ` Block
trim whitespace from the group value in SQLPlusSupport . java to ensure consistent formatting and prevent potential errors
set async socket settings in Http11AprProtocol . java to ensure proper connection handling during asynchronous operations
refactor divider location calculation in DockSplitPaneW . java to improve code readability and maintainability
added support for health check metrics in ControllerMeter and PinotControllerHealthCheck to enhance monitoring capabilities for controller health checks
set visibility of shared avatars in LocalFileListAdapter to GONE to ensure shared avatars are not displayed in the UI
[ mebis ] fix typo in mebisresources . java
updated arguments range checks from ` > = ` to ` < = ` in multiple Java files to ensure proper validation of arguments before proceeding
added logging level checks in LogInterceptor . java to ensure command execution only occurs when logging level is not FINE
updated EventBusTracingTestBase to use assertWaitUntil for span completion to improve test reliability and ensure correctness of finished spans
refactor QueryParser to use Locale . getDefault ( ) instead of a static method for setting the locale to improve code readability and maintainability by
replaced arrays . asList with collections . addAll and replaced HashSet with LinkedHashSet in EntryCustomizationDialog to improve code clarity and maintainability by reducing redundancy
refactored RuleBaseImpl to use a generic column type instead of a generic object to improve type safety and clarity in handling BetaNode constraints
updated the handling of UNAUTHORIZED in OCSPResponse . java and added a new class OcspUnauthorized . java to improve code clarity
added serverState variable and adjusted sleep duration in SSL . java to improve server stability and error handling during server failures
added connection count getter and setter methods to SourceCounter and AvroSource classes to track and manage the number of active connection in the source counter
changed access modifiers of execution methods in ExecutionStrategy and ExecutorServiceExecutionStrategy classes to public to allow access to these methods from other classes
refactor ` createDefaultJavaPackageFinder ` method to return an ` ImmutableSet < String > ` instead of a ` ImmutableSet < String > ` to
updated OutputWriter instantiation to use PrintWriter instead of OutputWriter to ensure proper output stream handling for better performance
updated the initialization of the staging file in FileSourceTextLinesITCase . java to use UUID instead of a hardcoded file name to improve
added DataTable import and handling for DataTable in JRubyStepDefinition . java to ensure proper handling of DataTable instances in JRuby execution
updated author visibility from GONE to VISIBLE and modified API calls in SearchImagesRenderer and ApacheHttpClientMediaWikiApi to enhance user experience by showing author
refactor ReadSentimentDataset class to improve code readability to enhance maintainability and facilitate future updates
updated FormulaParseException to include detailed error messages for parse errors to improve error reporting for better debugging and debugging
added methods to retrieve and set the WebSocket bind address in WebSocketClient . java to improve flexibility and encapsulation of WebSocket connection management
[ java ] delete the archive and archive directory before close the clustered media driver to improve resource management and prevent potential memory leaks
refactor size calculations in WidgetGroup to use a new setSize method to improve code readability and maintainability by consolidating logic
updated sessionFixationAttribute comparison to use Boolean . valueOf for better readability to improve code clarity and maintainability by using Boolean . valueOf for boolean
refactor logic to use a switch statement for edgeOption in LALogicLinesFragment . java to improve code readability and maintainability by using a
added exponential backoff methods to ChromeBinary and updated sleep duration in Thread . sleep to improve responsiveness by allowing dynamic backoff behavior
added method and route attributes to the ` ClientResponseWrapper ` class and updated related tests to include ` HttpMethod ` and ` HttpRoute ` to enhance
updated the condition for removing ColumnFamily from ` cf ` to ` Integer . MIN _ VALUE ` in ` PrecompactedRow . java ` to
updated renderingIntent return logic and modified color conversion logic in ICC _ Profile and ColorConvertOp classes to improve rendering intent handling and ensure correct rendering intent
added a new boolean field ` isNotSureAllowed ` and updated related logic in ` FeedbackContributionQuestionDetails ` to enhance functionality by allowing
added multiple calls to ` PublicMethed . waitProduceNextBlock ` in ` ContractInternalTransaction003 . java ` to ensure proper blocking
added SuppressFBWarnings annotation to KafkaExactlyOnceSink . java and removed Serializable interface from KafkaRecord . java to suppress Findbugs warnings
updated PooledConnectionImpl to include PGConnection and added a test for PGConnection in BaseDataSourceTest to ensure proper handling of PostgreSQL connection
refactor PropertyTable , CloseIgnoringInputStream , and CloseIgnoringInputStream classes to improve code organization and maintainability
change log level from warn to trace for unknown token encryption secret configuration to provide more informative logging when no token encryption secret is defined
mark Hazelcast class as deprecated to indicate that the class should no longer be used in favor of an alternative implementation
added topology update event handling in Ambari server actions and refactored command reporting in AbstractServerAction and FinalizeKerberosServerAction to improve
added ITERATOR and END tags to the NamedListCodec class and updated related logic in the NamedListCodec to enhance the codec ' s functionality
add null check for state before assigning new owners in MigrationManager to avoid potential NullPointerException when state is null
added a schema inclusion rule to ApiExample . java to allow users to specify a default schema inclusion rule for API requests
change the expected value of the mean and var from 3 . 0 to 7 . 0 in StreamExpressionTest . java to ensure the correctness of
updated coordinate sequence handling in SDO . java and added new test cases in SDOCreateTest . java to ensure proper handling of CoordinateSequences
added methods ` getBaseName ( ) ` and ` getDimensionCount ( ) ` to ` ConstantPool ` class to provide methods for retrieving base and size of
added a method ` setDebugEvaluationOutputForNextEval ` to ` FormulaEvaluator ` , ` SheetUtil ` , and ` XSSFFormula
updated JUnit imports and annotations in TestModule , RefactoringTest , and RefactoringTest classes to use JUnit ' s DisabledFor
removed unnecessary parameters from ExoPlayerProfile instantiation in LegacyMediaManager . java and modified playback logic in PlaybackController . java to simplify code and
added a return statement to the return statement in DynamicStyleBar . java to ensure proper handling of the return value of the method
added logging statements for setting and resettingReplDump properties in Utils . java to improve traceability and debugging for repl dump properties
refactor ReactiveAuthorizationManager to improve code readability to enhance maintainability and facilitate future updates
added a check to promote strings to boolean types in MethodEmitter . java to ensure proper handling of boolean types in string promotion
corrected the spelling of " LLVMObjectNuller " to " LLVMAddressNuller " across multiple files to ensure consistency
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
added a new test class ` CaffeineCacheDefaultConfigurationTestSuite ` to validate the transaction - aware cache configuration to ensure that the cache configuration is
added a method to calculate bounding box based on vertex positions in Mesh . java to improve bounding box calculation for meshes
added a new enum ` TargetHashFunction ` and modified its usage in ` TargetsCommand . java ` to utilize a configurable hash function to
refactor DefaultConfigurationProperties class to improve code readability to enhance maintainability and facilitate future updates
added high light color settings for d1 and d2 in ListViewMultiChartActivity and modified the arrow drawing logic in BarChart to enhance visual clarity
updated pgSgPathPlanMap entry to replace tmpPg with sgPathPlanMap to ensure correct mapping of SG path plans
[ hotfix ] [ test ] fix checkstyle violation in infinispanremoteproducerit
added a check to ensure the local repository exists before fetching artifacts and refactored dependency retrieval logic in MavenArtifactFetcher and MavenDependencyResolver to
updated the fragmentShader string to include conditional precision for color and texCoords if GL _ ES is not defined to ensure compatibility with the ES rendering environment
updated RSGroupInfo to use Set instead of SortedSet and changed getServers method from SortedSet to Set to ensure correct retrieval of servers from multiple servers
added a try - catch block to load the JspPage class and modified log level from warn to debug to improve error handling and reduce log verbosity
refactor CustomAnalyzer to use a version - aware token filter and add a new test for version - aware token filtering to improve token processing accuracy and
added a test method ` getApplicationInfo _ readsValuesFromSetPackageArchiveInfo ` to ` ShadowPackageManagerTest ` to ensure that ` getPackageArchiveInfo
replaced direct calls to ` invoke ` with ` MethodUtil . invoke ` across multiple classes to improve method invocation efficiency and ensure package access checks
added imports for ProjectConfigurationStartEvent and TaskStartEvent , and modified progress handling in GradleBuildService , Main , and ProjectReader to
removed synchronized block from AndroidWebDriver . java to streamline code by eliminating unnecessary synchronization
[ hotfix ] [ config ] remove unnecessary check for initializationfailtimeout .
changed the method signature of ` getResult ` from ` int ` to ` byte [ ] ` and added an error method in ` Net . java `
changed the type of ` isNative ` from ` boolean ` to ` transient boolean ` and updated its usage in the ` addEntry ` method to
updated error message formatting in CEntryPointCallStubMethod . java to improve clarity of error messages for better debugging
rename ` RuleEnableHandler ` to ` RuleEnablementActionHandler ` and update related references accordingly to improve clarity and consistency in naming conventions
refactor private fields in TagSupport and related classes to improve code clarity and maintainability
updated debug logging statements in AuthzAuthenticationFilter and AuthzAuthenticationManager to improve clarity and accuracy of authentication request processing
[ hotfix ] [ table - common ] fix typo in kafkadynamictablefactorytest
added null check for repository in UsersPanel . java to avoid potential NullPointerException when accessing the repository
added support for additional font files such as " . otf " and " . OTF " in SunFontManager . java to enhance font compatibility
refactor type checking in AnnotationMatcher to improve clarity and correctness to enhance code readability and maintainability by simplifying type comparison logic
updated error message from " OFF " to " SEVERE " in Grep . java to improve clarity of error reporting
added conditional checks before logging debug statements in FaultTolerantChunkProcessor . java to avoid unnecessary string concatenation when logging is disabled
rename ` includes ` to ` excludes ` in SurefirePlugin . java to improve clarity and prevent potential null pointer exceptions
added a check for ` openFolder ` and ` shouldMoveToDefaultScreenOnHomeIntent ( ) ` in ` Launcher . java ` to
updated maximum bitrate from 110 to 30 in PMS . java to allow for a maximum bitrate of 30 bit per second
removed the method ` getOptions ( ) ` and its usage in ` CommandLineParser . java ` to simplify the code and improve readability
modified the return statement to trim whitespace from the description to ensure that the description does not contain extra whitespace
updated the path for the output file in XOMParserTest . java to ensure the output file is consistent across different operating systems
removed the pid parameter from the error log message in ProcessBesuNodeRunner . java to simplify the log output by removing unnecessary information
added ` getLoadedMusic ` and ` getLoadedSound ` methods to ` MusicLoader ` and ` SoundLoader ` classes to provide access to the
removed unnecessary imports and simplified type assignment in OnBeanCondition . java to improve code readability and maintainability
added ScreenRecordRule import and annotation to RequestPinItemTest . java to enable screen recording functionality for test cases
added null checks for lrPauseButton and set it to false in CPUFeature and MemoryFeature to ensure proper selection of the pause button based on user
replaced ` accountsPrefCategory ` with ` mAccountsPrefCategory ` and refactored account preference creation logic to improve code clarity and maintainability
corrected the spelling of " available " in the presence message to ensure consistency and correctness in the presence type handling
updated StringBuilder initialization to handle non - negative utflen values to ensure proper initialization of StringBuilder based on utflen limits
added properties to WebApplicationContextRunner and ReactiveWebApplicationContextRunner in WebEndpointsAutoConfigurationIntegrationTests . java to disable statsd exporting in the
refactor InterruptedException class to improve code readability to enhance maintainability and facilitate future updates
refactor ServiceTicket class to improve code readability to enhance maintainability and facilitate future updates
refactor connection logic in ConnectionCheckOperation . java to streamline SSL connection logic to improve code readability and maintainability by reducing redundancy
updated the conversion logic in ArgumentArrayMessageMapper to check for Map class types before attempting to convert to address payload Strings to ensure correct conversion logic
added a check for IndexableDSpaceObject before processing IndexableDSpaceObject in SolrServiceCommunityCollectionItemFilterPlugin . java to
added Intent . FLAG _ ACTIVITY _ REORDER _ TO _ FRONT to set Intent . FLAG _ ACTIVITY _ REORDER _ TO
fix : deprecate patternparameterconfigurer in favor of template
changed the return type of ` beginDraggingWidget ` from ` void ` to ` boolean ` and added a null check for the drawable before proceed
added JUnit @ Ignore annotation to TestPackedInts . java to temporarily disable tests due to LUCENE - 4488 issue
added null check for root before collecting components in DynamicStyle . java to avoid potential NullPointerExceptions when root is null
added confusion matrix functionality to MaxentTagger , TestClassifier , and TestSentence classes to enhance confusion processing capabilities in test scenarios
corrected the spelling of " lastSampleInError " to " lastSampleOk " in JMeterThread . java to improve code readability
added unit tests for Bluetooth device retrieval and connection state in ShadowBluetoothHeadsetTest . java to ensure correct functionality and functionality of Bluetooth device
corrected the spelling of " # autowired " from " # autowire " to " # autowired " in the test method
updated objectMethods to include " clone " and " finalize " in ResultObjectProxy . java to enhance functionality by allowing additional methods to be included in
added null checks for counters and warnings in IntegrationTestBigLinkedList . java to ensure robustness by preventing null pointer exceptions during verification
added a new class ` REFERRING _ OBJECTS ` and modified the reply handling in ` DebuggerConnection ` to enhance the functionality of retrieving
updated the condition for setting the registered service filter in SamlIdPServicesManagerRegisteredServiceLocator to ensure that the registered service matches the specified service ID
added a null check for getActivity ( ) before running the Runnable on UI thread to prevent potential NullPointerExceptions when the activity is not initialized
updated logger initialization to use spaces instead of tabs in multiple classes to improve code readability and maintain consistency
added ` _ stringType ` field and its getter / setter methods in ` DatabaseAdaptor ` , ` SessionTableSchema ` , and ` JDBCSession
updated assertions in UIMAUpdateRequestProcessorTest to use " suggested _ category : * " instead of " language : english " to improve test clarity
refactor thread name handling in CliDriver , SessionState , HiveSessionImpl , and HiveSessionImpl classes to improve thread name management and ensure consistency
refactor TaskletAdapter class to improve code readability to enhance maintainability and facilitate future updates
added a new test method ` testDROOLS2200 ` to ` DMNRuntimeTest ` and modified ` DecisionTableImpl ` to
added GL11 . glFlush ( ) to TextureMap . java and modified default enabled flag in SplashProgress . java to ensure texture map creation
added tooltip for the ` showCGCP ` checkbox in ` RocketPanel . java ` to enhance user experience by providing a more informative
replaced calls to ` owner . getTypes ( ) . add ( e ) ` with ` owner . addType ( i ) ` in EnumFactory
[ hotreload ] add text and description parameter to retarget action
ggb - 2195 use hassheetlabel ( ) instead of issimple ( ) for column and column name
changed the conversion of BRIGHTNESS _ FACTOR from intValue ( ) to doubleValue ( ) in BindingConstants . java to ensure the correct conversion
updated regex patterns and improved revision parsing logic in SSCMHistoryParser . java to enhance accuracy in parsing revisions and enhance error handling
added a boolean parameter ` isAdmin ` to the ` createUser ` method and implemented user list methods in ` HomekitAuthInfoImpl ` to
added null checks for ` indexedWriteMethod ` and ` writeMethod ` in ` IndexedPropertyDescriptor ` , ` Introspector ` , and ` PropertyDescriptor `
[ hotfix ] [ runtime ] remove unused variable in dynatraceexporterv2
updated method names from ` execute ` to ` run ` in ` Context . java ` and ` Response . java ` to improve clarity and consistency in
added a method to deserialize capabilities from a NBTTagCompound in MixinItemStack . java to ensure proper handling of capabilities in the MixinItemStack class
changed assertion from " default " to " executionId " in LifecycleUtilsTest . java to ensure the correct execution ID is retrieved for the binding
added checks for contract type and created SmartContract in Wallet and GetContractServlet to ensure SmartContract creation only occurs when the contract type is not
added package - info . java files for various package - related components to ensure proper organization and organization of package - related components
modified the ` add ` method in ` DocumentsWriterDeleteQueue ` to use a loop for updating the tail tail to improve performance by avoiding unnecessary synchronization
added a check to ignore duplicates and modified test arguments in JavadocTool . java and T7091528 . java to improve file handling and
changed the default value of STRIP _ IPV6 from " true " to " false " and changed the default value from " true " to
added a parameter list to the LoginServerTokenEndpointFilter constructor and modified login info retrieval logic to enhance functionality by allowing users to add new user parameters
added a new constant ` C _ KEY ` and modified language comparison logic in ` LanguageFactory ` , ` LanguageFactory ` , and ` CPP
replaced direct instantiation of ` MoreExecutors ` with ` MoreExecutors . newSingleThreadExecutor ( ) ` in multiple Java files to streamline
added cache - control header and expiration header in LoginService , FormAuthenticator , and ConstraintTest classes to ensure proper handling of cache - control and expires
added exception message to the error logging in VoiceManager . java to improve error reporting by providing more context in error messages
updated HSSFTests to use Test classes instead of AllHSSFUtilTests and added new test suites in TestEmptyDocument to improve test
refactor FetchHTTP2Test , FetchHTTPTest , and FetchHTTPTestBase classes to improve code organization and maintainability
added a null check for the output file before accessing it to avoid potential NullPointerExceptions when accessing the output file
added access control priority settings for external resource management in Java2DRenderer . java to enhance security by restricting access control for external resources
added error handling for ArrayIndexOutOfBoundsException in TestTriggerCoverage . java to improve robustness by handling potential ArrayIndexOutOfBoundsExceptions
modified the access modifier of the HotspotThreadMBean variable and refactored the main method to improve thread CPU time testing to enhance code clarity and
added a check for comments before processing whitespace in TabsAndIndentsVisitor . java to ensure that comments are only processed if they are not empty
updated assertions in SimDistribStateManager and TestTriggerIntegration to use greater than 100 instead of 5 to improve clarity and accuracy of test assertions
updated comparisons in DatabaseChangeLog , RanChangeSet , and NotRanChangeSetFilter to use equalsIgnoreCase for case - insensitivity
removed the ` getString ` method from the ` ShadowBundle ` class to streamline the code by eliminating unused functionality
refactor date and time formatting in TweetActivity to improve locale - specific formatting to enhance readability and maintainability of the date and time display
added a check to return an empty list if no connections are available to ensure that the method returns an empty list when no connections are available
refactor keyboard focus handling in DetailFragment to use a dedicated method to improve code readability and maintainability by reducing duplication
modified the way the extra class path is set in the main class to ensure that the extra class path does not contain an empty string before setting it
make coordmatrix synchronize to avoid memory leak
added import statement for Message in GenericMessage . java to enable the use of Message in the message processing process
refactor SQL query construction in PostgresConnector and add a join method in TaskAttempt to improve code readability and maintainability by encaps
refactor filter selection logic in AquaFileChooserUI to improve clarity and maintainability of the filter selection logic
refactor synchronization in P2PTransportManager to improve readability and maintainability to ensure thread safety during ICE stream creation during ICE processing
replaced ` toString ( ) ` method with ` toString ( ) ` in ` ArrayPtg ` and added a new test method in ` TestArray
updated import statements in PGtokenizerTest . java to use assertEquals and assertTrue methods instead of wildcard imports to improve code clarity and maintainability by
refactor Java2TypeScriptTranslator to improve type handling and variable addition logic to enhance type safety and clarity in handling anonymous class types
added sequence creation and alter statements for auto - increment columns in PostgreSQL to ensure that PostgreSQL does not support auto - increment
updated byte reading logic in DataInput . java to handle negative byte values more effectively to ensure proper handling of negative byte values in data processing
updated metadata dimensions from " VerticalPhysicalPixelSpacing " and " HorizontalPhysicalPixelSpacing " to " 0 " in ImageParserTest . java to
updated the method call from ` getParent ( ) ` to ` getParent ( ) . getParent ( ) ` in ` Component . java ` to ensure proper
updated import statements in multiple Java files for consistency to improve code readability and maintainability
replaced calls to ` NativeCrypto . ENGINE _ finish ` with ` NativeCrypto . ENGINE _ free ` in ` NativeCryptoTest . java
refactor iteration event handling in InterleaveControl , RandomController , UserParameters , and IterationListener classes to improve clarity and functionality of iteration event
refactor FormDataHttpContentProcessor and NettyStreamingFileUpload to ensure proper resource management to improve resource management and prevent potential memory leaks
added a call to deleteLogs ( ) in TestRecovery . java to ensure proper cleanup of log files during recovery
added a conditional check for URL containing " twitter : / / " in the BrowserActivity to ensure that the application launches a new task if the URL
[ hotfix ] [ test ] add awaithoststatus ( ) to deploymentgrouptest
changed logResult from false to true in VisibilityController . java to enable the logging of the list labels allowed status
increased the maximum number of retries from 0 to 25 in RestTemplateRetryTests . java to increase the maximum number of retries for client failures
removed System . out . println ( result ) from TranslatorSupportTest . java and added multiple @ Override annotations in StandardTypeMapperComponent . java
added support for a new ` Fraction ` resource type in ` PackageResourceLoader ` , ` ResType ` , and ` Converter ` classes to enhance
removed the conditional check for file write confirmation in BasicFrame . java to streamline the code by eliminating unnecessary checks
added null checks for groupId and artifact ID in findNewerDependencyVersion method to ensure proper handling of null values and avoid potential NullPointerExceptions
hbase - 24165 raise quotaexceedexception instead of donotretryio in namespaceauditor ( jesus camacho rodr
refactor multiple token - related classes for improved consistency to enhance maintainability and readability of the codebase
refactor TestFuzzPreLoop class to improve code readability to enhance maintainability and facilitate future updates
added a check to ensure f0 is non - negative before setting it to 0 to prevent potential negative values from being processed
added null checks for pkColumn and fkColumn before adding them to SchemaRetriever and TableRetriever to avoid potential NullPointerExceptions when pkColumn is null
refactor encoder management in CoyoteAdapter , InputBuffer , and B2CConverter classes to use SynchronizedStack to improve performance and
added SharedPreferences support for allowing empty pages in the Workspace class to enhance user experience by allowing users to disable empty screen selection
deprecate cucumber - needle in favor of cucumber - cdi2 and cucumber - jakarta - cdi
refactored theme handling in ShadowThemeTest , ShadowArscAssetManager , and ShadowVMRuntime classes to improve code clarity and maintainability by
updated import statements and method calls in VerifyFast . java to use Arrays . toString for better readability to improve code clarity and maintainability by using
no effective change - remove system _ versioning _ alter _ history migration
updated conditional checks for PROTO _ PROPERTY _ NAME and added new methods for retrieving and setting protos in ScriptObject to improve code clarity and ensure
updated the shuffle method in TestFilterDirectoryReader to include a random seed to ensure randomness of the readers during the shuffle operation
added a condition to determine the display name of a user based on the shareWith parameter to ensure the display name is consistent based on the shareWith
updated the path formatting in CookieRetrievingCookieGenerator to handle empty paths to ensure consistent cookie path formatting when no valid path is provided
updated formatting in Jvm and JvmJvmstatModel classes to improve code readability and maintain consistency
changed cacheName variable from ` getBackupCount ( ) ` to ` getTotalBackupCount ( ) ` in ` AbstractCacheService . java ` to
updated comparison logic in ValidationResult . java for page number comparison to ensure correct validation of page number comparisons
added a condition to check if the focused widget is in the TabbingManager before proceeding to ensure that the focused widget is only displayed when the
reformatted method signatures in SoundUtil . java for consistency to improve code readability and maintainability
refactor ApplePackageDescription to utilize a new method for retrieving Apple C++ platform flavor domain to improve code clarity and maintainability by centralizing
added a test for SQL query formatting in ClickHouseStatementTest . java to ensure correct functionality of the SQL query handling in the test
renamed methods ` onConnect ` to ` onAccept ` in ` ServerSessionListener ` and ` AbstractHTTP2ServerConnectionFactory ` to improve clarity
refactor EnglishPTBTreebankCorrector to improve code structure to enhance maintainability and readability of the code
added a new file TestGetLoggerNPE . java to implement logging functionality to ensure proper handling of NPE issues during logging operations
added a ` data ` field to ` PathSharingContext ` and modified ` ScriptedProcessor ` , ` ScriptedDecideRule ` , and
refactor EspressoRootNode and StaticObject to streamline method execution and improve type casting to enhance code clarity and maintainability while ensuring
added support for a next value for in the NextValExpression class and updated related methods to enhance flexibility in handling next values based on user preferences
add more information to vmerror . unsupportedfeature error message
refactor BoundedLocalCache to improve handling of pending writes and add a new test for clearing pending caches to enhance cache management and ensure proper
added order direction property and its getter / setter in QuoineNewMarginOrderRequest to enable dynamic ordering of margin orders based on the current level
added boundInitialization method to PropertyDescriptor and created a new test class ` Test7192955 ` to ensure proper binding and validation of bean properties
replaced ` failsafeWidth ` and ` failsafeHeight ` with a new ` SetDisplayModeCallback ` interface in ` LwjglGraphics
added a null check for buttonsAwatingRelease before setting it to null to prevent potential NullPointerExceptions when accessing the parent form
refactor wrap width calculation in LineCell and improve pref height calculation in StyledTextAreaSkin to enhance code clarity and maintainability by centralizing
updated error message formatting in XSLTErrorResources _ it . java to improve readability and consistency of error messages
replaced HashMap with LinkedHashMap in CustomChangeWrapper , CustomPreconditionWrapper , and CustomChangeWrapper classes to ensure consistent ordering of parameter values
replace calls to ` getName ( ) ` with ` String . format ( ) ` in multiple Java files to improve code readability and maintainability by
removed unnecessary namespace context retrieval from StaxXmlPullParser to simplify code and improve maintainability
removed the ` nestedJoins ` configuration option from multiple test classes to streamline the configuration for nested joins handling
updated the condition for caller type from NORMAL to ACCOUNT _ TYPE _ ADMIN in QueryManagerImpl . java to ensure proper handling of caller
added ` cursor ` parameter to ` SourceFileManager ` and modified ` CompilationTaskProcesor ` constructor to accept a ` cursor ` parameter to
added configuration settings for METASTOREURIS and SQLAUTHORIZATION _ MANAGER in TestMsgBusConnection . java to ensure proper configuration of
refactor assertions in KuduIOIT and XmlIOTest to use MatcherAssert instead of JUnit assertions to improve code clarity and maintainability by
added @ Nullable annotation to output handlers in MetadataRenderer , TextRenderer , Util , and Util classes to enhance null safety and prevent potential NullPointerExceptions
change offsetMemSize calculation from Long . SIZE to Long . BYTES and add a new test for symbol file mapping in LineTcpConnectionContextTest
removed print statements for termFilter and otherTermFilter in TermFilterTest . java to clean up output and improve readability
removed the ` Reflection ` class and its associated methods from ` Jooby . java ` and ` TypeConverters . java ` to streamline
refactored ThreadlessExecutor to use a dedicated method for checking and setting the finished state to improve code readability and maintainability by centralizing
removed exception handling for IndexOutOfBoundsException in DateTimeFormatter and added a new test case in TestDateTimeParsing to improve error handling and ensure correct handling of
rename ` CHUNK _ LENGTH ` to ` CHUNK _ LENGTH _ KB ` and update related methods for clarity to enhance code read
added a new class T7034495 with interfaces A , B , and C with wildcard handling in Types . java to improve type safety and
simplified the loop structure in LotsOfEvents . java to improve code readability and maintainability
refactor conditional checks in TransclusionDecideRule . java for better readability to improve code clarity and maintainability
updated import statements and refactored version printing logic in Micronaut . java to improve code clarity and maintainability by consolidating version handling
added tests for the handling of the " Print _ Area " sheet in HSSFWorkbook to ensure correct formula handling for the " Print _ Area
updated the description retrieval logic in MindIconFactory to handle cases where the name has a trailing slash to improve clarity and maintainability of icon descriptions
updated onHomeIntent method to accept a boolean parameter for internal state handling to enhance flexibility in handling home intent events
refactor dependency tree preference handling in CxxBuckConfig . java to improve code readability and maintainability
added showDetails method to multiple classes to handle file details to improve user experience by allowing users to view files based on the active tab
updated function names from " $ apply " to " apply " across multiple files to improve clarity and consistency in naming conventions
added functionality to randomize 253 bytes in MinimalEncoder and updated test assertions in HighLevelEncodeTestCase to improve randomization logic and ensure correct
add header . isrequired ( ) and header . getsince ( ) to sourcebuilder ( fixes # 118 )
added a call to notifyDataSetChanged ( ) in FolderSyncActivity . java to ensure the adapter correctly reflects changes in data structure
added a method to set the default WAL sync mode in ShadowSQLiteConnection to allow dynamic configuration of WAL synchronization mode
updated type checking in RemoveJavaDependenciesAdapter and added assertions in Collections to enhance type safety and ensure correct handling of list types
remove unused getters from DefaultS3CrtAsyncClient . java to streamline the code and improve readability
updated test cases in ParserTest . java from " ef677 " to " ef677 " and " ef677 "
updated the assertion message in HazelcastTestSupport . java to include the content of the collection to improve debugging by providing more context about the collection size
[ graal ] fix cibailout and ciinternalerror in graphbuilderphase .
ggb - 254 fix for nullpointerexception when try to create a pen
refactor SQLXML class to improve code readability to enhance maintainability and facilitate future updates
added a limit parameter to the ` getOrderBook ` method in ` YoBit ` , ` YoBitMarketDataService ` , and ` YoBit
[ hotfix ] [ runtime ] rename gotwrongoomeexception to heapoomeexception
added StreamReadConstraints to configure maximum string length in StandardDataFlow to ensure proper handling of string lengths for JSON serialization
updated the retrieval of the engine string from a configuration variable to a default value of an empty string to ensure that the engine list is properly initialized and
refactor TimerWheel class to use WheelIterator instead of FullIterator to improve code clarity and maintainability
added error handling for generating customized bug messages in BugInstance . java to improve error reporting and provide clearer error messages for bug patterns
[ hotfix ] [ test ] change localchunkprovidertest timeout to 10 second
changed the visibility of the uncomplete checklists menu item from true to false to disable the uncomplete checklists functionality
added a new ` Contract ` class and updated ` DefaultResultSetHandler ` to resolve nested result maps to ensure proper handling of nested result sets in the
added null checks for defaultHome and unregistered the receiver if it is null to ensure proper handling of null values and prevent potential NullPointerExceptions
removed the import of VertxGen from PumpImpl . java to streamline code generation by eliminating unnecessary dependencies
removed unnecessary casting from ` mContainerActivity ` in ` FileDetailFragment ` , ` OCFileListFragment ` , and ` FileDisplay
trim whitespace from tokens in ConfigAttributeEditor and add a test for stripping trailing and leading spaces in ConfigAttributeEditorTests to improve code readability and
refactor ClassUsingAnotherAuxiliary and SelfClassWithAux classes to improve code organization and maintainability
changed the access modifier of ` singleModulReference ` to public and added a method ` getUnnamedModule ` to ` Target _ java
added a check for " pg _ " in the relKind assignment logic in DatabaseMetaData . java to ensure that the relKind is set to "
[ java ] deprecate agent _ rent _ plus _ value in favor of a new one .
updated RQST _ FIELD _ DESC to use 1 instead of - 1 in ThriftHiveMetastore . java and HiveMetastore .
added a new module - info . java file containing exports and exports for the core module to provide module - level exports for the core module
added logic to handle WRITING and INTERESTED states in SslConnection . java to ensure proper handling of flushing and fill
updated Log4j2LogDelegateFactory to implement Log4j2LogDelegateFactory and added a new NoExceptionInInitializerErrorTest class to
refactor execution logic to check for client and server VMs before executing the Java command to ensure that the test only launches when the server VM is
refactor ExecutableFindOperation , MongoOperations , and ReactiveMongoOperations classes to improve code organization and maintainability
updated the class name from " org . postgresql . ssl . LibPQFactory " to " org . postgresql . ssl . LibP
disable testinterprocesssemaphoreedges to avoid fail test
added sorting functionality to theme keys in EditableResources . java to ensure consistent ordering of resource keys in the application
added a new file ` OSvTerminal . java ` and modified ` TerminalFactory . java ` to include OSV terminal support to enable support for
added additional file extensions " . gs " and " . gr " to the name check in ClassType . java to ensure compatibility with additional file
refactor DrillTestWrapper to use TreeMap for combined vectors instead of HashMap to improve performance and maintainability of the code
added a condition to check for values before processing names to ensure that only valid values are processed in the processing loop
refactor WebSocket policy implementation to improve code readability and maintainability
removed static fields and methods from ShadowTelephonyManager , ShadowWifiManager , and ShadowTelephonyManager , and ShadowWifiManager
added a new method ` resolveMessage ` to perform template - based resolution and default - based resolution to enhance message resolution flexibility based on context and origin
replaced instances of ` MethodVisitor ` with ` Class < ? extends ClassVisitor > ` in ` AsmUtil . java ` to improve type safety
added a new ` LoggingAuditService ` class to handle user authentication and authentication events to improve auditing capabilities for users with non - existent users
added nullability annotations to temperature state methods and updated temperature handling logic in TadoZoneStateAdapter and AirConditioningZoneSettingsBuilder to improve code
updated conditional logic in BeanDefinitionInjectProcessor to include abstract methods to ensure proper handling of proxy types in abstract classes
camel - 14263 : camel - http - add option to configure http proxy to use system property .
updated MAX _ ENCODING _ VERSION from " 1.1 " to " 1.1 " to ensure compatibility with the latest encoding features
added a call to jdkSerialFilter ( ) in the System . java file to enable serial filtering functionality in the system
camel - 14263 : camel - jbang - log the size of the pool to reduce jvm object allocation .
removed the ' resetNextPage ' parameter from the ` forceFinishScroller ` method in multiple animation classes to simplify the method signature and improve readability
updated the ` ensureRealtimeClusterIsSetUp ` method to use ` rawRealtimeTableConfig ` instead of ` realtimeTableConfig `
added ` isError ( ) ` and ` error ( String message ) ` methods to ` ValidationReport ` , updated error handling in ` Disallow
refactor ` inlineQsb ` assignment to use ` closestProfile . inlineQsb ` instead of ` defaultDisplayOption . inlineQ
updated the ` createClassPath ` method signatures to include an ` throws Exception ` parameter and modified location encoding logic to improve error handling and ensure proper
updated regex patterns in TransformSteps . java from ' 10 ' to ' ( . * ) ' for method parameters to ensure accurate matching of method parameters
added null checks for the ` image ` variable before setting the retina property value to avoid potential NullPointerExceptions when ` image ` is null
[ hotfix ] [ test ] increase timeout for faulttolerancetest
updated package - info . java files for mmm and ppp packages to improve package documentation clarity and maintainability
added a method to set the Docker image URL in Environments . java to ensure the correct Docker image URL is used for testing purposes
added multiple calls to System . gc ( ) in KnowledgeAgentTest . java to ensure proper garbage collection in the KnowledgeAgentTest class
updated AdditionalAnswers , AnswerFunctionalInterfaces , and InvocationOnMock classes to improve code organization and maintainability
replaced createHardLink ( ) with a copyFile ( ) method in SnapshotTaker . java to improve file handling by allowing the creation of
rename ` appendToDescription ` method to ` getDescription ` in multiple classes to improve clarity and consistency in method naming
replaced calls to ` inputs . head ( ) . getManager ( ) . zeros ( ) ` with ` singletonOrThrow ( ) ` and refactor
added a check to ensure xml is an instance of Xml . Document before processing to avoid potential ClassCastException when processing XML documents
replace ` InstrumentationTestCase ` with ` AndroidJUnit4 ` in ` NotesHelperTest ` , ` GeocodeHelperTest ` , and ` 
added new GasLimitRule and ParentGasLimitRule to CommonConfig . java to enhance the configuration flexibility for gas and difficulty rules
changed access modifier of setupData method from public to private and changed access modifiers of setupData ( ) method to restrict access to setupData ( )
changed the variable ' autocommit ' from ' runInTransaction ' to ' runInTransaction ' in ChangeSet . java and XMLChangeLogHandler
updated method signatures and added null checks in TripleServerStream . java to improve code clarity and prevent potential NullPointerExceptions
updated URLs in JobManagerOptions , RestartStrategyOptions , and RestartStrategyOptions to include Site . BaseURL in the documentation to ensure
added a new test method ` testIssue154 ` to ` SelectTest . java ` to verify SQL parsing and deparsing to ensure that
refactor Common class to improve code readability to enhance maintainability and facilitate future updates
refactor launcher execution to use a try - with - resources statement for context layers to ensure proper resource management and avoid potential memory leaks
[ hotfix ] [ doc ] fix typo in streamexecdeduplicate
added a warning log statement for sending kafka messages to improve error handling by providing clearer context during message sending
added PersistentPropertyAccessorFactory handling in SimpleElasticsearchPersistentEntity and implemented isImmutable method in SimpleElasticsearchPersistentProperty to enhance property management and ensure proper immutable
modified the return type of the setCoord method in GeoCoordSys1D and GeoSegment3D classes to allow the method to return a boolean
added gesture handling logic and velocity checks in AskGestureEventsListener . java to improve user experience by allowing users to swipe up / down gestures
added comparison logic for comparing values and keys in NGramEstimator . java to ensure accurate comparison of values and keys in the NGramEstimator
updated import statements from ` cucumber . runtime ` to ` io . cucumber . core . runtime ` across multiple files to align with the new package structure
updated method calls in StatsLogCompatManager to retrieve folder icon details from the folder icon to ensure accurate retrieval of folder icon information from the folder icon
updated variable name from ` getServerSlogan ( ) ` to ` getServerName ( ) ` in ` ThemeUtils . java ` to ensure consistency
added a new file TestSkeletonPredicates . java to implement a test for skeleton predicates to verify the behavior of the loop predicates in the
replaced the retrieval of the end node with a box and added a transfer handler to the SelectionHighlighter class to streamline the selection processing process and improve
added a new file ` StringResultConverter . java ` implementing ` FromNativeConverter ` and refactored ` AsmRuntime . java ` to
camel - 19751 : remove @ disabledifsystemproperty from camel - account - producer and camel - market - producer test
updated condition from ` ! = 0 ` to ` ! = 0 ` in ` WaitForSingleObject ` method to ensure correct behavior of the ` WaitFor
added null checks for buffer and buffer limit settings in BufferUtils . java to ensure proper resource management and prevent potential NullPointerExceptions
updated data directory path assertion from " data / " to " data " in TestSolrDiscoveryProperties . java to ensure correct directory structure is used for
updated OS detection from " linux " to " windows " and added support for macOS pre - catalina to ensure compatibility with different operating
updated Lock constructor to accept a String instead of a File parameter to enhance flexibility by allowing the lock file name to be passed as a parameter
replaced the usage of ` appIcon ` with ` allApps ` in ` Overview . java ` to improve clarity and maintainability of the
refactor ClientDatagramEndPoint to use ClientDatagramEndPoint . this instead of Invocable . this to improve code readability and maintainability
updated the SQL query for retrieving step executions from " oreder by STEP _ EXECUTION _ ID " to " order by
updated button handling in LwjglInput . java to use - 1 instead of - 1 and modified event assignment logic to improve button management and
added tests for approving and rejecting claimed tasks in TaskRestRepositoriesIT . java to ensure proper handling of task submission and reject requests
refactor logging methods in OpenIdServiceResponseBuilder and GoogleAccountsServiceResponseBuilder to improve code readability and maintainability
updated expiration time logic in SsoAccessTokenProvider and added new test cases in SsoAccessTokenProviderTest to improve accuracy of expiration time validation and ensure
[ geos - 8036 ] fixed geoserversecuritytestsupport and geoservertestbasetest on macos
added methods for handling alarm suppressions and their history in GreetResourceMockedTest and OciMetricsCdiExtensionTest to enhance test coverage
reformatted conditional statements in JFrame . java for consistency to improve code readability and maintainability
added a null check for the connection before executing the ANALYZE SAMPLE _ SIZE 0 query to avoid potential NullPointerException when accessing
replaced the metricsContext initialization method with a direct call to ` super . initializeMetrics ` in ` SuggestComponent . java ` to streamline metrics
refactor footer formatting in OCFileListFragment to handle cases where files and folders count are negative to improve code readability and maintainability by
change default value of " HashKnownHosts " from " yes " to " no " and modified key loading methods in FileKeyPairProvider and Resource
refactor SourceVersion class to improve code readability to enhance maintainability and facilitate future updates
added a new test class ` ThreadFactoryTest ` for thread handling in ` QueuedThreadPool ` to ensure that the ` MyThreadFactory ` class
refactor lock period retrieval in DelegateResourceActuator to use a dedicated method to improve code readability and maintainability by centralizing lock period
added a new instance of TicketModel in EditTicketPage . java to initialize the ticket object with a new TicketModel instance
updated the feature flag " ENABLE _ PREDICTION _ DISMISS " from false to true to enable dimiss apps in the predicted list
updated constructors to include a selfType parameter across multiple assertion classes to enhance type safety by allowing additional assertion types to be casted
added a new menu item for quoting in the TweetActivity to enhance user experience by allowing quotes to be displayed in the quote menu
remove redundant code in jmeterthread to improve code readability and maintainability
rename ` codecPassthroughFormat ` to ` decryptOnlyCodecFormat ` and update related methods accordingly to improve clarity and consistency in handling audio playback modes
added a conditional check to ensure failure is only offered when the result is true to improve error handling by avoiding unnecessary failure offers
updated German and German error messages from " Stiller - Modus " to " Silent - Modus " in XSLTErrorResources _ fr .
added a ThreadSafe annotation to the CheckpointsCleaner class to ensure thread safety during concurrent operations
replaced ` Observer ` with ` Subscriber ` in ` MockRestAdapter ` , ` RestAdapter ` , and ` MockRestAdapterTest ` to
refactor component file creation logic in ComponentPresetManager . java to improve code readability and maintainability
added a new configuration option to specify unique column names in Hive results sets to enable users to specify unique column names for database results
removed the ` bFirstTime ` flag and added item listener to the ` cbDefaultVoice ` item listener in ` MaryGUIClient ` to stream
added a check to throw an IllegalStateException if the session is invalid and modified import statements in Session . java and SessionHandlerTest . java to ensure
hhh - 13388 remove exceptionhelper . java file that be no longer needed
updated keyPairGenerator initialization from 256 to 255 in JceX25519Domain . java to ensure consistent key generation across different domains
added a call to set the codec for Lucene41PostingsFormat in TestBlockPostingsFormat3 . java to ensure compatibility with Lucene
added logging for empty checkpoint range headers in CheckpointRangeHeaders . java to improve traceability and debugging when headersToImport is empty
added support for RSA / ECB / OAEP padding in the OperatorHelper class to enhance security by allowing customization of RSA encryption algorithms
updated platform inclusions from DARWIN _ AARCH64 to MACOS _ AARCH64 across multiple Java files to ensure compatibility with the
updated exception handling in DebugSourcesResolver to include SecurityException and added logging for failed URI resolution to improve error handling and provide clearer diagnostics when
removed unnecessary conditional checks for UNIX OS in AbstractTest . java to simplify the code and improve readability
updated error message formatting and modified segment file upload logic in FileUploadUtils , UploadRefreshDeleteIntegrationTest , and UploadRefreshIntegrationTest to improve clarity of error
replaced ` newDisposableByteBuffer ` with ` newUnsafeByteBuffer ` across multiple files to ensure proper memory management and prevent potential memory leaks
changed the USE _ PIPE _ DOWNLOADER variable from false to true in FastSyncChainDownloader . java to enable parallel downloading for faster download
updated SimpleDateFormat to use raw DST _ OFFSET instead of raw DST _ OFFSET and added a new class Bug7130335
refactor code to improve readability and maintainability to enhance code clarity and maintainability
refactor hypervisor handling in VirtualNetworkApplianceManagerImpl . java to improve code readability and maintainability
refactor StringBuffer class to improve code readability to enhance maintainability and facilitate future updates
added a uid assignment to the rule object in RuleResource . java to ensure the rule has the correct UID for the rule resource
added a null check for the listener before unsubscribeing the registry to avoid potential NullPointerExceptions when listener is null
added a new property ` PRETTY _ PRINT ` to the ` JoltTransformJSON ` class and updated its usage in the ` Jo
changed access modifier of ACCESS _ TABLE array from private to public to allow access to ACCESS _ TABLE from other classes
updated error messages in DataSourceInitializer and DataSourceInitializerInvokerTests for clarity to improve readability and maintainability of the code
refactored the ` doRun ` method to a separate ` doRun ` method in ` TcpTransport ` and ` XmppTransport ` to
refactor multiple Control and Control classes to improve code organization to enhance maintainability and readability of the codebase
added a new parameter ` effectiveClusterVersion ` and ` isUpgradeSuspended ` to the ` AmbariManagementControllerImpl ` class to enhance
refactor copyright year in FindsByCssSelector . java to improve code clarity and maintainability
removed unused variable ` wfields ` from ` Resolver . java ` to streamline code by eliminating unnecessary variable declaration
added default key size settings for EncryptionJwtCryptoProperties and OAuthProperties to ensure proper encryption and signing key sizes for OAuth applications
hbase - 24435 htabledescriptor . getcolumnfamilycount ( ) should return columnfamilycount instead of ` ` length ' '
replaced the import of AllowedResourceAliasChecker with a lambda expression using a lambda expression to simplify the code and improve readability
refactor ObjectInputStream , ObjectOutputStream , ObjectStreamClass , and Serializable classes to improve code organization and maintainability
added a ` reset ` method to the ` Cluster ` interface and implemented it in ` ClusteredServiceAgent ` to enable resetting of idle strategy
updated the initialization of the Writer in ChunkedWriter . java to ensure the currentChunkID is always incremented before creating a new Writer instance
added a new abstract class AbstractJobExecutor that implements JobExecutor to facilitate job execution handling in batch processing
replaced the replay call with a replayFuture assignment in RecoveryStrategy . java to improve the asynchronous handling of replay operations
rename ` hugeStaticBase ` to ` staticBase ` in ` HugeResourceTest . java ` to improve clarity and consistency in naming conventions
added a method ` getServiceIds ( ) ` to ` AbstractConsulClient ` that returns an empty list if the discovery is disabled to ensure
replaced ` Float . floatToIntBits ( ) ` with ` SecureRandom ( ) . nextInt ( ) ` for random number generation in ` catPut ( ) `
added a set of runtime compilations failed during parsing and refactored logging in RuntimeCompilationFeature . java to improve error handling and clarity when parsing
removed redundant assignment of currentStart and baselineStart in TimeOnTimeComparisonHandler . java to streamline the code and improve readability
added functionality to handle abstract methods in ` AnswersRealMethods ` and created corresponding unit tests in ` CreatingMocksWithConstructorTest ` to
refactor checkPackageAccess methods in NashornScriptEngine and Context classes to streamline package access checks to enhance code readability and maintainability by
updated ` ContextPathPluginTest ` to extend ` AbstractPluginDataInit ` and added new imports for ` ConditionData ` , OperatorEnum ,
refactor ContributionListPanel to use a model instance instead of a dtm instance to improve code clarity and maintainability by using a more descript
added a new case for REQUEST _ HAS _ TIS and updated related logic in QuickstepTestInformationHandler , TestInformationHandler , and Launcher
refactor connectWithNewInfo method to use Mutex . EVENT . writeAccess for thread safety to improve code readability and maintainability while ensuring
updated types from ` String ` to ` BuildTarget ` in ` ShowOptions ` and ` ComputeShowRules ` methods from ` String ` to `
added new classes ` ArrayHelper ` , ` Asserts ` , ` Comparables ` , ` NativeRegExp ` , ` Objects ` , and
added ' & ' and ' HOME ' and ' END ' characters to handle HOME and END operations to enhance functionality to handle both home and
removed synchronized block for retrieving connected plots in PlotHandler . java to streamline code by eliminating unnecessary synchronization
refactor Intent handling in Utilities . java to use Intent . createChooser instead of shareIntent to improve code readability and maintainability by centralizing
changed the access modifier of the constructor from public to package - private to restrict access to the constructor for better encapsulation
added basic constraints extension to certGen in TestUtils . java to enhance certificate validation capabilities
added a new test method ` testFixedNestedTransform ` to the ` TextVisualRegressionTest ` class to mark the test as ignored due to incorrect
replaced calls to ` field . multiValued ( ) ` with direct calls to ` precisionStep ` in ` TrieDateField ` and ` Trie
removed the TaskbarStateHandler class and its associated methods from BaseQuickstepLauncher to streamline the codebase by eliminating unused code
added a new file ` ArrayLength . java ` that tests the array type retrieval methods to verify that the array type returns a zero - length array
added logging for Hazelcast process destruction in HzStartIT . java to improve debugging and ensure proper cleanup of Hazelcast processes
refactor ApplicationSettingsService to use @ ApplicationScoped and @ PostConstruct annotations to improve dependency injection and ensure proper initialization of application settings
updated assertion from ' > = 0 ' to ' > 1 ' in Safepoint . java to ensure correct handling of positive and negative values
updated thread name field type from char array to string in OopUtilities . java to ensure compatibility with Java ' s String type handling
updated DEFAULT _ RAND _ SEED from System . currentTimeMillis ( ) to 42 in Lucene90HnswGraphBuilder and Hnsw
added strokeObject and fontObject variables to PGraphicsJava2D . java to enhance stroke functionality by allowing customizable font settings
refactor SQL node expansion logic into a separate method ` expandDynamicStar ` to improve code readability and maintainability by encapsulating the
added a method ` findInterestingChildren ( ) ` to find interested children and initialized ` _ header ` and ` _ children ` in ` Comment
added a warning icon for the PMS status code in HTTPServer . java to provide users with a warning message for PMS issues
refactor modifiers retrieval to use ` getModifiersEx ( ) ` instead of ` getModifiers ( ) ` for better readability to improve code clarity and maintain
updated node cycles from CYCLES _ 6 to CYCLES _ 3 in AMD64CountLeadingZerosNode and AMD64Count
camel - 14197 : camel - edi - as2 should not set content - transfer - encoding if content - type be null .
refactor Locale class to improve code readability to enhance maintainability and facilitate future updates
added a clearLogButton and a clearLog method to ErrorConsoleController , ErrorConsoleViewModel , and LogMessages classes to enable users to clear logs
updated initialization of mRecentsAnimationController in RecentsView . java to ensure proper initialization of the animation controller
updated imports and method signatures to use LocaleHolder for better locale handling to improve code clarity and maintainability by using a more descriptive variable
added connection pooling functionality to multiple test classes and adjusted execution count from 10 to 50 to improve resource management and ensure proper resource management during test execution
simonstewart : add opera driver to the defaultdriversessions for the opera driver .
added error handling for file download failures in ManageJournalsPanel . java to improve user feedback by displaying an error message when file download fails
added new PRODUCT _ ALL entries for " LIFX Mini White to Warm " , " LIFX Z " , " LIFX Color "
added asynchronous node handling in OverseerCollectionProcessor and updated related methods in CollectionsHandler and CollectionsAPIAsyncDistributedZkTest to improve asynchronous collection
refactor PostgresDatabase and PostgresDatabaseTest to simplify primary key generation logic to improve code readability and maintainability
updated LogPage , SummaryPage , LinkPanel , and LinkPanel to use the repository model ' s HEAD instead of a hardcoded
change the unit of the parent tail vector from UNIT _ Y to UNIT _ XYZ in SkeletonInterBoneWire . java to
added a method ` browserDestroy ( PeerComponent browserPeer ) ` to the ` AndroidBrowserComponent ` class to ensure proper cleanup of the browser component
added a call to waitForActiveCollection for readApiTestViolations in AutoScalingHandlerTest . java to ensure proper handling of test violations in the
updated loop structure in ScreenTerminal . java and added rounding logic for character attributes in Tmux . java to improve code clarity and ensure correct rounding behavior
updated the logic for determining controller states in SoftResetAction . java to improve clarity and maintainability of the code
disable on - disc stream cache to speed up texture pack reload
added conditional logic to retrieve the parent folder of the media renderer in Request . java and RequestV2 . java to ensure the correct parent folder is
change variable name from ' isPersistent ' to ' persistent ' in NetworkOfferingVO . java to improve clarity and consistency in variable naming
replaced deleteOnExit ( ) method with a dedicated close ( ) method in FileOutputStream to ensure proper resource management and prevent potential memory leaks
added error handling for 403 response in StandardGitHubRepository . java to improve robustness by throwing a specific exception when a 403 response is
added a method ` getOriginal ( ) ` to the ` MessageFactory2Adapter ` class and updated the ` AbstractLoggerTest ` and ` LoggerTest
added @ SuppressWarnings ( " BanSerializableRead " ) annotations to DataSizeTest , DurationTest , and SizeTest classes to suppress warnings related to
updated version regex pattern from 2 to 3 in Version . java to ensure compatibility with the latest version features
added delay settings for initial and dismiss delay in ExtractionModelFrame . java to improve user experience by reducing unnecessary delay settings
refactor ProjectCommand to use a new ` TargetGraphAndTargets ` parameter for handling passed - in targets to improve code clarity and maintainability by
added timezone handling in TimeTest . java to ensure correct formatting of timestamps in UTC time zones
refactor MediaSessionConnector class implementation to improve code readability and maintainability
replace JSSEFactory with endpoint ' s SSL implementation in Http11NioProcessor . java to streamline SSL support retrieval by using the endpoint '
updated accuracy string formatting in GpsLoggingService . java to improve readability and maintain consistency in accuracy display
added a new method ` isFuturesEnabled ( ) ` and modified ` BinanceExchange ` , ` BinanceAccountService ` , and `
refactor AdminAccountManagementHelper and AdminAccountManagementServlet to use AccountData instead of InstructorData to improve code clarity and maintainability by
added a method to set the accept queue size for the connector to ensure that the connector accepts a maximum number of worker threads
updated the variable name from ` getClass ( ) . getName ( ) ` to ` PROPERTY _ DISABLE _ WATCHER ` in ` Path
added a check to return true if the composite scheme is " SSL " to ensure proper handling of SSL connections in the jms factory
refactor DrillSqlWorker to use validationError instead of parseError and build logger in DrillSqlWorker and TestWindowFunctions to improve error handling
updated the calculation of duration in GCInspector . java to ensure duration is always positive for a really fast collection
refactor ` getJavadocComment ( ) ` to filter out ` JavadocComment ` instances and use ` parse ( ) ` instead of ` flatMap
replaced the usage of ` getUnsafe ( ) ` with ` isOsx ( ) ` and refactored memory handling in ` ReserveMemory
added calls to ` checkForRegionClosingOrSplitting ( ) ` in ` IndexRebuildRegionScanner . java ` to ensure proper handling of region
hbase - 12265 hbaseadmin . getprocid ( ) should return ` ` procid ' ' instead of ` ` procid ' '
modified WSDLServiceFactoryBean to accept a Class < ? > parameter instead of a hardcoded value to enhance flexibility by allowing dynamic service class
refactor YamlChangeLogSerializer to serialize change sets as a map and dump them into a container map to improve clarity and maintainability of the serialization
updated print statements in SchemaPrinter . java to include a newline character to improve readability of output for better debugging
removed unnecessary message sending in DebugRoadRegen . java and updated schematic handling in SchematicHandler . java to streamline command execution and
changed the context reference from ` getContext ( ) ` to ` getActivity ( ) ` in ` HomeFragment . java ` to ensure the correct context is
added ` @ GenericGenerator ( strategy = GenerationType . AUTO , strategy = GenerationType . AUTO , strategy = " native " ) ` to multiple
removed the country parameter from the getSystemTimeZoneID method to simplify the method signature and eliminate unnecessary complexity
updated the write method to include position and remaining parameters in BZip2Codec . java and modified ByteBuffer wrapping in TestBZip2Codec . java
appwapplet : do n ' t show log output if data param showLogging ( ) be true
added a new constant VALUE _ TYPE _ EMPTY and modified the type initialization logic in Value . java to ensure proper handling of empty values and improve type
replaced instances of ` = = ` with ` . equals ` for group comparisons in GroupManager . java to improve code readability and maintainability
refactor Liquibase and LiquibaseDropAll classes to improve code organization and maintainability
refactor SimplexNoise class to improve code readability to enhance maintainability and facilitate future updates
added a new method ` newInstanceExact ` to ` TargetGraphFactory ` to create a new instance of ` TargetGraph ` with specific nodes and edges
corrected the spelling of " getMinRowCompactedSize " to " getMaxRowSize " across multiple classes to ensure consistency in naming conventions
added Gson type adapter for ArtifactVersion and updated Gson initialization in MetadataCollection and ModMetadata classes to improve serialization and deserialization of ArtifactVersion objects
modified the handling of the current and previous elements in the NativeArray class to ensure proper management and deletion of elements based on their previous state
refactor file handling in FileUploader to use a parent file ID instead of a local file path to improve code clarity and maintainability by central
added a new UTF8ReaderBug class to handle supplementary XML characters to ensure proper parsing and parsing of supplementary XML characters in the jdk7
added a new test class ProxyBuilderTest to verify the behavior of the proxy builder to ensure that the proxy builder behaves as expected and behaves
updated subscription stream references from " depth " to " depth20 " in BinanceIntegration and BinanceUsIntegration to ensure compatibility with newer
added a method ` resetAllocation ( ) ` to ` SimpleParallelizer ` and created a new method ` resetAllocation ( ) ` in ` Wrapper
added import statement for AssertTree in AmbariManagementControllerTest . java to utilize the AssertTree functionality in the test
refactor properties handling in mmm Agent . java and add a new AgentCMETest . java file with a test class to improve thread safety and
refactor ModelUtils class to improve code readability to enhance maintainability and facilitate future updates
refactor AbstractDoubleArrayAssert class to improve code readability to enhance maintainability and facilitate future updates
updated width and height calculations in Legend . java to only include entries if the index is greater than or equal to mLabels . length to improve
added testDelay ( ) and testAbort ( ) methods to CodeFirstSpringmvcIntf , TestResponse , and SpringMvc classes to
replaced direct calls to ` d . get ( fieldName ) ` with ` text [ j ] ` in ` MoreLikeThis . java ` to improve
replaced ` ruleResolver . requireRule ( ) ` with ` new BuildTargetSourcePath ( ) ` in ` Omnibus . java ` to simplify
added a boolean flag ` ENABLED ` and updated chat message handling in ` CommandDownloadLatest . java ` to disable versioning functionality based on the
changed the type of ` filePaths ` from ` Collection ` to ` List ` and added a ` numberOfFiles ` field in ` MediaFolder `
removed the " - b " argument from AidlStep . java and modified the format call in GenAidlTest . java to streamline
added a new test class ` Issue79Test ` and modified ` ObligationAnalysis ` to handle the deletion of ` ResultSet ` to ensure correct
added a TODO comment to FakeHttpLayer . java to clarify the purpose of the test code
replaced error handling with revokeLeadership method in EmbeddedLeaderService . java to ensure leadership is revoked when an error occurs
refactor Flowable handling in CompositeDiscoveryClient to use Single instead of Flowable to improve performance and readability of the code
rename ` applySystemConfiguration ` to ` applyQualifiers ` in multiple files to improve clarity and consistency in naming conventions
[ hotfix ] [ config ] add description for jobmanager option
replaced ` updateNoWidgetsView ` and ` updateNoSearchResultsView ` with ` updateRecyclerViewVisibility ` and updated related methods accordingly to improve
added class loading for WstxInputFactory and WstxOutputFactory in XmlUtil . java and updated test assertions in MultiVersionXmlParser
added ` setUp ` method to ` AuditAliasCommandIntegrationTest ` to ensure proper initialization of ` ProjectWorkspace ` before tests
removed debug logging statements in WidgetsFullSheet . java and WidgetsRecommendationTableLayout . java to clean up unused logs and improve readability
( chore ) camel - cxf : disable test because the parent class do not support the invocation without parameter
added error handling for periodical refresh failure in CachedStore . java to improve robustness by logging errors during periodical refresh operations
updated ` ChainingAuditPrincipalIdProvider ` and ` CasCoreAuditConfiguration ` to use ` @ RequiredArgsConstructor ` and added a method
added a method to check default background colors in HSSFCellStyle and refactored background fill logic in HSSFPalette to improve color
updated ZonedDateTimeFormatterBenchmark . java file to improve date formatting functionality
refactor DistributedUpdateProcessor to use a new method ` shouldBufferUpdate ` and add a new test class ` DistributedUpdateProcessorTest `
added a condition to check if the motor is null and the stage is null in the SimulationListHandler class to ensure proper handling of cases where
updated command descriptions and modified item retrieval logic in WorldEdit . java to improve clarity and functionality of the edit script functionality
refactor ExtendedMasterSecretExtension class to improve code organization to enhance maintainability and readability of the code
changed the variable declaration from ` processor ` to ` final ` in ` AndroidInput . java ` to ensure immutability of the ` processor `
added a call to ` onWriteFailed ` in ` WritableKeyProcessor . java ` to notify the listener when a write fails to improve error handling
added support for the " CUBE " database type in MySQLDatabase . java to enhance compatibility with the MySQL database structure
hbase - 16265 testreplicationhandler fail on ioexception if snap directory do not exist
rename ` ExperimentalRobolectricTestRunner ` and ` TestRunnerForParameters ` to ` MultiApiRobolectricTestRunner ` and update related
refactor methods in DefaultOkHttpClientFactoryTest to use getter methods for timeout and read timeouts to improve code clarity and maintainability by centralizing
refactor BatchUpdateException , PreparedStatement , and Statement classes to improve code organization and maintainability
added a null check for the ` os ` variable in ` RawMessageContentRedirectInterceptor ` to prevent potential NullPointerExceptions when ` os ` is
ggb - 260 fix for av : if the user do n ' t have the correct layout , do n ' t set widget
updated the ` jailerMain ` method to include a ` fromCli ` parameter and modified its usage in ` Jailer . java ` to
refactor HttpRequest class to improve code readability to enhance maintainability and facilitate future updates
added a preference entry for pull unread in TalonPullNotificationService to track the number of unread pulls in the application
added a check for the object kind before proceeding with null checks in IsNullNode . java to ensure proper handling of null values based on the object
updated world step and memory calculations in Box2DTest , Pong , and OrthographicCamera classes to improve accuracy of simulation simulation and improve
refactor layout management logic in ViewPostDetailFragment to improve null safety to ensure proper layout management and prevent potential NullPointerExceptions
change log level from trace to warn in CLIService . java to reduce log verbosity and improve error handling
added a print statement to check if the method instance is abstract in JimpleBodyBuilder . java to ensure proper handling of abstract methods in interface and
ggb - 2195 fix for textfield focus on ie 10 +
updated the ` getNotificationUsers ` method to include a ` deviceId ` parameter and modified the return logic in ` CacheManager ` to include device
updated the base URL from " droppr . org / srtm / v4 . 1 / 6 _ 5 _ TIFs " to
refactor MotifFileChooserUI to remove property change listeners and add a new bug6520101 class for testing to improve code clarity and
changed return values of handle methods from void to boolean in multiple UI classes to enhance functionality by allowing the handle method to return a boolean value
refactor ` getRuleOptional ` methods to use ` getRuleOptionalWithType ` and ` getRuleWithType ` for better type safety to
added visibility to transportSpinner in HostListActivity to hide transport spinner when making shortcuts to improve user experience by preventing unnecessary visibility of transport spinner
added null check for attributes _ field in Attr . java and created new classes B . java , B . java , and T7073477
added a check to return early if back button is clicked before calling backPressed ( ) across multiple fragments to ensure that back button actions are only executed
added LONG _ VIEW _ INDEX _ ENABLED _ ATTRIB and DEFAULT _ LONG _ VIEW _ INDEX _ ENABLED _ ENABLED _
corrected the spelling of " V " to " v " in SDRTrunk . java to ensure accurate representation of the variable ' s
updated the method to clean the private key path in PrivateKeyParserTests to ensure proper formatting of the private key path
removed the ` columnPosition ` parameter from the ` diffDropColumn ` method signatures to simplify the method signature and eliminate unnecessary parameters
updated IndexWriter and IndexWriterConfig to use TEST _ VERSION _ CURRENT instead of Version . LUCENE _ 40 to ensure compatibility with
hbase - 24165 disable column family check when import tsv from a different table ( sergey shelukhin )
[ java ] change the variable name from ` logRecordingChannel ` to ` logSubscriptionId ` in the ` ConsensusModuleAgent
replaced calls to startActivity ( intent ) with startActivitySafely ( intent , " onClickVoiceButton " ) and added visibility settings for voice button proxy to
added a condition to skip processing for the first element of the JSON node in PoloniexStreamingService . java to avoid unnecessary processing when the node
refactor Procedure class to improve code readability to enhance maintainability and facilitate future updates
added Locale . getDefault ( ) and ClassLoader . getSystemClassLoader ( ) parameters to ResourceBundle method calls to enhance resource loading capabilities by providing additional locale - specific
add NormalizeArrayCreationsKotlin transpiler to handle array creation to ensure proper handling of array literals in Kotlin transpil
added checks for mincount and hasAnyCount before incrementing term enums in PerSegmentSingleValuedFaceting . java to ensure correct counting
update author list handling to use ` Objects . firstNonNull ` instead of ` Optional . fromNullable ` to ensure proper handling of null values in
added a new test class ` OSGiTest ` for testing the ` com . google . gson ` annotations and ` sun . misc ` import
refactor conditional checks in PropertyDescriptor and introduce a new method in TestStandardControllerServiceProvider to improve code readability and maintainability by encaps
hbase - 24105 htable . setautoflush ( false ) should set autoflushto ( false ) instead of setautoflush ( false
fix : cast ifelement . getthenstatement ( ) to ( ctstatement ) instead of ( ctstatement )
implement ` hasUserData ` method in ` SimpleFeatureImpl ` and implement a corresponding test in ` SimpleFeatureImplTest ` to ensure user data is
removed ` HiveException ` from method signatures in ` DDLPlanUtils ` , ` ExplainTask ` , and modified exception handling in ` Ex
refactor RelyingPartyRegistration class to improve code readability to enhance maintainability and facilitate future updates
removed the enableLogging method from JavaCompiler . java to streamline logging configuration for better performance
added a new class ` InJavaSourceSet ` to filter Java source sets based on their names to enhance the search functionality for Java source sets in
updated resource loading in TestGDALParser to use a variable for fitsFilename and adjusted method call in getResourceAsStream to improve code clarity and ensure
added a new method ` createGetter ` to the ` ReflectionHelper ` class to provide a way to create getters for objects with specified attributes
removed the condition for using external storage in DirectUpload . java to simplify the code and improve readability
added a new constant ` INDEXER _ NO _ COMMIT ` and modified ` IndexerOutputFormat ` , ` IndexerMapReduce ` , `
change disk offering id parameter from required to optional and add a null check for snapshotId in CreateVolumeCmd . java to ensure that both disk offering
updated content assignment and assertion in ToHtml . java and BaseTestCellComment . java to ensure that cells in the second column have non - empty
added null checks for ` amountToAdd ` and ` amountToSubtract ` in LocalDate , LocalDateTime , and ZonedDateTime classes to ensure proper handling of non -
added a new file ` Issue382 . java ` to implement HTTP error handling for specific error types to ensure proper handling of specific error types and
replaced the ` signum ` method with a static method ` signum ` in ` PositionUtils . java ` to simplify code and improve readability by eliminating
added a condition to hide the holder ' s text in AttachmentAdapter to ensure the holder ' s text is not displayed when the condition is met
refactor : fix type check for ctreference in astparentconscurencychecker ( # 138 )
simonstewart : do n ' t call the getprofile ( ) method in the firefoxdriverservice
added a new class ` LiquidBlock ` and modified ` FlowingFluid ` properties in ` BucketPickup ` to enhance fluid handling capabilities and
added a conditional check to return early if an exception is found in the log to improve error handling by avoiding unnecessary processing when an exception is detected
updated timezone from " PST " to " America / Los _ Angeles " in LocaleProviders . java to ensure consistent time zone usage across different locales
replaced ` existingObservation ` with ` distinctObservation ` in ` DistinctErrorLog . java ` to simplify code and improve readability
updated TEST _ NIGHTLY , TEST _ WEEKLY , TEST _ WEEKLY , TEST _ WAITSFIX , and
rename ` createLogger ` to ` getOrCreateLogger ` and update its usage in ` SQLEditorSupport ` and ` SQLExecutionLoggerImpl ` to improve
[ graal ] deny access to class , method , and proxy in GraalContext . java .
refactor image handling in PGraphics2 . java to use get and setDataElements methods instead of getRGB calls to improve code clarity and maintainability by
updated transaction property verification in HiveAbstractReader to include the partition object to ensure proper transactional properties are included in the transactional properties
refactor overlay handling logic in Workspace . java to improve readability and maintainability of the code
hhh - 13257 add support for unmodifiable batch builder in jdbc
[ hotfix ] [ runtime ] add more information to analysiserror . shouldnotreachhere ( )
added a new test class ` MockWithStaticStateDemo ` and created a new ` MockWithStaticStateDemo ` class to verify that spying
added a new test method ` testUnionWithBracketsAndOrderBy ` to ` SelectTest . java ` to validate SQL parsing and deparsing
added error handling for null UGI in SecurityUtil . java to improve robustness by preventing potential NullPointerExceptions
replaced direct calls to alGetError ( ) with a variable for error code to improve code readability and maintainability by using a variable for error
refactor EndpointHelper to use ` resolveParameter ` instead of ` resloveStringParameter ` to improve clarity and maintainability of the method signature
refactor precision and scale handling in RexNodeConverter . java to improve precision and scale handling to ensure correct SQL type creation based on the unscaled
updated WebAuthnMultifactorDeviceProviderAction to use Optional for retrieving vendor and device properties to improve null safety and prevent potential NullPointerExceptions
updated the method call from " testName " to " now " in WalletTestAccount003 . java to ensure the correct timestamp is used
replaced AxialStage with RocketComponent in BasicFrame . java and modified selection handling in DesignPanel . java to simplify the code and improve
added a long running time parameter to the Args class and initialized it with its value from the configuration to enable dynamic configuration of the long running time based
updated FindRefComparison and RefComparisonWarningProperty to use PriorityAdjustment . AT _ MOST _ LOW instead of PriorityAdjustment . AT _ MO
updated import statements and method signatures in HttpServerProvider , HttpsServer , and ScriptEngineManager classes to improve code clarity and maintainability by using ServiceLoader instead
convert decimal to plain string in XSDecimalBinding and update GML3EncodingTest to use toPlainString ( ) instead of toString ( ) to
updated assertions in TestRestClientRequestImpl . java to improve clarity and consistency to enhance readability and maintainability of test assertions
updated condition in MissingUniqueConstraintChangeGenerator to include comparisonDatabase equality check to ensure unique constraints are only created when referenceDatabase equals comparisonDatabase
refactor Android properties handling in IjProjectTemplateDataPreparer . java to streamline property management and improve code readability
replaced assertions with await statements in DuplicateCookieTest , DuplicateCookieTest , and SessionRenewTest to improve code readability and maintainability by
updated ChromeTraceBuildListener to include user args and daemon flag in user arguments to enhance the build process by providing user - specific user arguments for better
svm : fix localization and substitutions to work with java 11
corrected a typo in the log message from " Setting match limit " to " Setting match order " to improve clarity and consistency in logging
added a new file TheRockMetaDataDemo . java to demonstrate the retrieval and retrieval of exchange metadata to demonstrate the functionality and functionality of the TheRock
changed ` FloatingDecimal ` , ` FormattedFloatingDecimal ` , and ` ParseDouble ` classes to be strictfp , and added a
removed the unparseIdentifier method call from columnNamesBuilder to simplify the code and improve readability
added a new test method ` replaceField ` in ` JavaTemplateContextFreeTest ` and modified ` BlockStatementTemplateGenerator ` to use ` Cursor
added a check for non - synthetic methods in InstantiateStaticClass and introduced a new test class for static methods to ensure proper handling of synthetic methods and
replaced projectFilesystem . getPathForRelativePath ( basePath ) with projectFilesystem . getPathForRelativePath ( basePath ) to simplify the code and improve readability
added support for registering and unregistering pending rescues in IkStepDefinition . java to improve stability by ensuring pending rescues are properly managed
updated equals and hashCode methods in AbstractType , BigintType , DoubleType , TimestampType , and TimestampType classes to ensure consistent hash code generation
added a method to retrieve the SyncLevel enum and implemented a method to retrieve the default sync level to improve flexibility in handling sync level configurations and
updated Jedis pause logic to use try - with - resources for better resource management to ensure proper resource management and avoid potential memory leaks
added a condition to check if the slice state is not the RECOVERY state before proceeding to ensure that the recovery strategy does not proceed
corrected whitespace in the create method call in opencv _ core . java to improve code readability and maintain consistency
added SDKPath field and updated method signatures in AppleBundle , SwiftStdlibStep , and ProcessExecutorParams to accept an ExecutionContext object to enhance
updated ` TransientBlobCleanupTask ` and ` TransientBlobCache ` classes to use ` BiConsumer < JobID , TransientBlobKey
corrected spelling of " 1 - 1 NAT " to " static NAT " in NetworkManagerImpl . java to improve code readability
refactor PasswordEncoder and StandardPasswordEncoder classes to improve password handling consistency and maintainability
added conversion for sort and union data types in Hive pull - up constants to ensure proper handling of different data types during pull - up operations
refactor BetterBlockPos class to improve code readability to enhance maintainability and facilitate future updates
updated the method to retrieve the ServletContext using the class loader in EmbeddedVelocityToolboxView . java to ensure proper proxy retrieval based on the class loader
updated version handling in MainWindow and ConnectionSettingsPanel to use isNightlyBuild ( ) instead of hardcoded version string to improve clarity
added OracleDatabase import and modified statement formatting in LoggingExecutor . java and JdbcExecutor . java to ensure proper handling of trailing / duplicated / '
added a new boolean flag ` UNKNOWN _ VALUES _ ARE _ NSP ` in ` IsNullValueAnalysisFeatures . java ` to indicate that unknown
updated the port setting in MainTest . java to use a formatted string for HTTP requests to improve code readability and maintainability by using a more
updated BLOB _ SIZE , PLAY _ MARGIN , SLIDER _ MARGIN , and SLIDER _ MARGIN
added a new multifactor authentication provider bypass configuration in DuoSecurityMultifactorProviderBypassConfiguration . java to enhance security by associating with the
reformatted method names in MaxRectsPacker . java for consistency to improve code readability and maintainability
[ drools - 1076 ] fix checkstyle issue in drools - drools
added methods to set and get the help page in PMS , modified HelpTab , and LooksFrame to utilize this new functionality to enhance
added new files GeocodeProviderFactory . java and Constants . java , along with new Constants . java , and created GeocodeProviderFactory . java
updated import statements for CharArraySet in LuceneAnalyzerUtil , LuceneTokenizer , and LuceneTokenizer classes to ensure compatibility with the latest package structure
refactor test methods and improve exception handling in OptionTest and ResourceManagerImplTest to enhance clarity and maintainability of exception handling in the codebase
updated GATEWAY _ SERVER _ ID constant to use Protocol . GATEWAY _ SERVER _ ID instead of a hardcode
updated conditions for handling document fields in SegmentsInfoRequestHandler and modified collection creation in CollectionsAPISolrJTest to improve code clarity and ensure correct field
updated the calculation of ` numPredictiveAppCols ` to use ` isPhone ( ) ? 4 : numColumns ` instead of ` num
added a method ` hasScalarSubqueryInput ` in ` JoinUtils ` and refactored ` NestedLoopJoinPrule ` to utilize
added a new abstract block ` BlockBuildCraft ` to handle crafting items in the inventory to facilitate the removal of items from the inventory when a
updated layout parameters in DeviceProfile . java to use LinearLayout for layout parameters to improve layout responsiveness and ensure correct layout layout for drag targets
changed the method call from ` run ( ) ` to ` start ( ) ` in ` YahooSession . java ` to ensure proper execution of the
updated HiveMetaStore and HiveMetaStoreClient to set ms to null before shutting down the metastore client to ensure proper resource management and prevent
updated display script retrieval in Locale and added a test for bug 7079486 in LocaleCategory to ensure correct display script retrieval based on locale '
removed static imports from getCoreUrl and getStr methods in Replica . java to streamline code by eliminating unnecessary static imports
replaced ThreadLocalRandom with a new Random instance in StoreDirectTest . java to improve performance by using a more efficient random number generator
added a check to ensure launcher is ready before backuping favorites and restoring icons to ensure backups are only performed when the launcher is ready to
updated error messages in Cell . java for better clarity to provide clearer context about invalid values to improve error reporting and provide clearer error messages for
added a new test class ResiliencePooledRouteOkTest to validate resilience behavior with JMX introspection to ensure proper functionality and functionality of
renamed ` mBodySpace ` to ` mBarSpace ` across multiple classes to improve clarity and consistency in naming conventions
refactor ShadowProcess class to improve code organization to enhance maintainability and readability of the code
refactor FileMessageHistoryTest to use TemporaryFolder for file creation and assertion to improve code clarity and maintainability by utilizing TemporaryFolder
added debug logging for various logger classes in Grasscutter . java to enhance logging capabilities for better debugging and monitoring
changed the visibility of the ` highlightCnstScrRngQuery ` variable and related methods from private to static in ` SpanScorer
refactor workspace state checks in Launcher and add a method to retrieve the workspace state to improve code clarity and maintainability by consolidating state
refactor multiple assertion classes for consistency and clarity to improve maintainability and readability of the codebase
added cacheable check before notifying the new template in SnippetTemplate . java to ensure that the notification process only occurs when the cacheable flag
added new constants SCOPE _ SOLR _ CORE and updated related classes to use a coreScopeSession for better scope management to enhance code clarity
added primary key to the measurement table in DatabaseMetaDataTest . java to ensure that the measurement table has the correct primary key for the measurement table
[ multistage ] [ pantheon ] rename -- permissions - config - path to -- permissions - config - file
refactor HttpSession handling logic in HttpSessionContextIntegrationFilter . java to improve readability and maintainability of the code
added a new file ` TestIfWithDeadRegion . java ` implementing a test method for retrieving a string from a supplier to demonstrate the functionality of
corrected the spelling of " USD " from " UD " to " USD " in the DependencyParserITest and DependencyParser
[ hotfix ] [ test ] enable high - resolution timer in snowflakeidgeneratortest
added static UI configuration and modified toast bar visibility logic in MainFragment to enhance user experience by allowing dynamic UI behavior based on user settings
replaced the custom Privilege implementation with a lambda expression in WindowsSecurity . java to ensure proper resource management and prevent potential memory leaks
added ` setParameterIfAbsent ` method to ` SamlRedirectLogoutHandler ` and modified parameter handling in ` WhitelistLogoutHandler ` to improve
updated JOptionPane messages in MEncoderVideo , NavigationShareTab , and PluginTab to use localized strings to improve user experience by providing a clearer error
added MIME type assertions for XLSX files in TestMimeTypes . java to ensure correct mimetypes are used for XLSX files
added logging functionality to Runner , FeaturePathFeatureSupplier , and FixJava classes to improve logging clarity and provide more informative logging for glue loading
camel - 10266 : fix xml output for camel - eip documentationEnricher and camel - eip documentation enricher .
add a synchronized method ` removeVersionInfoForEndpoint ` to ` MigrationCoordinator ` and update its usage in ` StorageService ` to ensure thread safety
added debug logging for stored audio notify and playback devices in DeviceConfiguration . java to improve debugging and ensure proper handling of audio device configurations
added websocket configuration to ShenyuConfig and updated WebSocketPluginConfiguration to utilize it to allow configurable frame payload limits for WebSocket connections
updated CacheValidationListener to implement ISuiteListener and modified method invocation handling to improve test listener management and ensure proper cleanup of test listeners during execution
updated contentLength handling in MoreIndexingFilter to check for non - empty strings before adding it to the document to ensure that the content length is only
replaced synchronized block with a private method ` solvingTerminated ( ) ` in ` DefaultSolverJob . java ` to improve thread safety and encap
[ iotdb - 4892 ] ignore pathalreadyexistexception when concurrent insert a timeseries
added a method ` check ( boolean result ) ` to the ` Authz ` class to provide a way to check if a boolean is returned
changed access modifiers of methods from public to protected in ShadowActivityManager , ShadowSettings , and ShadowTypeface classes to enhance encapsulation and
cloudstack - 4892 : do n ' t recursively create a vlan if it ' s a reserved state .
removed redundant code and updated test cases in HttpParser and HttpParserTest classes to simplify code and improve readability by eliminating unnecessary complexity
refactor initialization logic in J9VMInternals and Thread classes to streamline output and error handling to improve code readability and maintainability by
added a method to create an external storage public directory in ShadowEnvironment and created a new EnvironmentTest class for testing to ensure proper handling of external storage
[ jbrules - 2841 ] add miss test for mvel type coercion ( # 241 )
updated formatting and formatting in LoggingConfig . java for consistency to improve code readability and maintainability
added exception message to the logging statement in ActionNode . java to include the exception ' s message to improve debugging by providing more context about the exception
added a check to remove the " tel : " prefix from the toNumber string to ensure correct formatting of the toNumber string
refactor visibility logic in FileListListAdapter to check if the file is a folder before displaying the shared with me icon to improve code clarity and
removed deprecated HIVEOPTSORTDYNAMICPARTITION configuration in HiveConf . java and updated its usage in TestTxnCommands3 . java
refactor ExecuteStatementOperation and Operation classes to improve configuration overlay handling and logging keys to enhance code clarity and maintainability by encapsulating configuration
replaced ` Lists . newArrayList ` with ` Arrays . asList ` in ` BTCMarketsStreamingAdapters ` and ` BTCMarkets
updated assertion from ` getName ( ) ` to ` getTypeName ( ) ` in ` OGRDataStoreTest . java ` to ensure consistency in type
removed the ` onErrorInStep ` method from ` StepListenerSupport ` to streamline error handling by returning an error status
refactor wallet class to improve code readability to enhance maintainability and facilitate future updates
camel - 10263 : camel - netty - add charset option to camel - netty - http
replace System . out . println statements with logging statements in TestNonBlockingAPI . java to improve logging consistency and reduce verbosity
added a check to return false if the row exceeds the size of connectionList to ensure proper handling of rows in the database connection list
add a new file MethodWithSameNameAsEnclosingClass . java that checks method names to ensure correct rule violations for methods with the same name in
added functionality to retrieve and return the ` ExtendedPlatformComponent ` instances in ` ManagementFactory ` and created a new ` ExtendedPlatformComponent ` class to
updated SQL string replacement logic in BasicQueryTest . java to ensure proper escaping of quotes in SQL queries
updated URLs to use " org / knowm / xchange / bleutrade / dto / " instead of " " " " " " "
refactor TextEscapeUtils to improve code readability to enhance maintainability and facilitate future updates
added a filter parameter to the AbstractSpatialFieldType class and updated the FilteredQuery instantiation in TestSolr4Spatial to support filtering based on local parameters
removed redundant conditions for showing and hiding progress in GpsLoggingService and added a call to updateResultsEmailSent in AutoEmailHelper to streamline
changed the type of ` inlinks ` from ` ArrayList ` to ` HashSet ` and refactored related methods to use ` iterator ( ) `
refactor stopScan method to use a synchronized call to removeOlderResults to ensure thread safety when stopping the scanning process
updated the ` isClientFilterEnabled ` parameter and modified the ` testFilterForPartition ` method to accept a boolean parameter for server - side filtering
added a new status field ` Abandoned ` and updated related workflows to include ` Abandoned ` and ` Abandon
removed unnecessary initialization of columnAliasPrefix in multiple platform classes to streamline the code and improve clarity by eliminating unnecessary default values
updated LlapRowRecordReader , LlapInputFormat , and LlapInputFormat to use BytesWritable instead of Text and BytesWritable to improve data handling
added a new class NonNativeJVMDetector to detect non - native JVMs in the TerasologyEngine class to ensure compatibility with
updated conditional checks for PdfName ' s PARENT to use ` equals ` instead of ` equals ` for better readability to improve code clarity and
added a new option DAEMON to the OptionEnum and integrated it into TerminalClient to enable daemon mode providing a web pendant UI for
added a new file ` FlushIndexTask . java ` that implements the ` PerfRunData ` task for flushing the next buffer in benchmark
updated the ` createFlushWriter ` method to include an estimated size parameter and modified the ` getFlushPath ` method to include an estimated size parameter
added a check for ` SEASONS ` in the conditional statements in MediaLibraryFolder . java to support additional output scenarios
added a new file LocalSocketAddress . java to test the availability of IPv6 loopback addresses to ensure that IPv6 addresses are correctly handled and
updated grid size points in GridSizeMigrationTask . java from 2 , 3 , 4 , 5 , and 6 to adjust grid size calculations to ensure
replaced calls to ` getName ( ) ` with ` name ` in ` SerializerPojo . java ` to improve code clarity and maintain consistency in naming convention
added read - only options and modified commit and rollback logic in the Context class to ensure proper transaction and rollback behavior in read - only contexts
refactor LookAndFeelCommand class to improve code readability to enhance maintainability and facilitate future updates
updated calculation of runEnds from floor to ceiling for lastRunStart and adjusted conditional check for offset to ensure correct calculation of runEnds and
added EOFException and EofException to the thrown assertion in GracefulStopTest . java to enhance exception handling by including additional exception types
replaced multiple locking mechanisms with a synchronized remove method in NetJavaImpl . java to simplify code and improve readability by reducing duplication
refactor NetworkParameters class to improve code readability to enhance maintainability and facilitate future updates
removed conditional setting for account asset optimization in DynamicPropertiesStore . java to streamline asset optimization logic for better maintainability
added a static final integer for J9 _ GC _ POLICY _ NOGC and initialized it to zero to provide a default value for GC policy
removed invalid contract validation for transactions in TransactionCapsule . java to streamline transaction processing and improve error handling
deleted the ExceptionTypeChecking . java file to remove obsolete rule to streamline the codebase
updated resource path from " en / " to " en / " and added logging for missing localization files to improve localization support and provide clearer logging
added a new file ` ProcessorInfo . java ` to determine the number of CPU processors in the application to provide a mechanism for determining the number of
added a stylesheet option to the PrintingBugReporter for generating HTML output to enable users to specify a default stylesheet for HTML output generation
refactor LogbackLoggingSystem to use a nullable logbackXmlLocation parameter instead of an Optional < String > to improve flexibility by allowing optional configuration
refactor HostLevelParamsHolder and ServiceComponentRecoveryChangedEvent to use ServiceComponentRecoveryChangedEvent instead of ClusterId to improve code clarity and maintainability by
added conditional property for tag - propagation and updated handler creation logic in SleuthTagPropagationAutoConfigurationTests to ensure correct handling of tag propagation
refactor RustCompileUtils to use a switch statement for handling SHARED , STATIC , and STATIC _ PIC cases to improve code
updated the ` oauth2LoginLinks ` method to accept a ` MultiValueMap < String , String > ` parameter and added error handling to the
hbase - 24265 halfstorefilereader should seek to the first key before seek to the first KV in the file
hhh - 13213 deprecate @ value ( ) and @ timing ( ) annotation . when ( ) . isalways ( ) ,
added a new test method ` testLayerNormNan ` to ` TestLayerOpValidation ` for layer normalization to ensure correct behavior of layer normalization
replaced direct calls to ` showShareFile ` with ` getFileOperationsHelper ( ) . showShareFile ( getFile ( ) ) ` in multiple activities
added a new test class LiquibaseUpdateMojoExecutionTest to validate the execution of the Liquibase update plugin to ensure correct functionality of the
convert the " proxyType " value to uppercase in Proxy . java to ensure consistent conversion of the proxy type to uppercase
add a new file mod _ MinecraftForge . java that implements the BaseMod class to provide a way to obtain the version of the MinecraftFor
refactor JdbcDatabaseSnapshot to improve caching logic for columns by table and all tables to enhance the accuracy of column filtering based on database settings
added a new container to the CSSBorderTest class to enhance the visual appearance of the container in the UI
added ` RetryAutoConfiguration ` and ` RetryInterceptorAutoConfiguration ` classes , and modified ` RetryLoadBalancerInterceptor ` to accept a ` RetryTemplate `
updated layout parameter from FILL _ PARENT to MATCH _ PARENT in CellLayout . java to ensure consistency in layout behavior
updated the calculation of ` parentTaskName ` to use ` System . nanoTime ( ) ` instead of ` System . nanoTime ( ) ` to ensure
added error handling for UncheckedIOException in ServiceResourceProvider . java to improve robustness by catching unchecked exceptions during request parsing
refactor index handling logic in IndexDatabase . java to improve readability and maintainability to enhance code clarity and maintainability by reducing redundancy
updated the condition in the ggbround method to check for two elements in the list to ensure correct rounding behavior based on the number of elements
refactor AnonCipherWithWantClientAuth class implementation to improve code readability and maintainability
added multiple @ Deprecated annotations to ProducerTemplate . java to indicate that these methods are outdated and should no longer be used
refactor JLayer class to improve code readability to enhance maintainability and facilitate future updates
fix flaky test in evictiontest
refactor password encoding logic in Md5PasswordEncoder to use a salted password instead of an input string to improve code clarity and maintainability by
replaced direct access to ViewTreeObserver with direct access to mTaskRecyclerView ' s viewTreeObserver to simplify code and improve readability
refactor Response class to improve code readability to enhance maintainability and facilitate future updates
updated the default maxTimestamp value from Long . MIN _ VALUE to Long . MAX _ VALUE in SSTableMetadata . java to ensure proper handling of
set the preferred size of the SecurityPanel to improve user interface responsiveness
added null and empty checks for replies before accessing them in TweetActivity , TimeLineCursorAdapter , and TweetView to ensure replies are
added ` toString ` and ` hashCode ` methods to ` HitbtcBalance ` and updated ` HitbtcAdaptersTest ` to improve string
updated SQL code generation to handle column names and modified condition checks for order direction handling to ensure accurate metadata retrieval and improve test coverage for where clauses
updated the return statement in RetriesExhaustedWithDetailsException . java to use addrs . toString ( ) instead of a string to improve
replaced direct action handling with OpenCookie . open ( ) in EditGcodeFile . java to streamline file opening process and improve code clarity
updated import statements from ` org . apache . http ` to ` org . apache . hc . client5 ` in ` JsonToGrpcApplicationTests
refactor energy calculations in PipePowerWood . java to use Math . min instead of Math . min to improve code readability and maintainability
added a check to delete the temporary output file if it exists to ensure that the output file is properly deleted when it does not exist
updated the parameter name from " tid " to " id " in BitstampWebSocketTransaction and added a new test in BitstampStreamingMarketDataService
added a limit check in ReplayProcessor and ReplaySubject classes and corresponding tests in ReplayProcessor , ReplaySubject , and tests to ensure
updated the expectedCitation string format in CitationStyleGeneratorTest . java to ensure correct formatting of the expected Citation string
added a new SQL query for inserting columns in MediaTableFiles . java and refactored SQL statements in MediaTableFiles . java to improve
[ algebra ] show only definition for exam when there be no equation
added a null check for the component in SIPCommTextFieldUI to prevent potential NullPointerExceptions when the component is not initialized
added caching configuration for scans in MetaReader . java to improve performance by allowing scans to be cached based on configuration
updated the init script from " q _ test _ init . sql " to " q _ test _ init _ for _ minimr . sql
refactor Math and StrictMath classes for improved clarity to enhance maintainability and readability of the codebase
added a new debug flag ` ENABLE _ TRANSIENT _ TASKBAR ` to the FeatureFlags class to enable the transient taskbar feature
refactor AccessExecution , ArchivedExecution , and AccessExecutionVertex classes to improve code organization and maintainability
added a conditional check for scale equals 3 in IOSGraphics . java to ensure density is set correctly based on the scale value
rename ` optional ` to ` vararg ` in ` Parameter . java ` to improve clarity and consistency in naming conventions
hbase - 24165 regionstatestore . getstate ( ) should log exception instead of log message
replaced an anonymous AssertTask with a direct call to ` toString ( ) ` in the ` assertTrueEventually ` method to simplify the assertion logic
updated warning messages in AsyncHttpConnection and refactored AsyncContextTest to use LocalAsyncContextTest and LocalAsyncContextTest to improve clarity and
added a boolean parameter ` showArrow ` to the ` SearchUiManager ` method in ` SearchUiManager . java ` to allow the method to
added lock mode handling for MVStore in Database . java and removed a testSetMode method in TestRowLocks . java to ensure proper
skip linux / amd64 - only test on linux
added checks for Integer , StringValue , and IntValue in Scalars . java to ensure correct handling of integer and string input types
updated error handling for PRIMARY KEY specifications in CreateTableStatement . java to improve clarity and accuracy in error reporting for missing or multiple PRIMARY
added conditional logic to set drawable drawables based on the LMP status in CellLayout , Hotseat , and TextView to enhance button styling based on
do n ' t throw an exception if there be no isolate to query for Flutter views to improve error handling and provide clearer error messages when
added new header configuration methods for content type , content type , http - strict , and frame options in HeadersConfigurer . java to enhance flexibility in handling
refactor ObjectEnumerableAssert class to improve code readability to enhance maintainability and facilitate future updates
[ grid ] move distributed cdp test to router
updated the @ AggregateRoot annotation in EventSourcingRepositoryTest . java to specify the aggregate root type instead of a hardcoded value to
added support for prebuilt library paths in Python binary and test cases to ensure proper handling of prebuilt libraries in the application
refactor client authentication handling in NetServerOptionsConverter , HttpServerOptions , and NetServerOptions classes to improve clarity and maintainability of the client authentication
updated directory paths in HiveConf and MetastoreConf to use " / user / $ { system . name } / repl / " instead of "
refactor task visibility logic in RecentsView . java to improve clarity and functionality to enhance code readability and maintainability by reducing redundancy in task
added a timeout annotation to the AmqpTransformerTest class to increase test timeouts for better test reliability
removed the call to clearAll ( ) in DataTableTopComponent . java to streamline the code by eliminating unnecessary operations
refactor variable names from ` controller ` to ` flowController ` across multiple classes to improve code clarity and maintainability by using a more descript
[ hotfix ] [ table - planner - blink ] fix exchange sum number for consume all child pipeline breaker
added ClassLoaderHandler to module - info . java to utilize the ClassLoaderHandler for class loading functionality
added a method ` setSolution ` to ` SolutionBusiness ` and modified the ` solve ` method to accept a ` PlanningProblem ` parameter to enhance
added JsonIgnore annotation to ApplicationSettings . java to ensure proper JSON serialization of ApplicationSettings instances
updated the condition from ` throwable = = null ` to ` throwable ! = null ` in ` PlotListener . java ` to ensure proper handling of
refactor query check to use a variable for queryInfo instead of a null check to improve code readability and maintainability
change the network visibility of the progress field from NONE to GUI _ ONLY and update the return condition to check for empty stacks before proceeding
fix ( gl200text ) : do n ' t parse hdop if it ' s n ' t exist
rename timeColumnName and incomingTimeColumnName to incomingTimeColumnName and incomingTimeFieldSpec in AvroRecordToPinotRowGenerator . java to
added multiple calls to HttpMethed . waitToProduceOneBlock ( httpnode ) in HttpShieldTrc20Token004 . java
ww - 3907 add initializable factory to the container to make it easy to initialize the container
refactor TimerObservationHandler to use a wildcard import and add error tag creation methods for long - running timers to improve code readability and maintain
change SYNC _ DELTA _ RATE from float to double and adjust fetchTime calculations accordingly to improve precision in fetch time calculation and ensure
added logging for fragment expressions in AbstractStandardFragmentInsertionTagProcessor to inform users of the use of unwrapped fragment expressions in future versions of Thy
changed the type of the _ attributes variable from HashMap to ConcurrentHashMap to ensure thread safety when accessing concurrent data structures
http : / / issues . apache . org / jira / browse / amq - 3292 - fix ack message in amqmessageconsumer
added new color constants and refactored extractInto method in ColorExtractionAlgorithm . java to improve color extraction logic and ensure correct handling of dark text
added access check for the data folder in SketchBuilder . java to ensure that the data folder is accessible before accessing its members
modified the OmniNotes and NotesHelper classes to include a boolean parameter for title inclusion to enhance flexibility in content processing based on build type
modified the initialization of the sessionRegistry variable in ConcurrentSessionControllerImpl . java to ensure proper initialization of the session registry
added logging statements for reconnection completion and error handling in NettyStreamingService . java to improve visibility into connection completion and provide clearer error messages
updated ProxyFactory to use Javassist instead of Cglib in multiple test files to ensure compatibility with Javassist ' s proxy
replaced ` ConcurrentLinkedQueue ` with ` ConcurrentHashSet ` in ` QueuedThreadPool . java ` to improve performance by using a more efficient concurrent hash set
refactor SocketExceptions to use String . join and improve error message formatting to enhance readability and maintainability of exception handling logic
added a check to ensure the view directory is under the repository directory before proceeding to prevent errors when the view directory is under the repository directory
removed drag - and - drop event handling for tab header areas in JabRefFrame . java to streamline tab management and improve user experience by
added " - XX : + UseCompressedClassPointers " and " - XX : + UseCompressedClassPointers " to multiple test
added error handling for update log states in PeerSync . java to ensure proper logging when an update log is not in active or playing state
deleted the ConnectionHook . java file to remove unused code to streamline the codebase
removed redundant ` waitForReplicasInSync ` constants and added a new method ` waitForReplicasInSync ` in multiple test classes to streamline
camel - 11497 : fix the build of camel - swagger - core and camel - swagger - core .
updated version handling in ApexLanguageModule to use the external version instead of a hardcoded string to ensure compatibility with external versions and improve access
refactor multiple Java files for improved organization and clarity to enhance maintainability and readability of the codebase
replaced the direct instantiation of the AggregateEngine with a dedicated executor service using IoTDBThreadPoolFactory to improve thread management and ensure proper shutdown of the
updated WebSocketAsyncConnection constructor to accept a ByteBufferPool parameter and updated WebSocketServerFactory to utilize this buffer pool to enhance flexibility by allowing dynamic buffer
added scrollToPositionWithOffset calls to LinearLayoutManager based on index values to ensure correct scrolling behavior for thumbnails based on the specified index
fix ( sql ) : fix ` ` sample by on timestamp overridden by other column alias ' '
refactor animation handling in LauncherAnimUtils , LauncherStateTransitionAnimation , and LauncherStateTransitionAnimation classes to improve code clarity and maintain
added a condition to disable the default user agent based on the httpClient configuration to ensure that the default user agent is disabled when the configuration is enabled
added pubsubhubbub support to FeedRefreshUpdater and ApplicationSettings classes to enable control over pubsub behavior based on application settings
changed the access modifier of the finalize method from public to protected to allow subclasses to access the finalize method
updated method signatures to include ` isAnonymousOrLocalOrSyntheticClass ` and added a check for ` access & Opcodes . ACC _ SYNT
add a new file DSpaceWebapp . java that extends AbstractDSpaceWebapp and implements AbstractDSpaceWebapp to provide a framework for
added a method to retrieve the table alias containing a column in CalcitePlanner and implemented getTableAliasContainingColumn method in RowResolver to ensure proper
added " Trigger " to the trigger key in JobGenerator . java to ensure consistency in key naming conventions
wallet : change log level from info to warn
updated import statements in BasicMapTest . java for improved clarity and functionality to enhance code readability and maintainability by using more descriptive import
updated the initialization of ` rcfileOptimizedWriterEnabled ` and ` rcfileWriterValidate ` in ` HiveClientConfig ` and ` TestHive
added a new enum ` TlsClientCertPolicy ` and modified ` GitBlitServer ` to utilize it for client certificate requirements to enhance
added a debug log statement indicating a new CHALLENGE has been saved in KrakenFuturesStreamingService . java to improve error handling and
added headers and sub - protocol handling in WebsocketRoutingFilter . java to enhance WebSocket handling by allowing custom headers for WebSocket protocols
added debug logging for fetch requests in HiveQueryResultSet . java to improve traceability and traceability of fetch request requests
updated dimensions string formatting in HolidayEventFormatter . java to improve clarity and consistency in label formatting
refactor ` innerClassFieldMadeFinal ` and ` InnerStaticClass ` to improve clarity and functionality to enhance code readability and maintainability
refactor UnexpectedJobExecutionException class to improve error handling to enhance code clarity and maintainability
deleted the file ` module - info . java . extra ` and removed the ` shouldUseOpaqueButtons ( ) ` method from ` AquaLookAndFeel
refactor DrillSidewaysQuery and DrillSidewaysScorer classes to improve handling of doc freqs and cost to enhance code
added GeoDegeneratePath class registration to classRegsitry to support geodesic path resolution in the application
removed the ' preFill ' parameter from several constructors across multiple pool classes to simplify constructor parameters and improve code clarity
updated taskbar state handling in TaskbarLauncherStateController and added new stashed flags in TaskbarStashController to improve taskbar state management
added null checks for default style in CascadeDeleteVisitor . java to avoid potential NullPointerExceptions when comparing styles
refactor GuiUtil and StatusTab to improve size handling and add methods for setting sizes to enhance code clarity and maintainability by centralizing size
refactor icon retrieval logic in FileTreeViewHolder . java to use TreeFileExtension . Factory for file extension checks to improve code clarity and maintainability by
updated assertions in ParallelUniverseTest to use ` contains ` instead of ` isEqualTo ` for qualifiers from system resources to ensure consistency and correctness in
added synchronization to synchronize access to suiteResults in XMLReporter . java to ensure thread safety when accessing test results
added a new file TestNativeProbabilityFunctionQueries . java that extends AbstractTestNativeProbabilityFunctionQueries to establish a framework for testing native probability functions
added a call to ShutdownThread . deregister ( this ) in ClientContainer . java to ensure proper resource management and prevent memory leaks
added a method ` dropTemporaryTableAfterUse ` to the ` SybaseASE15Dialect ` class to provide a way to disable temporary tables
simonstewart : remove the use of color . fromrgba ( ) from the htmlunit webelement
refactor SolrCore , XMLWriter , DocIterator , and QueryParsing classes to improve code organization and maintainability
refactor LinksIndexingFilter class to improve code readability to enhance maintainability and facilitate future updates
updated the formatting of reserveSize string in VirtualAllocCommitUncommitRecommit . java to improve clarity and consistency in formatting
refactor ad playback state handling in AdTagLoader , AdsLoader , AdsMediaSource , and AdsMediaSource classes to improve clarity
refactor equality check in MultimapSubject to use a boolean variable for clarity to improve code readability and maintainability
updated the frequency property reference from ` deg _ text ` to ` unit _ hz ` in ` WaveGeneratorActivity . java ` to ensure accurate
chore ( deps ) : upgrade gapic - generator - java to 2.8 . 0 and update gax - java to 2.18 . 1 (
replaced the initialization of the TreeMap with a direct assignment of includedLabelSets to simplify the code and improve readability
added a constant for NORMAL _ 4F and updated vertex format handling in VertexLighterFlat . java to improve code clarity and maintainability by
added try - with - resources for Tracer in TracingClientInterceptor , ITTracingClientInterceptor , and ITTracingServerInterceptor to ensure proper resource
replaced import of java . time . ZoneId with java . time . toZoneId ( ) in ScheduledTrigger . java to improve code clarity and
added new classes ` AsyncBucket ` , ` Bucket4j ` , ` InMemoryExtension ` , and ` ConfigurationBuilder ` , and implemented ` InMemory
modified the handling of the ` classesDir ` argument in ` resexhausted003 . java ` to improve the clarity and functionality of the
reformatted formatting and added exception handling in AbstractConnector . java to improve code readability and maintainability
refactor OngoingStubbing class for improved readability to enhance maintainability and facilitate future updates
added Optional < WebServer > webServerToReuse to manage web server reuse logic to ensure web server reuses correctly when no web server is available
replaced ` productConstructor ` with ` constructor ` in ` HttpClientUtil ` and added a static import for ` SolrHttpClient ` in ` SolrTestCaseJ
added a check to clear the thread allowlist if it is utilised to ensure that the thread allowlist is cleared before proceeding with operations
updated the method call from ` setOutputSource ` to ` setItemWriter ` in ` TransformerWriterItemProcessorTests . java ` to ensure the
[ drools - 2485 ] do n ' t run findgaps in dmndtanalyser if misshitpolicy = = hitpolicy .
added a new test method ` testSlidingWindowsCombine ` in ` CombineTest . java ` to verify the functionality of combining multiple input and output lists
added a conditional check for ` allAppsDirty ` before binding all apps in ` Launcher ` and ` LauncherModel ` to ensure apps
added a check for the " Running " attribute in ManagedFileWatcherReloadStrategyTest . java to ensure that the " Running " attribute is correctly validated
refactor Beautiful class to improve readability and maintainability to enhance code clarity and maintainability
replaced the deprecated ` getPrivSysProp ` method with ` GetBooleanAction ` for ` useScreenMenuBar ` in ` AquaMenuBarUI .
modify setRawLocation method to accept a boolean parameter for better location handling to allow dynamic adjustment of raw location based on fall conditions
refactor query handling in SimpleJpaRepository to utilize CriteriaQuery and apply specifications to improve query performance and enhance method metadata handling
added timestamp , nonce , and number to genesis block arguments in BlockUtil . java to enhance difficulty and difficulty handling for genesis block inputs
refactored LoopSafepointInsertionPhase and AMD64HotSpotBackend to use SafepointInsertionPhase instead of LoopSafepointInsertionPhase to simplify
updated the way children are retrieved in RSGroupInfoManagerImpl and ZKProcedureMemberRpcs to improve robustness by avoiding null pointer exceptions
changed method visibility from package - private to public in ArtifactResolver . java to allow access to these classes from other packages
close the executor thread in case the reactor thread be interrupt . close the executor thread in chunkprocessingpipeline .
added a validation check for maxBufferedDocs to ensure that maxBufferedDocs is at least 1 to prevent runtime errors during indexing operations
added functionality to manage the login state of the LoginActivity to improve user experience by ensuring the login process is executed when the login state changes
added null checks for next element and valueExtractor in Pump . java and implemented a reverse sorting test in PumpTest . java to ensure robust
changed access modifiers of ` loadbalancer ` and ` LBHttpSolrServer ` classes from private to protected in ` HttpShardHandlerFactory `
updated order from LOWEST _ PRECEDENCE to HIGHEST _ PRECEDENCE and added a new test class for DefaultAuthentication
added Server initialization and handler setup in TestJNDI . java to enhance server functionality and improve handler management
updated formatting and improved conditional checks in SortedDynPartitionOptimizer . java and SortedDynPartitionOptimizer . java to enhance code readability
changed the return statement from ` loop instanceof NioEventLoop ` to ` true ` in ` FileStreamChannel . java ` to ensure proper handling
updated the calculation of the number of nulls in the StatsUtils class to ensure that the correct number of nulls is set based on the new
camel - 14497 : camel - kamelet - add dependency downloader to support kamelet .
replaced OkHttpOAuthConsumer with AuthState and AuthorizationException in OSMJob . java to improve security and error handling for uploading OpenStreetMap
removed debug print statements from multiple test classes and modified method signatures to return CompilationResult to streamline debugging output and improve code clarity
added a client authentication configuration option to the IoTDBRestServiceConfig and updated related classes to support additional configuration options for client authentication
refactored the injection process in PropertyAndSetterInjection and added a new test class ChildWithSameParentFieldInjectionTest to improve code clarity and
updated BloomFilter64bit and BloomUriUniqFilter to implement InitializingBean and added new fields for expected and hash counts to improve bean initialization
updated the cursor adapter parameter from false to true in HomeFragment . java and added a refresh flag in TweetPager . java to enable user refresh
change intermediate header height ratio from 1f to 75f in ProfilePager . java to improve UI responsiveness by adjusting header height
updated import statements in NativeDebug , DebugLogger , CompiledFunction , Context , and ScriptObject to use the new RecompilationEvent class
added HOST _ SYS _ PREPPED property and corresponding methods to manage system prepped configurations to enable dynamic configuration of system pre
added a new parameter ` logEveryUnknownFileFormat ` to the ` include ` method in ` DatabaseChangeLog ` and created a new test class
added a loop to remove trailing slash from the location string to ensure proper handling of '/' characters in URLs
added properties for entities , scores , and urns in StaticPipeline . java to allow dynamic configuration of entities and scores in the StaticPipeline class
refactor filename retrieval and asset path handling in Frame . java , Utils . java , and WhoopsModule . java to improve file path handling and
[ geos - 8407 ] catalogrepository should return null if no datastore be find in the workspace
refactor assertions in Assert . java for improved clarity to enhance maintainability and readability of the code
renamed ` MultiLineTests ` and ` MultiLineJaggedTextTests ` to ` MultiLineGridlikeTextTests ` and ` MultiLineJ
refactor test methods in TwoConsumerOnSameTopicTest to use sendAMessageToOneTopicWithTwoSubscribers ( ) to improve clarity and
[ iotdb - 4892 ] remove unnecessary initialization of measurementschemas in tsfilewritealignedwithtsrecord and tsfile
updated the loop structure and added expectedMemoryUsage calculation in TestPromotionFromSurvivorToTenuredAfterMinorGC . java to improve memory
updated the logging configuration regex from slf4j - log4j12 - * to slf4j - reload4j in LoggingOptionsTests .
[ hotfix ] [ test ] use waitForAssert instead of assertequals in osgi test
updated package names from ` com . itsaky . androidide ` to ` com . itsaky . androidide . activities ` across multiple
[ drools - 1276 ] ignore drols - 1276 test until drols - 1276 be fix
added a constructor to ` PullRequestMergedEventsStream ` that accepts a ` File ` schemaFile and a ` StreamDataProducer ` parameter to enable
refactor AbstractExpressionPart class to improve code readability to enhance maintainability and facilitate future updates
refactor TaskSlot class to improve code readability to enhance maintainability and facilitate future updates
replaced ` FIRE _ EXCEPTION _ ON _ FAILURE ` with ` CLOSE ` in ` NettyWebSocket ` and ` NettyWebSocket
added error handling when releasing locks in MoveTask . java to ensure locks are only released when the lock is already released
refactor JRubyBackend to use ResourceBundle for GEM _ PATH and RUBY _ VERSION retrieval to improve resource loading efficiency and reduce dependency on
replaced the usage of ZERO _ ADDRESS with ByteUtil . EMPTY _ BYTE _ ARRAY for handling null values to simplify the code and improve
reformatted code for better readability in ClassGraphClassLoader . java to improve code clarity and maintainability
[ hotfix ] [ test ] fix jobmanagerstartuptest to work on window
update clouddatastream resource protos to include new datastream properties to enhance compatibility with newer datastream versions
added extras to the builder in FileDisplayActivity to enhance user experience by providing additional features
changed the loop condition from break to continue in ParticleEmitter . java to ensure that particles are only processed when they are null
updated cluster test assertions in AmbariManagementControllerImplTest . java to use a minimum number of times instead of 4 to improve test reliability and
removed nullable annotations from the SERVICE column in TransientSessionTicketImpl . java and added handling for NoResultException in JpaTicketRegistry . java
refactored Bug4823811 . java for improved code clarity to enhance maintainability and readability of the code
updated path relativization logic in RmStep . java to utilize the project filesystem ' s path relativizer to improve flexibility
updated the ` requestFullState ` method to accept a boolean parameter ` isInitialRequest ` and modified its usage in ` DeconzBridgeHandler `
refactor ShibbolethCompatiblePersistentIdGenerator to use ToStringBuilder for attribute handling to improve code clarity and maintainability by encapsulating
removed unnecessary @ Inject annotation from RequestValidationService . java to improve code clarity and maintainability
refactor keyboard handling in UiThreadHelper to use a new variable for logging messages to improve code clarity and maintainability by centralizing logging functionality
updated conditional statements in FileNodeProcessor . java and modified MManagerBasicTest . java , MTreeTest . java , and MTreeTest .
refactor NavigableMap and NavigableSet classes to improve code organization and maintainability
add a test method ` testSlurpFile ` in ` IOUtilsTest . java ` to validate the functionality of ` IOUtils . slurpFile
updated visibility of ` client ` and ` clientProperties ` classes to be private and added @ FunctionalInterface annotations to enhance encapsulation and
refactor span retrieval logic into a separate method ` spanWithName ` to improve code readability and maintainability by encapsulating span name
added date conversion support to ETypeConverter and Hive schema converters to support date types in Parquet
updated the split method to use Patterns . COMMA _ SEPARATOR instead of a hardcoded string to improve code readability and maintainability by
ggb - 132 add validation for positive double in input dialog
refactor column comparison logic in SemanticAnalyzer to improve clarity and maintainability to enhance readability and maintainability of the code
refactor score update logic in WANDScorer . java to improve code readability and maintainability
refactor Correspondence class to improve code readability to enhance maintainability and facilitate future updates
updated import statements in PaintSetEnabledDeadlock . java to use specific AWT classes instead of wildcard imports to improve code clarity and maintainability
updated the variable ` curPixVal ` from ` - 1 ` to ` 0xFF000000 ` and added a new ` WhiteTextColorTest ` class
refactor BiomeDictionary to use a collection of supertypes instead of a list of subTypes to improve code readability and maintainability by reducing
rename ` withinTolerance ` to ` exceedsTolerance ` in ` BoundedLocalCache . java ` to improve clarity and consistency in naming conventions
added stability checks for LOCAL and POSTSUBMIT in TaplTestsLauncher3 . java to enhance stability checks for different test environments
updated package - info . java files for mmm and ppp packages to improve package documentation clarity and maintainability
added a check to ensure logFileSuffix is not empty before processing it to avoid potential errors when handling empty log file suffixes
refactor PythonBuckConfig class to improve code readability to enhance maintainability and facilitate future updates
added unit tests for ` addSystemSharedLibraryName ` and ` clearSystemSharedLibraryName ` methods in ` ShadowPackageManager ` and ` ShadowApplication
[ meiligao ] fix meiligao date format ( # 10254 )
added a null check for the tile parameter in PowerDiode . java to prevent potential NullPointerExceptions when accessing the tile object
added a new ` TrimCache ` class to manage cache trimming in ` PrefFragment ` to improve user experience by allowing users to trim the cache
updated import statements from ` com . google . api . client . util . Lists ` to ` com . google . common . collect . List
updated ` BasicAuthAccessControlFactory ` , ` ZkBasicAuthAccessControlFactory ` , and ` AccessControlUtils ` to throw ` NotAuthorizedException ` instead
refactor schedulePeriodically method signatures to use Func1 instead of Action0 for better type safety to enhance code clarity and prevent potential NullPointerExceptions
replaced refreshListOfFilesFragment ( false ) with refreshListOfFilesFragment ( ) . onItemClicked ( file ) to improve user interaction by
added a check for multiple XML file paths before closing streams in StreamUtil . java to ensure proper resource management and prevent resource leaks when multiple file
replaced the ` create _ table _ with _ environment _ context ` method with a ` CreateTableRequest ` parameter in ` SessionHiveMetaStore
added a volatile boolean flag ` aborted ` and modified ` start ` and ` abort ` methods in ` FixedRateFragInsStateTracker ` to
added checks for whitespace and improved block parsing logic in multiple parser classes to enhance code readability and maintainability while ensuring correct parsing behavior
added NetworkWifiStatusReceiver and ChangeWifiStatusEvent classes and updated PostFragment to handle network status changes to enhance user experience by enabling automatic playback of
removed unnecessary conditional checks for control frames in FrameGenerator . java to simplify the code and improve readability
added visibility setting for collapse handle in WidgetsBottomSheet . java to improve user experience by showing the collapse handle visually
added new files ` Issue475 . java ` and ` XSS . java ` for handling HTML and JS requests to address issue # 475
added a condition to return early if the unit to scroll is zero to avoid unnecessary processing when the scroll unit is zero
updated the condition from ` size ( ) > 1 ` to ` size ( ) ! = 1 ` in ` Manager . java ` to ensure correct
added methods ` add ( Enum value ) ` and ` put ( String key , Enum value ) ` to ` JsonArray ` and ` JsonObject ` classes
added hashCode method to IPPPrintService and created TestRaceCond class to ensure consistent hash code generation for print services
refactor DB2iDialect and DB2zDialect to streamline version retrieval methods to improve code readability and maintainability by centralizing version
added a check for platform fee before enabling the connection to ensure that the connection is only enabled when the transaction ' s platform fee is present
refactor BatchUpdateException , PreparedStatement , and Statement classes to improve code organization and maintainability
added a check for encryption before queueing input buffers in MediaCodecRenderer . java to ensure that the input buffer is cleared when encryption is enabled and
removed the ` public ` access modifier from several class declarations across multiple classes to allow access to these classes from outside the package
added import statement for Retrofit in Part and PartMap classes to utilize the Retrofit library for improved functionality
refactor JsonBuildHelper and ParamsBuildHelper to improve handling of JAVA _ OBJECT _ FULLY subTypeNames to enhance code clarity
added TYPE _ TASKBAR _ OVERLAY _ PROXY and TYPE _ OPTIONS _ POPUP _ DIALOG to the Abstract
fix ( regen ) : update gapic - generator - java with mock service generation
updated alpha calculation logic in ClipAnimationHelper and added a new boolean field ` hasRecents ` in RemoteAnimationTargetSet to improve animation behavior
removed the ` true ` parameter from the ` createRenderScript ` method call to simplify the method call by removing unnecessary parameters
refactor PMD class to improve code readability to enhance maintainability and facilitate future updates
refactor PluginListCellRenderer and PluginTableModel to use a new method ` PluginManagerActivator ` for checking system bundles to improve code readability and maintain
updated import statements and modified method signatures in IntegrationTestSparkBulkLoad . java to improve code clarity and maintain consistency in import statements
updated BloomFilter initialization to use a constant LOW _ FALSE _ POSITIVE _ RATE instead of 0.001 to improve code readability and maintain
refactor rocket configuration handling in Overview . java to improve clarity and maintainability to enhance code readability and ensure correct selection of motor configurations
[ hotfix ] [ runtime ] fix npe in agentmanagerimpl . findattache ( hostid )
added a null check for the value before adding it to the entrySet to avoid potential NullPointerExceptions when accessing null values
cloudstack - 7711 : do n ' t throw discoveryexception if host can not be discover
updated constant names and values for NO _ NAME and NO _ VALUE in ParamAction . java to improve clarity and consistency in naming conventions
updated constructors in BaseStubbing , ConsecutiveStubbing , and OngoingStubbingImpl to accept an Object parameter to enhance flexibility
added a static method ` stripMethodParams ` to the ` getMethodLine ` method and updated its usage in ` LocationOpener ` to improve method
updated VERSION _ NAME and VERSION _ CODE in Version . java to reflect the new release version for the GreatVoyage feature
change the type of allowedCommands from List to Set in OutputFilter . java to improve performance by reducing the number of items in the allowedCommands list
[ geot - 6754 ] add support for label cache item ( label cache item )
ggb - 221 clear the height of popup if there be overlap feature
updated validation messages in ValidationSuite . java to use " - " instead of " - " to improve clarity and consistency in error messages
refactor starting window listener implementation to use a dedicated starting window listener to improve code clarity and maintainability by centralizing the starting window listener
added a doc comment inherited from MBeanServerConnection inherited from MBeanServerConnection to improve code clarity and maintainability
updated exception messages in CheckPackageAccess . java to include PackageAccess and PackageDefinition to improve clarity of security errors related to package access and definition checks
increased the timeout duration for the executorService from 30 seconds to 90 seconds to allow more time for the executorService to terminate successfully
changed loggingEnabled from a boolean to a Boolean and introduced a new XRLogTest class with a null check for loggingEnabled to ensure loggingEnabled
added @ JsonIgnore annotations to Schema . java to ensure proper serialization of schema properties
increased the timeout duration from 5000ms to 10000ms in TestNonTxIndexBuilder . java to allow more time for tests to complete before proceeding
updated method signatures in SimpleNaiveBayesClassifier to use ` calculateLogLikelihood ` instead of ` calculateLikelihood ` to improve accuracy
added AuditLoggerModule to CheckDatabaseHelper and updated CheckHelperModule to extend CheckHelperControllerModule and CheckHelperAuditModule to enhance audit logging capabilities
refactor Prototype class to improve code organization to enhance maintainability and readability of the codebase
added a null check for tableIsTransactional and initialized it in SemanticAnalyzer to ensure proper handling of transactional tables in the semantic analysis process
[ java ] refactor recordingwriter to use onblock instead of writefragment in replaysessiontest .
updated CeaDecoder and CeaSubtitle to use Format . OFFSET _ SAMPLE _ RELATIVE and improved return statements in Cea
added an " alias " parameter to the groupBy method calls in KairosDatastoreTest . java and implemented a method in DatastoreMetricQueryImpl
updated currency pairs in VaultOfSatoshiBaseService to use " USD " instead of " CAD " and " CAD "
hhh - 15156 close the sessionfactory when run test
updated import statements to use ` KafkaSender ` instead of ` Kafka11 ` in ` ZipkinKafkaSenderConfiguration ` and ` Zipkin
added GwtBinaryIntegrationTest and A classes to implement integration tests for GWT binary builds to ensure correct functionality of GWT binary builds in the
added a condition to hide loadingCauseLabel and adjusted mouse event handling in BrowserContentPane . java and SQLConsole . java to improve user interaction by
updated formatting in EnhancedRandomImpl . java and modified test cases in EnhancedRandomImplTest . java to improve code readability and
refactor XML security property management to use a dedicated XMLSecurityPropertyManager instance to improve code clarity and maintainability by centralizing security property management
added a new file ` InlineDefaultMethod . java ` implementing ` InterfaceWithDefaultMethod1 ` and implemented ` Decoy ` and ` Instance ` classes
updated SQL query patterns in SqliteFieldPredicateView . java to use " GLOB ( " * \ " ) " instead of " LI
change access modifier of the getDMNProfiles method from private to protected to allow subclasses to access the method for better encapsulation
fixed - redissonscript . load ( ) method do n ' t work on slave node
updated print statements in EspressoLanguage . java and modified the setWordFieldVolatile method in StaticObject . java to improve readability and
updated logging statements to use ` size ( ) ` instead of ` size ( ) ` for better clarity to improve readability and maintainability of the
fix memory leak when send proxy packet .
added a constant for HTTP _ JETTY _ SERVER _ HANDLERS and updated thread pool initialization to allow dynamic configuration of HTTP server handlers
refactor shortcut handling to use an ArrayList for removed shortcuts and improve clarity to enhance code readability and maintainability by reducing redundancy
removed unnecessary type checking for String in DefaultHttpClientBinderRegistry . java to simplify code and improve readability
removed the case statement for the home button in DetailFragment . java to streamline the navigation process for better user experience
added a condition to check if the Android Market is present before including PlayServices to ensure PlayServices is only included when the Android Market is present
updated TableBlockParser to handle whitespace after cells and modified loop logic in TableBlockParser . java and TablesTest . java to improve handling of
added support for optional bridgingHeader in NewNativeTargetProjectMutator and related classes to enhance the flexibility of building objects by allowing customizable br
refactor dead - code handling in PotentiallyDeadCode . java to improve clarity and maintainability to enhance code readability and maintainability by
added ` findDiamonds ` functionality and a new ` DiamondRedundantArgs ` and ` DiamondRedundantArgs1 ` classes
replaced calls to ` getInvocationStageTrace ( ) . startSend ( ) ` with ` onStartSendRequest ( ) ` in multiple classes to
removed debug logging statement from SolrCacheHolder . java to clean up the code and reduce unnecessary logging
added catch blocks for AuthenticationException in LdapCtxFactory . java to improve error handling for authentication failures
updated the calculation of zero in the conditional check in Test6796786 . java to correct the calculation of the zero value to ensure accurate comparison
updated configuration file paths to include " logback . dev . xml " in JoobyMojo . java and modified Main . java to include "
added a new class JaasEventCheck to handle Jaas authentication events to ensure proper handling of authentication failures and success in Jaas context
refactor QuickstepTransitionManager to use a list of visible views for animations to improve code readability and maintainability by centralizing view animation logic
updated string comparison logic in ConjunctionSolrSpellChecker to use ` equals ` instead of ` equals ` to ensure correct comparison of StringDistances
replaced HashMap with Map in ShadowSystemServiceRegistry . java to simplify the code and improve readability
[ hotfix ] [ runtime ] remove unused constant from defaultleaderelectionservice
changed the visibility of the setAuthentication method from public to package - private to restrict access to the method for better encapsulation
cloudstack - 4892 : add property to wait for storage pool command to return
updated JDBC _ TABLE and JDBC _ SCHEMA parameters in AbstractJDBCConnectorProvider . java to ensure proper configuration of JDBC schema for the database
rename ` sqlUpdateAUP ` to ` sqlUpdate ` across multiple files to improve clarity and consistency in naming conventions
replaced synchronization with a synchronized map for schemaTypeCache to ensure thread safety when accessing the schema type cache
refactor header handling in StaticServerHttpHeadersWriter to handle multiple header names to improve code clarity and maintainability by eliminating redundant checks
added JUnit @ Ignore annotation to LatticeDemo . java to mark the test as ignored due to file availability only from CMU
added a call to mkdirs the storage directory in TestCollector . java to ensure the storage directory is properly created for testing purposes
set chunked streaming mode to 1024MB in StarTreeJobUtils . java to improve performance by allowing more data to be processed
added new classes BasicSyntaxChecker , MultipleTypeSyntaxChecker , and SingleTypeSyntaxChecker to handle multiple and single type syntax checks to enhance the JSON
hbase - 12265 addendum fix the import of protobuf from thirdparty ( sergey shelukhin )
added a new ` Node ` class and a test method for populateing ` Node ` to ensure that ` Node ` can not cause a stack overflow
added IOException to the getRemoteName method in AccountingTransceiver . java to ensure proper resource management by throwing an IOException when accessing the method
updated exception handling in UserAccountManagerImpl , ClientFactory , and ConnectivityServiceImpl to handle both AccountNotFoundException and IllegalArgumentException to improve error
refactor WebSocketConnection and ExplicitDemandTest classes to improve code organization and maintainability
added support for AspectJ mode in GlobalMethodSecurityBeanDefinitionParser and updated related method registration logic to enhance security by allowing pointcut methods to be
updated import statements and added hostname verification functionality in mmm Connection . java and ppp Connection . java to enhance security by restricting hostname verification based on user
added a ` remove ` method to the ` OHLCSeries ` class and a corresponding test in ` OHLCSeriesTests ` to enhance
updated method calls from ` invoke ( ) . joinInternal ( ) ` to ` invokeUrgent ( ) . joinInternal ( ) ` in `
refactor joint removal logic in World . java to ensure proper cleanup of joints to improve code clarity and maintainability
refactor SearchFilter logic to check for null filterString before matching matches to improve code readability and prevent potential NullPointerExceptions
[ hotfix ] [ test ] move sourcereadertestbase to testutils
removed multiple null checks for document and parent documents in DocumentsStorageProvider . java to streamline error handling and improve code clarity
added a new ` HookDefinition ` interface and a new ` JavaHookDefinition ` class to handle execution of Java hooks to facilitate the execution of Java
refactor ` flushIfDeadlockRisk ` method into a separate method ` flushIfDeadlockRisk ` to improve code readability and maintainability
updated the ` setExoOptions ` method to accept a ` boolean allowTs ` parameter and modified the container formatting logic to allow TS
remove user from the identifier collection in DMRDecoderState . java to ensure that user identifiers are removed from the identifier collection
added a static constant ` INVISIBLE ` and updated the toString method in ` Color . java ` and ` RailButtonShapes . java ` to
updated null handling logic in CountAggregationFunction and added a new test for total count with null handling in NullHandlingIntegrationTest to ensure correct handling of null
added a new variable ` deep ` to the ` InternalTransaction ` class to set the transaction ' s depth to - 1 in the ` InternalTransaction
updated the way the name is written in StreamInitiation . java to ensure proper XML escaping to prevent potential errors during XML processing
updated work directory initialization to use a configuration value instead of a hardcoded value to improve flexibility by allowing dynamic configuration of the work directory
added a check for " deprecated " attribute and set it to true in RuleSetFactory to ensure that the rule is marked as deprecated for better clarity
use codebuffer . position ( ) for jmp in amd64directcallop . jmp ( )
added static final constants for minStamp and maxStamp in TimeRange . java and created corresponding tests in TestTimeRangeTracker . java to ensure consistent
refactor BitDocIdSet class to improve code readability to enhance maintainability and facilitate future updates
refactor connection handling by introducing a new method ` emitMetricsJson ` to improve code readability and maintainability by reducing duplication
refactor conditional checks in DetailFragment , DetailActivity , and GalleryActivity to improve code readability and maintainability
add a check for the world . isremote before call tank . getfluid ( ) .
added support for handling ` RuleAnalysisLegacyBuildRuleView ` and ` DotnetLibraryProviderInfo ` in ` CsharpLibrary ` to ensure proper
added handling for get and dummy PEP services in IQPEPHandler . java to ensure correct processing of PEP messages based on their J
added a null check for the runtime variable before checking if intrinsicGraph is null to prevent potential NullPointerExceptions when the runtime variable is not initialized
updated condition to check if active is not empty before refreshing active work in MetricTrackingWindmillServerStub and StreamingDataflowWorker to
pdfbox - 4892 : check if last eof marker be non - negative , a suggest by valerybokov
added constructors to LwjglAppletApplication and modified canvas initialization in LwjglApplet . java to enhance application functionality and
refactor Docker configuration handling in EnvironmentAndSystemPropertyClientProviderStrategy to simplify the string representation of Docker host to enhance code readability and maintainability by
refactor LDAP authentication handling to use a message list for account state handling to improve clarity and maintainability of the authentication process
refactor Int2ObjectCache class to improve performance to optimize performance and reduce memory usage
added a ` resolveFromAttribute ` field to ` AbstractLdapAuthenticationProperties ` and updated ` LdapUtils ` to utilize it to enable attribute resolution
refactor Readable class to improve readability to enhance maintainability and facilitate future updates
updated PDF file handling in JsoupNonVisualRegressionTest . java to use TestSupport . WITH _ FONT instead of a lambda expression to
added icon to the share menu in CaptureActivity . java to enhance user experience by providing a more visually appealing menu option
updated JVM version constants and introduced JVM _ MINOR _ VERSION from JVM _ MAJOR _ VERSION to JVM _ MINOR
added methods to check for non - JDBC 41 compliant drivers in PoolUtilities . java to improve error handling for non - JDBC 41 complian
refactor GenericContainer class to improve code readability to enhance maintainability and facilitate future updates
replaced HashSet with ArrayList for filtered lists in Enclosed . java to improve performance by using a more efficient data structure
added multiple @ Override annotations in CentralAuthenticationServiceImpl , ImmutableAuthenticationServiceImpl , and AbstractCasView classes to ensure proper method overriding and improve code
removed unnecessary whitespace in ChartProvider . java to improve code readability and maintain consistency
updated file path handling in ImportMenuItem , AppendDatabaseAction , and OpenDatabaseAction to use the parent directory instead of the filenames to ensure consistent
replaced ` F . at ( Position . NOPOS ) . Block ( 0 , List . empty ( ) ) ` with ` List . empty (
added date handling for createdAt in JpaQueryCreator , User , and UserRepository classes , and modified test setups in UserRepositoryTests to
updated Test15FloatJNIArgs . java file to improve performance and maintainability of the code
updated import statements and added new version strings in the plugin . java file to improve code clarity and maintainability by using more descriptive strings
updated substring method from 2 to 1 in MockProcessContext . java and added a new test for fake encryption and decryption in TestMockProcessContext
[ java ] allow archive archive to be reentrant when the archive be in callback mode .
added a null check before merging the dependency in OpProcFactory . java to avoid potential NullPointerExceptions when the dependency is null
added timeouts to the @ Test annotation in SslBytesServerTest . java to allow more time for tests to complete before proceeding
refactor Peer class to improve code readability to enhance maintainability and facilitate future updates
updated methods in RealtimeIndexingCoordinator to use HistoricalIndexSegment and added new methods in StreamProvider to enhance index segment management and improve stream
added null check before exporting view capture data in FailureWatcher . java to avoid potential NullPointerException when exporting data
refactor popup y calculation to use a dedicated method for retrieving scroll thumb radius to improve code readability and maintainability by centralizing scroll thumb calculations
updated the message to indicate the restarting IntelliJ and added a method to check if the tool window is instantiated to improve clarity and ensure
added a conditional check for Windows before creating a JCheckBox for preventSleep in GeneralTab . java to ensure preventSleep is only added when available on Windows
updated import statements from ` javax ` to ` jakarta ` in ` HttpConfigurationAuthorityOverrideTest . java ` to ensure compatibility with the latest
added cropping logic for window dimensions in QuickstepAppTransitionManagerImpl . java to ensure correct window dimensions based on device layout
added full - screen exclusive mode support to XWindow and XWindowPeer classes to enhance security warning visibility based on user experience
fix stringutil . playeddurationstr ( string , int ) to work correctly with string length
added methods to add credentials for MapWork , ReduceWork , and MapWork in DagUtils . java to enhance the flexibility of DAG
camel - 11436 : fix for loop to use map . entry < class < ? > , object > instead of map . keyset (
trim whitespace from thread name in SessionState . java to ensure consistent thread name formatting
updated the message in GpsMainActivity to indicate that a description can be added to a file instead of a description to ensure that the message reflects
refactor Job class to improve code readability to enhance maintainability and facilitate future updates
added a new abstract class ` Unused ` and a method ` testUnusedType ( ) ` to ` Main ` to ensure proper handling of unused
updated the key from " hbase _ master _ host " to " hbase _ master _ hosts " in StageUtils and added new hostname constants in Dummy
deleted the EventReaderDeserializer and EventWriterSerializer interface files to remove unused interfaces to streamline the codebase
updated the return type of ` performJoin ` methods to return a list of ` GenericRecord ` instead of returning an empty ` GenericRecord ` to
updated MAX _ DELEGATE _ LOCK _ PERIOD from 0 to 10512000 and adjusted related methods accordingly to ensure proper handling of
change the type of networkRateMbps and networkRateMbps from int to Integer in NicTO , NicProfile , and
removed the constructor and applySpecification method from CmcExchange to streamline the code by eliminating unused functionality
refactor seed node configuration retrieval to use a list of IP addresses instead of a configuration object to improve flexibility by allowing dynamic IP addresses based on configuration
set client . tpc . enabled system property to false and add unit test for it
update swagger - ui version from 2.10 . 1 to 2.10 . 2 in multiple application classes to ensure compatibility with the latest swagger UI features and
refactor divide logic in MutableBigInteger and introduce a new ModInvTime class for testing modular inverse calculation to improve accuracy of modular inverse computation
refactor key assignment logic in NamedObjectList . java to improve clarity to enhance readability and maintainability of the code
refactor cleanupEmptyDir method calls to use a new cleanupTableDir method to improve code clarity and maintainability by using a more descriptive
refactor AsyncCache and Cache classes for improved performance to enhance performance and maintainability of cache management
added RCFileInputFormat import and registered RCFileInputFormat in SerializationUtilities . java to enable custom input format handling for RC files
added method ` typeOf ` and ` categoryOf ` to ` TypeMapperComponent ` to provide methods for retrieving Java type and category from a column
added error handling for invalid host headers in Request . java and created a new test for invalid host headers in RequestTest . java to improve robustness
updated ` ShadowTimeZoneFinderTest ` and ` ShadowTimeZoneFinder ` to use ` maxSdk ` and ` ReflectionHelpers ` for time zone retrieval to
removed methods ` addOutgoingValues ` and ` forEachOutgoingValue ` from the ` StandardOp ` class to streamline the code by eliminating unused methods
replaced the variable ` segment ` with ` si ` in ` SegmentCoreReaders . java ` and updated related methods in ` SegmentReader . java
added ` hasMainThreadProfile ` method implementations to ` AggregateDao ` , ` AggregateRepository ` , and ` TransactionCommonService ` classes to
added a check to ensure annotation definitions are not allowed in a non - required rule with required _ for _ source _ abi settings to improve error
updated the NAME constant from " lowercaseLowerCase " to " lowercaseLowercase " across multiple filter factories to ensure consistency in naming conventions across the filter
refactor HSSFSheet and Sheet classes to improve code organization and maintainability
added DiscoverySearchRequestProcessor to AdvancedSearchServlet , OpenSearchServlet , and SimpleSearchServlet classes to indicate that the search provider is the default search
added a list to remove specific America / Dawson , Canada / WhiteHorse , and Canada / Yukon from the ids list to ensure
updated the instantiation of SurfaceSyncGroup to include a reference to " TaskBarController " to ensure consistent reference to the TaskBarController class
updated GridFsTemplate to use getId ( ) instead of getObjectId ( ) and added a new test for finding GridFS files by UUID to
added unit tests for querying column indices and corresponding methods in ShadowDownloadManager to ensure accurate retrieval and retrieval of download total size and bytes so far
modified the logic for inserting characters in TextField . java to improve readability and maintainability of the code
added a check to return early if the instance equals the target to ensure proper handling of equality in GroupNodeViewModel
refactor afterSetStatements method in Lower and BlockLexicalContext classes to use ListIterator instead of ListIterator to improve code readability and maintainability by reducing
added hashCode methods to IntervalXYDelegate , XYSeriesCollection , and XYSeriesCollection classes to ensure consistent hashing behavior across different data types
refactor ClientQueueDisruptionTest to use @ After annotation and add cleanup method to improve code clarity and ensure proper cleanup of HazelcastClient
refactor ` DescribeLogGroups ` method calls to improve code readability and maintainability to enhance code clarity and maintainability
updated method name from ` serializeSpecialDoubleValues ( ) ` to ` serializeSpecialFloatingPointValues ( ) ` in ` Gson . java `
added calls to ` HttpMethed . waitToProduceOneBlock ` and ` PublicMethed . waitProduceNextBlock ` in `
added a check for non - empty language tags before canonicalizing them and updated language tag handling in LanguageTag . java to improve robustness by avoiding
added a configuration option to disable SSH to the KVM Agent by default to allow users to ssh into KVM Agents by default
changed access modifiers of several classes from public to package - private in SchedulerWhen . java to allow external access to these classes for better encaps
replaced the import of ` viewpager . extensions . PagerSlidingTabStrip ` with ` com . astuetz . PagerSlidingTab
added a check for the presence of " - " in the filter condition in SimpleSearchQueryConverter . java to ensure that the filter does not contain
updated sortColumnsLabel text to " Natural column order " in BrowserContentPane . java and removed null check in DataBrowser . java and Desktop .
removed unnecessary array copying in Utils . java to streamline code by eliminating unnecessary memory usage
updated the method to encode the remote address in HtmlSessionInformationsReport . java to ensure proper HTML encoding for remote addresses
updated the topic check from " / " to " smarthome / items / " in ItemStateTriggerHandler . java to ensure the item name matches
removed redundant synchronized block in FastHttpDateFormat . java to improve code readability and maintainability
added a new thread pool to manage file moves in Hive to improve file management and ensure proper session management during file operations
added a new method ` trigger ` to the ` WrapTimer ` class that accepts a ` period ` parameter to allow the ` trigger ` method to
added support for LOCAL _ DATE , SQL _ TIME , and DATE _ TIME in TypeStringUtils and created corresponding test cases in TypeStringUtilsTest to ensure
added a verbose error logging option to the error logging method in AbstractStatusReporter to enable more detailed error reporting when logging errors
added menu toggle logic based on application state in ClickStartHandler to ensure proper menu behavior when the application is in unbundled state
added a check to ensure customer gateway can only be esitablished between same account and domain ID to ensure that VPN connections are
updated error handling logic in CursorReadingTask and added unit tests in CursorReadingTaskUnitTests to improve error handling accuracy and ensure correct behavior during task
pdfbox - 4892 : do n ' t create thumbnail and extract text if pdf be encrypted
refactor CuratorZookeeperClient to ensure proper shutdown of the executor service to improve resource management and prevent potential memory leaks
refactor AnomalyDetectionResource and AnomalyDetectionResourceTest classes to improve code organization and maintainability
refactor code to use a variable for the item ID instead of directly using the getSelectedItemId ( ) to improve code readability and maintainability by
refactor Java6Assertions and Conditions classes to improve code readability and maintainability
updated the ` replaceOrderBulk ` method to return a ` List < ReplaceOrderCommand > ` instead of a ` Collection < ReplaceOrderCommand >
refactor ` enterDefault ` method to ` enterIdentNode ` in ` FindScopeDepths ` and modify its implementation in ` Lower ` to
added a new ` J9ConstantHelper ` class and modified ` ObjectHash ` to utilize it for retrieving long values to ensure proper handling of
added a new test class ConcurrentModificationExceptionOnMultiThreadedVerificationTest for managing concurrent invocations to ensure that concurrent invocations are handled concurrently
added method ` notifyRosterOffline ` and ` removeAllResources ( ) ` to ` BaseTransport ` , modified ` TransportSession ` , and added
replaced calls to ` getProperties ( ) ` with ` getOverlayedProperties ( ) ` in ` MapOperator ` and added a method to retrieve overlay
removed unnecessary comment from loadHandle method call in FunctionObjectCreator . java to improve code readability and maintain consistency
added null check for extTypeCustomDesers before initializing ExtensionTypeCustomDesers and updated the copy method in MessagePackFactoryTest to
set the default log level to WARN in the mock server configuration to ensure the server logs are suppressed during testing
removed the @ Test annotation from AbstractRegistryFactoryTest . java to clean up the test code and improve readability
removed unused imports and refactored the createJetty method in AbstractSolrMorphlineZkTestBase . java to streamline code and
updated scoreMap and termScoreMap to use generics for better type safety to enhance code clarity and maintainability by using a more descriptive
replaced ` & 0x8000000000000000L ` with ` & 0x8000000000000000L ` and added a new ` eq ` method for comparison to
remove the headline style from the MainViewModel to simplify the text layout and improve user experience
added a boolean variable ` didSupportDarkText ` and updated the notification logic in ` WallpaperColorInfo . java ` to ensure proper handling of
[ hotfix ] [ runtime ] fix checkpointrequestdecider for non - forced checkpoint
updated the maximum pool size from 2 to 8 and added new constants for core pool size to improve performance and flexibility in managing concurrent operations
updated the condition from ` filter ` to ` anyMatch ` in ` AuthenticationAttributeMultifactorAuthenticationPolicyEventResolver . java ` to improve the accuracy
added TestRequirements for Windows ServerCore container on OpenCVImageFactoryTest to ensure tests are only executed on non - Windows containers
http : / / issues . apache . org / jira / browse / amq - 4892 - add fetch option to the connection factory
updated the ` getReturnValue ` method to throw ` Throwable ` instead of null and modified the return message handling in ` Py4JNetworkException `
added a new annotation ` Issues ` and a ` @ Repeatable ` interface ` Issues ` in ` Issue . java ` to provide a
updated user properties from " hcat _ user " to " webhcat _ user " in BlueprintConfigurationProcessor . java and updated import statements
updated socket connection logic to use a dynamic address based on the " socksProxyHost " property to improve flexibility by allowing dynamic configuration of the socket address
added a method to retrieve the unique identification of a slot in SlotStatus . java to enhance the functionality of slot identification functionality
removed import of ClassUtils from ReflectionUtils . java to streamline dependencies and improve code clarity
replaced HashSet with LinkedHashSet in SslContextFactory . java to ensure consistent order of elements in the collection
added a static variable ` systemResource ` and a check for ` resource . equals ( Resources . systemResourceLocation ) ` to improve resource management by avoiding
added a new constant PLAINTEXT _ SEGMENT _ EXTRA _ SIZE in StreamingAeadDecryptingChannel and StreamingAead
added a new test method ` circuitBreakerInvalidFallbackThrowsException ` to validate the behavior of the ` circuitBreaker ` route to ensure
updated the SSL connection factory in AppPage . java to utilize SSLContexts and AllowAllHostnameVerifier to enhance SSL support for HTTP connections
set size limit and reset bytes read counter in PerformanceTest . java to ensure proper memory management and prevent memory leaks
added a boolean field ` preferAES ` to the ` ProtectionPolicy ` and removed its associated getter and setter methods from ` StandardProtectionPolicy ` to
camel - 14263 : camel - opentelemetrytestsupport should use log . info instead of system . out . println
[ hotfix ] [ test ] remove unused elb integration test
renamed the method ` setAlarm ` to ` setRingtone ` in ` AlarmReceiver . java ` to improve clarity and consistency in method naming
added error handling for file creation in DiacriticTest . java to ensure proper error reporting when file creation fails due to configuration issues
hhh - 13257 fix flaky followonlockingtest on oracle 11
refactor texture file retrieval and exception handling in TextureUnpacker . java to improve error handling and provide clearer error messages for missing atlas
refactor AmbariManagementControllerImpl to use a write lock and improve service state management to ensure thread safety and prevent concurrent modification issues during service
refactor FilterChainProxy and DefaultFilterInvocationSecurityMetadataSource classes to improve code organization and maintainability
added a new test method ` testResultSetShouldNotCloseStatement ` to ` TestJdbcDriver2 ` and modified ` HiveQueryResultSet ` to check
refactor input stream handling in InputStreamBodyGenerator and add new test methods in ChunkingTest to improve code clarity and ensure correct functionality of BufferedInputStream
refactor database retrieval logic to remove pre - deleted databases from the response to ensure that pre - deleted databases are removed from the schema response
modified the handling of the " chunkedWriter " pipeline in Http1xUpgradeToH2CHandler . java to ensure proper cleanup of the
updated condition in EnhancedBrowseFragment to use getBaseItem ( ) instead of getItemId ( ) and added a delete confirmation button in FullDetails
added a new interface ` RuleBank ` and refactored related classes to use it for rule retrieval to improve code clarity and maintainability by central
added error handling for cipher initialization in JcaTlsCrypto . java to improve robustness by catching exceptions and providing a clearer error message
added a new file ` TestMonomorphicObjectCall . java ` and ` Object . java ` for testing Monomorphic Object calls to ensure
added calls to ` toFront ( ) ` and ` toFront ( ) ` methods in ` DataBrowser ` and ` Desktop ` classes to ensure
hbase - 24166 defaultmemstore . shouldseek ( ) should set timerange to store . gettimerange ( ) if it be null
[ hotfix ] [ runtime ] rename local _ state _ root _ directory to local _ state _ directories
modified the constructor of ` AlterTimeSeriesStatement ` to accept a boolean parameter ` isAlterView ` and modified the ` AlterTimeSeriesStatement ` class
refactor regex pattern matching in ` Condition . java ` and add unit tests in ` MatchTextConditionTest . java ` to improve regex matching accuracy
added error handling to the RoutingTableBuilder retrieval in HelixBrokerStarter . java to ensure robust routing table builder retrieval and handle potential exceptions graceful
refactor parameter map insertion logic in HttpClientIntroductionAdvice . java to improve null safety and prevent potential NullPointerExceptions
( chore ) camel - jms : use char [ ] instead of string for password
api : do n ' t call session . invalidate ( ) if session . isinvalidated ( ) be false .
removed methods from the Counters class for sorting and equality checks to streamline the code and improve readability by eliminating unnecessary complexity
modified the ` initialize ` method to return a new ` BasicTumbleStatus ` instance instead of a new ` BasicTumbleStatus ` object to
[ gr - 26144 ] fix time calculation in llvmamd64syscallclockgettimenode .
updated the parameter name from " tree " to " var " in the readObject method calls to improve code clarity and maintain consistency in variable naming
added null checks for indexToNode and updated indexToNode initialization in LRUDictionary . java to improve robustness by preventing potential NullPointerExceptions
refactor DatagramPacket handling in DatagramSocket and add a new method in DatagramChannelImpl to improve code clarity and maintainability by centralizing filtering logic
updated JUnit imports from ` @ Before ` to ` @ BeforeEach ` in ` TestQueryDNS . java ` and ` TestQueryDNS
added a new file ` NutchServerInfo . java ` containing server - side configuration , jobs , and running jobs to provide a structured way to
replaced OffsetAttribute with AttributeSource for token attributes in EdgeNGramTokenFilter . java to simplify attribute handling and improve code readability
added timestamp handling in CqlInserter , ThriftInserter , and SettingsColumn classes , and modified timestamp handling in CqlInserter , Thrift
refactor DSAParameterGenerator to use BigInteger . ONE instead of a static final BigInteger for strength checks to improve code readability and maintainability by
refactor NumberUtils and Numbers classes to improve code clarity and maintainability to enhance readability and maintainability of the codebase
updated the masking logic in InetAddressSet . java and added new test cases in InetAddressSetTest . java to ensure correct handling of mask values and
added SQL exception handling for constraint violations in DefaultJdbcOptimisticLockingExceptionMapper to ensure proper handling of data integrity violations and improve error reporting
[ hotfix ] [ runtime ] fix checkstyle violation in consumermanageprocessor
added a new method ` addTab ` to the ` Tabs ` class and refactored related methods in the ` Tabs ` class to
updated array creation methods to return an empty array instead of a size ( ) array to simplify array creation and improve code readability
[ hotfix ] [ test ] add taskmanagerruntimeinfo to mockenvironmentbuilder
refactor conditional checks in MavenVisitor . java for clarity and consistency to improve readability and maintainability of the code
updated variable names from " MOCK _ APP _ SECRET2 " to " MOCK _ APP _ NAME _ UPDATE " in ZookeeperData
added a new file FormatCheckingTest . java that tests Java class name format errors to ensure proper handling of illegal class names in Java processes
updated line number assignment in CodeGenerator . java to ensure correct line number is set for method execution
added a try - catch block around the method call in ConfigHelper . java to handle potential exceptions gracefully to improve robustness by preventing potential exceptions
added methods to create RadioButton instances with specific icon and command parameters to enhance the functionality of the RadioButton class for better user interaction
increased the LinkedHashMap size from 100000 to 10000 in LRUCache and adjusted CHUNK _ METADATA _ CACHE _ SIZE in MetadataQuerier
changed the visibility of ` DEFAULT _ CAPACITY ` from private to public and modified constructor argument handling in ` ChannelParser ` to allow external access to
added null check for symbolicName before quoting it in OsgiManagementNameStrategy . java to avoid potential NullPointerException when symbolicName is null
updated log messages to use string concatenation instead of hardcoded strings to improve readability and maintainability of log messages
added exception handling for the shutdown hook in IOManager and improved logging in YARNSessionFIFOITCase to enhance error handling and provide clearer
rename ` projectRoot ` to ` androidManifestPath ` in ` RobolectricTestRunner ` to improve clarity and consistency in naming conventions
added null check for ` notPropagatedHeaders ` and updated conditional logic in ` AbstractMessageProducingHandler ` to improve header propagation logic and
refactor CompareMode class to improve code readability to enhance maintainability and facilitate future updates
added HasTests interface to RustBinaryDescription and RustLibraryDescription classes to enable testing functionality in the Rust binary and library descriptions
updated placeholder and error drawable resources in FileMessageVH . java to improve clarity and consistency in image handling
refactor OnExitTest class to improve exit handling to enhance code clarity and maintainability
added a method ` onUserPreferenceChanged ( ) ` to recreate the taskbar when the user preference has changed
refactor heap dump handling in HeapDump . java to utilize reflection - based methods for IBM VMs to improve code clarity and maintainability
added try - finally blocks for session commit and close in MyBatisProducer . java to ensure proper resource management and prevent potential memory leaks
replaced FIREFOX driver with IE driver and added wdSwitchToWindow method in ExportedWebDriverFunctions to improve compatibility with IE
updated DN _ IteratorToFor to use Java 5 for loop and added trigger patterns to enhance compatibility with Java 5 and improve code clarity
added a call to application . setStateImpl ( Stateful . STATE _ UNAVAILABLE ) in JmxApplicationProvider . java to reset the application state
replaced assertions with position and limit calculations in ByteBufferAs , Direct , Heap , and StringCharBuffer classes to improve accuracy of buffer handling and ensure
updated method call from ` toUri ( ) . toString ( ) ` to ` toString ( ) ` in ` ConditionalResolverMergeFiles . java
updated array deletion logic and added empty methods for setEmpty and setRangeArrayFilter , ArrayData , and ObjectArrayData classes to improve array management
changed enums from package - private to public in VirtualAuthenticatorOptions . java to allow access to these enums from other packages
replaced multiple document additions with a single document addition in TestMultiPhraseQuery . java to improve code readability and maintainability by using a more
updated the ` assignTickets ` method to include a payment method in ` ReservationController ` and modified the filter logic in ` TicketHelper
added a new thread variable ` _ onTimeoutThread ` and updated related logic in ` HttpChannelState . java ` to ensure proper handling of timeout
updated logging levels in multiple test files to include debug logging and improved exception handling to enhance logging clarity and provide more detailed error messages for better debugging
updated package - info . java files for mmm and ppp packages to improve package documentation clarity and maintainability
update read method to check for LOCAL _ SERIAL consistency instead of QUORUM to ensure compatibility with local serial consistency for read operations
added support for " Home " model manufacturer in HeosDiscoveryParticipant . java and modified player handling logic in HeosPlayerHandler . java to enhance
added a new ` Wait ` class and its associated getter and setter methods to the ` PlainSelect ` class , and created a new ` Wait `
refactor Neo4j to use AttributeController for node and edge data management to improve code clarity and maintainability by using a dedicated AttributeTable for
added a null check for the domain variable in SessionManager . java to ensure proper handling of null values in session validation
nifi - 10266 : deprecate rocksdb and move rocksdbmetronome to controller
updated the method to retrieve the grantable boolean from a results object to ensure the isGrantable boolean is retrieved from the results object
updated conditional logic to check if the URL starts with " javascript : " before executing the javascript command to ensure proper handling of URLs that start with
added a print statement to the conditional check for ` java . awt . headless ` in ` CxfMtomConsumerTest . java `
modified column modification logic in LoadTestTool . java to handle new column descriptors more effectively to ensure proper column modification behavior based on the new condition
updated Texture class to implement Disposable interface to ensure proper resource management and prevent potential memory leaks
updated WebappRegistrationCustomizerImpl to handle null tldBundleLocation and added extractWars functionality to enhance robustness by preventing potential NullPointerExceptions
refactor GoQuorum compatibility check logic into a separate method and improve readability to enhance code clarity and maintainability while ensuring GoQuor
replaced IOException with Throwable in HttpInput . java to improve error handling by using a more descriptive exception type
added a condition to check if the country is " JP " in LocaleTest . java to address issues related to the change in era in Thailand
updated API operations to use ` HostResponse . HostResponseWrapper . class ` instead of ` HostResponse . Wrapper . class ` to ensure consistency in
added a boost check to the equals and hashCode methods in FilteredQuery . java to ensure accurate equality and hash code comparison based on the boost value
reformatted the constructor declaration in FileMenuFilter . java to improve code readability and maintain consistency
[ ggb - 244 ] fix text edit for debug log in ggb
added a new file TestCMSClassUnloadingDisabledHWM . java that tests the CMS class unloading functionality to ensure that the CMS class
add a check for non - empty entities before constructing ItemTossEvent to prevent potential NullPointerExceptions when the entity list is empty
refactor ` ColumnMapKeyMappingPreparedStatementSetter ` to ` ColumnMapItemPreparedStatementSetter ` and update related methods to use ` ItemP
updated import statements and modified data range initialization in CompactionsTest . java to improve code clarity and maintainability by using a more descriptive
added a null check for the " type " attribute in MiniAapt . java and implemented a test for invalid item resources in MiniAap
added SPEL operator support in OperatorEnum and created SpELJudge class in OperatorJudgeFactory to enhance support for SPEL expressions in the
[ hotfix ] [ table - planner - blink ] fix check for bigint ordinality type
replaced the import of javax . swing . util . Service with java . awt . EventQueue for default Profiler to simplify the code and improve performance by
refactor Conscrypt classes for improved consistency and clarity to enhance maintainability and readability of the codebase
removed redundant warnings in AttributeResolution9 and ShadowArscAssetManager9 to streamline attribute resolution process and improve code clarity
updated the " - source " and " - target " option from " 1.0 " to " 6 " in the fullOptions list to ensure compatibility with
changed access modifier of extractMetadataColumns method from private to public and modified project extraction logic in PushProjectIntoTableSourceScanRule to allow external access
replaced direct calls to CommonsApplication . getInstance ( ) . getLocalizedNames ( ) with a direct reference to getCanonicalNames ( ) in AboutActivity
chore ( deps ) : upgrade gapic - generator - java to 2.8 . 0 and update gax - java to 2.18 . 1 (
modified the delay logic in HomeFragment to conditionally commit changes based on the live streaming setting to ensure proper refresh behavior based on the user ' s
added exception handling to the MappingException in AuditConfiguration . java to improve error reporting for better debugging and debugging
[ hotfix ] [ test ] increase timeout for fileconsumerpollstrategystoponrollbacktest
updated type declarations to use generics for aliases in SchemaLoader , CompositeType , and DynamicCompositeType classes to enhance type safety and prevent potential runtime
added support for transports in GitClientApplication and refactored repository URL handling in RepositoryUrlPanel to enhance transport support functionality and improve code clarity
added logging for trackpad gesture and long press nav handle in multiple input consumer classes to enhance debugging capabilities and provide clearer feedback on input consumer delegation
refactor version handling logic in ChangeParentPom . java to handle null mavenMetadata and improve version upgrade logic to enhance robustness by preventing potential
added a check for " Disabled " in the Large Page Support test and modified logging messages to enhance test coverage for large page support scenarios
added a check for the existence of the cloud _ usage database before retrieving the last processed event to ensure that events are skipped when the cloud _ usage
added IOException handling to the getTestParameters method in BrokerXmlConfigStartTest . java to ensure proper file path handling for Windows environments
added a new test class ` TestObjectStreamClass ` and modified the ` ObjectInputStream ` and ` readObject ` methods in ` ObjectStreamClass ` to enhance
removed unnecessary null checks for datacenterInfo in ZoneAwareDiscoveryFilter . java to simplify the code and improve readability
changed log level from error to warn in OpenTracingTracer . java to improve logging clarity and reduce verbosity
added a toString ( ) method to the Generator class to provide a readable string representation of the number of registered generators
refactor authority handling in URI . java and add new test cases in Test . java to improve code clarity and ensure proper handling of URI queries
added a null and empty check for resources in ClusterControllerImpl . java and created a test for resource retrieval in ClusterControllerImplTest . java to
refactor error handling and response extraction logic in AccepttoApiUtils . java to improve code clarity and ensure robust error handling during API response extraction
added conditional check for Android version in VertexBufferObject . java to ensure compatibility with Android versions prior to 5
refactor SybaseASADatabase class to improve code readability to enhance maintainability and facilitate future updates
added a ` forceProjection ` parameter to the ` HashJoinInfo ` constructor and updated its usage in ` HashJoinInfo ` to enable backward compatibility
added a method to get the StringDistance in SpellChecker . java to provide access to the StringDistance object
added new flags for mutable and immutable pending intents in AndroidImplementation . java to ensure proper handling of push notifications on different Android SDK versions
refactor HiveFileFormatUtils to improve read column ID handling and configuration management to enhance code clarity and maintainability by encapsulating read column
updated method names from ` getUPNPAddress ( ) ` to ` getIPv4MulticastAddress ( ) ` in ` UPNPHelper . java
added a temporary toast display method to display temporary toast messages to improve user experience by providing a clear feedback when temporary toast is displayed
added null check for module version before setting it in ServiceModule to avoid potential NullPointerExceptions when setting the module version
added a new test class ` RawSerializationTest ` for JSON serialization functionality to ensure correct JSON serialization behavior for different collection types and parameters
simonstewart : refactor Seleniumserver to implement sslcertificategenerator and add a new interface for generating SSL certificates to improve SSL certificate generation
updated loop structure in ExpansionViewHelper to iterate through the list of replies instead of just a single tweet to improve code readability and maintainability
increased timeout duration in ExpiringUrlCacheTests from 3 seconds to 60 seconds to allow more time for resource access tests to complete
added a new test method ` testNGramFilterPayload ` to validate payload handling in token filters to ensure correct behavior of payload processing in NGram
refactor AclImpl class methods for improved readability to enhance maintainability and facilitate future updates
added unit tests for different array sizes in EasyRandomTest . java to ensure correct array generation behavior when different array sizes are used
added constructors RebootAnswer and StopAnswer to handle exceptions in RebootAnswer , StopAnswer , and CitrixResourceBase to improve error
added a ThreadLocal to manage write operations in SslConnection to improve thread safety during write operations
added a method ` ancestorsVisible ( ) ` to the ` Actor ` class to check if the ancestors are visible to enhance the actor ' s visibility
added logging for rolling - update failures in RollingUpdateOpFactory to improve traceability of rolling update failures
[ hotfix ] [ table - common ] add nullable annotation to the of ( ) method
added error handling for non - existent usernames in DaoAuthenticationProvider and created a new AuthenticationFailureUsernameNotFoundEvent class to improve robustness
refactor AtMostXVerificationTest . java for improved readability to enhance maintainability and facilitate future updates
updated the default QTYPE constant from " lucene " to " LuceneQParserPlugin . NAME " across multiple files to ensure compatibility with the newer
updated SimpleDateFormat instantiation to include Locale . US in WeekDateTest . java to ensure consistent date formatting across different locales
added an overridden method ` isInitialized ( ) ` in ` ILanguageServer ` and created a new ` LocalsCompletionTest _ template ` class
updated ClientAPITokenIntegrationTest to use ` shouldHaveIdToken ` instead of ` idToken ` to ensure that the test correctly verifies the ID token
added ` beginTransaction ` , ` setTransactionSuccessful ` , and ` endTransaction ` methods to ` DatabaseAdapter ` , and modified ` Gnc
refactor byte array handling in MimeType . java to use ByteArrayOutputStream instead of byte array to improve efficiency and efficiency in handling byte arrays
refactor exception message handling in MessagingTemplate to use a boolean variable for better readability to improve code clarity and maintainability by reducing duplication
added an ` isAcceptable ` method to the ` AutoFormatVisitor ` class to determine if a source file is an instance of ` J .
set maxBufferedDocs and setRAMBufferSizeMB to Integer . MAX _ VALUE and setRAMBufferSizeMB to 100 to optimize memory usage and improve test
added a method to clear the wits list in Manager and updated related tests in ManagerTest to ensure that the WitnessCapsule objects are
added error handling for NoSuchElementException in CopyOnWriteMap . java to improve robustness by handling potential NoSuchElementExceptions
remove log level parameter from flumenode . logversion ( ) and flumenode . logenvironment ( )
refactor BasicAuthIntegrationTest and DaemonStream classes to improve authentication metrics assertions to enhance test reliability and maintainability by using a dedicated executor service
replaced HashMap with LinkedHashMap for the nodes variable in DependencyUtil . java to improve performance by using a more efficient data structure
added InternalErrorMapper to handle InternalServerErrorException in JerseySupport and updated module - info to include Weld . core . impl to improve error handling and
refactor response header validation in Http2TestBase . java to improve code readability and maintainability by using a dedicated method for validation
updated system property handling in System . java to handle different system property keys to ensure proper handling of system properties for different Java versions
updated method signatures from ` String ` to ` CharSequence ` in ` StringSubject ` and added corresponding unit tests in ` StringTest ` to enhance method
added JVM initialization and event writer methods to the CheckGraalIntrinsics class to enhance intrinsic management for better monitoring and event management
rename IntUtilsTest class to PrimUtilsTest to improve clarity and consistency in naming conventions
updated DataSource initialization to use ` ds2 ` instead of ` ds ` in ` PersistenceManagerProvider . java ` to ensure correct connection factory is used
refactor DeploymentOptions class to improve code readability to enhance maintainability and facilitate future updates
updated the ` updateTextButtonWithDrawable ` method to use ` Drawable ` instead of ` Drawable . ConstantState ` to simplify drawable handling and improve
replaced InputStreamReader with StringReader in XmlParser and YamlParser classes to ensure proper resource management and avoid potential memory leaks
added functionality to handle COALESCE functions in RexNodeConverter and registered it in SqlFunctionConverter to ensure proper handling of coalesce operations
camel - 11346 : camel - hl7 - remove unnecessary test for hl7 data format .
refactor JavassistProxyFactoryFactory to use a context class loader and ensure proper context class loading to improve thread safety and ensure proper class
refactor DefaultDateTypeAdapter constructors to use a single constructor for better readability to improve code clarity and maintainability by reducing duplication
reformatted formatting in DocumentUtil . java for consistency to improve code readability and maintainability
refactor HttpClientRequestBase to streamline URI handling and query parsing logic to improve code clarity and maintainability by simplifying query parsing logic
removed the filtering of old feed entries in FeedRefreshUpdater . java to streamline the code by eliminating redundancy
change log level from fatal to warn in FSHLog . java to provide more informative logging when appending fails
refactor ` NodeMap ` to use a new ` NodeMapIterable ` class to improve code organization and maintainability by encapsulating the
updated import statements for RouteDefinitionLocator and modified predicate handling in DiscoveryClientRouteDefinitionLocator . java to ensure compatibility with the latest FilterDefinition and Filter
added a check for non - empty fields before adding aggregate operations in MongoRecordReader and modified the return condition in RexToMongoTranslator to ensure
added a check for an empty admin list before adding it to the admin list to ensure that the admin list is added only when it is empty
replaced ` MultiFields . getFields ( ) ` with ` getSlowAtomicReader ( ) ` in ` IGainTermsQParserPlugin ` and `
replace ` bean . toString ( ) ` with ` ObjectHelper . getIdentityHashCode ( bean ) ` in ` ConstantBeanHolder . java ` to
refactor code to check if ` primitiveType ` is not null before building the resolved name to improve readability and maintainability of the code
svm : fix frameinfoquery . hashCode ( ) and frameinfoquery . islatin1 ( ) .
increased the timeout values for blockWhenFull and offerTimeout from 100 to 200 in SedaBlockWhenFullTest . java to improve test reliability by
added a new package - info . java file in the org . apache . lucene . core . testresources package to provide package - level documentation for
updated the calculation of readLen in MessageUnpacker . java to ensure the correct buffer size is used to prevent potential index out of bounds errors
updated import statement from ` io . micrometer . common . lang . Nullable ` to ` io . micrometer . core . lang . Nullable `
updated SQL query to include the user ID in the IconDB column to ensure that the component and user ID are included in the database query
camel - 14263 : fix typo in defaultmqproducerimpl . getbackpressureforasyncsendsize ( )
modified the ` addWhitelistedResource ` method to accept a boolean parameter ` isClassfileOnly ` and adjusted related logic to enhance resource whitelisting
added a method to fix foreign key constraints for baremetal dhcp devices in Upgrade410to420 . java to ensure proper handling
removed the IJava2DRenderer interface from Java2DRenderer . java to simplify the class structure and eliminate unnecessary dependencies
added onTearDown method to DefaultAudioSink to call onOffloadBufferEmptying when the audio sink is stopped to ensure proper handling of offload
refactor UpstreamCacheManager to utilize ScheduledThreadPoolExecutor for scheduling upstream tasks to improve performance and maintainability of upstream task management
refactor StreamType class to improve code readability to enhance maintainability and facilitate future updates
updated assertions in Recording . java to include an explanation for the expected output duration to improve clarity of assertion messages for better debugging
updated FilestorePage and RootPage to use RequiresAdminRole instead of GitBlitWebSession for authentication checks to improve user experience by ensuring admin
camel - elasticsearch - ignore camel - elasticsearch test for now
refactor the accept method to check if the method ' s declaring class is a valid class before proceeding to improve code readability and maintainability
updated button names from " leftButtonAltcoin " and " rightButtonFiat " to " sellWithFiat " and " sellWithFi
camel - 14263 : restlet should handle invalid url when uri pattern do n ' t match .
add block . createnextblockwithcoinbase ( address , coinbasevalue ) to block . createnextblockwithcoinbase ( )
refactor BTreeMapJava and JSR166Test to implement NotSerializableException and introduce a new serialCloneNoCatch method to improve serialization
added a null check for the cause before logging error messages in RuleEngineImpl . java to avoid potential NullPointerException when the cause is null
reformatted conditional statement in Main . java for clarity to improve readability and maintainability of the code
changed the method from ` mFilesAll ` to ` mFiles ` in ` LocalFileListAdapter . java ` to ensure the correct file index
deleted the PlainVerifier . java file to remove unused code to streamline the codebase
added a check to close system windows when the command is triggered from an alt tab to ensure proper termination of system windows when the command is triggered from
refactored dialog handling in DialogFragmentIT and OCFileListBottomSheetDialog to improve clarity and functionality to enhance user experience by ensuring proper
fix http : / / issues . apache . org / bugzilla / show _ bug . cgi ? id = 46165
added a call to ` super . deinitialize ( ) ` in ` TextField . java ` to ensure proper initialization of the ` TextField ` class
removed unused imports and refactored the testSerialization method in LogFormatTest . java to streamline the code and improve readability by util
updated previous range parsing in LogicalGenerator and added new fill types in GroupByFillDataSet to ensure correct previous range handling and improve fill type handling in
added error handling for negative array size in JAXWSExceptionBase . java to improve robustness by throwing a NegativeArraySizeException for negative
updated import statements from JUnit to JUnit 5 in CtUnresolvedImportTest . java to align test imports with the latest JUnit library
updated the timeout duration from 10 seconds to 60 seconds in T6567415 . java to allow for a longer wait time for the thread to
[ hotfix ] [ runtime ] change default scheduling strategy from " legacy " to " region " in jobmanageroptions
added ` title ` field and its getter / setter methods to ` ShadowActivity ` and updated ` ShadowAlertDialog ` , ` ShadowTextView ` ,
replaced LogFactory with POILogFactory and POILogger in POIFSFileSystem . java to utilize POILogger for better logging capabilities
added channel state management and updated alarm handling in InstarHandler . java to improve clarity and functionality of alert handling and enhance user experience
added latency tracking for removal operations in MapDeleteMessageTask and corresponding test cases in LocalMapStatsTest to enhance map deletion performance tracking and ensure correct
modified the enum type in Option . java and modified the return statement in Response . java to ensure proper handling of HTTP status codes and improve code clarity
refactor code to use a method for finding the Java file location to improve code clarity and maintainability by using a dedicated location for Java files
fix ( core ) : add project - name option to module - builder
added a new test class ` DeprecatedStubbingTest ` to validate deprecated stubbing behavior to ensure correct behavior of stubbing methods in deprecated scenarios
updated import statements in ITBraveServletFilter . java to use javax . servlet instead of org . eclipse . jetty . server . DispatcherType
add support for NML and NX in EnglishGrammaticalRelations . java and update EnglishGrammaticalStructureTest . java to enhance
added a conditional check forRSAKeyExchange before adding additional TLS _ RSA _ WITH _ RSA _ WITH _ AES _ CCM cipher boxes to
replaced instances of ` output _ reader ` with ` reader ` in multiple files to ensure proper resource management and prevent memory leaks
refactor OAuth client service handling in PubSubAPI , SDMAPI , and SDMAPI classes to improve code clarity and maintainability by central
updated interpolators in TaskbarEduView to use EMPHASIZED instead of AGGRESSIVE _ EASE to improve animation
[ iotdb - 5131 ] add updateregionlocation plan to confignode ( # 11486 )
added a new file FileDialogLeakTest . java to test file leak behavior to ensure proper cleanup of file descriptors and prevent potential memory leaks
hbase - 24499 move testopentableincoprocessor from hbase to hbase / coprocessor / testopentableincoprocessor
add uninterruptible annotation to the implementation method to ensure proper handling of uninterruptible implementations
[ hotfix ] [ protobuf ] remove unused splitmethod from pbcodegen
corrected a typo in the condition in DrillSidewaysScorer . java to ensure proper handling of non - null dimensions in the
updated methods in ExoPlayerTest , DynamicConcatenatingMediaSourceTest , FakeMediaSource , FakeMediaSourceTest , and FakeMediaSource
added JVM _ MAJOR _ VERSION and JVM _ MINOR _ VERSION constants and updated conditional checks in Helper to ensure compatibility with Java
updated FileReporter to accept generic types for null and File instances to enhance type safety and prevent potential NullPointerExceptions
changed the condition from ` isFalse ` to ` isTrue ` in ` SettingsActivity . java ` to ensure that the end - to - end encryption
added functionality to display home as up and show back button in DirectMessageConversation . java to enhance user experience by allowing back navigation to the home button
added a new method ` GET _ USER ` to the ` RpcServlet ` and implemented user retrieval logic in ` RpcUtils ` to enhance user management
added an @ EnabledIfSystemProperty annotation to TestJdbcPluginWithMSSQL . java to enable MSSQL tests based on the operating system architecture
replaced the original startClass variable with a reference to originalStartClass to improve code clarity and maintainability by preserving the original startClass variable
updated error messages and added local management for parameter registers in DexBody . java to improve clarity and maintainability of local management for parameter register
replaced calls to ` getAsyncContext ( ) . getResponse ( ) ` with ` getSuppliedResponse ( ) ` in ` TestAsyncContext
[ jbrules - 2576 ] fix the look and feel to work with metal l & f
updated regex to replace " V " with " V { version } " in AppPage . java to ensure consistency in variable naming conventions
refactor animation listener handling in LauncherAppTransitionManagerImpl to use launcherAnimator and appIconAnimatorSet to improve code clarity and maintainability by
updated error message from " base58 " to " version " in DumpedPrivateKey . java to provide clearer context about the version of the network
updated the method call from ` offerPayload . getExtraDataMap ( ) ` to ` newOfferPayload . getExtraDataMap ( ) `
updated repository parameter assignment logic in TicketPage . java to handle open tickets to ensure correct handling of ticket parameters based on the milestone ' s open
updated the battery size from 640 to 800 in PipeItemsWood . java to enhance battery configuration flexibility
added a new method ` getClusterKey ` to retrieve cluster keys and updated the ` getStateMachineClusterInstance ` method to include blueprint name and revision
changed the default value of downgradeAllowed to true in UpgradePack . java and added a new test method in UpgradePackTest . java to
updated XML attribute scan methods to use ' ELEMENTSTART ' instead of ' ATTRIBUTE ' and added a check for node count in XMLStreamReaderImpl to ensure
added a new configuration constant EMULATE _ SYSTEM _ LOADLIBRARY and modified library loading logic in Library . java to enhance functionality
replaced instances of ` APP _ NAME _ COMPARATOR ` with a new ` getAppNameComparator ( ) ` method in ` LauncherModel
updated ZipEntry handling and file closing logic in DefaultPlatformManager and FatJarStarter classes to ensure proper resource management and prevent potential memory leaks
reformatted assertions in TestSecretKeyCredentialHandler . java for improved readability to enhance readability and maintainability of the test method
camel - 14497 : camel - spring - spring - spring - spring - spring - spring - spring - spring - spring - spring - spring
updated descriptions in MetricOptions . java for better clarity and consistency to ensure that only applicable for push - based reporters are applied when an identifier -
hbase - 24165 testfulllogreconstruction should use dfs configuration instead of default configuration
added a ` reuseAddress ` flag to ` DatagramSocketOptions ` and overridden ` setSendBufferSize ` , ` setReceiveBufferSize ` , and ` set
change server shutdown message from " Server shutting down . " to " Server shutting down . " in GlowServer . java and ServerConfig . java
simonstewart : remove the old locatable interface from the internal package .
updated error messages in VersionInfo . java to clarify that the field must be searchable and have docValues to improve clarity of error messages for better
rename equality predicate columns to predicateColumns in StarTreeIndexOperator . java to improve clarity and consistency in naming conventions
reformatted code in HelloMessage . java and HandshakeHandler . java to improve code readability and maintainability
updated formatting in Navigator . java to improve readability to enhance code clarity and maintainability
updated variable declarations in RecordReaderFactory . java and added a new test class in RecordReaderFactoryTest . java to improve code clarity and ensure consistency
added comparison logic for GREATER _ THAN _ EQUAL and LESS _ THAN _ EQUAL in MongoQueryCreator and corresponding unit tests
refactor GROUP BY clause validation logic in CalciteSqlParser . java to improve readability and maintainability of the code
updated MappedByteBuffer and FileChannelLinesSpliterator to include an AtomicInteger for buffer reference count and improved resource management to enhance memory management and ensure proper resource management during
replaced instances of ` l . getValidator ( ) ` with ` validator ` in ` LdapUtils . java ` to improve code readability and maintain
added a new method ` schedule ( ) ` to ` CircuitBreakerImpl ` and modified ` WAIT _ TIMEOUT _ MILLIS ` in
removed FLAG _ ACTIVITY _ EXCLUDE _ FROM _ RECENTS from intent flags in Launcher . java to simplify intent flag
renamed " ajax " to " progressbar " in SubmissionController and FileUploadRequest classes to improve clarity and consistency in naming conventions
[ hotfix ] disable tableextretrievertest to allow retrieval strategy for column privilege
added synchronized keyword to addExportedCount and getExportedCount methods to ensure thread safety during concurrent access to the methods
updated import statement from IntRangeUtil1 . requireNonNegative to IntRangeUtil . requireNonNegative to correct the import statement for better readability
added whitespace handling in HttpParser and a corresponding test in HttpParserTest to improve character validation and ensure correct handling of encoded headers
updated the layout resource from ` trends _ activity ` to ` configuration _ activity ` in ` ConfigurePagerActivity . java ` to ensure the correct activity
updated the print statement in SLWTTextListing . java to include the position of the found SLWT in the document to provide more
refactor ForceLeaderTest to use Nightly and add a new ForceLeaderWithTlogReplicasTest class for testing to improve test reliability and
refactor Thread class to improve thread management to enhance performance and maintainability of the code
updated RECOGNIZED _ TEMPLATE _ FILE _ SUFFIXES to include additional file suffixes and added a new forceTemplateMode flag
camel - 14263 : camel - cxf - do n ' t set the namespace when set a default cxf element .
modified the formatting of the constructor declarations in YamlRepresenter . java to improve code readability and maintain consistency
updated output formatting in ToChar . java and added new test cases in TestFunctions . java to ensure accurate formatting of month values and improve test coverage
added ValidTxnList , ValidTxnWriteIdList , and VALID _ TXNS _ KEY configurations to GenericUDTFGet
replaced instances of ArrayList with Collections . emptyList ( ) in JsonSerDe . java to improve code readability and prevent potential NullPointerExceptions
added null check for book path before loading data in DataHolder . java and implemented hasNoInitialImage method in Picture . java to improve robustness
refactor SSTDeserializer constructor and method signatures in TestSSTDeserializer . java to improve code readability and maintainability
replaced hardcoded grid column value with a constant and updated grid column retrieval logic to improve code readability and maintainability by centralizing grid column
updated error messages in Platform . java and ComparisonFailureWithFieldsTest . java to improve clarity and accuracy of comparison failure messages
added a ` waitingForKeys ` boolean variable to the ` DecoderInputBuffer ` class and updated conditional logic in ` ClippingMediaPeriod ` to
updated API path annotations from " / api / margin / v3 / accounts " to " / margin / v3 / accounts " in Okex
refactor conditional checks for line coordinates in LineUtilitiesTests . java to improve readability and maintainability of the code
added error handling for varargs and old array syntax in JavacParser . java and created new classes for varargs and old array syntax to improve
added thread verification for playback threads in DefaultDrmSession and DefaultDrmSessionManager classes to ensure proper access to playback loopers and prevent potential
added a method to the VariableContext class to handle method calls and updated context handling logic to enhance functionality to support method invocations and ensure correct context
added unit tests for invalid compilation unit and profile strings in ExperimentParserTest . java to ensure proper error handling for invalid JSON output in the parser
updated buffer position handling in Piece . java and modified buffer limit setting in SharingPeer . java to ensure correct buffer position handling and improve buffer
added HttpClientProperties parameter to NettyRoutingFilter and NettyRoutingFilter classes to allow customizable response timeouts for improved response handling
refactor ` getNativeLinkTarget ` method calls to use ` getTargetForPlatform ( cxxPlatform ) ` instead of ` cxxPlatform `
added a new test class MainRestConfigurationTest for the RestConfiguration functionality to ensure the correct functionality of the RestConfiguration functionality in the main application
added support for handling RexFieldAccess in ASTConverter and refactored RexNodeConverter to improve the handling of field access expressions in the
replaced direct calls to ` QueryLogEntry . values ( ) ` with a static variable ` QUERY _ LOG _ ENTRY _ VALUES ` to improve
added a method to ` relativizeNoProxy ` and refactored related methods in ` WebClientRequestBuilderImpl ` to improve URI handling
refactor certificate handling in PKCS12KeyStore and storeSecretKeyTest to improve code clarity and ensure proper initialization of certificates
added reflection access checks and refactored methods in NativeObject , ReflectionCheckLinker , and ReflectionCheckLinker classes to improve security checks and
removed the ' public ' access modifier from constructors in CollisionMap . java to restrict access to the constructor for better encapsulation
marked the ` getRawInputFromTransactionInput ` method as deprecated and added a null check for the ` input ` parameter to indicate that the method should
refactor log level handling in ConfigurationValueConverter and Main classes to use a switch statement to improve code readability and maintainability by consolidating
remove unnecessary region _ id parameter from database insertion statements to simplify the insert statements and improve code readability
added EncryptedDocumentException handling in OldExcelExtractor and updated test assertions in TestOldExcelExtractor to ensure encryption is not supported for Old Excel files
[ gr - 10266 ] add -- add - exports = all - unnamed to mx _ java _ benchmarks . py .
changed the visibility of the image holder from GONE to GONE in TimeLineCursorAdapter . java to ensure proper visibility of the image in the holder
increased the delay from 10 seconds to 50 seconds and adjusted sleep duration in the BatchingStateChangeUploadSchedulerTest to improve test reliability and ensure all attempts
refactor file creation and deletion logic in ShadowContext and add a new test method in ContextTest to improve code clarity and ensure proper deletion of directory
refactor exception factory initialization to use Class . forName for AssertionFailedError and ComparisonFailure to improve error handling by using the correct class loader for
updated the WAIT _ TIME _ MS constant from 10000 to 60000 in LauncherInstrumentation . java to increase the wait time for the launcher to
added support for the " aud " JWT claim in ConnectOAuth2RequestFactory and ConnectTokenEnhancer classes to enhance authentication handling by allowing
removed default value for breakOnFirstError in KafkaConfiguration to simplify configuration by removing unnecessary default value
added a new constant ` selectableItemBackground ` with a value of ` 0x10a13 ` to define the background color of the selected
replaced multiple specific trade - related imports with a wildcard import and added a placeholder method for placing stop orders to streamline import statements and provide a
updated event type assignment logic in TxnSetOperation . java to ensure correct event type is set when the record is null
added a new class ResumableRandomAccessFileListener to handle RandomAccessFile events to improve resource management and prevent potential memory leaks
updated class name from " AccessLogValve " to " AbstractAccessLogValve " in SecurityClassLoad . java to correct the class name
added format handling in HSSFDataFormat and updated test assertions in TestWorkbook to ensure correct data format retrieval and improve test reliability
[ hotfix ] [ kafka ] deprecate kafka producer from flinkkafkaproducer
updated the condition for determining the compressed chunk length in CompressedInputStream . java to ensure correct calculation of compressed chunk length based on the maximum compressed length
added a new file ` RedisStringIdempotentRepository . java ` to provide a repository for IDempotent Redis values to ensure that
fix vanilla use metadata in container repair ( # 77952 )
added support for realLocalRepo in LegacyLocalRepositoryManager to enhance artifact path retrieval based on the repository layout
added checks for task manager initialization and improved error handling in LocalInstanceManager , JobManager , and TaskManager classes to ensure task managers are properly initialized
added deployment instructions for deploying files in AbstractArtifactResolutionException . java to enhance functionality by allowing users to deploy files in your own repository
replaced direct calls to ` getInternalTemporalPath ( ) ` with ` getInternalTemporalPath ( ) ` in ` FileStorage
refactor FeedEntryStatusDAO to use a new method ` findByEntries ` for retrieving feed entries by their IDs to improve code maintainability and
added executeStart ( ) and executeEnd ( ) methods to VertxThread in ContextImpl . java and modified deployment options in BlockedThreadChecker
updated the ` instantiate ` method to accept a ` String ` parameter and modified the ` convertOrNull ` method to handle null arguments to ensure proper handling
updated file reading logic in LoadContactsTask . java to handle different Android SDK versions to ensure compatibility with newer Android versions and improve compatibility with
replaced ` setRemoteAddress ` and ` setRemoteHostname ` methods with ` this . remoteAddress ` and ` this . remoteHostname ` to ensure consistency
added a null check for realClass in Robolectric . java to ensure that the shadowClass is not annotated with @ Implements
added support for tlsMutualAuthenticationCertificateChain in NettySslContextFactory and ExampleNettySslContextFactory to enhance security by ensuring tls authentication
added a test to verify that requesting a plain HTTP endpoint over HTTPS throws a SSLException to ensure proper handling of SSL exceptions during HTTP requests
added getter methods for consumer and producer in AbstractKafkaResumeStrategy . java to provide access to these methods for better functionality
refactored conditional statements in PageChangeListener and added import statements in FrameRenderer to improve code readability and maintainability
corrected the spelling of " email " to " SMS " in the warning log message to improve clarity and accuracy of log messages
# 118 - enh : add draftqueryoptimise ( query < ? > ) to beandescriptor and beandescriptordrafthelp
added error handling for IO exceptions in MultipartBody . java to improve robustness by handling potential resource temporarily unavailable issues
refactor array initialization in ExecutableFactory and ZipFolder classes to improve code readability and maintainability
refactor EndpointConfiguration , SpEL , MainSupport , and SSLContextParameters classes to improve code organization and maintainability
updated file directory handling in AttachFileAction . java to use first existing file directory instead of a hardcoded value to improve code readability and
added LoadOptionsBuilder for SchemaInfoLevel and updated SchemaCrawlerOptions initialization to enable dynamic loading of schema information based on schema info level
[ j9 ] move testloadlegacylibrary to j9vm . test . loadlibrary
replaced an exception throw with a return statement in TestReader . java to simplify error handling by returning null instead of throwing an exception
added methods to set name , enabled , and expanded properties from prototype to ProjectProperty to ensure proper configuration of project properties based on the prototype ' s
refactor connection handling in AbstractDbmsOperationHandler to use try - with - resources for ConnectionInfo to ensure proper resource management and avoid potential memory
refactor DataStreamJob class implementation to improve code readability and maintainability
added error handling for EPIPE in FileOutputStream creation to ensure proper resource management and prevent potential memory leaks
camel - 14263 : camel - cxf should use real class to get the service class .
added a check for " h2 - 14 " protocol in HTTP2ServerConnectionFactory . java to simplify the logic for determining if the protocol is
refactor LambdaToMethod to use a ListBuffer for parameter symbols and improve conditional logic in ClassFileVisitor to enhance code readability and maintainability by
corrected the spelling of " what " in the TregexPattern . java file to ensure accurate matching of SBARQ verbs
increased the cache size from 5000 to 60000 in DL4JInceptionV3Net . java to increase the cache size for improved performance
added a method to set the Slop for the mpq to enhance query parsing flexibility
updated delay values for LONG _ PRESS _ DELAY from 10 to 100 milliseconds in LongPressMouseListenerTest . java to improve test reliability by
updated COLLECTOR _ HOST _ PROPERTY value from 8188 to 6188 in FlumeTimelineMetricsSink and HadoopTimelineMetricsSink to
replaced direct calls to ` GameScheduler . parallel ( ) . schedule ( ) ` with ` ThreadMonitor . startThreadActivity ( ) ` in `
updated setVisibility logic to check if edit options are available before setting visibility to ensure that edit options are only shown when available
updated progress calculation in DepthController . java to ensure progress is within a defined range to improve the accuracy of depth progress tracking
removed the ` packetReceived ` method from ` ClientSession ` , ` ComponentSession ` , and ` Session ` classes to streamline the packet processing
refactor authentication handling in DelegatedAuthenticationGenerateClientsAction to utilize DelegatedClientIdentityProviderConfiguration instead of UnauthorizedAuthenticationException to improve code
added null checks for the service parameter in SamlIdPEntityIdAuthenticationServiceSelectionStrategy and SamlIdPMetadataUIAction classes to improve robust
added a hidden flag to the command arguments in PantheonCommand . java to enhance the command ' s functionality by allowing hidden functionality
added doNotInstrumentClass ( " androidx . room . CoroutinesRoom $ Companion " ) to AndroidConfigurer to prevent instrumenting
modified the ` isSupported ` method to synchronize access to the ` ClassLoader ` method to ensure thread safety when accessing the ` HttpCallerInfo `
removed the setInitScript method from InitializingDataSourceFactoryBean to streamline the initialization script management process
camel - 14263 : camel - persistent - > camel - queue - reply - > camel - temporary - queue - reply - > camel -
refactor AuthenticationProvider and TargetObject classes to improve code organization and maintainability
added conditional logic to flush and close text blocks based on the presence of tagged elements in PdfDocument . java to ensure proper text formatting based on the
log4j2 - 1331 add a new test method ` testPatternSelector ` in ` PatternLayoutTest . java ` to validate pattern selector
simonstewart : do n ' t throw exception if the browser do n ' t support selenium core
added a new class ` MwThankPostResponse ` and updated the method signature in ` Service . java ` to enhance the functionality of the
changed the ` ChannelEndPoint ` class to implement ` SocketBased ` and added a new ` SocketBased ` interface in ` SslConnection ` to
refactored revoking store initialization and setting max size in Manager . java to improve code readability and maintainability by reducing redundancy
added new test methods for implicit join 1 and 2 in HQLTest . java to ensure that the query returns the number of calls and timestamps
modified the assertion in NonVisualRegressionTest to normalize line endings to ensure accurate comparison of expected and actual text with line separators
replaced direct calls to ` toCommit ` with a ` filesToCommit ` collection and updated related methods in ` IndexWriter ` , ` MockDirectory
added @ Final annotation to multiple methods in BaseError . java to enhance method visibility and improve code clarity
added validation for the consumeUserResourcePercent value in ConsumeUserResourcePercentActuator . java to ensure that the new percent is within valid
added a condition to check if the old login is displayed in the AuthenticatorActivity to ensure that the old login is displayed only when it is enabled
rename the class StreamNetworkThroughputBenchmarkTests to StreamNetworkThroughputBenchmarkTest to improve clarity and consistency in naming conventions
updated the response page setting logic in EditTeamPage . java to ensure the correct response page is set for users
updated error message in PMS . java from " error with credentials file during startup " to " e " to improve debugging by providing more context in
refactor the closing of the server socket channel in ConnectionManager . java to ensure proper resource management and prevent potential memory leaks
refactor Rocket class to improve code readability to enhance maintainability and facilitate future updates
added a method to check for dynamic partition specifications in the BaseSemanticAnalyzer class to ensure proper handling of DESTINATION and DESTIN
refactor rounding logic in Kernel and StringTemplate classes to improve clarity and functionality to enhance code readability and maintainability by using a more descript
added a visitDirectory method to JarDirectoryStep and a corresponding test in DirectoryTraversal and DirectoryTraversal to ensure that duplicate entries are added to the jar
added a new JWKSetEditor class to handle JWKSet setting to facilitate the conversion of JWKSet from JWKSet to JWK
refactor term handling in OrdsBlockTreeTermsWriter and BlockTreeTermsWriter to improve clarity and maintainability of the finish method
added a condition to check for " traceThrowable " method and modified method resolution in JFRListener , InvokeEspressoNode , and To
changed the default value of " fetcher . threads . per . host . by . ip " from true to false to disable the fetcher threads
refactor conditional checks for transactionTimeout and queryTimeout in StatementUtil . java to improve code readability and maintainability
added imports for UnconfiguredTargetConfiguration and TargetConfigurationHasher , and modified the path resolution logic in HaskellGhciRuleIntegrationTest to
refactor ReplicaPosition class to improve code readability to enhance maintainability and facilitate future updates
fix a bug where the initial delay for network usage stats update be incorrect .
updated animation interpolators to use a constant FINAL _ FRAME instead of a hardcoded value to improve code readability and maintainability by
updated swipe length calculation in Background . java to improve user experience by adjusting swipe distance based on display density
added a new module - info . java and updated module declarations in various classes to implement module dependencies and improve code organization
updated JsonType and JsonTest classes to replace hardcoded strings with constants MY _ JSON _ OBJ and MIG _ JSON _ 
removed unnecessary lines of code in ResourceResolverBean . java to improve code readability and maintainability
[ hotfix ] [ runtime ] fix default value of checkpointingoptions . checkpointable _ failure _ number
refactor InnerClassesTable to use ElementKind instead of TypeElement for better handling of package annotations to improve clarity and correctness in handling inner class references
updated the command string construction in TimestampCheck . java to include an empty string to ensure proper execution of the test VM options
replaced FluentIterable with Java ' s MoreCollectors for handling file listing to streamline code and improve readability by utilizing Java ' s More
remove the default value of ` register ` from the ` AbstractServiceConfig ` and add a constant ` REGISTER _ KEY ` in ` ServiceConfig
added handling for security OTR mode changes in SettingsManager and refactored onClose method in OTRManager to improve user experience by ensuring proper
added outline size and transparency properties to the PreviewProperty and NodeLabelRenderer classes to enhance the visual representation of node labels in the UI
refactor ProxySelector , URL , and URLStreamHandler classes to improve code organization and maintainability
updated the default value of ` false ` to ` true ` in ` Win32FontManager . java ` to ensure consistent font rendering behavior
added a null check before calling the visit method in TreeVisitor to avoid potential NullPointerExceptions when v is null
add error handling policy to JDTBatchCompiler for no classpath compilation to ensure proper handling of error cases based on the compiler environment
added ` contentAlignmentPoint ` and ` textAnchor ` properties to ` LabelBlock ` and ` LabelBlockTests ` classes to enable customizable text
refactor Class and Parameter classes to improve code readability to enhance maintainability and facilitate future updates
refactor IndexReader class to improve code readability to enhance maintainability and facilitate future updates
changed the type of ` isLoopback ` from ` boolean ` to ` Boolean ` and added null checks for ` networkInterface ` before accessing
added a Locale parameter to the ` fromRfc1123DateString ` method and updated its usage in ` DateUtils ` to support locale -
updated the download method to include an extension " . pdf " extension to ensure that the file is downloaded with the correct file extension
added a new property ` OUTPUT _ NO _ HITS ` to ` AbstractJsonQueryElasticsearch ` and modified the ` handleHits ` method to
removed aggregationRatio parameter from method signatures and methods in QuotaManagerImpl . java to simplify method signatures and improve code readability
refactor switch statements in Election . java for consistency to improve code readability and maintainability
refactor code to simplify event processing logic in ReadFilesP and StreamFilesP classes to improve code readability and maintainability by reducing redundancy
refactor conditional logic in PageChangeListener to simplify widget event handling to improve code readability and maintainability by reducing redundancy
added ` isWriteProtected ( ) ` method to ` Workbook ` , ` HSSFWorkbook ` , and ` HSSFWorkbook ` classes
added error handling for unregistering invalidated sessions in PluginMonitoringFilter to improve robustness by logging exceptions during session registration
refactor CategorizationFragment to improve code readability to enhance maintainability and facilitate future updates
updated the status message from " reachable = false " to " not reachable " in HueLightHandler . java to clarify the status of a bridge
added a boolean field ` loading ` and a method ` isLoading ( ) ` to ` FMLClientHandler ` and created a new ` Game
added " unit . millions " and " unit . thousands " to string and block return values in UI , BlockInventoryFragment , and UI classes to
added handling for BYTES and STRING types in MessagePackParser and created a new BinKeyPojo class to improve handling of string data types and ensure
added tests for handling reserved words as identifiers in HQL and JpqlQueryTransformerTests to ensure correct query parsing for relationships with reserved words as
added unit tests for serialization and deserialization of nested maps in MapTest . java to ensure correct JSON serialization and deserialization of nested maps
added checks for x2 and y2 boundaries in GeometryUtils . java to ensure correct coordinates are added based on offset values
updated SORT _ ORDER _ DIALOG references and introduced SORTING _ ORDER _ FRAGRMENT functionality in FileDisplayActivity and ReceiveExternal
add error handling when the TestPlan is empty in StandardJMeterEngine . java to ensure proper error handling when the TestPlan is not found
updated method names from " dbmsName " , " getSchemaName " , " getTableName " , " schemaName " , " schemaName " ,
added null checks for argument identifiers in the Parser class to ensure proper handling of non - strict identifiers and prevent potential NullPointerExceptions
updated the default protocol setting in JettyHttpComponent9 from " SSL - HTTP / 1.0 " to " SSL - HTTP / 2.0 " to ensure
change the default value of displayVolume from false to true to enable volume display by default
modified the version method to accept a boolean parameter and modified the version message retrieval logic to enhance clarity and functionality of version handling in the JavahTask
refactor conditional checks in ChangeLogParameters . java for better readability to improve code clarity and maintainability
changed log level from warn to debug in JtaTransactionManager . java to reduce log verbosity and reduce verbosity
hhh - 12276 skip test that cause exception in basicformatterimpl in oracle
removed redundant calls to sslSocket . startHandshake ( ) and sslSocket . setSoTimeout ( ) in Connection . java to streamline socket timeout handling
updated size calculations in HomeFragment , DMFragment , ListFragment , MentionsFragment , DMFragment , and MentionsFragment to
changed the default value of OptionKey from false to true in EspressoOptions . java and added a final modifier in DefaultClassHierarchyOracle
added debug logging statements to set and set the thread context class loader in ActiveMQResourceAdapter . java to improve traceability and traceability of the
refactor JodaTimeRangeRandomizersTest to streamline imports and simplify test method signatures to improve code readability and maintainability by eliminating
updated resource URLs in WebDescriptor . java to redirect XML files based on the servlet version to ensure compatibility with newer Servlet versions and improve XML
refactor readiness check logic in BaseOperation . java and add node readiness check in Readiness . java to improve clarity and functionality of the Readiness
rename liveEndpoints to handler . endpoints in StorageProxy . java to improve clarity and consistency in naming conventions
added a null and empty check for creationStatements in IdTableHelper . java to prevent potential NullPointerExceptions when processing creation statements
updated RPC version from 1 to 2 in DataRpcConfig and UserRpcConfig to ensure compatibility with the latest RPC versions
added a null check for the system ' s security manager before accessing package access checks in ObjectStreamClass , ObjectStreamField , and ObjectStreamField classes to
updated methods in Utils , XLCDCommunicator , and XLCDCommunicator to be private and removed unused imports to improve code clarity
updated DefaultMetricsTagProvider to return an unmodifiable map of tags instead of an ImmutableMap to improve code clarity and prevent potential NullPointerExceptions
updated test suite name from ` MockBrowserTest . class ` to ` MockBrowserTest . class ` to ensure consistency in naming conventions
updated the default logging level from OFF to ERROR in the Launcher . java file to correct the logging level from OFF to ERROR
changed private fields to be final in IconNormalizer . java to ensure immutability and improve code clarity
added a new boolean flag ` firstCallPrepareDo ` and updated prefix invocation logic in ` PrepareInterceptor ` and ` PrepareInterceptorTest ` to allow
added a boolean variable ` mHasFocus ` and modified workspace visibility logic in ` Launcher . java ` to improve user experience by ensuring workspace is
replaced ` asEagerSingleton ( ) ` with ` @ Singleton ` in ` AuthWithStoreFeature . java ` and removed ` asEagerSingleton (
added a boolean parameter ` ignoreInvisibleAssociations ` to the ` incomingAssociations ` method and modified the conditional check for association join conditions to
removed the private IP capacity type from the capacityDao method call to simplify the method call and improve code clarity
updated relative URL format in ProfileServlet . java to include additional information to improve user experience by providing a clearer overview of asynchronous profiling functionality
added a new class ` RequiredRefFieldModel ` and modified conditional logic in ` ModelResolver . java ` and created a new test class ` Required
rename ` CasCoreConfiguration ` and related classes to ` CasCoreConfigurationAutoConfiguration ` and ` CasCoreEnvironmentBootstrapConfiguration ` to
refactor FeatureFlags class to improve code readability to enhance maintainability and facilitate future updates
updated uuid generation and unique ID generation in ConfigStore . java and added a new test for large hue IDs in CommonSetup . java to improve
added image caching logic in TimeLineCursorAdapter , TimelineArrayAdapter , and TimelineArrayAdapter to ensure proper handling of bitmap drawables in
updated configuration messages in HiveConf . java to clarify compaction behavior on insert - only tables to improve clarity and maintainability of compaction configurations
added a null check for mWaitingToSend ' s storage path before checking it to prevent potential NullPointerExceptions when accessing storage paths
updated resize threshold checks in VectorMapJoinFastBytesHashMap , VectorMapJoinFastBytesHashSet , and VectorMapJoinFastLongHashTable classes to
refactor LDAP connection handling in LDAPConnectionService . java to improve code readability and maintainability
deprecated the @ XmlAttribute annotation in AggregateDefinition . java to indicate that the attribute is outdated and should no longer be used
removed debug logging statements from TouchInteractionService , RecentsAnimationDeviceState , and TestProtocol classes to streamline debugging output for better readability and
added a condition to check if the class name starts with " com . intellij . rt . junit . " in AbstractSoftAssertions . java to
updated assertions in TestMultiSearcher from hits . length ( ) to hits2 . length ( ) and hits3 . length ( ) to ensure correct
added a new file ` LucenePackage . java ` that implements the ` LucenePackage ` class to facilitate the creation and retrieval of the ` LucenePackage
corrected the calculation of sizeInBytes in RAMDirectory . java to ensure correct addition of sizeInBytes based on the existing value
added evaluator estimate methods in StatsRulesProcFactory , GenericUDAFBloomFilter , and BloomKFilter classes to improve performance by avoiding unnecessary
added a null check for the drawerToggle before executing animations in MainActivity to avoid potential NullPointerExceptions when the drawerToggle is not initialized
added @ SuppressWarnings ( " unused " ) annotation to ` convertToAuthentication ` method in ` DefaultAuthenticationAdapter . java ` to suppress warning about unused
added logic to configure the scanning of system jars and modules based on scanSpec to ensure proper functionality of the scanner based on the scanSpec '
refactor method calls to use BibEntry instead of getLatexFreeField for author retrieval to improve code readability and maintainability by reducing
added a method to cancel core recovery processes in CoreContainer . java to ensure proper cleanup of core states when ZooKeeper - aware
replaced direct calls to ` System . currentTimeMillis ( ) ` with ` currentTimeMillis ( ) ` and added a new method ` currentTimeMillis ( )
removed debug print statements and improved null checks in RepoEditView . java to enhance readability and maintainability of the code
[ hotfix ] [ doc ] fix typo in walsender startup message
added trust resolver , role hierarchy , and permission evaluator to the SecurityEvaluationContextExtension class to enhance security by allowing additional fields to be set to default
added a check to set exponentSize to primeSize - 1 if it is zero to ensure exponentSize is correctly set when it is zero
replaced direct calls to ` getUsableSpace ( ) ` with ` getUsableSpace ( ) ` in multiple classes to improve code
refactor the ` combine ` method in ` DistinctSqlAggregation ` to use ` accumulate ( values ) ` instead of ` delegate . combine (
added a test method to verify post login activities for users on successful authentication to ensure that post login activities execute for a user on successful authentication
refactor ExtractorSpanishStrippedVerb initialization to accept a dictionary path instead of a static instance to improve flexibility by allowing dynamic instantiation of 
refactor CharArraySet to simplify code initialization and improve object containment checks to enhance code readability and maintainability by reducing redundancy
updated error messages in MuxerWrapper . java for clarity and consistency to improve readability and maintainability of track validation logic
updated JsBundleGenrule and JsBundleGenruleGenrule to use AndroidPackageable instead of JsBundleAndroid to ensure compatibility with
set character encoding to " UTF - 8 " in PinotClientRequestServlet and improve string indexing logic in StringDictionary to ensure proper handling of
updated the case string from " Logical Analyzer " to " Logic Analyzer " and replaced multiple existing drawable resources with a new tile _ icon
added a static instance variable ` instanceClassName ` and modified the instantiation logic in ` AbstractVector . java ` to ensure that the instance class is only
removed the call to syncMetaLeader ( ) in CMManager . java to streamline the code by eliminating unnecessary synchronization
update return statements in FeedbackContributionQuestionDetails . java for clarity and consistency to improve readability and maintainability of the code
added TestLoggingExtension import and annotation to DiagramRendererTest . java to enable logging functionality for better debugging
added a parameter ` mapUnderscoreToCamelCase ` to multiple methods in ` FastResultSetHandler ` , ` MetaObject ` , and ` MapWrapper `
added VIOMI _ WATERHEATER _ E1 device to MiIoDevices . java to support the VIOMI Internet Electric
replaced direct calls to ` getSslSessionData ( ) ` with ` SslSessionData ` in ` SecureRequestCustomizer . java ` to improve
add a new file CreateNewSpreadsheet . java for creating a new spreadsheet to facilitate the creation of a new spreadsheet in the XSSFWorkbook
replaced ` ttl ` with ` timeToLive ` in ` CacheProperties ` and updated related methods to use ` timeToLive ` instead of `
updated content URIs in LauncherBackupHelper and LauncherModel to use CONTENT _ URI _ NO _ NOTIFICATION instead of CONTENT _ URI to
updated the wiremock test version from 2.14 . 0 to 2.17 . 2 in SwaggerResolveTest . java to reflect the new wiremock
changed synchronization from ` lucidaFontName ` to ` this ` in ` SunFontManager . java ` to ensure thread safety when accessing
added a condition to check if the character is a '<' in the condition to ensure proper handling of '<' characters in the code
replaced String . format with direct string formatting in Workspace . java to simplify code and improve readability
added import statement for Scope and added a message for no validation errors found in ValidateCommandStep . java to provide user feedback when validation fails
updated IntegrationTestContextLoader to utilize WebMergedContextConfiguration for resource loading to improve resource management and ensure proper handling of web application contexts
updated scroll logic in Component . java and adjusted pointer event handling in Container . java and JavaSEPort . java to improve scroll behavior and ensure proper
updated formatting of conditional statements in RamlType . java to improve code readability and maintain consistency
added a new ` ClientStat ` class and updated ` DefaultStatsService ` and ` StatsService ` to use ` String ` instead of ` Long
updated the formatting of expressions in CellContentConverter . java to improve readability and maintainability of the code
updated regex pattern formatting in SeleneseTestCase . java to improve readability to enhance readability and maintainability of the test output
refactor MondrianProperties class to improve code readability to enhance maintainability and facilitate future updates
added stack trace printing in ProcessTools . java and modified launcher test logic in CustomLauncherTest . java to improve error reporting and ensure proper permission checks
added a test method ` testEmbeddedImage ` in ` TumblrRipperTest ` to verify the behavior of embedded images in the Tumb
added a check to ensure the store type is not already present before converting it to avoid unnecessary conversion when there is no slot for the store type
refactor data specification handling in ContainerMediaChunk , InitializationChunk , and InitializationChunk classes to improve clarity and ensure proper initialization of extractor inputs
updated BaseLockFactoryTestCase to utilize PrintStreamInfoStream for IndexWriterConfig and modified IndexWriter initialization to enhance UTF - 8 encoding handling and improve
added a method to check if the service loader is dynamic in ` ServiceLoader ` and modified ` TikaConfig ` to utilize a new ` Dummy
updated import statements and modified Java file handling in DocLint . java and DocLintTester . java to improve code clarity and ensure proper handling of source
added a new constant ` IMPORT _ CMD ` and updated conditional checks in ` DataImportHandler ` and ` DataImporter ` to support additional
added a new test method ` doesNotModifyInnerClassesIfIgnoreDefinitionTrue ` to ` ChangeTypeTest ` to ensure that ` InnerA `
removed import of android . util . Log from JettyService . java to eliminate unnecessary dependencies and improve code clarity
updated the ` checkItemPlacement ` method to accept an ` ArrayList < Long > workspaceScreens ` parameter and adjusted related logic to improve item placement
simonstewart : add a servlet to kill a switch to kill the jvm .
refactor LLRealtimeSegmentDataManager to use a list of transformed rows instead of a single single record to improve code readability and reduce
added a utility method to check if the operating system is Windows and skip processing for Teredo to ensure compatibility with Teredo in Windows environments
added a check to show an error dialog if the contact is not connected before proceeding to ensure proper error handling when contact is not registered
replaced the registration of USER _ DETAILS SERVICE _ FACTORY with a new BeanComponentDefinition to simplify the registration process and improve code clarity
updated drawBitmap method call to use null parameters instead of left and top parameters to ensure proper rendering behavior for bitmap drawing
updated date parsing from ' ddmmyy ' to ' ddmmyy ' in MeitrackProtocolDecoder and TotemProtocolDecoder to
changed method visibility from public to protected in SunFontManager , X11FontManager , and X11FontManager classes to enhance encapsulation
added @ Deprecated annotations to multiple methods in EnhancedRandom . java to indicate that these methods are outdated and should no longer be used
added executionexception handling for ReachedMaxSizeException in ClientMapStoreTest . java to ensure proper validation of ReachedMaxSizeException in tests
added a boolean flag ` keepEmptySentences ` to control sentence processing behavior to improve flexibility in handling empty sentences in document processing
refactor createArtifactSubdirectory method to return a boolean indicating failure to create subdirectories to improve error handling and provide clearer error messages when sub
removed unnecessary lazy tree loading in ReusableCompiler and updated JavaCompilerService to return NO _ MODULE _ COMPILER to streamline the code
added a null check for the answer variable in DirectAgentAttache . java to ensure that a null answer is returned when the resource is returned
refactored the ` sendEmail ` method to throw a ` MessagingException ` instead of throwing a ` MessagingException ` to simplify error handling and
added a new API package - info . java and modified the handling of null values in PipeItemsObsidian . java to ensure proper API
updated date parsing methods to use Locale . ROOT instead of a hardcoded string to improve flexibility and maintainability of date parsing logic
added a boolean flag ` includeDecals ` and its getter / setter in ` StorageOptions ` and ` StorageOptionChooser ` to control the
updated generateDocumentation method to include a null parameter in Liquibase . java and modified getImplementedDatabases method in LiquibaseTest .
updated HiveProtoLoggingHook to include a queue name and modified perf logging logic to improve performance tracking and enhance test coverage for perf logging
updated log message formatting in SolrIndexConfig and DocExpirationUpdateProcessorFactory to improve clarity and consistency in log messages
updated output string to include MAJOR _ VERSION in ignoreRecordAttribute . java to ensure accurate verification of class file version for better debugging
added a new test class ` LdapPasswordAuthenticationTest ` to validate LDAP authentication functionality to ensure proper functionality and functionality of LDAP authentication functionality
replaced OrcInputFormat with BasicStatsNoJobTask and updated condition in TaskCompiler . java to improve code clarity and maintainability by using a more
fix a npe in the reload manager when a saveall action be call .
refactor VisibleAdvance class to improve code readability to enhance maintainability and facilitate future updates
added a reconnect option to the Reflector class and modified related methods in Reflector . java and DefaultSharedIndexInformerTest . java to ensure proper
added support for dynamic numbers in EdgeDataTable , NodeDataTable , and NodeDataTable classes to ensure compatibility with dynamic data types in Sparklines
refactor RawPom initialization to use ` Objects . requireNonNull ` for null checks to improve code readability and maintainability by reducing redundancy
added null check for apiInfo in V2HttpCall . java to avoid potential NullPointerException when accessing apiInfo
refactor HeadersConfigurer and CacheControlHeadersWriter classes to improve code readability and maintainability
added debug logging and memory management for texture loading and shader loading in PhotoPanel and FlameRenderer classes to improve memory management and prevent memory leaks
fxwindow : add menu item forInsnlist editor ( fixes # 118 )
added a check to ensure the index is within bounds before processing characters to prevent potential index out - of - bounds exceptions when processing characters
added a property to determine if the L & F l & F l & F l & F l & F l & F l & F l
updated SQL query syntax in HostRoleCommandDAO . java for consistency to improve code readability and maintainability
updated test function names from F2 _ TEST to F2 - TOWER TEST and F6 _ TRANSPONDER _ TEST _
refactor swipe handling logic in WindowTransformSwipeHandler . java to improve swipe - up and - to - new - task logic to enhance user experience
replaced ` HostDatabase ` with ` ColorStorage ` in ` ColorsActivity . java ` to utilize ` ColorStorage ` for color storage functionality
refactor String class to improve code readability to enhance maintainability and facilitate future updates
removed unused imports and logger initialization across multiple Java files to improve code clarity and maintainability by eliminating unnecessary dependencies
added a method ` getGlobals ( ) ` to the ` MapGlobalResolver ` class to retrieve global entries from the map to enhance functionality by
added assertions to ` sendcoin ` method calls in ` MultiSign34 . java ` to ensure correct functionality of the ` sendcoin ` method
updated import statements from JUnit to JUnit 5 in CUFilterTest . java to align tests with the latest JUnit 5 features
replaced hardcoded semicolon with system . getProperty ( " path . separator " ) for classpath appending to improve maintainability and readability
removed the static modifier from the augmentSuccessViewModelObjects method in AbstractServiceValidateController . java to simplify method access and improve code readability
added assertions to verify presence of fields in the metamodel in InheritanceTest . java and updated field retrieval in TestUtil . java to improve test
removed the ' conf ' parameter from Outlink instantiations across multiple parser classes to simplify the instantiation process by eliminating unnecessary configuration parameters
removed the LexicalContext parameter from the ` ensureUniqueNamesIn ` and ` copyFinally ` methods to simplify method signatures and improve code read
added imports and modified return statement handling in UseLambdaForFunctionalInterface . java and TypesInUse . java to improve type safety and ensure proper
removed the appendClassSelector method call in TestNGAntTask . java to simplify the code and improve readability
removed redundant check for Aggregate input in HiveCardinalityPreservingJoinOptimization . java to streamline the code by eliminating unnecessary complexity
fix registryevent . getmapping ( ) to use registrymanager . getactive ( ) .
reformatted assignment statements in Intersector . java to improve code readability and maintainability
add default implementations for SBE methods in MessageDecoderFlyweight . java to ensure compatibility with the latest SBE implementations
refactor ElasticsearchContainerTest to use a constant ELASTICSEARCH _ VERSION instead of a hardcoded version to improve code readability and maintain
fix buffer allocation in workingreceiver . parse ( )
added constants for cluster name and version in ClusterDefinition and updated related methods in GSInstallerClusterProvider to improve clarity and maintainability of cluster definition
camel - 10266 : camel - ftp : remove unused setconfiguration ( ) method in camel - ftp
[ zeppelin - 2078 ] add error message when dependency can not be load in zeppelin - interpreter
modified local creation logic in mmm Gen . java and added a new test class NoLocalsMustBeReservedForDCEedVarsTest . java
added a check for ` targetCertConstraints . getBasicConstraints ( ) ` in ` ForwardBuilder . java ` and created a new ` BuildEE
added db initialization logic in JdbcPostgresqlDAO to ensure upserts for values with the same time and value with higher database version to ensure compatibility with
updated SimpleEchoClient and AbstractWebSocketConnection to set maximum message size and added a minimum buffer size requirement to improve WebSocket connection handling and enforce minimum buffer
refactor the handling of ` undeleteAll ` and ` rollbackUndeleteAll ` variables in ` SegmentReader ` , and add a new test
added null check for scopes in ClientRegistration and updated related test cases in ClientRegistrationTests to improve robustness by preventing potential NullPointerExceptions and ensure
added null checks for orderBy before adding it to expression and explanation to avoid potential NullPointerExceptions when orderBy is null
[ hotfix ] [ test ] fix checkstyle violation in clusterentrypointtest
server : do n ' t create vm snapshot if vm be back - up and not back - up
added a debug log message to log initialization in HiveServer2 . java to improve logging clarity and provide clearer debugging information
added a check for non - empty tasks before executing AssetLoadingTask to avoid potential null pointer exceptions when there are no tasks available
change the return type of deleteNode method from void to boolean in PubSubManager and OpenPgpPubSubUtil classes to allow the deleteNode method
refactored RelationCompositeKey , TsKvLatestEntity , JpaRelationDao , JpaEventDao , and JpaRelationDao
added checks for empty resultString in Code128Reader , Code39Reader , and FalsePositivesBlackBoxTestCase to ensure proper handling of empty barcode
changed the order of cipher suites from TreeSet to LinkedHashSet in SSLContextImpl . java and SystemPropCipherSuitesOrder . java to ensure consistent
added a new method ` isControlCharacter ` to handle control characters in ` Escaper . java ` and updated the expected string in ` Internationalization
added a check for CharSequence and modified the method invocation logic in ProviderSqlSource . java and SqlProviderTest . java to return a StringBuilder instead of
updated import statements and added null checks for aliasChildren in InternalMNode . java to improve robustness and prevent potential NullPointerExceptions
added a method ` getLayoutTransitionOffsetForPage ` in ` PagedView ` to calculate the vertical transition offset based on page scroll position
replaced ` synthetic ` with ` pruned ` in ` JavaTemplate . java ` and added auto - format support in ` JavaTemplate . java `
added setAccessible ( true ) method to WidgetInterceptor class to ensure proper access to the method in the WidgetInterceptor class
added a check for the " database . server . id " field before setting the literal initializer and setting it in ConnectorConfigGenerator . java to ensure
updated the browser version from Firefox / 36 . 0 to AppleWebKit / 537 . 36 in AbstractRipper . java to ensure compatibility
added a web interface menu item to browse the server ' s URL to enhance user experience by providing access to the server ' s web interface
refactor value initialization and statement handling in HandleGetter . java to improve clarity and maintainability of the code
added a try - catch block around the record building in EncryptedSlideShow . java to handle potential ArrayIndexOutOfBoundsException to improve robustness by preventing
[ hotfix ] [ checkpointing ] improve log message in filecheckpointio and queue
added a call to ` loadBattlePassManager ( ) ` in ` Player . java ` to avoid null pointer exceptions to ensure proper handling of
updated Docker image version from 1.1 . 0 to 1.1 . 0 and added additional options for agent and tcp forwarding in PortForwardingContainer . java
added a bigObject array and forced an initial full - gc call in ThresholdTest . java to ensure proper garbage collection by forcing an initial full
added checks for log name before checking and setting logger level in StdErrLog . java and updated test cases in StdErrLogTest . java to
added a method ` getRemoteSerivce ` to ` Redisson ` , ` RedissonClient ` , and ` RedissonRemoteService `
added methods to manage the selection state of buttons and checkboxes in MultiButton . java to enhance user experience by allowing selection control based on selected state
renamed UpNextActivity to NextUpActivity in CustomPlaybackOverlayFragment . java to clarify the purpose of the next up activity in the playback overlay
reformatted conditional statements in BrokerController . java for consistency to improve code readability and maintainability
refactor RedisReactiveHealthIndicator to use ReactiveRedisConnection for server command retrieval to ensure proper resource management and prevent potential memory leaks
refactor getThemeColor method to accept a resourceId parameter in ProgramGridCell . java and Utils . java to streamline theme color retrieval and improve
rename ` participantTransportAddressChanged ` method to ` peerTransportAddressChanged ` across multiple classes to improve clarity and consistency in naming conventions
removed multiple duplicate type adapter registrations in ToolingApiLauncher . java to streamline code and improve maintainability
updated the value of the parameter in TestPayloadCheckQuery . java from 55 to 55 to ensure consistency in variable naming conventions
refactor ConsoleReader to simplify character handling and add a new test for reading lines with a mask to improve code clarity and ensure correct handling of character
added user information and logging for exit status cancellation in BaseCommand . java to improve user information for better debugging and debugging
rename the test package from ` org . graalvm . compiler . test ` to ` org . graalvm . compiler . api
[ hotfix ] [ runtime ] remove unused slotsharinggroup constructor
updated StreamExInternals to conditionally initialize ` Java9Specific ` based on the " one . util . streamex . emulateJava8 "
updated texture files in DecalTest , MusicTest , and SimpleDecalTest to use " sys . png " instead of " wheel . png
refactored registration and unregistering of mCloseSystemDialogsReceiver in Launcher . java to improve code readability and maintainability
updated import statement for Cluster in HostsRemovedEvent . java to ensure consistency in import statements
added support for allowing introspection in ClientDetailsEntity and updated related classes to enhance token management capabilities and improve code clarity
replaced direct calls to ` write ( remoteUser ) ` with ` writer . write ( htmlEncode ( text ) ) ` in ` HtmlSessionInformation
updated link tags in Query . java to include PhrasePrefixQuery and SpanQuery in addition to PhraseQuery and SpanQuery classes to enhance query
replace ` size ( ) = = 0 ` with ` isEmpty ( ) ` in ` CommentsInserter ` and ` CommentsParser ` to
refactor type checking logic in NoValueOfOnStringType . java to improve clarity and maintainability of the code
updated method signatures in AbstractAssert , Assert , and DateAssert classes to use Object instead of A to improve type safety and clarity in method signatures
updated imports from ` jwt . lambda ` to ` jwt . exception ` and modified the ` ThrowingFunction ` interface to use generics to
added ` getUploaderBehaviour ` and ` setUploaderBehaviour ` methods to ` AppPreferences ` , ` PreferenceManager ` , and ` UploadFiles
fix ( prettyprinter ) : fix nullpointerexception in defaultjavaprettyprinter
updated BitmapDrawable initialization to use Robolectric ' s newInstanceOf method to ensure compatibility with Robolectric ' s Bitmap class instantiation
renamed the method ` isValidSEnding ` to ` isValidEnEnding ` and added a new char variable ` c ` to improve clarity and
updated PageMarkerResources from ` drawable . ic _ pageindicator _ add ` to ` drawable . ic _ pageindicator _ current ` to align page
added a volatile counter to track the number of reinvocations in BasicInvocation . java to track the number of reinvocations and track the number
replaced calls to ` getHeight ( ) ` with ` getInnerHeight ( ) ` in ` DefaultLookAndFeel . java ` to ensure proper calculation of the
added a break statement in the Recognize . java file to ensure proper handling of loop termination
added support for locking the home screen in Workspace , FolderNameEditText , and PopupContainerWithArrow to enhance user experience by allowing users to
added conditional logic to handle different cell types in ExcelBatchReader . java and created a new test for TextFormula in TestExcelFormat . java to
pmd : add a test to verify that assignment in anonymous inner class method be ok
added a new field ` userAgent ` to ` CommaFeedConfiguration ` and modified ` HttpGetter ` to retrieve the user agent from application settings to
added a required attribute to the ` @ XmlAttribute ` annotation in ` AvroDataFormat ` and updated ` BarcodeDataFormat ` classes to
change log level from info to debug for file not found message to reduce log verbosity when a file is not found
rename the test class from QueueTest to QueuedPipeTest to improve clarity and consistency in naming conventions
updated version check logic in BukkitMain . java to use getUniqueID method to ensure compatibility with the latest Bukkit version and improve code clarity
refactor DefaultRoutesCollector to handle both empty and false include patterns more robustly to improve error handling and streamline route detection logic
added a ` vertexColor ` method to ` PShape3D ` to allow customization of vertex color settings in the ` PShape3D
added a new parameter ` isPkColumnFiltered ` and updated foreign key handling in ` SchemaDotFormatter ` and ` DiagramRendererOptionsTest `
replaced Shadow . extract ( matrix ) with matrix . getValues ( m ) in ShadowMotionEvent . java to simplify the code and improve readability
updated package declaration from ` com . facebook . buck . parser . api ` to ` com . facebook . buck . parser ` in multiple files to
refactor class handling logic in GroovyEngine . java to simplify code and improve readability by reducing redundancy
added a new ` PluginContextListener ` class and updated package structure in ` BrandingServlet . java ` and created a new ` PluginContextListener
removed unnecessary print statements from NativeCodeGenerator . java to streamline output for better readability
replace updateMotors ( ) and updateActiveInstances ( ) with fireChangeEvent ( ) in FlightConfiguration . java to improve code clarity and ensure proper
added unit tests for Assertions and ExpectedException in ThrowableAssert _ hasCause _ Test . java to ensure correct behavior of assertions with different exception types
removed unused variable ` flattenName ` and ` packName ` from ` AutomaticDependencies . java ` to streamline code by eliminating redundancy
rename ` requestedScopes ` to ` allowedScopes ` in ` ClientDynamicRegistrationEndpoint . java ` to improve clarity and consistency in variable naming
add unit tests for setting profile in Firefox options and caps in MarionetteTest . java to ensure that the Firefox driver correctly sets the profile
added a method to retrieve the route description and updated related classes to utilize it to improve clarity and functionality of route description management
refactor JavacTreeMaker to improve code structure to enhance maintainability and readability of the code
added a call to set the edge weight in ImporterCSV . java to ensure the edge weight is correctly set during importing
updated QuotaManagerImpl to use ` hoursInCurrentMonth ` instead of ` s _ hoursInMonth ` and added a new method ` get
updated SQL queries to include additional data from pg _ attrdef and adjusted column default values in DatabaseMetaData . java to improve data retrieval accuracy and ensure
added a null check for binarized sentences in SentimentAnnotator . java to ensure that binarized sentences are not built by
updated User class to return a string representation of the user ' s toString ( ) method to enhance readability and maintainability of the user object
replaced the method to extract the body string from a message object with a null check for the message body to improve robustness by preventing potential NullPointerException
[ hotfix ] [ runtime ] rename taskdeploymentdescriptorfactory . fromexecutionvertex to execution
refactor methods in RosterAccess and GroupManager to use the owner parameter instead of the subJID to improve code clarity and maintainability by
added a classpath reference to the Maven test classpath in AbstractJRubyMojo . java and removed unnecessary suppress warnings in CucumberMojo . java to
refactor MethodHandle handling in MethodHandleImpl and add a new user method test in MethodHandlesTest to improve code clarity and ensure correct method signature validation
added imports for StopFilterFactory , AnalysisSPILoader , and NamedSPILoader in CommonGramsQueryFilterFactory , AnalysisSPILoader , and
updated width and height comparisons from ` > ` to ` ! = ` in ` URLImage . java ` to ensure image dimensions do not exceed
added a condition to check if the name does not end with " META - INF / " before processing class names to ensure proper handling of class
added ` final ` parameters to ` createImageToFileSystem ` , ` createImageToStorage ` , and ` createImageToStorage ` methods to
updated assertions in StackWalkerTest to use expected number instead of 3 for improved clarity to ensure the correct number of values are logged based on version and
changed the access modifier of the addViewportJob method from protected to public to allow access to the method from other classes
removed the ` partitions ` parameter from the ` buildFlow ` method and its usage across multiple files to simplify the method signatures and eliminate unnecessary complexity
updated server startup settings and server exit logic in TestDatabase . java to ensure proper server exiting behavior during tests
added null and empty checks for block and block in NodePathsConvertOperator and SchemaQueryMergeOperator to improve robustness by preventing potential NullPointerExceptions
added total harvesting time retrieval in CallInfoFrame . java and updated transport manager methods in TransportManagerGTalkImpl . java to improve clarity and
updated font drawing parameters in ParticleEditor . java from 10 , 10 , 30 , and 25 to 5 in ParticleEditor . java to improve
added support for updating the " hadoop - env " configuration in UpgradeCatalog240 . java and modified test cases in UpgradeCatalog240
added a transparent background color to the SvgViewerFactory to improve the visual appearance of the SVG viewer
removed minSdk = M from ShadowKeyguardManagerTest and ShadowKeyguardManager to streamline the code and eliminate unnecessary dependencies
updated the ` containsExactly ` method to accept a ` varargs ` parameter and added a new test for the ` containsExactly ` method
updated Bucket4jFilterFunctions to use Bandwidth . builder ( ) . capacity ( ) and refillGreedy ( ) method to
added descriptions to GermanAnalyzer , GermanStemmer , and WordlistLoader classes to improve clarity and functionality of the German language analyzer
added a Generator constructor to handle post - execution hooks in QueryProperties , Optimizer , SemanticAnalyzer , and QueryProperties classes to ensure proper execution of
added exception handling for NoClassDefFoundError in REngine . java to ensure proper handling of cases where no class is available
refactor TraceWebFilter to use SpanAndScope instead of Span . class for better span management to improve code clarity and maintainability by centralizing
added a null check for the cause before setting the exception message to avoid potential NullPointerException when the getCause ( ) is not available
updated SolrServerException instantiation to include getBaseURL ( ) as a parameter to improve error handling by providing context for the exception
updated print setup logic to use ! ls instead of ls in HSSFPrintSetup . java to ensure correct rendering behavior for print setup
updated the return statement to handle null values in JavaVoidObjectInspector to improve robustness by preventing potential NullPointerExceptions
added a check to throw an exception for invalid argument names to ensure that invalid argument names throw an appropriate exception
added a static variable ` inMemoryBackgroundLocationLocationListener ` and modified location request and removal logic in ` AndroidLocationPlayServiceManager ` to improve
changed the condition for primitiveType from ` ! = ` to ` = = ` in ` MeshBuilder . java ` to ensure proper comparison of primitive
trufflestring : do n ' t use length ( ) and length ( ) .
added a method to set the command list property in ComboBox to ensure the correct command list is displayed based on the current state
nifi - 164 : use tlshelper . escapefilename to escape filenames in tlsclientmanager
updated command line arguments in ZkCLI . java for better clarity and consistency to improve code readability and maintainability by using a more descript
updated comparisons in ` FirmwareUpdateProgressInfo ` , ` BridgeHandler ` , and ` WemoLightHandler ` to use ` equals `
added a conditional check for remoteGrpcStatus before posting console event post to ensure the event is only posted when the remote build status is OK
refactor method signatures in XYItemRenderer and related classes to improve code readability and maintainability
fix entity id not be add to chunk when chunk be create
added a method ` getErrorString ( int error ) ` to return a string representation of the specified error code to improve error handling and provide clearer
added a method to retrieve supported locales and updated InfoRequestHandler to use this method to improve locale handling and provide clearer error messages for unsupported locales
updated server URI handling in RFC2616BaseTest to use HTTPS instead of ASCII string to ensure compatibility with the updated server URI format
added a call to addToHelperList ( ce ) in Construction . java to enhance the functionality of the Construction class
added a condition to skip the first two escape sequences in GlyphLayout . java to ensure proper handling of special characters in the layout
added security permissions and modified context class loader handling in Transport , TCPTransport , and TCPTransport classes to enhance security by ensuring proper context class loader management
refactor directory handling in ReceiveExternalFilesActivity to handle null folder and folder conditions to improve robustness and prevent potential NullPointerExceptions when accessing
added a null check before loading the service loader in TestNG . java to avoid potential NullPointerException when m _ serviceLoaderClassLoader is null
removed debug logging in BarrowmanCalculator and updated deltap calculation in TubeCalc to streamline code and improve readability
added a check for an instance of Node and updated column assignment logic in TimelineControllerImpl . java to ensure proper handling of instances of Node and
added a method ` registerExtraComponents ` to ` BaseBrokerStarter ` to register extra components for the BrokerAdminApiApplication to ensure proper
added a new test method ` testBug4658 ` in ` MultiCfQueryExecIT . java ` to verify the functionality of query execution
replace ArrayList with LinkedList for candidate lists in PeerGroup . java and update peer version checks in PeerGroupTest . java to improve clarity and maintainability
fix a bug where the builder do n ' t re - load if the builder do n ' t re - load .
[ hotfix ] [ ratis ] remove unused confignodesimpleconsensussnapshottriggerthreshold
refactor multiple Java classes to improve code readability and maintainability to enhance maintainability and clarity of the codebase
added a null check before unregistering and registering JMXHelper in DefaultRemoteProxy . java to ensure JMXHelper is only unregistered when
tika - 164 : fix packageparser to detect non - unicode entry name .
added a new Java file ` TestSplitThruPhiDivMod . java ` containing methods for modular and multiplication operations to facilitate testing of
added methods to lookup generic interfaces and superclass types in TemplateRegistry and updated method signatures in TemplateRegistry to improve type handling and ensure proper registration of generic
updated the byte array size from 512 to 1028 in ByteArrayOutputStream . java to adjust the output stream ' s size for better data handling
updated language exclusions in PlayerSettingsScreen . java to include TODO messages regarding non - available Chinese , Indian , and Farsi symbols to improve clarity
refactor byte allocation logic in TransferCompletionHandler . java to adjust the size of the bytes sent to ensure that the transfer adapter correctly handles large data
removed redundant calls to ` addWindowFocusListener ` and ` windowGainedFocus ` in ` SelectAvatarMenu ` , ` SIPCommPopupMenu ` ,
updated semantic exception handling to check for null source before retrieving the source to improve robustness by preventing potential NullPointerExceptions
added scaling functionality to the AABB creation in SkeletonRenderer . java to improve the visual representation of the aabb in the skeleton rendering
added a method to retrieve the Solr home path in DistributedClusteringComponentTest and BaseDistributedSearchTestCase to provide access to the Solr home directory
added ComponentScan annotation to SpringWebConfig . java to enable component scanning functionality in Spring Web configuration
removed the getAccount method from UserListItem . java to streamline the code by eliminating unused method
added unit tests for ` installPackage ` functionality in ` ShadowPackageManager ` and updated ` ShadowApplicationPackageManager ` to handle null package names to ensure correct
refactor AvailableSettings class to improve code readability to enhance maintainability and facilitate future updates
added TransactionCapsule fields and methods to initialize and execute TransactionTrace objects to enhance transaction tracking capabilities in the TransactionTrace class
added a new property ` PROP _ SHUFFLE _ MEMBER _ LIST ` and ` PROP _ SHUFFLE _ INITIAL _
replaced Text with CrawlDatum in SegmentReader . java to ensure proper handling of crawl data types
refactor JsonDeserializer class to improve code readability to enhance maintainability and facilitate future updates
refactor fetch size handling in TsfileDBConfig , QueryProcessExecutor , and QueryDataSetIterator to use a ThreadLocal to improve thread safety and
updated the message from " trunk ( ) " to " trunc ( ) " in GenericUDFTrunc . java to clarify the purpose of the
removed unused import of ExecutionContext from TaskletStep . java to clean up the code and improve readability
initialize the title variable to an empty string to ensure title is always set to an empty string to prevent potential NullPointerExceptions
added a static final ResponseBody to the AsyncHttpClientCall class and a corresponding test in AsyncHttpClientCallTest to ensure that the response ' s body
added a new file ` EmbeddedServerInstance . java ` that extends ` io . micronaut . discovery . EmbeddedServerInstance ` to indicate that
replaced MacAdapter instantiation with a method call to register MacEvents in JabRefFrame . java to improve error handling and provide a clearer method
rename ` SecurityTokenServiceAuthenticationMetaDataPopulatorTests ` to ` SecurityTokenServiceTokenFetcherTests ` and update related references to improve clarity and consistency in
added a return statement to the ` toEnum ` method in ` HandlerLibrary . java ` to ensure proper handling of enum conversions
changed the visibility of hideUnprivilegedObjects from private to final in PgConnection . java to ensure immutability and prevent potential
updated logging level from info to fine in ThreadedAcousticScorer . java and modified AudioDataSourcesTest to use ConfigurationManager to
added a check to save Giphy video URL on Android Q to ensure compatibility with Android Q and improve video saving functionality
add deserializedObject to variable in servicetaskvariablestest
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
refactor logging logic in MavenLoggerFactory to use computeIfAbsent method to improve code readability and maintainability by reducing redundancy
hbase - 24348 remove unused outputstream ( # 242 )
updated the configuration for the " hive . stats . column . autogather " configuration in TestAcidOnTez . java to ensure
changed log level from info to debug in MavenEnhancePlugin . java to reduce log verbosity for enhanced class processing
added a static method ` getDefaultProviderName ( ) ` to return " Conscrypt " across multiple classes to provide a default provider name based on
added Captor annotation processing in MockitoBeforeTestNGMethod . java to enhance the handling of Captor instances in Mockito tests
added error handling for non - existent test cases in TestSuiteBuilder . java to provide clearer feedback to users when test cases are not found
added imports and modified method signatures in GroovyAutoComplete and GroovyLanguage classes to improve code clarity and ensure proper handling of empty prefixes
updated the import statement for GraphHopper to use GraphHopperOSM instead of GraphHopper to ensure compatibility with the new OSM library
simonstewart : add retry option to the client to make it easy to configure the client .
removed the ' final ' modifier from the ` mHideSysUiScrim ` field and updated its initialization logic to allow dynamic visibility of the `
added cancellation logic and improved error handling in OkHttpCall . java and OkHttpCall . java to enhance call cancellation management and ensure proper cancellation behavior
refactor swipe handling logic in WindowTransformSwipeHandler . java to improve swipe - up and - to - new - task logic to enhance user experience
updated RequestMatcher interface to extend org . springframework . security . web . util . matcher . RequestMatcher to ensure compatibility with Spring Security ' s
added conditional statements to the DeferredAttr class and created a new abstract class ImplicitLambdaConsideredForApplicabilityTest with abstract methods to
refactor test methods in Main . java to replace boxed and devirtualized types with boxing constructors and value of to improve clarity and
added unit tests for ` applyQualifiers ` and ` setDimensions ` methods in ` DeviceConfigTest ` and ` DeviceConfig ` to ensure proper
updated exception types from IOException and RuntimeException to RuntimeException and modified timestamp handling in ExternalViewReaderTest , PinotDataTypeTest , and PluginClassLoader
updated the icon column from ` drawable . logo ` to ` drawable . mipmap . ic _ launcher ` in ` RootCursor . java `
added content text to error builder in FileUploader . java to improve error handling by providing clear error messages
refactor ConcurrentHashMap class to improve concurrency handling to enhance performance and maintainability of concurrent operations
added methods to adapt user trades using Abucoins fills in AbucoinsAdapters , UserTradeService , and AbucoinsTrade
refactor plot claim logic in PlotSquared . java and add new case statements in SetBlockFast _ 1 _ 8 . java to improve code clarity
simonstewart : add support for proxy for htmlunit driver . fix issue # 172 .
added support for VARBINARY data type in BlobType . java to ensure correct data type handling for VARBINARY types
refactor cookie version handling logic in SetCookieSupport . java to improve code readability and maintainability
added synchronization to the language object to ensure thread safety when accessing the language object
replaced ` Vertx ` with ` ContextInternal ` and updated context handling methods to use ` ContextInternal ` and ` VertxThread ` to improve
updated LDAP timeout handling in Connection . java and added a new test method in LdapTimeoutTest . java to improve test reliability and ensure correct timeout behavior
updated usage message in CharacterName . java from " UniocdeData . txt " to " UnicodeData . txt " to align usage with the
camel - 18263 : camel - cxf - add inout header to test
refactor multiple UI - related classes to improve code organization to enhance maintainability and readability of the UI components
added support for BoosterSet in ComponentAssemblySaver and updated return statement in BoosterSet to ensure proper handling of booster sets and improve
added proxy authentication functionality to the JabRef class to enable secure proxy connections based on the requested host and port
updated metrics methods to use ` blockchain . forkCount ` instead of ` BLOCKCHAIN __ FORK _ COUNT ` across multiple files to
replaced InternalError with return false in Class . java to simplify error handling and improve code clarity
removed unnecessary imports and simplified log message formatting in TestIPCUtil . java to improve code clarity and maintainability by using a static final log
removed chunked transfer handling from NettyRoutingFilter . java to simplify the code and improve readability
added a call to clearAttributes ( ) in PatternTokenizer . java to ensure proper clearing of attributes in the tokenizer
added a polling period parameter to the VerificationAfterDelayImpl class and refactored verification handling in After to improve verification logic and enhance error handling
added a configuration value for SQL authorization manager and modified conditional checks in SemanticAnalyzer , SemanticAnalyzer , and QueryCompactor classes to ensure proper compaction
refactor Docker interpreter file handling in DockerInterpreterProcess . java to utilize a list of JAR files instead of individual interpreter files to improve code
hbase - 24254 fix typo in hbaseadmin . gettableregions ( ) ( # 245 )
added an @ Ignore annotation to the PartialEscapeAnalysisTest class to temporarily disable the test due to potential issues
removed redundant method ` calcXBounds ` from ` BarLineChartBase ` , ` CombinedChartRenderer ` , and modified ` Renderer ` methods to
refactor XML parsing to ensure proper resource management and error handling to improve resource management and prevent potential memory leaks
added a call to release the headerBuffer in HttpSenderOverHTTP to ensure proper resource management and prevent potential memory leaks
added a new test class ` UseDiamondOperatorWithVarTest ` and modified ` Java17TypeSignatureBuilderTest ` to include a test
added null check before closing the result set in JdbcExecutor to avoid potential NullPointerExceptions when the result set is closed
updated driver version from - 1 to 10 and driverVersionMinor from - 1 to 10 to ensure compatibility with newer driver versions
added a new test descriptor for handling empty literals in UseStringBufferLengthTest . java and modified the return condition in UseStringBufferLength .
[ hotfix ] [ runtime ] remove log . error call from sparkjobmonitor
updated the connection creation method to return a Connection object instead of void to ensure proper resource management and prevent potential memory leaks
rename ` CreateCustomMetric ` , ` CreateCustomMetricTest ` , ` ListResources ` , and ` ListResourcesTest ` classes to improve clarity
hbase - 13232 add off - peak compaction option to enable off - peak compaction .
updated BitstampDepositAddress to handle the presence of a " address " node and added JSON tests for deposit address unmarshalling to ensure correct handling of
replaced ` throw new IllegalStateException ` with ` response . abort ( new IllegalArgumentException ( " Buffering capacity exceeded " ) ) ` in ` Buffer
updated the method call to use ` toAbsolutePath ( ) ` instead of ` toAbsolutePath ( ) ` in ` ProjectView . java ` to ensure
updated ` InvocationFinishedEvent ` to implement ` MetricsEvent ` instead of ` Event ` and refactored related methods in ` DefaultMetricsRegistry `
modified the loop structure in OptionsTest . java to check for multicast support before returning a NetworkInterface to ensure that only supported network interfaces are returned when
removed redundant check for " 1 : any " in the ChangeSet class to streamline the code for better readability and maintainability
added a clone method to the BufferedChecksumIndexInput class to implement cloning functionality for IndexInput instances
updated sqrt checks in Circle . java to use radius * radius instead of x * y * y to improve accuracy of Circle calculations
added a check to ensure the frequency band identifier matches the downlink band identifier before setting the frequency band to avoid potential errors when the frequency band is
replaced ` tapSquareSize ` and ` inTapSquare ` with ` tapRectangleWidth ` , ` tapRectangleHeight ` , and ` inTap
changed DEFAULT _ REPLICATE _ ON _ WRITE from true to false to disable replication on write operations
added a query parameter ` lastFillTime ` to the ` CryptoFacilitiesAuthenticated ` and modified ` Util ` to include a ` last
added getDelegate ( ) methods to TraceCallable , TraceRunnable , and TraceRunnable classes , along with corresponding tests in TraceCallableTests , TraceRunnable
refactor error handling and message retrieval in FileActivity and FileDisplayActivity to improve clarity and functionality to enhance user experience by providing more informative feedback
updated import statements and added stream _ writable method in ForeignIncubatorQuicheConnection and JnaQuicheConnection classes to improve
added a boolean parameter to the method call in JavascriptContext . java to allow dynamic configuration of the method for improved functionality
removed unnecessary Align . left parameters from TableCell constructor calls to simplify code and improve readability by eliminating unnecessary parameters
added a new file ` TracingAutoConfiguration . java ` for auto - configuration of tracing configuration to enable dynamic tracing capabilities in the UAA application
added a Para element to the start of the second paragraph in Submissions . java to enhance the visual representation of the second paragraph in the submission
updated the ` getPrunedQueryableSegments ` method to include a list of queryable segments and adjusted segment retrieval logic to improve segment management and ensure
refactor VertxBufferTest . java for improved readability to enhance maintainability and facilitate future updates
refactor date extraction logic in MessageSubmissionChunk . java and add new test cases in AllHSMFTests . java to improve code clarity and ensure
changed the access modifier of the mContext variable from private to protected to allow subclasses to access the mContext variable
removed unused imports from ShowTablesOperation . java and ShowViewsOperation . java to streamline code by eliminating unnecessary dependencies
added a new class ` MongoDataIntegrityViolationException ` and updated ` MongoTemplate ` to include ` WriteResult ` and ` ActionOperation ` to
updated the return statement in JobCoordinationService to return the job completion future to ensure the method returns the job completion future correctly
replaced bitsToHumanReadable method with bytesToHumanReadable method and updated MIME type mapping in DisplayUtils . java to improve clarity and maintainability of
replaced direct instantiation of ` newTieredMergePolicy ( ) ` with a direct call to ` newTieredMergePolicy ( ) ` to simplify
added a conditional check to return early if overview state is disabled to improve performance by avoiding unnecessary processing when overview state is disabled
updated error message in CpuNDArrayFactory . java to include a link to the documentation regarding CPU support issues
modified the ` loadSettingModels ` method to accept an ` InputStream ` parameter for better input handling to allow for more flexible input handling for setting models
added null checks for incoming fields , DocsEnum , and TermsEnum in FilterLeafReader . java to ensure robustness by preventing NullPointerException
added secret key size handling in JceCRMFEncryptorBuilder and implemented key size verification in AllTests to enhance security by ensuring correct key size
updated IOException handling to use ` e . getMessage ( ) ` instead of ` e . getMessage ( ) ` in ` NetSocketReader . java `
removed unused imports and annotations from multiple Java files to streamline the codebase by eliminating unused dependencies
updated ` size ( ) ` from 9 to 10 in ` BundledDistributionTest ` and added new assertions in ` PostgreSQLTest `
[ flink - 20535 ] [ config ] add pipeline . name option to streamexecutionenvironment to allow user - defined job name
updated scale calculation logic in OverviewState . java to handle both two - panel devices to ensure accurate scaling based on the device profile ' s device
updated IcePlainsBiome to extend SnowyBiome and added populators for tallGrass and snowy trees to enhance the biome ' s functionality
removed unnecessary DateTimeZone parameter from the getMinTime methods in StorageUtils to simplify method signatures and improve code readability
added a boolean parameter ` isQualified ` to the ` ThisReference ` class and its getter and setter methods to control the visibility of the ` This
updated regex pattern in XhamsterRipper . java to use \ \ . xhamster instead of wmde .
refactor the loop structure in GlowWorld . java to use an ArrayList to improve readability and maintainability of the code
added a check to ensure the schema is not null before retrieving the table name to avoid potential NullPointerExceptions when the schema is not provided
corrected the spelling of " part " in the condition check in FlutterConsoleFilter . java to improve code readability and maintain consistency
added a new variable ` numberOfAllFiles ` and updated related methods in ` FileMenuFilter ` , ` FileListListAdapter ` , and `
[ java ] fix termoffset calculation for network publication .
refactor GuildUpdateOwnerEvent class implementation to improve code readability and maintainability
modify the logic for incrementing inPortalTicks in Player and Entity classes to ensure proper initialization of inPortalTicks based on creative status
updated chart pane spacing and improved node compression logic in ClusterMonitorTileSkin . java to enhance visual consistency and maintainability of the chart rendering logic
rename ResponseTemplate , TransactionalListCodecTemplate , TransactionalMapCodecTemplate , TransactionalQueueCodecTemplate , and TransactionalSetCodecTemplate files to improve clarity and
updated the calculation of lengthDataBits to use long instead of int in Base64 . java to ensure proper handling of large integer values and prevent potential
removed unnecessary null check for header in RendererConfiguration . java to simplify the code and improve readability
cloudstack - 5292 : do n ' t force scaling of disk / memory of vm with custom service offering
updated import statements in HitbtcAdapters . java and changed Order . Builder to LimitOrder . Builder in HitbtcAdapters . java
corrected the spelling of " idleCount " to " consecutiveIdleCount " in LLRealtimeSegmentDataManager . java to improve code
updated the configuration service category from " JRuby " to " JRubyScripting " in JRubyScriptEngineFactory . java to reflect the correct
replaced the variable ` name ` with ` displayName ` for clarity to improve code readability and maintainability by using a more descriptive variable name
modified the condition in ParticipateAssetIssueActuator to include an additional check for exchangeAmount to ensure proper handling of negative exchange amounts
removed unnecessary loop condition in FeedUtils . java to streamline code by eliminating unnecessary loops
added a new test method ` testHDF4 ` in ` HDFParserTest . java ` to validate the functionality of the HDF parser
added a constant for CASLCITE _ 6092 _ FIXED and modified sqlOperatorTest to check for invalid TIME values to improve test reliability by
removed unnecessary whitespace in IDEEditor . java to improve code readability and maintain consistency
added a new method ` quietCloseAll ` to handle multiple AutoCloseable instances to improve resource management by allowing users to close multiple AutoCloseable
updated confirmation strings for file removal from ` confirmation _ remove remote ` and ` confirmation _ remove _ local ` to ` confirmation _ common _ yes `
added a check for non - zero dimensions before calling drawImage in Pixmap . java to ensure images are only rendered if they are non - zero
replaced ` ReflectionHelpers ` with ` Unsafe . class . getMethod ` and refactored exception handling in ` UnsafeAccess . java ` to
updated the regex pattern for matching IPv4 addresses in GUIUtil . java and added tests in GUIUtilTest . java to ensure correct validation of IPv
refactor conflict handling in CachedRowSetWriter to use long instead of boolean to improve performance and readability of conflict management logic
update version handling in SdkConfigurationNotificationProvider and FlutterSdkUtil to use constant values instead of hardcoded values to improve code clarity and
added a conditional check for the reference variable in the ReferenceMemory class to ensure that references are only assigned when they are the same instance
added handling for non - file seed URL files and improved error logging to enhance input processing and provide clearer error messages for missing seed files
added a condition to check if the original view is hidden before setting the visibility of the original view to ensure that the original view is only visible when
updated the calculation of maxNodes and adjusted the condition for maxTrips in DefaultLoopPolicies . java to ensure correct handling of maximum nodes and improve
added logging for unsupported texture coordinates in CombinedTexture and refactored texture data initialization in UVCoordinatesGenerator to improve error handling and provide clearer
added error handling in ` EncodeActivity . java ` and improved validation in ` SupplementalInfoRetriever . java ` to ensure proper file deletion and
added seek and close methods to TracingConsumer , TracingProducer , and TracingProducer classes to enhance tracing functionality for better resource management
updated the substring logic in HandleDAOImpl . java to adjust the length of oldPrefix to ensure correct retrieval of the prefix string based on its length
replaced ` convertedValsList . addAll ` with ` convertedValsList . append ( collection ) ` in ` JSONSerializer . java ` to
added a deprecated constructor to the AbstractTimer class to indicate that the constructor is outdated and should no longer be used
added a nightly warning dialog for Universal Gcode Sender version to inform users about potential issues related to nightly builds
added a condition to return a user - nobody text if the team name is null or the email equals GENERAL _ QUESTION and modified the
updated the return message in UnnecessaryThrows . java to clarify the purpose of the return statement
replaced the CacheApplication class with CacheData in CommonsApplication and ShareActivity to streamline cache management and improve code clarity
replaced instances of ` realObject . getApplicationContext ( ) ` with ` RuntimeEnvironment . application ` in ` ShadowContextImpl . java . vm `
refactor StatisticsServlet class to improve code readability to enhance maintainability and facilitate future updates
added a conditional check for SDK version before updating configuration in RuntimeEnvironment . java to ensure configuration updates are only applied for compatible Android versions
added functionality to check if the ` VERSION _ DEF _ STACK _ REPO ` update link exists in ` VersionDefinitionResourceProvider ` to
refactor ApplicationImpl , NodeImpl , and Witness classes to improve code organization and maintainability
added a null check for oldIndexName in CFMetaData . java to prevent potential NullPointerExceptions when accessing index names
added packages " com . sun . org . apache . xml . internal . resolver . helpers . " and " com . sun . org . apache
rename ` save ` methods to ` add ` and ` updateExecutionContext ` methods across multiple classes to improve clarity and consistency in method naming
added a check to replace LoopExitNode with a replaceFirstInput for loopBegin to ensure proper input handling for loop exit nodes
refactor SearchAndRecommendationsScrollController to use WidgetsRecyclerView instead of RecyclerView to enhance flexibility and maintainability of the code
added a check to ensure terminal support is enabled in ConsoleReader . java to ensure that only supported terminals are processed
changed the type of ` timeAllowed ` from ` Long ` to ` Integer ` in ` CloudExitableDirectoryReaderTest ` , updated timeAllowed
updated session validation condition in AbstractSessionCache to check if the session is valid before flushing session data to ensure that session data is only flushed
updated ChangedIndexChangeGenerator to check for null columnNames before processing to avoid potential NullPointerExceptions when columnNames is null
replaced ` Vector ` with ` ArrayList ` for the ` RadioButton ` class and updated related methods to improve code clarity and maintainability by using a
refactor user creation logic in UserManagerCompat and introduce a new UserManagerCompatVM class to improve code clarity and maintainability by centralizing user
added ` getDatabaseMajorVersion ( ) ` and ` getDatabaseMinorVersion ( ) ` methods to ` MockDatabase ` , ` AbstractDatabase ` , and
refactor ActionGraphCache to use MapDifference for better clarity and consistency to improve readability and maintainability of the code
added LockDatabaseDesc and UnlockDatabaseDesc classes to implement database locking and unlocking functionality to facilitate database locking and unlocking operations in the
refactor RankingTopComponent , RankingUIModel , RankingToolbar , and RankingToolbar to streamline setting of
added handling for DisconnectMessage in HandshakeHandler . java and updated logging in NodeImpl . java to improve error handling and provide clearer logging for
added a new test method ` testSetDeleteSG ` to ` IoTDBAuthorizationIT ` to validate the functionality of setting and deleting storage groups
chore : [ doc ] update documen proto for documentai v1beta2 , v1beta2 , v1beta2 ,
added type checks for named variables in Assertions . java and implemented type validation in FindMissingTypes . java to ensure correct handling of missing types and improve
added methods ` afterTestClass ` and ` beforeTestClass ` to the ` StepScopeTestExecutionListener ` class to enhance test execution handling for
[ java ] do n ' t use atomicbuffer in countermanager constructor .
removed the ` toString ( ) ` method from ` MultiSteps ` , ` SendEmail ` , and ` SendSteps ` classes to simplify the logging
added handling for joinKeys in JoinDesc . java to ensure proper cloning of joinKeys when it is not null
added PrincipalResolver dependency and updated authentication handler registration in WebAuthnConfiguration . java to enhance authentication handling with a default principal resolver
added a ` ImmutableList < Path > searchPaths ` parameter to ` addSettingsFromFile ` and modified the ` XcconfigParser ` method to include
changed variable declarations from non - final to final in Oracle . java to enforce immutability and improve code safety
[ hotfix ] [ doc ] disable unaligned checkpointing option until rescaling be complete .
[ calcite - 144 ] fix bug in queryparser and sqlsorttest ( jesus camacho rodriguez )
refactor CompileTheWorld class to remove TTY . println calls and add a log option to improve code readability and maintainability by centralizing
added a check for LocalVariable in LambdaRewriter . java to ensure proper exception handling for non - existent local variables
added support for MySQL database types in CreateTableGenerator to ensure proper handling of timestamp values in MySQL databases
refactor classloader management in EnvConfiguration . java to ensure proper context class loader management to improve code clarity and maintainability by ensuring proper class loader management
added a condition to set the motor ' s ejection delay based on the stage number to ensure the motor ' s ejection delay is set correctly
renamed ` FunctionalRunnerConfig ` to ` BeanDefinitionOrderRunnerConfig ` and updated its usage in ` SpringApplicationTests ` to improve clarity and consistency
refactor TransactionUtil2 class to improve code readability to enhance maintainability and facilitate future updates
updated the ` validateIssuerClaim ` method to accept an ` Optional < OAuthRegisteredService > ` parameter and refactored issuer resolution methods to improve
updated string concatenation logic in ClusterState . java to handle null doccollection references to improve robustness by preventing potential NullPointerExceptions
replaced ` getStyle ( ) . setAlignment ( align ) ` with ` getAllStyles ( ) . setAlignment ( align ) ` in ` TextArea .
added ` FOREIGN _ DATABASE _ NAME ` and ` FOREIGN _ SCHEMA _ NAME ` parameters to the ` ForeignKey
[ java ] throw timeoutexception on unsuccessful leader vote due to timeout .
added a private method ` shadowOf ` in ` ShadowActivity ` , ` ShadowBluetoothGatt ` , and ` ShadowBluetooth
added null or empty check for the selection root in FileSelection . java and modified selectionRoot assignment logic in TestBugs . java to improve error
add oninventorytick method to iforgeitem and iforgeitem , deprecate it
refactor output handling in Export . java to use ByteArrayOutputStream instead of FileOutputStream and improve file handling in IOUtil . java to enhance efficiency and
added a null check before calling invalidateOptionsMenu ( ) in SingleUploadFragment to prevent potential NullPointerExceptions when the activity is not initialized
refactor bind options handling in AppsCustomizePagedView , Launcher , and PendingAddItemInfo classes to improve code clarity and
added new CAPABILITY constants for air pressure , CO2 PPM , and VOC PPM in EcobeeSensorThingHandler . java to
updated formatting and formatting in OperationSetServerStoredContactInfoFacebookImpl . java and OperationSetServerStoredContactInfoFacebookImpl . java to
added environment variable for " AAPT " and " AAPT2 " in Genrule . java and updated test cases in GenruleTest . java
do n ' t dump access table if truffleinstrumentbranches be enable
added null check before disposing of the message to avoid potential NullPointerException when message is null
added a Getter annotation to the DB field in TronStoreWithRevoking . java and modified the init method in TxCacheDB . java to
updated log warning messages in CoreContainer . java to provide clearer feedback on log watching functionality to inform users that log watching is not yet implemented for
replaced printStackTrace ( ) calls with return statements and added return statements in CategoryPlotTests . java to improve error handling and provide clearer error messages for
replaced ` ByteArrayOutputStream ` with ` SmallByteArrayOutputStream ` and introduced a new ` SmallByteArrayOutputStream ` class for writing byte arrays to improve robustness
replaced HashMap with IntMap for attribute retrieval in OGLESShaderRenderer and Shader classes to improve type safety and reduce potential errors in attribute retrieval
updated DriverManager connection configuration in AbstractDIHJdbcTestCase . java to ensure proper resource management and avoid potential resource leaks
added null checks for ` firstExchangeCompletedTimestamp ` and ` lastExchangeCompletedTimestamp ` to avoid potential NullPointerExceptions when accessing ` firstExchange
added default language handling and improved javadoc calls in TestHtmlTag . java and TestUseOption . java to enhance code clarity and ensure consistent default language
updated condition to check if items are incomplete instead of empty to ensure that incomplete completions are only processed when there are more items to complete
updated command - line arguments and modified time column retrieval logic in HybridClusterIntegrationTestCommandLineRunner . java to improve command - line argument handling and ensure
updated output format handling in SiteSnapshotVariationsTest , OutputOptions , and OutputOptions classes to ensure correct file extension is used based on output formats
changed condition from ` mInsets . bottom + minQsbMargin ` to ` mInsets . bottom + minQsbMargin
added ` equals ` and ` hashCode ` methods to ` AnimationList ` , ` SceneKey ` , and ` GltfModelKey ` classes to
added a ` setDate ` method to ` AbstractGenerator ` , ` Generator ` , and ` Generator ` classes , and modified ` HttpConnection ` to
replaced Adler32 with CRC32 in Store . java to standardize the usage of the CRC32 class
make xen . xen . heartbeat . interval default to ` ` any # of seconds ' '
added a new warning constant for zero area in FinSetCalc and updated geometry warnings in FinSetCalc to improve clarity and maintainability of warning messages
added a new ` DocumentMetadataSerializer ` to serialize ` DocumentMetadata ` objects to ensure proper serialization of ` DocumentMetadata ` objects for better data handling
hhh - 13276 add trunc ( ) function to h2dialect ( oleewere )
added a condition to check for " Memory Pool not found " in the metric conversion logic to ensure that the error message is only logged when " expected
added useJavaScript parameter to UserContext and improved error handling in UserTests , UserContext , and FileAccess classes to enhance user context validation and ensure
updated validation messages to use ` Types . PROTOTYPE _ TYPE . classNameWithEnclosingNames ( ) ` instead of ` ConfiguredType ` to
updated the BACKFILL string from " / generateAnomaliesInRange " to " / replay " in DetectionResourceHttpUtils .
replaced instances of ` new DataWord ( ) ` with ` new DataWord ( 1 ) . getData ( ) ` with ` new DataWord (
refactor app item handling in AllAppsContainerView to improve code clarity and maintainability by using direct child views instead of adapter items
chore ( deps ) : upgrade gapic - generator - java to 2.8 . 0 and update gax - java to 2.18 . 1 (
updated context start statements in ResourceService , ResourceHandlerTest , and ServletContextHandler classes to reflect correct behavior after ContextHandlerCollection is started to ensure proper
removed redundant conditional check for WORKSPACE _ CUSTOM in Cling . java to streamline code and improve readability
added an assertion to check if the lookupModule is not null in TruffleJDKServices . java to ensure that the lookupModule is not
added JUnit @ Ignore annotation to ClassicSuperHandlingTest . java to temporarily disable test that is not intended for unshadowed classes
updated import statements to use the correct package structure for ItBit demo classes to ensure compatibility with the newer ItBit library structure
ww - 3906 use getvalue ( ) instead of getvalue ( ) to avoid null pointer exception
changed class modifiers from package - private to private in Utils , ApplicationUtils , and Whois classes to enforce immutability and improve encaps
fix potential ioexception when read user account from file
updated externalizable type handling to use " java . util . Vector " and " java . util . Hashtable " instead of " java . util .
added a table name to the warning log message in RetentionManager . java to provide more context about retention time issues for better debugging
updated string length checks to use trim ( ) . length ( ) . length ( ) instead of string . length ( ) . length ( ) .
update resourcepackfilenotfoundexception to use modfile . getfilepath ( ) instead of path . tofile ( ) . tofile ( )
refactor node and edge transformer selection logic in PartitionToolbar . java to improve clarity and maintainability of transformer builder selection logic
refactor conditional checks in RecentsView . java to improve readability and maintainability to enhance code clarity and prevent potential null pointer exceptions
refactor ` calculate ` methods to return a ` BMIViewObject ` instead of a ` Map < String , String > ` to enhance functionality
simplified the comparison method in QueryCommand . java to improve code readability and maintainability
modify damage calculation for HoneyBale blocks in Entity . java to ensure proper damage adjustment based on the block type
refactor environment handling in WindowsProcessAddressSpace and J9DDRImageProcess to use a List instead of a LinkedList to improve code clarity and
add support for custom plugin properties in OptionsParser to enable customization of plugin configuration options
updated condition in HashJoinBatch to check for empty hashTable instead of null to improve robustness by preventing potential NullPointerExceptions
updated timestamp handling in Timestamp . java and added new test methods in TimestampTest . java to improve timestamp validation logic and enhance test coverage for different timestamp
[ java ] use the service archive context from the service agent when connect to the service .
added a condition to check if the compilation is not disabled before executing the method type check to ensure that the method type is only checked when not compiled
added unit tests for image2 functionality in AbstractTest . java , along with corresponding test cases in DB2OnlineTest . java , GeoRasterOnline
refactor TogglableFlag and BaseFlags to improve default value handling and change listener methods to enhance code clarity and maintainability by centralizing
updated logging statements in DockerClientFactory . java to include more information to improve debugging by providing more context in error messages
added a check to return early if the platform is Android to ensure proper handling of snapshots on Android devices
updated assertions in RoutesTest to use JUnit Hamcrest ' s assertThat method to improve readability and maintainability of the test code
added new ` BytePredicate ` , ` FloatPredicate ` , ` FloatToLongFunction ` , ` ShortPredicate ` , and ` ShortToLong
updated the ` getSubsColor ` method to return a ` String ` instead of an ` int ` and modified related methods to return a string instead
added a conditional check before deregistering the invocation in Invocation . java to avoid unnecessary deregistering when the future completes
replaced the creation of ControlFrameBytes with the output method in AbstractWebSocketConnection . java to simplify the frame processing process and improve code clarity
added a conditional check for " redirected " in LoginActivity and modified intent handling in SignupActivity to ensure the activity launches only when the "
added a new shadow class ` ShadowCheckedTextView ` and modified ` Robolectric . java ` to extend ` CheckedTextView . java ` to
added Serializable interface to ParserState and made field transient in AccessorProperty and Property classes to ensure proper serialization and deserialization of the ParserState class
added " identrustdstx3 [ jdk ] " to the VerifyCACerts class to support verification of identrustdstx3
removed redundant calls to setAttribute for TEMPDIR _ CONFIGURED and context . TEMPDIR in WebInfConfiguration . java to streamline the
added import for StringUtils and parsed the occupant ' s nick in Occupant . java , and created a test case in MultiUserChatTest
refactor QuicSession constructor to accept a context parameter for better clarity to enhance code readability and maintainability by centralizing session context handling
replaced direct calls to writer . setMergeScheduler ( ) with writer . getConfig ( ) . setMergeScheduler ( ) and writer . setMergePolicy
refactor code for better readability and consistency in ICU4JImpl . java and TextPosition . java to improve code clarity and maintainability
added support for ComputedDateValue and ComputedNumericValue in AddDefaultValueChange . java and improved error handling in AbstractDatabase . java to enhance
refactor NbtScoreboardIoService to improve code readability to enhance maintainability and facilitate future updates
updated logging level from error to warn in SAML2Configuration and added a new test case in SAML2ServiceProviderMetadataResolver to improve error handling and ensure
changed the access modifier of the printer variable from private to protected and added a createPrinter method to enhance encapsulation and allow subclasses to access
added BigDecimal import and updated order average price calculation in HuobiAdapters . java to ensure accurate calculation of the average price for the open order
updated ProjectionOperation to use ` getTarget ( ) ` instead of ` getName ( ) ` and modified field handling in ` TypeBasedAggregationOperationContext ` to
modified viewer addition logic in FakePlayer . java to include a check for the presence of a player to ensure that viewer is only added when the player
added constant state management for FolderAdaptiveIcon , FolderAdaptiveIcon , and ShiftedBitmapDrawable classes to ensure proper handling of null layout
refactor SPDYClient to use ISession . Controller instead of CompressionFactory and Parser for connection creation to improve code clarity and maintainability by
fix protostuffobjectoutput . writeobject ( null ) to check for null .
pdfbox - 4892 : fix typo , a suggest by valerybokov
refactor BarrowmanCalculator class to improve code readability to enhance maintainability and facilitate future updates
added a conditional check to return early if axes are not displayed in DrawAxis . java to improve performance by avoiding unnecessary processing when the axes are not
replaced calls to ` setFilter ` and ` setWrap ` with ` unsafeSetFilter ` and ` unsafeSetWrap ` with ` unsafeSetFilter
corrected whitespace in the returnToWorkspace method call to improve code readability and maintain consistency
added SSL support for HttpURLConnection in CustomUrlJob and created a new CustomUrlTrustEverything class for trust manager to enhance security by ensuring proper
refactor clock rate handling in EncodingConfigurationTableModel and introduce getRealUsedClockRateString method in MediaFormat and MediaFormatImpl to improve clarity and
refactor TextureAtlas class to improve code readability to enhance maintainability and facilitate future updates
updated the method for retrieving the module name in ProjectGenerator and added a new method to set the module name in AppleLibraryBuilder to ensure correct module
refactor locking and release process logic in TestSlot . java to improve thread safety and ensure proper release of internal keys
# 118 - update sqltreebuilder to support id _ list query ( # 118 )
refactor response header handling in WebSocketServletRFCTest to use a ByteBuffer instead of a closeFrame to improve readability and maintainability of the
added null handling for referenceMultiValueStack in WasmFunctionInstance . java and refactored case statements in WasmFunctionNode . java to improve
added TTL configuration to ` ClickHouseLogCollectClient ` and ` ClickHouseLogCollectConfig ` classes to allow configuration of the TTL for
updated serialization type from NESTED _ OBJECT to NAMED _ FIELD in CustomChangeWrapper , CustomPreconditionWrapper , and XMLChangeLogSerializer to
updated imports and modified server initialization in DeploymentExceptionTest . java to improve server management and ensure proper thread pool management
added error handling for Fresco initialization and improved error handling in CommonsApplication and NearbyController to enhance robustness and prevent potential runtime exceptions
added null and empty check for objectName before trimming to avoid potential NullPointerException when objectName is null or empty
updated error messages in Command . java and TestPrint . java to use the exception message instead of the path to improve clarity and accuracy of error reporting
[ hotfix ] [ table - common ] refactor environmentsettings to use static constant for plannerclass and executorclass
updated ` X500CertInfo ` to use ` issuer ` instead of ` owner ` and modified subject handling in ` KeyTool . java ` ,
added a deprecated annotation to RuntimeOptions . java to indicate that the class is outdated and may be removed in future versions
replaced the byte array conversion with a method call to ` str . getBytes ( utf8Charset ) ` to simplify the code and improve readability by
added a new interface ` PermissionEvaluator ` in the ` PermissionEvaluator ` package to provide a mechanism for evaluating permissions based on the authentication context
added a new option ` ERASE _ LINE _ ON _ FINISH ` in ` LineReader ` and modified ` LineReaderImpl
change condition from checking if online servers do not contain the server name to checking if online servers do not exist
updated exception types to use BLOCK _ SIGN _ ERROR instead of CALC _ MERKLE _ ROOT _ FAILED across multiple files to
refactor ExpandWar . java to streamline URL handling and improve document deletion logic to enhance code readability and maintainability by reducing redundancy
refactor exception handling in DefaultHttpClient and add error logging in FullNettyClientHttpResponse to improve error reporting and provide clearer error logging for HTTP
updated the method for centering the container in Picker . java to ensure the container is centered relative to the spinner ' s container
added a method to recycle memory segments and updated related logic in NetworkBufferPool . java to improve memory segment handling and ensure proper handling of interruptions
updated MBeanServer creation and release logic in TestJmxIntegration . java to ensure proper resource management and prevent potential memory leaks
replaced JUnit runner with a RetryTestRule in AbstractIT . java to improve test reliability by using a custom RetryTestRule
refactor ` QueryStateMachine ` to use ` session . getRequiredTransactionId ( ) ` instead of ` boolean ` for auto - commit checks to
updated import statements in CsvFieldType , CsvTable , CsvTableScan , CsvTest , CsvTableScan , CsvTableScan , and CsvTest classes
added support for both " javax . net . ssl " and " javax . microedition . khronos . opengles . GL "
[ hotfix ] [ stream ] remove unnecessary processingtimecallback from streamtasktimertest
refactor URI handling in Request . java and add a new test case in RequestTest . java to improve code clarity and ensure correct request URI handling
updated storage point retrieval to use ` WhatsNewActivity . KEY _ LAST _ SEEN _ VERSION _ CODE ` instead of a constant to
added sessionAvailable and sessionUnavailable methods to handle session availability and unavailable states to improve session management by providing priority updates for available and unavailable sessions
added a call to addPackageToScan ( " liquibase . pro " ) in ServiceLocator . java to enable scanning of the " liquibase . pro
replaced the ` deleteSyncFolders ` method with ` deleteOtherSyncedFolders ` in ` MainApp ` and ` SyncedFolderProvider
updated the ` loadWithNewGlobal ` method to accept an additional ` Object [ ] ` parameter and modified related method signatures to include additional arguments to
updated relative path index handling in FastPathResolver . java for improved clarity and consistency to enhance code readability and maintainability by using a consistent index
updated weigher calls to use ` toIntExact ` instead of ` length ( ) ` for footer , stream , and retained size to ensure accurate
rename ` hasRandomizedType ` to ` hasAlreadyRandomizationDepth ` across multiple files to improve clarity and consistency in naming conventions
added support for LEAD and LAG functions in UnsupportedOperatorsVisitor . java and a corresponding test in TestWindowFrame . java to
added a call to clear the proxy request headers in AbstractProxyServlet . java to ensure that the proxy request headers are cleared before processing requests
added a conditional check for SA attachability in CompressedClassSpaceSizeInJmapHeap . java to skip processing if SA attach is not expected
added null check for bgColor before checking its alpha value in GraphicsDevice . java and created a new TranslucentWindow . java file with trans
added a null check for user information and improved error message handling in UserInfoActivity to enhance robustness by preventing potential NullPointerExceptions during user information
added a custom field serialization class for PrecompiledHeaderData and modified Preconditions check in PreprocessorDelegate to ensure PrecompiledHeaderData can be used on
[ hotfix ] [ table - planner - blink ] remove update - mode from kafkatablesourcesinkfactorybase
added a new integration test class ` MultipleOutputsIntegrationTest ` to verify the functionality of building and returning named output groups in a project to ensure correct
updated regex pattern in FileSettings . java to ensure consistent formatting of content to improve readability and maintainability of the code
[ flink - 20535 ] [ flow ] fix flow initialization and validation context for stateless flow
replaced instances of ` new Object [ ] { } ` with ` ArrayUtils . EMPTY _ OBJECT _ ARRAY ` in ` BinaryCipherExecutorTests
added a taskbar mode switch annotation to TaplTestsQuickstep . java to enable persistent taskbar behavior in the test
added new device status entries for " leaving - dock " , " energy - save - mode " , and " energy - save - mode " to
change exception type from Exception to ItemLoadingException and introduce a new exception class to improve error handling and provide more informative logging for item loading issues
removed unused imports and added an @ Ignore annotation to KrakenFuturesStreamingPublicDataTest . java to temporarily disable the test due to potential
added a conditional check to return 1 if the graphics is 2X before retrieving the surface scale to ensure correct surface scaling based on graphics type
rename RussianLowerCaseFilter class to RussianLowerCaseFilter . java to improve clarity and maintain consistency in naming conventions
updated CsvBulkLoadToolIT . java and QueryUtil . java to use empty properties instead of serverProps and clientProps to simplify property handling and
added separator characters to the displayName string in FileDisplayActivity . java to ensure consistent display behavior across different operating systems
changed access modifiers of ` in ` and ` inRead ` from private to protected in ` LittleEndien ` and introduced a ` ResettableInputStream
added a boolean parameter ` repeatFirstLineIndent ` and updated the ` setIndent ` method in ` ColumnText . java ` to control the indent
changed the type casting of ` oid ` from ` Object ` to ` Object ` in the ` equals ` method to ensure proper type safety and
refactor metrics tracker and health check configurations in HikariPool . java to improve code readability and maintainability by reducing redundancy
corrected the spelling of " ControlFlowAnchorNode " to " ControlFlowAnchored " in LoopEx . java to ensure consistency with the
added a call to setFocusPainted ( false ) on buttons [ i ] to hide the focus of the button in the WindowsPlacesBar
added support for UniqueConstraint and ForeignKey objects in DatabaseSnapshot . java to ensure proper handling of non - primary keys in the database snapshot
added a new method ` getAccountLedgersWithParams ` to ` KucoinAccountServiceRaw ` and ` AccountAPI ` to retrieve account ledger
[ ds - 2078 ] check dc . title in group rest api ( # 10254 )
added a check for non - empty words before returning a new utterance in GapInsertionDetector . java to ensure that only valid words are processed and
add a new test class RubyScriptTextTest to validate script execution behavior with cached and reused script engines to ensure that the script engine works correctly
updated thread assignment from ` getBackgroundThreads ( ) ` to ` getDatabaseUpdateThreads ( ) ` in ` FeedRefreshUpdater ` and added database update thread
updated the FASTSCROLL _ THRESHOLD _ MILLIS from 40 to 10 milliseconds in RecyclerViewFastScroller . java to allow more time for fast
updated the SystemClassName initialization to use " Ljava / lang / System " instead of " Ljava / lang / System " to ensure compatibility with
hhh - 13644 add getresultstream ( ) method to procedurecallimpl to handle null pointer exception
added null check for apiProperties in RestSwaggerSupport . java to avoid potential NullPointerException when accessing API properties
added BinaryFrameGenerator and TextFrameGenerator classes for handling binary and text frames to enhance websocket frame generation capabilities for better handling of WebSocket payloads
simonstewart : do n ' t call findelement ( by . id ( " peas " ) ) on page loading test
refactor random latitude and longitude calculations in RandomGeo3dShapeGenerator . java to improve code readability and maintainability
added a keepAlive method to the ResourceBundle class to ensure thread safety during resource management
changed the return value from false to true in SQLiteDatabase . java to ensure the method returns true instead of false
refactored the handling of concurrent method signatures in FindJSR166LockMonitorenter . java to improve clarity and maintainability of bug reporting
added mkdir steps in AndroidAar , AppleBundle , ApplePackage , FatBinary , and FatBinaryTest classes to ensure the output directory is created
updated variable names and error messages in MeshLeveler . java for clarity and consistency to improve readability and maintainability of the code
[ drools - 131 ] skip pmmlmodelcommand execution if jpmml module be not available on classpath
changed locationMode to thermalStatus in ShadowPowerManager . java to ensure proper handling of thermal status in the shadow power manager
added OS _ MAC _ TMP _ DIR constant and modified temporary directory creation logic to ensure temporary directory creation only occurs on OS - MAC environments
added a check for ` USE _ MEMORY _ MAPPED _ BUFFERS ` in ` PrjFileReader ` and ` CatalogManager `
added a null check for the organization attribute in the pom . xml file to ensure that Plugis are required to have an organization in the pom
removed contributor license agreements from SepPostingsWriterImpl . java to streamline license handling by eliminating unused license agreements
deleted the TerminateWebSessionListener . java file to remove unused session termination logic from the web flow
updated the execution method in ProcessCommunicator to use the system ' s java . class . path instead of a hardcoded string to improve
replaced ` ArrayUtils . EMPTY _ BYTE _ ARRAY ` with ` new byte [ 0 ] ` and ` new byte [ 0 ] `
added a test method ` dontChangeJavadoc ` in ` AddLicenseHeaderTest . java ` to verify that ` Javadoc ` does not change the
change LAUNCHER3 _ PHYSICS from false to true to enable the LAUNCHER3 _ PHYSICS feature
added a new HTML div class = ' noPrint ' to the HtmlThreadInformationsReport . java file to improve the visual appearance of the report
updated LUCENE _ MAIN _ VERSION from " 3.0 " to " 4.0 " and added new version constants in Version . java to reflect
added symbolicator and task handle in BsdDebuggerLocal . java and modified platform comparison in PlatformInfo . java to ensure proper handling of OS
refactor currentPlayClient to use WeakReference for better memory management to improve memory management and prevent potential memory leaks
added conditional logging for connection reset exceptions in NetworkDispatcher . java to improve error handling and provide clearer logging for connection reset failures
[ java ] initialize admin buffer in case there be no conductor buffer .
added a break statement to the switch statement in TouchImageView . java to ensure proper handling of conditional statements in the code
chore ( deps ) : upgrade gapic - generator - java to 2.8 . 0 and update gax - java to 2.16 . 0 (
removed SSL handshake handling in FeedableBodyGenerator . java to simplify the flushing logic for SSL connections
added type checks for " java . lang . Object " and " java . lang . CONTRAVARIANT " in TypeUtils . java to ensure correct
replace NonBlockingHashSet with ConcurrentSkipListSet in memtablesPendingFlush to improve performance by using a more efficient concurrent set implementation
added null check for tree . errs before calling memberEnter and modified error count logic in JavaCompiler and Erroneous classes to improve robustness by
updated the browser style from NO _ BACKGROUND to NONE in BugInfoView . java to align the browser with the default background style
updated the method call from finish ( ) to cancel ( ) in AboutActivity . java to ensure proper cancellation of the dialog ' s content
updated calculations for ` newLowerBound ` and ` newUpperBound ` in ` IntegerStamp ` and added unit tests in ` IntegerStampTest ` to
added a method to read an InputStream from an input stream in ITextUserAgent . java to improve performance by reducing the number of bytes read from the
refactor SwitchCompiler and ExprGenerator to improve variable handling and scope management to enhance code clarity and ensure correct variable management during switch statements
refactored the initialization logic in RSAClientKeyExchange . java to handle InvalidKeyException and UnsupportedOperationException to improve error handling and provide clearer
updated the ` addAttr ` method to include ` psapi . lib ` in ` WinGammaPlatformVC10 . java ` to ensure compatibility with
replace string concatenation with line separator in StringUtilsTest . java to improve readability and maintainability of the code
added configuration settings for encoding and output encoding in TemplateEngineFreemarker . java and updated malicious JavaScript alert text in ApplicationController . java to ensure compatibility
refactor byte array handling in CRDGeneratorTest . java to use a String instead of ByteArrayInputStream to improve readability and maintainability of the
remove static modifier from holdSamples variable in SampleSenderFactory . java to improve code readability and maintainability
added a conditional check for the " testngEmailableReporter " system property before adding the EmailableReporter class to ensure that the emailable reporter is
added quotes handling for escaped and escaped characters in CommandLineBuilder and updated test assertions in CommandLineBuilderTest to ensure proper handling of quotes and improve test coverage
removed the ` public ` access modifier from several classes in the ` Clock ` and ` DelegatingGauge ` , ` MetricProducer ` , and `
added a call to setNumReduceTasks with the number of fetchers in FreeGenerator . java to ensure the job has the correct number of reduce
refactor default field handling in SchemaGeneratorHelper to improve clarity and functionality to enhance code readability and maintainability by using a dedicated method for retrieving
updated the FILEVERSION from " 505365 " to " 532077 " to reflect the new version of the service
updated extension checks in FloatTextureData . java to include " GL _ ARB _ texture _ float " and " texture _ float " to ensure
add write ( string , string ) and close ( ) method to fileserver .
added a null check for outputDirectory and jarStream before setting it to avoid potential NullPointerExceptions when outputDirectory is null
added PerfStatsCollector import and modified return statement in ShadowSQLiteConnection . java to enhance performance tracking for SQLite connections
updated JDK tool retrieval from ` getCurrentJDKTool ` to ` getTestJDKTool ` in multiple test files to ensure
add resourceerrorhandling enum in config / org / geos - config / geoserver / config / geoserver / config / resource . java
updated buffer position handling in RAMInputStream and added a test for EOFException in TestRAMDirectory to improve buffer position accuracy and ensure proper exception handling
updated error handling to include a message for missing resources in DefaultServlet and JspServlet to improve error reporting and provide clearer context for missing resources
modified ForkJoinPool and ForkJoinWorkerThread to accept a boolean parameter for innocuous mode and added AccessControlContext class for access control to enhance thread safety and
updated memory check logic in Caches . java to use a default value of 0xFFFF and added logging for cache free memory calculations to improve memory management
hbase - 24166 testsplittransaction should not use openhregion ( )
added null check for currentSelectionArea before setting the selected state in CompatibilityEngine . java to avoid potential NullPointerException when currentSelectionArea is null
added a new test method ` testJaasDemo ` to ` DemoModulesTests ` for testing Jetty demos to ensure correct environment handling
added a condition to check for span values in CellLayout . java to ensure correct spacing between cells based on span dimensions
refactor CacheOffHeap class implementation to improve performance and maintainability of the code
added table dependency checks and validation in CreateTable . java and a corresponding test case in TestCases . java to ensure that tables depend on a higher
added a check for the row and column bounds before setting tiles [ row ] [ col ] and improved error handling in TiledLoader . java to
added synchronized keyword to setWorkingSet method to ensure thread safety when accessing the setWorkingSet method
added a new Java class ` Solution ` that calculates the minimum and maximum steps of a given integer to implement a solution for determining the minimum and
added a new interface AddressChecker and refactored TrackerRequestProcessor to use it to improve address validation logic for tracker requests
fix multilayermodel for translucent movingblock render
refactor tag removal logic in GuiConfigEntries . java to use a new method ` removeTag ` to improve code readability and maintainability by
changed the type of ` thingTypeVersion ` from ` int ` to ` String ` in ` ModuleType ` , ` Capability ` , and
added null check for recieptents before sending messages to avoid potential NullPointerException when recieptents are null
refactor the ` isSingle ` method into a separate method ` isSingle ` to improve code readability and maintainability by reducing duplication
added a ` failFast ` parameter to the ` DockerClientFactory ` and modified the ` RemoteDockerImage ` class to utilize profiling to improve
updated the ` AndroidMetadata ` constructor to include a ` resourcesMode ` parameter and modified its usage in ` RobolectricTestRunner ` to enhance
refactor date handling in HistoricProcessInstanceQueryImpl to use Calendar instead of DateUtils to improve code clarity and reduce dependency on DateUtils
replaced the importProject method from ` gradleImporter . importProject ` to ` gradleImporter . importProjectCore ` to ensure that the project file is
added error handling for CommandFailedException in LiquibaseCommandLine . java to improve error reporting and provide clearer debugging information
refactor TreeMap implementation to improve code readability and maintainability
added methods to enable and disable asynchronous stack traces in CN and Display classes to enable and manage asynchronous stack traces in the application
added a method ` setGlowColor ` to ` BubbleTextView ` and updated ` Folder ` to use it to enable customizable glow colors
added style classes for link and description elements in LinkedFilesEditor . java to ensure proper styling for file row text in the editor
updated the return type in AbstractJdbc2ResultSetMetaData to return " java . lang . Short " instead of " java . lang . Short " to
removed unnecessary file deletion logic in Lucene40LiveDocsFormat and SimpleTextLiveDocsFormat to simplify code and improve readability
added null check for _ info before checking for SWITCHING _ PROTOCOLS _ 101 to prevent potential NullPointerException when _ info is null
added a constructor to ` ShadowLocation ` that accepts a ` String ` provider to enable the creation of ` ShadowLocation ` instances with a specific provider
updated the condition for setting maxRAM in LauncherPreferenceJavaFragment to ensure maximumRAM does not exceed 2048MB for 32 - bit devices
refactor LocalMapStatsProvider to replace EMPTY _ LOCAL _ STATS with EMPTY _ LOCAL _ MAP _ STATS and update related methods
updated FileProfileActivator to implement LogEnabled and added logging functionality for file existence and missing files to enhance logging capabilities and improve debugging capabilities during profile activation
updated the error message from " noname1234 " to " invalid _ " in PdfWriter . java to clarify the purpose of the error message for
change roles from a list to a set in GuildImpl . java to ensure roles are stored in a set instead of a list
changed the return value of the ExpandableUploadListAdapter from 30 to MAX _ NUM _ UPLOADS _ SHOWN and adjusted the length
added unit tests for the delete method in DashboardUserMapper to ensure that the delete operation returns a successful result
rename recipient identifier to primaryParticipantIdentifier and update related methods accordingly to improve clarity and maintain consistency in naming conventions
[ gr - 32220 ] fix auto - dereference handling in llvm .
added a method ` getBufferSize ( ) ` to return the buffer size in ` BufferedIndexOutput ` to provide access to the buffer size for better
updated the ` terasology ` command to include ` usageHelpAutoWidth ` and modified the description of the ` -- headless ` option
refactor action bar title assignment logic in DrawerActivity . java to improve readability and maintainability of the code
refactor CommandLineParserTest . java for improved readability to enhance maintainability and facilitate future updates
added clamping threshold constants in PortraitStatesTouchController and changed access modifier of ALL _ APPS _ CONTENT _ FADE _ MAX _ CL
updated the method call from ` javaName ( ) ` to ` javaNameFromExternal ( externalName ) ` in ` DefaultJavaLanguageNamer
removed the ` setFrame ` and ` frame ` methods from the ` CWrapper ` class to streamline the code by eliminating unused native methods
added null check and error handling for constant references in Checker . java and created a new ValueTest . java file with corresponding tests to ensure correct
refactor MontgomeryMultiplyTest , TestMulAdd , and TestSquareToLen classes to improve code organization and maintainability
removed unnecessary null check for constructors in PojoUtils . java to simplify the code and improve readability
refactor JiraConfiguration class to improve code readability to enhance maintainability and facilitate future updates
updated error handling to include ' ( FAILED ) ' and ' ( COVERAGE ) ' in UploadBuild . java to improve clarity of error
updated bounds calculations in DeviceProfile . java to use search bar top offset instead of edge margin and padding to ensure proper alignment of edge and search bar
updated log messages in PulseAudioAudioSource and PulseAudioSimpleProtocolStream to include " to " and " to " to " to "
refactor OverviewCommandHelper to run on the UI thread instead of directly calling openRecents ( ) to improve code readability and maintainability
removed redundant method ` getSourceGroupOptional ( ) ` and ` getSourceGroup ( ) ` in ` AppleSource . java ` to streamline code by
updated the timeout duration from 220000 milliseconds to 320000 milliseconds in TestSimTriggerIntegration . java to allow more time for trigger fire events to
corrected the parameter name from ' outputPositionCount ' to ' positionCount ' in FloatSelectiveStreamReader . java to ensure accurate representation of the
added a null check for the first element in the bestSoFar array before returning an Optional . empty ( ) to ensure proper handling of null values
added a condition to skip processing specific component types in ResourceEditorView . java to avoid unnecessary processing for non - form and dialog components
replaced ` UiThreadHelper ` with ` LauncherModel ` in DragView , FloatingIconView , and FloatingIconView classes to use
added a null check for the commitPoint variable in ReplicationHandler . java to ensure the correct commit point is retrieved when it is null
added unit tests for the ` getImei ` and ` setMeid ` methods in ` ShadowTelephonyManager ` to ensure correct
removed debug logging methods from SimpleHostRoutingFilter . java to streamline the code by eliminating unnecessary debug logging
added a ` destory ` method to ` IndexSegment ` , ` BitmapInvertedIndex ` , and ` IndexSegmentImpl ` classes to
[ hotfix ] [ test ] improve normalmessagesendandrecvit test
replace Charset with StandardCharsets for output stream encoding to ensure consistent character encoding across different operating systems
hbase - 24165 throw null ioexception if multi hbase file do not exist ( addendum )
added a commission parameter to the DefaultWithdrawFundsParams class and updated its usage in RippleWithdrawFundsParams to enhance
removed the import of StreamTerminator from AutoClosingReferenceStream . java to eliminate unused dependencies and improve code clarity
updated exception handling to include multiple SolrServerException and IOException in LoadSolrBuilder , SolrLocator , and SolrLocator classes to enhance error handling flexibility and
added a null check for method body before invoking overloaded methods in Java2TypeScriptTranslator . java to ensure that overloaded methods do not throw
replaced direct call to ` sweepDisk ( ) ` with a try - with - resources statement using ` StacklessLogging ` to improve logging reliability by
added serialization support for SQL data types in MutableColumnDataType , SQLDataType , and Entities classes to ensure proper serialization and avoid potential serialization issues
rename SubExactLConstantTest and SubExactLNonConstantTest files to improve clarity and consistency in naming conventions
added a null check for the claimRequestString before parsing it to avoid potential NullPointerExceptions when the claimRequestString is empty
updated HiveFilterSetOpTransposeRule to use RelBuilderFactory instead of FilterFactory to improve flexibility and maintainability of the code
updated the ` processTypeHintForNestedDocuments ` method to handle null values correctly and added unit tests for ` LocalDate ` and ` LocalDate `
refactor CoreAdminRequest to use CoreStatus instead of CoreAdminResponse to improve clarity and maintainability of the code
added new lists for transformers and locators in ModDirTransformerDiscoverer . java to ensure proper initialization of the transformers and locators
updated error message formatting in AbstractQuerydslProcessor . java to improve clarity of error messages for better debugging
refactor PEGraphDecoder to use a new method getCallStack for stack trace retrieval to improve code clarity and maintainability by centralizing stack trace
renamed methods from ` setOf ` to ` copiedSetOf ` and ` copiedSetOf ` in ` RestTemplateBuilder . java ` to improve
camel - 16165 : camel - mail : use getidentityhashcode ( ) instead of dumpmessage ( )
add null check for getRedeliveryPolicy ( ) and getOriginalDestination ( ) in connection factory and prefetchsubscription
added a method call to setIsPropertyName ( ) in getIdentifierName ( ) to ensure proper handling of property names in the identifier parsing process
added WaveGeneratorActivity and modified InstrumentsFragment to introduce WaveGeneratorActivity to facilitate the creation and launch of WaveGeneratorActivity in the application
added null check for ` m ` and improved null checks in ` KeyedProperties ` and ` SheetOverlaysManager ` to enhance robustness
added unit tests for logging and executing Shell operations in PodIT . java to ensure correct functionality and functionality of Shell operations
added a test method ` testNoWriter ` to ` TestReplicationHandler ` to verify that SolrCore detects no index and creates a new one
[ graal ] fix classcastexception in graalkerneltester
updated DefaultDnsClient and DefaultMxRecord to implement Comparable < MxRecord > and added sorting functionality for MxRecord to improve performance and
refactor thread creation in XToolkit to use a PrivilegedAction for better readability to improve code clarity and maintainability by centralizing thread creation logic
added validation call to SelectBox and set the selected platform to " Linux6 " in UITest to ensure that the dropdown selects the correct platform
replaced IllegalStateException with printStackTrace in JobGlobalListener . java to improve error handling by providing stack traces for exceptions
added SplitState parameter and updated FlowBuilder and SplitState classes to include a parentSplit parameter to enhance state management by allowing the creation of split states
changed the connectionState variable to be volatile and updated its retrieval method to ensure thread safety when accessing the connectionState variable
increase default polling period from 10 seconds to 1000ms in AbstractPollingEndpoint . java and add a new endpoint id in EnableIntegrationTests . java to
refactor memory allocation methods in MemoryStack and MemoryUtil classes to streamline memory usage and improve performance
added exception handling for DocletAbortException in HtmlDoclet , AbstractDoclet , and AbstractBuilder classes to improve error reporting and provide clearer
[ java ] unusedmodifier : fix nullpointerexception in unused modifier
removed lambda expressions from multiple classes to simplify code and improve readability by using direct method calls
updated the Parameterized parameter name from " ssl = { 0 } " to " ssl = { 0 } " in AbstractHttpClientServerTest . java to
added error handling for IllegalFormatException in TransformationHelper . java to improve robustness by catching illegal format exceptions during transformations
rename userPermissions to activeConnectionPermissions in ActiveConnectionRESTService . java to improve clarity and consistency in naming conventions
updated Point . java to use EqualsBuilder for equality comparisons to improve code readability and maintainability by using a custom EqualsBuilder implementation
added null check for outputRoot before processing files to prevent potential NullPointerException when outputRoot is null
pdfbox - 4892 : add a filter to filter the pdannotation , a suggest by valerybokov
refactor StackTraceCleaner class to improve stack trace handling to enhance code clarity and maintainability
updated content type handling for CSS and JS files in PluginServlet . java to ensure proper content type is set based on file extension
hhh - 13257 skip test for oracle dialect in select expression test
updated the parameter name from ' slot ' to ' slotSize ' in ForkController . java to improve clarity and functionality of the upgrade method
added ` getStats ( ) ` method to ` AbstractDataImportHandlerTest ` , ` Context ` , and ` ContextImpl ` classes , and
[ scb - 2078 ] enable long - polling for kieclient ( # 2078 )
refactor gesture handling in PagedView , BaseOverview , and LauncherInstrumentation to use scroll method instead of setGestureMargins and setRect
updated UnlocksDialog initialization and added a button to PausedDialog in UI . java and added unlocks button in PausedDialog . java to
added a call to ` getDrops ( ) . clear ( ) ` in ` PlayerEventListener . java ` to clear drops from the event
added a constant for the default input name in StreamResult . java to provide a default value for the input name parameter
updated import statements in AttributeNormalizerTest . java to use IOException instead of MalformedURLException to ensure proper handling of potential IOException during normalization tests
updated printBoth method to include chunk type in TsFileSketchTool . java and added flip ( ) method in LocalTsFileInput .
added a ` headersToExclude ` field to the ` UmbrellaHeader ` class and modified the test assertions in ` ProjectGeneratorTest `
renamed the method ` onHttpError ` to ` onHttpHeaderError ` in ` GrizzlyAsyncHttpProvider . java ` to improve clarity
added encode ( ) method to RequestPlugin . java to ensure proper encoding of request parameters
added dialect handling for FLOAT expressions in RolapNativeSql . java and updated return statements in RolapNativeTopCount . java to enhance compatibility with
added a null or blank password check in LdapAuthenticationProviderImpl and created a new test class for LDAP authentication to ensure that a valid password is provided
pdfbox - 4892 : use integer . tostring instead of long . tostring ( ) , a suggest by valerybokov
added a condition to clear complex writers in ProjectRecordBatch . java to ensure proper clearing of complex writers when conditions are met
added @ SuppressWarnings ( " serial " ) annotations to multiple cache classes to suppress warnings related to serial serialization in the cache management framework
removed the ` public ` access modifier from the ` ClassGraphClassLoader ` class and updated the null check for ` classInfo ` to simplify the class
added error handling for " _ errors " in ErrorResponseException . java to improve error reporting and ensure proper formatting of error locations
added a constructor to the EventSourcingRepository class to initialize the EventSourcingRepository with additional parameters to enhance the EventSourcing
refactor binaryNode handling in mmm Attr . java to improve code readability and maintainability
refactor search text handling in SearchedPeopleCursorAdapter and QustomDialogBuilder to improve readability and maintainability of the code
[ nurovo ] add standby mode support .
change default value of planarConfiguration from PLANARCONFIG _ PLANAR to PLANARCONFIG _ CHUNKY in TIFFImage
added a call to close the stream in ItemListTag . java to ensure proper resource management and prevent potential memory leaks
added a new utility class ` AverageUtil ` and updated various classes to use it for average energy calculations to improve efficiency and accuracy of energy calculations
added new files SigInt . java and SigIntBarrier . java for signal handling to facilitate the management of signal signals in concurrent execution
refactor graph handling in ExporterGEXF to utilize EdgeIterable for better edge count management to improve flexibility in handling hierarchical graphs and
replaced ` byteBuf [ ] ` with ` Text ` in ` TCTLSeparatedProtocol . java ` to improve handling of UTF - 8
add validation for rubric answer index in response to prevent index out of bounds error .
replaced DB2Database class check with a method to compare schema and schema case to improve code clarity and maintainability by using a more descriptive
refactor ` BrowserMobProxyTest ` to use ` setUp ` , ` tearDown ` , and ` resetWebdriverProxySettings ` methods to improve
updated the formatting of criticalErrors to use Integer . toString for diagnostic index to ensure accurate representation of diagnostic information in critical errors
removed redundant calls to mTextWatcher . reset ( ) in InPlaceEditView . java to streamline code and improve readability
refactor InternalByteArray and TruffleString classes to improve code organization and maintainability
[ hotfix ] [ python ] make outedgesfunction return tuple2 instead of tuple3
refactor multiple Java assertions classes for improved consistency and clarity to enhance maintainability and readability of the codebase
deleted the ` ClassA \ 314 \ 201 . java ` file and created a new ` DiacriticTest . java ` file
[ java ] make cluster membership test more robust .
added a try - catch block and modified workspace reader handling in DefaultMaven . java and DefaultGraphBuilder . java to improve error handling and ensure proper
changed the scheme check from startsWith ( " https " ) to equals ( " https " ) and updated IP port assertions in TestServiceRegistryConfig to
refactor Mockito class to improve code readability to enhance maintainability and facilitate future updates
removed an unnecessary semicolon from the constructor signature in Jdbc3Connection . java to improve code readability and maintain consistency
refactor Servlet initialization logic into a separate method ` ensureInstance ( ) ` to improve code readability and maintainability by reducing duplication
added logging and modified deltaServerTime handling in BinanceExchange , BinanceBaseService , and BinanceBaseExchange to improve server time management and
added a condition to check if the binding starts with " NonStop ( tm ) Servlets For JavaServer Pages ( tm ) v8 .
added a null check for the component form before deregistering the animated component to avoid potential NullPointerExceptions when the component form is not initialized
updated ` decodeResource ` and ` decodeResource ` methods to accept an additional ` BitmapFactory . Options ` parameter and improved null handling in ` Shadow
[ java ] use number _ of _ messages constant for number of message in example .
added functionality to prevent next click in the TimelineArrayAdapter to enhance user interaction by allowing users to click on tweet links
added " text " to the unmodifiable data types in PostgresDatabase and PostgresNumberType classes to support additional numeric data types and improve code clarity
make entryprocessorbouncingnodestest cleanup ( # 3683 )
updated state checks to use isRemovableState instead of isHardDeletableState in AmbariManagementControllerImpl and State classes
refactor BridgeServlet logic to check for a non - null thingRegistry before adding the result to ensure that the result is only added when the thing
updated method signatures and logic in CrawlServer and CrawlServer classes to improve code clarity and ensure thread safety when processing robots
updated display name retrieval to check for null before checking for " Teredo " to improve robustness by avoiding potential NullPointerExceptions
added a default ShaderProgram parameter to the SpriteBatch constructor and updated shader creation logic to allow dynamic configuration of shaders based on the default shader
added a property to set " synchronous _ commit = on " in TestUtil . java to enable asynchronous commit behavior in tests
added element type coercion functionality to SortedSetTypeCoercer and updated the ` fillSortedSet ` method in ` TypeCoer
updated confirmation messages in RemoveFileDialogFragment and RemoveFilesDialogFragment to handle folder and local files more effectively to improve user experience by providing clearer confirmation messages
updated condition in URLPathEncoder to check for non - ASCII characters to ensure proper handling of non - ASCII characters in URL path encoding
updated the port calculation for fragment storage in UserContext . java to ensure the correct port is used for fragment storage registration
updated the expect statement in HostResourceProviderTest to return an empty map instead of returning an empty map to ensure that the test returns an empty map
removed the Logger parameter from the loadConfiguration method calls in YarnEntrypointUtils , YarnJobClusterEntrypoint , and YarnSessionCluster
added validation and style initialization methods to SIPCommFrame for better color management to improve code readability and maintainability by centralizing color initialization logic
deleted ShadowHtml . java and updated test assertions in HtmlTest . java to streamline the codebase by eliminating unused shadow classes
added a new file ` StarTreeRecordStoreFactoryBlackHoleImpl . java ` implementing ` StarTreeRecordStoreFactory ` to facilitate the creation of
updated JettyLogger references from " org . eclipse . jetty . http3 " to " org . eclipse . jetty . http3 " and "
removed the ' private ' modifier from the addListeners method in MockSettingsImpl . java and added a new test in MockSettingsImplTest . java
[ hotfix ] [ doc ] fix typo in statehandlestore
updated import statements in HttpAuthMethodPriorityTest , HttpBasicAuthComponentConfiguredTest , and HttpBasicAuthTest to ensure compatibility with the newer Jetty
add team info page data to the page data ( # 11824 )
[ jmeter ] use try - with - resources in try - with - resources
camel - 1145 : add a test to check if a specific port be available .
added BuildTarget parameter to multiple classes and refactored jar parameter retrieval methods in JarBuildStepsFactory to improve code clarity and maintainability by central
updated the link from " validating - cerficates " to " https " in TrustEverythingTrustManager . java to improve clarity and
no effective change - remove unused method getpagesizeval ( )
added a case for CLOSED in IteratingCallback . java to handle the CLOSED event gracefully to improve performance by avoiding unnecessary processing
added a new boolean field ` isAuthorized ` and updated related method calls in ` AccessControlContext ` and ` ProtectionDomain ` to improve access control control
refactor OSGiDeployer to check for AbstractOSGiApp before registering it as OSGiService to improve code clarity and
added support for TIFF codecs and container in DLNAMediaInfo . java to enhance media type handling for different media formats
refactor ` profiledArgumentTypes ` and ` profiledArgumentTypesAssumption ` to use ` types ` and ` assumption ` for better
added a new file ` CubocDesktop . java ` and modified ` Map . java ` to use ` ImmediateModeRenderer20 ` for
updated file paths in PolicyMonitorTest from ` MavenTestingUtils . getTestResourceDir ( " monitor - test - 1 " ) ` to
added a call to removeAllFiles ( ) in TrashbinActivity to ensure all files are removed from the trashbin adapter
replaced ` org . eclipse . jdi . Bootstrap . virtualMachineManager ( ) . allConnectors ( ) ` with ` com . sun .
refactor LLVMCheckGlobalVariableStorageNode to return a boolean instead of a LLVMPointer and add a new CheckGlobalNode class
updated the ` createLauncherEvent ` method to accept an ` Intent ` parameter and improved event data handling to enhance event tracking by associating user intent
added a constant MAX _ BURN _ TARGET _ LOWER _ FLOOR and updated the maximum burn amount calculation to ensure the maximum burn
updated UniqueConstraintSnapshotGeneratorSnowflake to use a wildcard import and modified the snapshot method to handle unique constraints to streamline import statements and
updated SQL item assignment logic in DMLTransformer . java to handle empty insert statements more gracefully to improve code clarity and handle empty insert statements more
updated service ticket validation test from InsecurePgtUrl to SecurePgtUrl and changed service ticket URL from Insecure to Secure to ensure compatibility
added a boolean parameter ` isStatement ` to the ` getDefaultValidFunctionName ` method and refactored the ` getDefaultValidFunctionName ` method to handle
refactor JarLauncher class to improve code organization to enhance maintainability and readability of the code
replaced instances of ` BlockingQueue ` with ` BlockingQueue < ResultHolder > ` and updated related methods to use generics to enhance type safety and reduce potential
added new Dimension dimensions and modified method signatures in DeviceConfiguration , CallGTalkImpl , and OperationSetVideoTelephonyJabberImpl
added a new test method ` testUpdateWithPGobject ` to verify the functionality of ` PGobject ` to ensure that the ` updateObject `
updated password reset logic to handle empty email queries and added a new test for creating a password reset when the user has non - UAA origin to
replaced direct call to getChildNodes ( ) with getDocumentElement ( ) in XMLUtils . java to simplify code and improve readability by using getDocumentElement ( )
refactor caching logic in Cache . java to improve performance and maintainability of the code
rename ` timeInSec ` to ` timeMillis ` in ` Isochrone . java ` and ` SPTResource . java ` to
fix relay relay not work when bindy > - 1
added a new ` Chainer ` class and modified the ` contains ` method to return a new instance of ` Chainer ` to enable chaining
refactor Model class to improve code readability to enhance maintainability and facilitate future updates
updated recordedTime calculation to include a new value of 619315200000L to ensure accurate time calculation for recording time
added a check to resize status if the terminal type is Windows to ensure status updates correctly when the terminal type is Windows
updated output and added a conditional check for host version state before setting back to all host versions to ensure host versions are only set if they are required
refactor integration test cases to use a constant JRE _ PATH instead of a hardcoded path to improve maintainability and readability of the
updated collections from HashMap to LinkedHashSet in multiple classes and added settings builder advice in DefaultMavenExecutionRequest to ensure consistent ordering and enhance configuration management for Maven
changed the initialization of the Operation variable from a try - catch block to a final variable in OperationServiceImpl . java to simplify the code by eliminating
removed unnecessary whitespace in KnativeEnvironment . java to improve code readability and maintain consistency
updated the executor name from " commitlog _ archiver " to " CommitLogArchiver " to ensure consistency in naming conventions
added connect ( ) and connect ( ) methods to CloudSolrClient and created a test for uploading configurations in TestCloudSolrClientConnections to
added synchronized blocks for adding and removing bindings in Breakpoint and DebuggerSession classes to ensure thread safety when accessing shared resources
added a method to clear files and cache in ShadowContext and modified file handling in RobolectricTestRunner and ShadowContext to improve file management and
added LinkedHashSet and TreeMap imports and updated style handling in SecureXStream . java and XStreamPersisterTest . java to utilize LinkedHashSet and TreeMap
[ drools - 2485 ] add method to set kiemodulemodel to internalkiebuilder
refactor soil handling logic in BlockEventListener . java to improve clarity and correctness to enhance code readability and ensure correct soil dryness based on
added a default implementation of the getLocalIp method in FinishedSpan . java to provide a default implementation for getting the local IP
updated ` JdbcStepExecutionDao ` to use ` SerializationUtils . deserialize ( rs . getBinaryStream ( " OBJECT _ VAL " ) )
update comments in AbstractDictionary , BiSegGraph , and HHMMSegmenter classes for clarity and consistency to improve readability and maintainability of the
added " python37 " and " python - gpu " libraries to the resource list in python . java and tensorflow . java to support additional
refactor PluginTab to use a new ` JButton ` for refreshing plugins in a separate method to improve code clarity and maintainability by centralizing
changed log level from info to warn in DefaultHistory . java to improve logging clarity and reduce verbosity
cloudstack - 4892 : fix npe in vmwarestorageprocessor when vm name be null
added a boolean parameter ` true ` to the ` sshd . stop ( ) ` method in ` SftpServerTestSupport . java ` to
refactor ExperimentalMockitoJUnitRunner to improve code readability to enhance maintainability and facilitate future updates
updated GpsSettingsActivity , Session , Utilities , and Utilities classes to utilize the GetBuildSerial method to ensure compatibility with older phones and improve
refactor SwapGBuffers class to improve code readability to enhance maintainability and facilitate future updates
added null checks for spatial and skeletonControl before removing it to prevent potential NullPointerExceptions when spatial is not initialized
added a test for setting smart replies in ShadowRankingTest and updated ShadowRanking to utilize RankingReflector for setting smart replies to
[ java ] do n ' t add a record segment to the archive when there ' s an archive .
removed redundant call to resourceLoader . getConfigDir ( ) in CarrotClusteringEngine . java to streamline code and improve readability
added null check for testRect in WindowsTreeUI and created a new test class bug8004298 to ensure robustness by preventing null pointer exceptions and
updated the type of ` stdArgs ` and ` args ` from ` String [ ] ` to ` String [ ] ` in ` ScriptUtils .
updated return statements in RecommenderMapper , Retriever , and CacheTest to throw TasteException to improve error handling and provide clearer
added ClientInfo import and setup method to SurrogateAuthenticationEventListenerTests to enhance test setup by associating client information with the client information
added a new variable ` isUserView ` with a value of ` false ` in ` CardPresenter . java ` to reset the user view state
refactor GraphvizJavaExecutor to use ` GraphvizUtility ` instead of ` GraphvizJavaExecutorUtility ` to streamline dependency
refactor histogram retrieval in LogDispatcherThreadMetrics to use a variable for constructBatchHistogram and syncLogTimePerRequestHistogram to improve code readability
added a new module - info . java file for sqlite connector exports and dependencies to define module dependencies and dependencies for SQLite integration
added a sleep delay of 500 milliseconds in StreamResetTest . java to ensure proper synchronization during stream reset tests
removed conditional check for " api " web type before creating PermissionsManager to simplify the code and improve readability
refactor DateParser and TestDateParser classes to improve date parsing functionality and maintainability
added a method ` getDepth ` to the ` SpringLoadedState ` class to retrieve the depth of the state based on the context
replaced manual array copying with a constant for minimum size to improve code readability and maintainability by using a constant for minimum size
refactor ExecutionGraph class to improve code readability to enhance maintainability and facilitate future updates
removed swipe - based views from notifications in NotificationActivity and updated notification handling in NotificationRenderer to streamline notification management and improve user experience by eliminating unnecessary
updated exception message handling in DefaultExceptionConverter and updated corresponding test cases in EndpointTest to improve clarity of error messages and enhance test coverage for null invocation
fix npe in glowcontainer when lock be empty .
replaced ` MethodHandle ` with ` java . lang . reflect . Method ` for retrieving the setter to simplify code and improve readability by using reflection instead
updated the casting of integer values from ` int ` to ` int ` in ` MathTest . java ` to ensure correct handling of integer values
updated the return statements in BaseEmailContentFormatter to include " metrics " , " datasets " , and " datasets " in templateData to
added functionality to manage and manage the layout provided panel in LayoutPanel . java to improve user interface responsiveness and maintainability of the layout
added null check for location in ServerCallable . java to ensure robustness by preventing potential NullPointerException when location is null
refactor BuilderFactory , Pipeline , and PipeliningTest classes to improve code organization and maintainability
added null checks for PublicKey parameters in BasicChecker . java to ensure that key parameters are properly validated before generating the public key
refactor MediaTypeRequestMatcher to use a new method ` shouldIgnore ` for checking media types to improve code readability and maintainability by centralizing
updated logging statements in LlapBaseInputFormat to include task number from taskAttemptId to improve clarity and accuracy of task number retrieval during input processing
added spring . main . allow - bean - definition - overriding property to EventServiceTests to enhance test configuration flexibility by allowing bean definition overriding
added null check before closing the indexReader to prevent potential NullPointerException when indexReader is null
changed package declarations and import statements for BTCMarketsStreamingService and BTCMarketsStreamingExchange from package - private to package - private to
added a new test method ` issue151 ` to the ` FencedCodeBlockParserTest ` class to verify rendering behavior of fenced
added a new file ` CompatibilityTest . java ` that tests XML compatibility with DTD files to ensure proper handling and validation of DTD properties
added two new utility classes , PushUtils , and SecurityUtils , in the client package to provide utility methods for push operations in the application
updated TableRebalancer to handle multiple instance states instead of one to simplify the number of replicas and improve clarity to enhance code readability and
updated version numbers and timestamps in ExoPlayerLibraryInfo . java and ExoPlayerLib . java to reflect the latest release and ensure compatibility
log4j2 - 1347 fix test that fail on window due to line break
added SocketTimeoutException handling for EAGAIN , ETIMEDOUT , and TIMEUP statuses in AjpAprProcessor . java to
added default values for friction , restitution , density , and isSensor in FixtureDef . java to ensure default values are set for proper
updated method signatures to include anomaly function specification in multiple classes to enhance flexibility in fetching scaling factors for different anomalies
removed unnecessary shell command execution in LauncherInstrumentation . java to streamline the code by eliminating unnecessary command execution
added unit tests for font and link tag attributes in ResourcesTest . java and modified the return statement in ResStringPool . java to ensure correct functionality
fix GuiStatsComponent . java . patch to use the common directory for GuiStatsComponent . java to improve code readability and maintainability by using
added permission granting logic in Launcher . java to handle call - phone permission requests to enhance user experience by providing prompts when permission is granted
updated return values in SimulationPanel , PlotDialog , BasicEventSimulationEngine , Startup , and Startup classes to include FlightData as a
refactor GeoPointDistanceQuery , GeoPointInBBoxQuery , GeoPointInPolygonQuery , and TestGeoEncodingUtils to use private constants
added a synchronized method ` isDockerAvailable ( ) ` to the ` DockerClientFactory ` class to check if a Docker client is available to improve
added a constant for the VPX codec type " vpx " in CodecTypes . java to provide a default value for the VPX
added a ` coordinatorAddress ` option to the ` DistBuildFactory ` and modified the ` getCoordinatorAddress ` method in ` DistBuild
added a method ` match ` to ` FsUtils ` and refactored timer scheduling in ` WrapTimer ` to improve path matching functionality and
added a conditional check to ensure the entry ' s value is non - negative before adding the entry to labelValues to prevent adding entries that do not
add null check for result and add null check for result in App . java to improve robustness by preventing potential NullPointerExceptions
removed the @ Test annotation from TestPerfBenchMarkDriver . java to clean up the code and improve readability
added a method to set the materialization time in ObjectStore and created a corresponding test in TestObjectStore to ensure proper modification of materialization time
added exception handling for UnsatisfiedLinkError in getModel ( ) , loadModel ( ) , and added error event handling in VoskSTTService
remove the ' is _ ONE _ WAY ' property from the jmssamplerGui and add response code code 200
updated the condition for determining break weight in GlyphView . java to improve clarity and accuracy of break weight calculations
refactor synchronization logic in RCFile . java to improve performance and efficiency to enhance performance and maintainability of the code
added @ AwaitsFix annotation to AutoAddReplicasPlanActionTest . java to address potential issues related to SOLR - 13028
refactor ToePool to include unwound entries for steps and processors to improve clarity and maintainability of the code
removed redundant method calls in ClipboardTransferable and DataTransferer classes to simplify code and improve readability by eliminating unnecessary complexity
hbase - 26144 add infoport to testthriftservercmdline . testthriftservercmdline . testthrift
added a condition to return false if the scanner is at the end of the stream to ensure proper handling of EOF in RegExpScanner
added null checks for enabled metrics and timers in Debug . java to improve robustness by ensuring enabled metrics and timers are correctly processed
added a null check for multiUserChat ' s nickname in ChatRoomJabberImpl . java to prevent potential NullPointerException when checking the nickname
added null and empty checks for filename and length in PApplet . java to improve robustness by preventing potential NullPointerExceptions
refactor refresh token creation logic into a separate method ` createRefreshToken ` to improve code readability and maintainability by encapsulating the creation
updated error message formatting in BuckConfig . java to improve readability to enhance clarity of error messages for better debugging
[ hotfix ] [ yarn ] remove dead code in yarnflinkapplicationmasterrunner
added a synchronized method nativeGetHardwareBuffer to the ShadowNativeImageReaderSurfaceImage class to provide a synchronized implementation for retrieving the HardwareBuffer directly
added SSL URI to the pollingMarketDataService instantiation in BTCChinaExchange . java to ensure proper access to the BTCChina exchange data service
updated the way the output file is written to a file based on the project ' s base directory to ensure the output file is written to the correct
added OauthController and Oauth2PluginTest classes for integration testing to facilitate OAuth authorization functionality in the application
refactor SemgrexPattern class to improve code readability to enhance maintainability and facilitate future updates
refactor ` flatMap ` methods in ` AbstractStreamEx ` , ` StreamEx ` , ` StreamEx ` , and ` StreamEx ` classes
added error logging message to error messages in RestCodec and refactored exception handling in ExceptionToProducerResponseConverters to improve error logging clarity and
updated the condition in RobolectricClassLoader to include " org . specs2 " and " scala . " in addition to " org . specs
changed the condition from checking if the sdp encoding is not in transmittableAudioEncodings to checking if the sdp encoding is not in the
updated the type of ` defaultValue ` from ` SequenceNextValueFunction ` to ` DatabaseFunction ` and added a new test for ` DatabaseFunction `
[ geos - 8071 ] add test case for station3gml31 and station3gml32 in normalizedmultivaluestest
added a boolean flag ` wasInvoked ` and modified HTTP response handling in ` NetworkTestUtils ` , ` UaaHttpRequestUtilsTest ` ,
added a check for ` processor . isConfigured ( ) ` before expanding regex mappings in ` ColumnarDataSource ` , ` RowProcessor ` , and
updated the ` splitIntoThirtyParts ` method to use ` splitIntoThirtySecondsParts ` instead of ` splitIntoThir
added XLCDCommunicator and XLCDController classes for handling G - code responses to enhance functionality for handling XLCD commands in the  universal
[ drools - 131 ] use kiemodule . xsd instead of java ' s kiemodule . xsd
added ` retryTimes > 0 ` and ` Assert . assertTrue ( retryTimes > 0 ) ` to multiple Java files to ensure that retry times are
replaced direct calls to ` awaitThreadState ` with direct calls to ` join ` in ` WorkerProcessPoolTest . java ` to streamline thread
refactor equals and hashCode methods in DelegatingMethod and introduce a new test class DelegatingMethodTest to improve code clarity and ensure proper comparison and
updated FREEZE _ V2 to FREEZE _ V2 and CANCEL _ ALL _ UNFREEZE _ V2
updated the ` command ` method to throw ` ConfigurationException ` and added configuration saving and reload methods to improve error handling and ensure proper configuration management
deleted the ` SpringTransactionHooks ` class and replaced it with ` AbstractSpringTransactionHooks ` to streamline the transaction management process by eliminating unused code
refactor AbstractClassAssert class to improve code readability to enhance maintainability and facilitate future updates
added a new file ` GetUninitializedStringValue . java ` implementing a test class for handling uninitialized String values to facilitate testing of uninitialized
added support for handling provided dependencies in AndroidLibraryDescription and updated related tests to enhance dependency management and improve test coverage for dependency resolution
added a new feature flag ENABLE _ KEYBOARD _ TRANSITION _ SYNC in FeatureFlags . java to enable keyboard transition synchronization
added a static boolean flag ` sSavedBugreport ` to track bug reports to improve performance by avoiding unnecessary logging when the system anomaly message
added a constant for " cinepack " format in FormatConfiguration and updated LibMediaInfoParser to use it to enable support for CINEPACK
added CAMERA _ BOBBING configuration and modified hand movement animation offsets in Player . java to allow dynamic bobbing behavior based on camera b
replace ` data . describe ( ) ` with ` digest . toString ( ) ` in ` GrpcCasBlobUploader . java ` to ensure
deleted the HSQLDBServerFilesFilter class and replaced it with a custom FilenameFilter implementation to streamline the code by eliminating unnecessary dependency on the H
added a null check for restoreFromSeed and restoreFromKey before proceeding to ensure that restoreFromSeed and restoreFromKey are only executed when
updated the API data version from ` getApiDataVideoVersion ( ) ` to ` getApiDataSeriesVersion ( ) ` and added a trace
added a new method ` visitMethodInvocation ` to check for type existence in ` HasTypes ` to ensure proper handling of method invocations that already exist
refactor AmbientCubemap to use a constant for the number of values instead of 6 * 3 to improve code readability and maintainability by
[ netbeans - 114 ] add a message to reset the profiler mode if the profiler be not configure properly .
added checks for zero values in ` GenericUDFMask ` , ` GenericUDFMaskLastN ` , and ` GenericUDFMaskShow
refactored test cases to use TemporaryFolder instead of File . createTempFile to simplify file handling and improve code readability
added isItemStackDamageable ( ) and getHasSubtypes ( ) methods to ItemStack . java and updated method signatures to enhance item handling capabilities and
fix mc - 167447 : update renderstate to use line _ width if it be not present
set the " browser . startup . page " preference to " 1 " in FirefoxProfile . java and set it in FirefoxDriverTest .
updated HTTP response condition in Http1xClientConnection to include CONNECT and GET methods to ensure proper handling of HTTP connections based on HTTP status codes
updated task name from " compile " to " process - classes " in JoobyMojo . java to improve clarity by using a more descript
replace shutdown method with closeIdleConnections method in HTTPHC4Impl . java to ensure proper resource management and prevent potential memory leaks
added a conditional check for aggregate function suffix before adding the metric key in AmbariMetaInfo . java to ensure that the metric name does not
added a method ` setFullscreenParams ` to ` TaskOverlayFactory ` and updated ` TaskThumbnailView ` to use it to enhance functionality by allowing
added a new Java class ` Solution ` that counts integer frequencies using a random integer to provide a way to calculate and display the frequency of
set the SocketChannel variable to null in ClusteredAgentManagerImpl . java to ensure proper initialization and prevent potential NullPointerExceptions
refactor MutisignOperationerGodicTest . java for improved readability to enhance maintainability and facilitate future updates
added error handling for NoSuchElementException in StaxEventItemReader to improve robustness by handling potential NoSuchElementExceptions during fragment reading
updated import statements and modified attribute handling in ShadowTextView and added null checks in TestAttributeSet to improve code robustness and prevent potential NullPointerExceptions
updated import statements from ` com . nimbusds . jose . shaded . json ` to ` net . minidev . json
added support for " AIX " OS name in OS . java and added support for " AIX " family in PKCS11Test .
do n ' t set privateip address for router control ip when create vpn
added a method ` invokeWithoutBlockingWithResultSync ` to the ` Display ` class to provide a way to invoke a ` RunnableWithResultSync
remove PresenceMessageComboTests from the project to remove obsolete test code that is no longer needed
replaced direct casting to ` int ` with ` Math . round ` in ` PortraitPagedViewHandler . java ` to improve performance and
updated method signatures in TestClusterDumper . java for consistency and clarity to enhance code readability and maintainability
hbase - 13232 improve performance of keyvalue . getkeyvalue ( ) ( jesus camacho rodriguez , review by
camel - 14263 : camel - core - add type converter to type converter so it can be use by camel - core .
added conditional task handling in SparkCrossProductCheck . java to ensure proper dispatching of conditional tasks based on the current task type
refactor conditional statements in Launcher , LauncherAppState , and LauncherModel classes to improve code readability and maintainability
updated conditional logic in LoginInfoEndpoint to check for jsonResponse and added unit tests for passcode prompt functionality to ensure proper handling of accountChooser and
added a ` toDescriptiveString ` method to convert ` AssignmentManager ` to a string representation of the assignment state and timestamp to enhance
renamed ` message ` and ` result ` to ` msg ` and ` getResult ` in ` HuobiAccountInfo ` and ` Huobi
added support for " PERIOD " column in MariaDBDatabase and created a test for it in AddColumnGeneratorTest to ensure correct SQL generation for
update portablepipelineoptions to include default environment option for portable worker
added new VersionChangeLogs entries for Android 7 . 1 - you now have Launcher shortcuts .
changed the access modifier of NUM _ MILLIS _ IN _ DAY from private to public in IndexExpressionIT . java and TestUtil . java to
removed a debug print statement from ImageResourceLoader . java to clean up the code and improve readability
[ java ] use aeronclientinvoker instead of aeronclientinvoker to avoid npe .
updated lambda parameter validation logic in mmm Attr . java and added a new class NoWarnOnImplicitParams . java to ensure proper handling of implicit lambda
refactor ` FileMenuFilter ` to use ` showMenuItem ` and ` hideMenuItems ` methods to improve code readability and maintainability by
added new entries for BTC deposit , BTC withdrawal , credit , and reserved8 in BTCETransHistoryResult and BTCETransHistoryJSON
replaced List with Set for series and exceptions in RetryFilterFunctions . java to improve performance by reducing the number of items in the collection
added a @ Deprecated annotation to the PluginLoader class to indicate that the class is outdated and should no longer be used
added a condition to check if the end timestamp is greater than the sequence time in LastQueryExecutor . java and created a new test for last query
added a newline character to the request string in HttpResponse . java to ensure proper formatting of the request string
added a static block to set the log level to ERROR in the BuildImageMojo class to ensure proper logging behavior for HTTP error responses
added a call to set the safe area of the title bar in the Sheet class to ensure proper layout of the title bar in the application
updated loop iteration to reverse the order of elements in TimeSeriesChunkMetaDataList to ensure correct iteration order of TimeSeriesChunkMetaData objects
added a SQL command to ALTER TABLE " RENAME " TO " test _ table " TO " TO " TO " TO " TO " TO
change the access modifier of the copyState method from package - private to public to allow access to the method from other packages
fixed - redissonexecutorservice . executeasync ( ) return a completableFuture instead of a completableFuture . tocompletableFuture ( )
added a constant ` SUFFIX _ SPLIT _ FILE ` and updated file name handling in ` FileLister ` , ` FileSystemSplit ` ,
refactor multiple Orc - related Java files to improve code organization and maintainability
reformatted conditional statements in CompareFunctionsProcessor . java for consistency to improve code readability and maintainability
updated the ` reduceScopeForLimitedSpace ` method to accept a ` expectedSize ` parameter and adjusted its usage in the ` checkAvailableDisk
removed redundant ` toString ` methods from ` SegmentTermVector ` , ` TermFreqVector ` , and ` QueryTermVector ` classes to streamline
added a check to return early if the handler is invalidated and unregistered the task stack listener in AbsSwipeUpHandler and TaskAnimationManager to
added ` getLockTimestamp ` and ` setLockTimestamp ` methods to ` AppPreferences ` , ` PreferenceManager ` , and ` DrawerActivity
added a method to retrieve the artist from the MediaInfoParser to ensure the artist is set correctly based on the stream ' s artist configuration
added null check for remoteMessage in NCFirebaseMessagingService . java to avoid potential NullPointerException when remoteMessage is null
nifi - 145 : fix nullpointerexception in splittext when there be no header
added support for Windows key store in HttpsConnectorFactory to ensure compatibility with Windows and improve key store handling
increased DEFAULT _ CHECK _ TIMEOUT from 400 to 1 _ 000 in RestTemplateSenderTest and WebClientSenderTests to increase test timeouts
added a conditional check for FILE _ NOT _ FOUND in FileSyncAdapter . java to handle cases where the remote folder is not found to improve
added animation functionality to the Slider class to allow dynamic animation behavior based on user - defined settings
reformatted assertions in LineSeparatorProcessorTest for consistency to improve readability and maintainability of the test code
updated maxWidth and maxHeight values from 512 to 1024 in TexturePacker . java to accommodate larger sizes for texture packing
added a new test method ` UnnecessaryParenthesesTest ` to verify that ` J . Ternary ` is unwrapped
camel - 16165 : camel - hazelcast should not throw exception if there be no message body .
added TextFeedbackTest class and corresponding test case in AllTests and TestRunner to facilitate testing of TextFeedback functionality in the codebase
replaced Math . round with Float . compare for score comparison to improve performance by using a more efficient comparison method
updated DENSITY _ 560 , DENSITY _ 2HD , DENSITY _ 7K , and DENSITY _ HD
added a new method ` arrayClassElementOffset ( ) ` to ` HotSpotReplacementsUtil ` and modified ` ArrayCopySnippets ` to
refactor the logic for processing stage totals in DefaultLogPublisher . java to improve clarity and correctness in handling total performance measurements
added support for remote SCM systems in Configuration and RuntimeEnvironment classes to enable support for remote SCM systems in the application
[ MieleApplianceHandler ] include end and rinse _ hold state in onoffstate .
replaced instances of ` StatsLogCompat ` with ` SysUiStatsLog ` in ` StatsLogCompatManager . java ` to utilize the new
updated logger variable name from ' log ' to ' LOG ' for consistency to improve code readability and maintainability
added tests for project generation event handling in EventSerializationTest . java to ensure proper serialization and serialization of ProjectGenerationEvent objects
ggb - 118 : selection manager should update the spec point when a function be select .
refactor JavaCompiler class to improve code organization to enhance maintainability and readability of the code
added error handling for non - positive ` remainingTime ` in ` IntegrationTestTimeBoundedRequestsWithRegionReplicas . java ` to ensure that
refactor multiple Java files for consistency and clarity to improve maintainability and readability of the codebase
added additional flags " -- gc - sections " and " nocopyreloc " to the ldflags list in NdkCxxPlatform .
updated the handling of the fallback URI in SpringCloudCircuitBreakerFilterFactory and added a new test for filtering with variables to improve URI formatting and
refactor multiple test classes for consistency and clarity to improve maintainability and readability of the test codebase
added null checks for URI and localName in ReadOnlySharedStringsTable . java to improve robustness by preventing potential NullPointerExceptions
added a new method ` getAccountNet ` to ` HttpMethed ` and a corresponding test in ` HttpTestAccount001 ` to provide
added a check for non - negative availTextWidth in SwingUtilities2 . java and modified the GTKLookAndFeel initialization in Test6635110 .
replaced the instantiation of FlatteningIterator with a direct instantiation of FlatteningIterator to simplify the iterator initialization and improve readability
removed special characters " < b > " and " < / b > " from the ` TweetLinkUtils . removeColorHtml ` method calls
refactor SecurityCenterSettingsServiceClient and its package - info files to improve code organization and maintainability
added a test method to reload and delete any existing question in InstructorFeedbackEditQuestionsUiTest to ensure that a new question is deleted
updated return values in HSSFSheet . java and added assertions in BaseTestSheet . java and HSSFSheet . java to improve row
added permission checks for launcher activities in InstallShortcutReceiver , Launcher , and Launcher classes to ensure malicious intents are handled correctly during launcher activities
[ java ] send cluster session event when sequencer be start .
refactor hashCode methods in AbstractParquetMapInspector to use AbstractParquetMapInspector instead of StandardParquetHiveMapInspector to improve code
added a condition to flush the session if the remote connection is closed to ensure proper resource management when the remote connection is closed
updated the SplitReader interface to extend AutoCloseable and removed the close method from the AutoCloseable interface to ensure proper resource management and prevent potential
removed the deepCopy method from GsonBuilder to streamline the code by eliminating unused properties
added a static final LLSourceMap NOT _ FOUND and updated return statements in LLScanner . java and LLSourceBuilder . java
refactor file handling in RestClientRequestImpl to streamline file operations to improve code readability and maintainability by reducing redundancy
removed unnecessary whitespace in GrblController . java to improve code readability and maintain consistency
refactor MockFactory to use SearchingClassLoader and introduce a new SearchingClassLoader class to enhance class loading logic to improve code clarity and maintainability
added a new file TestRefreshFlagBug . java that implements a simple application for handling refresh flags to demonstrate the functionality of the refresh flag functionality in
added LEFT _ SEMI _ JOIN condition to the condition checks in ConstantPropagateProcFactory . java to ensure proper handling of LEFT _ SEMI JOIN
updated conditional checks for response completion in HttpReceiver and HttpSender to ensure proper termination of responses based on the HTTP status code
renamed ` arrayLengthOffset ` to ` arrayOopDescLengthOffset ` across multiple files to improve clarity and consistency in naming conventions
http : / / issues . apache . org / jira / browse / amq - 4217 - add region policy to the broker test
refactor multiple Java classes for improved consistency and clarity to enhance maintainability and readability of the codebase
added a check to return early if the app context is not running before stopping it to ensure that the application is only stopped when it is not running
changed the return type of the drawItem method from void to GlyphLayout to provide a more concise return value for the drawItem method
updated SpringmvcClient to use MetricsPublisher instead of JsonUtils for retrieving metrics to improve metrics tracking functionality and enhance error handling for JSON processing
changed the type of ` SAFE _ ACCOUNT _ AGE _ DATE ` from ` AccountAgeWitness > ` to ` AccountAgeWitness `
refactor code formatting and improve readability in StructureHeader , StructureReader , and StructureReader classes to enhance code readability and maintainability
added ` ResourceUrlProviderExposingInterceptor ` and ` ResourceUrlProviderExposingInterceptor ` to the ` CasWebflowContextConfiguration
added DexReturnInliner class and created a new DexBody class to transform return statements to enhance the transformation process by using descriptive
updated the method for retrieving configuration properties in RuleResource and added new properties in EnrichedRuleDTO to enhance access to the configuration properties for better
removed LinkOption . NOFOLLOW _ LINKS from the return statement in PathResource . java and updated arguments in AliasCheckerSymlinkTest . java
[ hotfix ] [ table - common ] remove sqldialect from executionentry
replaced ` rDotJavaPackages ` with ` rDotJavaPackagesSupplier ` in multiple classes to improve flexibility by allowing the addition of specific Java packages
add a new test class ASTPackageDeclarationTest for testing package name retrieval to ensure correct parsing of package name images in the PMD parser
added a method to set the minimum cross compaction unseq file level in IoTDBDescriptor . java to allow configuration of the minimum cross compact
[ hotfix ] [ runtime ] move activeresourcemanager into active package
updated the test method name from ` testCheckColumn _ WrongOrder ` to ` DisabledTestCheckColumn _ WrongOrder ` to clarify
updated URI creation in ZipResource to handle URISyntaxException and added a new test class ZipResourceTest for feature file parsing to improve error handling and ensure
refactor code formatting and improve thumbnail creation logic in ExpandableUploadListAdapter . java to enhance readability and maintainability of the code
refactor RobolectricTestRunner to merge parent and method class configurations into a hierarchy to improve clarity and maintainability of the configuration handling logic
fix modelloader not load block and item if registry name be null
removed the ` abstract ` modifier from multiple methods in ` AbstractDataChangedListener ` , added a default implementation in ` WebsocketCollector ` , and
updated JSONPojoConvertor to handle Enum types and improved test cases in JSONPojoConvertorTest to enhance type safety and ensure correct handling of enum
added a warning if the ` -- view ` option is deprecated in IjProjectCommandHelper . java to inform users that the option is outdated and
refactor GWTRequestWrapper to use ` byte [ ] ` instead of ` String ` for originalPayload and streamline input stream handling to improve
updated GyroControl to implement OrientationEventListener and added orientation correction functionality to improve handling of device orientation and improve mouse positioning based on device
change the value of BIOME _ LIST _ SIZE from 256 to BiomeGenBase . getBiomeGenArray ( ) . length to ensure
updated println statements in GetInterfaceTest . java to print statements instead of println statements to improve code readability and maintainability
removed redundant assignment of the environment variable in FileCompilerConfig . java to streamline code and improve readability
added a new interface ByteToLongCollector with various supplier , combiner , and characteristics methods to provide a way to collect byte - to - long
added a new boolean parameter ` ` preload ' ' to the ` MMapDirectoryFactory ` class to allow users to turn off preloading based on
added custom metrics for enabled components in BukkitPlatform to enhance user experience by providing custom metrics for enabled components
refactor QuickConnectREST class to improve code readability to enhance maintainability and facilitate future updates
added aspect ratio and default card image in CardPresenter . java to improve card image handling for tile ports
[ ds - 232 ] fix login redirect for xmlui ( # 11348 )
added a check for non - empty arrays before cloning longValues , doubleValues , and byteValues in VectorHashKeyWrapper . java to prevent potential
added a new test method ` testSystemNanoTimeJit ` to ` TimeChangeTest . java ` for testing system . nanoTime ( ) `
modified MultiPartFilter and MultipartFilterTest to trim whitespace before processing lines to improve robustness by preventing potential NullPointerExceptions
added experience drop event handling in EntityLivingBase . java and created LivingExperienceDropEvent class in ForgeEventFactory . java to improve event handling and
updated error messages in OpenUVBridgeHandler , OpenUVReportHandler , and OpenUVReportHandler to improve clarity and accuracy of error messages for bridge
remove UnsupportedOperatorsVisitor from beamqueryplanner . validate ( sqlNode )
refactor GraphEnhancementQueryEnvironment to utilize RdepsFunction for retrieving subgraphs to improve code clarity and maintainability by centralizing
refactor Character class to improve code readability to enhance maintainability and facilitate future updates
added logic to flag the expansion of an entire rocket based on the selection to ensure proper scaling behavior for different rocket types in the ScaleDialog
replaced calls to ` Arrays . toString ( ) ` with ` bytes . getBytes ( 4 ) ` in ` UpdateableResultTest . java ` to
refactor time boundary handling for offline and realtime Pinot queries to improve clarity and functionality to ensure proper time boundary management for offline and realtime
removed unnecessary conditional checks before adding the socket reference to the poller in AjpAprProcessor and Http11AprProcessor to simplify the
updated regex pattern and improved album title handling in EightmusesRipper . java to enhance the accuracy of album titles and enhance user experience
replaced calls to ` mDevice . wait ( SearchCondition < R > ` with ` TestHelpers . wait ( SearchCondition < R > ) `
added a condition to check if the profile is not a phone and not landscape to ensure proper layout handling for phones that are not in landscape mode
updated hibernate query assertions to use ` QueryImpl ` instead of ` PROPERTY ` to ensure proper handling of unwrapped queries in test cases
refactor the method ` readMatchingLines ` to use a new method ` readMatchingLines ` for reading matching lines to improve code readability and
removed the dynamic check for the result stream method in JpaQueryExecution . java to streamline the code by eliminating unnecessary complexity
add null check for entity before proceeding with processing to avoid potential NullPointerExceptions during processing
added a test method to clear a map when value attributes are indexed to ensure that the entry processor clears the map when value attributes are indexed
added request listener methods to OperationSetJitsiMeetToolsJabberImpl and created a new OperationSetJitsiMeetTools
updated color calculation in Utils and updated HTML message formatting in UtilsTest to improve clarity and consistency in color representation
added EasyBind functionality to disable text input items in DefaultMenu and EditorMenus to improve user experience by disabling text input options
updated the scratch path for the link tree in Aapt2Link . java to ensure the correct path is used in the build process
replaced instances of ` new Capture < > ( ) ` with ` Capture . newInstance ( ) ` in ` ExternalJavacTest . java ` and
ggb - 132 update selection when clear geos ( ) and algebracontrollerd . clearselectedgeos ( ) be call
added error handling for MarkedYAMLException and EmptyStackException in YsldValidator . java to improve error reporting and provide clearer
added an ` isCanceled ( ) ` method to multiple classes to implement the ` isCanceled ( ) ` method in ` BehaviorCall ` ,
added a default method ` isAnnotationPresent ` in multiple classes to provide a default implementation for checking annotations to simplify the codebase by eliminating redundant methods
added a default implementation of the removeAllWidgets method in UILayout . java to provide a default implementation for the removeAllWidgets method
[ hotfix ] [ yarn ] fix yarnsessionfifoitcase and yarntestbase
opensslcipher . getoutputsizeforupdate ( ) should return the maximum of outputsizeforupdate ( ) and outputsizeforfinal ( )
added support for forcing a high - res transcode of high - res content in Fire TV Stick to ensure proper transcoding behavior for Fire TV
[ beam - 11346 ] fix datasetsourcemock to not use providerclassname in readsourcetranslatorbatch
updated import statements and modified listener selection logic in GpsLoggingService . java to improve clarity and functionality of listener management based on the preference settings
updated the ` putString ` method to return a byte array instead of a boolean array and added JNI support in ` Relay ` to improve
added support for BaseItemDragListener in FolderIcon . java to enhance drag handling for shortcuts in the launcher
added a new method ` createEmptyArtifact ` to ` RepositoryConnector ` , ` FileSystemConnector ` , and ` SignavioConnector ` to handle
reformatted code for better readability in RabbitMQPublisherImpl . java to improve code clarity and maintainability
removed unnecessary calendar check for month and year in VideoViewerActivity . java to simplify the conditional logic for loading video files
added compaction of the file path in SftpOperations . java to ensure proper file path formatting for SFTP operations
camel - 11499 : camel - weather - test should use a timeout of 20 second instead of 1 second .
updated variable name from ' groupSort ' to ' sortWithinGroupStr ' for clarity to improve code readability and maintainability
added support for LARGE _ FERN plant species in DoublePlant . java and updated block type checks in BlockType . java to enhance
changed the focus behavior of the tree from focusable to requestFocusEnabled in TranscodingTab . java to enable request focus for better user experience
added multiple throw statements in VirtualMachineManagerImpl . java to improve error handling by throwing the original exception
removed the acceptLicense method from DB2TestSystem and updated import statements in DockerDatabaseWrapper to streamline license acceptance logic and improve code clarity
refactor DoubleModel to use a setter method for UnitGroup and introduce unit unit handling in GeneralOptimizationDialog to enhance code clarity and maintainability by
added a new static final CurrencyPair BTC _ ZMW in CurrencyPair . java to facilitate currency pairing for BTC and ZM
added a method to set the number of samples in TestPBRLighting . java to allow dynamic adjustment of the number of samples based on the
updated assertions in StepWithSimpleTaskJobParserTests to remove redundant lines to improve code readability and maintainability
changed variable declarations to be final in CentralAuthenticationServiceImplTests . java to ensure immutability of variable declarations
updated the syntax for the ggbabs method in ExpressionNode . java to improve code readability and maintainability
refactor service output handling in DDLSemanticAnalyzer to improve clarity and maintainability of the code
[ jbrules - 2576 ] add support for bigdecimal coercion in objectcreationexpr
added " org . eclipse . jdt . " to WebAppContext . java to hide the " org . eclipse . jdt . " used by jetty
changed the return statement from ` super . useAuthCache ( ) ` to ` super . useAuthCache ( ) ` in ` Negotiate
updated the namespace assignment to capitalize the first segment to ensure consistent naming conventions for namespaces
camel - 14197 : camel - direct - consumer - not available exception should be use camelexchangeexception instead of camelexchangeexception .
added null check for ZooKeeper before setting it to prevent potential NullPointerException when accessing the ZooKeeper object
updated the progress bar step message in Loader . java to improve clarity of the progress bar for mods phase 2
replaced direct calls to ` mVibrator . vibrate ( ) ` with ` runOnUiHelperThread ( ) ` in ` All
added a method to update the last remote stream ID in HTTP2Session . java to ensure proper handling of stream ID updates
added text antialiasing hint to the Graphics2D instance in EditorHeader , EditorToolbar , and Preferences classes to enhance text appearance and enhance user
[ java ] : move term window size to sent position instead of term offset in driver publication .
refactor : remove static import of ` ` static ' ' in ` ` ctannotationimpl ' '
refactor ExoPlayer class to improve performance to enhance audio performance and user experience
removed the native method ` getRGBPixelImpl ` and updated the return statement in ` WRobotPeer . java ` to streamline the code and improve
added a new method ` newPrintStream ( FileOutputStream fos , String enc ) ` to handle UTF - 8 encoding to ensure consistent output encoding
updated vibration duration from 1 to 25 in TouchableMovementMethod . java to improve the responsiveness of the movement method
updated import statements in AppEngineSqlCloudSession . java and FlybushDataClearer . java , and added imports in TestEnvironment
updated WebSocketClient constructor parameters to remove unnecessary parameters to simplify constructor signature and improve code readability
simonstewart : do n ' t open test _ i18n . html if it do n ' t exist
replace ` handleIllegalArgumentException ` with ` handleLoadConstantException ` in ` BytecodeParser ` and ` SharedGraphBuilderPhase ` to improve error
added a call to restore the auth system state in XmlWorkflowServiceIT . java to ensure proper authentication state management during tests
added a new comparator class ` LowercaseComparator ` to the ` CoNLLUFeatures ` class to handle case - insensitive comparisons to improve code
refactor JavadocTool to use a separate method for parsing JavaFileObjects to improve code readability and maintainability by reducing duplication
simonstewart : add a test for ` ` toggle ' ' for ` ` selectomatic ' ' and ` ` toggle ' '
added a validation check for the number of keys in HighestKvno . java to ensure that the number of keys is actually 9 to avoid
added error handling for retrieving attributes in HDF5BatchReader to ensure that only Huge objects with 1 record are supported to improve robustness by
[ beam - 10220 ] fix bug in bigqueryio and bigqueryio . expand ( pdone ) .
updated the XmlRootElement name from " copySnippetRequestEntity " to " createTemplateRequestEntity " and added API implicit parameters in ProcessGroupResource to improve
added a new file TestMultiANewArray . java to test the functionality of writing a Java class file to ensure that the Java class file is
[ hotfix ] [ config ] remove unused config option usesecondarystoragevm
modified the handling of head block IDs in SyncBlockChainMsgHandler . java to ensure correct retrieval of block IDs based on the number of
added a method to set the theme for the preview tab content to ensure the preview tab has the correct theme configuration
added a null check before closing the reader in VectorizedParquetRecordReader to ensure proper resource management and prevent potential memory leaks
added a new test method ` testHttpIdleTime ` to ` ConnectorTimeoutTest . java ` to validate the idle timeout behavior of the HTTP server
added new properties for dictionary lists , dictionaries , and signatures in Constants . java and updated Dictionaries . java to utilize PropertiesUtils for property
replaced ` readIdentifier ( ) ` with ` readTagName ( ) ` in ` DocCommentParser ` and added a new method ` readTagName (
updated JpaPagingItemReader initialization and method signatures in JpaPagingItemReaderIntegrationTests . java and JobLaunchingGatewayParserTests . java
changed log level from warn to debug for child nodes in DistributedQueue . java to reduce verbosity and reduce log verbosity
refactor ColorExtractionService to use a new method ` getHotseatPallete ( ) ` for retrieving the hotseat palette to improve
added methods to set default data table entry and cell transformers in TypeRegistry . java and updated imports in TypeRegistry . java to enhance type
removed an assertion for newAvailableShared in AtomicRemainder . java to streamline the code by eliminating unnecessary assertions
refactor multiple Java files to improve code organization and organization to enhance maintainability and readability of the codebase
removed the ` isProjectGenerated ` boolean field and its getter method from ` ProjectGenerator ` and ` WorkspaceAndProjectGenerator ` to simplify the project
updated conditional check in DriverUtils . java to improve readability to enhance code clarity and maintainability
added a new contact form route and a new Contact class to handle contact forms to enhance the application ' s functionality by allowing users to form contact forms
guacamole - 392 : change simpleuser to use systempermissionset instead of permission .
updated the RELEASE _ VERSION from 20 to 21 in IconCache . java to reflect the new release version
[ drools - 4882 ] fix typo in traitfactory . setmode ( )
updated method names from ` findWhereNameLikeAndActive ` to ` findWhereNameOrAliasLikeAndActive ` across multiple classes to improve clarity
replaced direct call to ` IOUtils . closeSafely ( true , perDocConsumers . values ( ) ) ` with ` IOUtils . closeSafe
refactor AbstractDataChangedListener , HttpLongPollingDataChangedListener , and RuleServiceImpl classes to improve code organization and maintainability
added a click listener to the overflow button in ExpansionViewHelper to enhance user interaction by allowing the overflow button to be clicked
updated error messages in multiple classes to use " is a non - null reference " instead of " is not null " to improve clarity and accuracy of
added line height updates for the help button in AlgebraViewW and InputTreeItem classes to improve user interface responsiveness by ensuring the
move protobufferutilitiestest to core . util package to fix test
refactor divider position and width calculations in JabRefFrame . java to ensure proper handling of divider positions and side pane width correctly
added crossreference handling and improved entry insertion logic in AuxSubGenerator and BibtexDatabase classes to enhance functionality to handle crossreferenced entries
[ geos - 8071 ] use non - serializable map in geoserverfeaturesource and geoserverfeaturelocking to avoid typecastexception
rename extractTypes to dataTables in RecipeDescriptor . java to improve clarity and consistency in naming conventions
added event handling for MetaContactAvatarUpdate events in MclStorageManager , MetaContactListServiceImpl , and ContactList classes to enhance contact avatar
updated import statements from ` Command ` to ` Command ` in ` ShellCommand . java ` and ` ShellFactoryImpl . java ` to ensure compatibility
added a test method to clean up the audit log table post parameters by position in AuditLogTest . java to ensure proper cleanup of the audit log
refactor the ` inject ` method to return an ` Object ` instead of a ` T ` instance to improve type safety and avoid unchecked cast warnings
added regex pattern matching for comment lines in ACLFileParser and updated test cases in ACLFileParserTest to improve comment parsing logic and ensure correct parsing
updated MapRDBFormatMatcher and MapRDBSubScan to include FileSystemPlugin and modified the isReadable method signature to include additional parameters to enhance
added an ` ancestorDimensionValues ` map and updated node concatenation logic in ` StarTreeImpl ` and ` TestStarTreeNodeImpl ` to improve the
added a condition to check if the user is unlocked before dumping the plugin to ensure that the plugin is only dumped when the user is
rename widthStr to positionStr in Photo . java to improve clarity and consistency in naming
refactored conditional logic in PKIXValidator . java for better readability to improve code clarity and maintainability
[ hotfix ] [ hadoop ] [ test ] add archunit test for test code
updated package names from ` org . apache . shenyu . integratedtest . ` to ` org . apache . shenyu . integrated .
cloudstack - 4892 : fix acl check for network acls that do n ' t exist
updated the method for retrieving the shape type from ` remove ` to ` get ` in ` RuntimeTypeAdapterFactoryFunctionalTest ` to ensure correct
added functionality to store undo info for properties in App . java to improve performance by ensuring undo information is stored only when necessary
replaced direct access to ` gradProp ` with ` AccessController . doPrivileged ` in ` XRCompositeManager . java ` to enhance security by ensuring
updated StreamCloseTest to use Awaitility ' s await method for determining the number of streams to improve code readability and maintainability by using
removed the ` doAfterFlush ` method from ` DocConsumer ` , modified ` perFields ` initialization in ` TermVectorsConsumer ` , and
updated ConfigurationMetadataGenerator to handle non - deprecated configurations and added a NestedConfigurationProperty annotation in AbstractJpaProperties to improve configuration metadata handling and
refactor capacity and mask variables in BiInt2ObjectMap , Int2ObjectHashMap , and Int2ObjectHashMap classes to improve code clarity and
updated HIVE _ MOVE _ FILES _ THREAD _ COUNT configuration from 25 to 15 and refactored file rename logic in Hive
added logging statements and enhanced exception handling in ParallelNioSender . java to improve error logging and provide clearer error information during message processing
added a null check for the context before creating a new SchemeAndroidIDE instance to avoid potential NullPointerExceptions when context is null
svm : remove custom classloader support from nativeimagegeneratorrunner
changed the return type of modifyGrantedAuthorities method from void to List in SwitchUserAuthorityChanger and SwitchUserProcessingFilter classes to improve type safety
refactor JaxrsIntegrationTest and JaxrsSpringIntegrationTest classes to extend JaxrsIntegrationTestBase and add Spring Boot tests to improve integration test
refactor query timeout handling in HikariPool to utilize a new method ` setQueryTimeout ` to improve code readability and maintainability
added tests for GeneralTestsData , SupplementaryCharactersTestData , and SupplementaryCharactersTestData in XslSubstringTest . java
updated closing method in StaxEventItemWriter to use delegateEventWriter instead of eventWriter to ensure proper resource management and prevent potential memory leaks
added support for MariaDBSequences in MariaDBDatabase and updated related logic in CreateSequenceGenerator to ensure compatibility with MariaDB database versions and improve
updated formatting in MappedResizeableBuffer , UnsafeBuffer , and Int2ObjectCacheTest classes to improve code readability and maintain consistency
added TableDataManagerProvider imports and set server metrics in multiple test files to enable offline monitoring of server metrics in the test suite
added support for the " jsse . enableMFLNExtension " property in SSLExtension . java to enhance security by enabling MFLN extension
replaced ` ObjectIterator < T > ` with ` ObjectHashSetIterator ` and added new test cases in ` ObjectIterator ` and ` ObjectHashSetInteger
updated charRemaining length calculations in MainActivity , Compose , and TweetFragment to correctly account for shortened URLs to improve code clarity and
added a new constant ` DATAPOINT _ TTL ` and updated related methods in ` CassandraDatastore ` , ` WriteBuffer ` , and ` Write
updated the ` checkForAndKillXcodeIfRunning ` method to accept an ` enablePrompt ` parameter and adjusted related logic to enhance user experience by
added a method to retrieve a terrain at a cell ' s coordinate in the TerrainGrid class to enhance the functionality of retrieving terrains at a
added default value printing in Pretty . java and created a new T6665791 . java file T6665791 . java with Java compiler tests
added error handling for FileNotFoundException in ResourceLoader . java to provide clearer logging when quest keys are not found
added a condition to check if the push is disabled before proceeding with push support to ensure that push functionality does not interfere with push requests
refactor PointValue class to improve code readability to enhance maintainability and facilitate future updates
updated block signing logic in BlockUtil . java to ensure proper signing of local witnesses in the block transaction
added null check and security checks in FileSystemView and Win32ShellFolder2 classes to ensure robustness by preventing potential null pointer exceptions and enhance security
updated row height retrieval to use getMaxHeights ( ) instead of getRowHeights ( ) and modified the copyContent method to accept a PdfP
refactor undo note handling in ListFragment to use SparseArray for better memory management to improve performance and maintainability of the undo note selection process
added logic to manage feedback question and response IDs in UploadBackupData . java to enhance functionality for managing feedback questions and response comments
removed null check for getTransferData in bug8024061 . java to simplify error handling by throwing an exception when data is not returned
# 118 - remove unused pstmtdelegate in ebeaninternal . server . jdbc
replaced the implementation of ` Padding ` with ` Rect ` in ` AppWidgetResizeFrame . java ` and ` Launcher . java ` to
refactor MethodHandle instantiation in NashornBeansLinker . java to improve readability and maintainability of the code
refactor ClassGraph and ScanResult classes for improved readability to enhance maintainability and clarity of the codebase
updated CountDownLatch variable names from ` latch ` to ` goAwayLatch ` in ` IdleTimeoutTest . java ` to improve clarity and consistency
replaced calls to ` getMessage ( ) . getMessage ( ) ` with ` hasMessageThat ( ) ` in ` IterableSubjectTest . java ` to
replaced ` ThreadLocal ` with ` null ` for the ` currentBook ` variable across multiple classes to ensure the ` currentBook ` variable is set to
added support checks to the vote method in ContactSecurityVoter to ensure that the vote method supports the specified class type and prevent runtime exceptions
removed unused imports from DataLoader . java to clean up the code and improve readability
added rowsAffected parameter to postUpdateLog methods in AbstractUpdateCommandStep and UpdateCountCommandStep to track the number of rows affected in the update
ggb - 132 fix margin for scaler in euclidiandockpanelwabstract
set foregroundFPS and backgroundFPS to 60 in JglfwApplicationConfiguration . java to allow more than 60 fps for improved performance
added ObjectReleaseTracker assertions to HdfsTransactionLog , TransactionLog , and HdfsTransactionLog classes to ensure proper tracking and release of
replaced DefaultWebSocketFrame with a ChannelFutureListener for closing WebSocket frames to streamline WebSocket frame handling and improve code clarity
replaced instances of ` TestApplicationEventListener ` with ` TestApplicationEventListener1 ` and ` TestApplicationEventListener2 ` in ` StateMachineErrorTests `
refactor SettingsActivity to use a new method for setting the list background color to improve code readability and maintainability by centralizing background setting logic
updated StringUtils import from org . apache . commons . lang3 to org . openhab . core . util and added null check for line initialization to
added a method ` accumulate ` to the ` JavaUserDefinedAggFunctions ` class for calculating sum and count based on a weighted value to enhance
[ hotfix ] [ test ] fix checkstyle violation in replicationsink
replaced Set with Map for regexp caching in RegExpFactory . java to improve performance by using a more efficient cache for regexp instances
added a reset method to the GameThread class to reset the game thread to ensure proper resource management and prevent memory leaks
added a login method to the DigestAuthenticator class to check if the realm matches the authentication service name to ensure proper handling of Digest credentials in the authentication
refactor parameter handling in SavedRequestAwareWrapper to improve parameter merging to enhance code clarity and maintainability by reducing redundancy in parameter management
updated logging messages in BasicConfigurator , LoggerContext , and ConfigurationAction classes to improve clarity and consistency in logging messages
replaced ` waitPoint . countDown ( ) ` with ` this . wakeup ( ) ` in ` CommitLog ` and ` HAService `
added a condition to check if the Android SDK version is not a LOLLIPOP and added a method to check for Android O version to ensure
updated SchemaInfoLevel from minimum ( ) to basic ( ) in SchemaCrawlerTest . java to align schema info level with the new basic schema level
updated XMLStreamWriter initialization to use BufferedOutputStream instead of ZipOut to ensure proper resource management and prevent potential memory leaks
updated UTF - 8 encoding handling in TestPayloads . java to improve character encoding handling and ensure compatibility with UTF - 8 encoding
fix mc - 103516 : do n ' t update world . getlist ( ) if the entity be not in the list
added new container adapters " psiprobe . Tomcat10ContainerAdapter " and " psiprobe . Tomcat101ContainerAdapter "
[ drools - 1076 ] fix marshalling of multi - accumulate ( ) and multi - accumulate ( ) in ProtobufInputMarshaller
refactor case statements in NowSearchTerm . java and SearchTermBuilder . java to improve code readability and maintainability
pdfbox - 4892 : make pdfcloneutility public
refactor RemoteEndpointServiceAccessStrategy to use SpringExpressionLanguageValueResolver for endpoint URL resolution and headers to improve code clarity and maintainability by using
added a protected method ` newResponseBuilder ( SolrQueryRequest , List < SearchComponent > components ) ` to the ` SearchHandler ` class to
added notification for command start in AsyncBackgroundTaskManagerTest to ensure that the command start is properly notified during background task execution
refactor ` computePreviewDrawingParams ` method to include a null check for ` mReferenceDrawable ` before calling ` computePreviewDrawingParams ` to
refactor tokenizer and filter handling in LukeRequestHandler . java to use CharFilterFactory instead of TokenFilterFactory to improve code clarity and maintainability by
removed unnecessary null checks for ' plot ' , ' generator ' , and ' hotspot ' arguments from AbstractCategoryItemRenderer . java to streamline argument
added a verbosity option to the JavacStep class and modified the createSubContext method to accept an Optional < Verbosity > to enhance verbosity
added a check for oracle database type before converting schema to uppercase to ensure compatibility with Oracle database types
updated the string concatenation in AsyncLoggerAllThreadContextImplementationsTest . java to include the log4j context ' s class name to improve clarity
added a new file TestShrinkToOneRegion . java with a main method that launches System . gc ( ) to demonstrate the functionality of the shrink
updated the split method in SandboxTestRunner to use Splitter for splitting custom packages to improve code readability and maintainability by using a more
replaced ` utf8ToString ( ) ` method calls with direct calls to ` context ` in ` AnalyzingInfixSuggester ` to simplify
updated attachment handling in PushsaferMessageBuilder to use ` localAttachment ` instead of ` attachment ` to ensure proper handling of HTTP and HTTP data
removed the showLabelStats method from ModelExplorer , SequenceModelExplorer , and StripProvenance classes to streamline output reporting and improve clarity in
pdfbox - 4892 : remove unnecessary null check , a suggest by valerybokov
removed the ' final ' modifier from the FORMATTER functions across multiple field test files to ensure consistent formatting across different field types
updated UDFRound class to use BigDecimal and RoundingMode instead of Long to improve precision and correctness of the evaluation method
refactored configuration handling in GraalJSScriptEngineFactory to use ConfigParser for injection and use to improve code readability and maintainability by
changed class access modifiers from package - private to public in Test1 and Test2 classes to allow access to these classes from other packages
updated permission handling and plot handling in PlayerEventListener . java to improve clarity and functionality by using a more descriptive variable name
added a session parameter to the getAdditional method in ConditionAndOr , ConditionInConstantSet , and TestOptimizations classes to enhance functionality by allowing
replaced ` LongProducer ` with ` NumericDocValuesField ` in ` BaseNormsFormatTestCase . java ` to ensure consistency in naming conventions
added tests for creating boxes , circles , and contact objects in Box2DCharacterControllerTest . java to enhance test coverage and ensure proper behavior of
added tests for FLIGHT _ RECORDER _ OPTIONS and modified thread buffer size handling in TestMemoryOptions to ensure correct behavior of memory size
removed redundant assertions in ObjectAlignment and Options classes to streamline code and improve readability
added a ` getTargetPackage ` method to ` AbstractAndroidInstrumentationTestJVMArgs ` and implemented target package extraction in ` AndroidManifestReader ` to
refactor DocHelper class to improve code readability to enhance maintainability and facilitate future updates
updated the initialization of acceptableThrowawayItems to use an ArrayList to ensure proper initialization of the list of acceptable throwaway items
updated casting for boolean , byte , and short methods in Test6987555 . java to improve type safety and reduce potential runtime errors in method
reformatted code for better readability and consistency in MessageHandler . java to improve code clarity and maintainability
refactor Inflection class to improve code readability to enhance maintainability and facilitate future updates
added getLocale ( ) and setLocale ( ) methods to EvaluationContext class to enable setting and retrieval of the locale from the EL context
removed the import of the Plugin class from SummaryPrinter . java to streamline the code by eliminating unused dependencies
added a break statement to the switch statement in DrawerActivity . java to ensure proper handling of case statements in the DrawerActivity
updated import statements in MongoQueryCreator . java to use a wildcard import and improved query object retrieval to enhance code readability and maintainability by using
ww - 3902 add user logger factory to the loggerfactory ( # 118 )
updated test methods in AdminAddPeerWithP2PDisabledAcceptanceTest from ` adminAddPeerFailsWhenP2PDisabled ` to `
updated bean names from " livenessStateHealthContributor " and " readinessStateHealthIndicator " to " livenessStateHealthIndicator " and " readiness
added concurrent map handling for PStore configurations in LocalPStoreProvider to improve performance by ensuring concurrent access to PStore instances
refactor the ` deleteFiles ` method to be private and improve readability to enhance encapsulation and maintainability of the code
replaced instances of ` Provider ` with ` ServiceProvider ` and updated related methods in ` ServiceLoaderSpliterator ` , ` TypeUtil ` , and ` Type
added try - catch block around findField and setField methods in JavaInteropReflect . java and JavaObjectMessageResolution . java to improve error
added method ` isToolchainCreated ` to check if toolchains are created and updated toolchain lifecycle checks to ensure that toolchains are
added a boolean flag ` contextAddedToEngine ` and modified the synchronization logic in ` PolyglotEngineImpl . java ` to ensure proper context
updated condition checks to use ` contains ` instead of ` indexOf ` for consistency to improve readability and maintainability of the code
updated linker flags from " - lpython2 " to " - lpython3 " in PrebuiltCxxLibraryDescription and related classes to
replaced ` onConfigurationChangedInternal ` with ` updateRecentsRotation ` in ` AbsSwipeUpHandler ` and ` RecentsView ` classes to
updated listener type checks to include generics in multiple Java files to enhance type safety and prevent potential NullPointerExceptions
update the method call from ` newBlock ` to ` getHeader ( ) . getHashAsString ( ) ` in ` AbstractBlockChain . java `
updated method call from ` getStorePathCommitLog ( ) ` to ` getStorePathPhysic ( ) ` in ` DefaultMessageStore .
[ hotfix ] [ micrometer ] remove unnecessary try - with - resources statement in micrometermetricmanager
added statistics to track get message transfer and miss counts in CompactionLog . java to improve tracking of message counts for better tracking of received messages
added @ Deprecated annotations to multiple Java files to indicate that these classes are outdated and should no longer be used
added functionality to check for system UI objects in AbstractLauncherUiTest to enhance user experience by allowing users to check for system UI objects
changed logger and principals and sessionIds from static to final in SessionRegistryImpl . java to ensure immutability and enforce immutability of
added a check to return false if the cookieJar is empty in InMemoryCookieStore and a test case in NullUriCookieTest to ensure proper handling
added toString ( ) method to BonsaiValue and improved logging statements in BonsaiWorldStateArchive to enhance debugging capabilities and provide clearer
changed the return type of getText methods from String to CharSequence in ITextRepository , LimitedSizeCacheTextRepository , and NoCacheTextRepository classes to
added a @ NotYetImplemented annotation to the AlertsTest class to indicate that the test is not intended to be used in the future
added a try - catch block around the returnConnection method in SocketConnector . java to handle potential IO exceptions to ensure proper resource management and handle potential
rename ` CMD _ ESCAPER ` to ` CREATE _ PROCESS _ ESCAPER ` and update related classes accordingly to improve clarity and
added synchronization to heartbeatExecutorService in DbTxnManager . java to ensure thread safety during heartbeat operations
refactor ` transformBuildResultIfNotPresent ` to ` transformBuildResultAsyncIfNotPresent ` and introduce a new ` wrapWithTracingAndCancellation `
added a method ` updateFirstLineShowing ( ) ` to handle drag - selecting text out of the TextArea ' s bounds to improve user
added temporary and staging directories to the configuration overlay in TestInformationSchemaWithPrivilege . java to ensure the correct directory structure is used for testing purposes
refactor graphics configuration retrieval logic in Component . java to improve readability and maintainability of the code
tika - 164 : fix test failure in legacy mode .
refactor pipeline processing logic to improve clarity and maintainability to enhance code readability and ensure proper handling of pipeline tasks
updated PrintTagList . java to handle - model and - model arguments more effectively to improve command - line argument handling and provide clearer error messages
updated SQL parsing to use ` getTable ( ) . toString ( ) ` instead of ` getFullyQualifiedName ( ) ` and added a new test for
updated exception handling in JournalCorruptionEofIndexRecoveryTest to use EOFException and improved message assertions to enhance error reporting and ensure proper handling of
[ java ] fix race condition in startfromtruncatedrecordinglogtest . teststartfromtruncatedrecordinglogtest . test
updated the calculation of the outer rectangle in LineBorder . java to use a float instead of an integer to improve the accuracy of the arc calculation in
added null and empty checks for galleryImages in PostGalleryTypeImageRecyclerViewAdapter . java to ensure that only valid gallery images are processed
updated deployment ID column handling in StandardChangeLogHistoryService and created a new column in CreateDatabaseChangeLogTableGenerator to ensure deployment ID is correctly
pdfbox - 4892 : rename printfields to interactive . form , a suggest by valerybokov
removed the ` moreColumnsOk ` parameter from the ` canUseIndex ` methods in ` AlterTableAddConstraint . java ` to simplify method signatures
added a provisional engine map and updated engine management logic in QuickfixjComponent to improve engine management and ensure proper management of provisional engines
added displayZoomControls property and related methods to RoboWebSettings . java to allow dynamic control of zoom controls in the RoboWebSettings class
add corporea block and slab block to allow customization of corporea .
refactor ConnectionFactory class to improve connection handling to enhance maintainability and readability of the code
added EnableDisableMenuItems ( ) method to EnableDisableMenuItems ( ) in GpsMainActivity . java to disable menu items based on user
updated the message resource for empty favorite headline and favorites filter list in ExtendedListFragment . java to improve clarity and functionality of the message for better
hhh - 14499 fix unit test failure due to serviceregistry
added auto resize mode and auto create columns from the table in MotorMountConfigurationPanel . java and updated constructor in MotorConfigurationPanel . java to ensure
updated LINE _ SEPARATOR to use system property for line separator to improve flexibility by allowing dynamic configuration of the line separator
added getter and setter methods for creator and subject properties in POIXMLProperties . java and updated test cases in TestPOIXMLProperties . java
removed unnecessary whitespace in HandlerWrapper . java to improve code readability and maintain consistency
[ java ] check for non - empty cnc file before check if it do n ' t exist .
refactor ` UnsatisfiedTypeBounds ` to use ` FooCommand ` instead of ` Marker ` and update related methods accordingly to enhance type safety and
added methods to handle J - Mod files in ClassFileSourceImpl . java to ensure correct class path handling for J - Mod files
replaced ` canonicalizer ` with ` @ Nullable ` annotations in ` TreeBackedElement ` and ` TreeBackedPackageElement ` classes to simplify
updated token request creation in Saml2TokenGranterTest and UserTokenGranterTest to include request parameters to enhance token granting capabilities by
updated the method call from ` arrayLength ` to ` valueRangeObject ` in ` AbstractFromPropertyValueRangeDescriptor . java ` to ensure the correct
added a ` sync ` method to ` ZooKeeperWatcher ` and implemented it in ` ZKAssign ` and ` ZooKeeperWatcher ` classes to
added checkEglException checks for current context in GlUtil . java to ensure proper exception handling when no current context is available
added a new test method ` testRuleFlowGroupDeactivate ` to ` ExecutionFlowControlTest ` and modified the ` DefaultAgenda ` to
added a return statement in HystrixDashboardConfiguration . java to ensure proper handling of configuration failures
removed unnecessary try - catch block for PipeNotExistException in DropPipeProcedure . java and improved error handling in IoTDBPipeIT . java to
refactor ClientQueueDisruptionTest to use @ After annotation and add cleanup method to improve code clarity and ensure proper cleanup of HazelcastClient
replace SignaturePrinter with DefaultJavaPrettyPrinter in CtReferenceImpl . java to improve code clarity and maintainability by using a customizable pretty printer
changed the visibility of the validateInstance method from public to protected to allow subclasses to access the method for instance validation
updated import statements in GeoPointField , GeoPointTokenStream , and GeoPointPrefixTermsEnum to improve code clarity and maintainability
added a new file ` FakeBuildable . java ` that implements ` AbstractBuildable ` and modified ` OnDiskBuildInfoTest . java `
update itemstack handling in GuiIngameForge . java and UniversalBucket . java to use isEmpty ( ) instead of getItem ( ) method to
rename ` path ` to ` timeseries ` in ` TSParser . java ` and update related test cases in ` SQLParserTest . java
added a check to return 0 if the velocity is less than an EPSILON to ensure that the velocity is within acceptable limits before proceeding
replaced calls to ` getBucket ( ) . create ( ) ` with ` _ storage . create ( BlobInfo . newBuilder ( BlobId . of
added a finally block to ensure proper closure of the transport block in TestHighwayTransport . java to ensure proper resource management and prevent potential memory leak
added methods to create and replace history views in DbTriggerBasedHistoryDdl , PostgresHistoryDdl , and PostgresDdl to enhance
updated the parameter in the checkEngine method call from 2 to 3 in CarrotClusteringEngineTest . java to correct the expected value for the
added JUnit @ Ignore annotation to SynDataReplyDataLoadTest . java to temporarily disable a test that needs to be rewritten
refactor ParserCacheCommand to use ParserStateObjectInputStream and introduce a new ParserStateObjectInputStream class to improve code organization and ensure proper class deserialization
added null checks for ` changeLog ` and ` objectQuotingStrategy ` in ` ChangeSet ` and ` DatabaseChangeLog ` to ensure
updated Metainfo parsing method from ` parse ` to ` fromXmlStream ` in ` SliderAppsViewControllerImpl . java ` to ensure proper
deleted the CsrfControllerAdvice . java file to remove unused CsrfControllerAdvice class to streamline the codebase
refactored path handling in AntCompiler to utilize a new method ` quotePathList ` to improve code readability and maintainability by
added scrim animation and alpha property handling in Launcher and AllAppsBackgroundDrawable classes to enhance user experience by allowing dynamic blending of background
updated parsing logic in TypeInferenceUtils and added new test cases in TypeInferenceUtilsTest to improve precision in parsing long values and enhance test coverage for
regenerate client with updated copyright year ( # 4382 )
added validation for long path prefixes in WindowsPathParser and improved test cases in PathOps to ensure that long path prefixes can only be used with 
removed InetSocketAddress parameter from MulticastSocket instantiation in Promiscuous . java to simplify socket initialization and improve code readability
removed unnecessary whitespace in TestWildcard . java to improve code readability and maintain consistency
modify the return statement to clone the nBits object instead of returning it directly to ensure that the nBits object is not mutated after cloning
changed the access modifier of deriveCollectorName method from private to protected in ProfilerCollector . java and added tests in TestProfilerCollector . java to
datamongo - 2043 - do n ' t omit type hint when write simple type .
added performance measurement for proxy factories in ProxyMaker . java to improve performance monitoring for proxy factory creation
added @ SuppressWarnings ( " unchecked " ) annotations to GroovyEngine . java to suppress unchecked warnings related to unchecked methods
updated ConnectionException messages to include the original exception as a parameter to improve error handling by providing more context in connection exceptions
replaced the ` reinflateWidgetsIfNecessary ( ) ` method with ` getWorkspace ( ) . reinflateWidgetsIfNecessary ( ) `
added a new file ` DeleteInsideFileDialogTest . java ` that tests file deletion and file dialog functionality to facilitate testing of file dialog functionality and
update Display . update ( false ) and processMessages ( ) in LwjglAbstractDisplay . java and remove unused imports in TestSoftware
added file handling and HTML verification in the InstructorStudentListPageUiTest and AppPage classes to enhance user experience by providing more
added handling for " onlyrun " and " method " configurations in TestIgnorance . java to ensure tests are ignored based on the
removed the pointer parameter from the fling method signature in ScrollPane . java to simplify the method signature by eliminating unnecessary parameters
updated the condition for retrieving content in QueryDslJpaRepository to handle null pageable values to improve robustness by preventing potential NullPointerExceptions
added a method ` computeMemorySize ` to the ` MemoryManager ` class and corresponding tests in ` MemoryManagerTest ` to enhance memory size computation
increase test timeouts from 2000000 to 20000 in JMSPublisherConsumerTest and PublishJMSTest classes to allow more time for tests to
refactor SnowballAnalyzer class to improve code organization to enhance maintainability and readability of the code
refactor previousIndex assignment and reset logic in StreamingAggTemplate . java to improve clarity and maintainability of the code
refactor error handling in BytecodeParser to use a static method for better clarity to improve code readability and maintainability by reducing duplication
added a new method ` stream ( TableIdentifier < ENTITY > tableId ) ` to the ` StreamSupplierComponent ` class to provide a default
updated logging messages to reflect the fully played state of watched files to improve clarity and accuracy of logging for better debugging
updated method signatures in InjectorProxy , ReflectionUtil , and StandardInjectorProxy to use ` newInstance ` instead of ` setAccessable ` to improve
[ hotfix ] [ stream ] remove unnecessary close ( ) call in flinkstreamcreatefunction
added unit tests for ` ShowStatementTest ` , ` AlterStatementTest ` , and ` UnsupportedStatementTest ` classes to ensure correct functionality of SQL
replace return null with an empty list in AppleTest . java to ensure that the method returns an empty list instead of null
updated the test message from " Deliberate error , to " Quality Distribution , Inc . " to clarify the importance of Quality Distribution in the test
added a condition to check for websocket reconnect and modified WebSocket connection handling in DeconzBridgeHandler and WebSocketConnection classes to enhance websocket connection handling and improve
removed the attribute for ACEGI _ SECURITY _ AUTHENTICATION _ KEY and ACEGI _ SECURITY _ TARGET _
hbase - 24113 testregionreplicareplicationendpoint fail on slow machine due to retry table creation
added PMS initialization and configuration in FormatRecognitionTest . java to ensure proper handling of PMS configuration during tests
[ scb - 2576 ] add support for create ova data disk template ( # 2576 )
updated imports and annotations in PrincipalAttributeRegisteredServiceUsernameProviderTests . java to use JUnit4 and JUnit4 classes to ensure compatibility with
added multiple @ Override annotations in CentralAuthenticationServiceImpl , RemoteCentralAuthenticationService , and NoOpLockingStrategy classes to ensure proper method
updated column names from metricVal to metricVal1 in AppendOnlySchemaIT . java to improve clarity and consistency in column naming
added a check to ensure deleted documents count equals segment doc count to prevent corrupt index errors due to document count mismatches
added methods to log exceptions and trace messages in the SIP logger to improve error logging clarity and provide access to the SIP logger ' s name
updated FilamentFactory . java to add a comment regarding the length requirement for staves w / a starting barline
changed the default value of ` handleFileUploads ` from ` true ` to ` false ` in ` VertxPlatformHttpServerConfiguration ` to
added a new test method ` doFilterDefaultRequireCsrfProtectionMatcherAllowedMethodsCaseSensitive ` to ` CsrfFilterTests ` to
replaced static class Fields with direct access to HotSpotResolvedJavaField in HotSpotObjectConstantImpl . java to simplify the code and improve readability
updated method names in SpellCheckComponent , AbstractLuceneSpellChecker , and DirectSolrSpellChecker to use ' addFrequency ' instead of '
replaced ` Instant . now ( ) ` with ` Instant . now ( ) ` and added ` withWatermark ( now ) ` in ` FileIO
refactor SqmCteStatement to use a copy method for cteDefinition to improve code clarity and maintainability by centralizing the copy
added import statement for ResultSetMetaData in QueryCompilerTest . java to facilitate the use of ResultSetMetaData in query processing
updated the command line arguments in JsLibrary . java to include the root path from the project filesystem to ensure the correct path is used for the
updated slider angle from - 180 to Math . PI in RailButtonConfig . java to adjust slider positioning based on the correct angle range
updated the encloser position from x - 8f to y - 9f and refactored save handling in Saves . java to improve
added expressionLanguageSupported ( true ) method calls in KerberosProperties . java to ensure compatibility with additional expression language features
removed conditional checks for remoteMountPointComponent before setting translate and rotate degrees in ThirdPersonRemoteClientSystem . java to simplify the code and improve read
added ScrimView to the setupViews method and updated related classes to include ScrimView to enhance view setup functionality and improve animation smoothness
[ hotfix ] [ state ] add periodic materialization option to changelog state backend
added a ` value ` field and its getter and setter methods in ` ProtocolParameter ` and updated ` List ` and ` ParamTagHandler ` to
added a new test method ` testChunkingWithHead ` to the ` ChunkingServlet ` class to ensure that the ` ChunkingServlet `
added a boolean field ` isBumped ` and modified the ` parseDetails ` method to return a boolean indicating whether the details have been bumped
added Content - Type header to SwitchToPostInterceptor and updated SearchRequestUnitTest to include " Content - Type " header in SearchRequestUnitTest to ensure
refactor EmbeddedClientConnector class to improve code readability to enhance maintainability and facilitate future updates
phoenix - 164 ignore setfetchsize ( ) in resultset . setfetchsize ( ) .
added two new instances of AndroidNet in AndroidDaydream . java to ensure proper initialization of the AndroidNet object
updated the formatting of the ` numRowsConsumed ` and ` _ segmentMaxRowCount ` parameters in the ` LLRealtimeSegmentDataManager ` class
removed the ` false ` parameter from the ` getDepositAddresses ` method calls in ` KrakenAccountService . java ` to simplify the method calls
hbase - 13388 remove old codec from hbase - prefix - tree ( addendum )
added inflationFailed flag to prevent back navigation when inflation fails to improve user experience by preventing back navigation when inflation fails
refactor PushbackInputStream class for improved readability to enhance maintainability and facilitate future updates
refactor LoweringPhase to use an abstract class and improve node processing logic to enhance type safety and maintainability of the code
updated error message from ` download _ folder _ failed _ content ` to ` sync _ folder _ failed _ content ` in ` ErrorMessageAdapter .
updated parsers from " \ n " to " \ \ \ r \ n " and adjusted NORMAL _ CHAR handling in Makefiles . java
replaced direct call to ` reader . getDeletedDocs ( ) ` with ` MultiFields . getDeletedDocs ( ) ` in ` ReadTask .
updated refresh handling in SimpleBatchNode to use setBoundRefresh ( ) instead of super . setTransformRefresh ( ) to ensure proper refresh flags are
[ gr - 16220 ] fix stack overflow check for @ uninterruptible .
added a framebuffer size callback to handle window size changes to ensure proper resource management and prevent potential memory leaks
replaced ` centerTaskParallaxToRight ` and ` centerTaskParallaxOffscreen ` animations with ` offscreen ` animations to improve
replaced instances of ` NodeLiteralNode ` with ` NullLiteralNode ` and updated related methods to use ` NullLiteralNode ` instead of ` Node
added setLength methods to CompoundFileWriter , FSDirectory , and IndexOutput classes for managing file lengths to improve file handling efficiency and ensure correct file length
removed unnecessary FileDescriptor handling and added new test imports in AntScriptGenerator and LwjglDebugStarter to streamline the code and
camel - 16165 - camel - aws2 - s3 : use source bucket and source key instead of copysource ( )
added permission handling for " * " in RuleBasedAuthorizationPlugin and updated test cases in TestRuleBasedAuthorizationPlugin to enhance authorization checks and improve test coverage
updated ZookeeperClientServerRegisterRepository to handle null and empty data cases and improved register DTO handling to enhance robustness and prevent potential null pointer
refactor methods in ReturnsDeepStubs to use ` deepStub ` instead of ` makeDeepMock ` and ` makeDeepStubAnswer ` to
added checks for empty call values in Runtime . java to ensure safe handling of empty contract call values
update debug log message format in BibEntry . java to include the date object to improve debugging by providing more context for date parsing errors
added NoSuchAlgorithmException handling to the mapPBEAlgorithmToOID method in PKCS12KeyStore . java and updated PBE _ ALGO
updated variable names from ` length ` to ` inputLength ` and modified related logic in ` TIFFReader . java ` to improve clarity and ensure
added a validation check for invalid JobParameters in CommandLineJobRunner to ensure that invalid job parameters are provided to prevent runtime errors
updated message content assertion to use " foo " instead of " \ r \ n " in SmtpTests and MailTests to ensure consistency in test
added brackets for " equals " , " hashCode " , and " targetConnection " in ExtendedConnectionDataSourceProxy . java to enhance type safety for
refactor LongSequenceGenerator to use AtomicLongFieldUpdater instead of synchronized access to improve thread safety and performance by reducing synchronization overhead
added a new file ` Test . java ` with a static method ` sum ( ) ` and a main method ` main ( String [ ] )
changed private fields in ShadowWifiManagerTest and WifiUsabilityStatsEntryBuilder to protected in WifiUsabilityStatsEntryBuilder to
added a new Java file ` Solution ` to implement a algorithm for permuting an integer array to implement a algorithm for permuting algorithms based on
replace Map with ConcurrentMap for column family stores in Table . java and Gossiper . java to improve performance and prevent concurrent modification exceptions
refactor the handling of screen dimensions and orientation changes in TaskbarManager . java to improve clarity and maintainability of the taskbar creation logic
refactor SyncFutureCache class implementation to improve performance and maintainability of the code
updated DUBBO version from " 2.1 . 1 " to " 2.1 . 2 " and LOWEST _ VERSION _ FOR _ RESPONSE _
[ net . sourceforge . pmd ] avoid uselessstringvalueof rule
added a new test method ` testEllipseNoseconeDrag ` in ` SymmetricComponentCalcTest . java ` to validate the behavior of the
added a new parameter ` targetMaxTypeShardSize ` to the ` HollowProducer ` constructor and updated related methods accordingly to allow dynamic configuration of the
added new versions " 5.0 . 2 - cfs " and " 5.0 . 2 - nocfs " to the TestBackwardsCompatibility
refactor CompilationTask class to improve code readability to enhance maintainability and facilitate future updates
updated assertions in TestSemanticAnalysis and refactored database parameter handling in DDLTask to improve clarity and maintainability of database description display logic
added a call to ` executeClearDatabaseChangeLogTableStatement ` in ` AbstractJdbcDatabase ` to execute the ClearDatabaseChangeLogTableStatement `
refactor RestClient and CallPath classes to improve version handling and null safety to enhance code clarity and prevent potential null pointer exceptions
phoenix - 132 add synchronization to ensure that the phoenix driver be close .
do n ' t return null if touchmodel . getmeasurement ( ) return null
added ` After ` method to ` ConflictsResolveActivityIT ` and modified ` FolderPickerActivityIT ` to extend ` AbstractIT ` and
[ gr - 24144 ] optimize read optimization in dev mode .
added a check for the length of ` copy ` in ` StringHelper ` and a corresponding test in ` StringHelperTest ` to ensure correct handling
refactor type handling in JpaQueryCreator and add a new method in UserRepository to improve code clarity and ensure correct handling of NOT _ CON
do n ' t allow push branch id to be push if it be too long .
added a call to dispatch a copy of the message and its alias list in P25MessageFramer . java to ensure proper handling of the message
added null check for the handler before checkClosed ( ) in WebSocketImpl . java and created a new test case in WebsocketTest . java to ensure
[ ds - 2576 ] fix discoveryit to use indexableindexableclaimedtask instead of indexableclaimedtask
refactor padding calculations in AppWidgetResizeFrame and Launcher classes to use Launcher ' s getPaddingForWidget method to improve code clarity and
added methods to hide all apps in TaskbarUIController , TaskbarAllAppsController , and BaseActivityInterface to enhance user experience by ensuring
removed synchronization from the launch method in CrawlJob . java to simplify the launch process by eliminating unnecessary wait time
updated the calculation of the point in JavaSEPort from ` e . getX ( ) ` to ` canvas . x ` and ` e . getY
refactor notification handling in UploadService to use startForeground method instead of notificationManager to improve code readability and maintainability by consolidating notification
add a new test method ` testStaticFinal ` to ` ExcessivePublicCountTest ` for testing static final methods in ` Foo ` to
hbase - 24165 set hbase . client . retries . number to 3 in testthrifthbaseservicehandler . testthrift
change log level from info to debug in TransactionalMessageServiceImpl . java to reduce log verbosity and reduce verbosity
added exception handling for FileNotFoundException in ResourceUtils . java and changed logging level from debug to trace in AbstractCipherExecutor . java to improve error handling
added a new method ` getmarketsummaries ` to ` BittrexTickersResponse ` and updated ` BittrexMarketDataServiceRaw
refactor EntityEntry class to improve enum constant retrieval and access to enhance code clarity and maintainability by centralizing enum constant retrieval
replaced instances of ` endpoint . getClass ( ) ` with ` endpointClazz ` across multiple classes to simplify session registration and improve clarity in session management
updated character list initialization to include ' \ u000A ' , ' \ u000B ' , and ' \ u001A ' to ensure
added stylesheet setter and getter methods to ResourceService , ResourceHandler , and DefaultServlet classes to enable dynamic configuration of the default CSS stylesheet based on the
added a call to clearIndex ( ) in TestFiltering . java to ensure the index is cleared after running tests
updated the method call from ` ObjectParameterStrategy . class ` to ` PointerParameterStrategy . class ` in ` X86MethodGenerator . java `
updated the condition from PostgresDatabase to CockroachDatabase in CreateSequenceGenerator . java to ensure compatibility with the newer database type for
removed the condition for checking the name of " java . lang . String " in the ObjectStreamClass class to simplify the code and improve readability
replaced UnsatisfiedLinkError with SymbolNotFoundError in Library . java and added a new SymbolNotFoundError class in SymbolNotFoundError . java to improve error handling by
added a conditional check for onlyPseudoFields and modified document retrieval logic in BinaryResponseWriter . java to ensure that only fields with pseudo fields are processed
added PING and PONG handling in WebSocketImplBase and created a test for pausePing functionality in WebSocketTest to ensure proper handling of 
updated NON _ IDENT _ ESCAPES string from " - " to " - " in RegExpScanner . java to ensure proper handling of
updated DnsResolverProvider to utilize dynamic DNS cache configurations and added a new test for rotational server selection with cache options to enhance flexibility in
added a conditional annotation for MessagingTracing in TraceMessagingAutoConfiguration . java to ensure compatibility with messaging tracing configurations
refactor SQL query handling in SQL queries to simplify identifier quoting logic to enhance code readability and maintainability by simplifying SQL queries
updated import statements in IDELanguageClientImpl , IDEEditor , IDEEditor , IDEEditor , IDEEditor , and IDE
added a condition to verify the closing tag status in XMLLightweightParser to ensure proper handling of XML tags in the parsing process
removed the setVisibility ( GONE ) method from TouchCharInput . java to simplify the code and improve readability
added a null check for the current user before comparing IDs to avoid potential NullPointerExceptions when checking for the current user
added a conditional check for the index before setting a member in JSObjectLinker . java to ensure proper handling of non - - negative index values
refactor DefaultUniqueTicketIdGenerator and HostNameBasedUniqueTicketIdGenerator to simplify constructor parameters and improve suffix handling to enhance code clarity and maintain
added a @ Deprecated annotation to SecurityConfig . java to indicate that the class is outdated and should no longer be used
added ` @ Deprecated ( forRemoval = true , since = " TODO " ) ` annotations to multiple Java files to indicate that these classes are outdated
deleted JoglDebugAdaptor . java and updated GuiceStartup . java files to remove redundant code to streamline the codebase
added ` toString ` methods to ` ExtraFieldPropagation ` and corresponding unit tests in ` AWSPropagation ` to improve string representation of ` ExtraFieldPropagation
added PendingIntent import and updated content intent assignment in FileDownloader and FileUploader classes to enhance notification functionality for better user experience
added a private method ` set ( ) ` and refactored the ` nextOrd ( ) ` method in ` Lucene80DocValuesProducer
refactor DateTimeFormatter class to improve date formatting to enhance code readability and maintainability
refactor desktop properties handling in WToolkit . java to remove dependency on Class . forName to simplify code and improve readability by eliminating unnecessary class loading
added null and empty checks for administratorCredentials in KerberosOperationHandler to ensure that administratorCredentials is properly validated to prevent potential NullPointerExceptions
added a new constant ` MAX _ WIDTH _ SCALE _ FOR _ LARGER _ SCREEN ` and adjusted width calculation based on device
added rendering calls for drawing window color in PSurfaceJOGL . java to ensure proper rendering of the drawing window with the correct color
refactor Hashing class to improve hashing logic to enhance performance and maintainability of hashing operations
updated the method signature of the accept method from ` file ` to ` folderPath ` and modified the logic for checking file names to improve file handling
updated the ` addToListIfNeeded ` method to include a ` contentDescriptionInt ` parameter and added a new string resource resource for user information to enhance
remove redundant null check for newType in J . java to improve code clarity and prevent potential NullPointerExceptions
increased the ACTIVITY _ START _ DELAY from 500 to 800 milliseconds to increase the activity start delay for better user experience
added a new constant ` WEBAPP _ HOME ` in ` SolrJettyTestBase ` and updated its usage in ` JettyWeb
removed redundant diameter assignment and added a call to clearSelection ( ) in ThrustCurveMotorSelectionPanel . java to streamline the code and
added import for BufferUtil and invoked clearToFill method in ByteBufferPool . java to utilize BufferUtil for buffer clearing functionality
updated ` EntityActionService ` to use ` HasId ` instead of ` EdgeEventActionType ` and modified the ` processNotificationRules ` method
updated configuration keys from " authorization . ldap . groupBase " to " authentication . ldap . groupObjectClass " and " authentication . ldap . group
added methods to delete exchanges and queues in DurableOnTransient . java to ensure proper resource management and prevent memory leaks
[ hotfix ] [ test ] remove timeout from bulkslotproviderimpltest
updated connection handling in PingService and added error handling in ServerInfoService to improve error handling and provide clearer error reporting for failed connections
refactor CompositeHandlerAdapter class to improve code readability to enhance maintainability and facilitate future updates
refactor Quartz2Adapter class to improve code readability to enhance maintainability and facilitate future updates
added a try - catch block around the execution of the lookup method in SulongLibrary . java to handle IllegalStateException gracefully to improve robustness
update Spring Security schema version from 6.3 to 6.3 in multiple files to ensure compatibility with Spring Security ' s latest security features
updated the ` newNameResolver ` method to accept ` Args ` instead of ` Helper ` and added synchronization context handling in ` DiscoveryClientNameResolver
added a check for non - empty annotations before updating the position in JavacParser . java and introduced a new method in TestAnnotatedAnonClass
added " com . sun . naming . internal . " to CheckPackageAccess . java to ensure compatibility with package naming conventions
changed the default value of strict from false to true in StaxEventItemReader . java to enable strict behavior for the Stax event parsing
added an ` isExhausted ` boolean array and modified the ` readPartition ` method to accept an ` isExhausted ` parameter to
refactor ActionResetingPool class to improve code readability to enhance maintainability and facilitate future updates
updated the condition for determining if the light state is in XY mode and added a null check for the XY state to ensure proper handling of
refactor folder creation methods to use a targetCell array instead of a child view to improve code readability and maintainability by centralizing folder creation
added import for FileDisplayActivity and modified showingLoadingDialog method calls in FileOperationsHelper and OCFileListFragment to ensure the loading dialog is
added a null check for the UIgestureFile before initializing XML logs to avoid potential NullPointerExceptions when the UIgestureFile is
updated method calls from ` toUpperCase ( ) ` to ` toLowerCase ( Locale . getDefault ( ) ) ` in ` FieldNamingPolicyTest . java `
added a call to setListeners ( ) in XmlSuite . java to ensure the result has the correct listener configuration
added a new method ` loadWithNewGlobal ` to load scripts with a new global to enhance functionality by allowing dynamic loading of scripts with new global
added ` fromJsonString ` and ` toJsonString ` methods to ` StarTreeIndexSpec ` and updated test cases in ` TableConfigTest `
added import statement for ObjectPostProcessorConfiguration in HttpSecurity , HeadersConfigurer , OAuth2LoginConfigurer , OAuth2LogoutConfigurer , OAuth2LoginConfigurer
replaced single quotes with single quotes in AndroidFileHandle , GwtFileHandle , and FileHandle classes to ensure consistent handling of single quotes in file paths
[ drools - 102 ] fix null pointer exception in in operator
added import for FieldCache and commit ( ) and purgeFieldCache ( FieldCache . DEFAULT ) in TestDistributedSearch . java to ensure proper cleanup
added a new test method ` testBoundaryMessageEventOnSubprocessAndInsideSubprocessMultiInstance ` in ` MessageBoundaryEventTest . java `
replace ` method ` with ` target ` in ` resolveInterfaceOrVirtualCall ` and ` resolveStaticCall ` methods across multiple classes to improve method
http : / / issues . apache . org / jira / browse / amq - 4296 - add messagegrouphashbucketcount to queue
added constants for NETSCAPE _ SLOT _ ID , PRIVATE _ KEY _ SLOT _ ID , and FIPS
added alignment support to Layout and modified startRenderering method to return a boolean to enhance widget addition functionality by allowing alignment of widgets
added JUnit @ Ignore annotation to UnalignedCheckpointITCase . java to temporarily disable the test due to potential issues
added imports and imports for various midi classes in JDK13Services . java to ensure proper handling of different data types in the
added a condition to check if the keyword reference already exists before adding it to keywordToReference to avoid duplicates when the keyword reference is already present
added a check to set the size of each processor exchange pairs based on the type of pairs to ensure that the size is correctly assigned based on the
removed unused methods from SegGraph , SegToken , and WordDictionary classes to streamline code and improve maintainability
[ hotfix ] escape telegraf character in flavorstatsdlinebuilder ( # 644 )
add udp port to member . add support for udp .
rename ` OperatorMulticast ` to ` OperationMulticast ` in the codebase to improve clarity and consistency in naming conventions
increased the timeout duration from 1 second to 100 seconds in EventBusTracerTestBase . java to allow more time for message sending in the event bus
added a try - finally block around the failure handling in VertxTestBase . java to ensure proper resource management and prevent potential memory leaks
added a synchronized destroy method to the SessionFactoryServiceRegistryImpl class to ensure proper resource management and prevent memory leaks
refactor methods to use ` openLocalhost ( ) ` and ` openLocalhost ( ) ` for accessing JWT token from local storage
refactor test methods in IValueUtilsTest to improve clarity and structure to enhance readability and maintainability of the test code
added a task stack listener for clearing invisible states in RecentsView to improve user experience by ensuring invisible states are properly cleared during animations
pdfbox - 4892 : do n ' t use date pattern a suggest by valerybokov
camel - 14263 : camel - cxf should initialize factorybean ' s property if it ' s null
refactor animation handling in ContentFillItemAnimator to use a dedicated method for ending pending animations to improve code readability and maintainability by encap
added logging statements and adjusted play time calculation in LauncherAnimationRunner . java to improve debugging capabilities and ensure correct playback duration for debug devices
added a conditional check for BailoutOnException in C1XCompilation . java and modified return statement in C1XOptions . java to
changed variable names from " signup " and " forgot _ password " to null in Links . java and updated assertions in IdentityZoneConfiguration
[ hotfix ] [ runtime ] rename previousexecutiongraphallocations to reservedallocations
change the type of ` onlyFormat ` from ` SimpleDateFormat ` to ` format ` and introduce a new method ` getOnlyFormat ( ) `
added NoDataContainer property to GeoTiffReader and a corresponding test in GeoTiffReaderTest to ensure proper handling of no - data data
[ gr - 24435 ] fix llvm write node to handle null source section .
replaced calls to ` out . toString ( ) ` with ` new String ( out . toByteArray ( ) ) ` in ` JdbcExecutionContextDao ` and
replace blockUntilConnected ( ) method with CountDownLatch for connection state handling to ensure proper blocking of connection events during testing
refactor ArrayTypeHandler to improve readability and maintainability to enhance code clarity and maintainability
refactor RegexpTunnel to use reflective methods for retrieving regexp prefix to improve code clarity and maintainability by encapsulating prefix retrieval logic
updated application initialization to use Application . class instead of null to ensure correct application class is used for application selection
[ jbrules - 2576 ] fix npe on mutable global
added validation checks for asset names , URLs , and descriptions in AssetIssueActuator and TransactionUtil to ensure that asset names and URL
fix copypaste for textfield and copypaste in copypaste
updated action descriptions and error messages in LGWebOSActions , LGWebOSUpnpDiscoveryParticipant , and LGWebOSHandler to improve clarity
refactor node configuration to use ` addAll ` instead of ` setSeedNodes ` and ` setActiveNodes ` to improve code readability and maintain
added debugging information to assertions in BaseTokenStreamTestCase for position , endPos , and posLen to improve debugging by providing more context on the assertions
log4j2 - 132 add modularity to timebasedtriggeringpolicy . getnexttime ( ) .
added methods to perform item click and click first item containing text in ShadowAdapterView , ShadowListView , and ShadowListView classes to improve user interaction by
pdfbox - 4892 : avoid npe , a suggest by valerybokov
added null check for loopScope and implemented afterMethodScope method in GraphDecoder and PEGraphDecoder to improve code clarity and ensure proper handling of method
refactor HttpSessionDestroyedEvent to use getSession ( ) and getAttribute ( attributeName ) instead of getAttribute ( ) to improve code readability and maintainability by
added a test method to change the service name in Zipkin ' s span to the manually provided one to ensure that the Zipkin service name is
added logging statements to JavaInMemoryFileManager , JavacToJarStepFactory , and JavacToJarStepFactory classes to improve visibility into
rename ` SeparatedProjectGenerator ` to ` SeparatedProjectsGenerator ` and update references accordingly to improve clarity and consistency in naming convention
increased the timeout duration from 4 seconds to 10 seconds in ClientMultiMapLockTest . java to allow more time for locking operations
added a new constant ` DEFAULT _ CACHE _ CAPACITY ` and modified the ` of ` method signatures in ` ConfluentSchemaRegistryDeserializerProvider
replaced the ` remind ` checkbox with a ` checkAtStartup ` checkbox in ` UpdateInfoDialog . java ` to improve clarity and maintainability of
added multiple method signatures and modified the NodeGenerator class to include additional parameters to enhance flexibility and maintainability of the node factory configuration
hhh - 11836 - fix npe in cascadingactions . istransient ( )
added support for GETPROTO and SETPROTOCHECK methods in ScriptObject . java to enhance method invocations for proto properties in ScriptObject
updated DEFAULT _ READ _ MODE from " heap " to " mmap " and modified the return statement in ImmutableSegmentLoader to reflect the correct read
added ByteArrayTemplate import and logic to handle byte arrays in ArrayTemplateBuilder to ensure proper handling of byte arrays in the application
added Hipchat property and associated getter and setter methods to SamlServiceProviderProperties and created new CasSamlSPHipchatConfiguration class to
change ` commandRegistryUrls ` from a list to a set and update related resource retrieval methods to improve performance and ensure uniqueness of command registry
updated warning logging to include the current context in the warning message to improve debugging by providing more context about the path uncovered
removed checkLoggedIn ( ) method from SvnRepositoryConnector and added loggedIn flag in SftpRepositoryConnector to streamline login process and ensure
camel - 13237 : camel - jms - fix the issue that jms session be not transacted without a transactionmanager .
reformatted import statements in VmwareResource . java for consistency to improve code readability and maintainability
refactor Timers class to improve code readability to enhance maintainability and facilitate future updates
replaced ` OVERWRITE _ EXISTING ` with ` APPEND _ TO _ ZIP ` in ` DefaultDefectReporter . java `
removed deprecated UAX29URLEmailTokenizer constructors and added a new testUAX29URLEmailTokenizer class to streamline the code by eliminating
refactor ScriptObject class to use ScriptObject instead of Map to simplify type handling and improve code clarity
refactor EventBusMetrics class to improve event handling to enhance performance and maintainability of event processing
[ ds - 2076 ] add default locale for eperson and workflow manager ( # 11824 )
updated JaversTransactionalDecorator to implement InitializingBean and modified the ` ensureSchema ` method to improve bean initialization and ensure schema is properly initialized
removed null check for pgTypeName before adding it to _ pgNameToSQLType to simplify the code by eliminating unnecessary null check
added multiple Server instances to the ScopedHandlerTest class to ensure proper server configuration for all handler instances
added a constructor to ` CallTimeoutException ` and modified import statements in ` OperationServiceImpl ` , ` WaitNotifyServiceImpl ` , and ` Operation
updated the condition in RestLoginProcessingFilter to use StringUtils . isEmpty instead of StringUtils . isEmpty to improve code readability and maintainability
updated permission node comparison from ` Objects . equals ( ) ` to ` String ( " * " ) ` in ` CommandMap . java `
rename ` encoding ` to ` sourceCharset ` and update related methods in ` AbstractCompiler ` , ` ICompiler ` , and ` ICompiler `
changed the type of ` postLogin ` from ` byte [ ] ` to ` String ` in multiple classes to standardize the type of ` post
refactor GeneralOptimizationDialog to streamline simulation handling and improve code clarity to enhance code readability and maintainability by reducing redundancy
camel - 14263 : camel - core - add contextreloadstrategy to enable enable / disable contextreload .
updated logging configurations in CommonTestUtils . java to include additional console properties to improve clarity and maintainability of log output configurations
refactor PrologSizeSanityCheck class to improve code readability to enhance maintainability and facilitate future updates
refactor NearbyListFragment to improve code organization to enhance maintainability and readability of the code
added a conditional check for non - closeable content type in ` RequestBody ` and created a test for content type in ` RequestBodyTest `
added a check for ` embeddedSettings . isEnabled ( ) ` before checking the port availability in ` EmbeddedNeo4jServer . java ` to
refactor MovementDebugCommands to utilize PojoPrefab for setting move properties to enhance flexibility by allowing dynamic configuration of movement components
updated the ` random ` method to include a ` halfLengthTotalWeight ` parameter and adjusted related logic accordingly to enhance the randomness calculation by correctly
refactor GsonParser and MetricsResourceTest to simplify cache string handling and improve code clarity to enhance readability and maintainability of the code
updated parameter names in ApacheHttpClientMediaWikiApi . java from " gcmsort " to " gcmdir " in which direction to sort by
replaced calls to ` checkTransactionSynchStatus ( ) ` with ` pulseTransactionCoordinator ( ) ` in ` AbstractSharedSessionContract . java `
[ iotdb - 4036 ] pipetaskcoordinator should use pipetaskcoordinatorlock instead of a lock , a suggest by
added a conditional check for ` robolectric . usePreinstrumentedJars ` before returning ` DependencyJar ` to ensure that ` DependencyJar ` is
modified the conditional check from ` ! isSilent ` to ` isSilent ` in ` ExecDriver . java ` to ensure proper handling of silent state
added checks for dynamic fields with default and required attributes in IndexSchema to ensure proper handling of unsupported dynamic fields and improve error handling for unsupported attributes
reformatted code for better readability in StorageProxy . java to improve code readability and maintainability
updated ` PrebuiltCxxLibrary ` to use ` Iterables ` instead of ` ImmutableSortedSet ` and modified ` addAllSystemIncludeRoots
added null checks for startDate , endDate , and isSKIDSensitive variables , and adjusted related logic in AdaptableX509CertSelector . java to
replaced integer buffer size parsing with AbstractAppender ' s parseInt method to simplify buffer size handling and improve code readability
mark GuiScreenEvent a deprecated method to indicate that this method should no longer be used in favor of a newer version
removed multiple methods ` addToCategories ` , ` removeCategories ` , and ` addToNewCategories ` from ` CategoryEditSearchRecyclerViewAdapter ` to simplify
# 118 - add servercachetype parameter to createcache ( ) and createcache ( ) ( # 118 )
set mass , CG , and CD overriddenBy properties to null in RocketComponent . java to ensure proper handling of overridden components in the component
refactored JavaCompilerService and SynchronizedTask to improve code clarity and ensure proper resource management to enhance code maintainability and ensure proper resource management
refactor Task class to use Supplier < V > instead of a custom doCompute method to improve code clarity and maintainability by encapsulating
refactor WanReplicationServiceImpl to use a mutex for executor initialization to improve thread safety and prevent concurrent modification issues
added null checks for ` tPartition ` and ` table ` before retrieving the location in ` Partition . java ` and updated driver instantiation in ` D
updated method signatures and thread creation in LocalServiceRegistryClientImpl . java and RemoteServiceRegistry . java to improve code readability and maintainability by
added a new test class ` FilesTest ` and a method ` delete ` in ` Files ` to validate file deletion functionality to ensure proper
removed unnecessary try - catch blocks in ServerSocketAdaptor and SocketAdaptor classes to streamline code by eliminating unnecessary exception handling
updated class name check from " java . lang . System " to " Logger . class . getName ( ) " in SSLLogger . java to ensure
replaced the use of ` clear ( ) ` with ` addWorkingDir ( f . toString ( ) ) ` in ` Project . java ` to
added null check for ` cn ` and ` mInsets ` in ` ItemInfo ` , ` Workspace ` , and ` mInsets .
changed the access modifier of the String field from public to private to restrict access to the String field for better encapsulation
updated file paths in SimplePostTool . java from " localhost : 8983 / solr / update / csv - Durl = http : /
[ geot - 7142 ] fix max and min function with symbolic toggle
refactor client container startup logic in JavaxWebSocketClientContainerProvider and JavaxWebSocketClientContainer classes to improve thread management and ensure proper termination of
updated condition in Linux . java to check for both type and open application presence to ensure proper handling of both null and open application conditions
destroy webapplicationcontext on test failure
added a method to retrieve a search string from a query string in RemoteBrowseHandler . java to improve user experience by allowing users to enter a search
removed the visibility of the neutral button in SetupEncryptionDialogFragment . java to simplify the code and improve readability
refactor countItems methods to accept additional parameters for includeArchived and includeWithdrawn to improve flexibility in counting items based on user preferences
updated SQL statements to use ` ` instead of ` ` for consistency to improve code readability and maintainability
added exception handling and logging in CheckTokenEndpoint . java to improve error reporting and debugging capabilities
updated multiple Java classes to implement the ` lookupSeriesPaint ( ) ` method in the ` AbstractRenderer ` class to improve code clarity and maintainability
refactor identity zone endpoint integration tests to use a dedicated subdomain parameter to improve code clarity and maintainability by using a more descriptive parameter name
updated dismiss delay from 20000 to 10000 in ExtractionModelFrame , DataBrowser , and SQLConsole to improve user experience by allowing line continuations
added requirements for Surefire 2 . 22 . 0 and JUnit 5 in ActionProviderImpl . java to ensure compatibility with Surefire versions compatible with
replaced ` Exception ` with ` IOException ` in ` WorkerShellStep . java ` to improve error handling by throwing a runtime exception instead of a human
[ hotfix ] [ javadoc ] add @ experimental annotation to datastreamutils , collectsink , socketstreamiterator , socketstreamiterator
[ hotfix ] [ doc ] fix typo in streamcepstrumsource
added a check for the index boundary in the List class to ensure the index is within the bounds of the list before proceeding
replaced instances of ` OrExpression ` with ` Parenthesis ` in ` CloneHelperTest . java ` to ensure proper handling of parenthesis expressions in
added a confirmation option to the DebugPaste command in DebugPaste . java to allow users to specify a confirmation type for debug paste functionality
refactor configuration classes to use ` orElseThrow ` instead of ` get ( ) ` for better error handling to improve code clarity and maintainability by
refactor focus handling in DrawEquationWeb . java and add preventDefault ( ) method in NewRadioButtonTreeItem . java to improve code clarity and ensure
replaced instances of ` GoBinaryDescription . Arg ` with ` GoBinaryDescriptionArg ` and updated imports in ` GoBinaryDescription . java `
refactor environment variable retrieval in Jooby . java to use a URL to retrieve the application ' s logback environment XML to improve resource loading
updated SimpleRetryExceptionHandler to implement RetryListener instead of RetryListenerSupport and replaced RetryListenerSupport with RetryListener in multiple test files to simplify retry listener
updated the ` writeCounter ` method to use ` decimalOrNan ` instead of ` decimal ` in ` ElasticMeterRegistry ` to ensure
added a constructor to the Contribution class that initializes email , author , and commits to ensure proper initialization and avoid potential null pointer exceptions
modified the loop structure in JUnitFormatter . java to use a do - while loop to improve performance and readability of the code
modified the assignment of ` elements ` to handle cases where ` tmp ` is not a ` LinkedList ` to ensure proper initialization of the ` elements `
updated error messages in StaxEventItemReader to include resource URLs to improve clarity of error messages for better debugging
replaced the ` sphere ` variable with ` techOrig ` and ` PointLight ` arrays in the ` TestMultiRenderTarget ` class to improve light
added a null check for the current profile before retrieving the client result to avoid potential NullPointerExceptions when the client is not found
replaced ` target . addNamespaceDeclaration ` with ` newElement . addNamespaceDeclaration ` in ` SaajStaxWriter . java ` to ensure
added BigInteger values for parameters p , q , and g in KeyStoreManager . java to enhance security by validating key store parameters
updated method calls from ` getIndexBuffer ( ) ` to ` getIndicesAsList ( ) ` in GImpactCollisionShape and MeshCollisionShape
set the engine version from persistedProcessDefinition to " activiti - 5 " in BpmnDeployer and BpmnDeployerTest to ensure
updated property names in VelocityEngine to use " resource . loaders " instead of " class . resource . loader . class " to improve clarity
updated thread verification methods in CEntryPointSnippets . java and VMThreads . java to improve thread verification logic to ensure proper verification of current thread state
updated GenericUDFMapValues to handle null maps and added a new test class for handling null maps to improve robustness by preventing potential NullPointerException
corrected the spelling of " interceptors " to " handlerInterceptors " in EndpointWebMvcAutoConfigurationTests . java to ensure consistency in
added properties for oil well generation rate and enabled oil spring generation in BCEnergyConfig . java and modified the GenType enum in OilGenerator .
added a check for the existence of the " . clean - me " directory before creating it in ImportContext and JobQueue to ensure that the directory
updated the exception message in MemoryRealm . java from " memoryRealm . readXml " to " memoryRealm . readXml " to provide more context
removed unnecessary import statements from CRLDistributionPointRevocationCheckerTests . java to streamline code and improve readability by eliminating unnecessary dependencies
updated EXTID constants in ZipConstants . java and added import statements in ZipConstants64 . java to improve code readability and maintainability by
refactor file handling in ZipFileSystemProvider to use a dedicated method for ensuring regular files to improve code clarity and maintainability by encapsulating
replaced the horizontal strut with a horizontal glue for the condition panel to simplify the layout and improve readability
refactor connection creation in FailoverUpdateURIsTest . java to improve code clarity and maintainability
added Gson annotations for baseUrl , mirrorsList , and repoName in ServiceOsSpecific . java to enable better serialization and deserialization of service objects
updated database deletion methods to use ` deleteBook ` instead of ` deleteRecord ` to improve code clarity and maintainability by centralizing book deletion logic
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
updated the calculation of the response message offset in AbstractAjpProcessor . java to correct the calculation of the buffer position based on the response message
refactored the startup and shutdown methods in AdminConsolePlugin and adjusted context handling in XMPPServer to improve code clarity and ensure proper context management
replaced unregisterHandlers ( ) with MessageConsumer < ? > and MessageConsumer < ? > for binary and text consumer in WebSocketImplBase . java to
added configuration properties for device ID transformation method , enable / disable ID table , and log file in IoTDBDescriptor . java to enhance configuration flexibility
updated NUM _ DOCS _ PER _ TYPE from 2000 to 100 and added a new DelayingSearchComponent class to improve test reliability and
updated the condition from ` ! = null ` to ` ! = null ` for ` getAccessError ` in ` TestSignatureInfo . java `
updated script handling in Transaction . java and TransactionTest . java to use witnessScript instead of scriptCode to improve clarity and consistency in script building and
added / schema / types / fieldType to the expression in IndexSchema . java to support additional schema types in the index schema
added a null completer check in Completers . java and created a new test class OptionCompleterTest . java to ensure that the completer
reformatted code for better readability in S3Utils . java to improve code clarity and maintainability
change sourcePeerId from String to int in multiple classes to allow for more flexible peer ID handling across different operating systems
refactor file upload logic into a separate method ` UploadFile ` to improve code readability and maintainability by encapsulating file upload logic
removed unused imports and set alpha values for replyButton in TweetFragment . java to improve code clarity and reduce unnecessary dependencies
added mock accessLogContext and adjusted expected timestamp formatting in AccessLogSupportTest . java to improve test clarity and ensure accurate timestamp representation for access log
changed the directory path of the maryCacheFile from " testfiles - deleteme " to " tmp / testfiles - deleteme " to
remove unnecessary null check for subscribers in SettingImpl . java to simplify code and improve readability
added null check for marshaller in AbstractSamlObjectBuilder and removed unused imports in AbstractSaml10ResponseView to improve error handling and provide clear
replaced printStackTrace ( ) method calls with LogUtil . warn ( t ) in DataBrowser . java to improve error handling by providing more informative logging
added a check for the existence of assetsDirInDevModeWithoutTrailingSlash in the AssetsController and created a new test for static directory class
[ hotfix ] [ state ] add writeoptions parameter to rocksdbkeyedstatebackend
updated the default format string in CoreLabel . java from " value - tag - index " to " value - index " to align the format with
refactor GraphHopper initialization and add request hints in MainActivity . java to improve code readability and maintainability
updated wait time from 30 seconds to 60 seconds in BesuNodeRunner , BesuCommand , and AltBN128PairingPrecompiledContract
rename ` DuclsSandboxTest ` class to ` SandboxTest ` and update related references accordingly to improve clarity and consistency in naming conventions
camel - 14263 : camel - cxf - do n ' t log exception when cxf can not be process .
changed the visibility of the forwardPropagateTree method from package - private to public to allow access to the method from other packages
updated SQL query in JDBCExample . java to include additional parameters to enhance the group by functionality by allowing more time for query execution
added a validation check for project location expressions in DefaultModelValidator . java to ensure proper handling of file locations during profile activation
refactor Style class to improve code readability to enhance maintainability and facilitate future updates
added zoom functionality to ShareActivity to handle back key events to improve user experience by allowing back navigation in the ShareActivity
added a check for deprecated fields in Json . java to skip processing if the field is not marked as deprecated
added animations for showing and hiding the send layout in LauncherFragment to enhance user experience by providing a smoother transition to the send layout
updated method signature in Utils . java for token storage file retrieval to ensure consistency in token storage file retrieval
added ` Progressable ` parameter to multiple methods in ` Utilities ` , ` PTFRowContainer ` , and ` PTFRowContainer ` to
[ hotfix ] [ doc ] fix typo in sourcecoordinatorprovider . java
added methods to remove and update panel ordering and colors in ContributionListPanel to ensure proper layout updates and color updates
rename ` HyervisorTemplateAdapter ` and ` HyervisorTemplateAdapter ` to ` HypervisorTemplateAdapter ` and update related
added a check to set a default directory if dPath is empty to ensure that the application defaults to the user ' s directory if it is empty
updated sampleRate calculation in DefaultAudioSink . java to ensure correct maximum supported channel count based on the format ' s value
[ log4j2 - 1335 ] mapfilter should not use log4j . util . stringmap . getdata ( )
refactor VerificationInOrderWithCallsTest . java for improved readability to enhance maintainability and facilitate future updates
updated the return statement in the setFromAxis method from ` axis . z ` to ` axis . x ` to ensure correct positioning of the
updated the COLLECTION _ DELIM constant from " colelction . delim " to " collection . delim " to correct the naming convention for
add a new test method ` testListenerConnectedAtStart ` in ` TestFrameworkBackground . java ` to verify that the listener is connected at the
modified the condition for appending type kinds in DocRenderer . java and added new test cases in PHPCCDocumentationTest . java to improve clarity of
added a boolean field ` mIsOneHandedModeSupported ` and updated conditional checks for ` touchInOneHandedMode ` to improve code
added onDetachedFromWindow method to cancel pending tasks in AppsCustomizePagedView to ensure tasks are properly terminated when the view is
added support for a dictionary resource in MorfologikAnalyzer , MorfologikFilter , and MorfologikFilterFactory to enhance the
changed the variable ` count ` from ` count ` to ` thrown ` in ` ResultSetTest . java ` to set the ` thrown ` flag to
updated the initialization message from " debug " to " empty " in GradleBuildService . java to simplify the initialization process by removing unnecessary debug logging
replaced AtomicReference < Boolean > with AtomicBoolean for exception handling in AbstractPhenomenaTest . java to improve thread safety and error reporting forMVCC
refactor tooltip text handling in ComponentTreeRenderer to use a dedicated method to improve code readability and maintainability by encapsulating tooltip text
increased the timeout duration from 5 seconds to 10 seconds in ZipkinStreamTests . java to allow more time for the zipkin server startup to complete
updated DeviantartRipper to handle null username , password , and age gate configuration to improve login handling and ensure proper configuration for DeviantArt
refactor PackageUtils to use constants for Google Signature keys instead of an array to improve code readability and maintainability by reducing redundancy
updated the method call from ` commonApp . solutionBusiness ` to ` createSolutionBusiness ( ) ` in ` ImportDirSolveAllTurtle
added a method to notify window state changes in WWindowPeer . java to improve event handling for window state changes
added email description to templateData in EntityGroupKeyContentFormatter and set it in TestEntityGroupKeyEmailContentFormatter to enhance email handling capabilities and
updated the method call from ` remove ( sel ) ` to ` data . remove ( sel ) ` in ` UserData . java ` to ensure
updated language retrieval logic in Locale . java and added a check for language length in LocaleTest . java to improve accuracy of language retrieval and ensure correct
refactor Liquibase to use ChangeLogParser instead of a new instance of DatabaseChangeLog to improve code clarity and maintainability by centralizing
added a check to return early if the screen pinning is active before proceeding to avoid unnecessary processing when the screen pinning is active
added a new field ` mNoDataText ` and ` mNoDataTextDescription ` to the ` Chart ` class to indicate that no chart
added synchronization to check head written status in Http1xServerResponse , Http2ServerResponseImpl , and Http1xServerResponse to ensure thread
refactor chunk handling logic in NettyResponse . java to use a dedicated method to improve code readability and maintainability by reducing duplication
added " : scheme " header to " headers in Http2TestBase and updated test cases in TestHttp2Limits and TestHttp2Section _
fixed - redissonlocalcachedmap . getkeys ( ) and getvalues ( ) method do n ' t work in local cache mode . #
camel - 16165 : camel - jpa - fix the issue that camel - jpa can not be instantiate by camel - jpa
updated variable names from fallSpeed to jumpSpeed in PhysicsCharacter . java to improve clarity and consistency in variable naming
added a condition to check if reparsedFunction is null before processing syntax extensions to ensure proper handling of reparsed functions when no syntax extensions are
updated logging and order handling in BitstampPusherService to improve clarity and consistency to enhance code readability and maintainability by using more descript
added deprecated methods to get old upload segment URIs in FileUploadDownloadClient . java to improve code clarity and maintainability by consolidating old
updated the method call from ` findOne ( ) ` to ` findOne ( filter ) ` in MongoDbTailTrackingManager . java to allow filtering of
camel - 14263 : camel - julian - add test for julian language test
added a bound to the alpha value in RecentsView . java to ensure the alpha value is within a valid range for better user experience
updated the " Import - Package " attribute to use " version " instead of " version " in ManifestReversion . java to ensure the correct version
refactor DataSyncConfiguration class to improve code readability to enhance maintainability and facilitate future updates
added import statement for JavaSnippetRepository and initialized JavaSnippetRepository to enable snippet repository initialization for improved functionality
added a loop to iterate over the number of time buckets before updating sums to ensure the sums are updated only when the target dimensions match the
updated URLs from " code . google . com / p / chromedriver / downloads / list " to " chromedriver . storage . google
camel - 16136 : camel - pgevent - use preparedstatement instead of statement . execute ( ) .
updated import statements from ` sun ` to ` com . rometools . rome ` in ` FeedParser . java ` to align with the
added Content - Length header handling in TransferCompletionHandler and updated NettyAsyncHttpProvider to use a case - insensitive string map for transfer adapters
refactor Dialog class to improve code readability to enhance maintainability and facilitate future updates
removed the constructor from the EnhancedRuntimeException class to streamline the exception handling by eliminating unnecessary constructors
added CountDownLatch synchronization and improved exception handling in SocketAppenderTest . java to ensure proper synchronization and error reporting during event processing
camel - 14497 : camel - aws2 - endpoint - dsl - remove eventadmin - builders from endpointbuilders and endpointbuilders
updated method signature and exception handling in ByteArray . java to improve code clarity and maintainability
added a method to disable input proxy and updated touch event handling in RecentsAnimationWrapper . java to improve touch event management and ensure proper input handling
camel - 6770 : camel - restlet - ignore camel - restlet domain service test
removed the currentIdx parameter from the resizeAndRehashIfNeeded method to simplify the method signature and improve code readability
update package name from " com . hazelcast . tests " to " com . hazelcast . test . modulepath " in ModulePathTest . java to
updated method signatures in JavaLanguageServer to include source directories and added getter methods in JavaServerConfiguration to improve clarity and provide access to source directories during
removed web page opening and mute functionality from the menu to streamline the menu by eliminating unnecessary functionality
updated method names from ` nodeIsAncestorOfItself ` to ` nodeIsNotAncestorOfItself ` and updated assertions accordingly to improve clarity and
updated y - coordinate calculations in WorldEditPlayer . java to use Math . max instead of Math . min to ensure proper handling of negative values in
updated selfCheckDataTypes method to include PathNotExistException and adjusted measurement checks accordingly to improve error handling for missing data types and ensure accurate measurement checks
removed an unnecessary ' ' character from the closing brace in JavaCompiler . java to improve code readability and maintain consistency
[ hotfix ] [ operator ] fix npe in yieldingoperatorfactory
hbase - 13232 add permission check for settablestateinmeta and fixmeta in securitytestutil .
updated method calls in GatewayMetricFilterTests to use ` Meter : : getId ( ) ` instead of ` meter . getId ( ) ` to
updated BlockJUnit4ClassRunner to use getJavaClass ( ) instead of getTestClass ( ) directly to ensure compatibility with the Java class
[ hotfix ] [ runtime ] use lasttimedata instead of remoteitems in deletehandler
updated the calculation of allAppsCellWidthPx and allAppsCellPaddingPx in DeviceProfile . java to improve the accuracy of
[ hotfix ] [ core ] add parent first logging pattern to coreoptions
replaced calls to ` doc ( ) ` with ` this . doc ( ) ` in ` BooleanScorer2 . java ` to ensure consistency in
added a call to ` writer . forceMerge ( 1 ) ` in ` TestMultiPhraseEnum . java ` to ensure that the writer merges
added java . io . Closeable interface to the Session interface and updated close method return statements accordingly to ensure proper resource management and prevent potential memory leaks
refactor GetLocations class to improve code readability to enhance maintainability and facilitate future updates
replaced stack trace printing with a null check for the exception variable to simplify error handling and improve code readability
removed unchecked IOException handling from Contents . java to simplify error handling and improve code clarity
updated the ` GeneratePubkeyActivity ` to extend ` AppCompatActivity ` instead of ` Activity ` to ensure compatibility with newer Android versions and
refactor ` emitSnippet ` method to accept a ` CharSequence ` instead of a ` String ` to improve handling of character sequences in Ruby flavor processing
changed logging level from warning to debug for Apache Derby driver class and added null checks for username and password in BaseLiquibaseTask to improve logging
removed the useCaches flag and its associated getter and setter methods from Nio2Endpoint . java to simplify the code and improve readability by
refactor CasGeoLocationConfiguration to use Resource instead of MaxmindProperties for reading databases to improve code clarity and maintainability by using
updated the test message from " standard session results with helper view " to " standard session results : helper view " in InstructorFeedbackResultsPage
updated the ` useEncodedQualifierListOptimization ` method to include a ` Scan ` parameter in the ` useEncodedQualifierListOptimization ` method to include
removed the ` public ` access modifier from several methods in ` ApprovalStore ` , ` ApprovalsControllerService ` , and ` Approval
added a flag ` mStartedDownload ` to track download progress and cancel the notification when the download is started to ensure that notifications are canceled when the
renamed the method ` getOpenView ` to ` getAnyView ` in ` AbstractFloatingView ` and added a new method ` getView `
updated project version from 1.0 . 11 to 1.0 . 13 and corrected copyright year in JFreeChartResources . java to ensure compatibility with the latest
replaced calls to ` yield ( ) ` with ` Thread . yield ( ) ` in ` SyncThread . java ` to ensure consistent thread yield behavior
refactor GsonBuilder class to improve code readability to enhance maintainability and facilitate future updates
added null checks for centerGeo and circleCenters before adding it to fixedPoints to avoid potential NullPointerExceptions when adding circle centers
remove the espressohome option from the espresso home configuration to simplify the code and improve maintainability by eliminating unnecessary complexity
refactor CtCodeElement , CtVariableWrite , CtTypeInformation , and CtQueryable classes to improve code organization and maintainability
changed the DeleteSessionAction class from protected to final and simplified access modifiers to enhance encapsulation and improve code clarity
changed ` InvalidDocumentStoreApiUageException ` from ` InvalidDocumentStoreApiUageException ` to ` InvalidDocumentStoreApiUsageException `
updated variable assignments and logic in JoinQParserPlugin , SolrIndexSearcher , and TestJoin classes to improve code clarity and ensure correct field assignment logic
updated triggerMediaScan method to include the file parameter to enhance media scanning functionality by associating media scans with the file parameter
removed conditional logic for posting test results in TestRunning . java to simplify the code and improve readability
added settings for custom G - code settings in MainWindow . java to enhance user experience by allowing custom G - code settings
updated the Writer initialization in AdditionalJaxbMappingProducerImpl . java to use UTF - 8 encoding to ensure compatibility with UTF - 8 encoding for better
refactor JsonElement class to improve code readability to enhance maintainability and facilitate future updates
added imports and exception handling for ` unset . sys . property ` and ` resetExceptionIgnores ( ) ` in ` TestBadConfig .
added a method to remove fragments and the action bar in GpsMainActivity to ensure that the current fragment is properly removed and hidden during fragment removal
updated the formatting of spanish tokens in TokenizerAnnotatorITest . java to improve readability and maintainability of the test cases
updated Range class to use ` Range . Byte ` instead of ` Range . Long ` for parsing ranges to ensure proper handling of empty data ranges and
updated gcode file path and modified bounds handling in VisualizerCanvas , VisualizerViewParse , and GcodeViewParse to include additional G -
added new versions " 8.4 . 0 - cfs " and " 8.4 . 0 - nocfs " to the TestBackwardsCompatibility
updated formatting in Assertions _ sync _ with _ InstanceOfAssertFactories _ Test . java to improve readability and maintain consistency
added a check to close the exchange client if the query state is done to ensure proper resource management and prevent potential memory leaks
refactor file directory handling in IntegrityCheck . java and add setUp method in IntegrityCheckTest . java to improve code clarity and ensure proper
removed the import of SolrClient and its shardToClient map from ChaosMonkey . java to streamline the code by eliminating unused dependencies
added null check before retrieving the database configuration store to avoid potential NullPointerException when fas is null
refactored ListView initialization in NestedRepositoryTreePanel . java to improve code readability and maintainability
modified the ExtensionTypeHeader constructor to be public and added validation checks for the ExtensionType type and length to ensure proper initialization of the ExtensionTypeHeader
pdfbox - 4892 : throw ioexception instead of exception , a suggest by valerybokov
rename ` deleteOnShutdown ` to ` pushOnShutdown ` and update related getters and setters in ` PrometheusProperties ` to improve
added triggerCallback parameter to triggerSink and updated handleEvent method to include StateMachineExecutorCallback to enhance error handling by providing more context for trigger events
added a test method to verify that multiple Python executables on a path is used in BuckConfig to ensure that the correct Python interpreter is used when
added a call to the default button in the InitialAccountRegistrationFrame to enable user interaction with the sign - in button
added a new configuration variable ` TEZ _ DYNAMIC _ SEMIJOIN _ REDUCTION _ FOR _ MAPJOIN `
added exception handling to the error log message in RegistrationRestRepository . java to improve error logging clarity by providing more context in error messages
move reflectionutils from org . axonframework . util . reflection to org . axonframework . util
added a static method ` listableCollector ( ) ` in ` OidcIdTokenClaimCollector ` and created corresponding unit tests in ` O
removed the ` center ` field from multiple classes to streamline the code by eliminating unused fields
[ hotfix ] [ runtime ] fix checkstyle violation in registerandprocessbundleoperation
refactor SslContextFactory to improve SSL context handling to enhance security and maintainability of SSL context handling
updated assertions in ConfigurationProperties and ConfigurationPropertiesTest to use a constant default maxExpectations and defaultMaxLogEntries instead of maxExpectations to improve
updated return statement from " access _ confirmation " to " access _ confirmation _ error " to provide more context about access confirmation errors
add ConsumerClassLoaderFilter class to manage class loaders in the cluster to ensure proper context class loader management during service invocations
added a new parameter ` copyRowHeight ` and ` resetOriginalRowHeight ` to the ` shiftRows ` method in ` HSSFSheet . java
replaced ` setRolloverIcon ` and ` setRolloverPressedIcon ` with ` setRolloverIcon ` and ` setRolloverPressedIcon
refactor grid translation handling in TaskViewUtils , TaskViewSimulator , and RecentsView classes to improve code clarity and maintainability by centralizing
refactor Assertions class to improve code readability to enhance maintainability and facilitate future updates
added null checks for ` currentDateTimeFunction ` in multiple database classes to ensure that ` currentDateTimeFunction ` is returned only when it is not null
added an anonymous path utility method in IOUtils and updated Log4jUtils to use it to improve code clarity and maintainability by encapsulating
updated the ` call ` method to include a content description parameter and added a new method ` setContentDescriptionForTask ` in ` DigitalWellBe
updated the timeout logic in CatalogTracker . java to handle zero timeouts to ensure proper handling of meta availability based on the default timeout value
refactor LineNumberTagAggregator and TestDominance classes to improve code readability and maintainability
added StateConverterUtil import and modified return statement in GenericItem . java to utilize the default conversion method for state conversion
added imports and modified import statements in BidirectionalOneToOneNPlusOneTest . java and added a new test method for fetching post and
added a call to remove extra empty screen in Launcher and adjusted startSearchPageIndex assignment based on workspace screens to ensure proper handling of empty workspace
updated HashMap initialization and HashSet initialization in MarkBasePointersPhase . java and added null check in IndexedValueMap . java to optimize memory usage and
replace single quotes with double quotes in GoogleLineChart and GooglePieChart methods to ensure consistency in string concatenation across chart types
refactor waitForBatches handling in SendingAccountor . java to use get ( ) instead of getAndSet ( 0 ) for better readability
added a position parameter to the WALPrettyPrinter class and updated related methods in WALPrettyPrinter . java to enhance the WALPrettyPrinter
updated the parameter of the NettyTransceiver constructor from 1 to 0 in TestNettyTransceiverWhenFailsToConnect . java to
updated SimpleReport to sort log events before generating the report to ensure the report reflects the correct start time of events before generating the report
added a new test method ` getCsvLine _ DescriptionContainsDoubleQuote ` to ` CSVFileLoggerTest ` to ensure that the ` getCsv
added new coref properties and modified method signatures in DcorefChineseBenchmarkSlowITest . java and AbstractSequenceClassifier . java
added a check for the presence of the recipient JID in the IQRouter and IQHandler classes to ensure that the recipient JID is
removed the @ JniImpl annotation from VM . java to streamline the code by eliminating unnecessary dependencies
updated configuration settings in Fetcher2 . java to use Protocol . CHECK _ BLOCKING and Protocol . CHECK _ ROBOTS instead of hard
added a condition to check if the video HDR format is not " dolbyvision " in FFMpegVideo . java and
updated the package name from " other _ package " to " other _ package2 " in AstTests . java to correct the naming convention for the
updated the calculation of the current diameter in WorldBorder . java and added corresponding integration tests in WorldBorderIntegrationTest . java to improve the accuracy of world
hbase - 24288 add getwalgroupsreplicationstatus ( ) to getwalgroupsreplicationstatus ( ) method ( serge
refactor login event handling in AppWFull . java to include ` EventRenderable ` for better event handling to improve code clarity and maintainability by
refactor routing table test to use a new method for generating instance configurations to improve code readability and maintainability by using a dedicated method for
changed the access modifier of FieldAttributes from final to public to allow access to FieldAttributes from other classes
add a test method to check for erroneous Maven project references in ProjectBuilderTest . java to ensure proper handling of missing versions in Maven projects
removed redundant checks for oldProto and history in the conditional statement to simplify the code and improve readability
refactor DoorbirdInfo and ControllerConfiguration to use a new method for retrieving controller IDs to improve code clarity and maintainability by centralizing
replaced ` sessionFactory . close ( ) ` with ` session . close ( ) ` in ` SessionRequest . java ` to ensure proper resource management
removed the condition for generating refresh tokens in OidcConsentApprovalViewResolver . java to simplify the code and improve readability
removed a debug print statement from Http2SolrClient . java to clean up the code and improve readability
updated the extractor method in BaggagePropagation to use a NoopGetter instead of a lambda expression to improve code readability and maintainability by
refactor conditionalOnEnabledResourceChain class to improve code readability to enhance maintainability and facilitate future updates
added a check for children in the BarrowmanCalculator class to ensure that the tree root has children before proceeding to avoid potential errors
updated the method from ` getFilteredStream ( ) ` to ` getUnfilteredStream ( ) ` in ` JBIG2Filter . java
updated logging statements in FacebookImpl . java to CN1 and added restoreIntentResultListener calls in FacebookImpl . java to enhance logging clarity and
updated return statements in ShadowICU . java and added a new test in ShadowICUTest . java to improve date picker functionality and ensure proper
removed the import of KeyguardManager and simplified the condition in TouchInteractionService . java to streamline the code and improve readability by eliminating unnecessary
api : fix npe when create a custom volume with the same name do n ' t exist
replaced ` FileChannel ` with ` AsynchronousFileChannel ` and added a ` position ` variable in ` UtowBodyHandler . java ` to
reformatted code for consistency and clarity in SigInt and SigIntTest classes to improve code readability and maintainability
ggb - 244 text editor should not be update if the text be resize .
change return value from - 1 to 0 in Asset . java to ensure correct behavior of the return value
updated ComputeBenchmark to use a custom Callable and Function < Integer , Boolean > for value loading and mapping functions to improve code clarity and maintainability
added onRefreshListener method to UploadListFragment to notify adapter when data is refreshed to improve user experience by notifying adapter when data changes
refactor BibDatabaseContext to use Path instead of File for file handling to improve flexibility and flexibility in handling file paths
replaced instances of ` Array ` with ` get ( i ) ` in ` ParticleEffect . java ` and added a ` dispose ( ) `
refactor service handling and host retrieval logic in Tomcat . java to improve clarity and maintainability of service management
updated string formatting in BuildRuleFactoryParams , Console , and BuildRuleFactoryParamsTest classes to improve clarity and consistency in error messages
added a condition to return early if the playback state is not PLAYING to ensure proper handling of playback state transitions
updated the retrieval of ServiceComponentDesiredStateEntityPK in DeleteServiceTest . java to retrieve the first entity from the database instead of using a primary
refactor Java2TypeScriptTranslator and add a new InnerClassFieldClash class to improve clarity and functionality to enhance code readability and maintain
added ` followRedirectFilterEnabled ` and ` followRedirectFilterEnabled ` properties to ` DockerClientFactory ` and ` DockerClientProfile ` classes to
added awtUnlock ( ) and awtLock ( ) in XToolkit . java to ensure proper resource management and prevent potential memory leaks
hhh - 10183 - remove skip for dialect that do n ' t support setnstring
added a revert ( ) method to OPCPackage and improved resource management in ZipHelper to ensure proper resource management and prevent resource leaks
changed the access modifier of the storeClassFile method from private to public to allow access to the method from other classes
removed an assertion for NO _ MORE _ ORDS in SingletonSortedSetDocValues . java and added a new test class TestSortedSetDoc
updated error messages in CGIHandler . java and added a new start method in JavaVM . java to improve clarity of error messages and ensure proper
added additional characters " \ n \ 033 [ m " and " \ n \ 033 [ 0m " in LineReaderImpl . java
updated multiFetchSourceFiles method to accept a Set instead of a List to enhance flexibility in handling multiple file hashes
added a check to return early if the number of vertices is zero in OGLESShaderRenderer . java to avoid unnecessary processing when no vertices are
updated test methods and added verification error handling in IncorectBindingPuzzleFixedTest . java to improve clarity and accuracy in verifying argument types
replaced ` FileUtil . createData ( root , menuPath ) . delete ( ) ` with ` FileUtil . createFolder ( root , menu
remove unused import for Node in TypeSystem . java to streamline code and improve readability
refactor JsonObject class to improve code readability to enhance maintainability and facilitate future updates
updated conditions in SelectChannelEndPoint and added a check for idle time in HttpConnection to ensure proper handling of idle time based on connection configuration
fix farmlandplant . cansustainplant ( ) not call cansustainplant ( ) .
added a new CREATE TABLE SALTEDTABLE123 ( PRIMARY KEY , v VARCHAR , PRIMARY KEY , SALT _ BUCKET
updated SimpleDateFormat instantiation to use Locale . US and added a new class B6791927 to ensure consistent date formatting across different locales and validate
added multiple null checks for the database connection in DbHelper . java to ensure proper resource management and prevent potential memory leaks
updated polling duration from 1 second to 5 seconds in BatchMessageListenerContainerIntegrationTests . java to allow more time for tests to complete before proceeding
make economyallocationstage constructor optional and add tracera option
added null checks for codeArea and modified event filtering logic in SourceTab . java and CodeAreaKeyBindings . java to ensure proper handling of key
added a line separator to the ObjectMapper instance and set a System . setProperty ( " line . separator " , " \ n " ) to ensure consistent
updated path handling in NativeEnvironmentRepository to correctly handle windows path separators to ensure proper handling of windows path characters in the environment name
removed the Application dependency from multiple test classes to streamline the application initialization process for better resource management
[ java ] : remove unnecessary validation of log in recording log .
replaced ` GroupName ` with ` ErrorGroupName ` in ` ITSystemTest . java ` to improve clarity and consistency by using a more descript
added sleep and memory usage checks in TestFuzzOptimizations . java to ensure accurate memory usage tracking for Travis environments
added a private boolean field ` reverseImage ` and updated its usage in ` CameraManager . java ` to streamline the retrieval of the reverse image
updated conditional checks to use ` . equals ( entry . getName ( ) ) ` instead of ` . equals ( entry . getName ( ) ) `
refactor TerserUtil to use a new predicate for matching fields based on inclusion IDs and meta values to improve code clarity and maintainability
updated JUnit annotations in AuthenticationSuccessListenerTests to use JUnit 5 annotations to ensure compatibility with JUnit 5 and improve code clarity
replaced the use of ` New . arrayList ( ) ` with ` new . arrayList ( ) ` and simplified the initialization of ` TYPES
refactor TypeUtil class to improve code readability to enhance maintainability and facilitate future updates
updated the trigger time format in AbstractAlertNotifyHandler to use LocalDateTime and TimeZone to ensure accurate time representation for alert notifications
added a method ` maybeCreateAbstractMethodErrorThrower ` to handle method invocations with varargs parameters to improve error handling for abstract methods in
camel - 13232 : camel - core - validate body ognl syntax in simplefunctionexpression . thanks to paul for the patch .
removed unnecessary check for empty lists in AbstractParser . java to streamline code by eliminating unnecessary checks
camel - 16165 : camel - jclouds - use iohelper . copy ( is , cos ) to copy data to cos
camel - 14263 : camel - cdi should not ignore OSGi bundle not release yet .
updated condition in Check . java to include default flags and added a new test class CheckACC _ STRICTFlagOnDefaultMethodTest . java
[ java ] increase the timeout for aeron to 2 second .
added a new file ` FileExtensions . java ` with static final CLANG _ SOURCES and CLANG _ HEADERS in the ` FileExtensions
replaced ` ThreadLocalDateFormat ` with ` ISO8601CanonicalDateFormat ` and refactored the constructor of ` ThreadLocalDateFormat ` to improve code clarity and maintain
remove usecgroupmemorylimitforheap in favor of usecgroupmemorylimitforheap
added a displayName property to Pac4jBaseClientProperties and modified DelegatedClientIdentityProviderConfiguration to utilize it to enhance user experience by providing a
added EarlyTerminationException to multiple operator classes and modified exception handling in CombineGroupByOrderByOperator , CombineGroupByOrderByOperator , and CombineSlow
updated the formatting of the return statement in TraceFunctionAroundWrapper . java to improve code readability and maintain consistency
refactor response handling in HttpBindServlet , HttpConnection , and HttpSession classes to improve code clarity and maintainability by using a dedicated consumeResponse method
add null check for parent before constructing CapabilityDispatcher to prevent potential NullPointerException when parent is null
removed KeyCrypterException from the catch block to simplify exception handling for better clarity
added a @ Deprecated annotation to AsyncCompletionService and SubmitOrderedCompletionService classes to indicate that these classes are outdated and should not be used in
updated the logic for determining the length of the hyphenation in HyphenationTree . java to improve clarity and maintainability of the hyphenation logic
added a sleep delay of 200 milliseconds in IQRegisterHandler . java to ensure proper synchronization during registration process
refactor the Resources class to improve code organization and readability to enhance maintainability and clarity of the codebase
corrected a typo in the PARAMETER _ NEEDS _ TO _ BE _ NAMED string in ParameterBinder . java to improve clarity
added a new boolean variable ` providersChanged ` and initialized it to ` false ` in ` ConfigurationManager . java ` to ensure proper handling of provider
added a method to quote identifier tokens in the SemanticAnalyzer class to ensure that escaped identifiers are properly handled during token processing
pdfbox - 4892 : ignore miss ' name ' entry , a suggest by valerybokov
changed the type of the ` AnalysisSPILoader ` variable from ` AbstractAnalysisFactory ` to ` AnalysisSPILoader < ? extends T > ` to
modified conditional logic in Window . java to adjust height and width based on the hit point to ensure proper handling of child actors in the window ' s
added null check for appManifest before setting target SDK version to avoid potential NullPointerException when appManifest is null
refactor ` ConfigurationMetadataGenerator ` and ` CasConfigurationMetadataCatalog ` to use ` mapper . execute ( ) ` instead of ` execute (
added a userName field and its getter / setter methods in Driver , HiveSemanticAnalyzerHookContext , and SQLOperation classes to allow users to specify their
added setter methods to XsltBuilder , setTransformerFile , and setTransformerInputStream in XsltComponent , and updated XsltComponent
added support for HadoopShim in ContainerRunnerImpl , TaskRunnerCallable , and TestExecutorTestHelpers to enhance functionality by allowing customizable Hadoop
updated ShadowAssetManagerTest , ShadowContentObserverTest , ShadowContentObserverTest , ShadowContentObserverTest , and ShadowDownloadManagerTest to remove redundant
added null check before logging access access in CoyoteAdapter . java to avoid potential NullPointerException when context is not initialized
updated logging statements in ThroughputLogger to return early if the start time is zero and improved message formatting in ThroughputLoggerTest to enhance code clarity
updated VM version checks in CompilerConfigFileWarning , ConfigFileWarning , and ConfigFileWarning to use Platform . isDebugBuild ( ) and added VM
[ scb - 2576 ] add meterdetailstatisticsmodel to default log publisher ( # 2576 )
refactor logback configuration handling in FrameworkLauncherExtended . java to improve clarity and ensure logback configuration is properly resolved
updated method signatures to include @ NotNull annotations and changed class names from CasCookieValueManager to NoOpCookieValueManager to enforce non - null
replaced BASH _ ESCAPER with SHELL _ ESCAPER and updated ShellStep to use SHELL _ ESCAPER to
added try - with - resources for GenericContainer in ` AbstractWaitStrategyTest ` and ` HttpWaitStrategyTest ` to ensure proper resource management and
renamed the test class from TestLucene50FieldInfoFormat to TestLucene60FieldInfoFormat to clarify the purpose of the test
updated formatting in RelativeDateFormatTests . java to improve readability and maintain consistency in formatting
added a method ` generateShieldAddress ` to ` RpcApiService ` to generate ShieldAddress to facilitate the generation of shield addresses in the wallet
replaced byte [ ] with String in readConsoleInput methods across multiple classes to simplify code and improve character encoding handling
updated regex patterns for presubmit and postsubmit in TestStabilityRule . java to improve clarity and maintainability of the code
updated SolrFragmentsBuilder initialization and added a check for multi - valued fields in DefaultSolrHighlighter and added a new test for preserving multi - valued
updated the ` tryToLogin ` method to accept a ` Uri ` parameter and modified return code logic to enhance login functionality by allowing username and password
removed unnecessary imports and updated entity handling in HandlerSceneEntityDrownReq . java and PacketSceneEntityDrownRsp . java
camel - 16258 : camel - jms : fix the issue that jmsproducer do n ' t support it .
removed wrapping the parameter in the update method call to simplify the method call by eliminating unnecessary wrapping
added currency handling and logging in BTCEAdapters . java to improve error handling and provide clearer logging for unknown currencies
refactor subscription creation logic to use a candidate variable instead of a direct assignment to improve code readability and maintainability by reducing redundancy
pdfbox - 4892 : fix typo , a suggest by valerybokov
added a new parameter ` useTenantIsolation ` to the ` startController ` method and updated related methods in ` ControllerTest ` , ` ClusterTest
changed the return type of ` ImmutableMap ` from ` ImmutableMap . Builder ( ) . putAll ( ) ` to ` Map < String , Object > `
added a check for non - empty attributes in ProjectWorkspace . java to ensure that attributes are only processed if they are non - empty
added methods to retrieve JDK name , type , and language level from IjProjectConfig and updated related classes to use IjProjectConfig
changed the property from " Experimenal " to " Experimental " in HiveSessionProperties . java to clarify the purpose of the optimization feature in
added a User object to the GrantedAuthorityEffectiveAclsResolverTests class and updated the test method names accordingly to enhance test coverage for ACL resolution
replaced ReflectionClassDeclaration instantiation with typeSolver ' s solvedJavaLangObject method to simplify method resolution by using the solved Java language object directly
added a constant for the number of buttons and adjusted the calculation for pointer mapping to ensure that the number of buttons is less than or equal to 24
updated import statement from jdk to com . oracle . java in RedefineInterfaceCall . java to ensure compatibility with the latest test libraries
refactor MessagePack to create a new MessagePackFactory class for factory methods to improve code organization and facilitate the creation of MessageUnpacker instances
added new biome tags for IS _ DESERT , IS _ CAVE , and IS _ CAVE in ForgeBiomeTagsProvider to enhance
rename ` present ` method to ` draw ` in multiple screen classes to improve clarity and consistency in naming conventions
added conditional logic to update UIIDs based on the horizontal state of the ComponentGroup to ensure UIIDs are correctly assigned based on whether the component is
replaced DOI _ URL _ PATTERN with matcher . matches ( ) in DOIServiceImpl . java to simplify URL matching logic and improve code
replaced ` touchHandler instanceof AndroidMultiTouchHandler ` with ` hasMultitouch ` in ` AndroidInput ` and ` AndroidLocklessInput ` to
[ java ] close the commit position in clusteredserviceagent when the commit position counter be close .
add new ` UserSite ` and ` UserSiteId ` classes , including ` UserSite ` , ` UserSiteId ` , and ` Record
refactor HttpConverterRegistrar to handle URL and port retrieval more robustly to improve error handling and provide clearer context for invalid addresses
modified the condition for determining capacity type in ApiResponseHelper . java to ensure correct handling of storage and storage capacity types
replaced ` openInput ( fileName , IOContext . DEFAULT ) . close ( ) ` with ` fileLength ( fileName ) ` in ` NRT
updated the ` JavascriptCompiler ` class to use ` ExpressionContext ` instead of ` InvocationTargetException ` and refactored the ` generateClass `
refactor UISettings class synchronization to use a synchronized block to ensure thread safety when accessing the UISettings class
modified the visibility of the ` fireDataChanged ` method from private to public in ` TextField . java ` to ensure proper handling of text input and
updated error handling to include schemaChangeErrString and emulatorErrorString in SpannerIO . java and added new test cases in SpannerIO
updated generic type declarations in CompilerTest , SortedMap , and ReportedBugsTest classes to use generics to improve code readability and maintainability
updated array type checking from double to short in ObjectInputStream and added a new CloneArray class for testing to ensure correct handling of short arrays and validate
updated nonce retrieval method to use getStringClaim method instead of getClaim to improve clarity and consistency in nonce handling
added a condition to check for relationship fields in DCInputSet . java to ensure proper handling of relationship fields in DCInputSet
added server slogan to capabilities table and updated related methods in FileDataStorageManager , FileContentProvider , and DisplayUtils to enhance user experience by providing
updated conditional logic for tinting menu items in DrawerActivity . java to improve code readability and maintainability
replaced fail call with System . out . println and added Assume . assumeNoException in SolrRequestParserTest . java to ensure test only works if
added a check to return early if the event ' s build ID is empty in MissingSymbolsHandler . java to ensure proper handling of empty symbol events
added new data fields " Data 3 - 4 " and " Data 5 - 4 " to the StringHelperTest . java file to support additional data
added a warning log for empty arrays or iterators in the DataProviderHolder initialization to ensure that the data provider is not returning an empty array or
replace return values of Collections . EMPTY _ MAP and Collections . EMPTY _ LIST with Collections . emptyList ( ) across multiple classes to simplify code and improve
updated XML version from " freeplane 1.0 . 0 " to " freeplane 1.0 . 8 " and modified selection style handling in MapStyleModel to
updated the parameter from ' mass ' to ' restitution ' in PhysicsRigidBody . java to ensure the correct restitution
added a new file AutoFtpActivity . java to implement FTP testing functionality to facilitate testing and testing of FTP operations in the application
refactor token type checking in BaseSemanticAnalyzer to use a local variable for token type to improve code readability and maintainability by centralizing token
added getter and setter methods for component state in ImageViewer , OnOffSwitch , GenericSpinner , and UIBuilder classes to provide access to component state
added a new ` RemoteExecutionEnabled ` class and corresponding tests in ` BuildableSerializerTest ` to ensure proper serialization and deserialization of ` RemoteExecution
pdfbox - 4892 : fix typo , a suggest by valerybokov
replaced FileReader with InputStreamReader in ImportCsv . java and added StandardCharsets . UTF _ 8 handling in ImportCsv . java and PublicBAOS .
added an assertion to verify shadow variables are not stale in AbstractScoreDirector to ensure that shadow variables are not stale during scoring tests
updated the configuration for semijoin conversion from " hive . enable . semijoin . conversion " to " hive . optimize . semijoin . conversion "
added SLF4J logger imports and updated DatagramPacketDecoder , Encoder , and Serializable classes to improve logging clarity and ensure proper handling of non -
replaced ` removeFile ` with ` removeDirectory ` and updated directory retrieval logic in ` SynchronizeFolderOperation . java ` and ` FileDisplayActivity
added assertions to verify transaction hash presence in PollingTransactionReceiptProcessorTest to ensure that the transaction hash is correctly retrieved and validated
added a deprecate method ` testConstructSchemaBlackList ` and ` testDeleteTimeseries ` in ` SchemaRegionBasicTest ` to indicate
added a null check for sampleMimeType in MediaCodecRenderer to ensure that the renderer throws an exception if the sampleMimeType is null
replaced instances of ` this . notify ( ) ` with ` notifyAll ( ) ` in ` QueryExecutorImpl ` and ` AbstractJdbc23Pooling
added a JsonCreator parameter to the @ AllArgsConstructor annotation to enable JSON serialization of properties in the constructor
added support for creating an index on a view in MetaDataClient . java to ensure that creating an index on a view is not supported currently
added a new file ` Website . java ` with properties for name , URL , and URI in ` PopulatorImplTest . java ` to
added a setup method to set the default locale to " en " and set the default locale to " en " and " US " to ensure consistent
added a FilenameFilter to filter out jar files from the CoreModManager to warn users about potential issues with incorrectly downloaded jar files
updated assertion in MultiPartParsingTest to use Matchers . equalToIgnoringCase instead of containsString to improve test readability and maintainability by using
added a check for a single parameter and added a check for variable expressions in SimpleExprGenerator . java to ensure proper handling of variable expressions in the
added a volatile boolean field ` createdVertx ` and updated conditional logic in ` VertxComponent . java ` to ensure proper handling of vertx creation
refactor ` writeAttributes ` calls to use ` NodeModel ` instead of ` null ` to improve code clarity and maintainability by using a more
updated log message formatting and added null checks for getFile ( ) and getCurrentDir ( ) in SynchronizeFolderOperation . java and FileDisplayActivity .
added a ` ignoredReadStatus ` property to the ` Entries ` class and updated related methods in ` CategoryREST ` , ` FeedREST `
replaced MavenTestingUtils . getTargetDir ( ) with MavenPaths . findTestResourceDir ( ) for resource resolution to improve resource path resolution and
[ type : refactor ] add validation for uriregisterexecutor and uriregisterexecutorsubscriber
updated the condition for playing the sound in GwtMusic . java to ensure that the sound is only playing when not paused
added a new permission check for ADMIN _ SUDO _ AREA in MainCommand . java and modified permissions in Captions . java
updated query options in ServerRequestPlanVisitor and added a new method to update query options in QueryRunnerTest to enhance query tracing capabilities and improve test
replaced calls to ` toUri ( ) . getPath ( ) . equals ( ) ` with ` path . getFileName ( ) . toString ( ) `
updated assertions in ResourcesTest . java to use variable names for pureEmoji and mixEmoji and text to improve code readability and maintainability by using
changed the return type of NMTWaitForDataMerge and NMTMallocWithPseudoStack methods from boolean to void and added new methods for
[ hotfix ] [ serializers ] rename javaeitherserializersnapshot to javaeitherserializersnapshot
updated AddressResolverOptions to utilize a new method ` resolvOption ` and introduced a new ` ROTATE _ RESOLV _
added a call to ` __ associate ` in ` RequestRockerTemplate ` and a corresponding test in ` RequestRockerTemplateTest ` to ensure
pdfbox - 4892 : avoid npe , a suggest by valerybokov
updated namespace paths from " liquibase / parser / core / xml / " to " www . liquibase . org / xml / ns / dbchangelog
rename commonmimetypelocator . source to commonmimetypelocator . test
changed the default value of ` repoState ` from ` INIT ` to ` NOT _ REQUIRED ` across multiple classes to ensure that the repository
updated the ` CompareControl ` constructor to include additional schema comparison parameters to enhance the comparison process by associating schema comparisons with different catalog and schema
updated import statement from JUnit to TestNG in TestBackwardAnoamlyFunctionUtils . java to ensure compatibility with the newer TestNG
added a new file ` ProgressiveJPEGTest . java ` to implement a jpg texture integration test to ensure proper rendering and rendering of
updated MaterialLoader to use mat . setFloat ( " AlphaDiscardThreshold " , 0.01f ) instead of rs . setAlphaTest ( true
[ gr - 24435 ] fix native - image building on window .
added a null and empty check for the text before setting the size to prevent potential NullPointerExceptions when the text is not provided
updated the method call from ` readVarInt ( ) ` to ` readVarInt ( ) % 1 _ 000 _ 000 ` to
changed PushUtils to be final and added private constructors to PushUtils , ThumbnailsCacheManager , and ThumbnailsCacheManager to enforce immut
removed bounds check from the length assignment in RocketPanel . java to simplify the code and improve readability
removed unnecessary cast to MockDirectoryWrapper in TestDirectoryReaderReopen . java to simplify code and improve readability
updated the parameter in the ` load ` method from " . * csv " to " ( ? i ) . * csv " in ` componentPreset
updated accessibility handling in TaskbarStashController and adjusted related conditions in ActivityContext and FloatingIconView to improve accessibility handling and ensure proper handling
updated the instantiation of ` homeNode ` to use ` RefreshTask . getNodeId ( ) ` instead of ` Args . getInstance ( ) . get
added a test for targeting both JDK 1. 3 and JDK 1 . 5 in PMDTaskTest . java to ensure that
replaced PowerMockito with MockitoJUnitRunner in QuotaResponseBuilderImplTest . java to simplify mocking and improve test reliability
added static PrintStream variables for error and output streams in TestSchemaToolCatalogOps . java to ensure proper logging and error handling during test execution
added a ` DFSClient ` parameter to the ` FanOutOneBlockAsyncDFSOutputSaslHelper ` class and updated related methods to
added RepositoryMetadata to the MongoQueryMethod constructor and updated related tests to include it to enhance functionality by associating repository metadata with the query method
refactor Digester to utilize EntityResolver2 for entity resolution to improve code clarity and maintainability by encapsulating entity resolution logic
removed redundant import statements in MetaDataEndpointImpl . java to streamline code and improve readability
increased ALLOWED _ REPEATED _ DEADLOCKS from 5 to 10 and added deadlock retry logic in TxnHandler . java to increase
updated variable names from ` xl ` to ` xAxis ` in ` BarChartActivity ` and modified yOffset calculation in ` LineChartActivity1
added functionality to validate printable characters in FsUtils . java to ensure proper handling of printable characters in Windows environments
rename ` in ` and ` using ` methods to ` using ` in ` and ` using ` methods across multiple classes to improve clarity and consistency in
do n ' t process plugin in defaultprojectbuilder if the plugin be not process
updated return values in ProxyConnectionManager and ServerTrafficCounter to return doubles instead of doubles to ensure consistent data representation for better performance
[ google - cloud - vision ] fix google - cloud - vision / src / test / resources in itsystemtest
updated return values in ModeledConnectionRecord , ActiveConnectionRecord , ActiveConnectionRecord , and AuthenticatedUser to return the remote host from the user
added admin authorization check in CommunityListServlet to ensure proper access to the admin button when the user is authenticated
added an AtomicInteger to track the number of compactions threads in CompactSplit . java to track the number of compactions threads for better tracking of
replaced getApplication ( ) . getPackageName ( ) with resources . getResourcePackageName ( ) for retrieving wallpapers to improve code readability and maintainability by
updated the method ` getPlayersInPlotVisible ` to use a new method ` getPlayersInPlotVisible ` for filtering players in plot
updated AndroidManifest , ResName , and ShadowActivity classes to improve code organization and maintainability
refactor MlibOpsTest . java for improved readability to enhance maintainability and facilitate future updates
replaced hardcoded string " com . sun . management . internal . OperatingSystemImpl " with a constant OPERATING _ SYSTEM _
updated attribute name from " referencedContainer " to " referencedContainer " in SchemeGenerator . java and added a new test case in SchemeGeneratorTest .
removed unnecessary null checks for key and initialization vector in UploadFileOperation . java to simplify the code and improve readability
added stability annotation to WorkProfileTest . java to ensure compatibility with both LOCAL and POSTSUBMIT environments
removed conditional check for bucketing version in TezCompiler . java to streamline code by eliminating unnecessary checks
updated the method call from ` setCursorPosition ( x , y ) ` to ` input . setCursorPosition ( x , y ) ` to
refactor LockFreeBucket to extend LockFreeBucketContendedTimeMeter and add a new LockFreeBucket _ FinalFields _ CacheLinePadding class
added a method to print thread pool statistics in NodeProbe . java to provide users with detailed thread pool statistics information
updated maxBitrate assignment to use userPreferences ' s value to ensure maxBitrate is set correctly based on user preferences
refactor ZipkinHttpSpanExtractor to use private methods for handling trace and span IDs to improve code clarity and maintainability by encaps
refactor ` getUserPaymentAccounts ` methods in ` MutableOfferDataModel ` , ` CreateOfferDataModel ` , and ` DuplicateOffer
refactored method invocation in FlutterCompletionContributor to use direct method invocation instead of reflection to simplify code and improve readability by reducing unnecessary reflection
added a call to set the project configuration in LauncherUtils . java to ensure the project is properly managed during the launcher process
added ProjectFilesystem support to JsBundle , JsBundleBuilder , JsTestScenario , JsBundleWorkerJobArgs , and Js
refactor multiple Java files for consistency and clarity to improve maintainability and readability of the codebase
[ hotfix ] [ doc ] fix typo in metricsdslcontext
replaced the implementation of the VersionConfig interface with an ImmutableSet of entries in VersionBuckConfig . java to simplify the code and improve readability by
added a try - catch block around the bindShadowClass call in Robolectric . java to handle TypeNotPresentException gracefully to improve
changed the visibility of the ` validateTypes ` method from static to public and updated the exception message format to allow access to the method from other classes
fix : update gapic - generator - java with mock service generation fix ( # 43 )
added SLF4J logging to SimulationStatus . java to improve logging capabilities for simulation status
updated VERSION _ POSITION _ Y and VERSION _ FONT from 138 to 150 in Splash . java to reflect the new font ' s
added a call to runLater ( ) before adding a notification in UserInterfaceComponentImpl . java to ensure notifications are added at a later run
replaced the mock . foo ( ) with a mock . returnselementsof ( Arrays . asList ( 1 , 2 , 3 ) ) in the Returns
corrected a typo in the error message from " Only allowed using non - equality " to " Only allowed using equality " to ensure clarity and
added a new test method ` testLineFileDocs ` to ` BaseStoredFieldsFormatTestCase ` to verify the functionality of handling stored documents in the
added a method to retrieve the version code of MainApp and updated imports in FeatureList , FeatureList , and WhatsNewActivity to use
camel - 14263 : fix the problem of ambiguous method call in beaninfo . requestbody ( string , reader )
updated assertions to use ` getSubmittedFileName ( ) ` instead of ` getContentDispositionFilename ( ) ` in ` MultiPartInputStreamTest . java `
added buffer ownership checks in IndexBufferObject , VertexBufferObjectWithVAO , and VertexBufferObjectWithVAO classes to ensure proper resource management
added a transition to " forgotPassword " in the PasswordManagementWebflowConfigurer to enhance user experience by providing a clearer transition for password reset
refactor JerseyClientConfiguration class to improve code readability to enhance maintainability and facilitate future updates
int - 1569 remove the import of CharacterStreamReadingMessageSource and CharacterStreamWritingMessageHandler from console adapter .
updated variable names from ` s ` to ` o ` in ` InstanceOfPatternMatchTest ` , modified return types in ` RemoveRedundant
added methods to handle empty arrays in StringDict and updated column and row count logic in Table to improve data handling and ensure proper handling of empty arrays
added ` AutoCloseable ` interface and modified ` GenericContainer ` to implement ` AutoCloseable ` and added ` createContainerCmdHook ` functionality
updated log level from info to error in MediaInfo . java and refactored test methods in RendererConfigurationTest . java to improve error logging and
added schemapattern option handling in BundledDriverDatabaseConnector and PropertiesDataSourceDatabaseConnector to enable dynamic configuration of schema patterns based on user input
added import for TlsUtils and modified return statement in ProvSSLSessionImpl . java to ensure proper handling of null IDs and improve code
updated calculations for ratio and resize dimensions in AndroidGraphics . java to improve accuracy of image bounds calculations
refactor Base64 class to improve code readability to enhance maintainability and facilitate future updates
[ gr - 24144 ] add fallback to llvmglobalcontainer . getfallback ( ) .
updated the @ Ignore annotation in JavascriptEnabledDriverTest . java to include only IPHONE and SELENESE devices to temporarily disable the test
refactor FlowBuilder and FlowJobBuilderTests classes to improve code organization and maintainability
changed the type of ` resName ` and ` resId ` from ` ResName ` to ` resId ` in ` AttributeResource ` to
refactor Docker certificate path handling to use a new method ` resolveContextTLSFile ` to improve code readability and maintainability by consolidating
rename @ After to @ Before in SimpleReactiveElasticsearchRepositoryTests . java to improve clarity and consistency in naming conventions
modified type variable handling in mmm Attr . java and added a new class T6450290 . java to improve type safety and introduce a new
added logging level configuration and a method to set the default logging level in LoggingFlags and LoggingOptions to enable dynamic configuration of logging levels based on configuration
added logging statements to various classes and modified the deleteItemsFromDatabase method to accept a Collection instead of an Iterable to improve debugging capabilities and enhance code
added ` allFilesOption ( ) ` method to ` FileActivity ` , ` FileDisplayActivity ` , and ` PreviewImageActivity ` classes
added new methods ` forEachOperation ` and ` hasMatching ` to the ` MutationOperationGroup ` class to enhance the functionality of ` MutationOperationGroup
updated the calculation of ` numPredictiveAppCols ` to use ` isPhone ( ) ? 4 : numColumns ` instead of ` num
updated the initialization of the value variable to use UTF - 8 encoding to ensure proper handling of UTF - 8 characters in string representation
added new ` RequestMatchers ` class and corresponding tests in ` RequestMatchersTests ` to enable testing of matching request matchers in the security
ggb - 2195 remove unnecessary check for app . isapplet ( )
updated height and width calculations in ProgressBar . java to account for the bottom and right height adjustments to ensure accurate positioning of the knob
[ native query runner ] fix path to json - based - function - definition
added ` final ` parameters to ` extra _ L0 ` , ` extra _ L3 ` , and ` extra _ L4 ` variables to
added a condition to check if the state handler is invalidated in the gesture state check to ensure that gesture handling only occurs when the handler is invalidate
updated layout calculations in CellLayout , DynamicGrid , and Workspace classes to improve layout dimensions based on orientation and layout dimensions
added a condition to check if the redir file is a " / robots . txt " in HttpRobotRulesParser . java to ensure proper
fix callhierarchytopcomponent . form to use static icon .
updated button name from " continue " to " createWorld " in AdvancedGameSetupScreen . java to clarify the purpose of the button being subscribed
updated the null check condition in UDFOPDivide . java and added a new test class TestUDFOPDivide . java to ensure
reformatted code and formatting in FlowJob and StopAndRestartFailedJobParserTests to improve readability and maintain consistency in formatting
refactor FormLogin and LogoutBeanDefinitionParser to utilize a matcher for handling URL request matchers to improve code clarity and maintainability by central
added onDestroy method to ShareActivity and ContributionsActivity to unbind the uploadServiceConnection to ensure proper cleanup of the service when activity is destroyed
renamed ` thumbNail ` to ` thumbnail ` in ` WallpaperPickerActivity . java ` to improve clarity by using a more descriptive
refactor multiple Java classes for improved organization and clarity to enhance maintainability and readability of the codebase
added request timeout setting in RaftServerConfigKeys . Rpc to ensure proper handling of RPC requests based on the configuration
updated logging level from error to debug and refactored resource management tests in TsFileResourceManager . java and ResourceManagerTest . java to improve
added system properties to the model source in MavenModuleLoader . java to ensure proper configuration of the model source and system properties
added READINESS _ CHECK _ OK _ CALLS and READINESS _ CHECK _ BAD _ CALLS metrics to ServerMeter and
added model registration for animated Torch in BlockAnimatedTorch . java to enable custom model registration for animated Torch items
added null check before closing the writer in FileHistoryCache . java to avoid potential NullPointerException when the writer is null
refactor UtilsForTest to utilize UtilsForTest for obtaining Hive configuration from a specified directory to improve code organization and maintainability by centralizing
added Muting Users link to the links in FeaturesActivity . java to enhance user experience by providing users with Muting Users links
added a property to set " jdk . reflect . useDirectMethodHandle " to " false " in initializedProperties to disable direct method handle functionality in
hbase - 13232 change splitonleadingvarcharcolumnspolicy to extend steppingsplitpolicy instead of constantsizeregionsplitpolicy
[ hotfix ] [ yarn ] add env _ flink _ lib _ dir and env _ flink _ plugins _ dir to yarn
updated method calls from ` getPronunciations ` to ` getWord ` in ` BuildTranscriptHMM ` and ` TrainerDictionary `
updated JSON string formatting in JsonUtilsTest . java to improve readability and maintain consistency in formatting
added extra data for the tweet ID in TimeLineCursorAdapter , TimelineArrayAdapter , and Compose classes to ensure proper handling of tweet ID
log a warning if underlying ring buffer data related to reliable topic be lose .
replace IOException with NoClassesFoundToAnalyzeException in FindBugs2 . java and introduce a new NoClassesFoundToAnalyzeException class
updated import statement from Key to PublicKey in KeyFetcher . java to ensure compatibility with the latest security package structure
added a new boolean variable ` isIncompatible ` and updated its initialization logic to ensure proper initialization of the ` isIncompatible ` state in the ` 
updated the ` createAccount ` method to use ` AccountCreateContract ` instead of ` Account ` to ensure the correct contract is used for account creation
pdfbox - 4892 : check for non - empty range array , a suggest by valerybokov
http : / / issues . apache . org / jira / browse / amq - 3292 - fix messagelistenerredeliverytest failure
set enableOffHeapFormat to true and update star tree format version from " v1 " to " OFF _ HEAP " across multiple files to
updated title handling in FeedUpdateService to adjust the length of the title to ensure the title is trimmed to a minimum of 2048 characters to prevent
updated preview panel handling in JColorChooser and BasicColorChooserUI to utilize ColorChooserComponentFactory to improve clarity and maintainability of the preview
changed log level from info to debug in DefaultBuildExtensionScanner . java to reduce log verbosity and improve performance during testing
added a null check for reusableBitmap before retrieving the inMutable bitmap to avoid potential NullPointerExceptions when retrieving bitmaps
added getLayoutParams method to FakeView class to provide access to ViewGroup . LayoutParams for layout parameters
added a check to throw an illegal state exception if a Cursor is already closed to ensure that an illegal state exception is thrown when the session is closed
pdfbox - 4892 : add a method to find the index of a page in the parent dictionary , a suggest by valerybokov
added JUnit @ Ignore annotation to JMSClientTest . java to temporarily disable the test due to potential issues
added a private field ` ts ` and its getter and setter methods to the ` Message ` class to provide access to the ` ts `
added a new utility class ` ExceptionMapperUtils ` and refactored error handling in ` GenericExceptionMapper ` , ` ValidationExceptionMapper ` ,
changed the access modifier of the AbstractExecutor class from package - private to public to allow access to the class from other packages
refactor legacy parameters handling in IsochroneResource and RouteResource classes to use a static method to improve code readability and maintainability by
changed class access modifiers from public to package - private in multiple test classes to allow access to these classes from other packages
refactor CSRF handling by introducing a separate method ` setCSRF ` to improve code readability and maintainability by encapsulating the
added a bootstrap check for the " PackageShader " and " ClassFileMetaData " classes in EclipseLoaderPatcherTransplants . java to ensure
[ jbrules - 2576 ] add support for numeric disable in excel parser
changed log level from info to debug in HiveConf . java to ensure logging is only logged when debug is enabled
added null checks for axes and buttons in Lwjgl3Controller and updated related logic in Lwjgl3ControllerManager to improve robust
updated ObjectFactory import from cucumber . api . java to io . cucumber . core . backend . ObjectFactory in WeldFactory and WeldFactoryTest to
refactor port forward saving logic to use HostDatabase instead of HostDatabase to improve code readability and maintainability by avoiding redundant checks
added a new GlobalConfiguration property ` SHOULD _ SNAPSHOT _ DATA ` and its getter and setter methods to control the behavior of snapshot
refactor job creation and error handling in SyncedFolderObserver . java to improve code readability and maintainability by reducing redundancy
refactor LocationMarshaller class to improve code readability to enhance maintainability and facilitate future updates
refactor touch handling logic in StatusBarTouchController , TouchInteractionService , and OtherActivityInputConsumer to improve code readability and maintainability by
updated package structure and removed the implementation of the VectorReader interface to simplify the codebase and improve maintainability
replaced ` ArgumentMatchers ` imports with ` Matchers ` imports across multiple test files to standardize the use of ` Matchers `
replaced ` getRelativePathName ( ) ` with ` getRelativePath ( ) ` in multiple classes to simplify path retrieval and improve code clarity
updated methods in SegmentMapper , CompositeTransformer , and RecordReaderFileConfig to accept RecordReaderConfig as a parameter to enhance flexibility by allowing configuration of
added a null check for the extractor variable before returning it in ControllerMethodInvoker . java to avoid potential NullPointerExceptions when extractor is not initialized
add findcorrectresourcelimitforaccountanddomain method to findcorrectresourcelimitforaccountanddomain in resourcelimitservice and resourcelimitmanagerimpl
make potion shift event cancelable
[ hotfix ] [ runtime ] deprecate cold _ reads _ to _ omit option in sizetieredcompactionstrategyoptions
added a call to leech . stop ( ) in ClientTest . java to ensure proper resource management and prevent memory leaks
[ rocketmq - 2576 ] fix broker metric for retry message ( # 10254 )
refactor KeyboardAddonSettingsFragment to improve code organization to enhance maintainability and readability of the code
added JUnit @ Ignore annotation to ShadowDateUtilsTest . java to temporarily disable the test due to time issues
updated MongoReactiveAutoConfiguration to rename ` EventLoopGroupMongoClientSettingsBuilderCustomizer ` to ` NettyDriverMongoClientSettingsBuilderCustomizer `
added support for setting the upgrade request and response in Jetty tracking sockets to ensure proper handling of websocket upgrade requests and response handling
added timeout support in AndroidImplementation to allow dynamic connection timeouts to enhance flexibility in connection timeout handling
refactor user and team access permissions retrieval methods in GitblitClient and RepositoriesPanel to improve code clarity and maintainability by consolidating
added a new test method ` testQuotedCastExpression ` to ` SelectTest . java ` to validate SQL parsing and deparsing to ensure correct
refactor assertions in Misc . java to check if the system is a root or not to improve clarity and maintainability of the test logic
refactor FixedThreadExecutor to use dynamic property for group count and thread per group to improve flexibility and maintainability of the executor configuration
added null check for field before checking for " catalogname " in AbstractChangeGenerator . java to avoid potential NullPointerException when field is null
replaced ` CasEventListener ` with ` InitializingBean ` in multiple configuration files to utilize the new ` InitializingBean ` interface for better
refactor animation end logic into a separate method ` endAnimation ( ) ` to improve code readability and maintainability by encapsulating the
modified the DeflaterOutputStream initialization to include an overridden close method to ensure proper resource management and prevent potential memory leaks
added a new file ` gsp001 . java ` implementing native methods for retrieving system properties to facilitate testing of system property retrieval at early phase phase
refactor BeanDefinitionInjectProcessor to use AnnotationMetadata for better handling of annotation types to improve code readability and maintainability by reducing redundancy
added JmeExporter imports and implemented read and write methods for CameraNode , LightNode , and CameraControl classes to utilize JmeExporter
refactor PopupNotificationPanel to use the parent window for creating a new panel title to improve code clarity and maintainability by using the parent window
replaced instances of ` ambiguousNoInstanceException ` with ` inferenceException ` and ` ambiguousInferenceException ` to simplify exception handling and improve clarity in exception
added a method ` getFeatureValue ( ) ` to return the feature value to provide access to the feature value for external use
changed the parameter type of the ` after ` method from ` int ` to ` long ` in the ` Mockito ` class to allow for more flexible
added properties ` onBuild ` and ` executionDriver ` to ` ContainerConfig ` and its corresponding getter and setter methods in ` Info ` classes to
added conditional logic to set the icon for the arrow in Toolbar and FlowLayout classes based onRTL state to ensure correct icons are displayed based on the
added support for position increments in StopFilterFactory to allow dynamic configuration of position increments in the StopFilter
updated email handling in EmailsTest and SystemErrorEmailReportTest to use an InternetAddress instance instead of a hardcoded string to improve code
added a new variable ` mTryShareAgain ` and initialized it to ` false ` in ` FileActivity . java ` to ensure proper handling
[ fusesource - jansi - native ] support jansi - native ' s tty name .
refactor bandwidth calculation to use a variable for bytesSize instead of a hardcoded value to improve code readability and maintainability by reducing redundancy
replaced direct assertions with Awaitility ' s await method in Issue410Tests . java to improve code readability and maintainability by utilizing
updated URL constants in EaseeBindingConstants . java to use the new API base URL instead of the existing URLs to streamline the API
updated sleep duration in KafkaIOIT . java and added startup attempts in kafkaContainer . withStartupAttempts ( 3 ) to improve read timeout handling and
replace allOf with is ( itemName ) in SearchResultMatcher to simplify the matcher logic for better readability and maintainability
added support for trusting all SSL certificates in OkHttp . java to enhance security by ensuring all SSL certificates are accepted
replaced ` mA11yLongClickListener ` with ` buttonView . setOnLongClickListener ` in ` NavbarButtonsViewController ` and refactored
added a new file ` HyperlinkFormula . java ` and modified ` StringPtg . java ` to use ` int ` instead of byte to
added null checks for stdout and stderr in ShellStep . java to ensure proper handling of null values to prevent potential NullPointerExceptions
increased TIMEOUT _ MILLIS from 1000 to 2000 in AsyncAppenderTest . java to increase test timeouts for better reliability
refactor ` escapeDatabaseObject ` methods to accept ` objectName ` instead of ` tableName ` and ` objectType ` to improve code clarity and
added a boolean field ` inputChanged ` and modified input validation logic in ` MaterialRenameDialog . java ` to improve input validation logic and ensure correct
added a test for state change handling in ShadowDisplayTest and implemented setState method in ShadowDisplay to ensure proper state changes are applied to other instances of
[ geos - 8411 ] add support for directinvocation service in ows
added support for GWT key codes " KEY _ X " and " KEY _ Y " in GlobalKeyDispatcherW . java to enhance key validation
updated SQL queries in PgDatabaseMetaData . java to include primary key dependencies based on server version to ensure compatibility with database schema versions prior to v9
add nullable annotation to the message variable in QueueChannel . java to improve code clarity and prevent potential NullPointerExceptions
replaced ` jarPath ` with ` pathUri ` in ` getPathsFromResource ` method to simplify code and improve readability by using a more
added support for handling Jenkins nodes in the CollectorServer to enhance functionality for managing Jenkins nodes in the CollectorServer
refactor attribute retrieval in HeadersBeanDefinitionParser to use a new method ` resolveAttribute ` for attribute resolution to improve code readability and maintainability by
updated EOFException handling and added conditional checks in ProtobufLogReader . java to improve error handling and provide clearer logging for malformed edits
refactor destroy method calls in DefaultApplicationDeployer and add shutdown method in NacosRegistry to improve code clarity and ensure proper cleanup of Nacos
camel - mybatis : fix switch / cases indentation see camel - 14540
refactor GoAwayGenerator , GoAwayBodyParser , and GoAwayFrame to use a dedicated method for writing status codes to improve
updated AuditEvent and AuditEventTests to print JSON data to improve test coverage and ensure correct JSON output for audit events
added checks for FLOAT _ ROUNDING _ ERROR and corrected the return value in the Math . cbrt method to ensure correct rounding behavior and
corrected the path variable in ForgeWorldEdit . java to ensure the correct path is appended to the default directory
refactor DxStep to use a variable for the DX executable path to improve code readability and maintainability
added unit tests for PointRangeQuery instances in TestPointQueries . java to ensure correct behavior of PointRangeQuery instances in tests
hbase - 24497 make testhfilecleaner use mock archivedhfiledir instead of hardcoded value
added a check to ensure the file name matches the file transfer request ' s file name before displaying the file label to avoid duplicates when the file name
[ hotfix ] [ runtime ] remove unnecessary throw in Jedisclustercommand
[ hotfix ] [ runtime ] set chainingstrategy to always always in rowtimeminibatchassgineroperator
updated ` FilterInvocationDefinitionSourceEditor ` to use ` PathBasedFilterInvocationDefinitionMap ` instead of ` RegExpBasedFilterInvocationDefinitionMap ` to
added benchmarks for hash maps in QMapReadRandomKeyBenchmark , QMapReadSequentialKeyBenchmark , and QMapWriteBenchmark classes to enhance
added a new HashMap instance for G _ SCH _ B in HybridPlotWorld . java to initialize G _ SCH _ B with a
added a check for empty fields and modified field identifier handling in GroovyEngine . java to improve robustness by ensuring proper handling of empty fields and enhance
added a call to setDrawable ( false , false ) for the GeoAngle object in AlgoDependentNumber . java to ensure the number drawable is
added SERVER _ READ _ SOCKET _ TIMEOUT and SERVER _ TCP _ KEEP _ ALIVE configurations and modified TServerSocket
renamed the method ` getRenameEmptyFiles ` to ` isRenameEmptyFiles ` to improve clarity and consistency in method naming
no effective change - remove unused import
removed unnecessary imports and simplified thread creation in RealtimeSegmentRelocator . java to improve code readability and maintainability by using lambda expressions
vpc : do n ' t set success flag in createvpc cmd by admin
updated progress handling in WindowTransformSwipeHandler and modified condition in FloatingIconView to improve accuracy of progress calculations and ensure correct visibility of the Float
update the fatal message for Spring Security schema versions in SecurityNamespaceHandler . java to ensure compatibility with Spring Security 4.0 schemas
[ hotfix ] [ test ] fix checkstyle violation in protosubjecttest
changed fields from non - final to final in DisruptorProviderManage , QueueConsumer , and QueueConsumer classes to enforce immutability and improve
added a new test class ` TestConfigureUDF ` and modified ` ExprNodeGenericFuncEvaluator ` to utilize it to validate UDF configuration
updated regex pattern in LogMessageWaitStrategy to match " ? s " instead of " . * ready ! \ \ s " in outputFrame to
removed redundant initialization of logger variable in LOG . java to simplify logging code and improve readability
change method names from ` updatePurgedShardNodes ` to ` deletePurgedShardNodes ` across multiple files to standardize method naming and improve
added new Java language versions " 17 " and " 17 - preview " to the JavaLanguageModule and added a new language version " 17 - preview
added a constant ` SECONDS _ TO _ WAIT _ FOR _ COMPRESSION _ JOBS ` and modified ` TimeBasedRolling
added a null check for lastLocationAccess before checking if hasOnlyUsagesOfType ( Memory ) is true to ensure that only usages of Memory
added a method ` getSteps ( ) ` to return an unmodifiable list of steps to enhance the functionality of the ` getSteps ( ) ` method
removed unused ` fromBase58 ` , ` toBase58 ` , and ` contractAddressBase58 ` fields from ` TronJsonRpc `
refactor currency pair retrieval logic in BitstampAdapters . java to improve code readability and maintainability
update duration calculation to use baseTimeUnit instead of NANOSECONDS to ensure accurate measurement accuracy by using the correct base time unit
[ euphoria - 908 ] do n ' t use shaded iterables in reducebykeytranslator if the partitioner be not a
refactor color handling to use CharSequence for better type safety to improve type safety and reduce potential ClassCastExceptions
replaced ` IncompatibleDatabaseHandler ` with ` DatabaseVersionHandler ` and updated related methods to use ` DatabaseVersionFile ` instead of ` Incompatible
added a constant for MAX _ TWEETS _ IN _ CONVERSATION and updated the condition in ExpansionViewHelper . java to
increased the refresh interval from 1 second to 2000 seconds in AbstractCachedLDAPAuthorizationMapLegacyTest . java to allow more time for the map refresh to
[ hotfix ] [ table - common ] fix queue . getpersistedbytesize for deleted tail page .
change method call from ` getClass ( ) . getImplementationTitle ( ) ` to ` GlowServer . class . getImplementationTitle ( ) `
refactor the grow method into a separate method ` grow ` to improve code readability and maintainability
removed the import of DataOutputStream in GdxSetup . java to eliminate unused imports and improve code clarity
added a method ` getSubmittedFileName ( ) ` to the ` AttachmentHttpBinding ` class to provide access to the submitted file name for better retrieval
added a call to markReadForLoad ( ) in LauncherFragment . java to mark the fragment for loading to ensure that the fragment is marked
removed unnecessary exception handling for NegativeArraySizeException in JarInstrumentor . java to streamline error reporting and improve code clarity
added a method ` checkForSpillPossibility ` to check if a partition is spilled in ` HashAggTemplate . java ` to ensure
changed variable declaration from ` dsName ` to ` dsName ` in ` IndexWriter . java ` to ensure consistent access to the document store segment
added a constant for name ID format in SamlProfileSamlNameIdBuilder to ensure compatibility with SAML profile name ID formats
added a call to setRedirect ( false ) and error ( " Password change aborted . " ) in ChangePasswordPage . java to indicate that the
added a semicolon to the closing brace in Deadlock2 . java to improve code readability and maintainability
added a method ` getMaxIdleTime ( ) ` to the ` NioReceiverMBean ` class to provide a way to retrieve the maximum idle time
deleted the FontScalingTest . java file to remove unused font size calculation to streamline the codebase
added validation for begin and end dates in RRD4jPersistenceService . java to ensure only valid dates are processed to avoid runtime errors
added a check for non - negative numVectors in GenericUDAFComputeStats . java to prevent unnecessary processing when the number of vectors is
test : migrate executablereftest to junit 5
added null checks before setting view and glassPane in JLayer . java and created a new test class bug6994419 . java to ensure
camel - 14263 : wiretap expression should be set to the routecontext when use the wiretap .
changed the visibility of the setAction method from public to protected to allow subclasses to access the setAction method
add option to enable topn in planner . pushlimittotopn .
[ java ] remove unnecessary ` ` aerondirectoryname ' ' call .
fixed - rconnection . setqueued ( true ) and rexecutor . setqueued ( false ) do n ' t check if the connection
replaced ByteArrayOutputStream with FileOutputStream for configuration variable handling and refactored getConfVarInputStream method to return a URL instead of a ByteArrayInputStream to
updated the device parameter in the createModel method call from Device . defaultDevice ( ) to criteria . getDevice ( ) to ensure the model is
added onCreateOptionsMenu and onMenuItemSelected methods in SimulationViewer . java to enhance the functionality of the motor details option menu
refactor CertificateValidator class to improve code readability to enhance maintainability and facilitate future updates
updated homeDir assignment to use " hawtio . dirname " property instead of " user . home " to ensure proper configuration of the directory path
added a condition to handle empty comments and return SINGLE _ SPACE instead of SINGLE _ SPACE to ensure proper handling of whitespace in space
changed variable visibility from private to volatile in multiple dictionary classes to ensure thread safety when accessing shared variables
removed printStackTrace ( ) method call in ContextHandler . java to streamline error handling by eliminating unnecessary stack trace
refactor CustomItemDropTest to extend BaseTest and add a new test class for custom item drop functionality to improve test organization and ensure proper functionality
added a ` ifNotExists ` parameter to the ` DDLTask ` , ` AddPartitionDesc ` , and ` AddPartitionDesc ` classes
refactor readBytes logic in NfsSecondaryStorageResource . java to improve input handling and streamline the reading process
[ java ] remove controlrequeststreamid call from service and basicauctionclusteredservicenode .
updated spatial operator elements in CapabilitiesTransformer to include " SpatialOperator " and added a new test for supported spatial operators in GetCapabilitiesTest to enhance
added LuceneTestCase import and annotation for SOLR - 2161 in BasicDistributedZkTest . java to address potential issues related to SOLR -
modified the condition for preface matching in Http11InputBuffer . java to ensure proper handling of preface matches based on the last valid position and
[ java ] change the default value of isIngressExclusive from true to false to disable ingress exclusive behavior in the cluster
updated HBaseStorageHandler to include multiple cache configuration keys and modified job properties retrieval logic to enhance cache configuration management and improve job property management
added methods to track and update the running record count in JSONRecordReader . java to improve tracking and tracking of the running record count in the exception
added filtering for year in CategorizationFragment to ensure only valid year entries are processed in the mergedItems list
updated color values from 0x00000000 to 0 in CacheableTextView , CellLayout , and HolographicOutlineHelper to ensure consistent color rendering across different
added a check for OpenGL ES version compatibility and invoked checkManagedAndDirty ( ) in Mesh . java to ensure compatibility with OpenGL ES 2.0
added ActionContext import and set ActionContext to null in BackgroundProcess . java to ensure ActionContext is properly reset during background processing
added a new method ` getUnescapedName ` to handle table names and modified related methods to include a database name parameter to enhance database name
added connection timeout configuration to TestConnections and changed the ` count ` variable to be ` final ` in ` StubConnection ` to ensure connection timeout is
added new assertions for the approx _ percentile functions in TestHiveAggregationQueries . java to ensure that the approx _ percentile
updated the DEFAULT _ IDLE _ TIMEOUT constant and changed idleTimeout and idleWriteTimeout from Duration . ZERO to Duration . ofSeconds ( 30
updated the account reference in the getSharesWithForAFile method to use the user ' s account name instead of the default account name to
refactor Inet6Address class to use generics and improve type safety to enhance code readability and maintainability by using generics
replaced instances of ` enableViews ` with ` setButtonEnabled ` for button settings in ` PlaybackControlView . java ` to streamline button
updated method signatures to accept a long session ID instead of a session object to enhance flexibility by allowing more flexible session ID handling
replace ` getTransitiveClasspaths ( ) ` with ` getImmediateClasspaths ( ) ` in ` DefaultJavaLibrary . java ` to ensure
changed the default value of UseExceptionProbability from true to ____ in GraalOptions . java to ensure the default probability is used for exception probability
updated the PlateColor assignment logic in PredictedAppIcon . java to handle themed icons to improve the visual consistency of the Plate
refactor MySQLUser initialization to include additional parameters for username , password , and permissions to enhance flexibility and maintainability of the user initialization process
updated aliases to include " center " and " center " in Middle . java to ensure consistency in naming conventions
added DirectUpload import and inject method to CommonsApplicationComponent to enable injection of DirectUpload functionality in CommonsApplicationComponent
added space top settings for left and right axis in BarChartActivity , BarLineChartBase , and YAxisRenderer classes to ensure consistent spacing and
added support for multiple ABI flavors in AndroidLibraryDescription and JavaLibraryDescription to enhance support for ABI compatibility in the application
added operationEventStatusType to requestParams in OnlineHubService and changed services list initialization in CompositeLogService to ensure proper handling of operation event status
added debug output for parameter annotations in DexAnnotation . java to improve debugging and ensure correct visibility annotation handling
renamed the ` @ StartBundle ` method to ` @ Setup ` and ` @ Teardown ` in the ` JmsIO ` class to
added a classpath variable to the ProcessBuilder in SortedArrayStringMapTest . java to ensure the correct class path is used for the process execution
updated file path handling in PackageResourceLoader to use " res " instead of " values " to ensure correct document loading based on the correct package name
refactor methods in DataSet . java for consistency and clarity to improve code readability and maintainability
added JUnit @ Ignore annotation to WorkProfileTest . java to temporarily disable the test due to b / 243855320
updated stack trace formatting in ShouldHaveMessage and added a new test method in ShouldHaveMessage _ create _ Test to ensure consistent stack trace formatting and
fixed - http : / / issues . apache . org / bugzilla / show _ bug . cgi ? id = 364 . add
change log level from SEVERE to INFO for ActivitiTaskAlreadyClaimedException to improve logging clarity and handle specific technical exceptions more effectively
added an empty block to initialize ALPNClientConnectionFactory in HTTP2Client . java to ensure proper initialization of ALPNClientConnectionFactory
update double serialization logic to use instance . getBaseValue ( ) instead of value to ensure accurate representation of the instance ' s base value
updated SonosAudioSink to use ThingHandlerHelper instead of ThingStatus to improve code clarity and ensure proper initialization of the handler
increase timeouts from 500L to 5 seconds in ContextRegisterListenerTest , SpringMvcClientBeanPostProcessorTest , and SpringMvcClientBeanPost
changed log level from info to debug in LightThingHandler . java to provide more informative logging when the request fails
added error handling and logging for rejected executions in AsyncJobManagerImpl . java to improve reliability and error handling during job execution execution
updated import statements and formatting in Reporter . java and ReturnsSmartNulls . java to improve code readability and maintain consistency
changed the type of the DataFrame parameter from Frame to DataFrame in the generateData method to ensure proper type handling and avoid potential ClassCastExceptions
updated package - info . java files and module - info . java files for consistency to improve code readability and maintainability
added a check for non - empty physical column names in OrcPageSourceFactory and created a new test for column names with empty files to ensure
added a call to ` methCla . mixPlay ( input , amp ) ` in ` Engine . java ` to enhance the functionality of the
refactor JComponent and SynthTextPaneUI classes to improve code readability and maintainability
updated calculations in FinderPatternFinder , QRCodeBlackBox1TestCase , and QRCodeBlackBox2TestCase to improve accuracy of test
removed unnecessary condition checks for leadingIncludePaths in PreprocessorDelegate . java to simplify the code and improve readability
refactored the method name from ` testMatrixVectorMultiplicationShouldUseBrackets ` to ` matrixMatrixMultiplicationShouldUseBrackets `
added new queries " find " and " findAll " to the SelenideElementProxy class to enhance functionality by providing additional query parameters
updated sampleRate calculation in DefaultAudioSink . java to ensure correct maximum supported channel count based on the format ' s value
added getFormula ( ) and setFormula ( String formulaText ) methods to XSSFName class and updated related imports to improve formula handling and
updated the target value from 60000 to 90000 in HighDimensionsTest . java to adjust the scaling factor for better accuracy
modified the condition in SimpleTypeGT . java and added a new test method in GMLParserTest . java to ensure correct parsing of schemas
added a new test class ` ClassPathXmlJobRegistryContextTests ` to validate job retrieval retrieval from ` ClassPathXmlJobRegistry ` to ensure
change the data type of ` mHistoricTimes ` from ` float ` to ` long ` in ` MotionPauseDetector . java ` to allow for
camel - 12320 : camel - camel - camel - camel - camel - camel - camel - camel - camel - restlet - deprecate
camel - 14263 : camel - log - remove the showout option from the logendpointbuilder
refactor ChromeTraceBuildListener to use a dedicated method ` writeChromeTraceMetadataEvent ` to improve code readability and maintainability by encap
added a conditional check for non - canceled and non - filled limit orders before adding them to limitOrders to ensure only valid limit orders are added
added pixel offset calculations and validation for image layout in LCMSImageLayout . java to ensure correct image handling and improve image layout validation
refactor timestamp handling in Event . java and JrubyEventExtLibrary . java to use RubyTimestamp directly to improve code clarity and maintainability by
added a condition to return the resource if the path ends with " / " and a corresponding test in WebAppContextTest to ensure proper handling of
changed the name handle from " TypeErrorThrower " to " TypeErrorThrower _ GETTER " in ScriptFunctionImpl . java to align with the
updated variable names and logic in JEditTextArea . java to improve clarity to enhance code readability and maintainability by using more descriptive variable
added null check before setting guardsStage and stageFlags in GraphDecoder . java to avoid potential NullPointerException when callerLoopScope is null
test : migrate sniperjavaprettyprinter to junit 5
refactor URLOutputStreamTest to use try - with - resources for resource management to ensure proper resource management and avoid potential memory leaks
added multiple @ Entity annotations to Mail class to ensure proper entity management in the Mail class
updated default values for ` includeTablespace ` from ` false ` to ` true ` and modified command parameter settings to enable the inclusion of tablespace
added getter methods for metaDataBuffer and valuesBuffer in CountersReader . java to provide access to metadata and values buffers for better data retrieval
added a boolean flag ` hasReadNonEmptyFile ` and a corresponding test in ` TestJsonReader ` to ensure proper handling of empty JSON files
added conditional checks for ` internalCustomName ( ) ` in ` StringSubject . java ` and updated assertions in ` StringTest . java ` to
added a regex pattern for matching library names in LibUtils . java to improve code readability and maintainability
replaced ` ClassNotFoundException | NoClassDefFoundError ` with ` Exception | Error ` in ` JrtJavaBasePackages ` and ` PackageHelper
hbase - 14545 check hdfs safe mode before write to file system ( sergey shelukhin )
updated error message formatting in TranslatingJavacPhaseTracer . java to improve clarity of error messages for better debugging
refactor DefaultPluginCache to improve plugin descriptor cloning functionality to enhance performance and maintainability of the plugin descriptor management
refactor contact status update logic into a separate method ` updateContactStatus ` to improve code readability and maintainability by reducing duplication
refactor the ` withResourceAndParams ` method in ` ServletRequestDetails ` and modify its usage in ` ResourceMethodTest ` to improve code
added a new integration test class ` AccountInfoFetchIntegration ` to verify the functionality of fetching account information from the BTCE exchange
added mouseWheel method to VDUInput and vt320 classes , and modified mouseReport logic in TerminalView to enhance mouse wheel functionality and
updated library path handling in Natives . java to use a variable for extraction directory and added a conditional check for JInput to improve code clarity and
remove deprecated ColumnHstore annotation and updated import statements in DeployCreateProperties . java and ColumnHstore . java to streamline the codebase
added PLAYER _ SKIN _ FLAGS setting in MetadataIndex . java and modified metadata handling in MetadataIndexTest . java to enhance player skin
refactor LoadBalancerWithServiceTests to use SLF4J logging instead of RequestFieldMatcher to improve logging and enhance test reliability by using a more
reformatted code for improved readability and formatting in MapService . java to enhance code maintainability and ensure consistent formatting
replaced System . getProperty ( " os . version " ) with AccessController for OS version retrieval to enhance security by using a privileged action for OS version
updated the file suffix configuration in TemplateEngineFreemarker to use a configurable suffix to improve flexibility by allowing dynamic configuration of the file suffix
updated hash code calculation in SelectMessageQueueByHash . java and added additional order IDs in SelectMessageQueueByHashTest . java to ensure
refactor ToolbarPanel to use Layout . AnimationCallback for animation handling to improve code clarity and maintainability by centralizing layout management
replaced ` EasyBind . bindConditionally ` with ` EasyBind . when ( hasCaret ) ` in ` StyledTextAreaVisual . java
added CxxBuckConfig to manage declared platforms in PrebuiltAppleFramework , CxxBinaryDescription , and CxxGenruleDescription classes
replaced ` SimpleParameterAccessor ` with ` ParametersParameterAccessor ` in multiple JpaQueryCreator , PartTreeJpaQuery , and PartTreeJ
added a null check before setting the password attribute in LdapAuthenticationProviderConfigurer to avoid potential NullPointerExceptions when passwordAttribute is null
added a check for the type of ` byte ` and ` String ` in ` DataUtilities ` and created a test for default value arrays to ensure
updated SSL engine creation logic to check for null address before returning a new SSLEngine to ensure proper host name verification and avoid potential null pointer exceptions
updated assertions in TestFSTableDescriptors from assertEquals to assertTrue for cachehits to ensure correctness of cachehits validation
add wdDeleteCookie method to ExportedWebDriverFunctions and refactored cookie deletion logic in InternetExplorerDriver to streamline cookie deletion process
added a boolean flag ` mHasEndedLauncherTransition ` and modified gesture handling logic in ` AbsSwipeUpHandler ` to ensure proper handling of
updated HTML head tags to include charset = \ " utf - 8 \ " to ensure proper charset handling for HTML output
refactor IndexReader class to improve code readability to enhance maintainability and facilitate future updates
updated the default value of HIVE _ STATS _ KEY _ PREFIX _ MAX _ LENGTH from 200 to 150 and refactored
added a new class ` bug6337518 ` to ` BasicComboBoxUI ` and created a new ` bug6337518 ` class
refactor TestRandomAccessBuffer class for improved readability to enhance maintainability and facilitate future updates
refactor UserInfoActivity to improve code organization to enhance maintainability and readability of the code
added imports for HomeContentProvider in multiple service classes to ensure proper notification of content changes during service updates
added a boolean flag ` mStayPressed ` and modified ` invalidate ` methods in ` BubbleTextView ` and ` Launcher ` to manage
updated the ` getFallbackResponse ` method to accept a ` Throwable ` parameter across multiple fallback policy classes to allow for additional error handling in the fallback
removed conditional check for ` env . _ compile _ only ` in the ` DumpBytecode . java ` class to simplify the code by eliminating unnecessary
added null checks for tags before accessing CHANNEL _ TAG _ INDEX and ENTITY _ TAG _ INDEX in ChannelUri . java to prevent potential
corrected the spelling of " . " to " . " in RegexpUtil . java and added corresponding tests in TestSqlPatterns . java
added handling for the ACTION _ BAR title state in FileActivity and updated the action bar title in FileDisplayActivity to ensure the action bar title
corrected the method call from ` Iterables . getOnlyElement ` to ` Iterables . getLast ` in ` PythonDslProjectBuildFile
updated the @ Schedule annotation from hour = " * " to " 0 " in CleaningService . java to set the scheduled time to zero for
added table partition validation and validation logic in TransactionalValidationListener . java to improve table path validation and handle partitioned tables more effectively
added a new feature ` Enable polling ` in ` ReplicationHandler ` and ` SnapPuller ` classes to enable polling functionality in the ReplicationHandler
changed the type of generatedKey from int to long in ShadowSQLiteDatabase . java and added tests for key generation in SQLiteDatabaseTest . java to
simplified the return statement in SimpleReferenceCache . java to improve code readability and maintainability
updated error messages in multiple test files to reflect failed to inline failures to improve clarity and accuracy of error reporting for better debugging
camel - 14283 : camel - web - client : increase default keepalivetimeout to 10 second .
deleted the HttpTestAccount001 . java file to remove unused test code to streamline the project
updated exception handling to catch Throwable instead of Exception and refactored test assertions in DispatcherTest to improve error handling and ensure proper exception logging for finished
camel - 13388 : camel - cxf - fix for cxf - message data format not work in camel - cxf
added a case for ' ~ ' in the ClientUtils class to handle special characters in the application
camel - Slack : allow to specify a delay in milliseconds instead of a long .
change blockutil . getblockdropped to use getitemfromblock instead of getblockid
updated layout parameters in TranscodingTab . java and added a semicolon to the encodedAudioPassthrough checkbox in TranscodingTab . java to
added a new file ` bug8057791 . java ` to demonstrate the use of NimbusLookAndFeel for rendering JList components to address bug 8057
refactor conditional logic in LambdaToMethod and add a new LambdaInterfaceStaticField class to improve clarity and functionality to enhance code readability and maintain
added WebSocket methods factory and updated subscription manager initialization in RunnerBuilder . java and added a new test in RunnerBuilderTest . java to enhance
updated null check from ` length ( ) > 0 ` to ` to ` null ` in ` ComposeActivity . java ` to ensure proper handling
refactor ParquetFixedWidthDictionaryReaders to improve handling of big integer fields based on dictionary settings to enhance flexibility in reading big integer fields based
updated conditional checks for landscape orientation in PortraitPagedViewHandler . java to ensure correct layout adjustments based on device orientation
added a new annotation ` Log ` and ` LogInterceptor ` , and modified ` TestController ` to implement logging functionality to enhance the application ' s
updated the formatting of the thread dump string in QueuedThreadPool . java to handle empty traces to ensure proper logging when no trace is available
added a new parameter ` Implementation ` to the ` combinations ` and ` filterTypes ` methods in ` CacheGenerator ` , ` CacheProvider `
added totalFrameSize ( ) parameter to createReferenceMap method in FrameMap . java to include the total frame size for reference map creation
refactor TypesafeConfigurator class to improve code readability to enhance maintainability and facilitate future updates
added a new test class ` CamelGraphqlTest ` for the ` camel - itest - karaf ` component to ensure that the component
added two new methods , ` bug1 ( ) ` and ` bug3 ( ) ` to the ` RFE2891944 ` class
removed URLEncoder . encode for entry keys and values in HttpClientIntroductionAdvice . java to simplify URL encoding and improve code readability
refactor unsupported platform tool handling to use a new class ` UnsupportedPlatformTool ` to improve code clarity and maintainability by encapsulating tool
updated the logic for determining the loop count and adjusted the log message format to ensure accurate recovery time calculation and improve log clarity
added a size ( ) method to FlightConfiguration and its implementation in FlightConfigurationImpl to provide a way to retrieve the size of the flight configuration
[ drools - 1076 ] fix kieaddressmanager test to work with java 8
updated COL _ SPEC and ROW _ SPEC constants in VLCVideo . java and removed unused imports in VLCVideo . java
updated URLs from " bisq / bisq " to " bitsquare / bitsquare " in multiple Java files to align with the new API
updated AUTHORITY string from " talon . provider " to " com . klinker . android . twitter . provider " to align the
updated user configuration directory to use " . m2 " instead of " . m2 " and modified user file handling in MBoot . java to
added a call to bind the GL _ ARRAY _ BUFFER to the bufferHandle in VertexBufferObjectWithVAO . java to ensure the
refactor ServerHttpSecurity class to improve security handling to enhance security and maintainability of the security code
added JUnit 5 @ Disabled annotation to PostgresStoredProcedureIntegrationTests . java to disable tests that are not ready for execution
added default HTTP header handling in HttpClientProperties and CasCoreHttpConfiguration to enhance HTTP client configuration flexibility
added new ` ThingsboardCredentialsViolationResponse ` and ` UserPasswordNotValidException ` classes and updated error handling in ` ThingsboardErrorResponseHandler `
deleted the NoOpConfigPathGetter . java file to remove unused configuration path getter to streamline the codebase
updated signingKey initialization to use Bytes . fromHexString instead of Codec . base16Decode to improve compatibility with different byte encoding implementations
replaced CascadedStyle with CSSName for handling float values in FloatUtil . java to improve code clarity and ensure proper handling of float values
danielwagnerhall : add optaplanner . optaplanner . domain . solution . planningfactcollectionproperty and planningfactproperty
replaced ` CaseInsensitiveHeaders ` with ` MultiMap ` in ` RestUtils ` and refactored ` getDefaultHeaders ` method in ` Websocket
renamed ` encoding ` to ` Charset ` in ProxyServer , Realm , and ProxyServer classes to improve clarity and consistency in naming conventions
added a method ` getJobId ( ) ` to ` StepContext ` to retrieve the job ID from the step execution ' s job instance to ensure
replaced instances of ` compareTo ` with ` Long . compare ` in ` ExpandableUploadListAdapter ` and ` FileStorageUtils ` to improve code
replaced error logging with debug logging in DefaultJdkHttpClient , JdkBlockingHttpClient , and JdkHttpClient to improve logging clarity and
updated import statements in LegacyAuthenticationHandlerAdapter . java to replace GeneralSecurityException with NamedAuthenticationHandler and UsernamePasswordCredentials to ensure compatibility with the latest
changed the access modifier of the WingDings class from final to public to allow access to WingDings from other classes
added a check to ensure the filter owner is the public key before removing it from the network to ensure that invalid filters are not removed from the network
replaced direct instantiation of ` BCPGInputStream ` with a static method ` wrap ` in ` BCPGInputStream ` to simplify code and improve
refactor data handling in MinimalLockingWriteAheadLog to use BufferedOutputStream instead of DataOutputStream to improve resource management and prevent potential resource leak
added a new test method ` testSelectAllFromView ` to ` TestJdbcDriver2 ` and updated assertions in ` HiveBaseResultSet ` to
refactor FocusTransitionTest . java for improved readability to enhance maintainability and facilitate future updates
updated import statement from ` org . gwtproject . core . client . GWT ` to ` com . google . gwt . core . client .
added a check to ensure sourceTask is an instance of MapRedTask before retrieving the job instance to avoid potential NullPointerExceptions when processing MapRed
updated the initialization of ` _ readListener ` in ` HttpInput . java ` to ensure proper initialization of the ` readListener ` variable
refactor color handling in AppearancePanel to use a ChangeListener for color selection to improve code readability and maintainability by centralizing color selection
updated the constructor call from ` false ` to ` hidden ` in ` TaskHelper . java ` to correct the behavior of the constructor based on the
http : / / issues . apache . org / jira / browse / amq - 4296 - fix failovertimeouttest
pdfbox - 4892 : close resource in ccittg3 . tif , a suggest by valerybokov
added an import statement for DefaultParameterHandler in LanguageDriver . java to enable parameter handling functionality in the language driver
[ hotfix ] [ lsra ] fix checkstyle violation in lsra .
added a new file MicronautAstBuilder . java to implement micronaut AST generation to facilitate the compilation process of micronaut modules in
added a ` closeInternally ` method to ` PgResultSet ` and updated ` PgStatement ` to use it to ensure proper resource management
set serviceAdvisorType to ServiceAdvisorType . PYTHON to ensure correct service advisor type is set
[ hotfix ] [ table - common ] use threadlocal for resolvingdecoder in genericdatadatumreader
updated constructors and methods in Path , PdfContentStreamProcessor , and PdfCleanUpContext to use List instead of Collection to improve type safety and
updated output initialization and assertions in SendCoinShieldTest . java to use a random byte array instead of a new byte array to improve code clarity and
added a method ` setPersonalisation ` to ` SkeinParameterSpec ` for setting personalisation parameters to enhance user experience by allowing personalisation
removed unnecessary line breaks in CodeGenerator . java to improve code readability and maintainability
removed the ` percent ` parameter from the ` scroll ` method calls across multiple classes to simplify the method signatures and improve code readability
changed the access modifier of the pointer field from private to public and added reset methods to FlatRecordReader to allow external access to the pointer field and
rename ` ContentDigestHistory ` class to ` BdbContentDigestHistory ` across multiple files to improve clarity and consistency in naming conventions
replaced specific imports with wildcard imports and modified casting logic in CastExpression . java to simplify import statements and improve type handling for BOOLEAN
replaced ArrayList with a boolean variable for accepting media types in AbstractResource . java to improve code readability and maintainability by using a boolean variable for
added a boolean parameter ` false ` to the ` TaskView ` class to indicate that the task view should not be displayed in the UI
added an ` isAutoIncrement ( ) ` method to ` LiquibaseDataType ` and implemented it in ` LiquibaseDataType ` to ensure
set the errorText variable to " Command failed due to Internal Server Error " to provide a clearer error message for command failures due to internal server
updated import statements and added VM options in LocalManagementTest . java and LocalManagementTest . java to enhance testing capabilities and enable performance data management
replace ` add ` with ` push ` for ` currentStatus ` and ` boosterStatus ` in ` BasicEventSimulationEngine . java ` to
added AJP binding functionality and modified port handling in GitBlitServer . java to ensure proper permissions are enforced for the AJP connector
added type conversion logic in TransTypes . java and created a new Intersection03 . java file with a test class Intersection03 . java to
renamed the class EmbeddingTest from EmbeddingTest to EmbeddingITest to clarify the purpose of the class
added a native method ` startToolkitThread ` to check if the toolkit thread is already started before starting it to ensure that the toolkit thread is only
[ gr - 24144 ] add option to compress bundle content in parallel .
do n ' t show the surface if it be n ' t a gl or a gl context
updated the temp directory name from " RecordTransformationTest " to getClass ( ) . getName ( ) in AbstractRecordExtractorTest . java to ensure the
added configuration options for fullNodeHttp and solidityNodeHttp in multiple classes to enable or disable node HTTP connections based on configuration settings
added a service field to GoogleCloudFirestoreTicketDocument and updated GoogleCloudFirestoreTicketRegistry to include it in the return statement to enhance ticket
refactor the Generate class to improve code readability to enhance maintainability and facilitate future updates
updated the ` ScalarFunction ` annotation to remove nullableParameters = true and added new test cases for JSON null handling to ensure proper handling of null values
added support for DOTS _ ONLY mode in BadgeRenderer , BadgeRenderer , IconPalette , and NotificationKeyData classes to ensure proper
removed the ' final ' modifier from the ` getConfiguration ` method in ` freemarker . template . Configuration ` to allow external access to the ` get
added a new test method ` testInvalidExcludedPackageNamePatterns ` to ` OgnlUtilTest ` to ensure that ` setExcludedPackageNamePatterns `
updated device UDID retrieval logic in AppleTest . java and added SDK name handling in IdbRunTestsStep . java to ensure compatibility with
replaced error logging with warning logging and updated response handling in DefaultHttpClientFilter and TestDefaultHttpClientFilter to improve error logging and enhance test coverage for common
added null checks for mScript before binding and execution in AllAppsView . java to prevent potential NullPointerExceptions when mScript is not initialized
added a new boolean variable ` TEXT _ BURN ` and modified the conditional logic in ` Utilities . java ` to improve text rendering behavior based on
added ` Teardown ` methods to ` TestColumnAccess ` , ` TestReadEntityDirect ` , and ` OneTimeTeardown `
added a parser assignment to the SecurityNamespaceHandler class to ensure the appropriate parser is used for namespace handling
removed unnecessary whitespace in BoundedLocalCache . java and added a fastpath method in BoundedLocalCacheTest . java to improve code readability
updated ` RawConnection ` and ` WebSocketAsyncConnection ` classes to implement ` complete ` and ` flush ` methods to improve connection handling and streamline
added new test methods for all assertions in SoftAssertionsPerfTest . java to enhance testing coverage for softly assertions
added a new constant TEST _ FAILURES _ EXIT _ CODE and modified the method visibility in PythonRunTestsStep and ProjectWorkspace to improve
added a conditional check for markup enabled in GlyphLayout . java to ensure subsequent runs are on the next line if markup is disabled
refactor score handling in TestBooleanRewrites to use streams for improved performance to enhance readability and maintainability of the test code
updated enumClass assignment from ` getEnclosingClass ( ) ` to ` getSuperclass ( ) ` in TypeHandlerRegistry . java to ensure correct class hierarchy
removed unnecessary type checking for PlayerSocketConnection in multiple classes to simplify the connection flushing process and improve code clarity
added a boolean flag ` mStarted ` and modified the removal of ` OnDrawListener ` in ` Launcher ` and ` LauncherAnimUtils
refactor CheckIndex , BlockTreeTermsReader , FuzzyTermsEnum , and FuzzyTermsEnum classes to improve code organization and maintainability
updated import statements in ReplicaAssigner . java to use wildcard imports and added a check for NOT _ APPLICABLE status to enhance
changed the default value of MEDIAPARSERV2 from false to true to enable media processing based on the media status
added a method ` isAcceptable ` to check for ` AROUND _ TYPE ` in the ` BeanDefinitionInjectProcessor ` to ensure proper handling of
added assertions to verify existence and permission of warehouse and partition in the TRUNCATE TABLE command to ensure proper functionality of the TRUNCATE TABLE command
modified the ` handleProviderRegistered ` method to include a ` dueToRegistrationStateChanged ` parameter and modified the ` publishStatusInternal ` method to include
updated the color calculation in PastelColor . java to use a base color value of 180 instead of 60 to improve the accuracy of the color
refactor ScriptEngineFactory class to improve code readability to enhance maintainability and facilitate future updates
refactor image handling in HolographicViewHelper to use original and outline bitmaps instead of drawables to improve code clarity and maintainability by using
refactor request method handling in CloudClient . java to utilize HttpMethod . fromString instead of hardcoded strings to improve code readability and maintain
added a ` containingPhrase ` parameter to the ` getTag ` method and refactored the ` traverseAndFix ` method in ` MultiWordPreprocessor
[ hotfix ] [ test ] remove unused import of java . io . ioexception
updated class loading logic in Table . java to handle Hive pass - through output formats to ensure correct handling of output formats based on the storage handler '
refactor ChunkListener , AfterChunk , and BeforeChunk classes to improve code organization and maintainability
updated condition in DOMBuilder to correctly handle negative length values to ensure proper handling of negative input lengths to prevent potential errors
updated method calls to use HierarchicalUndirectedGraph directly instead of getting edges and meta edges to improve code clarity and maintainability by using a more
camel - 18156 : camel - translate - add verify that the service be support in the specified region .
added a new file ` TestClass . java ` implementing ` InterfaceWithStaticAndDefaultMethods ` and a ` default _ method ( ) ` method handling
camel - 16105 : camel - core - defaultkeyselector should support a camelcontext - aware keystore .
refactor catch blocks in LogResolverBean . java for consistency to improve code readability and maintainability
refactor KeyManagerFactory , TrustManagerFactory , CertPathBuilder , and Security classes to improve code organization and maintainability
updated JGIT _ VERSION from " 1.0 . 0 " to " 1.0 . 0 ( 201109151100 - r ) " and added
refactor HttpClientIntroductionAdvice to use clientKey instead of clientId to improve clarity and maintainability of the code
add a new ` TransformerParser ` and ` TransformerContext ` classes for the ` Transformer ` integration to enhance the integration process by allowing method invoking
updated duration constants and condition checks in ResumeObj . java to improve clarity and accuracy of duration calculations
added a method ` isScrollWheeling ( ) ` to ` CodenameOneImplementation ` , ` JavaSEPort ` , and modified action event
updated usage string formatting and improved formatting in UtilityCommands . java , DocumentationPrinter . java , and DocumentationPrinter . java to enhance readability
updated attribute name from " collection . map " to " collections . map " in CommunityListServlet . java to ensure consistency in naming conventions
added methods to set sequence files and unseq files in CrossSpaceCompactionResource and RewriteCrossSpaceCompactionSelector to ensure proper handling of merge files
removed redundant @ Override annotations in Observation . java to improve code clarity and maintainability
refactor rule set synchronization logic in ProjectPropertiesModelImpl . java to improve clarity and maintainability of rule set updates
refactor synchronization in AbstractSootFieldRef . java for better readability to improve code clarity and maintainability
refactor ElasticMeterRegistry to use a new ElasticNamingConvention class for tag handling to improve code clarity and maintainability by centralizing tag
added methods for listener management in IController , TinyGController , and GcodeCommandCreator , and JobLengthEstimate in TinyGController
added a new test method ` hugeHorizontalRule ` to the ` PathologicalTest ` class to ensure that the ` hugeHorizontalRule ` rendering function
replaced System . out . print calls with TTY . print calls in TypeSystemTest . java and PartialEscapeAnalysisPhase . java to stream
refactor multiple Java classes to improve code readability and maintainability to enhance maintainability and clarity of the codebase
corrected a typo in the condition for frameLength in LogInspector . java to ensure proper handling of negative frame lengths
updated return statements in IntFloatMap , IntIntIntMap , and IntFloatMap to return values instead of floats to improve code clarity and
refactor icon handling in ImageDownloadService to use a final Image variable for better readability to improve code clarity and maintainability by centralizing image
added a null check for the registered variable in HandlerRegistration . java to avoid potential NullPointerExceptions when demand is zero
removed the hasNextSibling ( ) method from multiple classes to streamline the code by eliminating unused native methods
added null check for results in RedisDistributedMapCacheClientService . java to avoid potential NullPointerException when processing results
updated logging statements in MobFileCache . java to improve clarity of cache configuration and cache configuration settings
refactor ColConvCCMTest . java for improved readability to enhance maintainability and facilitate future updates
refactor code to use source . allowCovariantReturns ( ) instead of target . allowCovariantReturns ( ) to improve readability and maintain
pdfbox - 4892 : use generics , a suggest by valerybokov
replaced Float . toString ( ) with String . asString ( ) and added a new X class with a toString ( ) method to improve JSON
added a return statement to the GenericFileConsumer class to ensure proper handling of exceptions during file processing
added an invokeLater method to the EventQueue in bug6638195 . java to ensure proper execution of events during execution
updated the method call from ` getMaxTextMessageBufferSize ( ) ` to ` getMaxBinaryMessageSize ( ) ` in ` CompressExtension . java
updated steeringValue increments from - = f to - = f in TestAttachDriver , TestFancyCar , and TestPhysicsCar classes to
replaced ` Arrays . equals ` with ` MessageDigest . isEqual ` in ` PasswordEncryptionService . java ` to improve performance by using a more efficient
updated date and timestamp conversions in JdbcSerDe . java to use LocalDateTime and LocalDate for better date and timestamp conversion to improve date handling and
updated version from 2 to 3 and modified metadata handling logic in ParseData . java to ensure compatibility with newer versioning and improve metadata handling
updated FlywayAutoConfiguration to include FlywayInitializerJDependencyConfiguration and added a new FlywayInitializerJpaDependencyConfiguration class to
added a sorted ( ) method call in ClassesImpl . java to ensure that the classes are sorted before processing them
added a method ` getCurrentStableState ( ) ` to ` LauncherStateManager ` and modified method calls in ` AbstractLauncherUiTest `
refactor SharedInformer class to improve code readability to enhance maintainability and facilitate future updates
updated TestCloseScope0 to use ` MemoryOrResourceScope ` instead of ` MemoryScope ` and modified method invocation logic accordingly to ensure compatibility with
increased the test timeout from 500 to 5000 in AdaptServerSocket . java to allow more time for tests to complete
refactor CaptchaChannelProcessorTests for improved clarity to enhance maintainability and readability of the test cases
added a check to update the owner of an item ' s owning collection in MetadataImport . java to ensure the item ' s owning collection
added retry logic for saving properties in AbstractRegistry to ensure proper handling of cache file saving failures
updated the instantiation of TrackingDirectoryWrapper from ` mergeDirectory ` to ` directory ` to ensure the correct directory is used for tracking tracking directories
added test cases for possible for loop and generics bugs in UnusedImportsRuleTest . java and RuleTst . java to ensure
added validation for sink descriptions in HiveIcebergStorageHandler and implemented bucket partitioning in IcebergTableUtil to ensure proper error handling for
updated assertion assertions in BootstrapTests to compare SAML keys to ensure compatibility with legacy SAML keys in the identity zone configuration
updated method signatures to include ` isAnonymousOrNonStaticLocal ` and ` isAnonymousOrLocal ` for better handling of anonymous and non - static
refactor getAddressVector method to replace the variable ` theAddressie ` with ` addressees ` and update related logic to improve code clarity and ensure
removed multiple WAITING _ FOR _ LINE _ COMMENT and WAITING _ TO _ LEAVE _ BLOCK _ COMMENT entries
added an ` IOException ` to the ` release ( ) ` method in ` IndexWriter ` and created a new ` LockReleaseFailedException ` class to
changed the package of DataSourceInitializer from test . jdbc . datasource to org . springframework . batch . test to align with the new package structure for
added a conditional check for non - unary operators in SpelExpressionTransformer and updated import statements in OperatorNode to ensure proper handling of unary operators and
added TypeValidation import and set ByteBuddy to DISABLED in MockBytecodeGenerator . java to ensure ByteBuddy is initialized with a disabled
replaced ` DeclaredType ` with ` TypeElement ` in ` JavacRoundEnvironment . java ` to simplify type handling and improve code clarity
added error handling for PessimisticEntityLockException in LockModePessimisticReadWriteIntegrationTest . java and updated lock timeout values in MySQL
removed the ` setSystemProperties ` method and updated its usage in ` LoggingApplicationListener ` to simplify the method signature and ensure proper handling of log
added a method to check if a redirect status code is received and improved connection handling in ServiceApiRequest . java to enhance HTTP redirect handling and ensure
added environment configuration constants for SERVICE _ MAPPING , VERSION _ MAPPING , and APP _ MAPPING in ServiceCombConstants and MicroserviceFactory to
updated the method call from ` getName ( ) ` to ` getBeanName ( ) ` in ` ToeThread . java ` to ensure the correct
refactor database path and prefix handling in BaseAndroidTestCase and GeocodeHelperTest to use static constants to improve code readability and maintainability by
updated return statement to use getUnreadCount ( currentAccount ) instead of numberNew to ensure accurate retrieval of unread count for the current account
updated testVirtualThreadPool method to testVirtualThreadPoolPreview and added a new test method for Jetty to improve test coverage and ensure compatibility with Jetty
added a limit parameter to the ` getAllOrder ` method in ` MarketOrderIdListCapsule ` and modified the ` Wallet ` class
added a null check for the user before retrieving the user settings in HomePage . java to avoid potential NullPointerExceptions when user is null
updated file handling to use ` getAbsoluteFile ( ) ` instead of ` file . getAbsolutePath ( ) ` in ` LocalFileSystem ` and added a new test
added constants for maximum width and height in ComponentBuilders . java to ensure that the instance can be resized to a maximum of 10x 10000
added logging and deprecated methods to CommonsHttpSolrServer for setting connection manager timeout and follow redirects to improve code maintainability and provide a clearer
removed unused imports and updated error handling in PrintController . java to streamline error handling and improve code clarity
refactor CrateType to use ` map ` for filenames instead of ` Optional . of ` to improve readability and maintainability of the
added checks for empty and non - empty strings in SpellChecker . java and a corresponding test in SpellCheckerTest . java to ensure proper handling of
updated the formatting of the MESSAGE constant in HelloWorld . java to improve code readability and maintain consistency
refactored file action handling in FileDisplayActivity to improve code readability and maintainability to streamline the handling of file actions and ensure proper
[ hotfix ] [ core ] disable the puller daemon in snappuller
removed unnecessary whitespace in the ` e . update ` method call to improve code readability and maintain consistency
refactor StreamerLoader constructor to accept MaterialHolder instead of MaterialHolder to improve clarity and ensure proper handling of MaterialColumnParser instances
added new dependencies to the DependencyBank class for various GWT - related components to enhance the functionality and functionality of the GWT application
added functionality to set maximum recycled views based on device profile and icon size in AppsContainerRecyclerView . java to improve user experience by managing app icons
added a new test method ` testBuildingBinariesSeparately ` in ` AndroidBinaryCrossCellIntegrationTest . java ` to ensure that building binary
fix examplebaritonecontrol crash when use waypoint . tag .
added imports for ParsedNode , ParsedNodeException , and ResourceAccessor in CreateProcedureChange . java to enhance code clarity and maintainability by using
added null bitmap handling in FilterOperatorUtils and a corresponding test in NullHandlingEnabledQueriesTest to ensure proper handling of null values and validate range filtering
added validation for bootstrap method parameter types in JDynamicInvokeExpr . java to ensure correct argument types are provided for bootstrap methods
updated the localhost address from " localhost : localhost " to " 9000 " in JmsHttpJmsTest . java to ensure
added a call to clear formatters in CucumberInstrumentation . java to ensure the formatters are properly reset during instrumentation
changed the type of ` contacts ` from ` RegisteredServiceContact ` to ` DefaultRegisteredServiceContact ` and added casting for ` contacts `
added a conditional check to adjust workspace labels based on cell padding to ensure workspace labels are only hidden when necessary
updated assertions in ReplicationFactorTest to use assertRf instead of assertRf for consistency and clarity to improve readability and provide more informative
[ gr - 26144 ] llvm : fix context pre - initialization when pre - initialization be call .
removed JUnit @ Ignore annotations from ChaosMonkeyNothingIsSafeTest , ChaosMonkeySafeLeaderTest , and ChaosMonkey
replaced RuntimeException with JsonIOException in Gson . java to improve error handling by throwing a more general JsonIOException
replaced calls to ` valueOf ` with ` parseInt ` in ` VisualScoreTagTest . java ` to improve code readability and maintainability by using
updated error messages in Copy . java to use " source " instead of " target " and adjusted file tree iteration to improve clarity of error messages and
refactor segment name validation logic to use isHighLevelConsumerSegmentName instead of isLowLevelConsumerSegmentName to improve segment name validation logic and
added startActivity and startActivityForResult methods to ShadowFragment and corresponding unit tests in FragmentTest to enhance functionality for starting activities and ensure proper handling of null
updated the calculation of the current time in the DueDateBusinessCalendar class to use the current time instead of the current time to ensure accurate time representation
updated the return statement to include " - target " for " x86 _ 64 - none - linux - android " and " x86 _
added a method to delete all files in the FileDataStorageManager and implemented a removal task in ManageAccountsActivity to enhance file management functionality
updated command line option from " - ? " to " - h " in SchemaCrawlerCommandLine . java to provide more contextual help for SchemaCrawler
added a static method ` createSuiteDescription ` to create a ` Description ` instance with unique ID handling to enhance flexibility in creating suite descriptions by
replaced ` MultiFormatReader ` with ` decodeBarcode ` in ` SnapshotThread . java ` to simplify the decoding process by directly using ` decodeBarcode
removed the ` sources ` parameter from the ` BuckTarget ` constructor and its usage across multiple files to simplify the constructor and eliminate unnecessary dependencies
added unit tests for range past end and past start in GWCZoomContextFinderTest . java to ensure correct functionality of the zoom context finder
added a new configuration key for dependency tracking in JRubyScriptEngineConfiguration and modified dependency tracking logic in JRubyScriptEngineFactory to enhance dependency tracking
updated request URI check from getRequestURI ( ) to getServletPath ( ) in PromptFilter . java to ensure proper handling of servlet path in
replaced specific exceptions with a wildcard method ` maybeAddTable ` for CFMetaData and KSMetaData in ` StorageService . java ` to streamline
refactor image handling in WelcomeWindow to utilize a cache image instead of a single background image to improve image quality and performance by utilizing
refactor tuner configuration handling in TunerManager , RTL2832TunerController , and R820TTunerConfiguration to
added HasTests interface to AbstractShBinaryDescriptionArg and created a new test method in ShBinaryRuleIntegrationTest to enhance test coverage for ShBinary functionality
added a condition to set the includeString variable to " db : hsqldb " in TestFilter . java to ensure proper handling of database connection
removed unnecessary whitespace in JavabinLoader . java to improve code readability and maintain consistency
trufflestacktrace : do n ' t materialize host exception if there be no stack trace
refactor service loading logic in GraalServices . java to improve clarity and functionality to enhance code readability and maintainability by reducing redundancy
added duplicate command handler resolution and a test for duplicate command handler resolution in AggregateAnnotationCommandHandlerTest . java to ensure that the duplicate command handler resolves
[ flink - 20865 ] [ runtime ] support fine - grained shuffle mode in batch job
fix entityfishhook z - z calculation . close # 1087
[ hotfix ] [ doc ] fix typo in file and ftp endpoint builders
updated method names from ` getCommandRunner ` to ` getStepRunner ` across multiple classes to improve clarity and consistency in naming conventions
rename ` useShortNames ` to ` compressPackageNames ` in ` GangliaReporter ` to improve clarity and consistency in naming conventions
added a check to return early if there are no items in the AppsContainerRecyclerView to improve performance by avoiding unnecessary processing when there are no items
added a conditional bean annotation for REPORTER _ BEAN _ NAME in ZipkinAutoConfiguration . java to ensure REPORTER _ BEAN
log4j2 - 1313 xmllayout . start ( ) should return a stringbuilder instead of a stringbuffer .
added a new parameter ` OMIT _ HEADER ` and a method to remove a specific header from multiple classes to allow users to specify whether to omit
change the method for retrieving property names from ` _ id ` to ` getPropertyNumber ( ) ` in ` EscherProperty . java ` and
changed the method call from ` getBuildRuleType ( key . getSimpleName ( ) ) ` to ` Description . getBuildRuleType ( key .
modified the way the method numberer is removed and added a call to modifyHierarchy ( ) in SootClass . java to ensure the hierarchy is
add null check for disputesPerTradeIdItems and disputesPerDepositTxIdItems in TradeDataValidation . java to improve robustness by preventing potential
added ` getObjectHash ( ) ` and ` toString ( ) ` methods in ` AbstractNamedObject ` , ` DatabaseSchemaCrawler ` , and `
set confidence type to NOT _ SEEN _ IN _ CHAIN in Wallet and WalletTest to ensure correct confidence type is set for
refactor HttpClientIntroductionAdvice to improve handling of @ Body and @ Header annotations to enhance code clarity and ensure proper handling of HTTP request headers
refactor conditional checks in CraftingHelper . java to improve readability and maintainability to enhance code clarity and ensure proper processing of JSON conditions
hbase - 13276 try to close region if open region fail to close ( ) .
refactor string length comparison logic in Credential . java to improve readability and maintainability of the code
[ java ] : fix checkstyle violation in clientconductor .
added InterruptedException handling to the destroy method in TestJvmProcess . java to improve error handling and ensure proper process termination
added support for Oracle in the test cases to ensure compatibility with Oracle database configurations
camel - 14263 : camel - mail should check if the store be connect before try to connect to the mailstore .
added token handling logic in Parser . java to check for more tokens in the query to ensure proper parsing behavior when there are more tokens in the query
added new language strings for GEORGIAN , GREEK , and GUJARATI to the Translate2LanguageEnum class to support additional
added a method ` getDataFileName ( ) ` to the ` Model ` class and modified the model initialization logic in ` Voice . java ` to enhance
added emailDomain property and related getter / setter methods to LdapIdentityProviderDefinition and IdentityProviderDefinition classes to allow dynamic configuration of email domains in the
added new configuration constants REQUEST _ READ _ TIMEOUT and REQUEST _ CONNECT _ TIMEOUT , and modified request timeout retrieval methods in ViewRegistry to
add a conditional check before processing deferred concepts in BaseHapiTerminologySvcImpl . java to ensure that deferred concepts are only
added RedisCategory import and category annotation to RedisServiceRegistryTests to enable testing of Redis services in the testing framework
updated FindDeprecatedMethodsTest and FindDeprecatedUses to accept a type pattern parameter and modified method signatures accordingly to enhance test coverage and ensure proper handling
added a call to ` paintComponent ( g ) ` in ` OverlayPanel ` and ` WaterfallPanel ` to ensure proper rendering of the
removed unused imports from multiple Java files to clean up the code and improve maintainability
updated ContractEventTrigger to set event signature full and added event name handling in LogEventWrapper and LogEventWrapper classes to enhance event signature management and
updated the filtering logic in FileTestHelper to check for file names ending with " _ " to ensure correct filtering of file names in test cases
replace clearRect with fillRect and set background color in MapView . java to improve visual consistency by using the background color directly
refactor code for better readability and structure in PackageBuilder . java to improve code clarity and maintainability
removed unnecessary System . out . println statements from multiple Java files to improve code readability and maintainability
added a conditional check for NaN scores before asserting scores in TestFieldCacheSort . java to avoid potential errors when scores are invalid or NaN
updated the initialization of oldKeys to use Set . copyOf to ensure that the oldKeys are immutable before use
added a method to check for zero time values in ColumnSnapshotGenerator and implemented a test for date default values in MySQLIntegrationTest to ensure correct handling of
rename ` offererMultiSigPubKey ` and ` takerBtcPubKey ` to ` takerBtcPubKey ` and ` takerB
updated generic types from ` Map ` to ` < ? , ? > ` in multiple classes to improve type safety and eliminate potential NullPointerExceptions
[ drools - 1076 ] do n ' t use computeifabsent in kiecontainerimpl . getkiesessionconfig ( )
updated the instantiation of HiveMetaStoreClient to use ' this . conf ' instead of ' conf ' to ensure compatibility with the current configuration setting
added a check to return early if modalness equals modalness to avoid unnecessary processing when modalness equals modalness
added a new test method ` codecCapabilities . createFromProfileLevel ` to ` ShadowMediaCodecListTest ` to validate the functionality of ` CodecCapabilities
added focus to the confirm button in EditOfferView . java to fix issue # 5460 when enter key used , fixes # 5460
added validation for width and height in SunVolatileImage , X11SurfaceDataProxy , XRPMBlitLoops , and added a new 
updated the separator character from " . " to " \ u00a0 " in FormatData _ uk . java to ensure proper formatting of thousands
replaced ` int [ ] _ loops ` with ` AtomicInteger [ ] _ loops ` in ` AsyncStressTest . java ` to improve
added functionality to hide and display error messages for unavailable beta achievements in AchievementsFragment and LeaderboardFragment to enhance user experience by providing feedback when
added methods to set access , name , and description from the context in SearchMethodVisitor to improve the handling of method invocation contexts
added sleep calls and modified exception handling in IoTDBInsertWithoutTimeIT . java to improve sleep duration and handle potential InterruptedException gracefully
refactor formatting in DLNAResource . java for clarity to improve readability and maintainability of the code
updated XmlRootElement names in ResequenceDefinition , BatchResequencerConfig , and StreamResequencerConfig classes to standardize XmlRootElement naming conventions for
refactor transaction management methods in TableReader to improve transaction management and error handling to ensure proper transaction management and prevent potential memory leaks
flume - 113 . remove unused keymanager _ type and trustmanager _ type from thrift source and rpc client ( swagle )
refactor ` getSingleSourceApplicableTest ` method to return ` Applicability . or ` instead of ` JavaIsoVisitor ` to simplify the
added exit ( ) method to handle TAB key in Blockmania . java to ensure proper exit functionality for TAB key interactions
replace ` AccessSpecifier . PACKAGE _ PRIVATE ` with ` AccessSpecifier . NONE ` across multiple classes to standardize access specifier values for better
refactor ` unHandled ` method to use ` log . error ` and ` warnUnchecked ` instead of ` diags . fragment ` to
updated OrcInputFormat to retrieve stripes and stripe statistics from the orcReader and orcTail to ensure consistent retrieval of stripes and stripe
added a null check for the exception before proceeding with further operations to avoid potential NullPointerExceptions during execution
updated next URL from " http " to " https " in MyhentaicomicsRipper . java to ensure compatibility with the newer
added a command - line option for displaying the current jar version in the App class to provide users with a clearer indication of the current jar version
corrected the method call from ` split ` to ` splitTokens ` in the ` Sketch . java ` file to ensure proper handling of token
added support for default rotation in ConsoleActivity and improved input connection handling in TerminalView to enhance user experience by allowing dynamic selection of rotations based on
changed the type of ` hq ` from ` HitQueue ` to ` ScoreDoc ` and added a suppression warning to improve type safety and
added a null check for the ownerConnectionAddress in ClientSmartListenerService . java to prevent potential NullPointerExceptions when accessing the connection address
camel - 13306 : camel - jbang - add headermapfactoryclassname to camel - context to allow to specify the class name
updated formatting in JavaCompiler and Diagnostic classes to improve code readability and maintain consistency
int - 132 add support for jmstemplate in jmsoutgoinggateway and jmsnamespacehandler
updated the index from ' i + 1 ' to ' i 2 ' in ArrayFunctions . java to correct the positioning of the array processing logic
added null check for additionalClasspathURLs and improved error handling in AbstractScriptProcessor and InvokeScriptedProcessor to enhance robustness by preventing potential NullPointer
added support for PostgreSQL statements in PooledConnectionImpl and created a test for it in ConnectionPoolTest to ensure compatibility with Postgre
updated method names from ` flushMemTables ` to ` flushMemTablesAndRefreshSizeEstimates ` in ` CassandraIOTest . java ` to
changed log level from error to warn in AtomicRemainder . java to improve logging clarity and reduce verbosity
modified the sorting logic in CompactionController and added a new test for aggressive fully expired ttls in TTLExpiryTest to ensure
fixed - rblockingdeque and rqueue . shortpoll do n ' t take a timeout
refactor printing statements in JobInspectCommand . java for consistency to improve code readability and maintainability
refactor Engine class to improve code readability to enhance maintainability and facilitate future updates
refactor child handling in ChildHolder to use entrySet ( ) . stream ( ) instead of values ( ) . stream ( ) to improve readability
added @ Ignore annotation to BrokerControllerTest and refactored AclClient to use SessionCredentials instead of RemotingCommand to improve test coverage
updated condition from ` numIndexDims ` to ` numDataDims ` in ` BKDWriter . java ` to ensure correct handling
[ hotfix ] [ notebook ] do n ' t print stacktrace if interpretergroup be null
updated the ExpressionNode constructor from funN to lt in ExpressionNodeEvaluator . java to ensure the correct expression node is added to the list
changed access modifiers of methods from public to package - private in NodeIdAccessor . java to allow access to these methods from other packages
[ hotfix ] [ runtime ] improve error message when attach a volume to a vm before create a snapshot .
changed method visibility from public to package - private in ItemWriter . java to allow access to these methods from other packages
updated the string literal in the ThingImpl constructor from " test " to " test " in RoombaHandlerTest . java to provide a clear
added a toString ( ) method to ImageNameSubstitutor class and a corresponding test in ImageNameSubstitutorTest to provide a
replaced FSDirectory with RAMDirectory in TestNorms . java to utilize RAMDirectory for directory operations
added a constant for line height and adjusted the calculation of the line height to ensure the line height is only calculated when it is less than or equal
refactor WalletAppKit . java to improve code readability to enhance maintainability and facilitate future updates
no effective change - remove hat _ js _ rhino and hat _ js _ nashorn from oqlengineimpl
added a JCheckBoxMenuItem to remove the chat transport menu items in ChatTransportSelectorBox . java to enhance user experience by allowing customizable transport options
added ` resolve ` and ` replaceTokens ` methods to ` AbstractDataImportHandlerTest ` , ` Context ` , and ` ContextImpl ` classes
disable bsqblockchainexperience if proto . hasbsqblockchainexperience ( ) be false
added attribute handling methods to StandardSession and Session classes to enhance session management capabilities
added assertions to verify the ` getPlainBean ( ) ` and ` getAlong ( ) ` fields in the ` found ` bean to ensure
updated averages array from pageSize to initialPageCount in MonotonicAppendingLongBuffer . java to ensure correct initial page count is used for
refactor BatchCommandLineLauncher to improve code structure to enhance maintainability and readability of the code
added HSQL data source and transaction manager bean methods to BatchMetricsApplication to enable support for HSQL data sources in batch operations
updated GlowrootLogHttpService to implement HttpService instead of UnauthenticatedHttpService to ensure compatibility with the newer HTTP service implementation
pdfbox - 4892 : set non - stroke java composite and non - stroke java composite in pagedrawer
removed synchronization from close ( ) method and added synchronization to the deleter in DocumentsWriterPerThread to improve resource management and ensure proper refreshing of
added methods to retrieve and set multiple choice options and validation constraints in UiBinding to enhance UI binding functionality for better property management
updated method calls to use ` toString ( ) ` instead of ` name ( ) ` for setting reflectively calls to improve code clarity and ensure consistent
added a fullSave flag to control the saving process for the whole tree to ensure only the stored copy of the tree is updated when the save is
replaced the ` getCondition ` method with a ` setCondition ` method and updated related methods to accept a ` Pattern ` parameter to simplify the condition
updated the initialization of ` krakenMakerFees ` and ` krakenTakerFees ` to use " " instead of "
removed unnecessary import of CharTermAttribute in DefaultIndexingChain . java to streamline code by eliminating unused imports
refactor NBJavacTrees class to improve code structure to enhance maintainability and readability of the code
removed unsupported data encoding check in VectorizedPrimitiveColumnReader . java to streamline code by eliminating unnecessary errors
added slf4j import and modified log message formatting in HttpSolrCall . java to improve code readability and maintainability
added a call to destroyMetadataServiceProxy ( instance ) in ServiceInstancesChangedListener . java to ensure proper cleanup of metadata service proxies during service instance
added a constant MAX _ LEVEL _ DEFAULT and modified the getLvlFilter method to return a default value to improve code readability and maintainability
added a null check for the changelog ID before generating a message to ensure that the failure message is only displayed when the changelog is not registered
added Try _ HARDER _ HINT functionality to AbstractBlackBoxTestCase to enhance barcode decoding capabilities and ensure normal mode succeeds
refactor ` executeCompilation ` method to return ` ProcessExecutor . Result ` instead of ` int ` and add a new test for compiler error reporting
refactor event handling logic in ObjectStore . java to improve clarity and maintainability of event handling logic
refactor validation checks in ValidatedLocalValidatorFactoryBean to improve clarity to enhance readability and maintainability of the code
removed temporary block entities from EntityAwareWorldProvider to ensure proper cleanup of temporary block entities
removed redundant type checks in IntrinsifyArrayCopyPhase . java to streamline code and improve readability
removed unused imports and set logger level to all levels in TestCoyoteAdapter . java to streamline logging configuration and improve code clarity
updated the ` WantedAnywhereAfterFollowingInteraction ` class to include stack trace information and removed the ` WantedAnywhereAfterFollowing
added null checks for accountCapsule and key in AccountPermissionUpdateActuator and PermissionAddKeyActuator to ensure proper validation of
refactor command sorting in ScriptLauncher to use TreeMap instead of Comparator to improve performance and maintainability of command listing
chore ( deps ) : upgrade gapic - generator - java to 2.8 . 0 and update gax - java to 2.18 . 0 (
refactor property handling in BaseSingleTreeBuilder to use setProperty instead of addProperty to improve code readability and maintainability by reducing duplication
updated AsmLoader to use the interface class loader directly instead of creating a new one to ensure the class loader is compatible with the specified interface class
pdfbox - 4892 : check for null point , a suggest by valerybokov
updated the export statement to use " declare " instead of " export " in Java2TypeScriptTranslator . java to ensure proper handling of definition scope
updated HttpClientTest to use AbstractHandler instead of EmptyServerHandler and added a method to copy the input stream to ensure proper handling of requests and prevent
replaced multiple instances of ` new String [ ] { " Pause " , " Rotate " , " Left " , " Right " , "
added a null check for the lhs variable in AbstractSqmPath . java to ensure correct retrieval of the lhs path when it is not null
updated package name from ` com . owncloud . android . oc _ framework _ test _ project . test ` to ` com . owncloud .
refactor BufferedImage handling in AwtCanvas . java to handle GRAYSCALE _ INVERT and GRAYSCALE _ INVERT
added methods to retrieve and set the native image location qualifier in CompilerConfigurationFactory and updated HotSpotGraalRuntime and APIOption classes to improve
[ hotfix ] [ test ] remove unused dataflowportabilityapiunsupported from pardotest
updated method call from ` remove ( ) ` to ` poll ( ) ` in ` MockPhishingProtectionServiceV1Beta1Impl
added serialVersionUID fields to JumboEnumSet and RegularEnumSet classes to ensure proper serialization compatibility across different enum sets
refactor CallStack class to improve code readability to enhance maintainability and facilitate future updates
added a warning log for invalid max record size configurations in EvictionChecker . java to inform users that the max record size does not allow
rename AST element to LST in multiple Java files to improve clarity and consistency in naming conventions
refactor scoreable calculations in ThreadedAcousticScorer . java to improve code readability and maintainability
replaced AssertionError with return null in NetHooks . java to simplify error handling by returning null instead of throwing an AssertionError
updated method calls from ` getServerAddress ( ) + " / " to ` window ( ) . title ( ) ` in ` ApplicationControllerFluentLen
added a new ` makeString ` method implementations across multiple classes to enhance the functionality of the ` makeString ` method across multiple iterables and
changed the order setting from Ordered . HIGHEST _ PRECEDENCE + 1 to DEFAULT _ ORDER in OidcServicesManagerRegistered
added a ` Predicate < ProposedWeakAssociation > ` parameter to the ` WeakAssociationsAnalyzer ` class and updated related tests accordingly to enhance
refactor Deflater class to improve code readability to enhance maintainability and facilitate future updates
added exception handling for IOException in Font . java to ensure proper resource management and prevent resource leaks
added a null and empty check for content in VersionTypeBinding . java to prevent potential NullPointerExceptions when content is null or empty
refactor NearbyListFragment to simplify the return statement and improve code readability to enhance code clarity and maintainability by reducing redundancy
convert the content type check from " text " to lowercase in MailConverters . java to ensure consistency in content type handling across different scenarios
change access modifier of AUTH _ MAGIC array from private static to public and add authentication magic handling in OpenSSHPrivateKeySpec to allow external access
updated folder name hint handling in ` updateItemLocationsInDatabaseBatch ` and ` FolderNameInfo ` to use a boolean parameter for binding to improve
fix inheritancecachetest to use @ cache annotation instead of @ cache annotation
updated import statements in ConnectOAuth2RequestFactory and added a method to retrieve user approval requests in TofuUserApprovalHandler to ensure compatibility with the
[ micrometer - 645 ] fix influx naming convention for tag value ( # 645 )
replaced System . out . println ( " OMG FOO " ) with a private dump method in OneProblemHere and TwoProblemsHe
updated the key from " Cookie " to " Cookie2 " in HttpURLConnection . java to ensure compatibility with the latest cookie configuration
added a static method ` classMetadataUnsupported ( ) ` to the ` Platform ` class and updated its usage in ` Subject ` and ` Platform `
added a clear all button and its associated preferences in OverviewActionsView and RecentsView to enhance user experience by allowing users to clear all tasks
added a new variable ` repository _ version ` and modified timeout settings in ` ClusterStackVersionResourceProvider ` and ` HostStackVersionResourceProvider `
deleted the MemoryLeakTest . java file to the test is no longer needed in the project
updated the return statement in ServletTester to include the IP address if localhost is set to ensure the correct host is used based on the localhost
added a condition to check if MVDWAPI is enabled before retrieving the MVdWPlaceholderAPI plugin to ensure compatibility with MV
refactor AbstractPartitionAssignmentsCorrectnessTest to use a collection of HazelcastInstances instead of a single startNodes call to improve test reliability by
refactor FFIProvider to return a singleton instance of FFIProvider instead of throwing an UnsupportedOperationException to improve code organization and ensure proper initialization of
add a new test method ` testHierarchicalWFileList ` in ` BatchProcessTest . java ` to validate hierarchical file list functionality to ensure correct
added null checks for objectToSave , collectionName , and idProperty in MongoTemplate . java , and updated related tests in MongoTemplateTests .
updated position initialization to use NODE _ LIST instead of 0 in NodeClass . java to ensure correct handling of direct inputs and successors in the code
added a new BigDecimal field ` accTradeValue ` and its getter / setter in ` BithumbTicker ` and updated related classes to include it to
updated logging statements to include the segment name in RealtimeSegmentDataManager . java to improve clarity and context of log messages for better debugging
changed the maximum parallel threads from 10 to MAX _ PARALLEL _ TASKS in OverseerTaskProcessor . java and updated related
changed ArrayList to CopyOnWriteArrayList in FixedByteMVMutableForwardIndex , FixedByteSVMutableForwardIndex , and FixedByteSVMutableForward
updated multiple dict implementation classes for consistency and clarity to improve code maintainability and readability
added a null check for destBuffer in FlipTransition . java to prevent potential NullPointerExceptions when destBuffer is null
camel - 16165 : camel - maven - maven - maven - maven - maven - maven - maven - maven - maven - maven - maven
updated condition from ` beginCycle = = currentCycle ` to ` beginCycle > currentCycle ` in ` DelegationService . java ` to ensure
updated the random value generator from 6 to 10 in JdbcExpiringCodeStore . java and modified assertions in CodeStoreEndpointsTests . java to
added type checking for UniqueConstraint in StandardObjectChangeFilter to ensure proper matching of UniqueConstraint instances
refactor description handling in MediaDetailFragment . java to improve code clarity and maintainability to enhance readability and maintainability of the code
catch both ArrayIndexOutOfBoundsException and ClassCastException in FindBugs2 . java to improve error handling for better debugging and debugging
added ` withReferenceFilter ` method to ` ListImagesCmd ` and ` ListImagesCmdImpl ` classes , and modified ` ListImagesCmdImpl
camel - 16263 : camel - jms should not exclude the ` ` bridgeerrorhandler ' ' property on the jms endpoint
added checks for conditional conditionals in OpExclusionUtils . java and set all ops to true in OpExclusionUtils . java to ensure proper handling of
added two return statements in DatabaseCommand . java to ensure that the method does not throw an exception
updated Politician instances from " blair " to " Prime Minster " and " Tsar of Umpa Lumpa "
replace null check with StringUtils . isNotBlank in BeanShellInterpreter . java to improve readability and maintainability of the code
updated the handling of the port parameter in the RestletComponent class to ensure the correct port is used based on the component ' s port value
updated import statements and removed WALL _ SIGN block case from SchematicFormat . java to streamline import statements and improve code clarity
added a system property " hive . query . max . length " set to 100Mb in QTestUtil . java and removed overriddenConfigurations
changed access modifiers of userName , securityMgr , and httpsConfig from public to private in WebServer . java and WebServer . java to enhance en
updated Hadoop and Kafka sink names from " writeHdfs " to " hdfsSource " across multiple Java files to improve clarity and consistency in
updated HiveConf and HiveSparkClientFactory to check for " spark . app . name " instead of " spark . app . name " to
rename ` whiteName ` to ` includedName ` in ` ManagedClassFactory . java ` to improve clarity and consistency in naming conventions
simonstewart : do n ' t restore the window when restore the window .
updated methods in LocalCellProviderFactory , AbstractEmbeddedCellBuckOutInfo , and DefaultProjectFilesystemFactory to include main cell root and BuckPaths
added a assertion to check for the presence of " entity expansions " in the error message to ensure that the error message contains only " entity expansion
added bitwise operations for table offset and length in TrueTypeFont . java to ensure consistent bitwise operations across different operating systems
removed the customize method from DirectMethodHandle . java to streamline the code by eliminating unnecessary assertions
refactor line buffer initialization and condition checks in LineChartRenderer . java to improve code readability and maintainability
refactor flavor handling in AndroidBinaryDescription . java for better clarity and functionality to improve code readability and maintainability by consolidating flavor checks
updated buffer index from offset to i in LwjglGL11 . java to correct the array indexing for GL15 generation
added new classes Property , PropertySuper , and TestClassResolutionFail , and implemented a test case for property resolution to ensure proper handling of LinkageError
added a check for SHUTDOWNHOOK _ ENABLED before removing the shutdown hook thread to ensure that the shutdown hook is only removed when
updated FilterChainProxy to use FilterChjainProxy instead of String url and removed the ` url ` parameter from constructors to simplify the constructor
replaced ` Collections . sort ( intermediateResult ) ` with ` Arrays . sort ( ) ` and updated return statements in ` PercentileAggregationFunction .
added checks for schema loading before loading tables in MetaDataBasedSQLCompletionProvider and QueryTypeAnalyser to ensure that tables are loaded before proceeding with
updated the initialization of ` baseType ` in ` DatabaseInfoRetriever ` and added new literal prefixes and localized types in ` MutableColumnDataType ` to
updated HTML links in multiple Java files to use { @ link ` tags instead of hardcoded strings to improve code readability and maintainability by
refactor instance retrieval methods to be final in EvaluatorFactory . java to improve code readability and maintainability
updated target constraints from ` osx ` to ` osx _ config ` in ` BuildCommandIntegrationTest ` and ` ConfigSettingIntegrationTest ` to ensure
added sound effect functionality to AllAppsView to enable and disable sound effects in the application
updated the main method from Exception to IOException in RemoveFirstPage . java to improve error handling by throwing an IOException instead of an Exception
added leftAxis . setGranularityEnabled ( true ) to BarChartActivitySinus . java to enable granularity tracking
refactor comparison logic in GdxSetup . java to use a new method ` compareVersions ` to improve code readability and maintainability by central
updated ContextHandlerGetResourceTest to use MavenTestingUtils for directory creation and added OS _ ALIAS _ SUPPORTED assertions to ensure compatibility with
added a ` close ` method to ` Connection ` , ` JsonAsyncHttpPinotClientTransport ` , and ` PinotClientTransport ` classes
refactored event handling in SocketRemoteTest , MockAppender , and SocketServerFunctionalTest to use LinkedBlockingQueue instead of int to improve performance
[ beam - 4142 ] add check to ensure resource be a directory
removed unused import statements from IsometricStaggeredTiledMapRenderer . java to streamline code and improve readability
removed redundant call to unbindHandle in ItemServiceImpl . java to streamline code and improve readability
refactor Config and Attribute classes for improved clarity to enhance maintainability and readability of the codebase
removed unnecessary conditional check for HIT _ TARGET _ BACK in OtherActivityTouchConsumer . java to simplify the code and improve readability
refactor nav button handling in NavbarButtonsViewController to utilize UI mode settings instead of Themes to simplify code and improve UI responsiveness
change the error message from an error to throw an exception instead of an error to improve error handling by throwing an exception instead of an error
refactor code to use byte addresses instead of short values for referenceKind and memberIndex to improve clarity and maintainability of the code
added BlockFormattingContext parameter to ` findBox ` and ` findElementBox ` methods in ` BasicPanel . java ` to enhance functionality by allowing
refactor WorkerProcess and WorkerShellStep to improve error handling and output formatting to enhance code clarity and maintainability by encapsulating error output
added null checks and error handling in CheckedListReplaceAll . java and CheckedListReplaceAll . java to ensure robustness by preventing NullPointerExceptions
added a new boolean variable ` _ testFill ` and ` _ writeCallback ` to the ` SslConnectionTest ` class and a corresponding test
added a final modifier to the ` defaultValue ` field in ` FeatureFlags ` and modified the ` addChangeListener ` and ` removeChangeListener ` methods in
added JUnit @ Ignore annotation to GatewayRSocketIntegrationTests . java to temporarily disable the test due to issue gh - 1114
added import statement for MalformedURIException in StandardRequestHandler . java to ensure proper handling of malformed URI exceptions
added Javascript execution for focusing the element in InstructorFeedbackEditPage . java to ensure focus is set on the first argument of the
refactor synchronization for ownTrades and userTrades in KrakenStreamingTradeService . java to improve readability and maintainability of the code
updated log message format from ` err ` to ` out ` in ` ChangeableUrls . java ` to improve clarity of log output for better
added a boolean parameter ` randomAccessRows ` and modified constructors in ` SparseRowMatrix ` to include a ` shallowCopy ` parameter to enhance
cloudstack - 5292 : fix npe when delete a volume with no poolid ( sergey shelukhin )
refactor file reading logic in Utilities . java to handle local Hive configuration to ensure correct file path handling based on the Hive configuration
[ beam - 2690 ] update udftestprovider to use guava v26 _ 0 _ jre
added resetInternalState ( ) method to MemoryCallGraphBuilder . java and refactored internal state management to improve code clarity and maintainability by
added a null check for multiUserChatOpSet in ConferenceChatManager . java to prevent potential NullPointerExceptions when handling multi - user chat operations
added a check to ensure the update file can be written before writing it to prevent illegal user action errors when the file can not be written
added folder synchronization functionality to the DrawerActivity and created a new FolderSyncActivity class to facilitate user navigation through the FolderSyncActivity
[ hotfix ] [ test ] fix flaky test in sequentialchannelstatereaderimpltest
updated SpanishTreeNormalizer to handle numeric tokens correctly and added test cases in SpanishTreeNormalizerTest to improve word normalization logic and ensure correct handling of numeric
use heappointwriter . getpackedvalueslice instead of reader . pointvalue ( )
added LocaleRandomizer and LocaleRandomizerTest classes , and updated InternalRandomizerRegistry and InternalRandomizerRegistry to utilize this new LocaleRandomizer to enhance locale generation
added unit tests for MIME type detection in TestMimeTypes . java to ensure correct MIME type handling for font printer metric and type1 files
updated version strings in Installer . java and AutoUpgrade . java to include new versions " 9.9 " and " 9.9 . 1 " to
reformatted code for better readability in TCPTransport . java to improve code clarity and maintainability
modified the timeout value in the read method call from ` getReadTimeout ( ) ` to ` 0 ` in ` Http2AsyncParser . java
updated the WATCHER _ INITIAL _ DELAY value from 120 to 600 in TimelineMetricConfiguration . java to adjust the initial delay
updated error message formatting in SelectStatement . java to correct the reference to the previous column name to ensure proper formatting of the error message for clarity
added date parsing functionality to ThirdEyeJiraClient to enable accurate handling of date fields in the issue builder
refactor PriorityGenerator to use a dedicated PriorityGenerator instance to improve code clarity and maintainability by centralizing priority generation logic
added a constant for maximum scalar replace code size and modified the condition for scalar replacement to ensure that scalar replacements are only applied when the entire class has
added a new field ` DATE _ TAKEN ` and updated projection test to include ` DATE _ TAKEN ` and ` folderSortOrder `
updated drawImage calls in TexturePacker2 . java to use imageWidth - 1 and imageHeight instead of imageWidth - 1 to ensure correct rendering
updated JettyWebSocketServerContainer and JettyWebSocketServletContainerInitializer to utilize WebSocketUpgradeFilter for WebSocket upgrade handling to improve WebSocket connection handling and
added shutdown calls to validateSignService , transactionsMsgHandler , and nodePersistTaskTimer in Manager , TransactionsMsgHandler , and NodePersistService
added RawJsonRequestBody annotation processing in JaxrsSwaggerGeneratorContext and created a new RawJsonRequestBodyAnnotationProcessor class to handle RawJson request parameters
added a new method ` newTarget ` to create a ` Target ` object with specified type and extension to facilitate the creation of ` Target ` objects
refactor BeanContainer to use ArrayList and add BeanContainerTests class for unit testing to improve performance and ensure proper functionality of the BeanContainer functionality
hbase - 26156 fix typo in testmetricsregionserver . testblockcachecounthitpercent test
camel - 16237 : camel - jbang - clean up temp file when exchange be complete .
[ Teltonika ] set the device ID of the position in TeltonikaProtocolDecoder to ensure proper handling of device IDs in the position
replaced ` Files . readFirstLine ` with ` Files . asCharSource ` in ` HybridProjectBuildFileParser . java `
added an override for the visitAssignop method in Attr . java and created a new Test class with a test method in FailOver15 . java
added a flag to disable account handling in FirstRunActivity and modified onCreate method in BaseActivity to ensure account handling is only executed when enabled
refactor the heuristically find main connected component in IsochroneResource . java to improve code readability and maintainability by consolidating
added a path parameter to DrillViewTable and updated related constructors in WorkspaceSchemaFactory and TestViewSupport classes to enhance view handling by allowing
added additional configuration options for the PooledByteBufAllocator in PooledByteBufAllocatorL . java to enhance memory allocation options for better performance
updated array type checking from double to short in ObjectInputStream and added a new CloneArray class for testing to ensure correct handling of short arrays and validate
added a new configuration variable ` LLAP _ IO _ THREADPOOL _ SIZE ` and modified the executor initialization in ` LlapIoImpl
added additional initialization for SSLLogger in SecurityServicesFeature . java based on Java version to ensure compatibility with newer Java versions including 8 and 11
refactor latitude and longitude range checks in LatLonGrid . java and add a new test method in TestLatLonGrid . java to improve code read
refactor ` apply ` methods to use ` driver ` instead of ` from ` for improved clarity and functionality to enhance code readability and maintainability
added an ` isInsertOverwrite ` parameter to the ` replaceFiles ` method in ` Hive . java ` and refactored related methods in `
removed the ` SomeInnerClassReflector ` interface and its associated methods from ` ReflectorTest . java ` to streamline the code by eliminating unused
updated configuration key from " disable _ r _ java _ idea _ generator " to " auto _ generate _ android _ facet _ sources " in Config
updated message formatting and added UI message formatting in HubChangeExecListener . java to improve readability and maintainability of the code
added ` properties ` field to ` Link ` class and corresponding getter and setter methods in ` QuickLinksConfigurationModule ` to allow customizable properties for
updated the ` @ EqualsAndHashCode ` annotations and added a ` toString ( ) ` method in ` YamlConfigFileDTO ` to improve code clarity and
updated SimpleForwardingServerCall and SimpleForwardingClientCallConfiguration to accept RespT and RespT parameters to enhance type safety and reduce
refactor ` forName ` methods to include a ` CallerSensitiveAdapter ` parameter and improve class loading logic to enhance flexibility in class loading by allowing
updated imports and token retrieval methods in RequestItemRepositoryIT . java for improved token handling to enhance code readability and maintainability by using a
replaced instances of ` ThreadPoolExecutor ` with ` ThreadPoolExecutorEx ` in ` GroupExecutor . java ` to improve thread management by using a more efficient
changed the visibility of the setSecurityContextAccessor method from package - private to public to allow access to the method from other packages
updated ` TimeStepdefs ` to use ` Calendar ` instead of ` Converter ` and refactored ` HumanTime ` class to improve date
add spark _ isolated and spark _ recessive banners to be consistent with other mod .
updated RestInvocationHandler to accept a URL parameter instead of an ExchangeSpecification parameter to simplify the proxy creation process by using a more descriptive parameter
removed multiple print statements from RecordGenerator . java to streamline output for better readability and maintainability
[ hotfix ] [ connector / kafka ] disable autocommit in kafkaconsumer when autocommit = true
updated output statements in LoggingExecutor and set hasDatabaseChangeLogLockTable to true in StandardLockService to ensure proper handling of database change log lock
updated @ SuppressWarnings annotations to include " rawtypes " and " deprecation " in AbstractAuthorizeTag and AuthorizeTagCustomGrantedAuthorityTests to
changed method visibility from synchronized to synchronized in Database . java to ensure thread safety when accessing multiple methods concurrently
refactor property resolution logic in SpringBootAutoConfigurationMojo to improve clarity and maintainability to enhance code readability and maintainability by reducing redundancy in
updated the method call from ` baseSymbol ` to ` counterSymbol ` in ` VirtExMarketDataService . java ` to ensure the correct ticker
camel - 14263 : camel - core - fix camel - core - messagehelpertest to use the correct package .
replace UUID . randomUUID ( ) . toString ( ) with System . getProperty ( ' testId ' ) in HoneycombJdbcInterceptor . java to
added synchronization to date parsing and formatting in DefaultJobParametersConverter . java to ensure thread safety when accessing the dateFormat object
updated package - info . java files for mmm and ppp packages to improve package documentation clarity and maintainability
updated the height scale setting in FractalHeightMapGrid . java from 256 to heightScale to ensure the heightmap reflects the correct height scaling
replaced instances of ` obj instanceof String ` with ` obj . equals ( this . attrib ) ` in ` SecurityConfig ` and ` SecurityConfigTests
set default value of dumpPartitionId to false to ensure dumpPartitionId is set to false when no dump partition ID is specified
added unit tests for handling TronTXOutput and TronTXOutputs in UTXOSetTest to ensure correct behavior of UTXO
[ java ] ignore unused variable with ` ` ignored ' ' in java 9
pdfbox - 4892 : avoid npe , a suggest by valerybokov
updated formatting in JsrJobOperator . java and added a new test method in JsrJobOperatorTests . java to improve code read
added a protected boolean field ` disallowBatchOnCascade ` and a method ` isDisallowBatchOnCascade ` to the ` DatabasePlatform `
removed redundant initialization of the principal variable in JaasAuthenticationHandler . java to streamline the code and improve readability
refactor SolrCores to use a dedicated executor service for core closing to improve resource management and prevent potential memory leaks
added a null check for mActionsView before setting the visibility of the actions view to ensure that the actions view is only visible when it is not
updated JobParameters initialization in RunIdIncrementer . java to handle null parameters more gracefully to improve robustness by preventing potential NullPointerExceptions
refactor BasicEntity and TestUtil classes for improved readability to enhance maintainability and clarity of the codebase
added tests to verify the number of matched devices in the SchemaRegionReadPlanFactory to ensure that the correct number of devices are retrieved from the schema
add error log to metriceventbus to make it easy to run metricseventbus
added a conditional check for ` max ` before calculating mSumChange ` and created a new ` EigenvectorCentralityBuilder `
updated registry creation to use a random port instead of a hardcoded value to improve flexibility and maintainability of the registry configuration
refactor geometry handling to use byte arrays instead of float arrays for vertex colors and colors to improve code clarity and maintainability by consolidating byte
change the Beacon amplifier from 2 to 0 in BlockEntityBeacon . java to ensure proper handling of the beacon ' s amplifier
refactor TubeCalc class to improve code readability to enhance maintainability and facilitate future updates
changed the ` enabled ` boolean from true to false and simplified the task scheduling logic in ` ServiceHttpClientFactory ` to disable health check functionality and improve
updated DefaultValidator to accept Class < ? > instead of Class < Class < ? > > and added sanity checks for groups to improve type safety and
added @ key headful annotation and modified annotations in bug8057791 . java to ensure proper functionality and maintainability of the code
make statistics reporter thread daemon to allow application to exit via main method completion fix # 322
update version parsing logic in ItemLexicon . java to ensure correct parsing of GRADLE version string
added a call to ReflectionCheckLinker . checkReflectionAccess ( type ) in JavaAdapterFactory . java to ensure proper access checks for reflection access
added ` lazySessionCreation = true ` to multiple test methods in AMQP and MinaFileTcpTest classes to enhance test coverage by allowing dynamic session
added a ` RecordReader ` parameter to the ` initIOContext ` method across multiple classes to enhance flexibility in handling RCFileRecordReader instances
deleted ClassLoaderHolder . java and LoaderManager . java files to remove unused class to streamline the codebase
added a configurationChanged method to manage workspace roots and modified file checks in FileStore and JavaLanguageServer to improve file management and ensure proper handling of
added try - catch blocks to register and unregister session callbacks in PackageInstallerCompatVL . java to handle potential exceptions when registering and unregistering
updated index creation paths to use " index . cfs " instead of " org / apache / lucene / index / index . cfs " to
added a BiFunction to the AkkaRpcServiceUtils class to create and start a new AkkaRpcService using a BiFunction to enhance flexibility in creating
added retry logic in TestExportSnapshot . java to set the maximum number of map attempts for export operations
pdfbox - 4892 : fix typo , a suggest by valerybokov
added a new test class ` SslConnectionTest ` to validate SSL connection behavior to ensure proper handling of SSL connections before closing the connection
added validation for IPv4 and IPv6 addresses in InetAddress and NetworkInterface classes to ensure proper exception handling for invalid address family types
added a test method ` testDateSerializationInCollection ` to ` DefaultTypeAdaptersTest ` for JSON serialization to ensure proper serialization of dates in
refactor Message class to improve code readability to enhance maintainability and facilitate future updates
added debug logging for generated SQL and modified conditional logic in PutDatabaseRecord . java to improve traceability and ensure proper handling of the first update key
updated loop condition from ` maxWidth + 2 ` to ` maxWidth - 2 ` in ` TableOutput . java ` to correct the calculation of the running
pdfbox - 4892 : do n ' t cast COSDictionary to non - object , a suggest by valerybokov
updated the priority for handling format string arguments in FormatStringChecker . java to improve the accuracy of format string argument handling
added a new property ` IGNORE _ FOR _ EACH ` to the ` LocalVariableCouldBeFinalRule ` class to ignore non - final
added PDF version and compression settings to PDFExporter and updated test paths in PDFExporterTest to ensure compatibility with the latest PDF formats and improve test coverage
added unit tests for the LdapUserDetailsMapper class to ensure correct mapping of user role attributes to authorities in the LdapUserDetailsImpl class
added LDAP read timeout configuration to the LdapConfiguration class and updated the LdapContextFactory to use it to enhance configuration flexibility by allowing configurable LDAP connection timeout
refactor TestDescription . java files for consistency to improve maintainability and readability of the codebase
refactor Pixmap , ManifoldPoint , and TextureRegion classes to improve code organization and maintainability
rename ` shouldCacheIterator ` to ` shouldAvoidAllocation ` across multiple classes to improve clarity and consistency in naming conventions
added a condition to check if the state handler is invalidated in the gesture state check to ensure that gesture handling only occurs when the handler is invalidate
updated the maximum distance for folder creation from 0.06 f to 0.05 f and removed the initialization of mOldRotationYs to improve the accuracy
refactor OciConfigConfigSource to use ConfigProviderResolver instead of ConfigProvider to streamline configuration handling and improve code clarity
refactor Testjsig class to improve code readability to enhance maintainability and facilitate future updates
update mana and mana item calculation to use stack . getCount ( ) instead of Math . sum ( stack , tag _ mana )
regenerate client with updated copyright year ( # 4382 )
added @ SuppressWarnings ( " serial " ) annotation to P11TlsPrfGenerator . java to suppress serialization warning and remove unnecessary serialVersionUID
refactor validation logic in DataRegion . java to use ` isEmpty ( ) ` instead of ` tsFileNotValid ` to improve clarity and
added new files Switch21 . java with switch pattern matching and null handling methods in Switch19 . java and Switch19 . java to enhance switch functionality
updated error message formatting in ComparableSubjectTest . java to improve clarity and consistency in error messages
set standalone flag to true for xml content in StreamHelper and add a new TestStreamHelper class for testing to ensure proper XML parsing and validation of
updated the condition for numSets and size in Int2ObjectCache . java and added equal and equals methods in Int2ObjectCache . java to
removed redundant sorting of filter chains in WebSecurityConfiguration and added a new test for ordering security filter chains in WebSecurityConfigurationTests to improve security configuration
removed ` TimeInForce . GTC ` from the ` OrderType ` parameter in ` BinanceTradeService . java ` to simplify the parameter
refactor FloatRangeRandomizer to extend AbstractRangeRandomizer instead of Randomizer to simplify the class structure and improve value validation logic
updated KEY _ SEP from ' \ 0 ' to ' \ t ' in RocksDBBuildInfoStore . java to ensure compatibility with new
camel - 13276 : camel - jms - add support for camel - jms component . thanks to martin for the patch .
added error handling for bound retrieval in SourceUtils and created a new test class for it to improve robustness by handling NoSuchFieldError and ensure correct
refactor LeafFilterFactory to use a new method ` getLeafFilterBuilderByParquetType ` to improve code readability and maintainability by
added a check to ensure the originalArtifactName starts with SCOPED _ TARGET _ PREFIX before extracting its substring and ensure proper resource
added a loop to read certificate serial numbers from an available certificate in HttpsSegmentFetcher . java to improve certificate processing efficiency and log certificate serial numbers
refactor configuration handling in mmm Config . java and add DnsFallback . java to improve code clarity and introduce a new class DnsFallback . java for
ww - 4892 add exception to the exception in case of an exception be throw
changed the type of the ` success ` and ` addressTag ` fields from ` boolean ` to ` String ` in the ` DepositAddress ` class
replaced the custom Privilege implementation with a lambda expression in WindowsSecurity . java to ensure proper resource management and prevent potential memory leaks
removed " address " , " phone " from the scope configuration in CommonOAuth2Provider . java and updated test assertions in CommonOAuth2ProviderTests
refactor ManagedSelector to use a new Start class for managing selector updates to improve code readability and maintainability by consolidating selector updates
added a new BigDecimal constant for hue and saturation in WLedBindingConstants and WLedHandler to support color calculations based on segment index to
replaced the static method ` isValidCaller ` with a ` Set < String > VALID _ CALLERS ` in ` VectorizationProvider `
added a new method ` caseJSRInst ` to the ` InstSwitch ` class to provide functionality for handling JSR insts in the
added ` PlatformTransactionManager ` to the ` SubscriptionActivatingSubscriber ` constructor and modified transaction handling in ` BaseSubscriptionInterceptor ` to enhance transaction
refactor SQL update and insert statements in DBMSProcessor . java to improve data handling and error logging to enhance code readability and maintainability by
added elevation setting for contact items in ContactItemInflater to ensure proper elevation setting for devices running Lollipop and above
rename ` typeInformation ` to ` identifier ` in ` Identifier ` class to improve clarity and consistency in naming conventions
added security checks using AccessController for file reading and writing operations in SandboxFileManager . java to enhance security by ensuring files are read and written
refactor Groovy parser and printer to improve binary operator handling to enhance code readability and maintainability by reducing redundancy
updated warning logging to include the class name of the exception when fetching invalidation meta - data to improve clarity of warning messages by providing more context
updated byte handling in RecordInputStream , UnicodeString , and HSSFWorkbook classes to improve character data handling and ensure correct handling of byte values
added a new test method ` downloadsFileWithNorwayCharactersInName ` to verify file download functionality to ensure correct functionality of file download
replaced RuntimeException with CancellationException in AsyncResource . java and added cancellation handling methods in FingerprintScannerSample . java to improve cancellation handling and
added a null check for statistics before executing the handleCache method to avoid potential NullPointerExceptions when statistics are null
added a new test method ` removeObjectFromExplicitCollection ` to the ` MongoTemplateTests ` class and updated related annotations to enhance functionality and ensure
updated copyright year from 2015 - 2022 to 2022 in multiple Java files to reflect the correct copyright dates for the PGraphics classes
corrected a trailing newline character in the return statement in Coder . java to ensure consistent formatting of the output for better readability
added a new boolean field ` mIsClearAllButtonFullyRevealed ` and updated scroll handling logic in ` RecentsView ` to improve
replaced direct calls to ` hmsTable . getParameters ( ) ` with ` COMMON _ HMS _ PROPERTIES ` in ` HiveI
replaced instances of ` BindException ` with ` Server . isAddressInUse ` and added a new method ` Server . isAddressInUse ` to improve
added argument " - cp " to system . getProperty ( " test . class . path " ) in TestNestmateAttr . java to ensure
updated the default value of SchemaTextDetailType from VERBOSE to verbose _ schema to improve clarity and maintainability of the code
refactor multiple Java classes to remove unnecessary imports and add multiple @ Override annotations to improve code clarity and ensure consistent method overriding behavior
# 118 - add ` ` nested use savepoint ' ' property to ` ` scopetrans ' ' and ` ` isnestedusesavepoint
replaced ` fetchSize ` with a ` ThreadLocal < Integer > fetchSize ` in ` QueryProcessExecutor ` and updated related methods to improve thread safety
[ hotfix ] [ test ] remove unused idlestrategy from embeddedpingpingpingpong
refactor HttpClientIntroductionAdvice to use a Supplier for better readability to improve code maintainability and reduce boilerplate code
added HDP _ VERSION system property handling in SliderAppsViewControllerImpl . java to enable dynamic configuration of HDP version based on configuration settings
added private fields for loaderClass , jusl , and loader , and refactored close methods in JavacProcessingEnvironment to improve resource management
added deep cloning functionality to ParameterizedRobolectricTestRunner and created a new DeepCloner class in RobolectricTestRunner to enhance performance by
added a bind annotation for JETTY _ SHOW _ STACKTRACE in ResourceBase . java to disable stack trace visibility in WebServer '
added a check to return null if the object is of type JSType . OBJECT to ensure proper handling of object types and prevent potential errors
updated import statements and refactored field assignments in SystemDictionary . java to improve code readability and maintainability by reducing redundancy
updated ` JwkKeyListView ` to use ` PublicKey ` instead of ` RSAPublicKey ` and updated type adapters in ` JsonWebKeyEndpoint
fix nativebootimage heap crash when spawnisolates be false .
refactor MBeanServerMXBeanUnsupportedTest to improve test coverage to enhance maintainability and readability of the test code
removed the import of OrderClassLoaders from MavenPluginCollector . java to streamline the code by eliminating unused dependencies
added getOwnerAddress ( ) method to multiple Actuator , CreateAccountActuator , TransferActuator , VoteWitnessActuator ,
http : / / issues . apache . org / jira / browse / amq - 4436 - add a main method to run the broker
updated the ` ZCOUNT ` , ` ZRANGEBYSCORE ` , and ` ZREVRANGEBYSCORE ` command to handle both
refactor ProtobufAnnotationSerializer to utilize a builder for node and edge creation to improve code readability and maintainability by reducing redundancy
[ java ] remove an active command from the async command set before remove it from the drivereventsadapter .
added conflicts handling in FileDataStorageManager , FileDownloader , and FileUploader classes to ensure proper handling of file conflicts during uploads
updated type parameters in ExecutionContext , AbstractTransactionalResourceItemWriter , and AbstractMethodInvokingDelegator classes to use generics to enhance
updated import statements from ` org . apache . solr . common . util . StrUtils ` to ` org . apache . lucene . analysis . core
added driver properties for oracle and mysql driver based on the presence of " remarksReporting " and " useInformationSchema " in the DatabaseFactory to
added a handler parameter to the MockMethodInterceptor in SignedSupportingClassProxyFactory and updated warnings in PartialMockingWithConstructorUsingEasyMock
updated timestamp handling in FileChangedExclusiveReadLockStrategy to use System . currentTimeMillis ( ) instead of Date ( ) . getTime ( ) to improve accuracy
replaced instances of ` new EnvironmentInstance ( ) ` with ` wrapClassLoader ( ) ` in ` ExecutionContext ` and ` LocalExecutor ` classes to
added a call to ` onBufferChanged ` in ` TerminalView ` and modified ` TerminalTextViewOverlay ` to handle buffer changes to ensure proper UI
removed unnecessary whitespace in processConfigFile method and added checks for pid before processing to improve code readability and ensure proper handling of service pids
modified freeze action logic in OperationActions , OperationRegistry , and JumpTable classes to ensure proper handling of frozen resources based on VM configuration
added an ` _ insecure ` boolean property and corresponding getter and setter methods in ` TlsConfig ` and ` TlsUtils ` to allow
refactor ` searchSubPackages ` method to use ` StandardLocation ` instead of ` SOURCE _ PATH ` and introduce a new class ` T7
updated variable names from ` nodeColumns ` to ` edgeColumns ` and added a new ` EdgeColumnsGDF ` for better case - insensitive comparison
updated the @ OneToOne annotation to use CascadeType . ALL for DefaultAddress to ensure proper cascade behavior for the DefaultAddress entity
refactor hashCode and equals methods to use Arrays . equals instead of getMessageId to improve code readability and maintainability by reducing redundancy
updated the response body in AsyncProvidersBasicTest from " ? ? ? " to " \ u017D \ u017D \ u
removed the ` isKeySerializerTypeVariableSized ` method from ` RocksDBSerializedCompositeKeyBuilder ` to streamline the code by eliminating
added a method ` getStaticPermissionsField ` to ` ProtectionDomain ` and modified ` SubjectDomainCombiner ` to use ` JavaSecurityProtectionDomainAccess `
added null checks for recipe in various recipe classes to ensure proper handling of null recipes and improve code readability
refactor parsing logic in Parser . java to improve readability to enhance readability and maintainability of the parsing process
added a connection error popup in UploadMediaDetailFragment , UploadMediaDetailsContract , and UploadMediaPresenter to handle UnknownHostException to improve user experience by
added a new file ` Issue596 . java ` and a test for handling unhandled requests in ` HttpHandlerImpl . java ` to
updated bit masking logic in NodeBitMap . java to use Long instead of Long to ensure proper handling of long values in bit operations
refactor ImportLayoutStyle class to improve code readability to enhance maintainability and facilitate future updates
refactor ConsoleUIService to use environment - specific terminal parameters instead of hardcoded booleans to improve flexibility and maintainability of console wrapper logic
refactor ShadowAccountManagerTest to use TestAccountManagerCallback for account management to simplify the account management process and improve code clarity
refactor the retrieval of the enclosing type in AnalysisType . java to simplify the code and improve readability
updated method names from ` getProperty0 ` and ` getProperty1 ` to ` property0 ` , ` getEntries ` , and ` concatSuffix `
removed the timeout parameter from the set method call in PutAllCallable . java to simplify the method call by eliminating unnecessary timeout parameter
add null check for ` mqConsumerInner ` in ` MQClientInstance ` and add unit tests in ` MQClientInstanceTest `
[ java ] do n ' t generate source identity if source address be null .
added a new file ` TopTabAction . java ` implementing ` Presenter . Toolbar ` to provide a toolbar component for the top tab in
camel - 14263 : dynamicrouter should start the service in case the recipient mode be all match .
updated AggregateItemReaderTests to use static imports and added @ Before annotation to improve test structure and ensure proper initialization of the test class
updated Procedure constructor to use generic type T in AbstractObjectValueTypeMap . java to enhance type safety and prevent potential runtime errors
updated imports and added wikidata edit count functionality in AchievementsActivity , NetworkingModule , and OkHttpJsonApiClient to improve user experience
added a validation check for the length parameter in OfflineSorter . java to ensure that the input length is within the Short . MAX _ VALUE range
added absolute value accumulator and modified bug reporting logic in DumbMethods . java to improve bug reporting accuracy for absolute values and ensure accurate bug reporting
refactor multiple dataset classes to improve code organization to enhance maintainability and readability of the dataset management code
updated error messages in ProvisionClusterRequest and ProvisionClusterRequestTest to include acceptable credential types to improve clarity of error reporting for invalid credential types
updated random variable assignments in TestVectorUtil . java to improve randomness to ensure consistent randomness across different scenarios
changed the return type of the ` compareBy ` method from ` int ` to ` long ` and refactored comparison logic in ` DateUtil
added a method to retrieve the SSL SSL property in TestUtil . java and updated SSL property retrieval in PGPropertyTest . java to enhance SSL configuration
added functionality to enable safe browsing in ChromeDriverFactory and corresponding tests in FileDownloadToFolderTest , FileDownloadViaProxyTest , and
added null checks before cloning fly configuration in BaseMotorMount and RecoveryDevice classes to avoid potential NullPointerExceptions when modifying flight configurations
added a condition to check if transcoding is disabled in the DLNAResource class to ensure proper transcoding behavior when transcoding is disabled
updated DataTable to handle empty data cases and modified TableDiffer to return an empty list instead of an empty list to improve robustness by preventing null
added a custom ` CustomIgnoreTag ` constant and removed it from ` iter ` if it starts with ` CustomIgnoreTag ` to ensure proper handling
camel - 14263 : camel - jdbc should throw an optimisticlockingexception instead of throw a runtime exception
added a new class ` ParentConfigProperties ` and modified ` BeanDefinitionInjectProcessor ` to utilize ` modelUtils . isPrivate ( method ) `
updated PreferencesActivity to extend LimitlessIDEActivity instead of IDEActivity and adjusted padding settings for toolbar and fragment loading to enhance user experience by
deleted the ClusterNodeInfo class from the project to the functionality is no longer needed in the project
updated return statement in ShieldedTransferActuator . java to improve code clarity and maintain consistency
added debug output for cipher suite selection in ServerHandshaker . java to improve debugging information for cipher suite selection
refactor onTemplateChosen method to handle single and multiple templates in ChooseRichDocumentsTemplateDialogFragment and ChooseTemplateDialogFragment to improve
added handling for duplicate node labels in ImportContainerImpl and updated related methods in ImportContainerParameters to enhance node label management and improve error reporting for duplicate
added a new file R2303044ListSelection . java to test the selection of an item in a list to demonstrate the functionality of the
[ java ] : add checkkeepalivetimeout and hasclienttimeout to publicationregistrations in driverconductor .
added a null check for mWorkspace before proceeding with operations to avoid potential NullPointerExceptions when mWorkspace is null
added a new test method ` testCompoundPropertyTwice ` to ` StepScopePlaceholderIntegrationTests ` to ensure correct behavior of compound property registration
updated row count calculation in StatsRulesProcFactory to include the number of rows to ensure accurate counting of rows based on the parent statistics
refactor path handling in SpringBootDocBuildTemplate to remove duplicated path parameters to improve code clarity and maintainability by reducing redundancy
updated logger initialization to be static final and simplified action handling in multiple classes to improve code clarity and maintainability by reducing redundancy
replaced ` DistBuildCachingEngineDelegate ` with ` LocalCachingBuildEngineDelegate ` and updated related logic in ` createBuildEngineDelegate ` to
updated the exception message in the RuntimeException constructor to include additional characters to improve error reporting for better debugging
added a conditional check for DEBUG before logging the log message to ensure logging is only logged when DEBUG is enabled
refactor Console and Scanner classes to improve code readability and maintainability
updated the calculation of numTerms in SimilarityBase . java and added a new test for discount overlaps in TestSimilarityBase . java to ensure
added null checks for the ` send ` method in ` SimpleMailMessageItemWriterTests ` , ` MimeMessageItemWriterTests ` , and
added ` exit ` and ` quit ` properties to ` Global ` , ` ScriptingFunctions ` , and removed the ` quit ` method from ` Scripting
updated application context handling in LoanBrokerGateway and LoanBrokerSharkDetectorDemo to streamline application context management and improve code clarity
rename methods from ` getFirstUnverified ` to ` findFirstUnverified ` across multiple classes to improve clarity and consistency in naming conventions
vmware : do n ' t set cookie in vwware web service request
reformatted assertions in ResinAcegiAuthenticatorTests for consistency to improve readability and maintainability of the code
updated byte conversion methods to include a 32 - bit value for r and s in ECKey . java to ensure consistent data size for key operations
updated the property from " fml . disabledMods " to " fml . modStates " in Loader . java to ensure the correct mod state is
refactor account selection handling in ReceiveExternalFilesActivity to use a new method ` showAccountChooserDialog ` to improve code readability and maintainability
updated IOException message to include host IP and port details to improve error reporting for better debugging
added a check to throw an exception if an empty result is returned in the ValidatorContractController to ensure that an error is thrown when an empty simulation
updated TexturePackerFileProcessor to handle null root files to improve robustness by preventing potential NullPointerExceptions
removed a null check for DataSource and JNDI in PooledConnection . java to streamline the code by eliminating unnecessary checks
updated the value of TARGET _ MB and WINDOW from 10 to 1 and adjusted the count calculation in TestRefprocSanity .
added null checks for currentConsole before writing bytes to prevent potential NullPointerExceptions when writing to the console
[ hotfix ] [ kinesis ] set kinesis credentials refresh delay to 100ms
replaced instances of AlertDialog . Builder with showInfoAlert in SingleUploadFragment . java to simplify the code and improve readability by eliminating unnecessary dialog creation
updated loop parameters in T4501661 . java to include a ` pack ` parameter and added a package option to the test method to enhance
updated Java version from 1.2 . 0 _ 60 to 1.2 . 0 _ 31 in ModulesTest . java and TestBadUseCases . java
added a wildcard import and modified dependency resolution logic in PluginBundleManager . java to simplify import statements and improve dependency resolution logic
added a set of ZipFileInputStreams and modified the releaseInflater and releaseInflater methods to ensure proper resource management and prevent potential memory leaks
rename ` DATAMATRIX ` to ` DATA _ MATRIX ` across multiple files to improve clarity and consistency in naming conventions
added methods to run active and idle contexts based on key ranges in SequenceGeneratorSource . java to ensure that active and idle contexts are correctly
rename method ` getCurrentyActiveConnections ( ) ` to ` getCurrentActiveActiveConnections ( ) ` in BlobServer and BlobServerGetTest to improve
replaced ` findAny ( ) ` with ` findFirst ( ) ` in ` AnnotatedDelegate ` and ` SyntheticAnnotated ` classes to streamline the
added support for ppc64le architecture in Bits . java and ByteArrayAccess . java to ensure compatibility with ppc64 and ppc64le architectures
updated the exception message in RoboMonitoringInstrumentation . java to include a link to the github github . com / robolectric / robolectric / pull / 47
replaced ` COMMIT _ TIMEOUT _ MINUTES ` with ` Long . MAX _ VALUE ` in ` waitWithDeadline ` method calls to
replaced instances of ` new Date ( ) ` with ` Instant . now ( ) ` and ` Date . from ( moment ) ` with ` Instant
refactor BytesRef class to improve code readability to enhance maintainability and facilitate future updates
added a toast message to indicate that the YouTube Player does not work on Lollipop yet to improve user feedback by informing users about the
added error handling for unterminated dollar and named dollar quotes in the parser to ensure proper error reporting for unterminated dollar and named dollar quotes
added a null check for mVibrator before checking if it is available to prevent potential NullPointerExceptions when mVibrator is not available
updated table borders and added arrowhead and arrowtail colors for primary and unique indexes in DotRenderer . java to enhance the visual appearance of table cells
added a method to check if a parameter is encoded in HiveConf and updated output formatting in SetProcessor to improve flexibility in handling encoded parameters in Hive
pdfbox - 4892 : catch stringindexoutofboundsexception , a suggest by valerybokov
refactor X509Certificate class to improve certificate validation logic to enhance security and reliability of certificate validation
refactor WavefrontConfig to use a new method ` getUriString ` for URI validation and add a new test class ` WavefrontConfigTest `
replaced BitmapLruCache with NetworkedCacheableImageView and added image loading functionality to improve image loading efficiency and compatibility with newer Android versions
removed the ` child ` parameter from the ` LauncherAnimUtils ` method calls across multiple classes to simplify method signatures and improve code readability
added a constant for the gdx controllers version and updated dependency bank references in BuildScriptHelper and DependencyBank classes to ensure compatibility with newer controllers
refactor LaunchedURLClassLoader to improve code readability to enhance maintainability and facilitate future updates
updated DataSourceHealthIndicator to use DataAccessUtils for querying results to ensure proper data retrieval and error handling for invalid column count
add no - cache header to layout tag so that it do n ' t cache .
updated warning message format in ZkController . java to use Locale . ENGLISH to ensure consistent message formatting across different locales
refactor SolrQueryParser constructor to accept an Analyzer parameter to enhance flexibility by allowing custom query analyzer configuration
updated copyright year from Copywrite to Copyright Year in multiple Java files to ensure compatibility with the Universal Gcode Sender license and provide clearer copyright
removed an unnecessary semicolon in MainTest . java to streamline code by eliminating unnecessary lines
refactor TypeContributions class to improve code readability to enhance maintainability and facilitate future updates
added a conditional check for VoidColumnVector in VectorizedBatchUtil . java to ensure proper handling of VoidColumnVector instances
updated the method call from templateName to req . getName ( ) in StatementGenerator . java to ensure proper retrieval of the request name from the request object
removed the isTypeMatch method from AbstractConfig . java to simplify the code and improve readability
[ java ] add sessiondecorator . offer ( publication , correlationid , timestampMs , directbuffer , buffer , offset , length ) .
renamed methods ` trustAllXForwardedRemoteAddressResolver ` to ` trustAll ` and ` maxTrustedIndex ` in ` XForwardedRemote
added a new annotation ` NoBootstrap ` and modified ` BootstrapInserter ` to check for annotations before building ` BootstrapStaticBlock ` to ensure that
hbase - 24265 tabledescriptorchecker should use value from tabledescriptorbuilder for maxfilesize , flushsize , and memstoreflushsize
corrected variable name from ' maxCommits ' to ' requestedCommits ' for clarity to improve code readability and maintainability by using a
added InvocationTargetException to main method signatures and invoked SwingUtilities . invokeAndWait in bug6794831 . java to improve error handling and ensure proper invocation
added a new constant ` BUILD _ ID ` and refactored build metadata handling in ` CachingBuildEngine ` to improve code clarity and
removed unused imports from TransactionCapsule . java to streamline code and improve maintainability
removed redundant call to markAsDone in HttpProtocol . java to streamline code and improve readability
added import for TezConfiguration and a static instance of defaultConf in TezConfigurationFactory . java to enable the creation of TezConfiguration objects
added null check for keyPurposes in TimestampedSigner . java to avoid potential NullPointerException when keyPurposes is null
removed unnecessary conditional check for mIsVisible in CustomPlaybackOverlayFragment . java to improve code readability and maintainability
added a forget method to stop the most recent sound and added a null check for recentSounds in OpenALAudio . java to improve robustness
added handling for position discontinuity and newly rendered first frame states in SimpleBasePlayer . java and a corresponding test in SimpleBasePlayer
added decimal decimal units for various decimal values in NumberAxis . java to ensure accurate representation of decimal values in the NumberAxis
refactor ` TargetGraphAndBuildTargets ` to use ` of ` instead of ` builder ` in multiple files to improve code clarity and maintainability
removed the IndexFileNameFilter class and its implementation from IndexFileDeleter and IndexWriter to streamline the code by eliminating unnecessary dependency on IndexFileName
add a new configuration option to disable the texture stitcher for ladders in ForgeDummyContainer . java and update related logic in ForgeHooks
added a compression level parameter to multiple constructors and methods in ApkBuilder , SignedJarBuilder , and ApkBuilderStep classes to allow for
added a new test method ` shouldIncludeStaticFields ` to verify the inclusion of static fields in a class to ensure that static fields are correctly included
added support for BYTES data type in FieldSpec , MetricFieldSpec , and SingleValueSet classes to enhance data handling capabilities for BYTES data
updated error handling to use EOL instead of hardcoded string concatenation to improve readability and maintainability of error messages
replaced ` id . hashCode ( ) ` with ` Objects . hashCode ( ) ` in ` Trade ` and ` KucoinDealOrder `
added CacheManager support and updated imports in SpringDataJPAJoinFetchPaginationTest , SpringDataJPAJoinFetchPaginationConfiguration , and Forum
updated property names from " german . pronunciation . featuredefinition " to " . pronunciation . featuredefinition . " and
added a condition to return a FormBody . Builder if postBody is empty in SimpleHttp . java and updated test cases in TestHttpPlugin .
added an ExecutorService to the OkHttpClient dispatcher in ClientSideSlb . java and created a test for it in ClientSideSlbTest . java
added conditional logic to set the V2 based on the flip - y orientation to ensure correct positioning based on the flip - y orientation
fix defaultdiscoveryservice to throw invalidconfigurationexception instead of hazelcastexception
added null check for contextPath and initialized it to " NA " if it is null to ensure proper context path handling and prevent potential NullPointerExceptions
[ jbrules - 2576 ] fix reload of class after reinitialization of class
added a new serialization header constant B _ TREE _ MAP _ ROOT _ HEADER in BTreeMap . java and initialized it in SerializationHeader .
added support for both ` prefix _ header ` and ` precompiled _ header ` in ` AbstractCxxSourceRuleFactory ` and ` AbstractC
added security context handling to the ImageWatched class to enhance security by allowing access control during image updates
changed access modifiers of findNextIndex method and modified import statements in ObjectMap , ObjectSet , and OrderedMap classes to enhance encaps
changed the variable ` isDirect ` from ` true ` to ` false ` in ` VertexBufferObject . java ` to ensure proper handling of the
removed redundant return statement in the MaryClient class to streamline code for better readability and maintainability
added return statements to localToAscendantCoordinates and localToDescendantCoordinates methods in Actor and Group classes to provide access to the coordinates returned
pdfbox - 5764 : set chunkSize to limit instead of capacity , a suggest by valerybokov
added null check before calling removeCloseHook in VertxImpl . java to avoid potential NullPointerException when context is null
updated border spacing calculations in CellLayout and DeviceProfile classes to ensure correct spacing based on container type and layout behavior
refactor value parsing to use a new ValueNumeric class for better readability to improve code maintainability and reduce redundancy in parsing numeric values
added a condition to return a deferred authentication if the response is not a login or error page to ensure proper handling of deferred authentication scenarios
updated command - line arguments from " module - start - ini = " to " -- add - to - start " in StartArgs . java
added a default partition value to the DynamicPartitionFileRecordWriterContainer to ensure proper handling of null values to avoid potential NullPointerExceptions
[ hotfix ] [ stream ] add nullability check for streamoperatorfactory
updated return statements in DefaultArtifact . java to use conditional checks for classifier and artifact IDs to improve code readability and maintainability by reducing unnecessary
camel - 14263 : camel - kafka : fix the issue of offset - get - state be call twice for a topic .
added error handling for NoClassDefFoundError in AnnotationSubstitutionProcessor . java to provide clearer feedback when a class can not be loaded due to
updated the constant name for GMAIL _ NOTIFICATIONS from GMAIL _ NOTIFICATIONS _ ENABLED to ENABLE _ GMAIL _ 
refactor CryptoKey and CryptoKeyOrBuilder classes for improved readability to enhance maintainability and facilitate future updates
updated the expected message count in LumberjackMultiThreadTest to use a concurrency level of 4 instead of 5 to improve test reliability by reducing the
added a condition to check if the player is not dead before proceeding with health checks to ensure player health checks are only performed when the player is
refactor Exchange class to improve code readability to enhance maintainability and facilitate future updates
updated API key and secret key descriptions in UpdateUserCmd . java to ensure that the user API key must be specified with the API key and
replaced switch statements with conditional checks for provider types in MfaProvider , JdbcMfaProviderProvisioning , and IdleTimer classes to improve code read
refactor AbstractMetaDataExportMojo to improve code structure to enhance maintainability and readability of the code
added SQLIntegrityConstraintViolationException handling in Hive . java to ensure that tables are dropped only when used by materialized views are used
rename ` githubAccessToken ` to ` gitHubAccessToken ` in ` GitHubMilestonePlugin . java ` to improve clarity by using a more descriptive
added a new file ` RoboExecutorService . java ` that extends ` org . robolectric . util . concurrent . ` . RoboExecutorService ` to
added functionality to manage subgroups in the group tree view based on the group ' s root state to enhance user experience by allowing groups to be added
rename ` buildServiceNameAndSpanName ` to ` buildServiceAndSpanName ` and update its usage in ` BraveClientExecutionInterceptor ` to improve
updated the ` TestDynamicNumberOfGCThreads ` test to verify the successful execution of the ` output ` to ensure that the ` output ` is properly
changed return types of getHostFlavorMap ( ) and getAllPossibleHostFlavors ( ) to ImmutableSet < Flavor > and ImmutableSet < Flavor >
updated SQL creation logic in CreateTable and CreateTableDeParser to utilize PlainSelect for better handling of create options strings to improve code clarity and
updated the background drawable initialization in ChatViewerFragment to set the alpha value of the background to ensure the chat background has a transparent alpha value of 64
test ( refactor ) : migrate ctiteratortest to junit 5
added clear ( ) method calls in CharTokenizer , KeywordTokenizer , and StandardTokenizer classes to ensure proper clearing of tokens and improve code clarity
add a new test file ` ASTInitializerTest . java ` to verify that ` ASTInitializer . class ` does not crash on block statements to ensure
updated StateMachineConfiguration , StateMachineFactoryConfiguration , and StateMachineFactoryConfiguration classes to use generics for configurers and configurers to improve type
simonstewart : do n ' t try to find locator that start with ` ` link = ' '
updated fraction formatting in StringConverter to use Integer . MAX _ VALUE instead of Integer . MIN _ VALUE and modified test cases in StringConverterTest to
removed redundant code and simplified the return statement in AggregateLifecycle . java to streamline code and improve readability
updated touchable insets setting from TOUCHABLE _ INSETS _ CONTENT to TOUCHABLE _ INSETS _ REGION to
removed conditional check for ' ~ ' in FencedCodeBlockParser . java to streamline code by eliminating unnecessary checks
added socket timeout functionality to the Driver class to allow users to specify a timeout for socket read operations
added a sleep delay of 500 milliseconds in ElementAttributeTest . java to ensure proper handling of InterruptedExceptions during test execution
updated BufferedReader initialization to use UTF - 8 encoding for input stream to ensure proper handling of character encoding in the input stream
refactor List class to improve code readability to enhance maintainability and facilitate future updates
added URI and Path constructors to AsyncFileImpl and created a new test class AsyncFileImplTest to improve error handling and ensure proper context handling
added API annotation to CucumberEngineExecutionContext and updated its visibility in CucumberTestEngine to ensure that the engine execution context is marked as
add null check for physicalNetworkId and hostId in NuageVspManagerImpl . java to improve robustness by avoiding null pointer exceptions when
renamed the method ` retryUploads ` to ` retryFailedUploads ` and updated related logic to improve clarity and correctness in handling failed upload
updated Java version from 52 to 53 and removed getJavaVersion ( ) method from ConstantPoolTagTests . java to ensure compatibility with the latest Java version
make compiler . compile ( ) more robust .
added a method ` removeAllHeaders ( ) ` to ` AsyncHttpClient ` that clears client headers to ensure proper cleanup of client headers in the Async
replace Vector with List and replace elementAt with get for inputFileName , outputFileName , and arguments to improve performance and reduce unnecessary type casting
updated the default grid column from 4 . 0 f to 3 f in AppPreferencesImpl . java to adjust the grid size for better user experience
added a condition to check if the table is not for view creation before checking if the table is defined to ensure that the condition is only applied when
updated regex pattern for date matching in TestHS2HttpServer . java to improve readability and consistency of date matching logic
added error handling to the ` asObject ` method in ` GraphPrinter . java ` to handle potential ` Throwable ` to improve robustness by preventing
updated driver string from IE to FIREFOX and added a new test method for accessing pages with an insecure SSL certificate to ensure
updated byteOffset calculation in ByteBlockPool . java and added a test for too many allocations in TestByteBlockPool . java to ensure correct
removed static fields from ` FeatureVectorEncoder ` and updated string formatting in ` InteractionValueEncoder . java ` to improve code readability and maintain
added error handling to the TcpTransport class to improve robustness by handling unexpected exceptions gracefully
added @ SuppressWarnings ( " serial " ) annotation to PApplet . java to suppress warning about serial serialization in the application
updated OcamlDebugLauncher to extend AbstractBuildRule instead of AbstractBuildRuleWithResolver and removed SourcePathResolver dependency to simplify the class hierarchy
add option dialog for save / discard changes in JabRefFrame to enhance user experience by allowing users to save / discard changes to the main window
added response type validation and authentication checks in OAuth20DeviceCodeResponseTypeRequestValidator , OAuth20AccessTokenEndpointController , and NexmoSmsSender
added a call to ` chk ( index , 1 ) ` in ` DrillBuf . java ` to ensure that the correct index is used for
added a ` Class < ? extends InputFormat > ` parameter to the ` initTableMapperJob ` method in ` TableMapReduceUtil ` to
removed redundant call to append ( jrubyClasspath , testClasspathElements ) in AbstractJRubyMojo . java to streamline the code by eliminating unnecessary
add language access check in LLVMPolyglotEval and implement a test for it in PolyglotBuiltinTest to ensure proper exception handling
added a deprecated warning for the reserve commit duration and updated related logic in ReplicationHandler . java to ensure that the reserve commit duration is mutually exclusive
renamed ` cacheVariableName ` to ` cacheForeignKey ` and updated related references to improve clarity and consistency in naming conventions
change the type of ` handles ` and ` keyBytes ` from ` long [ ] ` to ` Object [ ] ` in ` ECKeyPairGenerator `
[ hotfix ] [ runtime ] implement suspend method in restarting and statewithexecutiongraph .
replaced the singleton instance of ` RotationTouchHelper ` with a direct instantiation of ` RotationTouchHelper ` to simplify the initialization process and improve
refactor UniFiControllerCache to use Stream . ofNullable for handling port table and port overrides to improve code readability and maintainability by
updated method signatures to use ` unique _ thread _ id ` instead of ` lwp _ id ` and introduced a new method ` getThreadFor
refactor offer removal logic to use an Optional for better clarity and efficiency to improve code readability and maintainability by reducing redundancy
refactor TLS protocol handling to use constant values instead of hardcoded strings to improve maintainability and reduce potential conflicts with different SSL protocols
updated MockitoMethodInvocationControl and SystemClassUserTest to handle different mock types more effectively to ensure correct behavior of method invocations for different mock types
updated NotLoadedException constructors to include PartialDatabaseObject instead of DatabaseObject to enhance error handling by providing more context for database objects
replaced the import of DisplayUtils with a call to getIntent ( ) . putExtra ( EXTRA _ FILE , null ) in FileDisplayActivity . java
added error handling for file renames and improved error logging in StoreDirect and StoreWAL classes to enhance robustness by ensuring old compaction files are
removed duplicate calls to stopSwipePipToHome in AbsSwipeUpHandler . java and updated method calls in SystemUiProxy . java to stream
added a hidden flag to CommandArgumentDefinition and its getters in LiquibaseCommandLine and CommandArgumentDefinition classes to enhance command argument handling by allowing
updated the remote address in LoggingKafkaPluginTest from 8090 to 9092 to ensure the test connects to the correct IP address
[ geos - 8431 ] add getsld ( ) method to styleinfo to allow to retrieve the sld from style group
added permission checks for launcher activities and modified method signatures in InstallShortcutReceiver and Launcher classes to ensure proper handling of malicious intents and improve code
added ` getId ( ) ` and ` setId ( int id ) ` methods to ` TiledMapLoader ` , ` TmxMapLoader `
refactor Manager class to improve code readability to enhance maintainability and facilitate future updates
updated JDBC connection URL to include a version parameter in JDBCExample . java and added a new Session . Builder in SessionExample . java to enhance database
added schemas and includeSchema properties to LiquibaseGenerateChangeLogMojo to enhance change log generation by allowing users to specify schemas and include
removed redundant putIfAbsent call in JmxRegistry . java to simplify the code and improve readability
[ flink - 20535 ] [ benchmarking ] add log level for singlebenchmarkrunnerexception in plannerbenchmarkrunner
removed the ' final ' modifier from the ` doPutRecord ` method in ` AbstractCacheRecordStore . java ` to enforce immutability of
updated path formatting in Tools . java and FileSelectorFragment . java to ensure consistent directory structure and improve code readability
added tests for handling large and slow response content in FastCGIProxyServletTest . java to improve test coverage for GET requests with large and slow
added a call to start the ReadInteractionsService to enable interactions functionality in the MarkReadService
added a conditional check for lintClassfile before logging warnings for annotation method not found to ensure warnings are only logged when lintClassfile is
added a default value for the mail . smtp . port configuration in Email . java to ensure a default value of 25 for mail server connections
refactor SSL factory renewal logic to use a fixed - delay retry strategy to improve reliability of SSL factory renewal process
updated date format from HH : mm : ss ' Z ' to HH : mm : ss ' Z ' in ObjectMapperProvider . java to
updated the error message in SpyingOnRealObjectsTest to clarify the reason for mocking a private class to improve clarity and accuracy of the test
added a new boolean variable ` isEndsOnNL ` and updated conditional logic in ` InlineBoxing ` and ` LineBox ` classes to
updated the initialization of filePathString to handle null paths gracefully to improve robustness by preventing potential NullPointerExceptions
added import statement for DocCollection in TopicStream . java to utilize DocCollection functionality in TopicStream . java
refactor NinjaServletContextTest to use createHttpServletRequestInputStream instead of ByteArrayInputStream and add a new test for Windows 1250 parameter handling to
added a property named " management . endpoints . web . exposure . include = * " in AbstractCasEndpointTests . java to enhance configuration flexibility for
added a check to ensure the current graph is a dynamic graph before proceeding to prevent runtime errors when the current graph is not a dynamic graph
added a new annotation ` value ( ) ` and created ` EagerInitFactory ` and created a new class ` EagerInitFactory ` to
added support for suppressing exceptions in JsonPath expressions to enhance error handling by allowing users to specify which exceptions are suppressed
removed redundant call to ControllerLeaderLocator . create ( _ helixManager ) in HelixServerStarter . java to streamline the code by
updated usage messages in CLHSDB , HSDB , and HSDB classes to include additional help options to enhance user experience by providing more
removed redundant overrides for configureChunkProvider method in FaultTolerantStepFactoryBean and simplified item listener registration in SimpleStepFactoryBean to
[ beam - 11346 ] remove deprecate write class , since it be no longer in use .
replaced direct calls to ` getAccessibilityManager ( ) ` with ` getAccessibilityManagerInstance ( ) ` in ` ShadowAccessibilityManagerTest . java `
updated import statements and added notification tracking in FlutterInitializer . java and added GROUP _ DISPLAY _ ID constant in Analytics . java to enhance
removed the ` SourcePathResolver ` parameter from multiple classes to simplify the class hierarchy by eliminating unnecessary dependency on ` SourcePathResolver `
refactor PostgreSQLDatabaseConnector to introduce PostgreSQLEnumDataTypeHelper and introduce a new class PostgreSQLEnumDataTypeHelper
updated log path comparison from " logpath / " to " logpath " using File . separatorChar " to ensure consistent file path formatting across different
rename ` getMapLocalWork ( ) ` to ` getMapRedLocalWork ( ) ` across multiple classes to improve clarity and consistency in naming
added exception handling for unsupported index tables in HiveMetaStoreClient to ensure proper handling of unsupported operations for index tables
added a check to update disabled flags for VISIBLE in RecentsView . java to ensure the actions view is disabled when visibility is not visible and
added a condition to set a specific syntax highlighter for non - Windows operating systems to ensure correct syntax highlighting for non - Windows environments
added a method ` addOptionalLocalVariable ` to ` BugInstance ` and updated references in ` CrossSiteScripting ` to utilize it to enhance
replaced ` toUri ( ) . getRawPath ( ) ` with ` toString ( ) ` in ` HadoopPinotFS . java ` to
removed redundant whitespace in the removeCaptureListener method call to improve code readability and maintain consistency
changed the initialization of the _ metaDataComplete variable from true to false to reset the metaDataComplete state to false
refactor the ` removeTaskTarget ` method to use ` THREAD _ POOL _ EXECUTOR ` and update bitmap creation logic to
added environment variables for the " RELEASE " flavor in JsBundleGenrule . java and corresponding tests in JsBundleGenruleDescriptionTest
updated type checking logic in Lower . java and added a new class T6500701 . java with a test method to improve type safety and
added unit tests for handling crlf newlines in comments and javadocs in multiple classes to ensure correct handling of newlines in javadocs
added hubMode property to AbstractLiquibaseChangeLogMojo and updated its usage in AbstractLiquibaseMojo to allow configuration of the hub mode
removed unnecessary null checks for item in JsrFaultTolerantStepBuilder and removed unnecessary null check in JsrChunkProcessor to simplify
added error handling for missing linkDb in IndexerMapReduce . java to improve robustness by handling cases where linkDb is not found
replaced the method ` setIndexerThreadPoolMethod ` with a direct method call to ` IndexWriterConfig . setIndexerThreadPool ` to simplify the code and
changed the address format from " sms : / / " to " sms : / / " in GameCanvasImplementation . java to standardize the address
refactor MapJobExecutionDao to utilize a new copy method for job executions to improve code readability and maintainability by centralizing job execution
added a new file ` DownloadTest . java ` to implement a test for uploading images to facilitate testing of image uploads in the application
updated language handling in Format , DefaultTrackSelector , Util , and HlsMasterPlaylistParserTest to ensure consistent language normalization and improve test accuracy
updated UDF arguments in GenericUDFRound . java to include UDFArgumentTypeException for better error handling to ensure correct argument types are thrown
added null check for selectedVersion before processing dependency tags in ManageDependencies . java to avoid potential NullPointerException when selectedVersion is null
removed multiple existing AntPathRequestMatchers from SecurityConfig . java to streamline the request matching process by eliminating redundancy
added JUnit @ Ignore annotation to TestConcurrentDppInserts . java to temporarily disable the test due to potential issues
added a condition to check if the concrete class is the same as the class element before creating the bean definition writer to avoid potential NullPointerExceptions when
added an @ Ignore annotation to the HttpClientRedirectTest class to temporarily disable the test due to potential issues
[ openwebnet ] fix openwebnetthermulationhandler and openwebnetthermostgulationhandler to use schedulewithfixeddelay
removed unnecessary try - finally blocks in AprEndpoint . java to simplify the code and improve readability
deleted the SunToolkitSubclass . java file to the class is no longer needed for the current implementation
updated translation handling in DefaultRenderableSorter and added a new getTranslation method in Matrix4 to improve translation calculation accuracy and ensure proper handling of rotation and
added a test method to register wrapper handlers before primitive types in TypeHandlerRegistryTest . java to address issue # 165 and ensure proper registration of
added a method to convert a BufferedImage to a RGB image2 based on alternate color space to enhance color conversion functionality for better image processing
updated API URL and IMAGE _ URL constants to use BuildConfig . WIMEDIA _ API _ HOST instead of API _ URL to streamline
camel - 14263 : camel - health - add a fake health check to the camel - platform - http component .
add null check for blockPos before accessing it in EntityThornChakram . java to prevent potential NullPointerException when accessing blockPos
added a test for altering a table with indexes extend primary keys in AlterTableWithViewsIT . java to ensure that indexes extend primary keys correctly
replaced the initialization of ` offset ` with ` off ` in ` FileFloatSource . java ` and added conditional assertions in ` TestFunctionQuery .
removed the ID field from the MongoRecordReader to remove unnecessary fields from the database
added dispose ( ) method to YeelightHandlerBase , DeviceBase , and WifiConnection classes , and updated connection handling in WifiConnection
added handling for " AUTO _ INCREMENT " syntax in Parser . java and created a new test table in TestCompatibility . java to ensure
added functionality to manage existing shared index informers in SharedInformerFactory and updated related tests in SharedInformerFactoryTest to enhance resource management and improve test
cloudstack - 5392 : fix npe when save template details for private template
refactor color initialization logic in ShadowBitmapFactory to use RobolectricBufferedImage instead of a hardcoded Point to improve code clarity and
removed deprecated methods from LauncherProvider , LauncherSettings , and LauncherSettings classes to streamline the code and eliminate outdated functionality
[ jbrules - 2576 ] add jbrules / example / broker / data / stocktickstream . dat
added legendTop and legendBottom variables to the PieChart class to ensure proper positioning of the legend components in the pie chart
added a check to return early if the world transform is zero to avoid unnecessary processing when the world transform is zero
added a new file ` MaryScriptCreator . java ` to create a file ` . txt ` based on user input to facilitate the creation of a
added a session attribute for the remote source host in ListenHTTPServlet . java to ensure proper handling of the remote source host in the flow file
refactor compaction logger initialization and file deletion logic in LevelCompactionTsFileManagement . java to ensure proper resource management and prevent potential memory leak
updated attribute names from " xlink : href " to " href " in ComponentDescription . java to improve clarity and consistency in URL handling
camel - 14497 - camel - aws2 - s3 : add timeout checker to s3 producer
hbase - 26165 addendum : add isclustershutdown ( ) method to the assignmentmanager to check if the state is CLOSED and
added null check for span before logging span information in Slf4jSpanLogger and DefaultTracer classes to avoid potential NullPointerExceptions when span is
modified the option addition to trim whitespace before adding the active option to ensure the active option is properly trimmed before adding it to the config
added depth effect preference and updated wallpaper zoom out logic in DepthController . java to enhance wallpaper zooming behavior based on user preferences
updated the assertion in OverseerTest to verify the success count of the overseer to ensure the correctness of the overseer ' s stats
refactor kernel version handling in LinuxFileStore . java to return true instead of false to simplify the return value of getKernelVersion ( ) and
refactor ExecConstants class to improve code readability to enhance maintainability and facilitate future updates
added ScreenRecordRule import and annotation to ThemeIconsTest . java to enable screen recording functionality for testing purposes
added a method ` setScanAttributeForPaging ` to ` TableSnapshotResultIterator ` and a static method ` setScanAttributeForPaging ` in
added a check for ` lowRange ` before setting it in ` Request ` and ` RequestV2 ` classes to ensure that the range is within
changed access modifiers of keySizeEstimator and valueSizeEstimator from private to protected in AbstractCachedSource . java and added a debugCacheSize ( )
updated the method call from ` getUuid ( ) ` to ` getZoneUuid ( ) ` in ` HostJoinDaoImpl . java ` to
updated content type header in BaseLivyInterpreter to use MediaType . APPLICATION _ JSON _ UTF8 _ VALUE and added UTF - 8 encoding in Li
replaced direct removal of zfs with a method call to remove to simplify the code and improve readability
replaced the ` obj ` variable with a ` json ` string in ` HttpRequestBuilder . java ` to simplify the code and improve readability by using
updated the polling mechanism for hard commit monitoring in SoftAutoCommitTest . java to allow more time for hard commit tests to complete before proceeding
added exception handling for listener calls in SelenideLogger and updated test cases in SelenideLoggerTest to improve robustness by catching runtime
refactor multiple Dial - related classes to improve code organization to enhance maintainability and readability of the codebase
updated logging statements in SyncQueue . java to improve clarity and consistency to enhance code readability and maintainability
updated the version of the Ryuk container from 0.1 . 0 to 0.1 . 1 to ensure compatibility with the latest versions of the Ryuk
replaced ` getBootstrapPaths ( ) ` with ` getAdditionalBootstrapPaths ( ) ` in ` BootClassLoaderHook . java ` and added a new
removed redundant check for the patchy library path in FMLClientLaunchProvider . java to simplify the code and improve readability
replaced the instantiation of ` YarnClusterDescriptor ` with ` createYarnClusterDescriptor ` in ` YARNITCase . java ` to simplify
refactor LocalMapStatsProvider to utilize ProxyService for stats management to improve code clarity and maintainability by reducing redundancy
deleted the AllTests . java file to remove unused test classes from the project
added constants for Unicode character non - breaking hyphens and zero - width spaces in AbstractWordConverter . java to improve code readability and maintainability
added a new test class ` ShouldNotStarveMemoryOnLargeStackTraceInvocationsTest ` to ensure that large stack trace invocations do not star
updated the method call from ` getResultMappings ( ) ` to ` getResultMappingsForRowKey ( nestedResultMap ) ` to ensure the correct mapping
added a flag ` eventHandled ` to the ` UIText ` class to indicate that the event has been handled during text processing
deleted the Controller annotation and updated the Weldby class name from Weldby to WeldModule to streamline the codebase by eliminating unnecessary
added a boolean flag ` monitorCaptureGroupsInEmptyCheck ` and modified conditional checks in ` TRegexBacktrackingNFAExecutorNode ` to
added a protected field ` liquibaseProLicenseKey ` to the ` AbstractLiquibaseMojo ` class to provide access to the ` liquibaseProLicense
refactor ` setMeasuresHierarchyMemberReader ` method calls into a separate method ` setMeasuresHierarchyMemberReader ` to improve code readability
added a new ` ValueUpdateHandler ` to manage debug information updates in the ` SubstrateOptions ` class to improve debugging information management by allowing
refactor MondrianProperties class to improve code readability to enhance maintainability and facilitate future updates
added ` getFriendPaths ( ) ` method to ` KotlinLibraryDescription ` , ` KotlinLibraryDescription ` , and ` Ko
added aliases " BATK BATAK , BRAHMI , BRAHMI , MANDAIC , and modified the main method
updated equality checks in ExecutionCommand and added a new method in StageUtils for converting JSON strings to ExecutionCommand to improve code readability and maintainability
refactor Mockito class to improve code readability to enhance maintainability and facilitate future updates
refactor OCFile class to improve code readability to enhance maintainability and facilitate future updates
added a toString ( ) method to the SystemScope class to provide a readable string representation of the SystemScope object
added handling for percentage and number types in CSSParser . java to improve error handling and provide clearer error messages for invalid parameters
added tests for the reverse scan functionality in LocalIndexIT . java and implemented a new test method in LocalIndexReverseScanTest . java to ensure
replaced ` InstrumentationRegistry ` with ` ApplicationProvider ` in ` BaseAndroidTestCase ` and updated test assertions in ` BackupHelperTest ` to improve test
updated message formatting in multiple activity classes to use a more descriptive string resource to improve readability and maintainability of the code
updated condition checks in RendererUtilities and added a new test in RendererUtilitiesTests to improve code readability and ensure correct behavior of live item upper bound
refactor KrakenStreamingAdapters to use ArrayNode for asking and bid lists instead of Iterators to improve type safety and maintainability of the
added error handling for adding the same column twice in FileContentProvider . java to improve robustness by logging a warning when a duplicate column is added
removed the println statement from AsyncServletIOTest . java to clean up the code and improve readability
added hash table load factor and updated online data size calculations in ConvertJoinMapJoin . java to improve data size calculation and ensure accurate online data size
updated the ` buildView ` method to accept a ` Context ` parameter instead of ` LayoutInflater ` to enhance flexibility by allowing dynamic background resources based on
added a ` Consumer < Authentication > ` to ` SecurityMockMvcResultMatchers ` and corresponding tests in ` SecurityMockMvcResultMatchersTests
cloudstack - 5292 : set vpcid to null in setgatewaynet ( vpcid )
[ flink - 10955 ] [ test ] disable flink savepoint test when version be 11.0
changed access modifiers from int to @ annotation in multiple Java files to enhance encapsulation and improve code readability
updated loop condition to check if the action index exceeds the size before executing the action to ensure the action only occurs when the index does not exceed the
changed the import statement of ` BaseExchange ` to ` BitmexExchange ` and changed the constructor of ` BitmexStreamingExchange ` to
[ ds - 4076 ] add virtual metadata test for relationship with parent and child orgunit
added null checks for geometry and numTris in LodControl . java to avoid potential NullPointerExceptions when the spatial is null
updated lastTokenFiltered state in ConditionalTokenFilter and added new classes for LimitTokenOffsetFilter , LimitTokenCountFilter , and LimitTokenPositionFilter
refactor UnsafeStoreNode to use a local variable for UnsafeStoreNode and storeFieldNode to improve code readability and maintainability by
replaced the method call from ` super . putAddress ( base + offset , value ) ` to ` io . putAddress ( base + offset ,
added an assertion to verify that the cas event repository is empty to ensure that the event repository is not loaded when no events are found
removed unnecessary ` attributeTemplateName ` parameter from ` AuthenticationAttrProcessor . java ` to streamline attribute processing by eliminating unnecessary variables
added null checks for the specified key in MacOSXPreferences and created a new class RemoveNullKeyCheck to ensure that the key is not null
removed the ` setTypeface ` method from the ` CodenameOneTextPaint ` class to streamline the typeface setting process by throwing an exception
added an ` open ` method to ` AzurePinotFS ` , ` LocalPinotFS ` , and ` HadoopPinotFS `
removed the deprecated method ` fail ` from the ` WebDriverRunner ` class to streamline the code by eliminating unnecessary functionality
removed unnecessary conditional check for item size in SolrRequestParsers . java to simplify the code and improve readability
refactor DefaultResultSetHandler to remove the ` ResultObject ` class and update related method calls to simplify the code and improve readability by eliminating unnecessary
updated SQL string formatting in CreateTableGeneratorTest . java to ensure proper SQL syntax for table creation
refactor filter mode handling in VectorizationContext . java to improve clarity and functionality to enhance the vectorization logic to support filtering conditions
updated the type of moveSelectorConfig initialization in ExhaustiveSearchPhaseConfig . java to ensure proper type handling for MoveSelectorConfig
replaced the creation of ReorganizeTableStatement with a direct modification of modifyDataTypeStatement to streamline the code by eliminating unnecessary instantiation
updated cluster name retrieval from " cluster _ name " to " default _ cluster _ NAME " and adjusted startup retry interval from 30 seconds to 3 seconds
updated exception handling and logging in PeerEventListener and PeerGroup classes to improve error handling and provide clearer logging for peer connection failures
added style handling based on string strings in Nano . java to ensure correct style is applied based on the specified style strings
use AdventureNBTConverter for nbt handling in MCEditSchematicReader , SpongeSchematicReader , and DataFixer classes to improve code
updated return message from " No # toString ( ) on String " to " No # toString ( ) on String " to clarify the purpose of the
updated memory allocation from 64m to 32m in TestThreadFailure . java to optimize memory usage for better performance
refactor retryFailed method to return FailureContext instead of int and add DataProviderRetryAnalyzer and DataProviderRetryTest classes to improve error handling and
updated the return value from tokens [ 0 ] to tokens [ bandwidth ] in BucketStateIEEE754 . java to correctly represent the bandwidth value
added multiple methods ` selectPopUp ` , ` deselectPopUp ` , and ` captureNetworkTraffic ` to ` WebDriverBackedSelenium
replaced the ` doPrintEntry ` method with a direct call to ` doPrintEntry ` to simplify the code and improve readability by eliminating unnecessary
removed unnecessary whitespace in TaskAsyncCallTest . java to improve code readability and maintain consistency
added opacity , shape , and background properties to Dialog and Frame classes to ensure proper handling of dialog states and prevent illegal component state issues
changed the ` state ` variable from private to private final in ` DefaultProjectFilesystem . java ` to ensure immutability of the ` state `
refactor Redis connection factory to utilize RedisStandaloneConfiguration for configuration handling to improve flexibility in handling Redis sentinel configurations
added handling for lastSeenDelayedMessage in ChatRoomJabberImpl . java to improve handling of delayed messages in chat rooms
replaced instances of ` new Callback . Adapter ( ) ` with ` NOOP ` in ` ResponseNotifier . java ` to simplify the notification process by
refactor FileOperationsHelper , OperationsService , and FileOperationsService to use an Intent for creating share operations to improve code organization and maintainability by
removed redundant check for non - injected field in BeanDefinitionInjectProcessor . java and added @ Inject annotation in FieldPropertyInject . java to simplify the code
refactor loop boundaries in ClassicPlotManager to use a variable for the minimum build height to improve code readability and maintainability by using a consistent
added null check for NullPointerException in SmackIntegrationTestFramework . java to ensure proper handling of NullPointerExceptions in test cases
added a boolean parameter ` readLinked ` to the ` readDirectory ` method in ` EXIFReader ` and updated related tests accordingly to enhance functionality
added support for ENABLED _ LS mode in VersionTargetGraphMode and updated executor assignment logic in VersionedTargetGraphCache to ensure correct execution
added checks for video formats in DLNAResource . java to ensure proper handling of video formats in the resource parsing process
refactor AutoMlClient methods for improved readability to enhance maintainability and facilitate future updates
added a boolean flag ` load ` in ` LwjglNativesLoader ` and modified the ` load ` method in ` Lwj
added support for Unicode escape handling in CSV processing to enhance CSV processing flexibility by allowing users to specify custom escape characters
updated grant type validation in ClientRegistrations and updated corresponding test cases in ClientRegistrationsTests to ensure that only Authorization Code grant types are returned and
updated exception handling in ` Throwable ` and added initCausePlumbing ( ) ` method in ` SuppressedExceptions ` to improve error
added query execution and assertions in DerivedTableIT . java and updated ClientAggregatePlan . java to use null for limit parameter to improve test coverage
added RSquare mapping in RegressionEvaluator and a corresponding test in StreamExpressionTest to ensure correct RSquare computation in the regression evaluation process
added handling for request header names in ThreadContextMDCServletFilter to ensure proper context attributes are added based on request headers
replaced instances of ` MapWork ` with a direct reference to ` mapWork ` in ` Utilities . java ` to simplify type casting and improve
added methods to retrieve and retrieve folder images in PdfJndiReport , PdfSessionInformationsReport , and PdfJndiReport classes to
updated cache method in JwtIssuerReactiveAuthenticationManagerResolver and added a new test in JwtIssuerAuthenticationManagerResolverTests to enhance cache management
updated ` resource . exists ( ) ` to ` resource . isReadable ( ) ` in ` AbstractScriptDatabaseInitializer ` and added a new test
modified the LLVMInteropType constructor to accept a boolean parameter and modified the get method to accept it to enhance flexibility in handling interop
removed redundant ` MILLISECONDS . sleep ( 500 ) ` calls in ` AbstractBasicMockingIntegrationTest . java ` to streamline test execution by eliminating unnecessary
added a new file KernCrash . java to display a Kern crash title with different font attributes to demonstrate the functionality of Kern crash text
added a failure call to ` fail ( ) ` in ` LinkedHashTreeMapTest . java ` to ensure that the test fails gracefully when
added a method ` getInterfaceAddresses ` to retrieve network interface addresses based on the ` addPrefix ` parameter to enhance functionality for retrieving network interface addresses
cancel housekeeper task when shutdown .
updated condition from ` getClientAddress ( ) ` to ` getSlaveAddress ( ) ` in GroupTransferService . java to ensure correct handling of ack
refactor assertions in Assert . java for improved clarity to enhance maintainability and readability of the code
added a new test class ` Issue247Test ` for testing tree map functionality to ensure correct functionality of tree map creation and retrieval in the database
changed the type of ` results ` from ` Set < CategoryItem > ` to ` Set < String > ` and modified the doInBackground method
updated age validation logic in ValidatorTest . java to check for today and birth years to ensure proper validation of max age for different date types
added GrblLookups for handling alarm and error responses in GrblController . java to improve error handling and provide more informative error messages
added a conditional check for zero screens before returning the workspace scroll format string to improve user experience by providing a clearer display message when no screens are
removed the count parameter from the getTrades method signatures in Bittrex and BittrexMarketDataService classes to simplify the method signature and eliminate
updated console handling and history flush logic in ConsoleReader , MemoryHistory , and MemoryHistory classes to improve readability and maintainability of the code
removed the suffix " . jdk " from the jdkPath assignment in JavaBuild . java to simplify the path construction and improve readability
replaced calls to ` getDescription ( ) . getBuildRuleType ( ) ` with ` getType ( ) ` in multiple classes to simplify code and improve
updated JFCModel constructors to include a logger parameter and modified related methods to accept a Consumer < String > logger to enhance logging capabilities by providing
added a validation check for the tolerance value in MaximumInscribedCircle . java to ensure that the tolerance is non - negative to prevent runtime errors
added methods to create and drop a view in TestUtil and created a test for view privileges in DatabaseMetaDataTest to enhance functionality and ensure proper
added support for expecting stable floats and doubles in NanTest . java to ensure tests are only run on platforms that require SSE support
added a new file DesktopTaskbarUIController . java to implement DesktopTaskbarUIController for managing icons in the taskbar to enhance user experience
added task count listener to SearchModFragment and updated ModItemAdapter to implement TaskCountListener to improve UI responsiveness and ensure proper task management
refactor file handling logic in Files . java to improve code readability and maintainability
replaced ` Set ` with ` Collection ` for managing server interceptors in ` AnnotationGrpcServiceDiscoverer ` and modified ` GrpcServerFactory
updated the ` DomainAwareServicesManager ` interface to extend ` ServicesManager ` and removed the ` @ FunctionalInterface ` annotation to simplify the interface
fix pack info generation to use modid instead of filename .
chore : update gapic - generator - java version to 2.1 . 0 ( # 43 )
added methods ` grow ( ) ` and ` growX ( ) ` to ` Cell ` class to provide methods for setting expand dimensions and fill positions
refactor DefaultInputHandler to use a Map of KeyStroke and ActionListener instead of a Map to simplify the code and improve readability by using a more
added a try - catch block around the exception handling in the receive method to improve robustness by catching potential exceptions during message processing
updated variable names from longs to byte arrays in MetricsMemoryTester . java and added memory fail count check in TestDockerMemoryMetrics . java to
deleted the JobParametersPrototype . java file to remove unused code to streamline the codebase
added a security configuration parameter to the MappingsTable class and updated related classes to support security features in data connection configurations
rename APPLE _ SWIFT _ OBJC _ CXX _ HEADERS to APPLE _ SWIFT _ EXPORTED
changed DUMP _ TO _ FILE from true to false in TestMSPowerPointParser . java to disable dumping functionality in the test
updated the ` codecNeedsEosPropagationWorkaround ` method to accept ` MediaCodecInfo ` instead of ` String ` to improve clarity and
[ java ] : check if log buffer be connect before set the publisher limit in network publication .
added a check for ` options . isNoInfo ( ) ` in the ` BaseFormatter ` class to ensure proper handling of output options when no
updated connection properties and improved SSL handling in PrestoDriverUri to enhance flexibility in handling SSL connections and ensure correct SSL configurations
added DOMOutputOptions to enable XHTML output for the latex element to improve error handling by allowing customizable error output options
refactor assertions in Assert . java for improved clarity to enhance maintainability and readability of the code
added a new parameter ` retained ` and modified related methods in ` Session ` , ` Event ` , and ` Publish ` classes to support retaining
added a test case name " Test1 " to the EventSerializationTest class to ensure proper handling of test cases in the serialization process
added a method ` getName ( ) ` to ` SqlGroupedWindowFunction ` and updated the ` SqlStdOperatorTable ` to use the kind
updated import statement from ` fastparse . core . Parsed ` to ` fastparse . Parsed ` in LatexToUnicodeAdapter . java to ensure
modified AbstractSessionContext to use ReentrantReadWriteLock for SSL _ CTX _ new and modified timeout handling logic to improve thread safety and ensure proper timeout management
updated condition checks in AppModule . java and refactored Watcher constructors in Watcher . java to improve code readability and maintainability
replaced CalciteSqlDialect with AnsiSqlDialect in SqlNodeConvertContext . java to replace CalciteSqlDialect with AnsiSql
change log level from debug to trace in FirmwareUpdateService . java to improve logging clarity for better debugging
added unit tests for handling null values in Date and Timestamp in GetObjectTest . java to ensure proper handling of null values in database operations
refactor string formatting in StringSubject , Subject , and RelabeledSubject classes to improve readability and maintainability of the code
added unit tests for getRepositoryPermissions functionality in UserModelTest . java to ensure correct permissions are granted for multiple teams in the user model
added a new file Test7088020 . java to implement method invocation tests to ensure correct method type handling and error handling during invocation
refactor audience restriction validation to use a set of audience URIs instead of a single match to improve code readability and maintainability by reducing redundancy
refactor cache refresh methods in AbstractDataChangedListener , HttpLongPollingDataChangedListener , and HttpLongPollingDataChangedListener to improve code clarity
replaced direct calls to ` _ stderr ` with null checks for ` stream ` before accessing it to improve robustness by preventing potential NullPointerExceptions
added a new warning constant ` SEPARATION _ ORDER ` in ` BasicEventSimulationEngine ` and updated its usage in ` BasicEventSimulationEngine
updated the optimization method call from offlineTableConfig to realtimeTableConfig in BaseBrokerRequestHandler . java to ensure accurate query optimization for real - time
updated the AGGREGATE _ TABLE _ SQL query to include split points and adjusted the UpgradeCatalog240 class to disable the normalization feature
refactor SavepointV2 and FileStateHandle classes to improve code organization and maintainability
added BluetoothClass functionality to ShadowBluetoothDevice and ShadowBluetoothDevice classes to enable testing of Bluetooth class management in the ShadowBluetoo
rename ` contains ` method to ` containsProfile ` across multiple files to improve clarity and consistency in naming conventions
updated null and empty check for the list in SumFunction . java and added a new test case in FEELFunctionsTest . java to ensure
replaced ` graphModel . getGraph ( ) ` with ` graph . readUnlockAll ( ) ` in ` DataBridge . java ` to simplify
updated coreNodeName assignment to use nodeProps . getCoreName ( ) instead of nodeProps . getNodeName ( ) to ensure the correct core name
added a new ` UpdateBackpressure ` object and refactored the ` updateToolbar ` method in ` ChatActivity ` to improve user experience by
updated TaggerParserPosTagCompatibilityITest . java file to improve test coverage for pos tag compatibility
added @ LuceneTestCase . SuppressCodecs ( " SimpleText " ) annotation to BaseVectorSimilarityQueryTestCase . java to suppress codec warnings for
updated elemtype checks in mmm Types . java and added a new class T7005671 . java with multiple test methods to enhance type safety and
updated triangle values in DelaunayTriangulator . java and modified EarClippingTriangulatorTest in Lwj
added @ Override annotations to multiple Java classes to ensure proper method overriding and improve code clarity
refactor AmbariJwtAuthenticationFilterTest to use JWTClaimsSet . Builder for building JWTClaimsSet objects to improve code
refactor state handling in StackOverflowCheckImpl . java to improve clarity and maintainability of state management
added shadow methods for SQLiteDatabase and ContentValues in Robolectric . java and removed deprecated methods in ShadowContentValues . java to streamline the code
replaced ` initiateGLInstances ( ) ` with ` initiateGL ( ) ` in ` LwjglGraphics . java ` and added a new
replaced ` int ` with ` ArrayUtil . ByteArrayComparator ` and updated comparison logic in ` BKDWriter . java ` to improve performance and
updated Locale . java to include a script parameter and initialized defaultLocale if it is null to ensure defaultLocale is initialized and prevent potential NullPointerExceptions
change return value from mIconCurrentTextAlpha to mIconLastSetTextAlpha to accurately reflect the last set text alpha value
corrected a typo in the warning message from " Confimap PropertySources " to " ConfigMap PropertySources " to improve clarity and accuracy
replaced multiple imports with UaaJunitSuiteRunner . allSuiteClasses ( ) in DefaultConfigurationTestSuite . java and modified TokenRevocation
added trim ( ) method calls to multiple methods in GzipFilter and modified test parameters in GzipFilterDefaultTest to ensure consistent handling of whitespace
updated output type assignment in Response . java to ensure correct output type is set for the WRITER output
updated regexp implementation from JDK to JONI in RegExpFactory . java to ensure compatibility with the newer JONI regexp implementation
replaced ` LooperExecutor ` with ` FutureTask ` in ` ViewCapture . java ` and refactored task handling in ` ViewCapture . java
added style retrieval logic in MaryGenericFeatureProcessors and implemented style retrieval methods in Voice and MaryRuntimeUtils to enhance functionality to handle unknown style values
added a check to create the parent folder in GitBlit . java to ensure the folder creation fails gracefully if it fails
updated the bind IP version from 0.0 . 0.0 to 127 . 0.0 . 1 in Args . java to ensure compatibility with the latest bind IP version and
camel - 11497 : camel - jbpm - add support for in - only and in - out camel - workitem - in -
pdfbox - 4892 : make jpegutil constructor private , a suggest by valerybokov
updated class names and constructors from WorkModeToggleContainer to WorkFooterContainer in AllAppsGridAdapter and AlphabeticalAppsRecyclerView to
refactor multiple Java files to improve code organization and maintainability to enhance maintainability and readability of the codebase
refactor type parameter handling in DefaultJavaPrettyPrinter to streamline code for better readability and maintainability
[ java ] free memory before call drivercontext . freememory ( ) .
updated error message formatting in QueryByExamplePredicateBuilder , JpaPersistentPropertyImpl , and StringQuery classes to improve readability and maintainability of
replaced ` evictionCounter ` with ` AtomicLong ` for tracking counters in ` ConcurrentLRUCache ` and ` FastLRUCache ` to improve performance
refactor DefaultTaskExecutor to use ` runAndWaitInJavaFXThread ` instead of ` runInJavaFXThread ` and introduce a new method
changed the condition from checking if the localHost is an instance of Inet4Address to checking if the intendedDestination is an instance of Inet4Address
added RuntimeEnvironment import and setting data and source roots in MainFrame . java to enable dynamic configuration of database and source paths in the MainFrame
added constructors ` MarkedClientEnabled ` and ` MarkedServerEnabled ` to ` AdminClientBootstrapConfiguration ` and ` AdminServerBootstrapConfiguration
refactor TableEnvironment class for improved readability to enhance maintainability and facilitate future updates
updated statement timeout handling in MapperBuilderAssistant , MappedStatement , and ExecutorTestHelper to set a default timeout value to improve flexibility in managing statement timeout
updated method signatures in JSweetTranspiler , TypeScript2JavaScriptTranspiler , TypeScript2JavaScriptWithTsserverTranspil
added GeoLocationRequest and GeoLocationResponse imports and registered serializable classes for GeoLocationRequest and GeoLocationResponse in CasCoreAuthenticationComponentSerialization
updated validation checks in ArtifactFilesystem to use BuildArtifact instead of ImmutableSourceArtifactImpl to improve clarity and consistency in handling build artifacts
[ tika - 232 ] fix summaryextractor to throw an exception if jxl . xls be not a HPSF document
[ geo ] avoid concurrent modification of ` ` conditionals ' ' list
modified the condition for checking channel input stream availability in TcpNioConnection . java to ensure proper handling of input streams when writing to pipe
added toString ( ) and toString ( ) checks in GuavaOptionalSubject . java and corresponding test cases in GuavaOptionalSubjectTest . java to
updated BackgroundAppState to include VERTICAL _ SWIPE _ INDICATOR and adjusted midProgress calculation in ShelfScrimView to
added a null check for the ` nav ` variable in ` MatDefEditorlElement . java ` to prevent potential NullPointerExceptions when ` nav
refactor conditional checks for absolute location in DrawImage . java and update classicBoundingBox . setBounds in GeoImage . java to improve code readability and
refactor error handling logic in ErrorOccuredInOnExceptionRoute . java to improve code readability and maintainability
[ astro ] change astro discovery job to schedule with fixed delay .
removed redundant check for ` irrUnit ` and ` pemUnit ` in ` SinglePassAndImageBasedLightingLogic . java ` to simplify
added JUnit @ Ignore annotation to JmsJdbcXALoadTest and JmsJdbcXATest classes to temporarily disable tests that are still
updated import statements in GuiceFactoryTest . java to include specific Guice - related classes to improve code clarity and maintainability by using specific classes
added a systemFeatureList to the RobolectricPackageManager class to manage system features to enhance the functionality of the Robolectric package manager
refactor RCAFrameworkLoader to use a new constant for path postfix and add a new test class for path augmentation to improve code clarity and
removed logging statement for the cancellation watch dog to streamline the cancellation process by eliminating unnecessary logging
added a null check for enumerationValues in RADProperty . java to prevent potential NullPointerExceptions when the array is empty
rename variable ` needInline ` to ` needStartText ` and ` needEndText ` for clarity to improve code readability and maintainability by
added asynchronous method to collect and sendTelemetryDataAsynch ( IConfig config ) and improved public IP retrieval in Server . java to enhance performance and
removed conditional logic for altering the column type in UpgradeCatalog260 . java to simplify the code and improve maintainability
updated error messages in BaseTableDataManager to provide clearer guidance on available space and write - permissions to improve user understanding and provide clearer guidance
refactor DatasetUtilities class to improve code readability to enhance maintainability and facilitate future updates
added a key to display the selector ID in the Matcher class to enhance user experience by providing a clearer and more relevant selector information
updated debug logging format and formatting in GouraudShadingContext . java to improve readability and maintain consistency in debug output
updated taskbar visibility constants and added alpha updates for hiding the taskbar to enhance user experience by allowing dynamic visibility of the taskbar while maintaining
reformatted code in KeyExchange . java for consistency to improve readability and maintainability of the code
added a check for ` JdbcConnection ` before executing version retrieval in ` CockroachDatabase ` to ensure proper handling of ` JdbcConnection `
updated file index handling in ServerMainTest . java to use a variable for fileIndexThatRemains and adjusted assertions accordingly to ensure correct file
added methods to retrieve media recordering mime type in CodenameOneImplementation , MediaManager , and Display classes to provide access to media recordering mime
change access modifier of useShaders method from private to public in ShaderHelper and related classes to allow external access to shaders from other classes
updated the condition in DruidAdapterIT from 6588 to 13500 and adjusted the return value from 6588 to 13500 to ensure compatibility with
removed unnecessary whitespace in ZkStateReader instantiation to improve code readability and maintain consistency
removed unnecessary closing braces in XMPMetaParser . java to improve code readability and maintainability
added a new interface ` ClientRegistrationIdentifierStrategy ` in the ` org . springframework . security . oauth2 . client . registration ` package to
modified the condition for finding scripts in UrlHelper . java to improve readability and maintainability of the code
renamed the variable ` checkVarargsAccessDuringResolution ` to ` checkVarargsAccessAfterResolution ` and updated related logic to improve clarity and
refactor border property retrieval to use a new method ` borderIsNotSetOrBlank ` to improve code readability and maintainability by centralizing border
changed log level from info to debug in WatchConnectionManager , WatchHTTPManager , and WatchConnectionManager to reduce log verbosity for better traceability
updated import statements and modified attachProjectToConnection method to include HubRegisterResponse in InternalDropAllCommandStep . java and HubUpdater . java to
replaced ` ( ( 0xff ) & 0xff ) ` with ` Byte . toUnsignedInt ` for byte conversions across multiple files to improve
corrected the formatting of the string in OpenTracingTransactionProducer . java to improve code readability and maintain consistency
changed the default value of CachingBuildEngine . DepFiles from ENABLED to CACHE to ensure consistent caching behavior for dep files
changed the default value of ` rangePannable ` from ` true ` to ` false ` in ` CategoryPlot . java ` to disable range
updated the logic for managing the main view in AllAppsContainerView . java to ensure that the main view is only added when the active page
changed variables from static to private for GLCapabilities , GcodeRenderer , and FPSAnimator in Visualizer2TopComponent . java to improve en
added handling for CancellationException in FunctionTest . java to ensure proper handling of CancellationException gracefully
changed constructors of JarFileResource and JarResource from package - private to protected in JarFileResource and JarResource classes to enhance encapsulation and
refactor DefaultTrackSelector class to improve code readability to enhance maintainability and facilitate future updates
added a sleep loop for unseq merging in LevelCompactionTsFileManagement . java to ensure proper synchronization during unseq operations
updated the fee currency from AUD to BTC in BTCMarketsAdaptersTest . java to ensure the correct fee currency is used for
added a @ Table annotation to the Post table and updated related test methods in HibernateDTOProjectionTest and JPADTOProjectionTest to enhance the
refactor Unicode class to improve code readability to enhance maintainability and facilitate future updates
added service parameter to the installAutoInstance method and updated HIVE _ LLAP settings in ViewRegistry . java to ensure proper handling of service
removed unnecessary whitespace in the onComplete ( ) method call to improve code readability and maintain consistency
refactor SSECustomerKey class to use JsonPOJOBuilder instead of SSECustomerKeyDeserializer to simplify the key deserialization process and improve
added support for handling big decimal values in RangePredicateEvaluatorFactory to provide clearer error messages for unsupported value types
replaced instances of ` inner ` with ` javac ` in ` TreeBackedProcessorWrapper ` to utilize ` javacMessager ` instead
removed unnecessary annotation printing in ParameterInfo . java to streamline code and improve readability
added Ac3 support and improved seek method handling in PlaybackController . java and VideoManager . java to enhance video playback functionality and ensure proper
updated the return statement in LocalNode . java to set a " value " to null and added JSON content to the HttpResponse to improve response handling and
added @ SuppressWarnings ( " deprecation " ) annotations to DelegatingStatement and DiskFileItem classes to ensure compatibility with Commons DBCP and File
added a test method ` testSelectInto ` to ` IoTDBExtendTemplateIT ` to validate the functionality of SQL queries in the ` root
refactor RTimerTree class to improve code readability to enhance maintainability and facilitate future updates
updated package declarations from ` com . facebook . buck . rules . graphbuilder ` to ` com . facebook . buck . core . rules . graph
update gapX calculation in Letters . java and add a new TestIssue358 . java file in TestIssue358 . java to
refactored the initialization of QueuedThreadPool and set the executor and scheduler in ClientConnector . java to improve clarity and maintainability of the thread
changed access modifiers of JScrollPane and JSplitPane in ViewResultsFullVisualizer . java to allow external access to these components and improve layout responsiveness
added phoneNumbersListDescription and phoneNumbersDescription fields to ScimUserEndpointDocs . java to provide user - specific phone number information for users
changed class visibility from package - private to public in DeleteFiles , IndexFiles , IndexHTML , and SearchFiles classes to enhance encapsulation
added null checks for responseMap and responseMap in JsonHttpPropertyRequest and URLStreamProvider , and improved error logging in URLStreamProvider to enhance
refactor SolrRequestHandler class to improve code readability to enhance maintainability and facilitate future updates
added a condition to check if the ` parallel ` variable is not equal to ` DEFAULT _ PARALLEL ` to ensure that the condition is
updated import statements in TestVmwareContextFactory , TestVmwareMO , and TestVMwareUtil classes to ensure consistency and correctness in import
updated error handling in TerminalImpl to include additional conditions for SCARD _ E _ NO _ SMARTCARD to improve robustness of card creation and
added SuppressSysoutChecks annotation to Test2BTerms . java to suppress sysout checks when printing lots of stuff on purpose
camel - 16165 : camel - bindy - bind list to the model in bindykeypairfactory and bindkeypairdataformat to
changed default values for " useOwner " and " useTimeStamp " from Boolean . TRUE to Boolean . FALSE in JabRefPreferences . java to
updated the parameter type of the ` runAndCheckException ` method from ` Runnable ` to ` ThrowingRunnable ` in the ` runAndCheck
added null checks for via , viaContext , and pathFromSeed in CrawlURI . java to improve robustness by preventing potential NullPointerExceptions
camel - 13237 : camel - aws : use the aws - sdb component to configure it
updated version number from " 4.0 . 1 " to " 4.0 . 2 " and refactored object retrieval methods in LiquibaseXMLTransformer to
change default proxy certificate validity from 7 to 90 in ProxyControl . java to adjust the default certificate validity from 7 to 90
added smoothDelta and lastDeltaUpdate variables and updated related calculations in ThreadHandler . java to improve accuracy and accuracy of elapsed time calculations
added null checks for tableSpec ( ) and paginator in HttpScanBatchReader , HttpScanCreator , and TestPagination classes to ensure proper handling of
added a null check for the CompactionInfo client before marking a failed compaction to prevent potential NullPointerExceptions when marking a compaction fails
updated fragment state handling in ShadowFragmentActivity and added a new test for onSaveInstanceState method in FragmentActivityTest to ensure proper functionality of fragment state
updated formatting and formatting in BatchResourceFactoryBean . java to improve code readability and maintain consistency
added a test method ` shouldParseSimpleAndroidColorReferences ` to the ` ColorResourceLoaderTest ` class to ensure that the ` ColorResourceLoader ` correctly
added error handling for NoResultException in AbstractJPAQuery and introduced a new test for unique result retrieval in AbstractStandardTest to improve robustness
refactor community addition logic to use the owner variable instead of the fromCache variable to improve code clarity and ensure proper ownership of communities
updated the import statement for LawnchairApp and updated depth preference retrieval in DepthController . java to ensure compatibility with the Lawnchair application
removed the import of ProcessTools from LocalManagementTest . java to streamline the code by eliminating unnecessary dependencies
updated the ` updateTotalEnergyAverageUsage ` method to remove the ` now ` parameter from the ` updateTotalEnergyAverageUsage ` method to simplify
added null checks for extensions and their names in ExtensionStack . java and added a test for toString method in ExtensionStackTest . java to improve robust
added cancellation logic to InnerSubscriber in FlowableFlatMap and corresponding test cases in FlowableFlatMapTest to ensure proper cleanup of subscribers after cancellation
added connection timeout configuration in MultiGetRequest , ControllerStarter , and ServerTableSizeReader to improve connection handling and provide better error logging for server
reformatted the initialization of AndroidPlatformTarget in AndroidPrebuiltAarDescription . java to improve code readability and maintain consistency
replaced NewModelTest with ModelTest in LwjglDebugStarter . java to align with the new model testing framework
updated ` EdgeSyncCursor ` and ` TenantResourcesEdgeEventFetcher ` to include both ` SystemResourcesEdgeEventFetcher ` and ` TenantResourcesEdge
updated caching logic in CachingBuildEngine and added a new test for output hash calculation in CachingBuildEngineTest to ensure correct output hash calculation
camel - 14263 : camel - netty - add option to use bytebuffer in camel - netty
updated the method for altering partition names in DDLTask . java to ensure the correct table name is used for partition alterations
updated IllegalArgumentException message to provide clearer guidance on creating Vertx instances with the preferNativeTransport option set to true to provide clearer guidance on
refactor EnumTypeHandlerSerializerTest to improve package structure and add ColorTypeHandlerTest to enhance test coverage and ensure proper serialization and deserialization of Color
refactor StreamEx class to improve code readability to enhance maintainability and facilitate future updates
removed unnecessary query and lock timeout hints from the SessionImpl class to streamline the code by eliminating redundancy
added a new file ` StaticLoggerBinder . java ` implementing ` LoggerFactoryBinder ` to provide a static instance of ` StaticLoggerBinder ` for logging
replaced multiple calls to ` familyMap . put ( family , list ) ` with direct calls to ` familyMap . put ( family , list )
updated orientation comparison logic in TaskbarManager to improve clarity and maintainability of the code
replaced direct call to getNick ( ) with StringEscapeUtils . unescapeXml ( getNick ( ) ) in ChatRoomJabber
updated the method call in StoreDirect . java to remove the recid parameter and added a new test class Issue265Test . java to ensure
added @ SuppressWarnings ( " mutable " ) and @ SuppressWarnings ( " ImmutableEnumChecker " ) annotations to multiple classes to suppress warnings related to
[ jbrules - 2576 ] add a Holder class to set value and outcome in executionflowcontroltest
updated conditional statements in DLNAMediaInfo , DLNAResource , and FFMpegVideo classes to improve code readability and
updated NBWriteServlet to accept an unlimited flag and modified related constructors to allow for unlimited operations to enhance flexibility in handling asynchronous operations
updated the ` updateTotalDifficulty ` method in ` BlockchainImpl ` and added a new test in ` ImportLightTest ` to ensure
refactor action handling in DefaultPlaybackController to simplify logic to improve code readability and maintainability
replace synchronized list with CopyOnWriteArrayList in NativeLibrarySupport and SecurityServicesFeature classes to improve thread safety and prevent concurrent modification issues
added uniform allocation calculations in AllAppsView . java to ensure that the application correctly reflects the dimensions of the application
added a check for the presence of a colon in the key in HttpURLConnection . java to ensure correct indexing behavior when the key contains a colon
added PrincipalResolver dependency to CasSimpleMultifactorAuthenticationEventExecutionPlanConfiguration to enable the use of the principal resolver in authentication metadataPopulator
replaced Jackson ' s ObjectMapper with Noggit ' s ObjectBuilder and improved error handling in DelegationTokenResponse . java to enhance compatibility with the
added a method ` removeTrailingSlashes ` to the ` StringBuilder ` class to ensure that trailing slashes are properly removed from the string builder
added methods to handle empty patterns in the PatternsMatcher class and corresponding tests in PatternsMatcherTest to improve pattern matching functionality and ensure correct functionality
updated error message formatting in LoadIncrementalHFiles . java to improve readability and maintainability of the error message
added potion handling for Fire in BlockFire . java to ensure proper handling of potion fade events
removed unnecessary whitespace in beginOrAdjustReorderPreviewAnimations method call to improve code readability and maintain consistency
updated mathematical calculations in ContractStateCapsule , ReceiptCapsule , and ResourceProcessor to improve code readability and maintainability
added handling for input unready state in AsyncContentProducer and implemented a new test for isReady ( ) in AsyncIOServletTest to ensure proper
added a null check for the weightField parameter in DocumentDictionaryFactory . java to ensure that a mandatory parameter is provided to prevent potential NullPointerExceptions
added variable substitution for plist variables in AppleBundle and implemented a test for it in AppleTestIntegrationTest to improve variable substitution functionality and ensure correct behavior
updated TurretBullets , Bullets , Damage , and LaserTurret classes to improve the responsiveness of Turret
updated KucoinAdapters to use ` OrderCreateApiRequestBuilder ` instead of ` OrderCreateApiRequest ` to ensure proper type handling and avoid potential
added a new file ` PreParseGrammarTest . java ` that tests XML grammar parsing to ensure proper parsing and parsing of XML schema grammars in
added @ SuppressWarnings ( " doclint : missing " ) annotations to multiple Java files to suppress doclint warnings and improve code clarity
added FontManager import and overrideFont method calls in ExtendedEditText . java to enable font overriding functionality for text input fields
added a null check for ` currentUser ` in ` AuthorizeTag ` and a corresponding test in ` AuthorizeTagTests ` to ensure that
camel - 14497 : camel - cxf - fix uri encoding issue
added a setUpData method to JDBCGeometryTestSetup to ensure proper setup of the JDBC geometry test setup
removed the import of DumpHandler from MultipartFilterTest . java to streamline the code by eliminating unused dependencies
[ hotfix ] [ runtime ] do not stop backendrestorerprocedure if backendcloseableregistry be close
add server . rmi . create option to allow create rmi registry
updated string concatenation in CompactionManager to use StringUtils for formatting to improve code readability and maintainability
added display metrics configuration to ParallelUniverse and updated qualifiers tests in QualifiersTest , RobolectricTest , and ShadowApplication to ensure
[ java ] add getclustermemberid ( ) method to get cluster member id .
added conditional logic to store " TotalThreadAllocatedBytes " attribute based on version check to ensure compatibility with versions 21 and above
updated the evaluation method to handle NaN , NEGATIVE _ INFINITY , and POSITIVE _ INFINITY cases and modified hash code initialization to ensure correct
updated logging statements in AjaxListener . java to improve clarity and consistency to enhance log readability and maintainability by using more descriptive variable names
added authentication routes for " / authenticate " and " / authorized " in AuthenticityController and created a new AuthenticityFormTest class to
added an assertion to ensure nextNode is alive in LoweringPhase . java and updated next assignment logic in SnippetTemplate . java to ensure proper
rename ConnectionManager class to HttpClientRequestImpl to improve clarity and consistency in naming conventions
removed redundant comparison calls in DefaultTrackSelector . java to streamline code for better readability and maintainability
refactor RuntimeSerialization class to improve serialization logic to enhance performance and maintainability of the serialization process
refactor image cropping logic in DrawImage . java to handle cropping scenarios to improve image processing accuracy based on cropping conditions
refactor UnitOfWorkFactory class to improve code readability to enhance maintainability and facilitate future updates
added a new property ` allAppsCellWidthPx ` and updated its assignment in ` WidgetPreviewLoader ` and ` WidgetCell ` to
added content type name handling and updated content type check in MailContentHandler . java to ensure content type is correctly set and prevent potential NullPointerExceptions
updated the URI construction in ThumbnailsCacheManager . java to use fileId instead of remotePath to ensure the correct file ID is used for thumbnail
added methods to set and reset the input stream if it is supported to ensure that the input stream is properly marked and resets when supported
added @ Deprecated annotations to AsyncProcessor , BehaviorProcessor , and BehaviorSubject classes to indicate that these classes are outdated and should not be used
added a configuration property ` SERVER _ SHOW _ ERROR _ STACKS ` to control the display of error stacks in the error page
do n ' t try to delete a template when delete a domain
removed redundant checks for ` fremCall ` and ` dremCall ` in ` SPARCArithmeticLIRGenerator . java ` to streamline
drools - 5 : support addruletemplateconfiguration ( ) and getruletemplateconfigurations ( ) for legacy kie 5 . x api ( #
refactored the onRequestPurchaseResponse method to use a final modifier for consistency to improve code readability and ensure immutability of the method
increased the default timeout duration from 100 milliseconds to 1000 milliseconds in UnboundedSourceSystemTest . java to allow more time for tests to complete before
added a check for the first character of the parent string before processing it in ShadowAssetManager . java to ensure that only qualified resources are processed correctly
deleted files MrefStat . java . rej and MrefStat1 . java to remove unused classes to streamline the codebase
added a check for blank scope in DependencyInsight . java to ensure that the scope is always set to " compile " when no scope is provided
added error messages for no trades and bad status in BTCETradeServiceRaw . java to improve error handling and provide clearer feedback for trade
replaced JUnit 5 assertions with hamcrest assertions in multiple test files to simplify test assertions and improve readability
added a method to retrieve payment request URLs in BitcoinURI . java and corresponding tests in BitcoinURITest . java to enhance payment request
[ calcite - 383 ] add support for collection wrapping in property property ( prasanth jayachandran )
removed duplicate calls to setFolderInfo in FolderPagedView . java to streamline code by eliminating redundancy
updated lock handling logic in JfrBufferNodeLinkedList , JfrChunkWriter , and JfrThreadLocal classes to ensure proper handling of lock ownership
simplified null checks and improved error messages in BasicAbstractTuple . java to enhance code readability and provide clearer error messages for null values
refactor lint utility to use InputResource for reading linter configurations to improve code maintainability and readability by utilizing InputResourceUtility
added a Runnable to update backgrounds and paddings in AppsContainerView . java to ensure the update functionality is executed on the UI thread
updated the patch method signature for onInventoryTick in Inventory . java to improve code clarity and maintainability
added support for OCELOT _ BABY event in PlayerEvents . java to enhance player event handling for OCELOT _ BABY
[ hotfix ] [ state ] add miss @ publicevolving annotation to statettlconfig
added null checks before setting parameters in PreparedStatement , Array , and Array classes to ensure proper handling of null values and prevent potential NullPointerExceptions
[ java ] : update archive tool to print out descriptor for all valid and invalidated recording .
updated the append0 call from " \ n " to ' \ n ' in StringBuilder . java to ensure consistent formatting of the output
added a new test method ` jsonSnapshot ` to the ` SiteSnapshotVariationsTest ` class to ensure proper handling of JSON snapshots in the
updated import statements and refactored the ` removeTheTxAndBlock ` method in ` BroadTest . java ` to improve code clarity and maintain
added functionality to enable camera mode based on the " Le LensMaskOpen " , " Le LensMaskClose " , and updated channel state
removed ` throws NoSuchBuildTargetException ` from method signatures in ` BuckConfig ` , ` BuildRuleFactoryParams ` , and ` resolveBuildTarget `
refactor ChangeLogIterator constructor to accept a list of ChangeSetFilters instead of a single list of ChangeSetFilters to enhance flexibility by allowing multiple
added exception handling for guest exceptions in PolyglotLauncher . java to ensure proper exit code handling for guest exceptions
updated the method for retrieving the OPT _ OUT _ TRACKING environment variable from ` getenv ` to ` getEnvOrSystemProperty ` to ensure
added serialVersionUID fields to AuthCacheValue and AuthenticationInfo classes to ensure proper serialization compatibility across different versions
refactor space handling logic in SpacesVisitor to use dropParentUntil for better clarity to improve code readability and maintainability by using a more
# 118 - enh : add nearcache parameter to servercacheoptions # copy ( boolean )
added a new test method ` testHiddenBorder ` to ` VisualRegressionTest ` to verify that the border is visible on a floated element with
renamed ` ActionGraph ` to ` TargetGraph ` in WorkspaceAndProjectGenerator and ProjectCommand to improve clarity and consistency in naming conventions
updated KucoinExchange to use PROD _ URI instead of LIVE _ URI and added logging for host exceptions to improve error handling and provide clear
refactor search path handling in SpringResourceAccessor . java to improve clarity and consistency to enhance code readability and maintainability
updated assertions in SmartHomeUnitsTest , SmartHomeUnitsTest , and SmartHomeUnits classes to improve readability and maintainability of test cases
updated vertexMask retrieval from ` getMask ( ) ` to ` getMaskWithSizePacked ( ) ` in DefaultShader . java to ensure correct
deleted the Tls12SocketFactory . java file to remove unused SSLSocketFactory class to streamline the codebase
refactor citation handling in TexBibEntriesResolver to use a new stream method to improve code readability and maintainability by centralizing
added a method to check if robolectric is in Robolectric legacy mode to ensure compatibility with Robolectric ' s legacy resource management
added a check to return " DOUBLE PRECISION " based on the database type to ensure correct data type is returned for Firebird databases
added null checks before setting the dataSource and transaction manager in DefaultBatchConfigurer . java to avoid potential NullPointerExceptions when the dataSource is not initialized
added a new API package - info . java file in the org . terasology . gestalt . module . sandbox package to provide
updated command in OutputStreamTest from " www . google . com " to " ping - c 5 127.0 . 1 " and modified test timeout
[ hotfix ] [ test ] use try - with - resources in savealltest
updated TermScorer instantiation to handle scores based on score mode to ensure correct scoring behavior based on score requirements
[ hotfix ] [ api ] fix nullpointerexception in dataflowmetrics
cloudstack - 4892 : fix nic query for user vm ( account datacenter vm )
refactor DynamicPartitionPruner to use a new method ` findTargetOi ` for better object inspector retrieval to improve code clarity and maintainability
added a method to remove build artifacts from a set of outputs in ArtifactFilesystem to enhance functionality for managing build artifacts during execution
added row selection logic to the table in ThrustCurveMotorSelectionPanel . java to ensure proper selection of the selected row when the table is
refactor assertThrows method calls to use assertThrowsArrayStoreException instead of assertThrowsArrayStoreException to improve code readability and
refactor PropertySource class to improve code readability to enhance maintainability and facilitate future updates
added environmentName and user agent handling in HttpClientBuilder and HttpClientConfiguration classes to enhance HTTP client configuration flexibility by allowing custom user agent configuration
refactor session restoration logic in MemorySessionStore to utilize a dedicated method to improve code readability and maintainability by encapsulating session
updated assertions in IssueTest . java and Reporter . java to include a message to indicate that the data provider generated 5 distinct test instances to improve clarity
camel - 14263 : camel - consume - ews should set default content type to text / plain if null .
refactor activation ID handling in CharacterSystem , InteractionSystem , and InteractionSystem classes to improve clarity and consistency in handling activation requests
refactor graph drawing logic in GraphApplet . java to improve code readability and maintainability
added a method ` updateSnapshotRadius ( ) ` to ` RecentsView ` and modified the visibility of ` updateSnapshotRadius ( ) ` in
added logging for swagger generation and updated revision assignment in StaticMicroserviceVersions . java to enhance debugging capabilities and improve code clarity
changed return type of put methods from void to int in ArrayMap . java to allow the method to return an integer value instead of void
[ hotfix ] [ kafka ] fix startup timeout in kafkacontainercluster
added a retry flag and improved exception handling in DefaultMQPushConsumerImpl . java to enhance push consumer reliability and error logging for message sending failures
modified the header handling logic in StaticServerHttpHeadersWriter to check for non - existing headers to ensure that only relevant headers are written when they are
updated EventListenerList to check package access before adding a listener type to ensure proper package access before accessing the listener class
added a new ` CustomAdapter ` class and modified ` onCreateView ` method to include a list of application names and images to enhance user experience by
added null checks for ImageView and Task in applyIcon method to improve code clarity and prevent potential NullPointerExceptions
refactor DownloadTracker , DownloadManager , and DownloadStateCursor to use a try - with - resources statement to ensure proper resource management and prevent potential
refactored the handling of insert statements in BaseSqmToSqlAstConverter . java to improve code clarity and maintainability
added JUnit ' s @ Test annotation to multiple test classes and removed the ` @ Transactional ` annotation from the ` onSetUp ` method to
refactor DataInputStreamWithTimeout to use ExecutorService for reading data to improve thread safety and maintainability of the data input handling logic
added ENABLED _ TS mode to VersionTargetGraphMode and implemented ToposortBasedDepsAwareExecutor in VersionedTargetGraphCache to enable
refactor UpgradeCatalog150 class to improve code organization to enhance maintainability and readability of the upgrade process
rename ` testNet3 ` to ` createOldTestNet ` across multiple files to improve clarity and consistency in naming conventions
remove redundant code in PropertiesViewD . java to improve code readability and maintainability
updated onboarding preferences handling in AppsDividerView and added nullability annotation in ActivityContext to improve code robustness and prevent potential NullPointerException
updated HdfsIndexOutput to extend BufferedIndexOutput instead of Apache Commons IOUtils to improve resource management and error handling during index output closure
pdfbox - 4892 : do n ' t set the clipping when the clipping path be n ' t complete
removed synchronization from the localAddress assignment logic in SocketChannelImpl . java to simplify the code by eliminating unnecessary synchronization
refactor TemplateTransformer to use a dedicated method ` addToRow ` for adding values to improve code readability and maintainability by encapsulating
added a method to check if the operating system is Windows and updated file rename logic in Wallet . java to improve compatibility checks for file renames
replace ` ALPHABET ` array with ` CHECK _ DIGIT _ STRING ` in ` Code39Reader ` and ` Code39Writer `
refactor execution handling logic in NodeGenFactory . java to improve type casting and casting logic to enhance clarity and correctness in handling unexpected
refactor conditional checks for stored fields in IndexingChain . java to improve code readability and maintainability
modified the condition in IntervalUtils to check for non - digit characters and added a new test for Timestamp with nanoseconds in where clause to improve precision
updated conditional logic for handling runnable stack traces in LwjglCanvas . java to improve code readability and maintainability
corrected a typo in the description of the method description in AbstractGCSProcessor . java to improve code readability and maintainability
replaced instances of ` assertInitialized ` with ` waitUntilInitialized ` in ` ConnectionPoolTest . java ` to improve thread safety by using a more
updated DirContext default values from null to " single " in multiple test files to ensure consistent default directory behavior across tests
refactor UserData handling in FaultTolerantChunkProcessor to use a new method for incrementing filter count to improve code clarity and maintain
updated method signatures and improved file handling in ` FileWithTabs ` and ` T4994049 ` classes to enhance code readability and maintain
refactor conditional checks in ConsoleReaderTest to use a static assumeTrue method to improve code readability and maintainability by reducing redundancy
remove redundant check for admin status in GetFeedbackSessionsAction . java to simplify the code and improve readability
updated selection calculation and condition checks in AllAppsView . java to correct the logic for determining the new selection based on the current page ' s
removed the ` trackResultsAvailability ` parameter from ` initialize ` methods across multiple classes to simplify the initialization process by eliminating unnecessary parameters
added functionality to load model lists and updated encryption logic in DataModelManagerDialog , DbConnectionDialog , and ExportPanel to improve data model handling and
replaced ` writeBufferSize ` with a static final ` WRITE _ BUFFER _ SIZE ` and updated related methods to use ` String . valueOf `
refactor segment size calculation in DocumentsWriter and add a test for no documents index in TestIndexWriter to improve code clarity and ensure correct segment size
added a validation check for the Dvert field in ArmatureModifier . java to ensure that the Dvert field is not null before proceeding with
refactor FileDisplayActivity to improve code organization to enhance maintainability and readability of the code
added a new UnsupportedOperationException that fills the stack trace in ApplySpecialization . java to avoid filling in stack traces when throwing unsupported operations
updated the method to return the average height of lines instead of the size of lines to improve the accuracy of the height calculation for multiple lines
replaced the singleton instance of RotationTouchHelper with a constructor that accepts a DisplayHolder to enhance flexibility by allowing the RotationTouchHelper to be
modified the loop structure to check for already quoted strings before processing them to ensure proper handling of quotes and avoid unnecessary processing when already quoted
updated ` ServletHandlerInterceptor ` to use ` IdConversion . convertToLong ( s ) ` instead of ` Long . valueOf ( s , 16 )
updated test methods in ServerDatagramConnectorTest to improve clarity and functionality to enhance test coverage and ensure correct functionality of the Server implementation
updated the method call from ` substring ( ) ` to ` substring ( ) [ 1 ] ` in ` TestSqlEntityProcessorDelta . java `
refactor caching logic in Cache . java to improve performance and maintainability of the code
rename variable ` e ` to ` ev ` and update scope setting in ` ResourceSetRegistrationEndpoint ` to improve clarity and consistency in naming conventions
updated the ` doBefore ( ) ` method to use ` newSearcher ( ir , false ) ` instead of ` newSearcher ( ir ) `
added a main method to test the Persistent JTable functionality to enable users to add a number of rows to the Persistent JTable
updated WEBAPP _ CONNECT _ TIMEOUT from a constant to a configuration parameter to improve flexibility by allowing configuration for connection timeout
updated logging statements to use List < Transform > instead of List < Transform > for better type safety to enhance code readability and maintainability by using
refactor TestMediaService class to improve code readability to enhance maintainability and facilitate future updates
removed the static String HELP _ ABOUT _ DIALOG _ USER _ GUIDE _ LINK from Messages . java to streamline the help
add a new file MarketsPrintTool . java to implement market printing functionality to facilitate the printing of market currencies in the application
added hostname compliance validation and validation for component names in EndpointAddressInterceptor . java to ensure component names do not exceed a maximum length of 63 characters and
added ` registerSecurityKeyStart ` and ` registerSecurityKeyComplete ` methods to ` AccountProxy ` , ` HttpAccount ` , and ` Http
refactor ServerSpanThreadBinder to improve code structure to enhance maintainability and readability of the code
updated user pointer retrieval from userPointer ( ) to userData in BulletPhysics . java and modified block bounds calculations in BlockItemSystem . java to
replace " Location " with " the _ geom " and added " the _ geom " and " number " classes in Csv2Shape . java to
updated variable name from callGasWord to gasCost in VM . java and removed unused imports in Program . java to improve code clarity and
refactor parameters class to improve code readability to enhance maintainability and facilitate future updates
added a call to setIgnoreNullValues ( true ) in MultiplePiePlot . java to ensure that null values are ignored when processing pie plot
refactor bundle loading logic in ResourceBundle . java to simplify cache management and improve code readability
change character from ' _ ' to ' - ' in TaggedPdfReaderTool . java to ensure consistent character formatting across different operating systems
added ` isAllowedDuringEditing ` method to ` AFreeplaneAction ` , ` AccelerateableAction ` , and ` ExecuteScriptAction
added a userModified flag to LoginSamlAuthenticationProvider . java to ensure that the user is marked as modified after authentication
added a new file TestSealedObjectNull . java to test the behavior of SealedObject with a null cipher to ensure that the SealedObject
renamed the method ` onOpen ` to ` setResponse ` and ` succeeded ` in ` ConnectPromise ` to improve clarity and consistency in method naming
added a static final variable ` SNOW ` and modified the usage of ` Tag . SNOW ` to include ` POWDER _ SNOW
added an ` id ` field to the ` CryptsyPublicTrade ` class and updated related methods to include it to ensure trades are
added a try - catch block to close the MSC connection to ensure proper resource management and handle potential exceptions gracefully
modify the seed calculation in GlowServer . java to use Random for random number generation to ensure the seed is deterministic and handle potential NumberFormatExceptions
added a new device profile " Nexus 5 " to the list of device profiles in DynamicGrid . java to support additional Nexus 5 devices
added null checks and synchronization to resetIf methods in FlowableRefCount and ObservableRefCount classes to ensure proper resetting of connection objects before reset
replaced the use of ` type . newInstance ( ) ` with ` ReflectUtil . newInstance ( type ) ` in ` SynthContext . java ` to
added support for WHITESPACE _ AROUND _ TEXTUAL _ OP in FormatToken and TokenFormatter classes to support additional whitespace operations in PHP formatting
updated file existence checks and modified file overwrite logic in SaveTask . java and added new test cases in SaveAndLoadTaskTest . java to ensure
added synchronized keyword to multiple methods in MLogWriter . java to ensure thread safety during concurrent access
log4j2 - 132 fix smtpmanager . add ( ) to handle mutable log event
changed the PADDING constructor from LengthLike to NonNegativeLengthLike in PrimitivePropertyBuilders . java to ensure compatibility with non - negative lengths
replaced direct calls to ` getUser ( headers ) ` with ` createContext ( ) ` in multiple resource classes to streamline context creation process for improved
refactor exception handling in MethodIRBuilder to streamline exception entry building process to improve code clarity and maintainability by simplifying exception handling logic
updated JUnitRunner and AndroidPlatformTarget to include additional logging in JUnitRunner and AndroidPlatformTarget to improve clarity of error messages for better debugging
update cacheSize calculation from 16 to 8 in OmniNotes . java to adjust cache size for better memory management
added a check for ` start ` in ` InvocationStageTrace ` and modified ` TestInvocationPublishModelFactory ` to include ` finish ` and `
added a try - catch block around KeyStore loading in ProvKeyManagerFactorySpi . java to handle potential NullPointerExceptions and handle potential NullPointerExceptions
refactor UpstreamCheckUtilsTest to use a volatile port variable instead of a hardcoded port value to improve code readability and maintainability
updated the method to retrieve the maximum value of the old parent in DockManagerW . java to ensure correct handling of split panes in the same
added conditional checks for GL _ ARB _ compute _ shader and GL _ geometry _ shader _ 4 and GL _ tessellation _ shader extensions
refactor PopulatorContext class to improve code readability to enhance maintainability and facilitate future updates
add a check for the project before processing the SaveAllAction notification to ensure that the notification is only processed when the project is not in the project
refactor ZQLJobManager to use Apache Commons IO for writing JSON to improve code readability and maintainability by centralizing character encoding handling
added a check for ` args . length - 1 ` before checking if it is an instance of ` Table ` to ensure that ` Table ` is
replaced hardcoded header strings with constants from OSSOHeaderDecoder to improve maintainability and readability of the code
deprecated the suffix strategy option in ` GenerateJavaSources ` and ` JavaGeneratorMojo ` to indicate that the suffix strategy is outdated and should not be
removed debug logging statements from DerbyDatabase . java to clean up the code and improve readability
added timeouts and modified assertions in CepEspTest , CepJavaTypeTest , and CepEspTest to increase test timeouts
replaced parallelStream ( ) method with stream ( ) in PersonNameSuggestionProvider . java to improve performance and readability of the code
updated liquibase operation type checks to case - insensitivity and added a warning message if the liquibase . hub . mode is already set to
added constants for IBM and OpenJ9 version success and failure in the COREINFO _ CMD command to provide clearer access to version information
updated logging messages in FontFamily . java and added a new DebugFonts class to improve clarity and functionality of font addition requests
updated import statements and added HTTP version check in NegotiatingServerConnectionFactory . java to ensure compatibility with Jetty ' s HTTP 1 . 1
added import for RateControl and set the rate control to NO _ RATE _ CONTROL in MaxConcurrentStreamsTest . java to ensure compatibility
added a new file ` Test6741426 . java ` that implements a JComboBox and a NimbusLookAndFeel to demonstrate the use of Nimbus ' s
updated error message in CsrfAwareEntryPointAndDeniedHandlerTest to include the CSRF token verification error message to improve clarity of error
added null checks for dbMgdPath , dbExtPath , and dbMgdPath in HMSHandler . java to ensure proper
added package declaration for S3CopyObjectRequest in S3CopyObjectRequest . java to improve organization and maintainability of S3CopyObjectRequest
removed accentColor parameter from setup methods in SettingsActivity . java to simplify method signatures and improve code readability
updated the expected message in TemporaryFolderUsageTest to include " fileAtRoot " instead of " temp1 " to provide clearer context for
replaced instances of ` MAP _ TYPE _ INFORMATION ` and ` COLLECTION _ TYPE _ INFORMATION ` with ` ClassTypeInformation . OBJECT `
added address validation and validation in ClientNetworkConfig . java and corresponding test cases in ClientConnectionTest . java to ensure that empty and non - empty
added support for " keynectisrootca [ jdk ] " in VerifyCACerts . java to enhance certificate validation capabilities
refactor compute methods to return an integer return value instead of void to improve code readability and maintainability by reducing redundancy
added a conditional check before setting the mode in ModeToggleMenu to ensure the menu state is only set when the popup is active
pdfbox - 4892 : fix eof in memoryttfdatastream , a suggest by valerybokov
added a new file ` FinalizerInfoTest . java ` with a test class ` FinalizerInfoTest ` to verify GC functionality to ensure proper
replace ` . map ( ) ` with ` . doOnNext ( ) ` in ` CachingRouteDefinitionLocator ` and ` CachingRoute
refactor ` BurningManService ` to use ` Optional < String > ` for handling ` receiverAddress ` to improve code clarity and maintainability
refactor StringSubject class to improve code readability to enhance maintainability and facilitate future updates
added JUnit @ Ignore annotation to BatchValidateSignContractTest . java to temporarily disable the test due to memory issues
renamed the method ` setmaxInboundMetadataSize ` to ` setMaxInboundMetadataSize ` to improve clarity and consistency in naming conventions
replaced " from : " with " from : " in RetweetActivity . java to ensure correct query formatting for recent suggestions
removed the conditional check forRebalance in SimulatorDiscoverer . java to simplify the logic for handling rebalance scenarios
added a new method ` importAccount ` to ` YubiKeyAccountRegistryEndpoint ` to handle account registration and save it to the registry to enable
removed multiple shader programs from the shader manager and updated material parameter handling in FontMaterialProducer to streamline shader management and improve code clarity
added null checks for ` cnt ` in ` paintOnTopLoop ` and adjusted padding in ` SideMenuBar ` and ` Toolbar ` to ensure
refactor AbiWriterProtocol to improve code readability to enhance maintainability and facilitate future updates
added a null check for subName before setting the caption to avoid potential NullPointerExceptions when the caption is null
change data flags from DATA _ FLAG _ IMMOBILE to DATA _ FLAG _ GRAVITY in EntityItem . java to align with
added null checks and modified condition checks in CustomExpression . java to enhance robustness by preventing potential NullPointerExceptions
added a call to sendRepublishRequest ( ) in VoteResultService . java to send a republish request instead of requesting the majority vote
added a new test method ` testCase4 ` in ` PostgresTest . java ` to validate the functionality of the Postgres database connection to ensure
updated substring method to use single quotes instead of double quotes in SubtitleUtils and RemoteUtil to ensure consistent string formatting for better readability
added LINE _ SEPARATORS _ RE constant and modified split method calls in DefaultJavaPrettyPrinter and CommentTest to improve line separator handling and
replace AtomicReference with AtomicReferenceFieldUpdater for currentSnapshot in SingleImplementor . java to improve performance and maintainability of the SingleImplementor snapshot management
added a null check for the query before adding it to the query list in SimpleFacets . java to prevent potential NullPointerExceptions when exclude the
added BridgeBuilder and BridgeImpl imports and modified ThingHelper to handle Bridge instances to ensure proper handling of Bridge instances and improve code clarity
replaced printHelp ( ) with error ( " command must be provided " ) and error ( " unknown command " ) in Ktab . java to
added a check to return the output file if it exists to ensure the output file is processed only when it exists
added checks for ' + ' and ' - ' in DateConverter and updated date parsing logic in DateConverterTest to ensure correct parsing of date strings
added a new method ` findBySlug ` in ` PostRepository ` and updated imports in ` SpringDataJPALockTest ` and ` Post
changed the type of ` canAccessDbaRecycleBin ` from ` boolean ` to ` Boolean ` and added a check for the ` can
added SimpleClientHttpRequestFactory to configure connection timeouts in ClientRegistrations . java to improve request handling by allowing more time for REST requests
updated SourceTest to include assertions for file existence and non - cannonical file names to ensure correctness of file existence and non - cannonical file
removed the ALT _ GRAALVM _ VERSION _ PROPERTY and updated the GRAALVM _ VERSION assignment logic in DefaultHomeFinder .
added validity checks for access token and refresh token in ClientAdminBootstrap . java to ensure proper handling of null values and prevent potential null pointer exceptions
updated the return statement to check for Android API version based on configuration to ensure proper handling of Android API version based on configuration
replaced instances of ` this . placeholderPrefix ` with ` placeholderPrefix ` and ` placeholderSuffix ` in ` PropertyPlaceholderHelper . java ` to improve
updated the format of the parameters in the Resources . java file from " # " to " { 9 , number , # " and " SHA1
refactor ZkSolrClientTest to use CountDownLatch for monitoring collection progress to improve thread safety and ensure all collections are processed concurrently
removed BigInteger import and added BigInteger class to simpleTypes in MongoMappingContext . java to streamline the code by eliminating unnecessary dependencies
added a condition to check if the button text equals the string string . view to ensure that the button is displayed correctly based on the button ' s
added a condition to check if MEncoder is not out - of - sync before proceeding to ensure that MEncoder videos are only processed when necessary
increased the default event loop thread count from 10 to 15 in ConfigurationProperties . java and modified test cases in ConfigurationPropertiesTest . java to increase the
changed access modifiers of several fields and methods in CountMin4 and AdaptiveWindowTinyLfuPolicy classes to allow subclasses to access these fields
updated ExternalFileField to use FileFloatSource for retrieving file float sources and added a new test class ExternalFileFieldSortTest to improve sorting functionality
updated exception message from " Invalid URL " to " Connection error " in DoiFetcher . java to provide clearer context for connection errors
added source ID handling and updated event output formatting in OpenRocketSaver , DocumentConfig , and FlightDataBranchHandler to improve event logging clarity
changed the access modifier of the check method from private to protected final to allow subclasses to access the method for better encapsulation
added synchronization logic in FileActivity to handle file synchronization conflicts to improve user experience by informing users when synchronization fails
updated the URI construction in ThumbnailsCacheManager . java to use URLEncoder for file paths to ensure proper handling of images in the thumbnail generation process
added a null check for the infinite property in InfiniteContainer . java to prevent potential NullPointerExceptions when accessing the infinite property
changed the default value of the total variable from 0 to 1 and adjusted the calculation of the total value to ensure the total value is correctly calculated and
added a check for locking before updating an entry in FeedRefreshUpdater . java to ensure that updates are only performed when the entry is locked
refactor conditional checks in SolarisAclFileAttributeView . java for better readability and maintainability to improve code clarity and ensure proper handling of
refactor LatLonTree to use an array of Edge objects instead of a single list to simplify the code and improve performance by reducing the number of
added closing of the input stream in ZkCLI . java to ensure proper resource management and prevent potential memory leaks
updated regex patterns in BibtexParser . java from " \ \ newline " to " \ \ x0a " to ensure consistent formatting
added strict property handling in Main . java and corresponding tests in MainTest . java to enhance parameter parsing capabilities and ensure correct behavior of properties file parsing
add a new ` AlwaysInvalidConstraint ` annotation and a new ` CustomConstraintsValidatorFactory ` class with ` AlwaysInvalidConstraint ` and ` ConstraintValidator
change the default HTTP version from " http " to " http4 " in HttpComponentVerifier . java to ensure compatibility with the latest HTTP specifications
added a call to waitForThingsToLevelOut ( 30000 ) in TestCloudPivotFacet . java to wait for the test to complete before proceed
removed unnecessary conditional checks for length in UBJsonWriter . java to simplify the code and improve readability
refactor ApplicationTest . java for improved readability to enhance maintainability and facilitate future updates
replace String details with StringBuffer for string concatenation to improve performance and readability of the code
rename ` Type ` to ` RoboType ` across multiple files to improve clarity and consistency in naming conventions
[ java ] do n ' t return action . abort if dispatch complete .
added cache key and lookup attributes to EntityProcessorBase and updated related tests to ensure correct handling of cache keys and lookups in SQL queries
added a new file PutfieldError . java with error handling for IncompatibleClassChangeError to demonstrate the behavior of IncompatibleClassChangeError in
refactor connection handling in AwsAddressTranslator to use addressTranslator ' s translate method to improve code clarity and maintainability by centralizing address translation
added logging statements for memtable updates in ColumnFamilyStore , Memtable , and Memtable classes to improve visibility into the memtable ' s flush
replaced instances of ` Space . build ( " " , emptyList ( ) ) ` with ` Space . SINGLE _ SPACE ` across multiple files
removed redundant ` encodedLength ( ) ` methods from ` Flyweight . java ` to streamline code by eliminating redundancy
refactor TestMethodResultMapBuilder to improve code readability to enhance maintainability and facilitate future updates
added handling for NumberFormatException and RuntimeException in FindNullDeref . java to ensure proper handling of integer values and prevent potential runtime exceptions
[ hotfix ] [ runtime ] fix npe in tasklocalstatestoreimpl
updated string return values in Utils . java to include zero and 1 strings instead of strings to ensure accurate representation of time values for better user experience
added checks for DeepShortcutView and adjusted drawable retrieval logic in Utilities and FloatingIconView to improve handling of DeepShortcutView instances and ensure proper
updated the ` validator ` type from ` JwtClaimValidator < String > ` to ` JwtClaimValidator < Object > ` and added a
renamed ` buyQuickRate ` and ` sellQuickRate ` methods to ` getBuyQuickRate ` and ` getSellQuickRate ` in multiple
added a new class ` CoverageConfig ` and modified ` CoverageController ` to use ` CoberturaCondition ` instead of a hardcode
added a conditional check before registering sticky events in ThumbnailView . java to ensure sticky events are only registered once to avoid potential errors
added asciiOnly check to normalize strings in NormalizerBase . java to ensure correct normalization behavior for strings that are ASCII - only
updated migration check from ` isMigrationAllowed ( ) ` to ` areMigrationTasksAllowed ( ) ` in ` JobCoordinationService . java `
added error handling for SQL updates in SpillableGroupByIT and NoOpStatsCollectorIT to ensure proper handling of SQLException and provide clearer
camel - cometd - > camel - ssl - cometd - > camel - cometd - > camel - cometd - > camel - come
added width attribute to the HR and HR attributes in HtmlTag . java to ensure proper handling of HTML attributes in different scenarios
added a br tag to the output in HtmlCoreReport . java to improve the visual appearance of the report output
updated the calculation of ramBytesUsed in DocSlice . java to handle null scores to ensure correct RAM usage when scores are not provided
added a new ` StringHolder ` class and a corresponding test case in ` CustomTypeAdaptersTest . java ` to implement a custom Gson adapter
added a method to set extra data from mining parameters in MergeCoordinator to ensure proper handling of extra data from mining parameters
added a static final map ` numArgs ` and a static final map ` outFile ` and ` parseFile ` to manage the number of arguments
refactor PathParamServerEndpointConfig to improve code readability to enhance maintainability and facilitate future updates
updated migration threshold handling in DefaultMigrationAddressComparator and added shutdown method in MigrationRuleListener to improve code clarity and ensure proper shutdown of the rule executor
rename parameter from ' part ' to ' partOrList ' in attach methods to improve clarity and consistency in parameter naming
updated resource paths in TwitterBootstrapUtils to use " twitterbootstrap / " instead of " jquery . min . js " to ensure consistency in resource
added a regex pattern for parsing basic categories in SpanishTreebankLanguagePack . java to enhance category parsing capabilities for Spanish languages
refactored ` load ` methods in ` AbstractEntityLoader ` and ` UniqueEntityLoader ` classes to use a new ` load ` method to
hbase - 13276 fix race condition in regionserverflushtableproceduremanager and regionserversnapshotmanager
added a check for zero dimensions in PGraphicsJava2D . java to ensure that the size is set correctly when both width and height are zero
fix a typo in the fillPool ( ) method in HikariPool . java to improve code clarity and maintainability
added a call to assureMatchVersion ( ) in multiple filter factory classes to ensure the Lucene match version is set to LATEST to improve compatibility with
added a new ` DefaultMethodClient ` interface and modified the logic in ` AopProxyWriter ` and added a new ` ExecutableMethodWriter ` class
added a conditional check for the comma character in DRLParser . java to ensure proper parsing of comma characters in the input
updated GuavaOptionalSubject , IterableOfProtosSubject , MapWithProtoValuesSubject , MultimapWithProtoValuesSubject , and ProtoSubject classes
added a validation check for payloadLength in WsFrameBase . java to ensure proper handling of invalid payload lengths to prevent runtime errors
refactor package structure and imports from ` channel ` to ` dispatcher ` in multiple Java files to improve organization and clarity of the codebase
updated data types to use ` Long ` instead of ` String ` for execution IDs across multiple classes to improve flexibility in handling query execution IDs
added width and height byte values to the digest in ImageProcessor . java to ensure proper handling of image dimensions in the image processing process
removed logging statement for overlay version in SolrConfig and added imports in SolrConfigHandler to streamline logging and improve code clarity
updated the delayUntil calculation in FileSyncAdapter . java to ensure accurate synchronization delay based on the current time
[ hotfix ] [ test ] fix typo in segmentv1v2tov3formatconvertertest
[ iotdb - 4892 ] fix path creation in queryprocessexecutor ( # 11377 )
added URI handling and improved exception handling in DefaultPackageScanClassResolver and added a test for package scanning in DefaultPackageScanClassResolverTest to ensure
[ hotfix ] [ table - common ] add timestampextractorutils to support getaccessedfields
added a new file ` SpringSecurityAuthenticationSource . java ` to implement the ` AuthenticationSource ` interface to provide a mechanism for retrieving the principal and
refactor AbstractConcurrentArrayQueue and ManyToOneRingBuffer classes to improve code organization and maintainability
updated the minSdk from LOLLIPOP to KITKAT in ShadowAlarmManager . java to ensure compatibility with the newer Android SDK
refactored the custom filename suggestion dialog to use SimpleFormDialog instead of Dialogs . autoSuggestDialog to improve user experience by allowing users to
added a new test method ` testNewput ` in ` TxInputUtilTest ` and updated assertions in ` StoreAPITest ` to ensure correct
updated parameter name from ' collection . getName ( ) ' to ' collectionName ' in MongoTemplate . java to ensure consistency in parameter naming
update zoom calculation and type casting in MapOverviewImageMouseHandler . java to improve accuracy of zoom calculations and ensure accurate type casting
added similarity handling to KNearestNeighborClassifier and updated related tests to use LMDirichletSimilarity to enhance classification accuracy by allowing customizable similarity
replaced SolrQueryParser with ConstantScoreRangeQuery in LukeRequestHandler . java to simplify query parsing by using a constant score range query
replaced ` toString ( ) ` with ` getReason ( ) ` in ` LowResourceMonitor . java ` to retrieve the reason from the lowResource
updated package - info . java files for mmm and ppp packages to improve package documentation clarity and maintainability
added MTU request handling tests in ShadowBluetoothGattTest . java and ShadowBluetoothGatt . java to ensure correct M
refactored the creation of the ServletInputStream into a separate method ` createServletOutputStream ( ) ` to improve code readability and maintainability by
[ vosk ] add warning log for unsatisfiedlinkerror in vosksttservice
replace HashMap with ConcurrentHashMap for mProcessingChains to ensure thread - safe concurrent access to the processing chains
updated the translation string in Resources _ ja . java from " \ u3001all \ u3001grouped \ u3001grouped
updated JDBCTypeMapping and JDBCTypeMappingTest to handle both size > 1 and size > 1 to ensure correct handling of boolean types in JDBC type
added synchronized keyword to addPlayer and removePlayer methods in GenshinScene . java to ensure thread safety during player operations
refactor accessibility handling in TerminalView . java to use regex for control codes and code matchers to improve code readability and maintainability while ensuring
updated condition checks in MenuBar and SideMenuBar to include SIDE _ NAVIGATION for command behavior to enhance functionality to support additional command behavior
removed unnecessary Disposable import and added disconnect handling in WampStreamingService to streamline code and improve error handling for disconnected states
updated energy limit validation logic and error messages in UpdateSettingForEnergyLimitContractActuator . java to ensure proper contract type validation and improve clarity
refactor URL handling in PostmanJsonBuilder to use javaUrl instead of url1 and add protocol property in UrlBean to improve code clarity and
added getter and setter methods for namespacePrefixRef in SoapJaxbDataFormat . java to allow external access to the namespace prefix reference for better
refactor assertions in TestRange to use a new method ` isSameDay ` for date comparisons to improve code readability and maintainability by
added security checks for JettySolrRunner in BasicAuthIntegrationTest . java and modified ZkStateReader . java to enhance security by verifying server
added a PriceFeed parameter to the TradesChartsViewModel constructor and adjusted currency code assignment logic to enhance market price handling and ensure correct currency code
updated hbase configuration retrieval in PhoenixHBaseLoaderIT and PhoenixHBaseStorerIT to use setInt instead of getReplicationConfigIfAbsent to
updated variable names and logic for determining the end value in NativeString . java to improve clarity and ensure accurate indexing of strings
added file downloading functionality to FileDataStorageManager to enable tracking of downloaded files for better file management
[ java ] set the length of the RandomAccessFile to logLength in MappedRawLog . java to ensure that the log file is properly reset
added a method ` checkIfRegistryRunning ` to check if a registry is running and implemented a method ` deleteFileIfExistsWithRetry ` in `
removed unused imports and added a call to ` componentPresetDao . startLoading ( ) ` in multiple test files to streamline code and ensure
added @ SuppressWarnings ( " rawtypes " ) annotations and removed unused fields in multiple Java files to suppress unchecked warnings and improve code clarity
added a null check for instances in TraceFeignContext . java to prevent potential NullPointerExceptions when instances are null
phoenix - 44A15 : set transaction _ must _ be _ enabled _ to _ set _ isolation _ level to TRANSACTION _
added transaction attribute handling to ` AbstractStepFactoryBean ` , ` ItemOrientedStep ` , and ` SkipLimitStepFactoryBean ` classes
updated CasManagementWebAppConfiguration to use DirectCasClient instead of CasClient and refactored CasManagementSecurityInterceptor to improve security
added functionality to manage and edit a category in the ListFragment and NavigationDrawerFragment to enhance user experience by allowing users to add categories to the navigation
renamed the method ` cancel ` to ` cancelMatchingOperation ` in ` DownloadFileOperation ` and updated related methods in ` FileDisplayActivity ` to
pdfbox - 4892 : do n ' t cast to pdfbox object , a suggest by valerybokov
replaced ` getFontSize ( ) ` method with ` getTextSizePx ( ) ` in ` TerminalView ` and ` TerminalBridge ` classes to improve
added a check to ensure the fact is valid before modifying the tmpFact variable to ensure that the fact is only modified when it is valid to
refactor DistBuildTargetGraphCodec , ConvertingPipeline , Parser , and VisibilityPatternParser classes to improve code organization and maintainability
replaced the return statement with a new ArrayList instance to ensure that the returned spans are properly instantiated
refactor lock handling in Liquibase . java for consistency and clarity to improve code readability and maintainability
added a setter method ` setRevision ` in ` MicroserviceVersions ` and updated ` InstanceCacheChecker ` to set the ` revision ` value to
added string formatting for foreignKeyName and indexName in TableRetriever . java to improve code readability and ensure consistent string representation
add unit test for ` aws2 - s3 ` to verify the behavior of the ` uriendpointoverride ` configuration
removed unnecessary parameters from the getBitstampUserTransactions method in BitstampAccountService and added a new method in BitstampAccountServiceRaw to
added a try - catch block around the getComponentInstance method in BlueprintContainerRegistry . java to handle potential NoSuchComponentException to improve robustness by
change the return type of the push method from void to boolean in PushBuilder , ApplicationPushBuilder , and Stream classes to allow the push method to
refactored comparison logic in LegacyAddressTest to use BufferedReader for reading data to improve readability and maintainability of the test cases
changed the visibility of the method ` findDropTargetAt ` from package - private to public to allow access to the method from other packages
added a snackbar setup in DrawerActivity and refactored push notification handling in NotificationsActivity to improve user experience by ensuring the notification is
added debug logging and refactored channel closing logic in NettyAsyncHttpProvider . java to improve error handling and ensure proper resource management during channel
updated null checks and method signatures in LdapPasswordPolicyEnforcer . java to use ` StringUtils . isEmpty ( ) ` and ` getExpirationDateToUse (
refactor DefaultAnnotationEngine and Stubber classes for improved clarity to enhance maintainability and readability of the codebase
added an @ Ignore annotation to MemoryManagerTest . java to temporarily disable the test due to issue PHOENIX - 2840
nifi - 145 : add timezone support to about dto .
updated assertions in Splitter . java and StorageService . java for consistency and clarity to improve code readability and ensure proper splitting of boundaries based on
removed unnecessary exception handling for readObject ( ) in BeanContextSupport . java to simplify the code and improve readability
replaced synchronized block with synchronized blocks in CircuitManagerImpl . java to ensure thread safety when accessing activeCircuits
replaced GdxRuntimeException with IllegalStateException in ShaderProgram . java to improve error handling by throwing an IllegalStateException instead of GdxRuntimeException
flume - 153 . add getter and setter to sinkrunner and sourcerunner , to make it easy to use .
replaced error logging with info logging in FastBindLdapAuthenticationHandler . java to improve logging clarity and provide more informative error messages
refactored the ContainerOrderFocusTraversalPolicy class to improve focus traversal logic to enhance maintainability and readability of the code
updated ` getPointLength ` methods to return an integer instead of double and updated related classes to implement ` GeoLocusable ` instead of ` Geo
updated constructor declaration in CasRiskBasedAuthenticationEvaluationStartedEvent . java to improve code readability and maintain consistency
refactor connection handling in SchemaCrawlerMain and add logging in Executable to improve resource management and ensure proper database connection closure
change default TLS version from PREFERED _ TLS _ PROTOCOL to FALLBACK _ TLS _ PROTOCOL and add a new test class for
corrected a typo in the exception message in CountersManager . java to improve clarity and consistency in error reporting
updated conditional logic for stopping audio in MediaManager . java to ensure correct handling of audio queue position and avoid potential null pointer exceptions
updated debug log message formatting in HttpConnection . java to improve readability and maintainability of the log output
added ` @ Transient ` annotation to ` JpaPersistentPropertyImpl ` and corresponding unit tests in ` JpaPersistentPropertyImplUnitTests `
updated stack version assertions in UpgradeResourceProviderTest to use HDP 2.0 . 0 instead of HDP 2.0 . 0 to ensure correct stack version
change return types of eval methods from Symbol to Object in TruffleVM . java to improve type safety and prevent potential NullPointerExceptions
changed access modifier of isBinaryType method from private to public in SampleResult . java and modified output stream initialization in Proxy . java to enhance accessibility
updated the configuration key from " hive . tez . dynamic . parition . pruning . max . data . size " to " hive
refactor findProblem method in JavaEditor and remove redundant priority constants in JavaProblem to improve code clarity and maintainability by reducing redundancy
replaced the constant ` DEFAULT _ OFFHEAP ` with ` DEFAULT ` in ` DictionaryIndexType ` , ` BloomFilterHandler ` , and
updated line separators in TableWriterTest . java to use a constant LINE _ SEPARATOR to improve code readability and maintainability by using
refactor DebugHelper class to improve code organization to enhance maintainability and readability of the code
added a boolean field ` ownsTexture ` to the ` ParticleEffect ` class to check if the ` ownsTexture ` is true before proceeding
added additional LDAP authentication configurations to HiveConf . java to enhance security by providing additional LDAP authentication options
added import statement for SearchCatalogRequest . Scope in DatacatalogGetEntry , DatacatalogLookupEntry , and DatacatalogSearch classes to enhance code clarity
added Context import and modified input method logic in DetailActivity . java to improve code readability and maintainability
added a new test method ` convert _ of _ primitive _ to _ map _ of _ integer _ to _ primitive _ to _ object ` to
updated the size calculation in TestFileSystem . java from 500 to 50 and increased the size from 500 to 50 to optimize memory usage and increase the size
updated error message formatting in ContentTypeManager . java to improve clarity and ensure resources are closed before filing a bug report
changed the ` dropSequences ` method to be abstract and added a ` @ SuppressWarnings ` annotation to ` dropSequences ` methods across multiple
added a null check for the status variable in MainWindow . java to prevent potential NullPointerExceptions during execution
replaced direct assignment of ` f ` with a variable ` f ` in ` DocumentBuilder . java ` to improve code readability and maintainability
added null checks and style handling in HierarchicalIcons . java to improve robustness and prevent potential NullPointerExceptions
added a new test method ` findOneAfterUpsertForNonExistingObject ` to ` MongoTemplateTests ` to ensure that upsert functionality returns the inserted object
hbase - 13257 fix the calculation of mid = ( high - > high ) and mid = ( low - > high )
added a method to record launch statistics and updated launcher methods to handle null shortcuts to improve debugging capabilities and prevent potential null pointer exceptions
added Graphics2D rendering and disposed the graphics in JavaSEPort . java to ensure proper resource management and prevent memory leaks
refactor team creation and creation methods in InstructorFeedbackResultsPageData . java to simplify team management and improve code readability
updated ID generation logic in Inventory . java and added a test for inventory ID generation in InventoryTest . java to ensure proper ID generation and validate inventory
added a conditional check for the found variable before proceeding with the break statement to ensure that the loop is only executed when the found variable is present
updated method signatures to include return type annotations in multiple parser visitor classes to ensure correct handling of null return types in method declarations
added null check for blended tiles in TileMapRenderer and updated initialization logic in TiledLoader to improve robustness by handling potential null values graceful
removed multiple Java class annotations from the @ Classes annotation in mmm Probe . java and ppp Probe . java to streamline the code by
modified the formatting of the ` getArea ` method in ` IfcTools2D . java ` to improve code readability and maintainability
refactor lockOnSync initialization to use ` this ` instead of ` null ` to improve clarity and maintainability of the lockOnSync object
pipe : fix event handling in emzuli pipe event handler .
updated the timeout value in ZkController instantiation from 1000 to TIMEOUT to ensure the correct timeout duration is used for the ZkController instantiation
added a new test method ` passcode _ with _ client _ parameters ` to the ` TokenMvcMockTests ` class to verify the functionality of
added new imports for KeepWordFilter , LengthFilter , and CharArraySet in TestRandomChains . java to enhance test coverage for broken
removed JUnit Ignore import from RandomPlaneTest . java to clean up the code and improve readability
updated method calls from ` putI1 ` to ` putI64 ` and ` putI8 ` to use ` Integer . toUnsignedLong
refactored btCollisionObjectArray and btCollisionObjectArray to use btCollisionObject . getInstance instead of a native object to improve
added copyright management and updated copyright URL in BuildProperties and AboutDialog to improve copyright management and provide more informative copyright information
added a method ` getDistributedObjects ( ) ` to ` JetClientInstanceImpl ` to return distributed object information to enable retrieval of distributed objects for
added debug print statements to FinSet , FinCount , and Inertia classes , and updated expMOI values in MassCalculatorTest to improve
updated memory allocation from TOTAL _ MEMORY to MAX _ MEMORY in SmartDexingStep . java to adjust memory usage based on the
updated exception handling from MetadataException to Exception in StandaloneSchemaFetcher . java and modified method signature in CreateAlignedTimeSeriesPlan . java to improve
corrected the spelling of " Co - founder " to " Bisq co - founder " and refactored the validation logic in TradeData
updated JsonLoaderTest to use json ( ) method and added exception handling for big - integer types to improve test readability and ensure proper handling of
updated the threshold for tableSize from 1 < < 30 to 0x40000000 in ObjectSet . java to ensure that the required capacity is within
updated import statements and modified data scale handling in ColumnSnapshotGenerator . java to enhance code clarity and prevent potential null pointer exceptions
removed @ AddToRuleKey annotations from several fields in AppleTest . java to simplify the code and improve readability
added a try - catch block to handle SecurityException and modified content handling in FileHelper and TextHelper to improve error handling and ensure correct content retrieval
added a new constant ` StyleWithMultipleAttributes ` and updated the ` resolveAttributes ` method in ` ShadowThemeTest ` to support multiple attribute resolution
updated HSSFWorkbook to use size ( ) instead of - 1 for sheet name checks to ensure correct handling of sheet names in the workbook
updated the tint variable from ` primaryColor ` to ` elementColor ` in ` ManageAccountsActivity . java ` to ensure consistent color
added null check for replyHandler in DefaultEventBus and modified path resolution in DefaultPlatformManager to ensure robust handling of null replyHandlers and improve path resolution
added support for the " binaryCollationName " configuration in MariaDbDbmsType , MySqlDbmsType , and FilterSortedSkipOptimizer to enhance
added a method ` whenType ` to check if a tree type is a subtype of ` Tree ` to provide a mechanism for determining if a tree
refactor navigation handling in ItemLauncher to improve code readability and maintainability to enhance code clarity and maintainability by centralizing destination retrieval logic
updated the return statement in FeedREST to return a temporary redirect based on application settings to ensure proper redirection to the correct public URL for the application
[ hotfix ] [ kinesis ] add check for non - serializable deserializer in flinkkinesisconsumer
camel - 14497 : fix license header and javadoc warning in camel - jbang
refactor LeaderElectionTest to use a try - finally block for closing ZkClient to ensure proper resource management and prevent potential resource leaks
renamed methods ` setIconAndDimTransitionProgress ` and ` setIconsAndBannersTransitionProgress ` to ` setIconsAndBannersTransitionProgress `
refactored the ` read ` method in ` ProxyHandler ` to use a dedicated ` read ` method to improve code clarity and maintainability by
replaced ` BufferUtil . allocate ( length ) ` with ` ByteBuffer . allocate ( length ) ` in ` ABCase1 _ 2 . java `
modified the ` prepareStreamsToUpload ` method to return a boolean instead of a void to simplify the method signature and improve readability
replaced direct comparisons in AbstractConfigLoader with Integer . compare for order comparisons to improve code readability and maintainability by using a standard comparison
added a new file PicOfDayAppWidget . java to handle app widget updates to provide functionality for retrieving and updating app widgets in the application
cloudstack - 4892 : fix internallbvmserviceofferingid to be a long instead of a long
updated imports and refactored join condition handling in HiveParserCalcitePlanner . java to use HiveRelOptUtil instead of RelOptUtil
added @ Deprecated annotation to multiple transformation classes to indicate that these classes are outdated and should not be used in new development
added user and password options to the NodeToolCmd class for accessing jmx to enhance security by allowing users to access remote jmx resources
removed redundant initialization of BytesRef in Stemmer . java to improve code clarity and maintainability
removed unnecessary null checks and updated widget applying logic in AppsCustomizePagedView . java to improve code clarity and ensure correct handling of multiple
ggb - 132 fix thumbnail for 3d view
updated rotation calculations in GcodeRenderer . java to ensure rotation values are within a valid range to improve rendering accuracy by avoiding negative rotation values
added a new option ` WORKSPACE ` to the ` OptionEnum ` for setting the workspace directory to allow users to specify a workspace directory for
corrected the file path from " options . apt " to " options . html " in CLIManagerTest . java to ensure the correct file
updated ScimUtilsTest to use JUnit 5 annotations and refactored test methods to use JUnit 5 annotations to improve test clarity and maintain
refactor OAuthConfirmationController to use a model map instead of a modelAndView parameter to improve code clarity and maintainability by using a more de
hhh - 12265 fix flaky test in hibernateit . testcachehitcount ( )
refactor EventBusHook class to improve event handling logic to enhance event handling efficiency and maintainability
refactor MultiPaintEventTest class for improved readability to enhance maintainability and facilitate future updates
removed the final modifier from mNewScale assignment in WorkspaceStateTransitionAnimation . java to simplify the assignment of mNewScale to improve code readability
refactor SyncFactory class to improve code readability to enhance maintainability and facilitate future updates
added uniqueKey handling to the LukeRequestHandler to ensure that unique keys are handled correctly in the schema
added roundBorderColor and strokeColor document filters to BorderEditor and updated EditableResources to utilize this new color property to enhance the visual appearance
added TruffleBoundary import and annotation to TruffleBoundary in Assert . java and added CompilerAsserts in BinaryParserException . java to ensure proper
[ hotfix ] [ test ] fix typo in defaultschedulerbatchschedulingtest
added logging statements in GatewayRSocket , GatewaySocketAcceptor , and PingPongApp , and adjusted return values in PingPongApp
updated RecentChatFragment to implement Toolbar . OnMenuItemClickListener and added menu navigation functionality to enhance user experience by providing feedback when a user is under
refactor InfoDropTarget and UninstallDropTarget to extend UninstallDropTarget and update method signatures accordingly to improve code clarity and maintainability by
replaced ` add ` and ` removeTail ` methods with ` push ` and ` peek ` methods across multiple classes to streamline scope management and improve
updated API URLs from " test . wikipedia . org / w / api . php " to " commons . wikimedia . org / wiki
refactor index handling in Stmt . java to use a separate setIndex method to improve code readability and maintainability by encapsulating
replaced calls to ` Collections . sort ( ) ` with ` Collections . sort ( ) ` in multiple classes to simplify code and improve readability by
added DateTimePatterns for full and medium date patterns in FormatData _ hr _ HR . java to enhance date formatting capabilities for better user experience
added a call to ` clickedView . clearFocus ( ) ` in ` DetailFragment . java ` to clear the focus of the clicked view
updated language selection logic in DescriptionsAdapter and removed unnecessary null checks in SpinnerLanguagesAdapter to improve code clarity and ensure proper selection behavior based on
updated time zone names from " WSST " to " WSDT " across multiple files to standardize time zone representation across different locales
added native methods for registerGlobal , registerWeak , and accessFieldsViaHandle in FastGetField . java to enhance functionality for managing global and weak
added default type handling for UNION and NULL types in ReflectData . java and updated test assertions in TestReflect . java to ensure proper handling of
increased the timeout duration from 300 milliseconds to 1000 milliseconds in the SedaBlockWhenFullTest . java file to allow more time for the test to
added a null check before remapping the RClass in ResourceMerger . java to avoid potential NullPointerExceptions when the RClass is null
added constructors to multiple HapiFhirDialect and HapiFhirMariaDBDialect classes to set the database version to ensure compatibility with
camel - 13346 : fix http producer to set connection header to ` ` connection ' ' when the endpoint be specify to be close .
increased timeout from 60000ms to 120000ms in BasicDistributedZkTest . java to allow more time for socket timeouts
added an assertion to retrieve the count of tickets based on the status and final _ price _ cts in BaseReservationFlowTest . java to ensure
refactor Parser class to improve code readability to enhance maintainability and facilitate future updates
refactor CasProcessingFilter class to improve code readability to enhance maintainability and facilitate future updates
replaced instances of ` NestableNode ` with ` getFirstElementChild ( ) ` in multiple parser classes to simplify the code and improve readability by
[ optaplanner - 305 ] fix lookupstrategyresolver to return immutablelookupstrategy if the object be an enum .
updated metaPortStart and dataPortStart from 20001 to 11001 and added a waitingToShutDown method to ClusterNode to adjust port
change log level from warn to info for not cleaning cached beans to provide more informative logging when no such field is available
set mContentType to " application / octet - stream " in WebdavEntry . java to ensure proper content type handling for application / octet
added a method ` getQueueSize ( ) ` to ` LazyTraceThreadPoolTaskExecutor ` and created a corresponding test class ` LazyTraceThreadPoolTask
bugfix : distanceop do n ' t respect min distance
changed the ` required ` field from ` required ` to ` requiredLabel ` in ` AbstractUITag . java ` to align the field with the
removed the ` next ( ) ` method and its implementation from the ` PurgingPartitionIterator ` class to streamline the iterator ' s functionality by
added a method ` getAsUnescapedPath ( ) ` to ` SchemaPath ` and updated ` VectorUtil ` to use this method to
added methods ` getHeight ( ) ` and ` getWidth ( ) ` to ` BaseMonochromeBitmapSource ` to provide access to both height and width
added validation to ensure polygons contain at least 3 points and updated localVertices assignment logic to ensure that polygons contain at least 3 points and improve
replaced instances of ` ObjectMapper ` with ` ObjectMappers . newDefaultInstance ( ) ` in multiple files to utilize ` ObjectMappers . newDefault
add null check for the coefficient array in GeoImplicitCurve . java to ensure robustness by preventing potential NullPointerExceptions
updated ExternalNameRecord to use readUByte ( ) and readUnicodeLEString ( ) for name length and multi - byte flag handling to improve
updated the description of the JMS Destination type in AbstractJMSProcessor . java to correct the spelling of " QUEUE " to " 
added functionality to return login prompts based on the ` returnLoginPrompts ` flag in ` LoginInfoEndpoint ` to enhance user experience by allowing
replaced the method ` remove ` with ` removeIf ` in ` AbstractController . java ` to improve code readability and maintainability by using a
added a switch statement to toggle the spin animation in PieChartActivity to enhance user experience by allowing spin animation for the chart
cloudstack - 4892 : fix copy _ vhd _ to _ secondarystorage return null error message
hbase - 26165 skip normalizing table that do n ' t have quota
updated import statements in AndroidInput . java and added a resize method in AndroidInput . java to streamline imports and improve code clarity
added a new method ` propertyValuesOf ` to the ` PropertySupport ` class and implemented a new method ` propertyValuesOf ` to enhance property
added JUnit @ Ignore annotation to ClientMapNearCacheTest . java to temporarily disable the test due to blocking PRs
corrected the bounding box in the Hopperhock subtile to ensure proper rendering of items in the world
added authentication dialog for username and password in SsoWebViewClient . java to enhance user experience by providing prompts for authentication requirements
refactor term document handling in TestStressIndexing2 . java to improve document deletion logic to enhance code clarity and maintainability by centralizing
[ flink - 22559 ] [ test ] disable upsertkafkatableitcase for now
replaced direct calls to ` pg . types . get ( j ) ` with ` computeIfAbsent ( j ) ` in ` ResTable .
added a configuration to accept single values as an array in DefaultEntityMapper to ensure proper handling of single - value arrays in JSON processing
updated localization update message to include UK , UK , and SL to provide clearer localization information for users
refactor SHORTCUT _ CATEGORIES initialization to use ResourceUtils for handling application categories to improve code clarity and maintainability by
updated method name from ` visitExpressionInstanceOf ` to ` visitRelExpressionInstanceOf ` and added corresponding tests in ` FEELParserTest ` to
nifi - 164 : add mime . type attribute to gethttp to set the mime type of the flowfile
[ fhir - 20535 ] [ table - api - fhir ] make resourcehistorytable . toprovenance ( ) return the
renamed exit button to done button and updated related listener names in HelpActivity and SearchBookContentsActivity to improve clarity and consistency in button interactions
[ hotfix ] [ doc ] fix typo in natsconfiguration javadoc
refactor ` invalidateStalePartition ` method to accept a list of PartitionNameWithVersion objects instead of a single ` forEach ` method to improve code
update viewresultsfullvisualizer to use a circularfifobuffer instead of a boundedfifobuffer
updated icons from ic _ group to ic _ chat _ bubble in UsersAndGroupsSearchProvider , ShareUserListAdapter , and UserListAdapter to
updated method names from ` getLong ` to ` getLongVolatile ` in ` BroadcastReceiver ` and ` BroadcastReceiverTest ` to improve clarity and consistency in
updated test method names and import statements in MocksCreationTest . java to improve clarity and consistency in naming conventions
added a constant DATA _ SOURCE _ NAME in CSVThirdEyeDataSource and changed the visibility of the generateDetectionConfig method in YamlDetectionConfig
updated phase timeout from 10 seconds to 30 seconds in the awaiter method calls to allow more time for phasers to complete before proceeding
removed the ` BuildSlaveFinishedStatusEvent ` class and replaced it with a direct call to ` publishBuildSlaveFinishedEvent ` to simplify the event
cloudstack - 6392 : fix utf - 8 encoding of template uuid in vmwarestoragemanagerimpl
eranmes : add a test for depositing a workspace item without a workflow
updated the stream returned from ` classpath ( ) . stream ( ) ` to ` distinct ( ) . stream ( ) ` in ` ClassLoaderSupportImpl
removed the isBoxedPrimitive method from Unbox . java to streamline the code by eliminating unused method
updated command - line arguments handling in SpecificCompilerTool and added a new test for ordering of flags in TestSpecificCompilerTool to improve command -
modified HiveMetaStore to check if the table is external before deleting the directory to ensure that the directory deletion only occurs when the table is not external
added new configuration options for asynchronous execution threads and improved exception handling in HiveServer2 to enhance flexibility in managing asynchronous execution threads and provide clearer error
added a try - catch block around the dismissDialog method call to handle potential exceptions to improve robustness by preventing potential exceptions during dialog dismissing
refactor UpgradeResourceProvider to use a constant for service and component names instead of hardcoded strings to improve code clarity and maintainability by
added a new variable ` currentConfInfo ` in ` OperationSetTelephonyConferencingSipImpl . java ` to improve the
added a method ` clearEntries ( ) ` in ` FlutterLogTree ` and updated ` logTree ` method in ` FlutterLogView
added a check for input and output shutdown conditions in ChannelEndPoint . java to ensure proper handling of socket shutdown scenarios when the channel is open and
refactor SetNullableGenerator class implementation to improve code readability and maintainability
camel - 10278 : camel - example - reportincident / webservices should use newfilecomponent instead of filecomponent .
refactored import statements and modified form attribute handling in NettyRoutingFilter . java and FormIntegrationTests . java to streamline import statements and
added ` hello ` methods to ` AbstractBaseService ` , ` IBaseService ` , and ` MyService ` classes , and implemented their implementation
replaced ` update ` method with ` update ( ) ` and modified lifecycle listener handling in ` Lwjgl3Application ` to simplify lifecycle listener
updated FG _ FK color from 90 to 200 in UIUtil . java to improve the visual consistency of the color representation
added import statement for JavaScriptObject and set audioFormats . mp3 . required to false in SoundManager . java to disable audio format requirements for
refactor assertions in SecondaryIndexManagerTest to use a list of built indexes instead of a string to improve code readability and maintainability by
[ pmd ] add version preference for eclipse and pmd plugin
[ hotfix ] [ test ] refactor customserializationitcase to use optional
refactor MediaFormatUtil class to improve code readability to enhance maintainability and facilitate future updates
added isCellEditable method to GeneralTab class to disable cell editing functionality
added a method ` isOnlyPrintCommands ( ) ` to ` AbstractUnusedDependenciesFinder ` and modified message formatting in ` JavaBuckConfig `
added a static counter to the VocalTractModifier and updated the vscales value in VocalTractScalingProcessor to track the number
updated import statements in TestUDFTest , TestGenericUDFTest , and TestUDFRound , TestGenericUDFConcat , and Test
added hashcode and equals methods to UaaAuthenticationDetails class to ensure proper object comparison and hashing functionality
replaced SkeletonControl with AnimComposer and SkinningControl in TestSkeletonControlRefresh . java to streamline animation handling and improve code clarity
rename ` NodeFilter ` interface to ` NodeCountFilter ` and update related methods to improve clarity and consistency in naming conventions
changed the condition from checking sync block size to checking if it is less than or equal to the expected value to ensure that the condition is valid for
updated debug expression parsing to use ` 366 ` and ` getFloatType ( 128 ) ` instead of ` 365 ` and ` 366 `
updated condition in ExcludeDependency . java to check for transitive dependencies in the classpath instead of an empty list to ensure dependencies are excluded from classpath
replaced ` tmp ( ) ` with ` dst2 ( T v ) ` and updated method signatures to use ` dst2 ( T v ) `
changed the initialization of the ` args ` array from an empty array to an empty array to ensure that ` args ` is always initialized before use
added a method to handle linker flags in RustBinaryDescription and updated rustcFlags and linkerFlags in RustLinkerIntegrationTest
simonstewart : do n ' t wait for the status message when the user click on it
added DAG name configuration to HiveConf and modified logging in GenericUDTFGetSplits to include external DAG names to enhance flexibility in
added import statement for java . io . File in TileAtlas . java to enable the use of file - based file handling functionality
updated EscapeProcessingOutputStream and GradleDaemonExecutor to use AtomicBoolean for closed state and improved error handling to ensure proper resource management and prevent potential memory leak
updated the ` validateQuery ` method to accept an additional ` Object . . . arguments ` parameter and modified the ` validateQuery ` method to include
updated INDEX _ VERSION from 1 to 2 and refactored getTree method implementations in LuceneExecutor . java to improve code clarity and maintainability
[ hotfix ] [ kryo ] add unit test for kryoserializerregistrations
added null check before adding configType to configTypesUpdated in BlueprintConfigurationProcessor . java and updated test cases in BlueprintConfigurationProcessorTest .
refactor boolean handling in MetaStoreDirectSql . java to utilize BooleanUtils for better compatibility with MySQL to improve code clarity and maintainability by
added a call to hideCustomizationDrawer ( ) in Launcher . java to ensure the customization drawer is hidden properly
refactor TermVectorComponent to use a constant for warning keys and add a new constant for TV _ KEY _ WARNINGS to improve code clarity and
added optimistic type logging and improved logging clarity in Compiler . java to enhance error handling and provide clearer visibility into the compile job execution
refactor Expect class to improve code readability to enhance maintainability and facilitate future updates
added UnixSocketConfigurationStrategy to DockerClientFactory and created a new UnixSocketConfigurationStrategy class to support Unix socket access for docker connections
added JUnit 5 @ Tag annotation to CloseableDoSFilterTest and overridden test methods in CloseableDoSFilterTest to enhance test coverage for 
camel - 16197 : camel - reactive - streams should provide a stream name when there be no active subscription .
refactor vectorization logic to use TezWork instead of MapRedTask to improve type safety and clarity in handling MapWork instances
added a boolean parameter to the constructor calls in StringAppender , LogDivertAppender , and LogDivertAppender classes to ensure proper initialization of the
add null check for GuiPackage before calling updateCurrentNode ( ) and modifying its usage in JMeterTreeModel . java to avoid potential NullPointer
truffle : make linkage . isweak ( ) return an array instead of a long .
refactor XShareAuto , LoadClassNegative , XCheckJSig , and ReadFromNoaccessArea classes to improve code organization and maintainability
test : add unit test for defaulttransactionthreadlocal . get ( )
added a check for invalid and non - exist operations in HiveStatement . java to improve error handling and provide clearer logging for invalid and non -
rename ` ALTER _ TABLE _ ALTER _ COLUMN _ NULL ` to ` ALTER _ TABLE _ ALTER _ COLUMN _ DROP _
camel - 14497 - camel - aws - secrets - manager : add unit test for aws - secrets - manager
refactor SimpleTree class to improve code readability to enhance maintainability and facilitate future updates
removed the exception message from the return statement in UserREST . java to simplify the error handling by removing unnecessary string concatenation
modified the ` fromContent ` method to accept a ` subTree ` parameter to allow for more flexible handling of sub - trees in the ` Result
modified the calculation of column width in Sheet . java and added a new test method in HSSFSheet . java to ensure accurate column width
added a configPath parameter to the Commands . less method in Builtins . java to provide additional configuration options for command execution
replaced ` Set ` with ` Collection ` in ` DotWriter ` , ` print ` , and ` GraphExecutable ` classes to utilize a more
update SSHD image from " @ sha256 " to " 1.0.0 " in TestcontainersConfiguration . java to ensure compatibility with the latest
added an assertion to check if the hostId value is not null in AgentManagerImpl . java to ensure that hostId is validated before proceeding
refactor ` DefaultGroupKeyGenerator ` to use ` BlockSingleValIterator ` for key generation to simplify key generation logic for multi - valued columns
updated test methods and assertions in TestMultiMMap . java to improve error handling to ensure correct handling of EOFExceptions during seek operations
refactor code to use a variable for the gate variant to improve code readability and maintainability by using a more descriptive variable name
rename the method ` put ` to ` putObject ` in ` GraphHopperConfigMixIn ` to improve clarity by using a more descript
updated visibility handling in CellLayout and modified drag exit methods in DragController and Workspace classes to improve drag - and - drop functionality and enhance user experience by
updated ModifyRequestBodyGatewayFilterFactory to use ` originalBody ` instead of ` o ` and added a new test for handling empty request bodies to improve
added package accessibility checks in ConstructorFinder , FieldFinder , and MethodFinder classes to ensure proper access control for non - packaged types
changed logging level from warn to trace in LoggingHandler . java to improve logging clarity and reduce verbosity
refactor prefix extraction logic in WhiteBlackList . java and add a new test class Issue348 . java to improve code clarity and ensure correct
added imports for AppTourHelper , AppTourHelper , Display , and ShowcaseViews , and modified options menu handling in GalleryActivity
refactor MongoDBServiceFactory to use a static MongoDBService instance and add a null check for the MongoDBService instance to improve code clarity and prevent potential
added methods to prevent code formatting for final booleans in InlineConstantMutatorTest . java to enhance code readability and maintainability by ensuring correct formatting
updated the ` decode ` method to include a ` Blackhole ` parameter and added a ` blackHole ` consume functionality to enhance the decoding process by
fix : update gapic - generator - java with mock service generation fix ( # 43 )
[ kssf ] fix dptunits to return a map . entry instead of a string
added a call to clearWitnesses ( ) in ManagerTest . java to ensure witnesses are cleared before running tests
do n ' t throw prestoexception when abort in jdbcpagesink
updated stack handling in NativeError . java to utilize ScriptFunction for getting and setting stack properties to improve code clarity and maintainability by centralizing
added a check to return false if the path name starts with " . " in DrillPathFilter . java to ensure proper handling of paths with
[ te ] thirdeye - anomaly : rename onboard to autoload in thirdeye anomaly configuration .
added a call to clearIndex ( ) in BasicFunctionalityTest . java to ensure the index is cleared before running tests
updated the BOLDWEIGHT _ NORMAL constant from 190 to 0x190 in HSSFFont . java to correct the font weight for
changed the ` fThreadGroup ` variable to be volatile and modified the ` lookForStuckThread ` method in ` Timeout ` to ensure thread
removed unnecessary final modifier from getValue ( ) and setValue ( Object value ) methods in ValueResultData . java to improve code readability and maintain consistency
updated hashCode ( ) and equals ( ) methods in FuzzyQuery . java to ensure proper hash code generation and prevent potential NullPointerExceptions
removed unnecessary System . err . println statement from PushedResourcesTest . java to clean up the code and improve readability
changed return types of removeFile and removeDirectory methods from SharedRandomAccessFile to void to simplify method signatures and improve code clarity
updated JDBC product version from " 2.1 . 1 " to " 2.1 . 0 " in JdbcDriverInfoRetrieverTest and SchemaCrawlerCoverageTest to reflect
updated the method to return a resolved principal instead of creating a new one to improve the reliability of the principal retrieval process
changed log level from info to warn in OpenWebNetBridgeHandler . java to reduce log verbosity and improve clarity of error messages
updated method names from ` intHash ` to ` hash ` across multiple classes to improve clarity and consistency in hashing methods
added a new constructor ` ThumbnailGenerationTask ` to ` ThumbnailsCacheManager ` and modified the conditional check in ` FileUploader ` to
updated the condition for stopping the GroupSelectionQuery to check if the number of tries is greater than or equal to 5 to ensure that the loop continues
added a new file ` Bug1933922 . java ` implementing a program map and a method to retrieve the current thread ' s program to
updated comparison logic in MultipleSeriesProvider , AjaxDecoratorMapper , and Tokenizer classes to improve code readability and maintainability
updated character check from ' 33 ' to ' 32 ' in FileResolver . java to ensure proper handling of control characters such as 0 - 31
added a call to requestFocus ( ) in the cmp component to ensure the component ' s focus is properly managed during display operations
[ # 941 ] instructor : add new test data to home page ( # 942 )
rename ` JsonParserAsync ` to ` JsonStreamParser ` across multiple files to improve clarity and consistency in naming conventions
updated Crouton handling in DetailFragment and added onPause method in MainActivity to improve user experience by providing feedback when a message is updated
added a new test method ` testSchemaQueryAndFetchWithUnrelatedTemplate ` to ` IoTDBSchemaTemplateIT ` for schema query and
refactor Dialog class to improve code readability to enhance maintainability and facilitate future updates
replaced the use of ` Runtime . getRuntime ( ) . exec ( args ) ` with ` ProcessBuilder . start ( ) ` in ` SourceCompiler .
updated metrics in HintedHandOffTest to use InetAddress . getByName ( " 127.0 . 0.1 " ) instead of InetAddress . getLocalHost (
refactor controller and base variable assignments in Metrics . java to improve readability and maintainability of the code
added assumption checks in DaemonLifecycleManagerTest , InstallCommandIntegrationTest , and InstallCommandIntegrationTest to ensure tests are executed on the correct operating system and
refactor JVMCIVersionCheckVendorTest and JVMCIVersionCheck to use a new method getRequiredProperty for property validation to improve code
refactor Mockito class to improve code readability to enhance maintainability and facilitate future updates
[ hotfix ] [ test ] fix typo in testlargepageuseforuxmemory
updated ` readAllBytes ` method to use ` source . getSource ( ctx ) ` in ` BinaryParser ` , ` PlainTextParser ` ,
added a new ` MultiPartFormDataCompliance ` enum and its getter / setter methods in ` HttpConfiguration ` and created a new ` MultiPartFormData
added GradleVersion . version ( " 7.2 " ) to GradleDistributionManager . java to ensure compatibility with JDK - 17
refactored the ` addType ` method in ` DatabaseSnapshot ` and added a new method ` addType ` in ` SnapshotControl ` to
refactor Term class to improve code readability to enhance maintainability and facilitate future updates
modified the return statement in ChangeSet . java to handle null or empty runWith cases to improve robustness by preventing potential NullPointerExceptions
added a test method ` testIsSameRM ` to ` ActiveMQXAConnectionFactoryTest ` for verifying XA resource equality to ensure
refactor multiple Java files to improve code organization and maintainability to enhance maintainability and readability of the codebase
pdfbox - 4892 : do n ' t count negative pixel in localblockbinarizer , a suggest by valerybokov
updated mTintAmount handling in TaskView to use mTintAmount instead of dimAlpha and icon Tint to ensure consistent tinting
added a new file ` SumZeroAggr . java ` implementing ` DrillAggFunc ` that implements ` DrillAggFunc ` to implement
updated string concatenation syntax in FirstValueFunctionIT and NthValueFunctionIT classes to improve readability and maintain consistency in naming conventions
refactor getAllocationFailWarningMessage method to include a new static method ` getAllocationFailWarningMessage ` and improve error message formatting to enhance code
added a null check for propName before adding it to roleObject to avoid potential NullPointerExceptions when propName is null
added ` @ VisibleForTesting ` annotations to ` StatusBarTouchController ` , ` mTouchSlop ` , and ` mCanIntercept ` ,
added a new method ` logContainerStream ( String containerId ) ` to the ` DockerClient ` class and modified the ` logContainer ` parameter
add a new file TestMVStoreCachePerformance . java to implement performance testing for MVStore caching functionality
updated the PrimitiveType parameter from " L " to " J " in PrimitiveType . java to ensure compatibility with the latest coding standards
changed the access modifier of the ` delegatingApplicationListener ` method from package - private to static in ` WebSecurityConfiguration . java ` to
set the message body to null in RestBindingAdvice . java to ensure proper resource management and prevent potential memory leaks
added a new file ` FileDeletingTasklet . java ` and ` TaskletJobFunctionalTests . java ` to handle file deletion tasks to
ggb - 132 update size keep drawables in companion and center , and center / scale , and center / scale in plane companion
updated variable names and comments in BitUtil , Int2IntCounterMap , and Int2IntHashMap classes to improve code readability and maintain consistency
updated method signatures to accept a state ordinal instead of a string to improve clarity and consistency in event handling across the application
added user agent checks for video thumbnail requests in multiple classes to ensure proper handling of video thumbnail requests based on user agent
updated error handling in ErrorCheckerService to handle both - 1 and - 1 error lines more effectively to improve user experience by providing more informative error
added conditional logic to handle menu button vertically based on the theme constant to improve user interface responsiveness based on user - defined theme settings
added additional Skia dependencies and preload variable in Skia . java to enhance compatibility with newer Skia installations
added support for the " com . google . bitcoin . unittest " network ID in NetworkParameters . java to enable testing of the " unittest " network
added error handling for format arguments in QueryCommand and corresponding integration tests to ensure proper handling of format arguments in the query command
updated variable references from ` capacity ` to ` length ` in ` IntIterator . java ` to improve code clarity and maintainability by using a more
updated ` walkRuleAndAdd ` method to include ` projectConfig . getSrcRule ( ) ` and added a new ` srcTarget ` parameter
add support for source querying in module file patch .
[ java ] remove unnecessary check for protocol version in election .
added conditional logic to set SINGLE _ SESSION _ PER _ ACCOUNT policy to ALWAYS _ NEW _ CLIENT based on SAML authentication status
added null checks for ` mappedTableResource ` in ` ReadBatch ` , ` WriteBatch ` , and ` ReadBatch ` classes to ensure that
refactor JMS subscriber and receiver classes to use Utils . close method for better resource management to improve code maintainability and reduce boilerplate code
refactor AnonymousAuthenticationFilter to utilize a deferred context for authentication handling to improve clarity and maintainability of the authentication process
updated the ` removeActor ` method to include an ` unfocus ` parameter to ensure that the removed actor is only removed when the parent is not
refactor prompt calls to use a valid configuration string instead of a hardcoded string to improve readability and maintainability of the code
added logging functionality to Netty and RoutingInBoundHandler classes and modified flush and write logic in RoutingInBoundHandler to enhance logging capabilities and ensure
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
replaced the ` update ( ) ` method with ` SwingUtilities . invokeLater ( this : : update ) ` in ` CodeDependenciesPanel . java ` to
camel - 16274 : camel - core - use groovy language to instantiate script from cache instead of groovy shell .
refactor the handling of plugin dependencies to return a set instead of a list to simplify the code and improve readability by reducing redundancy
changed access modifiers of ARGS _ OPTION and ProgramOptions classes from private to public and modified method visibility in ProgramOptions and ProgramOptionsUtils to
replaced ShadowSharedPreferencesEditor with TestSharedPreferencesEditor and introduced a new TestSharedPreferencesTest class with a commit method to simplify the code and improve
added aliases retrieval and certificate chain retrieval in HttpsMessenger . java to enhance security by retrieving the storage alias from the storage key
refactor response handling in HttpCommandExecutor to improve error handling to enhance robustness by catching potential ClassCastExceptions during response conversion
changed the access modifier of the ` updateImage ` method from private to protected in ` ImageButton ` and ` ImageTextButton ` classes to allow
add a new patch for drop resources in Block . java and update related methods in Block . java to enhance resource management and prevent potential ClassCastExceptions
added native methods ` hasSpatialLocationCalculatorConfig ` , ` tryGet ` , and ` frontSpatialLocationCalculatorConfig ` to ` DataOutputQueue `
updated multiple Java files for consistency and clarity to enhance maintainability and readability of the codebase
refactor TreeTrie to use a new method ` isEmpty ` for better readability to improve code clarity and maintainability by encapsulating the
updated foreground and background parameters from ` col ` to ` r ` and ` g ` and ` b ` in ` AttributedStringBuilder . java `
updated PeerSync to conditionally set ` doFingerprint ` based on the " solr . disableFingerprint " system property to ensure that ` doFingerprint `
changed the visibility of ` moveFunds ` method from private to public in ` GDAXAccountService . java ` to allow external access
added a ` BeforeConvertEvent ` listener and modified ` assertUpdateableIdIfNotSet ` method calls in ` MongoTemplate ` and ` PersonWith
refactor CollectionContainer , CollectionItem , CollectionContainer , CollectionItem , CollectionItem , and SetTransactionTest to use a custom HazelcastInstanceFactory
tika - 164 . close inputstream if it be null , close it if it be null .
replaced ` ApiException ` with ` ApiBag . ExceptionWithErrObject ` in ` TestCollectionAPIs . java ` to improve error handling by using
removed unnecessary semicolons in the ` loadConfig ` method call to improve code readability and maintainability
updated teammatesLog string format in InstructorFeedbackAddActionTest . java and InstructorFeedbackCopyActionTest . java to improve clarity of
[ hotfix ] [ runtime ] fix checkstyle violation in externalworkerservice
refactor step handling in DisplayTextVirtualDatapoint , HmDatapoint , and HomematicTypeGeneratorImpl classes to improve code readability and
added multiple log statements for obtaining and releasing shared locks in PostgreSQLReadWriteAdvisoryLocksTest . java to improve logging clarity and
removed redundant call to scheduleJobs ( ) in BaseSchedulerServiceImpl . java to streamline code and improve readability
simonstewart : fix the lameness of the testgettextcontent test
refactor Logger class to use a ThreadLocal for logger management to improve thread safety and prevent potential NullPointerExceptions
updated ` convertToCompilationUnit ` method to use ` @ VisibleForTesting ` and replaced ` JMockit ` with ` MockitoJUnit ` in ` Function
added a new method ` boxedTypeOrType ` to handle primitive types and modified type checking logic in ` Types ` , ` Infer `
updated orientation handling in RecentsView and updated TaskView initialization in RecentsView to ensure correct orientation state is set based on the new task view
hbase - 24435 testflushfromclient should use getregions ( ) instead of getliveregionserverthreads ( )
added logic to delete the original repository if it has contract details to ensure the cache is cleared when a contract details is available
updated TOKEN _ ISSUE _ FEE calculation and adjusted balance calculations in TokenIssueProcessor , TokenIssueProcessor , and Program classes to ensure
refactor cache management in RealisticRenderStrategy to utilize a boolean flag for clearing textures to improve performance by avoiding unnecessary apMap and tex
refactor Blit . java to use a temporary variable for raster creation and add a new class Bug7049339 . java to improve code
added a flag ` isUnselectedStyle ` and modified ` getStringWidth ` methods in ` Component ` , ` Label ` , and ` DefaultLookAndFeel
updated ArrayList initialization to use a size of zero instead of a fixed size to improve performance and reduce memory usage during configuration
removed the ' flags ' parameter from method signatures in ShadowApplicationPackageManager . java to simplify method signatures and improve code readability
refactor PingRequestHandler to improve code organization to enhance maintainability and readability of the code
added a new constant MP4 _ ASSET _ WITH _ INCREASING _ TIMESTAMPS _ URI _ STRING and updated related test
added a check for the current firmware before updating to the latest version in TradfriGatewayHandler . java to ensure that the Gateway does not
refactor AjaxElementLocator class to improve code readability to enhance maintainability and facilitate future updates
updated display condition in BoxLayout and DefaultLayout to include " table - cell " to ensure proper layout handling for table cells
refactor JsonDecoder to handle both START _ ARRAY and END _ ARRAY tokens correctly and add a new test for reordering fields to improve
updated the removal listener to include removalCause as a parameter to enhance flexibility in handling removal notifications
added JUnit import and @ Ignore annotation to SavepointTestBase . java to temporarily disable tests that are not ready for execution
added two @ Test annotations to DroolsMvelParserTest . java to ensure proper testing coverage for DroolsMvelParser functionality
changed fields from private to private final in ContextRegisterListener . java to ensure immutability and enforce immutability of fields
refactor ObjectHashSet to include a cacheIterator parameter and improve iterator initialization to enhance flexibility and flexibility in managing hash set iterators
added a new constant ` BATCH _ BYTES ` and modified conditions in SparkReduceRecordHandler , ReduceRecordSource , and VectorizedRow
updated context modes from MODE _ WORLD _ READABLE to MODE _ PRIVATE in AppSettings , UpdateUtils , and UpdateUtils to ensure
updated log message formatting and added abort method handling in JdbcProxyGenerator . java to improve clarity of logging and ensure proper handling of abort scenarios
updated the method call from ` getState ( ) ` to ` mState ` and added accessibility support to ensure proper accessibility behavior based on the current state
change log level from warn to debug in ProtobufLogReader . java to reduce log verbosity and improve readability
updated scope handling in UaaTokenServices and added a new test in UaaTokenServicesTests to ensure that the scope is longer than 1000 characters
updated import statements and added a toString method to AvailableJDBCDrivers class to improve code clarity and provide a clearer string representation of
[ drools - 1342 ] add executablecommand interface to allow to execute a kie - api command
deleted the JdbcTableService . java file to remove unused code to streamline the codebase
added padding getter methods to CellLayout , modified bitmap creation in Launcher , and modified bitmap scaling in Bitmap creation to improve layout padding management and ensure
modified the logic for retrieving candidate candidates based on the length of the string to ensure that candidate lists are only fetched when the string is non - empty
updated SamlMetadataUIParserAction , SamlMetadataController , and SamlMetadataUIWebflowConfigurer to use Action instead of SamlMetadata
added a method to check if LDAP ports are available in LdapMockMvcTests to improve test reliability by checking for processes using specific LDAP ports
[ log4j2 - 1342 ] fix the issue of executorservice . shutdown ( ) call in log4j2 - core
refactor URL handling in Fetcher and HTMLMetaProcessor to improve clarity and correctness of content redirects to enhance code readability and ensure correct
updated the spell check query to use " name : samsang " instead of " * : * " and changed the query parameter from "
refactor console initialization to use reflection for better compatibility to ensure compatibility with the old Karaf Console API and improve code clarity
changed the visibility of the ` getVerticesColors ` method from public to private and adjusted the initialization of ` verticesColors ` to enhance encaps
updated HTMLReportGenerator to exclude timestamped reports directories and improved test assertions to ensure accurate copying of HTML reports and enhance test coverage for timestamped reports
updated methods in DataValidatorTest to use ` validateName ` instead of ` testDeviceName _ thenOK ` and ` validateName _ thenOK
pdfbox - 4892 : remove unused method , a suggest by valerybokov
added null check for bindStatus in FieldUtils . java to provide clearer error messages when form errors are not bound within adequate context
removed debug print statement from JoglInput . java to clean up the code and improve readability
added a static boolean flag ` allowExtractingPrivateFields ` and updated method calls in ` FieldSupport ` and ` FieldSupport _ fieldValues _
replace " { name } " with device name in WebDataHandler . java to ensure proper handling of device names in WebDataHandler
refactor lookup constructor handling in Platform . java to use MethodHandles . lookup ( ) to improve code clarity and prevent potential NullPointerExceptions
renamed the weights method from ` weights ` to ` weightsByDouble ` and updated related references accordingly to improve clarity and maintainability of the method '
added a Database parameter to multiple writeCustomHTML method signatures across multiple writer classes to enhance database functionality by allowing customization of HTML output
added an assertion to ensure proper handling of null values in BTreeMap . java to ensure proper handling of null values and prevent potential NullPointerExceptions
updated exception handling in CancelDeferredTransactionContractActuator , UpdateDeferredTransactionContractActuator , and TransactionTrace classes to throw ContractExe
added a conditional check for the ` org . netbeans . lib . profiler . heap . zerofile ` option in the ` AbstractLongMap
updated message handling in Main . java to use Scope . getCurrentScope ( ) . getUI ( ) . sendMessage ( ) instead of stream . println (
updated the byte array size from 14 to 13 in HortonworksEncodedSchemaReferenceStrategy . java and modified the buffer initialization in HortonworksEncoded
added imports for ChunkListener , AfterJob , BeforeProcess , OnRead , OnSkipInProcess , OnProcessError , OnReadError ,
reformatted code for improved readability and consistency in AbstractProviderModule . java to enhance code maintainability and enhance code clarity
replaced direct calls to ` doc . get ( " title " ) ` with ` title ` in ` SearchFiles ` and ` SortedSetDocValuesFacet
refactor Test7005594 . java for improved readability to enhance maintainability and facilitate future updates
updated error message formatting in ResourcesValidationProcess . java to improve clarity of error messages for better debugging
refactor TopKRollupPhaseOneJob class to improve code readability to enhance maintainability and facilitate future updates
cloudstack - 2576 : fix npe when try to map ip address to a virtual machine with a null ip address
replaced ` mModifierDigitalTriggers ` and ` mModifierAnalogTriggers ` with ` mModifierAnalogTriggers `
refactor ` iteratesOverSequence ` and ` iteratesOver ` methods to use ` GwtCompatible ` and ` Iterable < T > ` to
added a conditional check for two header pairs in DefaultHttpBinding and DefaultHttpBinding classes to ensure that only two header values are decoded to avoid potential
added unit tests for the count of records in the ActivityHistorySQLServerStoredProcedureTest to ensure that the count of records is correctly calculated in the
refactored value formatting in BarChartActivityMultiDataset , BarLineChartBase , and Chart classes to use a new LargeValueFormatter class to
refactor character handling in CommentsParser to use a constant for INNOCUOS _ CHAR and update state management to improve code clarity and maintain
removed @ SuppressWarnings ( " argument . type . incompatible " ) suppression from Platform . java to improve code clarity and eliminate unnecessary warnings
updated formatting of the printLir call in TraceLinearScanLifetimeAnalysisPhase . java to improve code readability and maintain consistency
updated the Auto - generated method stub in NullAssertionValidator . java to improve code clarity and maintainability
added an import for RuleKeyAppendable and appended it to the rule key builder if it is an instance of RuleKeyAppendable to ensure
added system profile directory creation and modified test methods in DLNAMediaInfoTest , DLNAMediaInfoTest , and SearchRequestHandlerTest to
refactor thread creation methods in TestcontainersDockerCmdExecFactory to use a dedicated method to improve code readability and maintainability by centralizing
refactor message counting logic in HttpChannelOverHTTP and HttpReceiverOverHTTP classes to improve code clarity and maintainability by encapsulating message
added an " accept " attribute to the element in ImageFileInputDialog . java to allow users to select images from files in the dialog
refactor ElasticIndexWriter and TestElasticIndexWriter to use a pre - built TransportClient and improve node initialization to enhance code clarity and maintain
added witness and witness class information to the ForkController class to provide clearer context about witnesses and their class names
added a new test class ` NullPointerAndEmptyArrayTest ` for testing null pointer and empty arrays to ensure that null pointer and empty arrays are properly
removed dependency handling for generated source paths in BaseIjModuleRule , IjProjectBuckConfig , and AbstractIjProjectConfig to stream
updated the ` constructWildcards ` method to accept a ` Function < String , String > ` for character delimiters and modified related tests to enhance
added validation for TableScanOperator aliases in Vectorizer . java to ensure that multiple TableScanOperator aliases are validated to prevent errors
updated import statements in WeatherQueryTest . java to use MockitoJUnitRunner instead of MockitoJUnitRunner to improve code clarity and maintainability by
added error handling for setting firmware settings in TinyGFirmwareSettings . java to improve robustness by logging errors when setting firmware
refactor the ` getLangs ` method to return a ` Set < String > ` instead of a ` List < String > ` to improve
updated import statements in LazyTraceScheduledThreadPoolExecutorTests . java for consistency and clarity to improve code readability and maintainability
hbase - 13232 add prepare ( ) method to enable / disable snapshot and takesnapshothandler ( jesus camacho rodriguez
add a method to create a platform null call and refactor exit statement creation to use it to improve code clarity and maintainability by centralizing null
added a test for verifying the modification of the HTTP _ RPC endpoint in DockerQuickstartTest . java to ensure that the explorer endpoint is correctly
added a volatile boolean field ` isSuspended ` and updated thread state handling in ` Thread . java ` to improve thread state management and ensure proper
replaced Javadoc . Author and Javadoc . Since with new Javadoc . Hidden , Javadoc . Hidden , and Javadoc . Serial
camel - 16105 : camel - spring - spring - spring - spring - spring - spring should use objecthelper to check for non - null
removed multiple redundant @ Override annotations from multiple security classes to streamline the codebase by eliminating unnecessary complexity
added module import handling in Java2TypeScriptAdapter and updated test assertions in EnumTests to ensure proper handling of enums and improve test accuracy
updated the language string from ` XMLConstants . W3C _ XML _ SCHEMA _ NS _ URI ` to ` http : / / www
added content description handling for badged apps in BubbleTextView to enhance user experience by providing relevant content information for badged apps
added mouse wheel listener to handle mouse wheel movement in TestMouseWheelScroll . java to improve mouse wheel handling for better user interaction
pdfboxrenderer : close docactual and docexpected for positioning absolute
updated currency pairs from BTC to XRB in KucoinAdapters . java and KucoinIntegrationTests . java to align currency pair names with
updated agent names and methods to use String types instead of Object to improve type safety and consistency in handling different environment variables
removed currency checks for DSH , QTM , and QTM in BitfinexAdapters . java to simplify currency handling by directly returning the
updated JsonFormat to use ImmutableSet and ImmutableSet for default value fields and refactored field printing logic in JsonFormat . java to improve code clarity and
refactored array type handling in JacksonXmlFormatMapper to improve code clarity and maintainability
updated variable names and logic in VirtualThread . java for consistency and clarity to improve code readability and maintainability
refactor DirectoryTaxonomyWriter and related classes to improve code clarity and maintainability to enhance code readability and maintainability by reducing redundancy
refactor VetoableChangeSupport class to improve code readability to enhance maintainability and facilitate future updates
updated the calculation of the y - coordinate in BrowserContentPane . java to correct the vertical positioning of the content pane
pdfbox - 4892 : remove invalidpasswordexception from method signature , a suggest by valerybokov
added unit tests for ` setShortSupportMessage ` , ` getShortSupportMessage ` , and ` setLongSupportMessage ` methods in ` ShadowDevicePolicy
refactor button handling in InputBarHelpPanelW . java for improved readability and maintainability to enhance code clarity and maintainability by using a
refactor LambdaBeanPropertyMemberAccessor and MemberAccessorFactory classes to improve code organization and maintainability
updated wait conditions in BackendInitializerHelper and TerminalClient to use ThreadHelper for controller state checks to ensure proper handling of controller state transitions and improve
refactor version checking logic in SwingStartup . java to use ReleaseStatus . OLDER instead of current version comparison to simplify version handling and improve
added support for the inclusion of generated file comments in DbMigration and DbMigration classes to enhance migration configuration flexibility by allowing users to specify which generated files
updated player parameter types from " Player " to " Player | * " across multiple Java files to allow for more flexible player input formats
deleted files BadHdfsThreadsFilter . java and BadZookeeperThreadsFilter . java to remove unused thread filters to streamline the codebase
updated variable names from " nameVariableName " to " optionName " in OptionProcessor . java to improve clarity and consistency in naming conventions
added a condition to check for PARALLEL _ CLASSES in TestNGContentHandler . java to ensure proper handling of XML class handling in the
updated condition in RouteInfoManager to use StringUtils for better readability to improve code clarity and maintainability by avoiding unnecessary null checks
refactor : remove static import of ` ` static ' ' in ctmethodimpl
added serialVersionUID fields to multiple exception classes to ensure proper serialization compatibility across different versions
refactor DeadLetterEntry and JpaSequencedDeadLetterQueue classes to improve code organization and maintainability
updated the ` shaBase64 ` method to accept a ` separator ` parameter in ` ShibbolethCompatiblePersistentIdGenerator ` and added a
modified the return statement in the Parameters class to handle null and non - null parameters to improve robustness by preventing potential NullPointerExceptions
added a new file ` Person . java ` in the ` org . apache . maven . it0074 ` package to provide a private field for
remove use of fbutilities . getlocaladdress ( ) in gossiper . start ( )
convert time string to uppercase in AbstractClient . java to ensure consistent string comparison across different case scenarios
added assertions to verify the metadata for " timeColumn " , " timeUnit " , and " totalDocs " in the SegmentMetadataImpl class to
updated color conversion from java . awt . Color to net . sf . openrocket . util . Color in SimulationPlotPanel . java to ensure
added a call to disconnectEmitters in NettyStreamingService . java to ensure proper disconnection handling during streaming operations
changed the type of ` scopeHierarchy ` from ` String ` to ` Class < ? extends Annotation > ` in ` DefaultBeanContext . java `
simonstewart : add a test to verify that the element be hidden by double overflow
added a try - catch block around the dismissDialog method call to handle potential exceptions to improve robustness by preventing potential exceptions during dialog dismissing
updated JtaTransactionManager to use a custom JNDI location and added error handling for JNDI lookup to improve flexibility in handling JN
changed the visibility of the pickUri method from public to private to restrict access to the method for better encapsulation
removed the hasFunction method from the Library class to streamline the code by eliminating unused functionality
rename ` enabledCiphers ` to ` result ` and update related references to improve clarity and consistency in handling cipher configurations
updated timestamp handling in BeamRowToStorageApiProto and BigQueryUtils to use ChronoUnit . MICROS for greater precision to ensure accurate
replaced ` IllegalArgumentException ` with ` requireNonNull ` for buffer and user credentials in ` Identifiers . java ` and ` DatabaseConnector . java ` to
corrected the spelling of ' input ' to ' inputMap ' in the coerceValueForInputObjectType method to improve code readability and maintain
added bounds checking for row and column in FlightConfigurablePanel . java to ensure that row and column values are within valid bounds
added a call to scrollSelectionVisible ( ) in ThrustCurveMotorSelectionPanel . java to ensure the selection is visible for better user experience
[ java ] unnecessarylocalbeforereturn : add check for memberselector in unnecessarylocalbeforereturnrule
changed the variable name from scriptEngineManager to scriptEngine in AbstractScriptExecutor . java to improve clarity and maintainability of the script execution process
remove unnecessary check for NaN in EuclideanDistanceSimilarity and update corresponding assertions in EuclideanDistanceSimilarityTest to simplify code and improve
refactor incremental backup logic in DataTracker . java to use a new method ` maybeIncrementallyBackup ` to improve code clarity and maintainability by
updated the ` relativize ` method to accept both ` baseDir ` and ` normalizedRoot ` paths instead of ` baseDir ` to improve path
updated conditional checks for columnSize and decimalDigits in ColumnSnapshotGenerator and DataType classes to improve code clarity and ensure proper handling of null values
[ hotfix ] [ test ] skip 1 . log . tmp head file in deadletterqueuewritertest
updated method call from ` ByteArray . toHexString ` to ` ByteArray . toJsonHex ` in ` TronJsonRpcImpl . java ` to ensure
renamed ` ErrorHandlerController ` to ` Error403Controller ` and added new ` Error404Controller ` and ` Error403Controller ` classes
replaced ` TerminalFactory . resetTerminal ( this ) ` with ` TerminalFactory . resetIf ( this ) ` in UnixTerminal and WindowsTerminal to
updated import statements and modified trigger patterns in Tiny . java and added source version handling in SourceVersion . java to improve code clarity and ensure compatibility
refactor connection management logic in ConnectionPool . java to improve code readability and maintainability
rename ` getDateConverter ( ) ` to ` getLdapDateConverter ( ) ` in multiple files to improve clarity and consistency in naming conventions
pdfbox - 4892 : do n ' t fail if destnames do n ' t exist , a suggest by valerybokov
updated error message formatting in JavassistUtils . java to include classLoader information to improve clarity of error reporting for better debugging
added writer and reader exception handling in LargeStreamletTest . java to improve error handling and ensure proper thread termination
updated the page selection logic in HomeFragment to include additional pages based on user preferences to ensure that extra pages are handled correctly based on user preferences
added error handling for image creation in AndroidImplementation . java to improve robustness by handling potential exceptions during image processing
added @ SuppressSubnodes annotation to BaseParser and modified return statements in ImplicitActionsConverter to enhance code clarity and maintainability by eliminating unnecessary
refactor FDFParser instantiation to use try - with - resources for RandomAccessReadBufferedFile and RandomAccessReadBuffer to ensure proper resource management
deleted the file TestDocInverterPerFieldErrorInfo . java to the file is no longer needed in the project
added a shell command to execute a shell command in AbstractLauncherUiTest and removed an assertion in LauncherInstrumentation to improve user interaction by ensuring the
added JSON file mapping for filenames to URLs in FileDumper . java to facilitate the conversion of segment URLs to URLs for better
bugfix : reset resultsnotified flag in profilerserver
refactor TextureHelper to use Image instead of Texture for loading images to improve code clarity and maintainability by centralizing image loading logic
updated the expected ID from " application : " to " application " in SpringBootTestContextBootstrapperIntegrationTests and SpringBootTestContextBootstrapper
updated seed and locale values in RandomizersTest . java from " 9781797745008 " to " 9781797845
updated notification sound setting to use a dynamic ringtone URI instead of a hardcoded value to enhance flexibility by allowing dynamic configuration of the notification ring
added a method ` reportLoopCount ` to the ` RootNode ` class to enable tracking of loop counts for better monitoring
added a conditional check for standard repository type in FinalizeUpgradeAction . java and modified the merge method in ClusterImpl . java to ensure proper handling
updated region ID comparison in PortableIpDaoImpl . java to ensure correct filtering of IP addresses based on region ID
removed duplicate calls to streamManager . open ( stepExecution . getExecutionContext ( ) ) to streamManager . open ( stepExecution . getExecutionContext (
added a new file CountedLoopProblem . java to implement a test for counting loops to verify the behavior of a loop using a random number
refactor ` executeCompiledMethod ` methods to accept ` Object [ ] ` instead of ` metaspaceMethod ` to simplify method signatures and improve code
[ graal ] fix bug where pendingfailedspeculationoffset can not be find .
refactor KafkaStreamsTracing to use ValueTransformerWithKeySupplier instead of TransformerSupplier for peek and mark methods to improve code clarity and maintainability
[ feedback ] add average point , total point , received point in constant sum question
added DynamicColors . applyToActivitiesIfAvailable ( this ) method call to BaseApplication . java to ensure dynamic colors are applied when available
added thread management and stack dumping functionality in CloseRace . java to improve error handling and provide clearer stack traces for child threads
change return value from ` val ` to ` val . intValue ( ) ` in ` IntPointField ` and add assertions in ` TestPointFields
updated the arc size calculation in MyButton . java to use a fraction of the width instead of an integer to improve the accuracy of the arc size
change the value of ` veryHighWidth ` from ` 768 ` to ` 640 ` in ` AddAndScaleMultiImage . java `
rename ` minifySqlEnabled ` to ` shrinkWhitespacesInSql ` and update related methods accordingly to improve clarity and consistency in naming conventions
refactor waitForStateTransitionToEnd methods in AbstractLauncherUiTest and WorkProfileTest to streamline state transition handling to improve code clarity and maintain
added imports for CasCoreConfiguration and CasPersonDirectoryConfiguration , and updated related test classes to include additional configuration classes for better integration with
updated byte reading logic in Volume . java to use DataIO . getLong for better data handling to improve performance and efficiency in reading multiple byte arrays
camel - 16165 : camel - http - fix the issue that camel - jbang - jbang - jbang be not
refactor ClasspathInfo creation to use a builder for boot path and module boot path to improve code clarity and maintainability by centralizing class path
added a new file MediaScriptScopeProvider . java that implements ScriptScopeProvider for managing AudioManager , VoiceManager , and DefaultScriptScopeProvider to
added methods to retrieve and set the layer manager in AnimComposer and updated AnimEvent to handle null layer managers to improve flexibility in managing layer
added a check to return early if the queue is empty in DeferredHandler . java and removed the updateWallpaperOffset method from Workspace . java
added null checks for mapOp , mapWork , and originalThrowable in MapRecordProcessor , and updated exception handling in TezProcessor to improve robust
refactor CylinderRegion to use ` toVector2D ` instead of ` Vector ` and add a new method ` setCenter ` to
refactor ExpectedException handling in TestBadUseCases . java to use JUnit ' s JUnit Rule instead of JUnit ' s Assert
added null check for subparameters in QueryExecutorImpl . java and implemented a new test method in StatementTest . java to ensure proper handling of parameters
added a conditional check to customize the security environment before executing the customizeEnvironment ( ) method to ensure that the customizeEnvironment ( ) method returns a boolean
added a rctag to the GET request in ReviewInterface . java to ensure the correct resource tag is used for querying reviews
refactor test cases in Test . java to improve code readability and maintainability
updated PBEKeySpec constructor to use keyLength instead of blkSize * 8 to ensure correct key length is used for key generation
chore ( deps ) : upgrade gapic - generator - java to 2.8 . 0 and update gax - java to 2.18 . 1 (
added a call to writeSectionDefinition ( ) in RtfDocumentHeader . java to ensure proper handling of section definitions in RtfDocumentHeader
added speed calculation and accuracy checks in GpsLoggingService . java and adjusted accuracy checks in Maths . java to improve accuracy handling and prevent potential
removed multiple debug print statements from TableCellLayout , TableLayout , and TableLayout2 classes to clean up code and improve readability
refactor DataLabelingServiceClient and its package - info files to improve code organization and maintainability
updated InsightFilter to use WeakReference for rootNameFn and sourceFilterFn instead of boolean to improve memory management and prevent potential memory leaks
removed binary search for adding apps in AllAppsList . java to simplify the code and improve readability
refactor SettingsActivity to extend PreferenceActivity instead of ThemedPreferenceActivity to simplify theme handling and improve code maintainability
updated the value class name from " HostD " to " UsingUnresolvedD " in ValueTypeTests . java to clarify the purpose of the value
corrected a typo in the assertion statement in FST . java to improve code readability and maintainability
added an assertion to check if the security policy exists and is a file to ensure that the security policy does not exist or is a file to avoid
added an overridden method ` getConfiguration ( ) ` to the ` Olingo2Component ` class to provide a way to access the configuration object
increase sleep duration from 1000ms to 5000ms in RecoveryZkTest . java to allow more time for tests to complete before proceeding
removed redundant ` e . getMessage ( ) ` parameter from ` MongoPersistentEntityIndexResolver . java ` to simplify error logging and improve code clarity
added file upload functionality to XMPPClient and associated actions in XMPPActions to enable users to upload files via HTTP to the XMPP server
camel - 16165 : camel - netty - fix npe in camel - netty and camel - netty
updated URL regex pattern in BalancedClickhouseDataSource and added unit tests for valid and invalid host names in BalancedClickhouseDataSource to
added a system property to disable JSR 199 compiler in FragmentActivator . java to disable JSR 199 compiler in the application
added null string handling in CSVRecordReader and CSVRecordReaderConfig classes to support handling of null values in CSV records
added ` @ LiquibaseService ` annotation and imports for ` LiquibaseService ` in multiple connection classes to skip Liquibase service
updated method signatures to use JavaSourceFile instead of J . CompilationUnit to ensure correct handling of Java source files in variable name processing
updated event topic handling in ItemCommandTriggerHandler and ItemStateTriggerHandler to use a variable for the event topic to improve clarity and maintainability of
replaced ` BeanCurrentlyInCreationException ` with ` BeanCreationException ` in ` TraceWebAutoConfiguration . java ` to ensure proper exception handling
deprecated the case " zkCredientialsProvider " and " zkCredentialsProvider " in SolrXmlConfig . java and TestSolrXml . java
fix mana table not show the mana bar if the mana be not available
set the identifier collection in mCurrentCallEvent to the newly created identifier collection to ensure the current call event correctly reflects the new identifier collection
removed import of HyphenationCompoundWordTokenFilter from TestRandomChains . java to streamline the code by eliminating unnecessary dependencies
updated thread pool name from " deriveKeyWithScrypt - % d " to " deriveKeyWithScrypt " in ScryptUtil . java
refactor GeneratedCode class to improve code organization to enhance maintainability and readability of the codebase
corrected the spelling of " definition " in the assertNotNull method call to improve code readability and maintainability
added visibility to the shareWithMeIcon view in LocalFileListAdapter . java to hide the share - with - me icon in the UI
updated URLs in multiple filter and web filters to use " https " instead of " http " to enhance security by using a secure connection
added @ NotNull annotation and modified method signatures in RouterFilter , RouterServerListFilter , and RouterDistributorTest to ensure header is not null
added more information to the assertion message in TestIndexWriterMergePolicy . java to improve debugging by providing more context in assertions
added @ Deprecated annotations to multiple Java files to indicate that these classes are outdated and should not be used in new development
added null check for context in CrawlerSessionManagerValve and implemented a new test for multiple contexts in TestCrawlerSessionManagerValve to
modified the getJspApplicationContext method to include security check before returning the JspApplicationContext instance to enhance security by allowing access control based on security
refactor length calculations in RocketComponentConfig . java to improve accuracy and accuracy of component length calculations to enhance accuracy of component length calculations based on
added Singleton annotation to NonceService and updated OpenIDAuthenticationProviderModule to use Scopes . SINGLETON to ensure NonceService is bound
added a call to ` updateChildLinks ` in ` FileWrapper . java ` to update child links in ` FileWrapper . java ` to ensure
removed unnecessary method parameters and simplified URL construction in SpringCloudPlugin . java to improve code readability and maintainability
increased publishWithDelay parameters from 100 to 500 in RetrievalBlockingMessageStoreTests . java to increase test execution time for better test reliability
added a boolean field ` mShiftCodesAlwaysOverride ` and modified the logic for determining ` mShiftCodesAlways ` based on its value to improve
[ hotfix ] [ runtime ] improve heartbeat monitoring in Curatorleaderelectionmanager
removed unnecessary whitespace in NearbyActivity . java to improve code readability and maintain consistency
updated filtering logic in AbstractKerberosDescriptorContainer to include identity references to ensure that identity references are excluded when referenced
updated the ` newInstance ` method signatures to accept a ` noop ` parameter instead of ` AbstractCommandOptions ` to improve flexibility by allowing ` noop `
added a sleep delay to the exception handling in TestListenTCPRecord . java to improve stability by allowing more time for exceptions to propagate
updated method call arguments handling in PatchExtensionMethod . java to ensure consistent handling of original arguments in method calls
refactor RawNativeLibraries to use Set instead of Map and simplify library loading logic to improve performance and maintainability of the code
added attributes for " apply - sequence " and " ignore - send - failures " in DefaultRouterParser and AbstractChannelNameResolvingMessageRouter
removed the ` getX509PublishUrl ` and ` getX509ViewName ` fields from ` ClientKeyPublisher ` and ` JwkViewResolver `
updated the initialization of the subReader variable in QueryComponent . java to ensure the subReader is assigned only when there is only one reader to avoid
replaced ValueSourceParser with Double2Parser for parsing max and min in ValueSourceParser to improve code clarity and maintainability by encapsulating
removed redundant null return statement in Container . java to simplify the code and improve readability
removed unused variables from Highlighter , SpanGradientFormatter , and TokenSources to streamline code and improve readability
updated the SQL insert statement to use a UUID parameter instead of a hardcoded value to ensure the database correctly identifies the user ' s UUID for
added @ Qualifier annotation to FlowBuilderServices and ObjectProvider < FlowBuilderServices > in CasWebflowConfiguration and CasWebflowContext
updated WriteJdbcPTest . java to increase the maximum number of connections and refactored SQL commands to improve resource management and enhance code clarity
removed the conditional check for the " editor . laf " setting in DefaultPlatform . java to simplify the code and improve readability
refactor method calls from ` getStateEntity ( ) ` to ` stateEntity ` for consistency to improve code readability and maintainability by using
removed conditional logic for calculating left margin in FloatingTaskView . java to simplify margin calculations and improve readability
added a condition to break if the application is not running and updated the status line setting in NavigationShareTab . java to improve user experience by providing
[ hotfix ] [ runtime ] do n ' t increment threadid in cpucallgraphbuilder
ggb - 118 : fix npe in guimanagerd . getpanel ( )
added NetworkAddressChangeListener interface and updated logging messages in HomekitImpl . java to enhance network address handling and improve logging clarity
updated lease retrieval logic in TestHDFSEventSinkOnMiniCluster . java to use a variable for lease renewal time to improve code clarity and
updated ` arg . prefixHeader ` and ` arg . linkStyle ` from ` Optional . absent ( ) ` to ` Optional . absent ( )
added null check for exception message in ExceptionHandlerRegistryFactory and created a new test for fatal IO handling to ensure proper handling of null messages and validate
changed the ` nextID ` variable to be volatile and updated related methods accordingly to ensure thread safety and improve clarity in the handling of the nextID
http : / / issues . apache . org / jira / browse / amq - 4296 - fix test failure
added ` HasSourcePath ` interface to ` AbstractThinArchiveArg ` , ` FileListableLinkerInputArg ` , and ` Source
replaced StringBuffer usage with direct string concatenation in IllegalArgumentException to simplify code and improve readability
added support for custom index field name in OrdinalMappingAtomicReader and updated facet creation in TestOrdinalMappingAtomicReader to enhance facet functionality and ensure
added handling for negative seconds and positive nanoseconds in the Instant class and created a new test for epoch milliseconds to ensure accurate conversion of time values and
updated attribute retrieval to use ` . name ( ) ` method in ` OGLESShaderRenderer ` and ` LwjglRenderer ` to
added a boolean variable to track if scripts are blocked in CopyPaste . java to ensure that scripts are only blocked when explicitly set to true
added a new file ` TestCMoveLimitType . java ` to implement a test case for CharBuffer operations to ensure correct behavior of buffer unroll
removed redundant calls to resetTemporalAttributes ( ) in ChannelState and added a new contains method in RecordConfiguration and AudioPacketWaveRecorder to
camel - 13237 : camel - sql - parser should support scale token in token sequence .
updated the vendor string from " Sun Microsystems " to " Oracle Corporation " in RealTimeSequencer . java and AudioSystem . java to align
refactor console creation to use a dedicated method for printing version messages to improve code readability and maintainability by encapsulating version printing logic
refactor token validation logic in InputStreamBinder and NextcloudRequest classes to use a unified token hashing method to improve code clarity and maintainability by
added EOFException handling for EOF in Http11InputBuffer . java to improve error handling and provide clearer error messages
add unit tests for member deletion in DefaultGroupProvider to ensure proper functionality and error handling for non - existent group members
removed unnecessary new Object [ ] objects from multiple classes to simplify object creation and improve code readability
deleted the V2ReplicationProtocol . java file to remove unused protocol implementations to streamline the codebase
updated the types of ` compileTimeClasspathDeps ` and ` compileTimeClasspathSourcePaths ` to use ` SourcePath ` instead of ` BuildRule
added new classes ` ConstructorArgsDemo ` , ` StupidFinal ` , ` StrictDemo ` , and ` StrictDemo ` to
[ geot - 7136 ] directtemplatefeaturecollectionfactory should use threadlocal to close open iterator
updated assertion in WriteResponseHandler to include 2 * responseCount instead of 1 * responseCount to ensure correct response count validation based on the replication factor
added null check for item . getIndexNumber ( ) in ItemRowAdapter . java to avoid potential NullPointerException when checking for index number
rename ` areAnchestorsShown ` to ` areAncestorsShown ` and update related methods to improve clarity and consistency in naming conventions
added a check to return early if the application width is less than 12 to prevent unnecessary processing when the application width is below 12
updated equality check in ChangeLogParameters to use ` . equals ( changeLog ) ` instead of ` . equals ( changeLog ) ` to ensure
changed loggers from static to final in LogFactory . java to ensure the loggers map is immutable before accessing it
updated return statement in Plot . java to use getBasePlot ( false ) to ensure the plot is returned correctly based on its base plot status
camel - 10266 : camel - rest - dsl - createuploaddir ( ) should return info instead of warn when upload directory exist externally
updated ServerGenerator , HttpTransportOverFCGI , and ServerFCGIConnection classes to accept a boolean parameter for sending HTTP status 200 to enhance flexibility
added a check for a non - empty comment before proceeding with multi - line comment handling to ensure that comments are only processed when there are lines
added imports for FileType and FileTypeManager , and modified file type handling in BuckModule . java to improve file type management and ensure proper
replaced specific Java function imports with a wildcard import in ComposedUtil . java to simplify import statements and improve code readability
added an error message for unsupported RTM OS version and refactored test cases for JVM startup to improve clarity of error messages for unsupported R
reformatted code for consistency and clarity in AccountsActivityTest . java to improve code readability and maintainability
refactor Player class to improve code readability to enhance maintainability and facilitate future updates
added import for ChannelTypeUID and a method to package ChannelTypeUID in AbstractModbusOSGiTest to ensure proper class loading for Channel
corrected a typo in the loop condition in PolyglotExceptionImpl . java to improve code readability and maintainability
added context reset functionality to ShadowFontsContract and updated AndroidTestEnvironment to reset the system context to ensure proper context management during testing
added a method to convert milliseconds and seconds to milliseconds in TimeGranularity and modified time query logic in PinotDataSourceMaxTime to improve
added null check for _ try . getFinally ( ) and updated control flow analysis logic to improve robustness by preventing potential NullPointerExceptions and
updated array equality assertion logic in Assert . java and updated test cases in ArrayEqualityAssertTest . java to improve clarity and correctness of array comparison
added default values for ClickType and adjusted return statements in WindowClickLogic . java to improve code clarity and ensure consistent handling of click logic logic
updated index calculation in MeshBuilder . java to ensure correct indexing based on offset value
nifi - 164 : remove unnecessary dependency on controllerserviceprovider in standardprocessscheduler
added support for adding AP _ PROCESSORS in KotlincToJarStepFactory and a corresponding test in KotlinLibraryIntegrationTest to
updated RESCROLL _ DELAY and PAGE _ SNAP _ ANIMATION _ DURATION in DragController , PagedView , and Workspace classes
added shortcut permission checks and refreshing logic in Launcher and DeepShortcutManager classes to ensure shortcuts are only reloaded when necessary and improve permission
added a new case for HISTORY _ SEARCH _ BACKWARD in ConsoleReader . java to improve history search functionality in the console
added null check for core name in CoreAdminHandler and updated core handling in CoreAdminHandlerTest to ensure robustness by preventing potential NullPointerExceptions
added functionality to deselect markers in NearbyMapFragment to ensure the bottom sheet is hidden when the marker is selected
added exception handling to print stack trace in FileSyncAdapter . java to improve error handling by capturing stack traces during file sync operations
refactor docker test to use OutputAnalyzer for better error handling to improve code clarity and maintainability by using a dedicated output analyzer
updated feed filtering logic in FeedQueues . java to conditionally filter out weak feeds based on application settings to ensure only relevant feeds are
added thread verification for playback threads in DefaultDrmSession and DefaultDrmSessionManager classes to ensure proper access to playback loopers and prevent potential
updated ` AndroidBinaryDescription ` , ` AndroidBinaryBuilder ` , and ` AndroidBinaryBuilder ` to use ` Locale . US ` and added a
updated XML MIME type from " text / xml " to " application / xml " across multiple test files to ensure compatibility with the latest application formats
updated configuration file reference from ` INSTANCE . confFile ` to ` INSTANCE . confFile ` to ensure consistency with the instance configuration file reference
updated the method call from " sleep 5 ; exit 1 " to " exit 1 " in HostPortWaitStrategyTest . java to simplify the test
updated group type checks from int to long in HiveExpandDistinctAggregatesRule . java to ensure accurate handling of distinct counts and improve precision in group
added headless exception handling for GraphicsEnvironment in Toolkit . java to ensure proper exception management when running in headless environments
fix ExoflameFurnaceHandler . canSmelt ( furnace , world ) to ensure the correct furnace can
added a new parameter ` moveThreadCountDescription ` to the ` DefaultSolver ` class and updated related logging statements to enhance the flexibility of thread count
updated path retrieval logic in SearchBuilder and added a new test in FhirResourceDaoR4SearchNoFtTest to ensure correct retrieval of
added a new test class ` Issue582Test ` for sorting features in the ` Fun . Pair ` collection to address issue # 582 and
[ native ] add test for Decimal overflow and division by zero .
refactor LoadingCache class implementation to improve performance and maintainability of the loading process
added a new rule " AvoidNonConstructorMethodsWithClassName " to the NamingRulesTest to ensure proper handling of non - constructor methods with class names
simonstewart : catch staleelementreferenceexception and add element selection state to the expectedconditions .
refactor view existence check in ` ViewExistsPrecondition ` and introduce a new method ` hasView ` in ` JdbcDatabaseSnapshotGenerator ` to improve
refactor DOMUtil class to improve code readability to enhance maintainability and facilitate future updates
added translation handling for view translations in TaskViewUtils and implemented a logMatrix method in Utilities to improve animation accuracy by accounting for full - screen scaling
changed the default value of FLAG _ ENABLE _ FIXED _ ROTATION _ TRANSFORM from true to false in FeatureFlags and Rotation
added a walk method to the TempFSTTermsReader for reading arcs in TempTermOutputs . java to improve arc processing and ensure correct
added SolrQueryRequest parameter to multiple create methods in multiple augmenter factories to support additional request parameters for improved performance
updated SQL trigger statements and added null checks for content and announcement in SingleTableMySQLTriggerTest . java to ensure proper handling of null values and
refactor comparator handling in FieldValueHitQueue and TopFieldCollector to use a dedicated setComparator method to improve code clarity and maintainability by central
updated SQL query strings to use double quotes for quotes in PhoenixQueryBuilderTest . java to improve readability and maintain consistency in query formatting
added import statement for Spark and added a call to await initialization to ensure the initialization process is completed before proceeding with the initialization process
added constants for total storage pools , limits , and used in DynamicPropertiesStore . java to enhance storage management capabilities and improve error handling
added NinjaProperties to AssetsController and updated related tests to support dev mode and improve resource retrieval based on Ninja properties
updated the key retrieval method in MapMarksManager to use getMapMarkKey instead of getMapMarkPosition to ensure the correct key is used
added TokenRewriteStream parameter to the getDefaultValue method in BaseSemanticAnalyzer , DDLSemanticAnalyzer , and DDLSemanticAnalyzer classes to enhance token
removed unnecessary ` throws IOException ` declarations from multiple methods in ` JavaCompiler ` , ` JavacProcessingEnvironment ` , and ` FatalError ` to simplify
refactor file path handling in JxBrowserManager and add error handling in FileUtils to improve code clarity and handle potential exceptions gracefully
added a check for AppVersion and modified image file creation logic to use ` equals ` instead of ` equals ` to ensure proper handling of app version
updated the method call from ` getBridgeUID ( ) ` to ` getUID ( ) ` in ` SomfyTahomaBridgeHandler
disable flaky test on github
refactor OpenWireConnectionTimeoutTest to utilize constants for keystores and server and server keystores to improve code readability and maintainability by
[ hotfix ] [ dynatrace ] add nanGaugeWarnThenDebugLogger and nanGaugeWarnThenDebugLogger for invalid metric value to improve
added a call to remove a session ID from sessionIdToSessionInfo to ensure that the session info is removed from the session map
added null host name setting for alerts in HeartBeatHandler and updated alert log message formatting in AlertReceivedListener to ensure alerts are properly
refactor buffer clearing logic in ChannelEndPoint . java to simplify the return statement to enhance code readability and maintainability
[ drools - 4890 ] fix kie / api / kmodule . xsd in kmodulexsdtest
added unit tests for the ` seekToMode ` method in ` ShadowMediaPlayerTest ` and implemented it in ` ShadowMediaPlayer ` to ensure correct behavior
rename ` createTask ` method to ` createThrowingTask ` across multiple executor classes to improve clarity and consistency in naming conventions
added a border setting for the tab close button based on the AQUA _ LAF status to ensure proper styling of the close button based on the
updated HTTP request and connection settings in TSPTimeStampService . java and modified import statements in TestSignatureInfo . java to improve HTTP request handling and
jbrules - 2605 : add default security permission to xstream . createxstream ( )
added error handling for diamond type applied in Attr . java and created a new DiamondRaw class in Neg12 . java to improve error reporting and
[ calcite - 1290 ] fix typo in reloptutil . gettargettype ( )
updated argument requirements for id and value in Http2Settings . java to ensure proper validation of unsigned values to prevent potential errors
deleted the file Issue664Test . java to remove unused test files to streamline the codebase
removed unnecessary try - catch block for IllegalStateException in SessionsPoolTest . java to streamline session management by eliminating unnecessary exception handling
[ geos - 8407 ] add miss ` ` start root object ' ' in geojsonwmsbuilder
replaced the method ` setIndex ` with ` intValue ( ) ` for setting the start index in ` myTable ` to improve code readability and
added a method ` canCurrentlyManuallyUnstash ( ) ` to check if ` canCurrentlyManuallyUnstash ( )
camel - 11436 : camel - core - remove the customid attribute from the route coverage helper .
modified getEventMismatchMessage method to accept a boolean parameter for waitForExpectedCount to allow for more flexible event mismatch handling based on expected event count
added a new file ` HeaderFixer . java ` that processes license header files to ensure proper handling of license header files in the application
added first load complete broadcast handling and updated widget binding logic in Launcher and LauncherProvider classes to enhance user experience by ensuring the first load complete
deleted the file ` SuperJumperAndroid . java ` to the class is no longer needed for the Android application
updated return statements in SystemTableScan . java and modified query formatting in TestStarQueries . java to ensure accurate reporting of distributed table state and improve
removed KeyValuesProviderAware , ObservationProviderAware , and ObservationConventionAware interfaces from Observation . java to streamline the code by eliminating
added missingItems parameter to processIdRematches method and updated related method signatures to include missing blocks and items to ensure proper handling of missing mappings and
updated return statements in AtomicIntegerArray , AtomicLongArray , and AtomicReferenceArray to return the base ( long ) value of the index instead of adding it to ensure
added caching functionality for date formats in HSSFCellStyle . java to improve performance by avoiding redundant calls to getDataFormatString
updated the URL query in RemoteAuthenticationEndpointTests to include a wildcard filter for the user name to ensure that the filtering of users matches the specified username
updated condition from ` def . needsInput ( ) ` to ` def . finished ( ) ` in ` DeflateCompressor . java ` to ensure
updated the logging mechanism in the launcher to include container information and page index to enhance debugging capabilities by associating container information with the current page
chore ( deps ) : upgrade gapic - generator - java to 2.8 . 0 and update gax - java to 2.18 . 1 (
deleted the DeadlockTest . java file to the test class is no longer needed in the project
added null check for newInput before setting the viewer and modified marker addition logic in BugContentProvider and BugGroup classes to improve robustness by preventing
added a new menu item ` openInBrowserItem ` and modified server startup logic in ` JavaScriptEditor . java ` to improve user experience by allowing
added a new error message for mismatched output times in ErrorMsg and SemanticAnalyzer classes to provide clearer context about the possibility of multiple output encounters
updated the ` addEntryListener ` method calls to include a new ` EqualPredicate ` parameter to ensure proper handling of null pointer exceptions during entry listener
added a check to return early if the coordinate array is empty or less than 1 , and refactored CoordinateArraysTest to improve code clarity
modified the formatting of the setOpen method call in ToolbarPanel . java to improve code readability and maintain consistency
added a boolean variable ` first ` to ` TestPayloads . java ` to reset the boolean variable ' first ' to ensure proper initialization of the
refactor overview mode handling in Launcher . java to improve code clarity and ensure overview mode is displayed correctly
set the destination of the messageDispatch object in NetworkRouteTest . java to ensure the messageDispatch destination is set correctly based on the message ' s
change return value from Integer . MIN _ VALUE to Integer . MAX _ VALUE in MessageHandlerInterceptorDefinition . java to ensure correct handling of message handling
refactor ` NestedArithmeticTest ` and ` FloatConvertNode ` to remove unnecessary parameters and suppress warnings to improve code readability and suppress warnings
replaced ` writerIndex ( ) ` with ` addComponent ( true , pendingChunks ) ` and ` addComponent ( true , buff ) `
updated regex patterns in GetMavenDependenciesTask . java to replace " analysis - " with " ( ? < ! solr - ) analysis - " to
pdfbox - 4892 : use getcosstream instead of getdictionaryobject , a suggest by valerybokov
removed unnecessary System . out . println statements from the ReferenceUtil class to streamline code and improve readability
added VisibleFieldPredicateEnvironment and modified TypeVisibilityVisitor constructors to include queryTypeName to enhance visibility checks for field definitions in the GraphQL schema
added new parameters for solidityJsonRpcHttpPort and its configuration in CommonParameter . java , and updated port initialization in Args . java to enable
added a check to ensure the folder is an instance of DropTarget before removing it to prevent ClassCastException when the folder is not an instance of DropTarget
refactor stub jar generation logic into a separate method ` createStubJar ` to improve code readability and maintainability by reducing duplication
added new features for Setup wizard , Setup wizard , and Workflow helper in StartPageTopComponent . java to enhance user experience by providing more informative
[ hotfix ] [ cassandra - core ] remove redundant call to schedulewithfixeddelay in cassandra daemon
removed unnecessary type casting for Boolean in OnlineTestCase . java to simplify the code and improve readability
updated ReturnAttributes from NONE to ALL _ USER in LdapUserGraphicalAuthenticationRepository . java to align return attributes with the new default behavior
refactor HttpChannelState to improve handling of idle timeouts and error handling to enhance code clarity and ensure proper handling of request failures
changed the CreateEndPoint class to extend Invocable . NonBlocking instead of Runnable to simplify the class structure and improve code clarity
updated TABLE _ HEADER _ SEPARATOR regex patterns and modified conditional checks in TableBlockParser . java and TablesTest . java to improve table header
updated the return value from 32 . 0 to 31 . 5 in Camera . java to adjust the camera ' s intrinsic value
added a preference to stop starting on boot setup and updated URLs in GpsSettingsActivity to improve user experience by eliminating unnecessary URLs and ensure
updated the client secret value from 128 to 512 in DefaultOAuth2ClientDetailsEntityService . java to ensure compatibility with larger client secret sizes
updated assertions in MySQLStoredProcedureTest and PostgreSQLStoredProcedureTest to include a call to ParameterRegistration # enablePassingNulls (
added JUnit @ Ignore annotation to ScheduledMethodMetricsTest to temporarily disable the test due to race condition
refactor methods in SegmentGenerationAndPushTaskExecutor to return PluginManager instances instead of hardcoded values to improve code clarity and maintainability by
added locale - specific date formatting in TimeLineCursorAdapter , TimelineArrayAdapter , and TimelineArrayAdapter to ensure consistent date formatting based on
added a MetalLookAndFeel import and set the UIManager ' s laf in bug8032878 . java to enhance the user interface by providing a
refactor ping task handling in WebSocket session management to improve thread safety and ensure proper shutdown of the scheduled executor service
removed the call to ` throwable . getMessage ( ) ` from the ` error ` method in ` GlobalErrorHandler . java ` to simplify the error handling
rename method from ` module ` to ` from ` across multiple files to improve clarity and consistency in naming conventions
catch ` CmdLineException ` instead of ` Exception ` in ` PinotAdministrator . java ` to improve error handling and provide clearer logging for
replaced ` super . equals ( o ) ` with ` isEqualTo ( o ) ` and added ` hashCode ( ) ` methods in ` Subject . java
refactor code for better readability and consistency in the CustomPlaybackOverlayFragment and ImageButton classes to improve code clarity and maintainability
updated zoom level settings from 10 , 20 , and 24 to 24 in BasicMapViewer . java to increase the zoom level from 10 to 24 and
refactor DrillRoot to use processUser and processUserGroups instead of adminUsers and adminUserGroups to improve code clarity and maintainability by
replaced ` AccessController ` with ` sm ` in ` UnixFileSystemProvider ` , ` WindowsFileSystemProvider ` , and ` CheckPermissions ` classes to
added a list of ArgumentExtractors to the DelegatedClientAuthenticationAction class and updated related classes to utilize it to enhance service resolution by allowing
changed the ` defaultGroup ` variable from private to final in ` NacosServerRegisterRepository . java ` to ensure that the defaultGroup variable is
replace tileCache . destroy ( ) with destroyTileCaches ( ) and createTileCaches ( ) in TileSizeChanger . java to
removed redundant calls to ` InfoLayoutHelper . addInfoRow ` and ` mGuideInfoRow . removeAllViews ( ) ` in ` CustomPlayback
refactor ` cleanEntriesForFeedsWithoutSubscriptions ` method to use a new method ` cleanEntriesForFeedsWithoutSubscriptions ` to
updated parameters in ImmutableAssertionTests to use ` auth ` instead of ` CoreAuthenticationTestUtils . getAuthentication ( ) ` to ensure consistent usage of
nifi - 164 : fix filebasedclusternodefwdtest to use a temporary folder
replace variables ` l ` with ` e1 ` and ` e2 ` in ` AlgoConicFivePoints . java ` to improve
reformatted EOF checks in RandomAccessReader . java to improve code readability and maintainability
added @ SuppressWarnings ( " unchecked " ) annotations to Fields and MockitoBeforeTestNGMethod classes to suppress unchecked warnings and improve code clarity
refactor CImage . java to improve image creation methods and enhance null checks to enhance code readability and prevent potential null pointer exceptions
replaced WritableByteArrayComparable with ByteArrayComparable in MapRDBFilterBuilder . java to simplify imports and improve code clarity
rename ` runtimeVisibleMethodOfFieldAnnotations ` to ` runtimeVisibleFieldOrMethodAnnotations ` across multiple files to improve clarity and consistency in naming convention
replaced null checks with ` Objects . equals ` for equality checks across multiple classes to improve code readability and reduce potential null pointer exceptions
refactor ` resolveClassFromCanonicalName ` to ` resolveClassFromBinaryName ` in multiple classes to improve clarity and consistency in class resolution logic
added verification for default location views in NinjaDefaultTest . java to ensure correct configuration of location views in the application
renamed ` updateAllAppsWidth ` to ` updateAllAppsContainerWidth ` and updated its usage in ` DeviceProfile ` and ` 
updated padding in DetailFragment and ListFragment to adjust timestamps view padding and adjusted list view position offset calculations to improve layout responsiveness and
refactor exception handling in ZkStateReader to use Thread . currentThread ( ) . interrupt ( ) for better clarity to improve code readability and
added null checks for field values in HttpFields and created a new test for empty headers in RequestTest to ensure proper handling of null values and validate
added a check to determine if static nat services are supported in the specified network ID to ensure that static nat services are only supported in the specified network
added calls to resetHeaderScrollingState ( ) and setFabVisible ( false ) in OCFileListFragment . java to ensure proper
added a call to remove extra empty screen from the workspace to ensure that the extra screen is removed when the workspace is closed
added a fixedWidth flag to BitmapFont and adjusted glyph positioning logic based on the last glyph ' s width to enhance glyph rendering flexibility based on
removed the ` showTitle ` parameter from the ` createFragment ` method and updated related methods in ` ChangeLogFragment ` to simplify the fragment creation
added methods for preEvent , postTransition , and error handling in AbstractStateMachineFactory to enhance state machine handling and provide better error handling
refactor ConfigDescriptionProvider class to improve code readability to enhance maintainability and facilitate future updates
updated Role creation to include a new role " role1 " and modified MetaStore initialization to include clientHiveConf to ensure compatibility with Windows and
added a boolean variable ` countSorted ` and updated condition checks in ` FacetComponent . java ` and ` TestDistributedSearch . java ` to
updated properties handling in CheckstyleReport . java to use the current model ' s build directory instead of a hardcoded value to improve maintainability
added functionality to stop JettySolrRunner instances based on active slices and replicas in DeleteInactiveReplicaTest . java to ensure proper cleanup of
added a file name parameter to the FileActionsDialogFragment constructor and updated its usage in OCFileListFragment to allow users to specify a file name
updated condition checks in CellLayout to include MODE _ ON _ DROP _ EXTERNAL and updated previous reorder direction values accordingly to ensure proper handling of
updated InnerTransferRequest to include currency , from , and to fields in InnerTransferRequest . java , and updated API endpoints in AccountAPI . java
added a method ` getExecutionIdForJobId ` to ` JobExecutionService ` and modified ` JetTestSupport ` to utilize this method
added a new annotation ` EnableAdminClient ` in the ` org . noear . solon . admin . client . config ` package to enable
refactor import statements in FindTypes . java and implement visitIdentifier method in ExecutionContext and Set < NameTree > to improve code clarity and ensure
added a method to set the action text color in AuthenticatorActivity to enhance user experience by providing a more visually appealing action text
added a new method ` find ` to ` Manager ` , ` StreamSupplierComponent ` , and modified related classes to utilize ` ComparableField `
replace calls to ` addTestStepsForPickleSteps ` with ` createTestStepsForPickleSteps ` and ` createBeforeStepHooks `
rename test method from ` noArgMethodIsNotValid ` to ` validNoArgMethod ` in ` StaticHandlerMethodResolverTests ` to improve clarity
added a method to cancel a client in RpcServer and implemented a cancelClient method in SparkClientImpl to improve client termination handling and provide clearer
added ` getImplicitPreCoercionValue ` methods to ` SkylarkParamInfo ` , ` ParamInfo ` , and ` Reflection
initialize ` lastDisplayedUser ` to ` Optional . empty ( ) ` in ` FileDisplayActivity . java ` to ensure ` lastDisplayedUser `
added a method ` findAll ( OrderSpecifier < ? > orders ) ` to ` QueryDslMongoRepository ` and updated method signatures in ` Abstract
added null checks before calling stop ( ) in SchemaRegionConsensusImpl and DataRegionConsensusImpl to avoid potential NullPointerException
add a break statement in DefaultPlannerBenchmark . java to exit the warm - up loop in case of failure
added multiple xread and xreadGroup methods to MultiKeyPipelineBase , MultiKeyBinaryRedisPipeline , and MultiKeyBinaryRedisPipeline to enhance
refactor LinkedBufferInput and StreamInput classes to improve read byte count calculations to enhance clarity and maintainability of the codebase
added WebSecurityCustomizer to CasWebAppSecurityConfiguration and updated CasWebSecurityConfigurerAdapter to utilize it to enhance security configuration flexibility and
added a new test class ` TestJdbcWithDBTokenStoreNoDoAs ` to the ` TestJdbcWithDBTokenStore ` class to verify
added a method to register a ContentProvider in ShadowContentResolver and updated ContentProviderController to utilize it to enhance content provider registration functionality and ensure proper
updated the ` AttributeReader ` constructor to use ` ClassFile . Version ` instead of ` Version ` to ensure compatibility with the latest ClassFile version in the
added keep - alive configuration to SingleConnectionManager to ensure proper connection handling based on configuration settings
[ java ] rename unicastsender to unicastsendersupplier for consistency .
added a null check for the current point in DrawLocus . java and modified the condition in GBasicStrokeD . java to ensure proper handling
updated WebSocket endpoint handling to use ConcurrentHashMap and ConcurrentMap and improved content flushing logic to enhance performance and error handling during WebSocket connection processing
simonstewart : allow selenium . take . screenshot to take a screenshot
replace junit assertions with assertj assertions in multiple test files to improve readability and maintainability of the test code
truffle : remove deprecate method from trufflelanguage . getcontextreference ( )
modified exception handling in StubberImpl . java and added corresponding tests in StubbingWithBadThrowablesTest . java and Uninstantiable
updated error handling in ` Actor . java ` and ` Group . java ` to throw an ` IllegalArgumentException ` for non - ascendant actors to
added location permission dialogs and refactored getCenter method in LocationPickerActivity to enhance user experience by allowing users to access and disable location access
http : / / issues . apache . org / jira / browse / amq - 4296 - add jms counter to the example
added CookieSpecs import and set standard cookie settings in GetHTTP . java to enable custom cookie handling in the request configuration
refactor overlap check in Intersector . java to use r1 . overlaps ( r2 ) instead of r1 . overlaps ( r
replaced DeemphasisFilter with NonClippingGain in P25AudioModule . java and updated audio filtering logic in AirspyT
added a URL parameter to the ScrollingPanel and modified related classes to include monitoringUrl to enhance functionality by allowing users to specify a monitoring URL for
[ hotfix ] [ k8s ] remove unused config option SERVICE _ CREATE _ TIMEOUT
added handling for " landmark " and " city " places in NearbyListFragment to improve user experience by providing appropriate icons for empty places
added a null check for the package before processing classes in DefaultPackageScanClassResolver . java to avoid potential NullPointerExceptions when accessing the package
added a new file PrintInlining . java that prints the result of an inlining process to provide a test case for the print inlining
refactor Javadoc to handle nested braces correctly and add a new test for nested braces in JavaDoc to improve code clarity and ensure correct
[ java ] remove unused variable in ArchiveTest . java to simplify code and improve readability
updated the method calls from ` getEdges ( ) ` to ` getEdgesAndMetaEdges ( ) ` in ` EdgeDataTable . java `
removed unused imports from SpringResourceProperties , SpringResourceConfiguration , and PasswordManagementConfiguration to streamline code by eliminating unused dependencies
updated log message formatting in VideoManager . java to improve clarity of log output for better debugging
added room removal event handling in MUCRoomController to ensure proper handling of room removal events during clustering
corrected the spelling of " replicas " to " cores " in the AutoScalingHandlerTest . java file to ensure consistency in naming
added key flip and generate mips functionality to TextureHelper to enhance texture rendering capabilities
refactor EventReportingProjectBuildFileParser to use CloseRecordingProjectBuildFileParserDecorator instead of PythonDslProjectBuildFileParser to
added LibraryNormalizationPass to handle normalization passes in J2clTranspiler . java and created a new LibraryNormalizationPass class in J2cl
replaced ` nextResponseBodyConverter ` with ` responseBodyConverter ` in GuavaOptionalConverterFactory and added a new test in GuavaOptionalConverterFactory
[ hotfix ] [ runtime ] fix checkstyle violation in memorymanager
added a Temporal annotation to ConsoleSessionVO using javax . persistence . TemporalType to enable handling of timestamps in database operations
added new files Hbs . java and HbsTest . java to implement a Handlebars template engine to enable dynamic rendering and testing of Handlebars templates in
refactor ChatMessageAdapter to improve visibility handling for hint and incoming messages to enhance user experience by preventing null or empty hint text from being displayed
updated iteration order from ` keySet ( ) ` to ` values ( ) ` in ` ImportCsv . java ` to ensure consistent iteration over the values
added a new test method ` waitsUntilAlertDialogAppears ` to ` AlertTest ` and modified ` ConfirmTest ` to accept a
added a null check for distinct column indices in ReduceSinkDeDuplication . java to ensure that only two distinct column indices are processed to
refactor MiscUtils to improve file path handling and error logging to enhance code readability and maintainability by reducing redundancy
regenerate client with updated copyright year ( # 4382 )
updated websocket bundle IDs from " websocket - server " to " jetty - websocket - client " in TestOSGiUtil . java to ensure
updated SAMLAuthenticatedUser to return an unmodifiable map instead of an unmodifiable map to ensure that the returned map is immutable and improve readability
added error handling and repainting of the header in the sketch code to improve the visual appearance of sketches by ensuring the header is properly displayed
replaced instances of ` new Double ( bytes ) ` with ` new Float ( bytes ) ` and ` new Float ( bytes ) ` in multiple classes
updated the method from ` getDate ( colName ) ` to ` getTimestamp ( colName ) ` in ` JdbcDataSource . java ` to ensure the
updated class name retrieval logic in HtmlJndiTreeReport . java to include additional checks for javax . naming . Context to ensure correct handling of
added database database options and modified logging message formatting in StorageUtils . java and Manager . java to enhance database functionality and provide clearer logging information for
updated edge type from " double " to " mutual " in ImporterGEXF . java to align edge type with the new mutual edge type
removed the import of FLAG _ SLIPPERY and updated the FLAG _ SLIPPERY constant to streamline the code by eliminating
truffle : fix stable dimension calculation for non - array field .
added functionality to retrieve and set the Google Drive folder path in preferences to enhance user experience by allowing dynamic configuration of the Google Drive folder
added a method to shuffle suggestions in RadioButtonTreeItem and modified key event handling in DrawEquationWeb to enhance user interaction by allowing suggestions to be
added ` @ Nullable ` annotation to multiple assertThat methods in ` Truth . java ` to enhance type safety by allowing null values in tests
updated return values in ArrayUtil from ( newSize + 3 ) & 0x7ffffffe to ( newSize & 0x7ffffff8
added ApiExceptionTest class and modified ClassInstrumentor to check if a constructor can be instrumented before instrumenting the constructor to improve test coverage and ensure
added synchronization and removal of waitingForAnticompaction entries in StreamIn , StreamInitiateVerbHandler , and StreamOut classes to improve performance
added a new boolean field ` isKeyguardSecure ` and its getter and setter methods in ` ShadowKeyguardManager ` , and refactored
added serialVersionUID fields to StringDialog . java to ensure proper serialization and serialization compatibility
updated the parsing logic in GrblUtils to replace ' > ' with ' ' and added a conditional check for override parts to ensure correct parsing of
updated the method name from ` assertEmpty ` to ` assertEmptyForMultipleFailureExceptionForMultipleFailureExceptionForMultipleThrowables ` to improve clarity
added conditional checkDrained ( ) in AsyncFileImpl . java and a corresponding test in FileSystemTest . java to ensure checkDrained ( )
updated LIGHTS _ NUM and LIGHT _ INTESITY from 4 to 8 and modified shader creation in HybridLightTest . java to
replaced instances of ` FakeProjectFilesystem ` with ` getProjectFileSystem ( ) ` in multiple integration test files to streamline the filesystem retrieval process by using
replace ` String ` with ` PathWithLines ` in ` RuntimeOptions ` and ` CucumberFeature ` classes to improve type safety and reduce
refactor Gson , JsonArray , and JsonObject classes to improve code organization and maintainability
updated TEST _ DIRS to include a comment to clarify the purpose of the TEST _ DIRS array
added a call to close ParcelFileDescriptor in ShadowParcelFileDescriptor to ensure proper resource management and prevent potential memory leaks
added a method to reset the prefix index in Stylesheet . java and modified the prefix index calculation in BasisLibrary . java to improve thread safety
added logging level annotation to TestDistributedStatsComponentCardinality . java to improve debugging visibility for distributed stats tests
added calls to ` throwIfImmutable ( ) ` in ` IntList . java ` to ensure proper handling of immutable lists in the code
added @ NotNull annotations to ` onApplicationEvent ` method in ` GrpcServerRunner ` and updated URI construction in ` GrpcClientBuilder `
refactor Graal class to use a Supplier < Path > instead of a static factory method to improve code organization and reduce dependency on the Graal
truffle : ensure that insight . keysunchanged ( ) be call only if it ' s valid .
refactor generated manifest file handling in GenerateManifestStep . java to handle line endings correctly on Windows to improve compatibility and error handling for manifest files
updated priority from LOW _ PRIORITY to HIGH _ PRIORITY in FindNullDeref . java and added a new class RFE35
added Nullable annotation to getConfigDescription methods in ConfigDescriptionRegistry and adjusted conditional checks in ThingResource to improve null safety and prevent potential NullPointerExceptions
change return type of createCancellationException from Throwable to RuntimeException to improve error handling by providing a more descriptive exception type
pdfbox - 4892 : do n ' t initialize the stream if there be no cropbox
refactor ManagerBase class to improve code readability to enhance maintainability and facilitate future updates
added a new BooleanFlag ENABLE _ ALL _ APPS _ IN _ TASKBAR to FeatureFlags . java to enable accessing All App
replaced direct instantiation of ` FragmentActivity ` with Robolectric ' s ` ActivityController < FragmentActivity > ` to streamline code and improve
renamed method ` getFileCoordinates ` to ` processFileCoordinates ` and added a new method ` getDecimalCoords ` in ` ShareActivity ` to improve
rename ABCase classes from " ABCase " to " TestABCase " across multiple files to improve clarity and consistency in naming conventions
updated the parameter name from ` num ` to ` value ` in ` saveEnergyPriceHistoryDone ` and added a null check in ` Manager `
refactored the handling of the RocketChangedEventHandler in OpenRocketViewer . java to improve code clarity and ensure proper handling of Sims
added a new file ChangeDependencyGroupIdAndArtifactId . java to implement a recipe for changing Maven dependency group and artifact IDs to enhance the functionality
updated FileSystem initialization and added segment check logic in IndexingJob . java and SegmentChecker . java to improve file system handling and ensure input paths are
updated comparison from ` gte ` to ` lte ` in ` GCObjectHeapIteratorAddressOrderedList _ V1 . java ` to ensure
refactor ` PreprocessorDelegate ` to use ` Supplier < ImmutableMap < Path , Path > > ` and ` ImmutableMultimap < String , SourcePath
changed the class name from JsonExamples to Examples in JsonExamples . java and package - info . java to clarify the purpose of the
added debug logging statements in ViewExtractor . java to improve visibility into extracted , copying , and closing of input and output streams to enhance traceability and
refactor FindsByLinkText class implementation to improve code readability and maintainability
added a new Main class in the com . facebook . buck . oop _ javac package to demonstrate the functionality of the oop entry point
add synchronized block to ensure thread safety when accessing shared resources to improve thread safety and ensure thread safety when accessing shared resources
removed redundant continue statements in NativeScanner . java to improve code clarity and maintainability
updated package declaration from ` net . pms . test ` to ` net . pms . configuration ` in ` RendererConfigurationTest . java `
replaced ImmutableSet with Supplier for queriedDeps and exportedDeps in AndroidLibraryDescription . java to streamline dependency resolution and improve code readability
replaced ` stream ( ) . count ( ) . count ( ) ` with ` size ( ) ` in ` DistBuildArtifactCacheImpl .
added charset handling to the ExtractingDocumentLoader class to ensure proper handling of content encoding from the content stream
updated SQL insert statements to use placeholders instead of hardcoded strings to improve code readability and avoid potential null pointer exceptions
added a check to return early if the slot is - 1 in WindowListener . java to prevent unnecessary processing when the slot is - 1
added a ` ignoreTransitiveRepositories ` option to the ` DefaultMavenExecutionRequest ` and ` MavenCli ` classes to control the behavior of remote
added @ Inject annotation to BackgroundJobManager in ContactsPreferenceActivity . java to ensure proper initialization of BackgroundJobManager in the activity
updated ColorsActivity to extend AppCompatActivity instead of Activity to ensure compatibility with newer Android versions
added a null check before closing the selection to avoid potential NullPointerExceptions when the selection is null
added a condition to break if the index is equal to the matcher ' s start and end to ensure proper handling of regexp matching based on index and
added a configuration parameter for the server port in the IntegrationTest annotation to configure the integration test to use a default port for testing purposes
added a new UDFReverse class to handle the " reverse " function in FunctionRegistry . java and created a new UDFReverse . java file
updated method calls from ` getContextPathEncoded ( ) ` to ` getRequestContextPath ( ) ` in multiple files to standardize method calls and improve
refactor Tracer class to improve code readability to enhance maintainability and facilitate future updates
added JUnit @ Ignore annotation to RocksDBStateBackendReaderKeyedStateITCase . java to temporarily disable the test due to potential issues
updated import statements in XMLChangeLogParserTest . java to include a wildcard import and removed unused imports to simplify import statements and improve code clarity
added synchronization to the buffer ' s clear method in StarTreeRecordStoreCircularBufferImpl . java to ensure thread safety during buffer operations
updated forecast minutes , hours , and days from 0 to 60 and 8 in OpenWeatherMapOneCallHandler . java to increase the forecast accuracy and
added timeouts and updated lastFetchTime and previousFetchRequestTime fields in AbstractPageOperationTemplateTest . java and AbstractPageOperationTemplateTest .
updated RemoteTargetGluer and FloatingHeaderView to improve handling of all apps content animation and suggestion modes to enhance user experience by providing clearer
refactor ` parseRerunFile ` method to return a ` Stream < Collection < FeatureWithLines > > ` instead of a flat map to
add new quartz chiseled block to the creative tab .
updated assertion statements in TestRadioButtons . java to verify the size of both optItem and retrievedOptions to ensure the correctness of the expected size
added support for file - sizes in RCFileCat and updated related conditions in RCFile to enhance file size handling and provide clearer
refactor multiple classes related to clustering coefficient , TriadicCensus , and HITS to improve code organization and maintainability across
added validation checks for DNDArray references in JnaUtils . java to ensure proper functionality of NDArray operations and prevent potential NullPointerException
refactor BlobServer class to improve code organization to enhance maintainability and readability of the code
[ java ] ignore unused private method call from initializer in unusedprivatemethodrule
updated variable names for clarity and consistency in LexicalContext and Global classes to improve code readability and maintainability
added a test method ` testAutoStartup ` to ` InboundChannelAdapterParserTests ` to verify the behavior of the ` SourcePollingChannelAdapter
added getter and setter methods to Node , Quadtree , and AbstractNode classes , and updated constructors in STRtree and AbstractNode classes to enhance
updated version parsing logic to handle both digit and digit versions to ensure correct version retrieval based on the version format
added a check for non - empty tags before adding them to the active item to ensure tags are only persisted when they are not empty before persisting
added a new method ` parseDateTimeStringToEpochMillis ` to ` DateTimePatternHandler ` and ` fromDateTime ` in ` DateTimeFunctions ` to
hhh - 17100 fix bug in stringwrapperusertype . getvalue ( ) and stringwrapper . getvalue ( ) . getBytes ( )
refactor Log4j2ConfiguratorServlet to improve code readability to enhance maintainability and facilitate future updates
replaced the instantiation of ` HiveException ` with ` AuthorizationException ` in ` StorageBasedAuthorizationProvider . java ` to simplify error handling by directly returning
updated CGoCompileStep to use ` String . join ` instead of ` get ( 0 ) ` and added a new test for C++ pre
added Buildable annotation to CustomResource . java to enable buildability for the kubernetes API builder
removed the @ Override annotation from mmm Only . java and ppp Only . java to improve code clarity and maintainability
added TIMEOUT _ THREE _ HOURS constant and applied it in HttpClientFactory . java to allow dynamic timeout values for HTTP connections
added new attributes " configured _ raw _ target _ node _ parse _ pipeline " and " configured _ raw _ target _ node _ parse _ pipeline
refactored the handling of " Disable TRACE " constraint and added a new constraint " enableOther " to improve clarity and functionality of the security configuration
removed the @ Singleton annotation from ApplicationController . java to streamline the code by eliminating unnecessary dependencies
added an import for OwnCloudAccount and improved username retrieval logic in ShareActivity . java to ensure accurate username retrieval based on account display name and
added BatchStatus import and a test for resuming paused jobs in SimpleJobLauncherTests to ensure proper job execution status handling in the batch processing process
added null check for cacheConfig before retrieving the last modification time in HttpSyncDataService . java to prevent potential NullPointerException when cacheConfig is not
[ grid ] make dockersession public in localnode . java
updated package name handling in CompilationUnitContext . java to use a constant for the default package name to improve code clarity and maintainability by using a
pdfbox - 4892 : use nonsequentialparser instead of pdfparser , a suggest by valerybokov
updated command - line arguments in TestDistributedLanczosSolverCLI . java to improve code readability and maintainability
refactor HttpServerTestBase class to improve code readability to enhance maintainability and facilitate future updates
refactor PortletApplicationMapTest to use HashSet and Set for key - value retrieval to improve readability and maintainability of test cases
added unit tests for ` NestedBeanIgnoreNulls ` to validate the behavior of ` innerBeanList1 ` and ` innerBeanList2 `
added RedissonAutoConfigurationCustomizer to customize Redisson configurations to enable customization of Redisson configurations in the application
updated the index calculation in Indicator . java and added a new IndicatorTest . java file with unit tests in IndicatorTest . java to
added new methods ` execInContainerWithUser ` to ` ContainerState ` , ` ExecInContainerPattern ` , and modified ` ExecInContainer
updated condition checks in NettyWebSocket to include both WebSocketByteListener and WebSocketTextListener in the interestedInByteMessages and interestedInTextMessages logic
added test methods for attribute conception and negation in SemgrexTest . java to ensure correct semantic graph representation to improve test coverage for attribute
added a broadcast intent to CLEAR _ PULL _ UNREAD in HomeFragment . java to enhance user experience by providing clear read messages
removed conditional logic for pre - gingerbread scrolling in TouchImageView . java to simplify the code and improve readability
updated BaseDstu21Config to use ` defaultProfileValidationSupport ` instead of ` new DefaultProfileValidationSupport ` and added a flush method to
camel - 14263 : camel - core - do n ' t throw runtimeexception if the veto can not be start .
added FAB menu functionality to the ShareActivity for displaying and closing the map to enhance user experience by allowing users to open and close the map menu
added inline parsing functionality to the ToDateTokenizer and updated related classes to enhance date parsing functionality and improve code clarity
updated TestAnonymousClassUnloading . java file to improve test coverage for anonymous class unloading
updated error messages to use " toppniv " instead of " det " and " toppniv " to improve clarity and consistency
added a condition to check if the server is checked before binding operations service to ensure that operations service connections are only bound when the server is checked
updated Position constructor to use ` getBeginLine ( ) ` and ` getEndLine ( ) ` instead of ` getBeginColumn ( ) ` to
added ` waitFor ( ) ` method to ` CxxPreprocessAndCompileStep ` , ` OutputProcessor ` , and ` ErrorProcessor ` classes
added a flag ` requireAllRepositorySources ` to ` PrincipalAttributesProperties ` and modified ` CoreAuthenticationUtils ` and ` CasPersonDirectoryConfiguration
make defaultrecordstore . checkifloaded ( ) a static method in mapcontainer . getmaximumsize ( )
added support for enabled SSL protocols in the Netty web server configuration to enhance security by allowing configurable SSL protocols based on configuration settings
replaced ` AtomicBoolean ` with ` AtomicReference ` in ` SetOnce ` and added a new ` Wrapper ` class in ` TestSetOnce ` to improve
updated QueryDslMongoRepository to handle null property and added a new test for retrieving the key when no path expression is provided to improve robustness
updated assertions in RoundRectBorderTest to remove references to RoundRectBorder to simplify test assertions and improve clarity of error messages
added a check to ensure the cluster is empty before creating the genesis configuration to prevent potential errors when the genesis configuration is not available
remove parallel test that be no longer require
updated CountDownLatch and List initialization to use ' min ' instead of ' cnt ' and added a check for the length of the sign array to ensure proper
updated conditional check from ` if ( windows ) ` to ` if ( ! windows ) ` in ` ProcessInformationsPanel . java ` to ensure
refactor ` maxN ` and ` minN ` methods to ` greatest ` and ` least ` methods in ` MoreCollectors ` to improve
added null checks and WebSocket client extensions in BitmexStreamingExchange , BitmexStreamingService , BitmexManualExample , and Bitm
added validation checks for latitude and longitude in GeoPointField to ensure proper exception handling for invalid latitude and longitude values
refactor methods in OozieProxyImpersonator and WorkflowFilesService to use getWorkflowFileName and getWorkflowDrafFileName instead of
refactor ResponderId class to improve code readability to enhance maintainability and facilitate future updates
updated the ` getTableDocument ` method to include a ` withDependents ` parameter and modified related methods to include a ` withDependents ` parameter
added support for handling consecutive uploads without coordinates in UploadPresenter to improve user experience by ensuring accurate feedback when uploading consecutive uploads without coordinates
added caching functionality for query data in ProfileResources and implemented a view method in ProfileResources . java to improve profile management and provide a way to view
refactor property handling in JpaMetamodelEntityInformation to improve id property extraction logic to enhance code clarity and ensure proper handling of nested entity properties
phoenix - 2577 update lastddltimestamp to bootstrap last ddl timestamp for table and view ( sergey shelukh
added support for registering default exception mappers in AbstractServerFactory and DropwizardResourceConfig to enhance error handling by allowing dynamic registration of exception mapper
updated the method call from ` storeFieldAction ` to ` storeFieldAction ` with a boolean parameter to allow for additional functionality in the ` Entry
updated the ` nativeCreateNSWindow ` method to include an ` ownerPtr ` parameter in ` CPlatformWindow . java ` to ensure proper handling
updated SQL table names in FileContentProvider . java from FILE _ REMOTE _ ID to FILE _ TABLE _ NAME to ensure consistency in table naming
added support for the STOCK type in Tile . java and modified related event handling in Tile . java to enhance the functionality of the Tile class and
fixed - rbuckets . get ( stringcodec ) do n ' t work with string codec
add findbugs . findunrelatedtypesingenericcontainer . findunrelatedtypesingenericcontainer annotation to typeframemodelingvisitor .
refactor back progress handling in LauncherBackAnimationController to utilize BackProgressAnimator to improve code clarity and maintainability by centralizing back progress
changed the visibility of the ` _ initialPageNo ` variable from final to non - final and added logic for updating the ` _ contentLimits
updated crc calculation logic in JedisClusterCRC16 . java and adjusted total operations in CRC16Benchmark . java to ensure accurate calculation of CRC16 data
added comment parsing logic in FormattedSqlChangeLogParser and created a test for it in FormattedSqlChangeLogParserTest to enhance changelog
removed the instantiation of JarArchiver in MavenArchiver and added a new import for JarArchiver in AbstractJarMojo to simplify the code and
replaced ` HumanReadableException ` with ` BuckUncheckedExecutionException ` and updated exception message formatting in ` DefaultClassUsageFileReader . java ` to improve
refactor conditional checks in TSServiceImpl . java and add multiAggregationTest method in DaemonTest . java to improve code readability and
added support for handling UNSIGNED _ BYTE and RGBA pixels in GwtGL20 . java to ensure that only UNSIGNED _ BYTE and
added a new test method for testing memory and debug information in OutputMemoryTest , PrintR , and VarDump classes to improve test coverage and ensure
replaced UnmodifiableClassException with a static utility method for handling exceptions to improve error handling and provide clearer diagnostics for class instrument failures
updated class initialization trace handling in NativeImageBytecodeInstrumentationAgent and added tracking of class initialization traces in ClassInitializationFeature to improve clarity of class
updated parameter name from ` queryLevelTimeoutMs ` to ` queryTimeoutMs ` in ` BaseBrokerRequestHandler . java ` to improve clarity and consistency
updated TopicRouteService to use Caffeine ' s CacheLoader instead of Google ' s CacheBuilder to improve cache management and enhance error handling for
modified the ` createDataSource ` method to accept a ` readOnly ` parameter and modified related logic in ` MBTilesDataStoreFactory ` to allow
updated the INVALID _ SOURCE _ TARGET _ RELEASE regex pattern to allow a maximum value of 1 to ensure accurate matching of source and target releases
modified the formatting of the URI string and added a location intent check in DetailFragment . java to improve code readability and ensure proper location navigation
add null check for inherited parameter contexts in StandardParameterContextDAO . java to avoid potential NullPointerException when accessing inherited parameter contexts
refactor ClassLoader class to improve code readability to enhance maintainability and facilitate future updates
added origin response header handling in ProxyRequestHelper and a corresponding test in ProxyRequestHelperTests to ensure proper handling of origin response headers in the proxy
added a new ProfileSettingDrawerItem ( ) in GpsMainActivity . java to enhance profile setting functionality
added XML validation configuration to Globals , Constants , and updated TldParser initialization to use this new constant to improve XML validation handling and ensure proper
updated error message formatting and added a new test for string handling in ExecutingJavascriptTest and FirefoxDriver to improve clarity of error messages and ensure
added a new variable ` maxRows ` and updated fetch size handling in ` IoTDBStatement . java ` to allow dynamic adjustment of fetch size
refactor condition checks in SqlStreamTerminator to use ` allActionsAreOptimizableFilters ` instead of ` isCountOptimizable ` to
added event handling for node click and mouse click events in StandardVizEventManager . java to enhance visualization functionality by allowing users to click on nodes
refactor memory handling in ManyToOneRingBuffer by introducing a new method ` zeroBuffer ` to improve code readability and maintainability by central
refactor ` xorGroup ` initialization to use ` memory ` instead of ` this ` to improve code readability and maintainability by centralizing the
removed the getHeight ( ) and getWidth ( ) methods from LCDUIImageMonochromeBitmapSource . java to streamline the code by eliminating unnecessary methods
refactor SourcePathResolver to use getPathPrivateImpl for sourcePath retrieval and introduce a method to retrieve all absolute paths to improve code clarity and
added attribute handling in ParserState . java and a corresponding test in XmlParserDstu2Test . java to ensure correct parsing and parsing of identifiers
changed the visibility of the ` changeSchemeIfIsWebSocketUpgrade ` method to static and added encoded URL handling in ` WebsocketRoutingFilter ` to
updated file paths for test suite configurations and execution configurations in LLVMPaths . java to include additional execution configurations and improve test execution
added a private method ` getCxxPlatform ` to retrieve CxxPlatform from ` HaskellBinaryDescriptionArg ` to improve flexibility by allowing dynamic retrieval of
added imports for ` IndexReader ` , ` IndexWriter ` , and ` Similarity ` in multiple Java files to enable the use of Lucene
added null check for current . get ( ) and updated method names for peek and pop methods in ConcurrentLinkedStack to improve robustness and clarity of
added ` isMatched ( ) ` and ` setMatched ( ) ` methods to ` BinaryHeapQueueTest ` and ` BaseQueueable ` classes
added a null check for mDirectories before initializing its arrays to avoid potential NullPointerExceptions when mDirectories is null
updated gesture condition in RecentsView to conditionally check overview state to ensure proper handling of overview state when the overview state is not enabled
added package - info . java files for various backward - codecs packages to provide package - level documentation and improve package organization
added a text field to the AutoLevelerTopComponent to indicate the visibility of the auto leveler panel
added post - optimize callbacks in DirectUpdateHandler , DirectUpdateHandler2 , and UpdateHandler classes to enable post - optimization functionality for Solr updates
modified decompressor and compressor initialization to include a padded length and set dummy byte to 0 to ensure proper compression handling and prevent potential null pointer exceptions
removed the check ( user _ data ) method from Shaderc . java to simplify the code and improve readability
added a condition to check if the base is localMetaStore before retrying retries to ensure retries are only attempted when the base is a local meta
added null checks for hostStatus and improved exception handling in HeliosSoloLogService . java to ensure proper handling of null hostStatus and
refactor Subject class to improve code readability to enhance maintainability and facilitate future updates
fix concurrency issue in abstractserializationservice ( # 11824 )
updated color distance calculations in HSSFPalette . java and added a new test for finding similar colors in HSSFPalette . java to ensure
refactor multiple Java classes to improve code organization and readability to enhance maintainability and facilitate future updates
simonstewart : add unit test for findelementbynumericid and findelementsbynumericid
added a new parameter ` flags ` to the ` ShadowApplication ` and ` ShadowContextImpl ` classes and updated related registration methods to support additional flags
updated mockito invocation in FFmpegTest . java to use a mock method for BufferedReader to improve code readability and maintainability by using a more
added a previousInput variable and modified OggInputStream and OpenALMusic classes to ensure proper resource management and prevent potential memory leaks
added a constant for ` RESPONSE _ WAS _ NULL ` and modified the failure message assignment to improve clarity and maintainability of the failure message
[ hotfix ] [ table - common ] fix checkstyle violation in migration
added Toast functionality to the BaseActivity and DetailActivity classes to enhance user experience by providing feedback when navigation changes occur
updated the method in TracingFeignClient to include the request template from the delegate method to ensure the request template is included in the request
updated LDAPCertStore to improve referral handling and added name validation logic to enhance robustness and error handling for LDAP requests
refactor retain method calls in GatewayRSocket . java to use a dedicated method to improve code readability and maintainability by centralizing the retain
renamed ` AdapterViewTest ` to ` ListViewTest ` and added a new test for item click behavior to improve clarity and ensure proper functionality of item
[ hotfix ] [ test ] remove unused code in checkpointfailuremanageritcase
deleted the GenericItemUIProvider . java file to remove unused code to streamline the project
added a selectedObject field and its getter and setter methods to SIPCommSelectorBox to enable dynamic selection of selected items based on their text
added an import statement for the Isolated annotation and annotation in MetaInfConfigurationTest . java to ensure proper access to the static method of FileSystem
added a call to set the server connector host from HTTP _ INFO . bindAddress to ensure the server connects to the specified bind address
updated token and refresh token validity settings in DynamicClientRegistrationEndpoint . java to improve client registration logic based on heart mode and grant types
added a CloverInstrumentationFilter to check if the class is an interface or an interface in TestInterfaceAudienceAnnotations . java to ensure compatibility with instrumentation
added support for the Smartmi Evaporative Humidifier in MiIoDevices . java and updated ReadmeHelper . java to enhance
refactor MineProcess to use CalculationContext instead of BlockStateInterface for better handling of drops to improve code readability and maintainability by
changed the visibility of the setScrollRangeDelta method from package - private to public to allow access to the method from other packages
added checks for empty repository list in ClusterStackVersionResourceProvider and HostStackVersionResourceProvider to ensure that Ambari is not managing the repository
updated the condition for checking missing values in IntHashSet to simplify the logic for determining if a value is present
added Serializable interface to RuleAdministrator to ensure proper serialization of the RuleAdministrator instance
refactor CrossOriginFilter to use Set for allowed origins and patterns instead of Lists to improve performance and flexibility in handling wildcard origins
updated file paths for G3D files in BaseG3dHudTest . java and NewModelTest . java to ensure compatibility with the
added a check for negative solidifiedPosition in the numHashCache putData call and added error logging for updateLatestSolidifiedBlock error to improve
hbase - 14545 fix nullpointerexception in htable . coprocessorexec ( )
added a method to check if a user has access to a page in the HttpServer class to improve security by preventing potential NullPointerExceptions during unauthorized access
replaced the ` writeTo ` method with a ` getStubClassBytes ` method in ` ClassMirror ` and ` StubJar ` classes to streamline
added a text field for the internal link text in FileDetailSharingFragment to enhance user experience by providing context - specific information for internal links
updated string formatting in PredictionTest . java to use Locale . ENGLISH for accuracy to ensure consistent accuracy reporting across different locales
updated condition from ` SATURDAY = = ` to ` SATURDAY ! = ` in ` ModelZooTest . java `
added methods to hide input in AllAppsContainerView and updated hideIme method in LauncherAllAppsContainerView to improve user experience
updated event handling and tracking configurations in EventHandlingConfigurationTest and SagaConfigurationTest to use InMemoryEventStorageEngine to ensure proper configuration of Embedded
refactor ` getmntonname ` method in ` BsdFileStore ` , ` BsdNativeDispatcher ` , and `
added a new test class ` Issue1599Test ` to validate the resolution of ` MethodCallExpr ` in the ` JavaParser ` to ensure
added a new parameter for ` x ` and ` z ` in the ` spawn ` command in ` SpawnCommand . java ` to enhance command
added a constant for minimum content height and refactored content area dimensions to improve code readability and maintainability by centralizing content area dimensions
refactor GraalCompilerTest and HotSpotCryptoSubstitutionTest to use a final variable for graphCopy and add a debug scope for code installation to
replaced ` newDirectory ( ) ` with ` newMockDirectory ( ) ` in ` TestIndexWriter . java ` to ensure compatibility with Windows '
added pluginCheckClassNames to pluginChecks and modified addColumnsToUpgradeTable method in UpgradeCatalog280 . java to ensure plugin checks are
refactor Environment class to improve code readability to enhance maintainability and facilitate future updates
added import for LuceneTestCase and annotation for SOLR - 7421 in RecoveryAfterSoftCommitTest . java to address a bug related to SOLR
updated string concatenation logic in CodenameOneImplementation . java and removed unnecessary warning in HashtableContent . java to improve code clarity and ensure proper handling of
updated flags from FLAG _ IGNORE _ HDMV _ DTS _ STREAM to FLAG _ ENABLE _ HDMV _ DTS
updated LiquibaseEntityResolver and XMLChangeLogSAXParser to use wildcard imports and modified XMLChangeLogSAXParser to enhance resource management
added Security . setProperty ( " jdk . tls . disabledAlgorithms " , " " ) to ComHostnameVerifier and JavaxHostnameVerifier to disable
updated ` @ Value . Immutable ` annotation to include builder and copy options in ` AbstractCxxDeps ` and ` CxxLibraryDescription ` to
renamed ` expectedDirectory ` and ` actualDirectory ` to ` expectedStubDirectory ` and ` actualStubDirectory ` in ` StubJarTest . java
removed unnecessary whitespace in Int2ObjectHashMap . java to improve code readability and maintain consistency
updated folder name handling to check for non - empty titles before setting hint and text to improve user experience by allowing empty folder names to be displayed
updated the method signatures for loading client details from " example " to " uaa " in UaaResetPasswordServiceTests . java to include a
changed access modifiers of methods from public to private in ShadowSQLiteDatabase . java to restrict access to these methods for better encapsulation
updated value concatenation logic in AtomicCounter , AtomicLongPosition , and UnsafeBufferPosition classes to handle isClosed cases more effectively to ensure proper handling of closed
refactor MimetypeIconUtil class to improve code readability to enhance maintainability and facilitate future updates
rename method ` supportsViewFor ` to ` supportsViewsFor ` across multiple view provider classes to improve clarity and consistency in naming conventions
added a new test for negated instances in UnnecessaryParenthesesTest . java and updated UnwrapParentheses .
added build flag and teleport functionality to the Location class to ensure proper handling of location creation based on the built state
replaced instances of ` Base64 . encode ` with ` Base64Utils . encodeToUrlSafeString ` in ` TokenKeyEndpoint ` to improve
added ProjectComponent dependency and updated Statistics method call in TranslatorManagerHelper . java to enhance statistics reporting functionality for project - specific statistics
rename the ` ContainerAnnotation ` interface to ` ContainedBy ` to improve clarity and consistency in naming conventions
added an assertion to ensure that the ` getId ( ) ` method returns a non - null value to ensure that the ` getId ( ) ` method
modified the setUpRevampedTweet method to include a muffled check for the retweeter string to ensure that the retweeter is
added conditional logic to display verified text based on the theme settings to ensure verified text is displayed based on the application ' s theme settings
refactor AbucoinsDigest to remove static instance variable and improve code readability to enhance maintainability and reduce potential memory leaks
camel - 11436 : camel - mongo - add autowired mongo connection to camel - mongo
added a ` sourceIndex ` parameter to the ` AttributeMapping ` class and updated related methods to support it to enable retrieval of the last source index
added error handling for corrupted partition statistics in SemiTransactionalHiveMetastore to improve robustness of partition statistics retrieval and provide clearer
added a call to ` UserGroupInformation . isSecurityEnabled ( ) ` in ` AuthParams . java ` to check if security is enabled in
updated ConnectivityReceiver , TerminalKeyListener , and EastAsianWidth classes to improve code organization and maintainability
do n ' t escape the email in the home page if it ' s empty
refactor reflection enriching logic in TerasologyEngine and ModuleManagerImpl to streamline the process of enriching reflections with subsystems
added assertion for the number of features in JoinModeller . java to ensure the correct number of features are written to the MMF stream
algebraprocessor : check if the command be not empty before parse it
added conditional checks before logging debug and trace messages in SingleNodeKafkaResumeStrategy . java to ensure logs are only logged when isDebugEnabled is enabled
replaced direct usage of ACTION _ SET _ PLAYBACK _ SPEED with PlaybackStateCompat . ACTION _ SET _ PLAYBACK _ SP
updated IgnitionConfigurationHandler , MotorMountHandler , AxialStage , and IgnitionEvent classes to ensure compatibility with the latest motor
tika - 164 : add validation for ascii name length and unicode length in MSOwnerFileParser . java to ensure ascii name lengths are
added an @ Ignore annotation to JdbcFrontJdbcBackLinqMiddleTest . java to mark the test as non - deterministic on JDK
refactor lock file creation in MavenDependencyResolver to use a dedicated method to improve code readability and maintainability by encapsulating file creation
updated the version check from " version _ 5 _ 3 " to " version _ 5 _ 3 _ 1 " in UpdateUtils . java to ensure
added a check to return null if the username equals FEDERATION _ USER to ensure proper handling of FEDERATION _ USER in authentication
truffle : do n ' t use truffleobject in executemethodnode if parameter be not a truffleobject .
removed unnecessary collect ( Collectors . toList ( ) ) from JakartaClientShutdownWithServerWebAppTest and JakartaClientShutdownWithServerWebAppTest
added FilterAttachable to LogbackValve and modified error status handling in LogbackValve . java to enhance filter chain decision handling and improve
refactor Collection and Map classes to improve code readability to enhance maintainability and facilitate future updates
added import statement for org . apache . lucene . util . Version in CreateIndexTask . java to utilize Lucene ' s Version class for improved
added schema handling for backing indexes in MissingPrimaryKeyChangeGenerator . java to ensure correct schema is set for indexes in the comparison database
added ` MetastoreException ` to ` execute ` method and updated exception handling in ` MsckOperation ` to improve error handling and provide clearer
[ hotfix ] [ kafka ] retry commit transaction to avoid deadlock
[ issue # 4841 ] remove receipthandle from forwardmessagetodlqactivity ( # 4841 )
added a service list to DockerComposeContainer and created a new DockerComposeServiceTest class to handle empty and non - empty services to improve service management
updated import statements in Export , StructContextDecorator , and StructContextDecorator to use a static copySet method to improve code readability and maintainability
removed unnecessary imports and simplified return statement in FeedParser . java to improve code clarity and reduce unnecessary dependencies
removed conditional check for DISABLE _ ALL _ APPS in Launcher . java and updated getChildAt method in Workspace . java to simplify code and improve
change the data type of energyReactiveVArACSumConsumed , energyReactiveVArACSumProduced , and powerApparent
added a new file ` bug4150029 . java ` that implements a JApplet with a temporary directory and sub - directory handling to address
added a boolean field ` isSparkConfigUpdated ` and its getter and setter methods in ` HiveConf ` , ` SparkClient ` , and
added ` getLongPressIndicator ` methods to ` AppIcon ` , ` AppIconMenuItem ` , and ` AppIconMenuItem ` classes , and modified
added a check for empty polygons in WKBWriter and updated test methods in WKBWriterTest to ensure proper handling of empty polygons and
refactor ` UnflavoredBuildTarget ` to use ` UnflavoredBuildTarget . Builder ` instead of ` NativeLibraryMergeEnhance
added a new file ` MultiplyByMaxInt . java ` containing a method for calculating the maximum value of an integer to implement a test case
added a check to enable the drawer indicator based on the current file state to ensure the drawer indicator is enabled when the current file is displayed
changed package declaration from ` org . apache . lucene . index . store ` to ` org . apache . lucene . store ` and removed unused import
replaced ` FixedBitSet ` with ` BitSet ` in ` Automaton ` and ` Operations ` classes to simplify code and improve performance by eliminating unnecessary
danielwagnerhall : add error message for no expression define for a name on a node
[ java ] replace @ containby ( c ) with @ repeatable ( c ) .
updated the file sending duration calculation in AbstractController . java to improve clarity and accuracy of the file sending process
updated class name handling in OpenMBeanAttributeInfoSupport . java to ensure proper package access checks before using Class . forName to improve code clarity and ensure
updated ReadResponseResolver and QuorumResponseHandler to accept a responseCount parameter to enhance flexibility in response handling based on response count
added a call to decrement freeSize by applying roundTo16 ( s ) instead of roundTo16 ( s ) to ensure that freeSize is
modified the ` areTouchesDisabled ` method to accept a ` MotionEvent ` parameter and modified related logic in ` AnyKeyboardViewBase ` to enhance touch
added SslContextFactory . Server to multiple HttpServer , RESTServer , and ThriftServer classes to support additional SSL context configurations
removed the PrivilegedSocket class and its implementation from PG _ Stream . java to simplify the socket creation process by eliminating unnecessary privilege checks
refactor InputTest class to improve code readability to enhance maintainability and facilitate future updates
added pauseBlurs functionality to DepthController and improved finishRecentsAnimationOnAppeared method signatures in AbsSwipeUpHandler to enhance blur management
added a null check for curLatLng before removing the current location marker to avoid potential NullPointerExceptions when curLatLng is null
updated the method to retrieve the client details from the clientDetailsService instead of the client to ensure that the secret is removed from the client details service
updated SQL query formatting in SqlSourceBuilderTest to use a single tab character to improve readability and maintainability of the test code
added imports for ExecutorService , Executors , and TimeUnit in ActiveMQMessageConsumer . java to ensure proper resource management and prevent potential memory leaks
added tests for handling unknown keys in the SlidingGanttCategoryDataset class to ensure proper exception handling for keys in the SlidingGant
updated condition filtering logic in ShenyuTrieRuleListener . java and added return statements in ZookeeperSyncDataService . java to improve code clarity
replaced Spatial import with Cloner and added constants for control direction and light names to improve code readability and maintainability
updated conditional logic for stack handling in StdErrLog . java to improve code clarity and maintainability by using a more descriptive variable name
refactor HttpSessionEventPublisher to use a dedicated method for obtaining the ApplicationContext to improve code readability and maintainability by encapsulating context
updated the syntax check for CREATE CQ statement in ASTVisitor . java to ensure compatibility with the latest semantic version of the CREATE CQ statement
[ hotfix ] [ test ] fix typo in flinkiotdbsink
added a counter for custom simplified nodes in the CanonicalizerPhase class to improve code clarity and maintainability by reducing redundant checks
updated fileIcon method to include a context parameter to ensure the correct context is used for file icon rendering
updated indexOrConstraintName initialization to use the schema ' s name instead of the schema ' s name to ensure the correct schema name is used for
added datetime handling for TIMESTAMP fields in BigQueryTableRowIterator and created a corresponding test in BigQueryUtilTest to ensure accurate reading of timestamp
added ` findViewWithTag ` method to ` ShadowView ` , ` ShadowViewGroup ` , and ` ViewGroup ` classes to support tag -
change type casting from ( String ) to ( Enumeration < String > ) across multiple classes to improve type safety and reduce casting overhead
updated import statements in IndexTool and MetaDataClient classes to improve code clarity and maintainability
added JSON _ VALUE and JSON _ CREATOR constants to DocAnnotationConstants and modified enum value retrieval logic to support additional JSON - related annotations and
[ gr - 32266 ] fix classpath file check in resourcesfeature .
added new values for CUDA _ R _ 16F , CUDA _ C _ 32F , and CUDA _ C _
refactor ResourceLoader class to use FileFilter for listing resource directories to simplify the resource loading process and improve code readability
check for simpleattachablematerialdata before call getattachedface ( ) .
[ calcite - 2411 ] add support for varbinary type in reltostageconverter ( zheng xiong )
added import statement for DateHelper in NoteAdapter . java to utilize DateHelper for date formatting functionality
updated message handling for backup loading and error handling in Backup . java to improve clarity and functionality of backup loading and error feedback
change the position of the element from ABSOLUTE to RELATIVE in EuclidianSimplePanelW . java to ensure the
removed redundant check for file deletion in ShadowParcelFileDescriptor . java to simplify file creation logic and improve code clarity
replace poll with addFirst for security context handling in StackBasedSecurityContextHolderStrategy . java to ensure proper ordering of security contexts in the security context
change the rule name from " optimizations " to " controversial " in BooleanInversionTest . java to clarify the purpose of the rule being used
added unit tests for ` XorNode ` , ` XorNode ` , and ` BinaryNode ` in ` IntegerEqualsCanonicalizerTest `
added a static final Type STRING _ ARRAY in TypeFactory . java to ensure proper handling of String array types
refactor hideIme methods in AllAppsContainerView , LauncherAllAppsContainerView , LiveSearchManager , and StatsLogManager
fix bug where bit density do n ' t work correctly for iso8601
updated assertions in TimelineMetricCacheSizingTest and TimelineMetricCacheTest classes to improve readability and maintainability of the code
fix ( forge ) : add gl _ max _ texture _ size optimization .
[ java ] : fix typo in trystoplogrecording ( ) call .
added a condition to reset startPosn when in transform mode to ensure correct positioning when in transform mode
removed the ` isStarTreeDisabled ` method from ` AggregationGroupByOrderByPlanNode ` and added a new ` QueryOptionsUtils ` method
added a boolean flag ` lockNearbyView ` and modified ` refreshView ` methods to handle hard refresh conditions to improve user experience by preventing unnecessary
added methods to create a MapTransformer that accepts a Map < K , V > map and a BiMap < K , V > biMap to
refactor EmeddedObjects and EmbeddedObjects classes to improve code organization and maintainability
added support for handling launcher widget span information in LauncherPreviewRenderer and PreviewSurfaceRenderer to enhance widget loading functionality and improve user experience
replaced ` ChangeEvent ` with ` StateChangeListener ` in ` StageSelector ` and ` StageAction ` classes to align with Openrocket ' s event
added methods to set and reset ` callingPid ` and ` callingUid ` in ` ShadowBinder ` to enable resetting of the ` ShadowBinder
updated ` ExpectationFailure ` class to use ` com . google . common . base . Objects ` instead of ` AutoValue ` to improve
added a warning log statement for deserializing messages with names to provide clearer diagnostics when deserializing messages with names
refactor calculations for newW and newH in ImageReplacedElement . java to check for - 1 values before calculating new dimensions to improve code
added handling for special characters ' &# 9 ' and ' &# 32 ' in CoreMarkdownNodeRenderer and updated MarkdownWriter to handle &#
refactor SharePasswordDialogFragment to use a dedicated method for setting password to improve code clarity and maintainability by encapsulating password setting logic
refactor ` MAP _ ADDRESS ` and ` UNMAP _ BUFFER ` methods to use a new ` MappingMethods ` class to improve code
changed access modifiers of methods in AbstractAssert _ describedAs _ to _ console _ Test from public to package - private to enhance encapsulation
added new OPTION _ SLIDER _ KEYTAB _ DIR and OPTION _ SLIDER _ KEYTAB _ DIR
added a JFrame parameter to the tearOutGraphViewContainer method in ExtractionModelFrame . java and updated animation management in DataBrowser . java to
added a new boolean flag ` mHasLoaderCompletedOnce ` and modified shortcut binding logic in ` LauncherModel ` to ensure that shortcuts are
refactor NodeManageMemoryMergeOperator , NodeManageMemoryConvertOperator , NodePathsConvertOperator , and NodePathsCountOperator classes to improve code clarity
updated the ` ValidationReport ` class to include ` messageType ` and ` checkResults ` parameters and introduced a new ` JsonValidationReport ` class
added a safe method ` safeProviderName ` to retrieve the cipher provider name and improved error handling in ` RSAClientKeyExchange . java ` to
[ hotfix ] [ network ] rename dynamicconfiguration to flinkconfiguration in containerspecification
change log level from WARNING to OFF in CCJSqlParserUtil . java to disable logging for better user experience
removed conditional indent formatting in AggregateLifeCycle . java to streamline output formatting for better readability
changed BITMAP _ HEIGHT and BITMAP _ WIDTH from private to public static constants to allow access to these constants from other classes
added an @ Ignore annotation to the CovariantOverrideTest class to indicate that the test does not implement the covariant override functionality
refactor curly and qtype methods in Pattern . java to use a new Qtype method to improve code clarity and maintainability by centralizing
camel - 16144 : camel - core - fix camel - core - reload strategy to load route definition from xml .
added space minimum and maximum settings for the X - axis in ScatterChart . java to improve layout flexibility for scatter charts
updated string concatenation syntax in ExpressionStringBuilder . java to improve readability and maintainability of the code
added ` shouldPreserveDataStateOnReapply ` method to ` SplitScreenSelectState ` , ` BaseState ` , and ` StateManager `
added a check to ensure the UTF8 key is present in the properties file to prevent runtime errors when the UTF8 key is missing
updated TestReproduceMessage and LuceneTestCase to use SeedDecorators instead of RunWith in LuceneTestCase to improve code clarity and maintainability by
added UI event for long - pressing an AllApps item in StatsLogManager and integrated it into ItemLongClickListener to enhance user experience by
added null check for log in StoreWAL . java and created a new test class Issue112Test . java to ensure proper handling of null log
added a null check for the sector preset in the showSectorLandInfo condition in Control . java and modified the condition in SectorPreset .
updated type casting from CompositeType to CompositeType < ? > across multiple classes to improve type safety and prevent unchecked casting issues
refactor Enum class to improve code readability to enhance maintainability and facilitate future updates
updated the ` buildNearbyRandom ` method to accept a ` boolean ` parameter for randomSelection and adjusted distribution parameters to enhance random selection validation and
replaced ` ConcurrentHashMap ` with ` Cache ` and refactored cache retrieval methods to simplify cache management and improve code clarity
set visibility of createSQLViewContainer and createWMSLayerImportContainer to false for DataStoreInfo and WMSStoreInfo to ensure proper visibility
set the ` Availability _ availability ` variable to ` Availability . UNAVAILABLE ` to ensure that the ` Availability ` variable is set to
added sync finish check and updated method signatures to use BlockCapsule instead of long to improve synchronization handling and enhance clarity of commit message processing
update retry settings in PhishingProtectionServiceV1Beta1StubSettings to use " no _ retry _ 1 _ codes " instead of
changed the default value of ` _ freeSpaceReclaimDisabled ` to ` _ freeSpaceReclaimQ ` and updated related methods to accept a
changed ` KDC _ OPT _ PROXIABLE ` and ` KDC _ OPT _ FORWARDABLE ` from public to private
refactored the initialization of JsonWriter to ensure proper initialization of the writer to improve code clarity and prevent potential NullPointerExceptions
reformatted code for consistency and clarity in ProfilePager . java to improve code readability and maintainability
updated the paintBackground method name from ` paintBackground ` to ` paintComponentBackground ` in ` Slider . java ` to improve clarity and consistency
added a method ` valueFromClassConstant ` to retrieve a ` Object ` value from a class constant to improve configuration handling for object value constants
added error handling for initialization in KafkaService to improve robustness by logging errors during service initialization
updated RESOURCES _ TO _ ALWAYS _ ACQUIRE to use ImmutableSet instead of a new HashSet to enhance flexibility by allowing different resource paths for
( chore ) camel - message - bus : add option to auto - create channel for default message endpoint .
added keywords property handling and a test for indexing keywords in HTMLDocument . java and TestDemo . java to enhance document indexing functionality and ensure correct
updated SDK version check from S to R in FileUploader . java to ensure compatibility with newer Android versions
added an else clause to the ` _ addresses ` initialization in ` MemcachedSessionDataMapFactory . java ` to ensure that the initialization of ` _
replaced instantiation of ` new CorrespondenceSubclassToFactoryCall ( ) ` with ` class ` in ` CorrespondenceSubclassToFactoryCallTest
refactor Builder class to improve code readability to enhance maintainability and facilitate future updates
updated URL construction and exception handling in ISBNtoBibTeXFetcher . java to improve error handling and provide more informative status
refactor exception handling in PolyglotImpl , PolyglotLanguageContext , and PolyglotLimits classes to improve error handling and reduce
added null check for text before setting cursor position in TextField . java to prevent potential NullPointerException when text is null
added TreebankLanguagePack and simplifiedModel fields to Options and SentimentModel classes , and refactored method signatures in SentimentModel
trim whitespace from lines in SuffixURLFilter . java to ensure consistent formatting and prevent potential errors
added a check to return early if the player is in Godmode mode to prevent unnecessary processing when the player is in Godmode mode
removed conditional registration and unregistering of popups in CheckboxCreationDialogW . java and TextInputDialogW . java to streamline popup management and
removed unnecessary parameters from LinkedHashMapCache and BoundedLinkedHashMap constructors to simplify constructor parameters and improve code clarity
updated the method call from ` _ channel . close ( ) ` to ` close ( ) ` in ` ChannelEndPoint . java ` to ensure proper
added null check for keyIndex in FixAcidKeyIndex . java and modified KeyIndexBuilder initialization in OrcRecordUpdater . java to
updated exception handling in DirectUpdateHandler2 . java to include Locale . ROOT for better locale - specific exceptions to improve error reporting for better debugging and
added a storeCheckGuard field and updated related methods in WriteNode . java and DefaultJavaLoweringProvider . java to utilize it to improve
refactor BciBlockMapping to use BciEntryBlock for edge checks to improve code clarity and maintainability by using a more descriptive
added ` getClassificationDisagreement ` method to ` AbstractCloud ` , ` Cloud ` , and ` DBCloud ` classes , and updated
replaced ` BuildTarget . copyOf ( ) ` with ` BuildTarget ` assignment across multiple files to simplify code and improve readability by eliminating unnecessary instantiation
refactor SqlRunner class to improve code readability to enhance maintainability and facilitate future updates
changed the type of ` date _ taken ` from ` String ` to ` long ` in ` InstantUploadBroadcastReceiver . java ` and ` File
changed the visibility of ` knownApis ` and ` knownSdks ` from private to public and modified the initialization of ` DefaultSdk ` to
replaced ProgressIndicator with ConfidenceProgressIndicator in CreateOfferView . java to enhance confidence indicator functionality
updated user agent check from " Cling / " to " UMS / " across multiple files to ensure compatibility with the new user agent format
added a forceIterate parameter to the iterateBpt method in TileBuilder . java and updated related methods in BlockIndex . java to enhance the iteration
added view types for messages and updated item creation logic in CrowdfundingChatAdapter to enhance user experience by providing a more appropriate view type for
replaced ` memEncodeUTF16 ` method with ` memEncodeASCII ` in LinuxLibrary and MacOSXLibraryDL to ensure proper encoding of ASCII
update CONJP relation syntax in EnglishGrammaticalRelations . java to improve readability and maintainability of the code
removed the canvas parameter from the insert method in TexturePacker . java to simplify the method signature and improve image processing efficiency
replaced the ` getVisitors ( ) ` method with a new ` apply ( Refactor < S , T > refactor ) ` method to
added methods ` getChildByName ` and ` getChildrenByNameRecursive ` to retrieve child elements by name to enhance functionality for retrieving child elements based on their names
set the Content - Charset header to " UTF - 8 " in HttpSolrServer and BasicHttpSolrServerTest to ensure consistent UTF - 8 encoding
added ` SystemUiControllerFlags ` annotations to ` TaskThumbnailView ` , ` AllAppsTransitionController ` , and ` SystemUiController `
removed the clientService variable from IntrospectingTokenService . java to streamline the code by eliminating unnecessary variable
updated the exception message in HiveRecordSet . java to include detailed error details to improve error reporting for better debugging and debugging
removed the private byte [ ] ownerId and its assignment in NodeEntry . java to streamline the code by eliminating unused field
corrected a typo in the configuration key from BackupSnapshotAferTakingSnapshot to BackupSnapshotAfterTakingSnapshot to ensure consistency
updated the ` merge ` method to include score and adjusted textEndPos assignment logic to ensure consistent scoring based on the score from the ` frag2
removed the private Digester variable from Md4PasswordEncoder . java to streamline the code by eliminating unnecessary variable
added a validation check for maximumUnimprovedStepCount in UnimedStepCountFinish . java to ensure that maximumUnimproved
added a check to return early if currently open editors are empty in EditGcodeFile . java to improve performance by avoiding unnecessary processing when no
refactor BDDMockito to use Mockito ' s ` verify ` methods instead of direct calls to ` verify ` to improve code readability and
updated the classloader reference from Thread . currentThread ( ) . getContextClassLoader ( ) to PathScanner . class . getClassLoader ( ) to ensure compatibility with the
refactor ` sayHi2 ` method to use ` CompletableFuture < String > ` instead of ` String ` in ` CodeFirstPojoClient `
added logging functionality to AbstractSplitBrainProtectionTest and updated method signatures in AbstractSplitBrainProtectionTest . java to enhance logging capabilities and ensure
added logout configuration check before adding the logout page generation filter to ensure that the logout page is only added if it exists to prevent potential NullPointerExceptions
corrected a typo in the string concatenation in CASgiac . java to improve readability and maintainability of the code
added log consumer functionality to DockerComposeContainer and created a new test class DockerComposeLogConsumerTest to enhance logging functionality and improve test coverage for Docker
updated the type parameter of the testMapping method from ` Class < ? > ` to ` Class < ? > ` in ` StandardJavaTypeMappingTest
removed unused imports from AmbariMetaInfoTest . java to clean up the code and improve readability
added a static method ` fromSupplier ` to the ` ThrowingSupplier ` class to facilitate the creation of a ` ThrowingSupplier ` from a
replaced a break statement with a return statement in ConsoleActivity . java to improve code readability and maintainability
camel - 14263 : camel - platform - http - add support for content - type content - post in platform - http
added platform - specific path handling methods in MorePaths . java and updated source path resolution in AarWithLibsIntegrationTest . java to improve path
added a null check for authorizationContext ' s params before iterating to avoid potential NullPointerExceptions when accessing Solr parameters
added a new method ` throwExceptionIfFail ( ) ` and modified the ` load ` method to throw an exception if the file does not exist
updated Android SDK version from " 4611349 " to " 4514284 " and added new test cases in ShadowTextToSpeech to
refactored QueueTransactionLog to return a TransactionLogKey for itemId and name to improve code clarity and maintainability by encapsulating
added ` enableSqlWithoutProfile ` property and corresponding getter / setter methods to ` JdbcEnvironmentProperties ` , ` JdbcEnvironmentRepository ` , and `
added a try - finally block around the write method in ConnectHandler . java to ensure proper resource management and prevent potential memory leaks
update create _ regexps to use eventgenerator . fromfunction ( ) instead of supplier ( )
updated date formatting in DateUtils . java and removed an assertion in FontParsersTest . java to ensure correct date formatting and improve test reliability
updated method signatures in CachedThreadStatesGaugeSet and ThreadStatesGaugeSet to include STACK _ TRACE _ DEPTH parameter to enhance thread information retrieval
added a new field ` prevTlogOnPrecommit ` and modified the sleep duration in ` LeaderTragicEventTest ` to improve transaction
updated the file path from " . Net / Job - P2 - V6 / " to " . Net / Job - 1.15 / "
added null check for input path before creating the output directory to ensure the output directory is created and prevent potential NullPointerExceptions
added methods to calculate normal vectors for DefaultObj objects and refactored TriangulationHelper to use this method to improve code organization and maintainability
updated the ` find ` method to include ` IdentityZoneId ` parameter in the ` JdbcAuditService ` class to ensure accurate retrieval of audit events
refactor SpanCollector class to improve code readability to enhance maintainability and facilitate future updates
added a null check for the session before retrieving the current session information to ensure that the session information is only retrieved when it is not null
refactor TransactionIsolationLevel class to improve transaction isolation level handling to enhance code maintainability and readability
updated method names in OshiController . java for consistency to improve code readability and maintainability
added a new variable ` currentThreadName ` and updated thread name setting in ` TestSession . java ` to improve thread management by providing a clearer
refactor CookieManager class to improve code readability to enhance maintainability and facilitate future updates
replaced the creation of an ArrayList with an empty return statement to simplify the code and improve readability
added a new OverviewToAllAppsTouchController to the list of OverviewToAllAppsTouchController to enhance user experience by providing
replaced the ` scaleHotseatWithWorkspace ` method with a ` getHotseatScaleAndTranslation ` method in ` LauncherState ` and `
modified DefaultStackTraceCleaner to check if the class name starts with " JUnitRule " and added a new test for filtering elements above the Mockito junit
replaced references to ` dstnull ` with ` dstByteArray ` and ` srcByteArray ` in ` MappedResizeableBuffer . java ` to improve
refactor balance listener management in DepositListItem . java to improve code clarity and maintainability by centralizing balance listener management
added a null check for t and edge mode in RealisticRenderer . java to ensure proper color conversion based on edge mode and edge mode
added null check for httpClientResponse in multiple test classes to improve robustness by preventing potential NullPointerExceptions
remove unused import of PatternUtil and use it in Gl200ProtocolDecoder to streamline code and improve readability
refactor playback handling logic in FullDetailsActivity to improve clarity and accuracy to enhance readability and maintainability of the code
refactor SpanishXMLTreeReader to improve lemma matching logic and introduce a new method for checking lemmas to enhance lemma validation and provide clearer diagnostic
added a check to clear the language and iso in InstallItem . java to ensure that the item is cleared when the first value is empty to prevent
updated the handling of the ` overrideScheme ` variable in ` ReactiveLoadBalancerClientFilter ` and added a new test in ` ReactiveLoadBalancerClientFilterTests
fix duplicate ( ) method call in defaultmessagestore . batchdispatchrequest
removed the ' final ' modifier from the ` fullFilePathFromClassName ` method in ` NativeImageDebugInfoProvider . java ` to simplify the method
replaced the custom Correspondence implementation with a lambda expression in ShadowBackupManagerTest . java to simplify the code and improve readability
corrected spelling of " non - Esperanto " to " non - Esperanto " in multiple files to improve code read
removed unnecessary null check for redeemData in LocalTransactionSigner . java to simplify the code and improve readability
added a new file ` MinecraftForgeClient . java ` to handle texture binding and rendering in the MinecraftForgeClient class to enable custom texture
added a return statement to the TxCacheDB class to improve performance by avoiding unnecessary processing
updated import statements from com . sun . xml . internal . ws to jdk . internal . org . objectweb . asm . * in Bound
refactor FastDictionary class to improve code readability to enhance maintainability and facilitate future updates
refactor session closing logic in NIOConnection . java to improve session management to enhance code clarity and maintainability by consolidating session state management
updated FlightEvent constructor parameters and adjusted epsilon values in FlightEventsTest . java to improve accuracy and accuracy of flight event calculations
[ beam - 12623 ] upgrade grpc - v1p26p0 to 1p26p0
replaced ` target . addNamespaceDeclaration ` with ` newElement . addNamespaceDeclaration ` in ` SaajStaxWriter . java ` to ensure
[ # 1076 ] instructorfeedbackresults : add courseid to profilepicturelink ( # 1076 )
added support for short passwords in DefaultPasswordValidator to ensure only alphabetic and numeric sequences are allowed in long passwords
simonstewart : add a new class ` Command ` and change the return value of ` retrieveLastRemoteControlLogs ` to a constant
removed the import statement for JUnit ' s Test annotation from ProxyClassSerializationTest . java to streamline the test by eliminating unnecessary dependencies
updated string concatenation in DLNAMediaInfo . java to include format = bgr24 instead of hardcoded string to improve readability and
[ gr - 15420 ] remove the speculativeguardmovementphase from the midtier .
added a check for alias references in the AuthenticationManagerBeanDefinitionParser and implemented a test for multiple authentication managers to ensure that multiple authentication managers do not override
modified the handling of the ` ForwardedRequestCustomizer ` to handle both ` Host ` and ` Host ` fields correctly to ensure proper handling of different
added a call to setLength ( 0 ) in ConsoleReader . java to reset the string buffer to zero to ensure proper resource management and prevent potential memory
changed visibility of allowedRoles and disallowedRoles from private to protected to allow subclasses to access these lists for better encapsulation
updated OpenIDE - Module - Specification versions in multiple files to ensure compatibility with the latest version of OpenIDE
hbase - 24165 set the default netty tls wrap size in x509util and set it in nettyrpcserver
refactor multiple Java classes to improve code organization and maintainability to enhance maintainability and readability of the codebase
updated FixedLengthTokenizerTests to use static imports and added new test cases for tokenization to improve test coverage and ensure correct behavior of small string
refactor protocol binding handling in OpenSamlAuthenticationRequestFactory and add unit tests for protocol binding validation to improve code clarity and ensure proper validation of protocol
updated the transaction creation in DepthController . java to use AttachedSurfaceControl and added a check for the rootSurfaceControl before applying it to
updated the version return value from " main " to " 2 . 5 . x " in AsciidoctorConventions . java to ensure compatibility
hbase - 24435 use create for prepreparebulkload , precleanupbulkload , and precleanupbulkload ( jesus camacho
updated subList method in TsFileManagement to use the first element of unSeqMergeList instead of the size of unSeqMergeList to ensure
camel - 14263 : file inputstream should be convert to file in genericfileconverter . thanks to jbellis for the patch .
added a ` login ( ) ` method to ` DefaultShardManager ` and ` DefaultShardManagerBuilder ` classes , and modified ` ShardManager `
removed unnecessary whitespace in DeleteGlobalRef method call to improve code readability and maintain consistency
updated the join table name from " RegisteredServiceImpl _ Properties " to " RegisteredServiceImpl _ Props " to ensure consistency in table
added a check to ensure the response completion is marked before proceeding to avoid potential errors when the response is marked as completed
update condition in FeedbackResponseCommentsLogic to check if the student is a user student to ensure accurate comparison of response comments based on the student '
added security checks and modified color profile handling in BMPImageReader . java to enhance security by restricting linking profiles to specific operating systems
updated the parameter order for setting simple caboid locations in the setSimpleCuboid method calls to ensure correct positioning of caboids in
added a wait message to indicate the status of the files in the PMD package to improve user experience by providing prompts when the file status is
refactor grid presenter initialization to utilize a new method for setting grid sizes to improve code readability and maintainability by centralizing grid size
updated return values in ContributionsListFragment . java to return true instead of false to ensure correct functionality of the return values
added a test skip range for DISTINCT prefix1 and modified filtering logic in BaseResultIterators . java to ensure accurate filtering of distinct
pdfbox - 4892 : add test to verify the behavior of the checkboxgroup property
added a method ` getFileLastModified ` to retrieve the last modified timestamp of a file to provide a way to retrieve the last modified timestamp of a file
added a condition to check for a metadata table in HiveIcebergStorageHandler to ensure proper handling of metadata tables in the storage process
refactor currency handling in CashDepositForm to use a ComboBox for currency selection to enhance user experience by providing feedback on currency selection options
updated catch blocks from IOException to Throwable in WriteFlusher . java to improve error handling by catching more specific exceptions
added a new boolean variable ` mStartedEnterAnimation ` and modified animation logic in ` IconRecentsView . java ` to improve animation handling and
added a new field ` activeKeyId ` to the ` UaaConfiguration ` class to provide access to the ` activeKeyId ` variable for
rename ` send a text mail ` action to ` sendwithattachments ` and update method signatures accordingly to improve clarity and consistency in action descriptions
changed the visibility of the isActive variable from private to volatile to ensure thread safety when accessing the isActive variable
updated method names from ` isDesc ( ) ` to ` isAsc ( ) ` in ` OrderByExpressionContext ` and related tests to improve clarity
fix classcastexception in geoconicnd . tostring ( ) and geoconicnd . tostring ( )
added a check for the OWNCLOUD application name in DisplayUtils . java to ensure that the application name is equal to the ownCloud
hbase - 12265 masterfilesystem should automatically set rootdir perms if security be enable ( sergey shelukhin )
updated return statements in JakartaServletWebExchange and JavaxServletWebExchange to use httpServletResponse . getLocale ( ) instead of httpServletRequest . getLocale (
refactor Instant class to improve code readability to enhance maintainability and facilitate future updates
updated state format handling in CollectionsHandler and changed return types from int to String in ExternalCollectionsTest and AbstractFullDistribZkTestBase to
updated logging statements in CentralAuthenticationServiceImpl . java and adjusted type checks in AbstractTicket . java to improve clarity and consistency in logging output
added an additional check for IllegalArgumentException in PDICCBased . java to enhance error handling by supporting additional exception types
removed unnecessary whitespace in AbstractFileResourceSet . java to improve code readability and maintain consistency
refactor PluginParameterExpressionEvaluator to use PathTranslator for path translation to improve code clarity and maintainability by centralizing file path alignment
[ beam - 11346 ] move protobufcoder to extensions . protobuf .
updated JpaQueryParsingToken initialization to include a boolean parameter and added a new test for handling signed numeric literals to ensure correct parsing of query
updated the ` generateLaunchLugFromRASAeroRailGuide ` method to include a ` parentLength ` parameter and adjusted related methods accordingly to
added a method ` getNonceFactory ( ) ` to the ` BitmexStreamingExchange ` class to provide a default nonce factory implementation
updated log messages to use a format format for better readability to improve code clarity and maintainability by using a more descriptive format
[ java ] use default timeouts instead of timeouts in test .
changed the initialization of loaded classes from true to false in ScanSpec . java to disable loading functionality for better performance
added a call to grab the focus of the search field in FullTextSearchPanel . java to ensure the search field is properly focused during search operations
refactor NioParams initialization in TlsConnectionLogging . java to improve code readability and maintainability
updated the assertion in StatementTest . java to remove the assertion to simplify the test logic and improve readability
updated assertions in TestSolrConfigHandler to include server base URL as a parameter to improve clarity of error messages for better debugging
refactor CsrfWebFilterTests to use ServerHttpRequest and ServerWebExchange instead of HttpMethod to improve test clarity and ensure proper mocking of
updated density regex pattern in FilterResourcesStep . java to improve clarity and consistency to enhance code readability and maintainability by using a more descript
added a new method ` elementPrefix ` and updated UIID calculations in ` ComponentGroup . java ` to improve UIID management for buttons based on
removed unnecessary DENSITY _ 600 check for displayInfo . rotation in RecentsAnimationDeviceState . java to streamline the code by eliminating unnecessary
added two new files , TestCloneArrayWithDifferentLengthConstness . java , and TestArrayCopyWithLargeObjectAlignment . java , to implement
added import for LuceneTestCase . AwaitsFix and annotated the ReplicationFactorTest class with an awaitsFix annotation to address issue SOLR -
added null checks for future and startDate before executing tasks in RedissonExecutorService and TasksRunnerService to prevent potential NullPointerExceptions when scheduling tasks
refactor credentials check logic in FileDownloader and FileUploader classes to improve code readability and maintainability
added null check for StoreFileScanner in Compactor . java to ensure proper resource management and prevent potential NullPointerExceptions
updated method calls to use ` getOrDefault ` for ` receivedByte ` , ` transmittedBytes ` , and ` transmittedPackets ` to return default
added a parameter " nonce " to the claims retrieval in TokenMvcMockTests to ensure the correct nonce is retrieved for the token ' s claims
refactor multiple chart and editor classes to improve code organization to enhance maintainability and readability of the codebase
added methods to set width and height for formLayeredPane to ensure proper layout behavior for layered panes
updated import statements in BrowserContentPane . java and added a maxY method in maxY method in maxY method to improve code clarity and ensure
modified the return type of ` openDatabase ` methods in ` SharedDatabaseLoginDialogView ` and ` SharedDatabaseLoginDialogViewModel ` to return a
replaced DOCKER _ COMMAND with Platform . DOCKER _ COMMAND and updated its usage in DockerTestUtils and Platform classes to improve
added null check for input files before initializing parameters in TestIsartorValidationFromClasspath . java to improve robustness by avoiding potential NullPointerExceptions
added a new color parameter to the drawLeaveBehind method in TaskbarView , CellLayout , and PreviewBackground classes to enhance the
add an error dialog to indicate that the Flutter plugin does not work properly with Canary versions of Android Studio
added a null check for the IdentityProxy table name before retrieving the identity UUID to avoid potential NullPointerExceptions when the table name is not found
removed modulePersistEnable and modulePersistDisable from StartArgs . java to streamline module persistence handling and improve code clarity
updated argument validation logic in GeminiMarketDataService . java to improve clarity and correctness of argument validation
replaced HashSet with LinkedHashSet in VerifyPasswordResetRequestAction . java to ensure unique order of keys in the questions collection
add a new test class ` TesterResponse ` and ` TestRealmBase ` to handle error responses to ensure proper handling of multiple roles in the
added exclusions for specific JSP files in AuthCheckFilter . java to exclude specific JSP configurations from the authentication process
refactor runnable execution logic into a separate method for better readability to improve code maintainability and reduce duplication in runnable execution logic
updated method signatures in AbstractCommandRunner , AuditCommandRunner , and CommandRunner to use String . . . args instead of String [ ] to improve
refactor character reading logic in XMLParser . java to handle cases where the character is invalid to improve error handling and prevent potential errors during parsing
added a new test method ` testHorizPageOverflowHidden ` to the ` TextVisualRegressionTest ` class to address overflow issues related to
added pivot calculations for the arrow in DeepShortcutsContainer to ensure the arrow positions correctly based on the icon ' s positioning
updated exception handling in JabRefExecutorService , ACMPortalFetcher , and BibtexParser to use values instead of keys to improve error handling
added a refreshView parameter to the thumbnail update logic in AbsSwipeUpHandler . java to allow dynamic refreshing of thumbnails based on the end
pdfbox - 4892 : use class . getName ( ) instead of org . apache . pdfbox . extractttffonts
updated EmailFormatSpecifier and HostnameFormatSpecifier to include an additional boolean parameter and improved validation logic to enhance email handling and ensure valid hostnames are
replaced instances of ` DrawerActivity . this ` with ` this ` across multiple activities to simplify code and improve readability
refactor SizeBasedDocIdSet , SizeBasedDocIdIterator , and MatchEntireSegmentDocIdSetBlock to improve document ID handling
refactor promptToOpenFile methods to accept a filename parameter and update current directory handling to enhance file opening functionality by allowing filenames to be specified
updated widget span values and refactored page counting logic in AppsCustomizePagedView . java and AppsCustomizeTabHost .
refactor FlightConfiguration to utilize InstanceMap for handling instance contexts and update component bounds to improve code clarity and maintainability by centralizing coordinate
updated message template references from " seda : foo " to " direct : foo " in MicrometerMessageHistoryTest and SpringMicrometerMessageHistory
updated DateTimeFormatter instantiation to include Locale . ROOT to ensure consistent formatting across different locales
[ ds - 2078 ] add getpermissionfilteredmetadata ( ) to dspaceobjectconverter to filter object in admin context
added a test method ` testMissingRequired ` to ` StarTreeConfig ` to ensure that ` dimensionNames ` , ` metricNames ` , and
added an element parameter to the recipientList method in FromBuilder . java and updated related tests in SpringRouteBuilderTest . java to enhance recipient list
refactor InlineLayoutBox handling and repaint logic in HoverListener . java and InlineLayoutBox . java to improve code clarity and ensure proper repaint
refactor authentication handling in AuthenticatorActivity to use ServiceConnection and OperationsServiceBinder instead of DetectAuthenticationMethodOperation to improve service management and ensure proper
