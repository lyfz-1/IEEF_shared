updated SocketAppender initialization to use remote host and port to ensure proper handling of remote host and port
refactor BasicAuthPlugin to utilize a new method for retrieving prompt headers to improve code readability and maintainability by centralizing header retrieval logic
updated the method call from ` RecordDescriptor . msgLengthOffset ( recordIndex ) ` to ` getIntVolatile ( msgLengthOffset ( recordIndex )
updated variable assignment for cpuCpu , clusterCpu , cpu , and ramOvercommitRatio in CapacityManagerImpl . java to improve code clarity
added flags parameter to ShadowPaint and updated related tests in PaintTest to ensure proper handling of antialias flags in the paint class
updated the title from " Set / clear / append / rename " to " Manage field names and content " to improve clarity and consistency in title
added a check for " Eclipse " in the DetectorsTest . java file to ensure that Eclipse is not used to compile the project
added a condition to check if the nonce is non - equalsIgnoreCase ( " " ) before parsing WWWWWWWWWW
added RemoteInputListener interface and related methods to the RemoteInput class to enhance the functionality of the RemoteInput interface and improve connection management
updated conditional logic in OrcEncodedDataReader . java to include stripeIx to ensure proper handling of stripeIx values in the encoded data
added a condition to check if the thing ' s isEnabled ( ) is enabled to ensure that the filter is only applied when the thing is disabled
added null check for bs before adding policies to the AuthorizeManager class to prevent potential NullPointerExceptions when bs is null
replace ` assertThat ` with ` matches ` in ` DefaultTypeAdaptersTest ` , ` ObjectTest ` , and ` ObjectTest ` to improve
added json serialization and logging for dag information in TezTask . java to improve debugging capabilities and ensure proper logging of dag information
updated heap time calculation in ComputedSummary . java and added getHeapTime method in HprofHeap . java and HprofHeap . java to
removed the RxJava2Tasks class and removed the RxJava2Tasks class from the CommonsApplication class to streamline the codebase by
removed the condition for locking in MVTable . java to simplify the code and improve readability
updated offset checks and modified offset calculation in CommitLog and DefaultMessageStore classes to ensure proper handling of message sizes based on current offset
updated folder retrieval logic in Launcher . java to handle potential null pointer exceptions to improve robustness by preventing potential NullPointerExceptions when associated folder is
added a new test method ` testSortOrder ` in ` PGPropertyTest . java ` to verify that PGProperty names are sorted in ascending order
removed the HOVER _ MESSAGE _ EVALUATION _ POINTS _ GIVEN constant from Common . java to streamline the code
updated the ` supportsDrop ` method to accept ` ItemInfo ` instead of ` Object ` and added null check for ` item ` to improve robust
updated assertions in ` RequestBuilderTest . java ` to use ` e . getMessage ( ) ` instead of ` hasMessage ( ) ` to improve
updated TAG _ RETAINED _ FRAGMENT and TAG _ RETAINED _ FRAGMENT to NearbyListFragment and updated fragment
refactor FlatProfileContainerFree constructor to use sessionStatus instead of status to improve code readability and maintainability
added a boolean field ` sendZeroAnomalyEmail ` and its getter / setter in ` EmailConfiguration ` and ` EmailReportJob ` to
[ hotfix ] [ kafka ] fix open method call in flinkkafkaconsumerbase
added methods to retrieve user and geofences in DataManager . java to ensure proper functionality of user and geofences in the database
added a constructor to BlockingResponseListener that accepts a maxLength parameter to enhance the functionality of the BlockingResponseListener class
refactor member broadcast handling in McastServiceImpl to use byte array instead of thread name to improve code readability and maintainability by centralizing
added a try - finally block to close the snapshot fragment in MultiLeaderServerImpl . java to ensure proper resource management and prevent potential resource leaks
updated test assertions in LoginSAMLAuthenticationFailureHandlerTest . java to improve clarity to enhance test clarity and maintainability of the code
refactor ConfigMetadataProviderTest . java to improve code organization to enhance maintainability and readability of the test code
updated import statements and modified the updateNoteReminder method to use noteToUpdate instead of note to improve code readability and maintainability
refactor Files and WindowsDirectoryStream classes to use a new AcceptAllFilter class and improve path handling to enhance code clarity and maintainability by
refactor JdbcTestDataSet class to improve code readability to enhance maintainability and maintainability of the code
added a try - catch block to the ` lookupType ` method in ` CompilerToVM ` , ` CompilerToVMHelper ` , and `
added DockerImageName class and corresponding tests for Docker image name validation in GenericContainer . java to ensure proper handling of Docker image names in the Docker
updated message format from username to wrong credentials in LoginActivity . java to improve clarity and accuracy of login failed credentials
added autofocus settings for various form classes to enhance user experience by allowing auto - focus functionality
added a new test method ` test _ zone _ saml _ properties ` in ` SamlIDPRefreshMockMvcTests . java ` to
added checks for empty list items in ComparableVersion . java and a corresponding test in ComparableVersionTest . java to ensure proper handling of empty list items
updated mode calculations in Sheet and UIManager to use bottom right and bottom right instead of left and right to improve code readability and maintainability by
updated package names from ` org . robolectric . android ` to ` org . robolectric . android . internal ` and updated import statements in multiple files to
refactor factory type handling in LocalCacheFactory and NodeFactory classes to improve code readability and maintainability
updated the style name from SOLID _ FILL to SOLID _ FOREGROUND in FrillsAndFills . java to
added self loop drawing functionality to the ProcessingPreview class to enhance the rendering of self loops in the processing process
updated ALLOW _ TVM _ SOLIDITY _ 0 _ 5 _ 10 to ALLOW _ TVM _ SOLIDITY _
updated the method name from addManaged to manage in DropwizardAppRule . java to improve clarity and consistency in naming conventions
added translation setting for the drag handle indicator in AllAppsTransitionController to ensure proper translation of the drag handle indicators
removed unused log messages from CollectionViewer , CommunityViewer , and ItemViewer classes to streamline logging for better readability and maintainability
hive - 14264 : hive . optimize . ppd should not be push down to the operator tree when hive . optimize . ppd be
added a check for OS X in ScanningAppProviderRuntimeUpdatesTest . java to ensure that the build server does not have issues with finding the
added bundle diagnostics for jetty - alpn client in TestJettyOSGiAnnotationParser . java to ensure proper handling of bundle
refactor ` ExecuteAsyncRunnable ` and ` ExecutionEntityManager ` to use ` CommandExecutor ` instead of ` CommandContext ` to improve code clarity and
refactor Transaction class to improve code organization to enhance maintainability and readability of the Transaction class
added @ ExcludeFromRuleKey annotation to GenruleBuildable . java to ensure that Genrule execution is not relevant to artifact caching
refactor AsyncExecute and FirefoxCustomProfileLauncher to use a static method for handling executable files to improve code readability and maintainability by central
added a condition to check if the index already exists before adding it to the mapping to ensure that the mapping is only applied when it does not exist
[ hotfix ] [ hadoop ] fix npe in hadooptupleunwrappingiterator
added a check for MAPPED view type in MetaDataEndpointImpl . java to ensure proper handling of DerivedColumnsAndIndexes from the parent table
updated import statements and added student updates in AccountsLogic . java to improve code clarity and ensure student updates are updated correctly
updated import statements in AllXSSFTests . java to use TestCellReference instead of TestCellReference to improve code clarity and maintainability by
added a condition to check if the Mobility flag is greater than or equal to the world world object to ensure proper handling of Mobility
added a new file LongPointerPressTest3049 . java to test network error handling to ensure that network error messages are displayed when a network is
[ gr - 14235 ] fix bug in partial evaluator .
refactor return statements in BaseBuilder and XMLConfigBuilder to simplify code and improve readability to enhance readability and maintainability of the code
updated indentation condition in ListBlockParser and added a new test for deeplyIndented lists in SpecialInputTest to improve formatting accuracy and ensure proper formatting
added a new abstract class ` AbstractOptionalAssert ` and modified ` OptionalAssert ` to use ` OptionalShouldContain ` instead of ` OptionalAssert `
added JUnit @ Ignore annotation to WebfluxNotIncludedTests . java to temporarily disable the test due to issue 1070
removed the ` GLOBAL ` annotation from the ` saveMessage ` method in ` TestCaseLogger . java ` to simplify the method signature and improve code
updated the closing brace in RouteStartupOrderLastTest . java to improve code readability and maintainability
added a check for video formats in RemotePlayHandler to ensure that video formats are only enabled when the video format is enabled
added SSL disable algorithms in ComHostnameVerifier , JavaHostnameVerifier , and JavaxHostnameVerifier to enable SSL configuration based on configuration
cloudstack - 119 : fix uservmmanager . getvmsvmsvmsvmsvmsvmsvmsvmsvm
updated log messages in Driver . java , QueryResultsCache . java , and QueryResultsCache . java to improve clarity and maintainability of log messages
updated message formatting in multiple classes to improve clarity and consistency to enhance readability and maintainability of the code
added a new test method ` getLastIntentSenderRequest _ send ( ) ` to ` ShadowActivity ` , ` ShadowActivity ` , and ` Shadow
added FBO rendering functionality to the RocketFigure3d class to enhance rendering capabilities for FBO overlays
added synchronization to controller listeners in HydrawiseAccountHandler and updated related logic in HydrawiseControllerHandler to improve thread safety and ensure thread safety
added a test method ` beforeClass ` to ` TestCoreAdminApis . java ` to ensure that EasyMock does not work with Java 9
updated year calculation in TimestampUtils . java and added LOCAL _ TIME _ FORMATTER in SetObject310Test . java to improve date formatting and
added a null check before disconnecting the connection to avoid potential NullPointerExceptions when connection is null
added cur _ ws _ commit _ id to the committed file in TxnHandler . java to ensure proper handling of commit IDs in the transaction
refactor BufferedInputFilter to use ByteBuffer instead of ByteChunk for better readability and maintainability to improve code clarity and ensure proper handling of buffer
added a method ` toSync ` to ` AsyncUtils ` to return ` CompletableFuture < T > ` instead of ` CompletableFuture < T >
added ActionGraphBuilder to multiple compiler classes to enhance the handling of ActionGraphBuilder in the codebase
added a new test method ` testUploadingWithHiddenFileInput ` to ` UploadTest . java ` to verify the functionality of uploading with
refactor SQLManager to use try - catch blocks for database creation to improve code readability and maintainability
added a check to return the localMavenDir if the file exists to ensure that the localMavenDir is only used when the file exists
added a conditional check to hide the algebra label in GeoElement . java to ensure that the algebra label is visible only when it ' s
added null check for metadata in CtElementImpl and updated MetadataTest to return null instead of null to improve robustness by preventing potential NullPointerException
added a flag to the buffer in DefaultTrackOutput . java to ensure proper handling of output buffers
updated condition in EntityIterableBase . java to check for cached data to ensure correct sorting behavior when reordering is enabled
updated error message from " Method call not specified for verify ( mock ) : " to " Missing method call for verify ( mock ) here " to
added a null check for the backupFolder before logging it to avoid potential NullPointerExceptions when the backupFolder is null
added a new file ` ArrayNewInstanceOfVoid . java ` that tests the ` Array . newInstance ` method in ` ArrayNewInstanceOfVoid ` to
added @ AddToRuleKey annotation to ClangCompiler , GccCompiler , ClangCompiler , ClangCompiler , ClangCompiler , and
added a constant for PINCODE _ TIMEOUT and updated condition checks in PinCheck . java to improve code readability and maintainability by reducing
added isSampled ( ) method to PrometheusMeterRegistryTest , PrometheusExemplarsSample , and PrometheusEx
removed the ` @ Ignore ` annotation from multiple test classes to simplify the codebase by eliminating unnecessary @ Ignore annotations
updated import statements and modified test assertions in ConsumeUncompressedCompressedMessageTest . java to improve code readability and maintainability
updated condition to check for the artifical table in MetaDataSource . java to ensure proper handling of artifical table names
replaced fileStatus . isFile ( ) with isDir ( ) in FileOutputCommitterContainer , FileOutputCommitterContainer , and LaunchMapper to
refactor session handling logic in MongoSessionManager . java to improve clarity and consistency to enhance readability and maintainability of the session management process
updated surfaceHolder . setFixedSize ( ) method to use setSizeFromLayout ( ) instead of setFixedSize ( ) to ensure proper layout size
added null checks for _ stopping and countDown in AbstractConnector . java to ensure proper handling of timeouts and prevent potential NullPointerExceptions
updated WebSocketClientHandshaker parameter name from ` handshaker ` to ` WebSocketMessageHandler ` in ` HuobiStreamingService . java ` to improve
camel - 14299 : camel - defaultmessagehistory should not take timestamp if timestamp be null
replaced ` doOnError ( exceptions : : subscribe ( ) ` with ` subscribe ( item ) ` in ` DelayedMonoPublisherTest . java `
added a check for WebSocketHandshakeException in WebsocketTest . java to ensure proper handling of WebSocketHandshakeException errors
refactor AllAppsTransitionController to use View . OnLayoutChangeListener instead of View . OnLayoutChangeListener to improve code readability and maintainability
updated the handling of credential entries in PolicyBasedAuthenticationManager . java to improve clarity and consistency to enhance code readability and maintainability
added a check for the default output channel in XPathRouterParser and implemented a test for setting the default output channel in XPathRouterParserTests to ensure
updated cacheSeconds from 180 to PT180S in MessageBundleProperties and CasCoreWebConfiguration to improve cache time handling and ensure proper
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
removed a call to append ( buffer , true ) in ByteBufferPool . java to improve code readability and maintainability
added a method to check if the alt - rt . jar is detected in the Main class to ensure that the alt - rt . jar is detected
updated SQL query parameters in JdbcScimUserProvisioningTests . java to improve clarity and consistency to enhance code readability and maintainability
updated import statements and added additional options for UnlockCommercialFeatures and UnlockDiagnosticVMOptions in FlightRecorderProfiler . java to enhance code clarity and
added a method ` isStreamEmpty ( ) ` to ` WebCCInputPanel ` and updated imageDropHappened method in ` WebC
modified the loop condition in HttpParser . java and added a new test for chunked put in ProxyServletTest . java to ensure proper handling of
refactor AtmosEndpoint class to improve code organization to enhance maintainability and readability of the code
added additional conditional checks for " printf " and " print " in Java2TypeScriptAdapter . java to improve code readability and maintainability by
added a new file TestCapacityUntilGCWrapAround . java and implemented a new ` TestCapacityUntilGCWrapAround . java ` to
refactor package - info . java files for improved readability to enhance maintainability and maintainability of the code
removed conditional checks for stamped times in SamplingStatCalculator . java to streamline time calculation logic for better readability
added a new test class ` ErrorHandlerAdviceIssueTest ` to verify error handling to ensure correct behavior of error handler responses in the application
updated error handling in JPEGImageReader and added a new test for invalid icc single chunk bad sequences in JPEGImageReaderTest to improve clarity and
refactor block handling in multiple classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a check for ignoreEntry in JoobyModule , SpringModule , and Extension classes to ensure proper handling of configuration entries in the application context
refactor WebappLoader and ContextRuleSet to use container . getParentClassLoader ( ) instead of context . getContextClassLoader ( ) to improve code clarity and
added logging for additional name updater properties in NameUpdater . java to improve error handling and provide clearer logging for additional name updates
added logic to set the start state of the ellipsoid region selector in EllipsoidRegionSelector to ensure proper initialization of the region
updated URLs in JavaSEPort . java to use the default codenameone protocol instead of http to improve code readability and maintainability by
do n ' t throw an exception if the sort by be invalid .
updated null check for grantTuple in AbstractJdbc2DatabaseMetaData . java to ensure proper handling of null values when grantTuple is null
updated DiagramGenerationTest to use GraphicsEnvironment instead of GraphicsConfiguration for improved image handling to enhance clarity and maintainability of image rendering logic
added a null check for sidedDelegate in FMLCommonHandler . java to prevent potential NullPointerException when attempting to getMinecraftLogger
refactor DataUtilities and ReTypeFeatureReader classes to improve code readability and maintainability
refactor LockTest to use AssertTask instead of CountDownLatch for better readability and maintainability to improve code readability and maintainability by using a
added methods for handling whole and join tokens in StringUtil . java to improve code readability and maintainability
updated HTTP status and error handling in CoyoteAdapter . java to improve error handling and ensure proper handling of 404 responses
refactor command handling in SystemHighlighter to improve code readability and maintainability to enhance maintainability and maintainability of command handling logic
updated version string from " 1 . 0 . 0 " to " PENDING " and updated date from " PENDING " to " PENDING "
updated the position method call from ` idx ` to ` dimensionSize ` in ` StarTreeRecordStoreCircularBufferImpl . java ` to ensure correct
added a new method ` isDragAndDropReady ` in ` QuickstepTestInformationHandler ` and updated related methods in ` SystemUiProxy `
added unit tests for IPTOS _ LOWCOST and SocketTrafficClass in SecureSocketAppenderSocketOptionsTest and SocketAppenderSocketOptionsTest
added TLS support for PSK - AES256 - GCM - SHA384 and TLSv1 . 2 to TestCipher . java to support
updated description text from ` getText ( ) ` to ` getLongDescription ( ) ` in ` NearbyMapFragment . java ` to ensure accurate
added @ JsonProperty annotation to ScimGroupMember . java to ensure proper handling of property values in the ScimGroupMember class
added handling for reserved words in HqlQueryRenderer and added a test for schema scoping in HqlQueryRendererTests to ensure proper handling
updated the parameter name from " d " to " s " in ObjectHelper . requireNonNull ( s , " s is null " ) to improve clarity
refactor Parser class for improved readability to enhance maintainability and readability of the code
updated the ` offsetStreamIndex ` method to include a ` indexStartsAtOne ` parameter and modified the ` offsetStreamIndex ` method to
updated byte array handling in MagicDetector and TestMimeTypes to include " x - cpio " and " test - documents . cpio " to
[ hotfix ] [ table - planner ] [ table - planner - planner - planner - planner - planner - 
added equals , hashCode , and toString methods to OneTimeTokenAccount and OneTimeToken classes to ensure proper serialization and serialization of usernames in the
added a condition to check if the application launchedAssistant is not launched to ensure that the application is only run when the launchedAssistant is
added a new file SolarisShortDSA . java to handle solaris bugs in the Solaris system to ensure proper handling of solaris
added a call to toggleSearchLabel ( false ) in ListFragment . java to ensure the search label is only toggled when the search label is
cloudstack - 118 : fix crash when create a snapshot
replaced ServiceConnection with DetailsServiceConnection and added a null check for mConnection to improve code robustness and prevent potential NullPointerExceptions
refactor SSLPeerUnverifiedException handling in HttpClientTLSTest to improve error handling and ensure proper handling of SSLPeerUnverifiedException
removed the equals method from the ConjunctionScorer class to simplify the code and improve readability
added null check for the bindItems method in Launcher . java to prevent potential NullPointerException when removing colliding items
added random timeout handling in MetadataRaftGroupManager and updated test cases in CPMemberAddRemoveTest to improve timeout handling and enhance test coverage for
updated cache size calculation logic in DefaultCache . java to improve cache management and logging for better debugging
updated API paths in CryptoFacilities and CryptoFacilitiesAuthenticated classes to use " v3 " instead of " v2 "
added a new method ` empty ( ) ` to ` freenect2 . java ` to provide a way to check if the size is empty
updated AsyncPageReader and TestEmptyParquet to use Optional for page data retrieval and added a new test for empty dict pages in TestDrill
added support for market data type in SerumStreamingService . java to enhance flexibility in handling market data types
added a boolean flag to disable the animation when an item is charging on top of a mana pool to enable the charging animation when an item is
[ java ] use egress . isConnected ( ) and egresssubscription . isConnected ( ) instead of ischallenged .
added error logging for InterruptedException in WaitForHelper . java to improve error handling for better debugging
removed unnecessary check for directory existence in DefaultServletTest . java to simplify code and improve readability
replaced ` StyleInjector . inject ` with ` StyleInjector . inject ` in ` ResourcesInjectorFull . java ` to improve code readability and maintain
replaced String with FileResource for changeLogFile and outputFile in BaseLiquibaseTask and DBDocTask classes to improve code clarity and maintainability
updated comparison logic in BlockWorldVector . java to include getX ( ) , getY ( ) , getZ ( ) , and getZ ( ) to ensure
updated the return statement in LongConcurrentLRUMap . java to use a final class instead of a final one to improve code clarity and maintainability
refactor regex handling in ReflectionProcessor to use regex encoding to improve code readability and maintainability
added a check for the length of ` cache ` in ` FileCredentialsCache . java ` and modified the cache retrieval logic in ` EmptyCC .
updated the dbPath variable name from " output _ PrecompiledContracts _ test " to " output _ ValidateMultiSignContract _ test " to
refactor peer handling in multiple classes to improve clarity and consistency to enhance code readability and maintainability by centralizing peer requirements
updated method call from ` attachToCurrentThread ( ) ` to ` attachToCurrentThread ( ) ` in ` WebDriverServlet . java ` to ensure correct
added a check for EQUAL _ BOOLEAN operation in ExpressionNode . java to return false if the operation is not EQUAL _ BOOLEAN
added a check to clear pending rendering operations in AndroidAsyncView . java to ensure pending rendering operations are cleared when minimized
added a boolean variable ` passedTheDeadline ` and modified the loop logic in ` HazelcastTestSupport . java ` to check if the deadline is
refactor CoalescedWriteBehindQueue to use a volatile value variable and add a new WriteBehindWriteDelaySecondsTest
set the icon to null in GroupTreeCellRenderer . java to prevent potential memory leaks and prevent potential memory leaks
updated testRedirectMatches _ strict ( ) and testRedirectMatches _ nonstrict ( ) methods in TestBlacklistAwareRedirectResolver . java to improve test
added IO handling and improved test cases in ShutdownMonitor and ShutdownMonitorTest to ensure proper resource management and ensure proper cleanup of server sockets
updated moveSize calculation in RandomAccessStore . java to use adjustedChunksFillRate instead of autoCommitMemory to improve readability and maintainability
refactor field retrieval logic in Json . java to use a new method ` readFields ` to improve code readability and maintainability by centralizing
[ hotfix ] [ runtime ] refactor componentclosingutils to use FutureUtils for better error handling to improve code readability and maintainability by
cloudstack - 118 : delete snapshots from vm when create snapshot
updated the variable name from ` getIp6Range ( ) ` to ` getIp6Range ( ) ` in ` ConfigurationManagerImpl . java
refactor ` InitializeUserDetailsManagerConfigurer ` to use ` beanNames ` instead of ` userDetailsManagerConfigurer ` to improve code readability and
updated the change from 15 seconds to 30 seconds in the getLeaderRetry method from 15 seconds to 30 seconds to improve the accuracy of the leader retry
refactor error handling in multiple classes to improve clarity and consistency to enhance maintainability and clarity of error messages
updated drawImage method call from x to y in URLImage . java to ensure proper handling of image coordinates
updated the condition in SolrTestCaseJ4 . java to check for SolrDocument2 . getFieldNames ( ) to ensure that the correct field names are
refactor variable handling in SetFunDef to use isItemZeroHighCardDim method to improve code readability and maintainability
added a new exception message to the StreamTaskException constructor to improve error handling by providing a more specific exception message
refactor tag handling in Preprocess . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor ` read ` method to use ` read ` instead of ` read ` in ` MessagePack . java ` to improve code readability and
added a new annotation ` Mapper ` to implement a ` Mapper ` interface to provide a default value of a default value in the ` org . apache
added a check for ` isSupportsFhirComment ( ) ` in ` JsonParser . java ` and modified the handling of empty extension lists to
refactor Artifact handling in LibraryManager and LibraryManager classes to improve clarity and consistency to enhance readability and maintainability of the code
added a alias for the " node _ popup _ scripting " entry in ScriptingMenuEntryVisitor . java to ensure proper handling of popup scripting
updated HIDDEN _ FOCUSED _ SCROLL and HIDDEN _ SPLIT _ SCREEN constants in OverviewActionsView
updated the method call from ` getOut ( ) ` to ` getOut ( JmsMessage . class ) ` in ` JmsProducer .
updated exception handling in multiple Java files to improve clarity and consistency to enhance code readability and maintainability
deleted the ` AbstractDelegatedVerb ` and ` FailureContext ` classes to the ` com . google . common . truth ` package to streamline
updated the ` __ content ` variable and modified the ` GzipHandlerTest ` to be final and added a new ` MicroServlet ` class to
replace ` getAndAdd ( n ) ` with ` BackpressureUtils . getAndAddRequest ( n ) ` in ` OnSubscribeRedo
updated logging messages in SpeedmentImpl . java and added logging for stopping and stopping components in SpeedmentImpl . java to improve logging clarity and maintain
added a new file ` LoadDSpaceOAIConfig . java ` to handle configuration loading to facilitate configuration loading of dspace configurations
added null check before resetting the matcher row in StoreScanner . java and modified batch processing in TestWideScanner . java to improve robustness by
added useJmx ( ) method to NagiosEventNotifierTest , CamelTestSupport , and CamelTestSupport classes to enable JMX in the
added a constant for CANONICAL _ PACKAGE _ SEPARATOR in SourceLineAnnotation . java and updated sourcePath handling in SourceCodeDisplay .
added YARNBIN functionality to the HiveConf and RemoteSparkJobMonitor classes to enhance user experience by providing additional application information for YARN application
added support for " maria " database names in DbConnectionManager . java to ensure compatibility with different database names
updated log level from 0 to 0 in SplitLogManager . java and modified timing logic in SplitLogManager . java to improve logging clarity and ensure
added a new file ` ExecuteAndReturnStringTest . java ` with a test class ` ExecuteAndReturnStringTest . java ` to test network
added a new file ` InvokespecialInterface . java ` that implements interface interfaces and implemented a new ` InvokespecialInterface . java ` to implement interface
refactor EvictingBoundedList class for improved readability to enhance maintainability and maintainability of the code
refactor traversal mode handling in GraphHopper . java to use setEncodingManager for turncosts support to improve code readability and maintainability
added a null check for backgroundDisabled in SelectBox . java to prevent potential NullPointerExceptions when selection is negative
added a null check for ` md ` in ` RpcServer . java ` to prevent potential NullPointerException when ` md ` is not provided
updated the calculation of hotseat icons in TaskbarViewController . java to use border spacing instead of padding to improve code readability and maintainability by
replaced keyEqual with values . get ( partitionColumnIndex ) for consistency to improve code readability and maintainability
added Versioned interface to NamedTaskDecorator and updated serialization logic in TaskDefinition to improve version handling and ensure proper serialization of task definitions
updated the method call from ` getIndexDir ( ) ` to ` getNewIndexDir ( ) ` in ` ReplicationHandler . java ` to ensure proper
changed the equality check from false to true in DisplayModeTest . java to ensure consistency in equality checks for display modes
added a check for BMPCodePoint in UnicodeToLatexFormatter and updated UnicodeToLatexConversionMaps to include mathematical italics to ensure
added null checks for value in OAIDCCrosswalk and Item classes to ensure proper handling of null values and prevent potential NullPointerExceptions
added a lastFrame map for driver window handling in WebDriverBackedSelenium . java to ensure proper handling of window handles in the browser
added a check for ` BOOKMARKFILE _ EXTENSION ` in ` StringSearchPanel ` , ` BookmarksPanel ` , and updated
updated OAuth2AuthorizationRequestRedirectFilter to use UrlUtils . buildFullRequestUrl to improve URL handling and ensure proper handling of request URLs
replaced ` new Date ` with ` parseDatetime ` in ` SoftAssertionsTest . java ` and updated assertions in ` SoftAssertionsTest .
added a reverse parameter to the adaptOrders method in BitmexAdapters . java to enhance order handling by allowing a reverse parameter
added a null check for the tree type in PrettyPrinter . java and added a new Java11Var . java file with a new Java11Var
[ hotfix ] [ test ] remove unused imports and remove unused imports in several test classes to streamline code by eliminating unnecessary dependencies
updated Configuration initialization to use a boolean value instead of a null check to simplify configuration handling and improve code clarity
updated the method call from ` drawChildren ( batch , parentAlpha ) ` to ` draw ( batch , parentAlpha ) ` to improve code read
added a new file ` FileSplitStreamingWithChoiceTest . java ` to test the ` FileSplitStreamingWithChoiceTest . java ` to ensure
replaced ` System . getProperty ( ) ` with ` context . getCatalinaBase ( ) ` in multiple classes to streamline the codebase
added unit tests for ` getBestDateTimePattern ` and ` getBestDateTimePattern ` in ` ShadowICUTest ` and ` ShadowICU
updated color handling in PlotSquared . java to use Minecraft color codes instead of Minecraft color codes to improve code readability and maintainability by utilizing
added ZuulProperties parameter to TraceRestClientRibbonCommandFactory and TraceZuulAutoConfiguration classes to enhance configuration management for Zuul properties
added TimeZone handling in FontParsersTest . java to ensure correct handling of timezones in FontParsersTest . java
added new classes ` SampleApplication ` , ` SampleApplication ` , ` BuildInfoMojo ` , and ` BuildInfoMojo ` to facilitate testing of
updated the calculation of the xDist from ` getFinalX ( ) ` to ` abs ( ) ` in ` PagedView . java `
deleted the GUIRWTester . java file to remove unused code to streamline the codebase
updated ` LazyMessage ` and ` countPlaceholders ` methods to use ` String ` instead of ` NullableDecl ` and ` NullableDecl ` to
updated the error message from " Must advance the processing time by a positive amount " to " Must advance the processing time by a positive amount " to
updated package names from ` org . thymeleaf . templateparser ` to ` org . thymeleaf . templateparser . markup `
added a new test method ` testXPathString ` to ` XPathTest . java ` and modified the ` XPathTest . java ` to improve test
added Nullable annotation to FutureUtils . java to ensure proper handling of null values
added a conditional check for DynamicInvokeExpr in OnFlyCallGraphBuilder . java to ensure that InvokeDynamic is not resolved during call graph construction
updated email names from " myfakeemail @ gmail . com " to " myrealemail @ example . com " in ContextTest .
updated HTTP response handling in HttpConnectionTest . java and modified URIUtil . decodePath method in HttpConnectionTest . java to improve code clarity and
added a ` getColumnDataType ` method to ` AbstractResultSet ` , ` ResultSet ` , ` ResultSet ` , and ` ResultTableResultSet ` classes to
updated method names from ` ABSTRACT ` to ` DEFAULT ` in multiple classes to improve clarity and maintainability of the codebase
refactor HSSFPictureData class for improved readability to enhance maintainability and maintainability of the code
replaced ` long ` with ` Instant ` in ` Statistics . java ` to simplify time handling by using ` Instant ` instead of ` long ` to
updated the version handling in LibMediaInfoParser to improve clarity and maintainability of the MediaInfoLib version handling
removed the ` reflectIdeaDependency ` method from the ` ProjectReader ` class to simplify the code and improve readability
added a new class ` SerialHeap ` and modified ` CollectedHeapName ` to use ` SerialHeapName ` instead of ` GenCollected
added @ SuppressWarnings ( " serial " ) annotations to the Gson $ Types class to suppress warnings during serialization
updated MouseWheelEvent and MouseWheelEvent constructors to accept a Vector2i parameter and modified mouse position handling in multiple classes to enhance mouse position
updated the ` addAppropriateLikeRegexTo ` method to handle null values in ` MongoQueryCreator ` and added a new test for
[ hotfix ] [ runtime ] add multisetinfo . equals ( ) to mapinfo ( )
added a new method ` retrieveByIssuer ` to ` XOAuthProviderConfigurator ` and a corresponding test in ` XOAuthProviderConfiguratorTests ` to
refactor CMapParser to use isDelimiter ( stringByte ) instead of isDelimiter ( stringByte ) to improve readability and maintainability of
refactor ContactsBackupJob to use OperationsServiceConnection for managing operations to improve service management and ensure proper service connection management
updated method signatures and added a new class T6938454a and T6938454a to improve type validation logic and ensure correct handling of
added a new method ` isConfigHidden ( ) ` to ` AccountList ` , ` ProtocolProviderFactory ` , and ` ProtocolProviderFactory `
added a check for supported bounds in DisplayController . java to check if the number of displayed displays does not match the current size of supported bounds
updated schema removal logic in PMetaDataImpl . java and added a new test for schema removal in PMetaDataImplTest . java to ensure proper handling
do n ' t fire passive login when login be passive
added a new ` Box2DTest ` class and modified ` Box2DTest ` to include a new ` Box2DTest ` class
added debug logging for indexed and obsolete mutations in ColumnFamily , Table , Table , and LocalByPartionerType classes to enhance debugging capabilities
updated default buffer request timeout from 5 seconds to 5 seconds to ensure proper timeout handling for better performance
added DEFAULT _ GENERATOR _ NAME and DEFAULT _ GENERATOR _ VERSION constants to SpeechClient and SpeechSettings classes to
added a help button for the OpenOfficeIntegration . html button in OpenOfficePanel . java to enhance user experience by providing a helpful help button for
updated option calls in NettyAcceptor , ProtocolDecodingServer , ProtocolPublishDecodingServer , and ProtocolPublishDecodingServer to use childOption
updated method signatures in BinanceAuthenticated , BinanceAccountServiceRaw , and BinanceFundingHistoryParams classes to improve code clarity and maintainability
refactor class loading logic in ScanResultObject . java to improve code readability and maintainability
refactor connection handling in DecodeServlet to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated Querydsl to use a new method for handling null values and added a new QueryDslNullHandling method in QuerydslIntegrationTests
added null check for actor in ParallelAction and SequenceAction classes to avoid potential NullPointerExceptions when actor is null
refactor CtTypeTest to improve code readability and maintainability to enhance maintainability and maintainability of the code
added synchronization for sfWritersLock in HDFSEventSink . java to ensure thread safety when closing sfWriters
added a new file ` Issue888 _ JavaI . java ` that implements ` Issue888 _ KotlinI . java ` and ` J
added a command to revoke an existing SSL certificate in CertificateManager . java and implemented a test for revokeExistingAgentCert in CertGenerationTest .
modified HTTP response handling in AbstractHttpTest . java and added a new test for WriteBodyAfterNoBodyResponse in HttpServerTestBase . java to ensure
added exception handling for script loading in ScriptTransformer . java to improve robustness by preventing potential runtime exceptions during script loading
added support for Hikaricp connection pooling type in HiveConf and updated related test cases in TxnHandler and TxnHandler to enhance
replaced calls to ` mDevice . pressHome ( ) ` with ` mLauncher . pressHome ( ) ` in multiple test files to improve code
added methods to filter lock and unlock files in FileMenuFilter and OCFileListFragment to enhance file locking functionality and improve user experience
refactor Version class for improved readability to enhance maintainability and maintainability of the code
added import for Table and cleared replication strategy cache in UpdateKeyspace . java to ensure the replication strategy is cleared before proceeding
added a method ` waitForState ` to ` Locks ` , ` ThreadExecutionSynchronizer ` , and ` waiting ` in ` Locks . java
replaced ` getRule ( ) . getCoercedName ( ) ` with ` getCoercedAttrValues ( context ) `
refactor LocalStorage , SessionStorage , and SessionStorage classes to extend Storage to improve flexibility and maintainability of the storage interface
added null check for existing view in PlanExecutor and created a new test for unnecessary or replace option in CreateViewStatementTest to ensure proper handling of
refactor exception handling in SegmentGenerationJobRunner to use Throwable instead of Exception to improve error handling and improve clarity in error reporting
added null check for Q in SpellCheckComponent . java to avoid potential NullPointerExceptions when query parameters are null
added checks for illegal characters in the Headers class to ensure proper handling of illegal characters in headers
updated instanceSize and arrayBaseOffset methods in HybridLayout , HostedInstanceClass , and HostedInstanceClass to use arrayBaseOffset instead
updated method signatures in ASTCommentContainer and AbstractApexCommentContainerNode to use AbstractApexCommentContainerNode instead of ASTCommentContainerNode to
hhh - 510 - add support for ` ` fetch ' ' and ` ` fetch ' ' for ` ` lazy ' '
refactor ` NoGetOperationsFilter ` and ` NoUserOperationsFilter ` classes to extend ` AbstractSpecFilter ` instead of ` SwaggerSpec
added assertions to verify database and table names in TestCompactionTxnHandler and TxnHandler classes to ensure correct database and table names are set based on
added a new TimerGracefulShutdownTest class and created a new TimerGracefulShutdownTest . java file to ensure proper handling of timer
added a conditional check for processed blocks before adding it to the startTrace method to ensure that only processed blocks are processed when the block is processed
added null check for providers in ProviderManager and updated test cases in ProviderManagerTests to improve null safety and ensure proper handling of null providers
removed the check for PostgresDatabase in InsertOrUpdateGeneratorPostgres . java to simplify the code and improve readability
added assertions for LOCAL _ INDEX _ LIMIT in multiple test classes to ensure proper resource management and prevent potential resource leaks
added a check to ensure that a collection with the same name and type are compatible with the same name to improve error handling by throwing an InvalidRequest
refactor cursor handling in VDUBuffer and vt320 classes to improve clarity and consistency to enhance readability and maintainability of the code
removed the static final String USE _ RETRIES constant from HttpShardHandlerFactory . java to simplify the code and improve maintainability
updated the VERSION _ NUMBER string in JavaVersion . java and added a test for Java version parsing in TestJavaVersion . java to ensure compatibility with
added a check for empty input gates in StreamTask . java to prevent potential NullPointerExceptions when the input gate is empty
added a new test method ` test ( ) ` to ` TestReceivingMessageSourceParserTests . java ` to ensure that the test is
added null check for properties before returning null to avoid potential NullPointerExceptions when properties are null
updated IOException instantiation to use initCause ( e ) instead of throwing an exception to improve error handling and ensure proper exception handling
updated error messages in multiple Java files to improve clarity and consistency to enhance code readability and maintainability
added a new ` txConfidenceListener ` field and updated the ` txConfidenceListener ` to use it to improve confidence management and maintain consistency in confidence
added a constant for G1 Perm Gen in JmxSupport . java to ensure proper handling of G1 Perm Gen files
removed unnecessary imports and simplified the return statement in NearbyController . java to streamline imports and improve code readability
pdfbox - 2892 : make clonefornewdocument public , so that it do n ' t throw an exception
updated activity type checks in BaseSwipeUpHandlerV2 . java to ensure proper handling of home gestures based on gesture type
updated ` DefaultEdgeClientFilter ` and ` EdgeAddHeaderClientFilter ` to use ` EdgeAddHeaderClientFilter ` instead of ` DefaultEdge
updated the test method names from ` shouldGiveNetworkCountryIso ` to ` shouldGetGiveNetworkCountryIsoInLowercase ` in `
removed the setUnfreezeAmount method call in UnfreezeBalanceV2Actuator . java to streamline the code by eliminating unnecessary assignment
updated PUBLISHED _ TIMESLOT _ DESCRIPTION to PUBLISHED _ ROOM _ DESCRIPTION and PUBLISHED _ ROOM _
replaced ` Files . copy ` with ` FileUtils . copyDirectory ` in ` FirefoxProfile . java ` to improve code readability and maintain
refactor multiple assertion classes for improved readability to enhance maintainability and maintainability of the codebase
refactor Observable class to improve code organization to enhance maintainability and readability of the code
updated ` Update ` and ` MongoTemplateTests ` to use multi - field operation for ` pushAll ` and added a new test for multiple push
added a null check for the randomUUID parameter before setting it to avoid potential NullPointerExceptions when the randomUUID is null
added onHoverEvent method to InputConsumer and OverviewInputConsumer classes and implemented touch event handling in OverviewInputConsumerProxy to enhance event handling
added a condition to delay the boostrap configuration in CoreContainer . java to ensure that the boostrap configuration is only used when the zk server is
change default value of maxHeadersSize from " consumer " to " consumer " in multiple configuration files to improve clarity and consistency in the codebase
updated HBASE _ CLIENT _ RETRIES _ NUMBER from 5 to 35 in HBaseTestingClusterAutoStarter and HBaseTestingClusterAuto
updated the file path handling in SourceSnippetHelper . java to use a File . separator instead of a path to improve code readability and maintainability
refactor EncodedGraphCacheTest to use a boolean variable for better readability and maintainability to improve code clarity and maintainability by centralizing
updated query command from " customer _ count " to " all _ tables " in SchemaCrawlerTextCommandsOutputTest . java and added a new test
added currency handling for kraken assets in KrakenAdapters . java to enhance the functionality of the Kraken asset management process
added a ` toString ( ) ` method to ` AnyOf ` class and created a new test class ` AnyOf _ toString _ Test ` to
refactor email name and email subject name retrieval in AlertTaskRunnerV2 . java to improve code readability and maintainability
fix influxdb publisher to check if the measurement be blank
rename ` doTransform ` to ` downcast ` across multiple converter classes to improve clarity and consistency in naming conventions
http : / / issues . apache . org / jira / browse / amq - 2632 - fix the issue of http : / /
added a method to quote column names in DataTextFormatter to improve code readability and maintainability by using a more descriptive method
added methods to retrieve system properties and set properties in WrapSystem and StrUtils classes to enhance functionality for setting system properties
added a constructor to the UpdateRequest class to enhance the functionality of the UpdateRequest class
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
removed the ` addExperimentalFormatWarning ` method from ` DataImportHandler ` , ` ReplicationHandler ` , and ` RequestHandlerUtils ` classes
refactor JpmsUtil to utilize a format method to improve code readability and maintainability
added a new method ` getDefaultLabelFont ( ) ` to ` UITools ` and updated height calculations in multiple files to improve font size management and
updated the ` notifyBrokerInActive ` method to use ` Optional ` instead of ` Long ` for consistency to improve code readability and maintainability
updated the calculation of mean and split counts in CqlInputFormat . java to improve clarity and maintainability of the data structure
updated condition checks in JUnitTestsShouldIncludeAssertRule . java to improve clarity to enhance code readability and maintainability
added equals and hashCode methods to RuleTerminalNodeLeftTuple to ensure proper equality and hashing logic for RuleTerminalNodeLeftTuple objects
added a check for HIVESTAGEIDREARRANGE before resolveing StageIDsRearranger to ensure that StageIDsRearranger is resolved
updated ObjectName from " MESSAGING - SERVICE - POOL " to " org . apache . cassandra . net " to ensure compatibility with the
added a check for totalMemory before processing memory in LotsOfOutput . java to ensure memory consumption is only processed when the totalMemory is not
added import statements for FacetField , DrillDownQuery , and FacetResult classes to improve code readability and maintainability by centralizing
replaced ` baseEnvironment ` with ` anonymousReadOnly ` and updated related methods in ` LdapAutoConfiguration ` , ` LdapProperties ` , and ` Ldap
refactor DatabaseMetaData class to improve code organization to enhance maintainability and readability of the code
removed the @ RunWith ( JUnit4 . class ) annotation from the EchoInputDoFn class to improve code readability and maintainability
added ` finishMocking ` method to ` MockitoSession ` , ` DefaultMockitoSession ` , and ` StubbingWarningsTest ` classes to
replaced ` extraDeps ` with ` withDeclaredDeps ` in ` GoTestDescription ` and added a new test method in ` GoTestIntegrationTest `
updated variable names from ` buffer ` to ` writeBuffer ` and ` writeBuffer ` in ` SPDYAsyncConnection . java ` to improve
updated method call from ` getStaticBlock ` to ` getFlowingBlock ` in ` BlockLiquidWrapper . java ` to improve code clarity and
updated intent handling in AndroidLocationPlayServiceManager , BackgroundLocationHandler , and added data string handling in BackgroundLocationHandler to improve URL handling and ensure
refactor AprEndpoint class to improve code readability to enhance maintainability and maintainability of the code
[ hotfix ] [ test ] fix npe in cli frontend
updated item hash calculation in CraftingManager . java to use computeIfAbsent instead of computeIfAbsent to improve accuracy of item hash calculation
flume - 132 : do n ' t force checkpoint in testfilechannelrestart ( )
updated conditional checks in TabsAndIndentsVisitor . java for consistency to improve code readability and maintainability
added a Pattern . compile ( " pg _ temp _ . * " ) to NeuteredLinesFilter . java to compile the temp file for
added a false parameter to the ` ProtoRestSerializer . create ( ) ` method in ` HttpJsonPoliciesStub ` and ` PoliciesStubSettings
added conditional checks for " INTERVAL " and " NCLOB " data types in DataTypeFactory , UnknownType , and ColumnSnapshotGenerator to
added a method ` isPublishingHistogram ( ) ` to ` WavefrontDistributionSummary ` and updated metric handling in ` WavefrontMeterRegistry `
updated the ` handleAdd ` method in ` ShenyuClientRegisterSpringCloudServiceImpl ` and ` DivideUpstreamUtils ` to use `
added a method ` registerListener ` to ` ShadowSensorManager ` to enable the functionality of the ` registerListener ` method in the ` ShadowSensor
http : / / issues . apache . org / jira / browse / amq - 262 - add test for ssl connection
added null check for ignite before closing ignite components to prevent potential NullPointerExceptions when ignite is null
added null checks for the total line number in AbstractClient . java to avoid potential NullPointerExceptions when the total line number is empty
pdfbox - 4072 : do n ' t catch unsupported flavorexception in PDFDebugger . java
added unit tests for setting and setting HdrCapabilities in ShadowDisplayTest . java to ensure correct functionality of display capabilities in the ShadowDisplayTest class
added a finally block to reset the classLoader in JavacInMemoryStep . java to ensure proper resource management and prevent potential memory leaks
updated assertion messages in SemanticAnalyzer . java and added a toString method in SemiJoinHint . java and SemiJoinHint . java to improve
added a constructor to the Message class to provide a default constructor for the Message class
added a boolean variable ` isGUIClass ` and modified the priority assignment logic in ` SerializableIdiom . java ` to ensure proper handling of
updated PhoenixDecimalObjectInspector and PhoenixObjectInspectorFactory to use PrimitiveTypeInfo instead of byteValue to improve precision precision handling for decimal objects
replaced GZIPOutputStream with OutputStream in CompressionResponseStream and modified response handling in CompressionResponseStream and CompressionServletResponseWrapper to improve output handling and ensure proper handling
updated regex patterns in Authenticator . java to use authenticateHeader instead of WWWAuthenticate to improve clarity and maintainability of the code
removed unnecessary check for " EJS " and " omg " packages in DCD . java to simplify code and improve readability
added a method to retrieve the thread group name in the ThreadLeakTest class to enhance thread management by providing a more descriptive name for
added logging for security interceptors in MethodInvocationPrivilegeEvaluator . java to improve logging clarity and ensure proper logging of security interceptors
updated package name from org . apache . nutch . crawl to org . apache . nutch . tools in DmozParser . java to
removed unused import of lombok . ToString in RegisteredServiceChainOperatorTypes and ChainingRegisteredServiceDelegatedAuthenticationPolicy classes to streamline code and
added storage path retrieval for ISO volume types in LibvirtComputingResource and StorageManagerImpl to ensure proper storage path retrieval for ISO volume types
replaced ` Signal . handle ` with ` assertThrowsExactly ` in ` SigInt ` and updated test cases in ` SigInt
replaced static imports with ArrayUtils . isEmpty for estimatedRowSizeHistogram and estimatedColumnCountHistogram to improve code readability and maintainability by using
updated import statements and added a new discoveryClient method in AxonAutoConfigurationWithSpringCloudTest . java to enhance testing capabilities and ensure proper
refactor ColorRGBA class to improve clarity and readability to enhance maintainability and maintainability of the code
removed the deprecated resetInitializedPlanningEntities method from ConstructionHeuristicSolverPhaseConfig , PlanningEntityDescriptor , and PlanningEntitySelector classes to simplify
added build time handling in TwoLevelArtifactCacheDecorator and CachingBuildRuleBuilder classes to improve build time handling and ensure proper handling of build time
refactor the calculation of fixed row sizes in GroupByOperator . java to improve code readability and maintainability
added null check before adding block appearance in Wallet . java to avoid potential NullPointerExceptions when block is null
updated CurrencyPair and Currencies classes to include CNC _ BTC and CNC _ BTC in CurrencyPair and TickerDemo to
updated skewAllowance from 5 to 15 and updated related classes to use CasConfigurationProperties instead of SamlIdPResponseProperties and Saml
updated SongListActivity to use ItemSortBy instead of ItemSortBy in SongListActivity and Utils classes to improve clarity and maintainability of the
removed unused imports and simplified the readBodyToBytesIfNecessary method to streamline the code and improve readability by eliminating unnecessary code
refactor LegacyBaseBlockWrapper to extend LegacyBaseBlockWrapper and extend LegacyBaseBlockWrapper to improve code clarity and maintainability by centralizing block
updated IcebergBranchExec and TestHiveIcebergBranchOperation to check for tags before accessing snapshot ID to improve error handling and ensure
updated the ` setExternalGroupsWhitelist ` method from ` newArrayList ` to ` Collections . singletonList ` in ` AbstractLdapMockMvcTest . java `
updated variable names from ` boxesSsboBinding ` to ` boxesSsboBinding ` in multiple files to improve code readability and maintain
added debug logging for invalid password changes in IdentityProviderEndpoints . java and updated password change handling in IdentityProviderEndpointsMockMvcTests . java to improve
added a call to removeAll ( assumeReflective ) in UnreadFields . java to ensure proper handling of non - reflective constructors
added check for isClosed ( ) before throwing the DatabaseException in JdbcExecutor . java to ensure proper URL retrieval when the connection is closed
added a new test method ` testRequiredBody ` in ` SpringmvcClient . java ` to validate required parameters to ensure that required parameters are
updated regex pattern patterns in CredentialInjector and CredentialInjectorTest to improve clarity and consistency to enhance code readability and maintainability
updated menuItems array to include " Item4 " and " Item4 " in ActionListenerCalledTwiceTest . java to enhance user experience by
updated test assertions in TestCoreParser . java to handle produced results instead of producing results to improve clarity and maintainability of test assertions
updated condition in SimpleNode . java for consistency to improve code readability and maintainability
changed the access modifier of the PopulatorContextStackItem class from public to public to allow external access to the PopulatorContextStackItem class
replaced int numDocs with long numDocs in MoreLikeThis . java and added a new test for small sample in TestMoreLikeThis . java
removed unnecessary whitespace in GameData . getBeginCondQuestMap ( ) to improve code readability and maintainability
[ hotfix ] [ test ] add testlogger to networkbufferpooltest
updated the append method call from " $ gt " to " $ lt " in MongoSessionDataStore . java to improve clarity and consistency in the query
added a new method ` unsafeGetLong ` to the ` CompilerDirectivesSubstitutions ` class to support customized unsafe loading functionality
refactor TimeZoneNames classes to use EET instead of ARAST to improve clarity and maintainability of the codebase
updated the id from 90000010 to 90000011 in DeprecationLogger . java to improve code clarity and maintainability
hhh - 13232 do n ' t throw JDBCexception when the transaction be rollback .
refactored the planned name retrieval logic in DownloadExternalFile . java to improve code readability and maintainability
added a ` updateUI ( ) ` method to ` FreeplaneMenuBar ` to enable screen menu updates based on MacOS to enhance user experience by
added a new test method ` piecewiseIntegration ` in ` GeoGebraCasIntegrationTest . java ` to verify the correctness of the piecewise
changed the visibility of ` STATE _ SCREENSHOT _ CAPTURED ` from private to protected in ` BaseSwipeUpHandlerV2 `
added a new test method ` testConfigWhiteList ` in HiveConf . java ` and a corresponding test in TestJdbcWithSQLAuthorization . java
added a call to invalidClasses . put ( entryName , value ) in EntryLoader . java to ensure proper handling of invalid classes
updated the method call from Team . sharded to player . team ( ) in MobileInput . java to improve code readability and maintainability by
updated Cookie initialization to use domainHelper . getHostName ( ) instead of comp1 to ensure compatibility with different domain names
added validation logic for nullable columns in multiple classes to ensure proper validation of null values for non - null values
refactor multiple security token classes to improve code organization and maintainability to enhance maintainability and maintainability of security features
added deleteByQuery and deleteByQuery methods in CustomCollectionTest , CompositeIdRouter , and CompositeIdRouter classes to improve query handling and ensure
updated ` ExecutablePreparedStatementBase ` and ` PostgreSQLIntegrationTest ` classes to use ` SnapshotGeneratorFactory ` instead of ` InputStreamList `
updated conditional checks for max _ cached _ files and max _ cache _ size in DefaultServlet . java to ensure proper handling of cached files and size
added handling for transfer modes in JabRefFrame . java to ensure proper handling of transfer modes in the tabbed pane
updated assertions in ` ExecutionUnitRunner ` and ` ExecutionUnitRunnerTest ` to use ` Description . createTestDescription ` instead of ` String `
updated condition in CommandLineUtils to check if the build time string is not empty to ensure that the build time string is not empty before proceeding
changed access modifiers of ` isToday ` and ` isYesterday ` methods from ` TimeZone ` to ` long ` across multiple files to
added a method ` isSecurityFrameOrInjectedInvoker ` to ` RefectionMHTests ` and updated related checks in ` RefectionMH
updated the condition for matching " jpg " and " . jpg " files to include " . jpg " to ensure compatibility with the new
added handling for HostedMethod in NativeImageDebugInfoProvider to ensure proper handling of HostedMethod instances
added icons and icons for cross and ungroup icons in Data and DataTableTopComponent to enhance the application ' s ability to display icons by default
added a check for lastIndexOf before returning the request name in CounterRequestAggregation . java to ensure that the request name is always substring based on the lastIndexOf
updated regex handling in FindAndReplace . java and added a test for dollarsignsTolerated in FindAndReplaceTest . java to ensure proper
refactor connection handling in ProtocolProviderServiceJabberImpl and SmackPacketDebugger to use Connection instead of XMPPConnection to improve code
refactor SchemaExtractionProcessor class to improve code organization to enhance maintainability and readability of the code
added a new method ` copyDir ` in ` IO . java ` and modified the ` SpecWebAppTest . java ` to utilize a
added a throw statement for unknown datum class in JacksonUtils . java to ensure proper exception handling for unknown datum types
updated the implementation of ` buildAbiFromClasses ( ) ` to use ` getLibraryTarget ( ) ` instead of ` buildAbi `
removed the calculation of the height calculation in SelectBox . java to simplify the calculation by removing unnecessary height calculations
added normalization of database names and tableNames in HiveStringUtils to improve code readability and maintainability
updated database type checks in DbSqlSession . java to ensure schema is set before accessing tables to improve robustness by preventing potential null pointer exceptions
removed the call to Logout ( ) in HomeFragment . java to improve code readability and maintainability
updated ` MockStreamingRuntimeContext ` to use ` 1 ` instead of ` 0 ` in multiple test files to improve code clarity and maintainability by
added null check for the candidates list in FastImportAction . java to avoid potential NullPointerExceptions when the candidates list is null
updated condition checks in ContainerLifeCycle . java and added unit tests in ContainerLifeCycleTest . java to improve code clarity and ensure correct handling of managed bean
updated import statements for IExecutionAttributesDialect and IExecutionAttributeDialect to use IExecutionAttributeDialect instead of IExecutionAttributesDialect to improve clarity and
added a call to ` metadata . clearUnsafe ( ) ` in ` AlterTest . java ` to ensure proper memory management and prevent memory leaks
added null checks for day and month in CmdGetTime . java to avoid potential NullPointerExceptions when location is null
added a null check for the measurement parameter in TabletInsertionDataContainer and added a DisruptorQueueExceptionHandler class to prevent potential NullPointerExceptions
deleted the Session2Token . java file to remove unused class to streamline the codebase
refactor volume handling in VolumeServiceImpl to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a new installation class ` Install ` and updated ` SystemShortcut ` and ` InstantAppResolver ` classes to implement a new ` Install ` functionality
added a constructor to ` LdapAuthenticationProvider ` and updated ` LdapAuthenticationProviderTests ` to use ` NullAuthoritiesPopulator ` instead of ` LdapAuthentication
added null check for retrolambda jar path in Executor and CN1BuildMojo to avoid potential NullPointerExceptions when retrolambda jar is
updated method call from ` buildOrThrow ( ) ` to ` build ( ) ` in ` ShadowCamera . java ` to improve code readability and
updated the ` sortLiveDocs ` method to use ` Bits ` instead of ` FixedBitSet ` to improve readability and maintainability of the
added a call to handleNullResult ( vars , defaultValue , matchNumber ) in JMESPathExtractor . java to ensure proper handling of
added null checks for authorities in AuthorizeTag . java to prevent potential NullPointerExceptions when accessing authorities
updated assertion statements in multiple test classes to use ` DateTimeUtils . dateOf ( ) ` instead of ` DateTimeUtils . dateOf ( ) `
updated error message in VMSnapshotManagerImpl . java to include vGPU enabled VMs to ensure compatibility with vGPU enabled VMs
refactor configuration handling in RobolectricTestRunner and Config classes to use HashSet instead of ArrayList and set to improve code clarity and maintainability by
replaced SelectChannelConnector with SocketConnector in JettySolrRunner . java to streamline the code by using SocketConnector instead of SelectChannelConnector
added partial part keys checks in HiveAlterHandler and updated related methods in TestHiveMetaStore to improve handling of partial part keys in Hive
added a new boolean flag ` ENABLE _ ICON _ IN _ TEXT _ HEADER ` to ` FeatureFlags . java ` to enable icon in
updated the check for component active state in SimulationStatus . java to improve code readability and maintainability
replaced SharedBlockingCallback with Callback . Completable for consistency to improve code readability and maintainability
added workspace listener functionality to PreviewControllerImpl and updated PreviewUIController to improve workspace management and ensure proper workspace management
refactor conditional checks in ReflectionFactory and ReflectUtil classes to improve clarity and consistency to enhance code readability and maintainability
refactor TransportHelper class to improve code readability to enhance maintainability and maintainability of the code
updated file path formatting in CatalinaAcegiUserRealm . java to improve code readability and maintainability
updated log messages in AmbariServer . java to include an additional * * * * * * * * * * * * * * *
added null checks for init and modify nodes in JSONWriter . java to enhance robustness by preventing potential NullPointerExceptions
refactor run methods in SliderAppsViewControllerImpl . java to improve readability and maintainability to enhance code readability and maintainability by
added a condition to check if backgroundManager is attached before attaching it to ensure that backgroundManager is only attached when the backgroundManager is attached
added setCurrentTab method to AllAppsTabbed , Launcher , and PagedView classes to ensure correct tab positioning based on child width
added null check for the URL before throwing an IllegalArgumentException in BaseDataSource . java and implemented a test for typo localhost : 5432 to
added JUnit @ EnabledOnJre annotation to PebbleModuleTest . java to enable testing of PebbleTemplateEngine with JRE
added EditNameDialog functionality to the FileDisplayActivity to manage directory creation and dismiss dialogs to enhance user experience by allowing users to create a directory
added handling for bar border widths in multiple classes to ensure proper rendering of bar border widths during chart operations
updated SSL URIs in OkCoinExchange . java to use " www . okex . com " instead of " www . okcoin . com
[ drools - 132 ] fix test that fail due to invalid score comparator
refactor file handling in Files . java to use SeekableByteChannel instead of FileChannel . newByteChannel to improve readability and maintainability of file
refactor ` getFlattenFieldTransferPair ` method to use ` FieldReference ` instead of ` MapVector ` in ` FlattenRecordBatch `
replaced ` MockHandler ` with ` MockHandlerImpl ` in multiple files to improve clarity and consistency in naming conventions
updated conditional checks in SerializationConfigurationParser . java for consistency to improve code readability and maintainability
added memory limit handling in QuickstepProcessInitializer . java to improve user experience by limiting memory limit for debug devices
refactor sumWithCompensation and sumWithCompensation methods in Collectors . java to improve code readability and maintainability
[ log4j2 - 132 ] do n ' t throw exception if the bundle be not resolve .
refactor serialization logic in PrecompactedRow . java to use a conditional check for deletion info to improve code readability and maintainability
updated renderingIntent return values in ICC _ Profile , ColorConvertOp , ColorConvertOp , ColorConvertOp , ColorConvertOp , ColorConvertOp
added MeterRegistryLifecycle to MetricsAutoConfiguration and corresponding tests in MetricsAutoConfiguration to enhance monitoring and monitoring of meter registry lifecycles
updated logging level from warn to info in ConfigurationUtils . java to improve clarity and consistency in logging messages
added try - catch blocks for CertificateException in CertificateFactoryTest . java to ensure proper handling of CertificateExceptions
added checks for binary tokens in SimpleTokenizer and implemented a test for parsing predicates in SimpleParserPredicateTest to ensure proper handling of binary expressions and
replaced ` onTabUnselected ` method with ` onTabUnselected ` in ` EditorActivity ` and added focus handling in ` IDEEditor
updated error logging in AccessLogValve . java to include the user ' s name to improve logging clarity by providing more context on the user '
added null checks for ogre mesh names in SkeletonModelGpuSkinningTest and updated animTime calculation in OgreXmlLoader
removed the ` throws InterruptedException ` from the ` createOrThrow ` method in ` DefaultProjectFilesystemFactory . java ` to simplify the method signature and
added @ Deprecated annotation to UpgradeResponse . java to indicate that the method is outdated and should not be used
added support for the " dtsout " command - line option in JSweetCommandLineLauncher and JSweetTranspiler classes to enhance
added a new test method ` testKinesisFetchTimeout ` in ` StreamConfigTest ` and modified ` StreamConfig ` to use ` KinesisFetch
added " . html " to the timestamp string in StreamingDataflowWorker . java to ensure proper handling of timestamps in the code
updated METASTORESERVERMAXTHREADS from 100000 to 1000 in HiveConf . java to increase the maximum number of threads for better performance
changed the return type of onTaskSnapshotChanged from void to boolean in RecentsModel . java to allow for accessing task snapshot changes
updated shadowRadius assignment from mMaxShadowRadius to shadowRadius in SwipeUpAnimationLogic . java to ensure the correct shadow radius is used for
added a new test method ` chainNestingAndAggregation ` to ` ChainParserTests ` to verify the behavior of chain Nesting and
changed the loop condition from limit to end in MarketSellAssetActuatorTest . java to improve error handling by providing a clear error message
changed the condition from ` isInternal ( ) ` to ` isInteractive ( ) ` in ` PolyglotContextImpl . java ` to ensure
added a null check for previousCachedFilePath in CreateKeytabFilesServerAction . java to avoid potential NullPointerExceptions when previousCachedFilePath is
added a DisplayController instance to the LauncherPreviewRenderer class to enhance the functionality of WindowManagerProxy
updated toolTipText assignment in MetalFileChooserUI , SynthFileChooserUI , and SynthFileChooserUIImpl classes to ensure correct tool tip text
updated screenSize assignment from getToolkit ( ) to getDefaultToolkit ( ) in LooksFrame . java to ensure proper handling of screen size in the
change the type of the recognise method from List < ? extends RecognisedObject > to List < CaptionObject > in Tensorflow
added unit tests for fetching and removing entities in JPASQLBase . java to ensure proper handling of query results with factory expression expressions
removed the conditional check for dragIndex in FreeformFinSetConfig . java to clean up the code and improve readability
updated the moe version from " 1 . 1 . 2 " to " 1 . 0 " in DependencyBank . java to ensure compatibility with the
updated error message from " constant canot set call value " to " constant cannot set call value " to improve clarity and consistency in error reporting
updated error message formatting in multiple Java files to use ` nerror ` instead of ` error ` to improve clarity and maintainability of error message formatting
added @ Deprecated annotation to Weights class to indicate that Weights class is outdated and should not be used
refactor unsafe registration logic in AMD64GraphBuilderPlugins and StandardGraphBuilderPlugins to use a separate registerUnsafePlugins method to improve code readability
added @ Hint annotation to multiple AndroidAppModularityDescription , AndroidGraphEnhancerArgs , and AndroidBinaryModularIntegrationTest classes to ensure
changed the default value of mCenterPagesVertically from true to false in AppsCustomizePagedView . java to improve user experience by
removed redundant calls to ` migrationInfo . doneProcessing ( ) ` in ` MigrationRequestOperation . java ` to improve code readability and maintainability
updated variable names from ` HOST ` to ` BASE _ URL ` for consistency and consistency to improve code readability and maintainability by using a
updated the ` attributeValue ` parameter from ` Object ` to ` List < Object > ` in ` WSFederationClaimsReleasePolicy ` to
added a new method ` createTestTable ` to ` TestJdbcWithMiniLlap ` and modified the ` processQuery ` method to include
added a new test method ` testCaseInsideBrackets ` in ` CaseExpressionTest . java ` to validate SQL parsing logic to ensure correct handling of
added MotionEventCompat import and modified copy mode handling in ConsoleActivity . java to improve code readability and maintainability by ensuring proper copy mode management
replaced ` com . google . common . io . Closeables ` with ` try - with - resources ` in ` TestCommand . java ` to
added a null check for exchange before checking if exchange is null and added a new test class CustomListAggregationStrategyEmptySplitTest to ensure that the
camel - 14263 : camel - core - camel - camel - camel - camel - camel - camel - camel - camel - camel - core
updated package structure and import statements in BasicConfigurator , ContextInitializer , and SocketMin classes to improve code readability and maintain consistency in package structure
added a check for PHI _ NODE in the targetVN comparison in TypeQualifierDataflowAnalysis . java to ensure correct handling of PHI
removed unused import of SharedStringSource in TestXSSFRichTextString . java to streamline code by eliminating unnecessary dependencies
added a method ` invokeMethod ` to ` ObjectInvokeHelper ` to provide a way to invoke the ` invokeMethod ` method in ` ObjectInvoke
updated multiple files related to BoxAndWhiskerCalculator , BoxAndWhiskerXYDataset , and StatisticalCategoryDataset to
[ hotfix ] [ test ] fix checkstyle violation in readablewritableconfigurationtest
refactor NormUpdate and MemoryIndex classes to use static methods for consistency to improve code readability and maintainability by reducing duplication
changed the visibility of IndexFileNameFilter from public to private to allow access to IndexFileNameFilter from other classes
replaced ` testPluginDefinition ( ) ` with ` testPluginDefinition ( pluginDef ) ` in ` IfStatementTest . java ` to improve test
updated method call from ` getPutOnlyTableHeaderRow ` to ` getTableHeaderRow ` in ` ConnectionlessQueryServicesImpl . java ` to
removed unnecessary nullSafe method calls from TypeAdapter . java to simplify code and improve readability by eliminating unnecessary code
updated the size of the BundledDistributionTest from 12 to 13 in BundledDistributionTest . java to ensure compatibility with the latest version of the
added a new file EXIFReader . java to handle EXIF metadata processing to facilitate metadata processing in the upload process process
updated the ` toStandardUnit ` method to return ` NONE ` instead of ` UNKNOWN _ TO _ SDK _ VERSION ` in ` CloudWatchMeter
added handling for parameter instantiation in ApplyPmmlModelCommand and PMML4DataFactory to ensure proper instantiation of parameter objects and improve error handling
updated message formatting in FluentProtocol . java to improve clarity and consistency to enhance readability and maintainability of the code
added a check forBubbleBarVisible ( ) in BubbleStashController . java to prevent potential NullPointerExceptions when the bar is not visible
fix aarch64 backend to handle branchtargetoutofboundsexception in arch64 backend
refactor JDKXRLogger to use a try - finally block to ensure proper resource management and prevent potential resource leaks
added a ` find ( Class < Ticket > ticketClass ) ` method to ` TicketCatalog ` , ` DefaultTicketCatalog ` , and
refactor SSL connection handling in TestSSL . java to improve code readability and maintainability
[ hotfix ] [ runtime ] fix deadlock in sortmergeresultpartition
replaced ` Read ( ) ` with ` Write ( null , null , null , null ) ` in ` JmsIO . java ` to improve
updated ` PluginHandleController ` and ` PluginHandleDTO ` to include ` type ` and ` sort ` parameters in ` PluginHandleDTO ` to
updated SpanCreator to use start ( ) instead of start ( ) in DefaultSpanCreator . java and SleuthAdvisorConfig . java to
added GLKViewDrawableColorFormat and GLKViewDrawableMultisample to IOSApplicationConfiguration and IOSGraphics classes to enhance rendering capabilities for
refactor login logic to use ` attemptLogin ( ) ` instead of ` find ( ) ` for improved readability to enhance code maintainability and
replaced PtNDArray with a long handle in JniUtils . java to improve error handling and ensure proper handling of complex values
refactor lock retrieval logic in SynchronizationStatistics . java to improve code readability and maintainability
refactor Implements and ShadowPicker classes for improved clarity to enhance maintainability and readability of the codebase
refactor RestTransportClient and TransportClientConfig to use a static method for managing HTTP2 connection limits to improve code readability and maintainability by central
added null checks for StructType , DynamicArray , and SolidityFunctionWrapper classes to prevent potential NullPointerExceptions when type is not available
updated text _ align parameter from " text - align " to " text - align " in InlineLayout . java and FontUtil . java to ensure
added a boolean parameter ` shouldRecurse ` to the constructor of ` CopyStep ` and a corresponding test in ` CopyStepTest ` to
updated RedissonSemaphore to use ` ` publish ' ' instead of ` ` set ' ' in ` RedissonSemaphore . java ` and added a
camel - 14279 : camel - core - fix camel - load - balance test to work with routecontextprocessor .
added a new ` FlavorParser ` class and modified ` BuildTargetParser ` to use ` Splitter ` and ` FlavorParserTest `
updated the type of ` String ` and ` ByteString ` from ` String ` to ` ByteString ` in ` WitnessScheduleStore . java ` to
added a check to ensure resultsMeta is not empty before logging to avoid potential NullPointerExceptions when the results are not empty
refactor ConcurrentLinkedQueue to improve code readability and maintainability to enhance maintainability and maintainability of the code
added support for add special token tokens in HuggingFaceTokenizer and HuggingFaceTokenizer classes to enhance tokenization functionality for better token management
replaced ArrayList with nCopies for resourceProfiles in TaskManagerServices . java to improve readability and maintainability of the code
updated chunk data handling in LoadSingleTsFileNode . java to use alignedChunkData instead of pageIndex2ChunkData to improve data handling
added a new variable ` KEY _ SESSION _ STORAGE _ CONTEXT ` and updated the ` DuoSecurityMultifactorWebflowConfigurer `
added a new test method ` testSchemaValidation ` in ` TestJspDocumentParser . java ` to validate XML schema validation to ensure proper handling
added a constructor to TypeAdapter and updated warnings in Java 17RecordTest to ensure that record support is disabled until record support is added
refactor event handling in Debugger and SuspendedEvent classes to improve code clarity and ensure proper handling of KillExceptions
refactor AntPathRequestMatcher class for improved readability to enhance maintainability and maintainability of the code
removed null parameters from createResourcePolicy method calls in multiple classes to simplify the method signature and improve code readability
added a null check before releasing the deflaterEntry in GzipHttpOutputInterceptor . java and modified test assertions in BlockingTest . java to
added JUnit JUnit @ AfterEach annotation to ReactorCoreAutoConfigurationTests . java to ensure compatibility with JUnit JUnit ' s After
refactor CheckSum instantiation to use Normalizer for better normalization to improve readability and maintainability of the code
refactor command handling in Example . java to simplify code and improve readability to enhance maintainability and maintainability of command execution logic
changed the visibility of the keyListener from private to final in BasicProfilerState . java and BaseAppState . java to ensure the keyListener is
updated ` MongoTemplate ` to use ` DBObject ` instead of ` T ` and added a new test for ` savesJsonStringCorrectly `
added a method to check if the IP address contains multiple remote addresses in RequestUtils to ensure proper handling of remote addresses in the request
replaced ` String ` with ` ObjectBuilder ` in ` JsLibrary . java ` to simplify the method signature and improve code readability
refactor CookieManagerTest and UnmodifiableMaps to use a static final hostAddress variable and improve error handling to enhance code clarity and maintainability
refactor glyph layout logic in GlyphLayout . java and add a new test in BitmapFontTest . java to improve performance and ensure proper resource management
added pause and resume methods to PulsarSourceReaderBase and PulsarPartitionSplitReaderBase classes to enable pause and resume processing
added HIVESCRIPTIDENVVAR and HIVESCRIPTIDENVVAR in HiveConf . java and ScriptOperator . java to enhance environment handling by
refactor ` getListedTermCounts ` method to use ` SimpleImmutableEntry ` for sorting terms to improve code readability and maintainability by
added a new file ` UseSeparateStepSizeAction . java ` to implement a new ` UseSeparateStepSizeAction . java ` for handling separate
updated FileMenuFilter to be final and modified lock handling logic in FileMenuFilter . java to improve code clarity and ensure proper locking behavior for
hbase - 163 - remove unnecessary list of input split in tablesplit ( # 163 )
updated HTTP request headers from " false " to " 1 " in HttpClientRequestAdapter . java and HttpClientRequestAdapterTest . java to ensure compatibility with
pdfbox - 4072 : remove unnecessary force flag to avoid unnecessary resource leak
refactor GwtApplication and GwtGraphics classes to use native methods for setting screen width and height to improve code readability and maintainability by centralizing
refactor WebfingerIssuerService to use URIs instead of Strings and improve URI normalization logic to enhance flexibility and maintainability of URI normalization
added a new test class ` SoulApacheDubboClientConfigurationTest ` to validate the configuration of dubbo client configurations to ensure
replaced ` Gdx . files . internal ( fileName ) . pathWithoutExtension ( ) ` with ` resolve ( fileName ) . pathWithoutExtension (
updated log messages in ChainingAttributeReleasePolicy , OidcDefaultJsonWebKeystoreCacheLoader , and OidcDefaultJsonWebKey
replaced calls to ` PMS . REALTIME _ LOCK . lock ( ) ` with ` PMS . REALTIME _ LOCK
changed the package name from ` java . lang ` to ` java . lang ` in ` Compiler . java ` to ensure consistency in package naming and
updated conditional checks in NullDerefAndRedundantComparisonFinder to include exception handling to improve code clarity and ensure correct handling of exception types in
updated the ` DashRendererBuilder ` constructor to use ` DefaultHttpDataSource ` instead of ` String ` to improve resource management by using a default
added a configuration property ` EXECUTION _ SCHEDULER _ MAX _ STATEMENTS _ PER _ CONNECTION ` to
rename ` WritableConfig ` to ` Configuration ` in multiple configuration classes to improve clarity and consistency in naming conventions
removed the checkErr method from the AutoScalingHandler to streamline error handling by eliminating unnecessary error handling
refactor CombinedDataset class to improve code readability to enhance maintainability and maintainability of the code
updated the loop logic in InflateIn _ DeflateOut . java to use a new byte array instead of a new byte array to improve performance
added methods to remove cryptography restrictions in Utilities . java to ensure proper handling of cryptography restrictions
refactor chunk generation logic in Entity . java to improve code readability and maintainability to enhance code clarity and maintainability by reducing duplication
added a new test method ` testPageMarginsLongTextTransform ` to ` TextVisualRegressionTest . java ` to verify the functionality of the
added null check for vContext in Vectorizer . java to avoid potential NullPointerExceptions when accessing vectorization contexts
updated the speed calculation for position speed in WialonProtocolDecoder . java to improve accuracy of speed calculations
hbase - 13232 disable metric user by default in testclientclustermetrics . getmetricsuseraggregate
added a ` isEmpty ( ) ` method to ` JsonObject ` and a corresponding test in ` JsonObjectTest ` to ensure that the ` isEmpty ( )
added a boolean variable ` mUserPresent ` and ` mVisible ` and ` mAttached ` to the ` mVisible ` and ` mAttached
refactor multiple HttpClientRequest , HttpClientResponse , HttpServerRequest , HttpServerRequest , HttpServerResponse , HttpServerRequest , HttpServerResponse , and ReadStream classes to
added a params parameter to the client ' s zadd method in PipelineBase . java to enhance functionality by allowing additional parameters for the client
updated assertions in MetadataImportIT , MockPubmedImportMetadataSourceService , and MockPubmedImportMetadataSourceServiceImpl to use UTF - 8
rename TestAsyncMessages class to TestAsyncMessagesPerformance to improve clarity and consistency in naming conventions
added a method ` getNodeOptional ` to ` VersionedTargetGraphBuilder ` and modified ` VersionPropagatorBuilder ` to use ` HasTests
updated EPOCH _ SECONDS _ HIGH and EPOCH _ SECONDS _ LOW constants in TimeZoneProvider . java to improve accuracy of epoch
updated return value from 4 to HEADER _ SIZE in EscherBlipRecord . java and added a new TestOLE2Embeding . java
replaced the variable ` row ` with ` column ` in ` JSONParser . java ` to improve code readability and maintainability
replaced ` JavaType . ShallowClass . build ( fullyQualifiedTypeName ) ` with ` Pattern . compile ( StringUtils . aspectjNameToPattern
updated the DETAIL _ THUMB _ HEIGHT constant and added support for playback trailers in BaseItemDetailsFragment . java to enhance playback
added a method to remove glyph information from the cache in CStrike . java and implemented a native method for removing glyph information from the cache to
refactor ` deleteProcessInstanceCascade ` method to use ` terminateAllBehaviour ` and ` recordProcessInstanceEnd ` in ` ExecutionEntityManagerImpl ` to improve
camel - 14237 : camel - xml - type - strategy should not return null if there be no attribute .
updated the valid endpoint from " http : / / www . apereo . org / scottb . html " to " https : /
added support for setting default preferences in JabRef . java to enhance user experience by providing a clear option for preferences
changed access modifiers of ` source ` and ` slowResponseTime ` from private to protected in ` ThriftMetrics ` and ` ThriftServer ` classes to
[ danfossairunit ] remove deprecated channel deprecate .
updated assertions in TestEndpoint . java to use hamcrest assertions instead of junit to improve code readability and maintainability by standardizing assertions
added a null check for expansionHelper in TweetActivity . java to ensure that the expansionHelper is stopped only when it is not null
added equals ( ) and hashCode ( ) methods to PartitionPanel , PartitionFactory , and PartitionFactory classes to ensure proper equality and hashing logic for
added a check to set the ROOT _ DISK _ SIZE variable before adding it to customParameters to ensure that the disk size is only set when
updated PredictionRowView . java to use PreferenceExtensionsKt instead of mPredictionsEnabled to enhance user experience by allowing users to choose selected
refactor APIBBoxParser to accept a ` crs ` parameter and add a new ` toFilter ` method in ` FeatureService ` to
added validValueParams and validPositionParams methods to LibrustzcashParam and LibrustzcashTest to validate value and position parameters to ensure
removed deprecated IThrowableEntity class from FML cpw . mods . fml . common . registry . IThrowableEntity to improve code clarity and maintain
updated the initialization of the x , y , and x in NodeDataImpl . java to ensure correct positioning of nodes in the data structure
added a new test method ` validateRefreshToken _ happycase ` and updated the ` validateRefreshToken _ should _ fail _ when _ missing _ scopes `
refactored the initialization of declaredDepsBuildResult and firstOrderStderr in JavacStep . java to use a try - with - resources
updated the version string from " . 9 . 1 " to " . 9 . 2 " to reflect the latest release version
added a condition to check if the item type is DEEP _ SHORTCUT in LoaderCursor . java to ensure proper handling of shortcuts
added a ` hashCode ( ) ` method to ` TimeGranularitySpec ` to ensure correct hash code calculation for time types
changed visibility of ` BooleanWeight ` and ` DisjunctionMaxWeight ` classes from private to protected in ` BooleanQuery ` , ` Disj
added a boolean variable ` useProxyResponseCode ` and modified the ` useProxyResponseCode ` logic in ` HttpURLConnection . java ` to ensure
refactor AArch64Move and AArch64Move classes to use a try - with - resources to improve code readability and maintainability by
replace listUpByHostIdTypes method with getUsedCapacity method in ManagementServerImpl . java to improve code readability and maintainability by using
added a null check for the max score in JSONResponseWriter . java and added a new query method in TestDistributedSearch . java to ensure that
updated the audio recoder from 22050 to 44100 in AudioRecorderTest . java to ensure compatibility with the latest audio changes
updated the calculation of newOriginX from mid _ x to mid _ x in RocketFigure . java to ensure correct positioning of the origin
[ calcite - 139 ] fix bug in druidquerybasedinputformat # getinterval ( )
added ORIGINAL _ ID and ORIGINAL _ TYPE constants and updated regex patterns in CustomProperty . java and CustomPropertyTest . java to
added a new method ` create ( Table parent , Map < String , Object > data ) ` to the ` Index ` class to enhance functionality by
removed the ` isBetweenGivenPeriod ` variable from ` checkLowerBoundaryPeriod ` and ` checkUpperBoundaryPeriod ` in ` Dates . java
updated SchemaCompatibility to include location and improved compatibility checks in multiple files to enhance compatibility checks and ensure proper handling of schema compatibility issues
refactor QueryUtils to utilize PersistentAttributeType for entity path handling to improve code readability and maintainability by centralizing entity path handling
refactor span retrieval logic in TestSpanHandler . java to improve thread safety and ensure thread safety to enhance thread safety and ensure thread safety during span
updated ` getText ` methods to accept ` List < ? > ` instead of ` List < Object > ` to improve type safety and maintainability of
updated exception handling in ViewContextImpl . java to use InvocationTargetException instead of Exception to improve error logging clarity and ensure proper logging of exceptions
refactor OAuth2AccessTokenEntity to improve code readability to enhance maintainability and maintainability of the code
updated message formatting in multiple test classes to improve clarity and consistency to enhance readability and maintainability of the code
added new images to the project in GdxSetup . java to enhance the functionality of the GdxSetup project
updated import statements in TestSearcherManager . java to use ConcurrentMergeScheduler instead of java . util . ArrayList to improve code readability and maintainability
updated session state handling and added null checks in QTestUtil and GenericUDTFInline classes to improve robustness and prevent potential NullPointerExceptions
refactor MapIterable , FJIterate , and ParallelIterate classes to improve code organization and maintainability
added a call to ` e . preventDefault ( ) ` to ` e . preventDefault ( ) ` in ` SpreadsheetKeyListenerW . java
refactor HibernateBundleActivator to use ServiceRegistration for persistenceProviderService and sessionFactoryService to improve code readability and maintainability by centralizing
updated timeout assignment from ` elapsedTimeMs ( start ) ` to ` connectionTimeout ` in HikariPool . java and HikariPool
refactor component file creation in VoiceCompiler to utilize non - packaged resources directory and improve code clarity to enhance maintainability and maintainability by
refactor file path handling in Compat and FileOpener classes to improve code readability and maintainability
replaced the return type of ` Cell < T > ` with ` void ` in ` Cell . java ` to improve code readability and maintainability
added port handling in BesuCommand and corresponding test cases in BesuCommandTest to ensure proper handling of port configurations and ensure proper handling of
added maskGen functionality to WebSocketClient and updated WebSocketServlet to use MaskGen for null mask generation to enhance security by allowing custom mask generation for
updated the ` genUDTFPlan ` method to return a new Pair < Pair < RelNode , RowResolver > > ` instead of a
added ` nodeSelectionStats ` and ` bucketedNonPreferredNodeSelectedCount ` methods to ` NodeScheduler ` , ` NodeSelectionStats ` ,
added a new file ` Person . java ` that retrieves the name of the Person class to provide a way to retrieve the name of the person
added a boolean variable ` hasOwnerPtr ` and modified the execution logic in ` CPlatformWindow . java ` to check if the owner pointer is
added clock handling and animation handling in PlaybackOverlayFragment . java to improve user experience by providing clearer animation and animation during playback
replaced calls to ` updateComparatorOutputLevel ` with ` getPos ( ) ` across multiple classes to streamline the code by eliminating redundant calls to
refactor exception handling in SegmentReader . java to handle SecurityExceptions and improve error handling to enhance robustness and prevent potential SecurityExceptions
refactor event handling in Sudoku . java to use SwingUtilities for better thread safety to improve code readability and maintainability by centralizing SwingUtilities
refactor DefaultInetAddressAdapter to use CollectionTypeAdapters . INET _ ADDRESS _ FACTORY instead of DefaultInetAddressAdapter
added methods to check if a single value is null and a single element in the Series class to improve error handling and ensure proper handling of null values
updated audio time stretch option from " -- no - audio - time - stretch " to " -- audio - time - stretch " to ensure compatibility with
updated bounds checks in GeoRelationUtils , GeoUtils , and TestGeoPointQuery to use Math . max for latitude and longitude to improve accuracy in
updated the method call from ` getId ( ) ` to ` getDiskOfferingId ( ) ` in ` VirtualMachineManagerImpl . java ` to ensure
added a cleanup method to the Hazelcast test class to ensure proper cleanup and cleanup of Hazelcast tests
added exception handling for SSL cipher configurations in BlockCipherTest . java to ensure proper validation of cipher configurations
added a filter for printing operations logs in QFileClient . java to enable debugging of operations logs
added new classes ChildIntroduction , InjectParentInterface , and ParentInterface in BeanDefinitionInjectProcessor . java and InjectParentInterface . java to enhance
added null check for currentConnectionAddress before setting it to proxySocketAddress to prevent potential NullPointerExceptions when connection address is null
replaced the ` MathUtils . cappedAdd ` method with ` MathUtils . cappedAdd ` in ` WebSocketConnection . java ` to streamline the
replaced ` try - with ` try - with - resources ` in ` ImageIO . createImageOutputStream ` with ` try - with - resources ` to
replaced calls to ` TvApp . showSearch ` with ` SearchActivity . class ` in multiple classes to improve code clarity and maintainability by
replaced ` this ` with ` this ` in ` SchemaCrawlerCommandLine ` , ` GrepOptions ` , and ` GrepOptions ` classes to
added a new configuration class ` OsgiConfiguration ` and created a new ` OsgiConfiguration ` class to manage osgi configurations to enhance security by
added @ Autowired annotation to RepositoryIndexCreationIntegrationTests . java to enhance testing capabilities for repository creation
updated the ` stop ` method from ` Exception ` to ` InterruptedException ` in ` UIServer ` and ` TestVertxUIManual ` to
refactor case statements in BlockCactus . java for improved readability to enhance maintainability and maintainability of the code
refactor mouse handling in ThemeSelector to utilize MouseMotionAdapter for better event handling to improve user experience by allowing mouse mouse events
refactor AbstractMinMulticastFlowControl class to extend AbstractMinMulticastFlowControlRhsPadding to improve code readability and maintainability by central
added alignment parameters to IOSImplementation , IOSNative , and IOSNative classes to enhance user experience by providing a vertical alignment
updated the constructor signature of StatTokSentAnnotator to throw an IllegalArgumentException instead of Exception to improve error handling by throwing an IllegalArgumentException
added a condition to check if the group by expression is distinct and modified group column count logic in the QueryGenerator to ensure that distinct queries are only
changed access modifiers of ` stringSimiliarity ` , ` stringSimilarity ` , and ` JNIReflectionDictionary ` classes to public to allow
updated the loadProperties method from " org / apache / jmeter / gui / util / textarea . properties " to " org / apache /
added null check for children before iterating over children to avoid potential NullPointerExceptions when children are null
added tokenPosition and currentPosition fields to MessagePackParser and updated exception handling in MessagePackParserTest to improve token handling and ensure proper handling of
added Locale . getDefault ( ) and Locale . getDefault ( ) methods to AbstractSolrMorphlineTestBase . java to ensure proper handling of locale configurations
removed unnecessary check for DrawerActivity in LauncherFragment . java to simplify code and improve readability
added a new test class MetricsReporterTest for registering metrics to ensure metrics are correctly registering metrics
removed the private final Map < Class < ? > , Map < Class < ? > , Map < Class < ? , Object > > > to
added equals ( ) and hashCode ( ) methods to the Rectangle class to enhance equality and hashing functionality for rectangles
replace " sink " with " test _ nonExistentTopic " and " test _ nonExistentTopic " in StreamKafkaPTest
refactor DSAParameterGenerator to use BigInteger . ONE instead of BigInteger . ONE to improve code readability and maintainability by reducing redundancy
added LLAP _ DAEMON _ AM _ USE _ FQDN configuration and updated LlapUtil to use FQDN to enhance
[ hotfix ] [ test ] fix test failure in clientoutofmemoryhandlertest
added getCmoObjectId ( ) method to multiple shape classes to ensure proper object ID retrieval for shape IDs
added a new test method ` testWithDistinctScalarQuery ` to ` DistinctTest . java ` to verify the functionality of ` distinctScalarQuery
refactor Driver , SearchTravRetLoadFieldSelectorTask , and SearchTravTask classes to improve code organization and maintainability
removed the ` bind ` and ` unbindExtensionAdapter ` method from the ` ManagedKubernetesClient ` class to streamline the code by
updated the ` getSubtitle ( ) ` method to use ` Utils . getInfoRow ( baseItem ) ` instead of ` getOfficial
updated import statements in TestAuthHandlerBoot , TestRSAProviderTokenManager , and TestRSAProviderTokenManager to use ` @ BeforeEach ` and
updated the ` generateSummary ` method to handle IOException and TransformerException in ` BugCollectionBugReporter ` and ` XMLBugReporter ` to improve error
replaced direct calls to ` intPool . reset ( ) ` with ` bytePool . reset ( ) ` in ` TermsHash . java `
added multiple @ Override annotations in FilterInputStream . java to improve readability and maintainability of the code
added a new class ` WindowSessionDelegateU ` and modified ` ShadowWindowManagerGlobal ` to use ` TIRAMISU ` instead of
updated scheme checks in UrlHelper . java and added a new test for scheme host and port in UrlHelperTest . java to ensure proper handling of
added MSSQLDatabase import and modified condition checks in AddForeignKeyConstraintGenerator . java to ensure compatibility with MSSQL databases and improve code clarity
refactor replaceStoreFiles method calls in HStore , ReplicationSource , and ReplicationSource classes to improve code readability and maintainability
refactored colour handling in ContainerEmzuliPipe _ BC8 and PipeBehaviourEmzuli classes to use PipePluggable for
refactor debug mode handling in HtmlIdentifier to use a static variable for improved readability and maintainability to enhance code maintainability and maintainability by
updated method names from ` getProducedTableSchema ( ) . getFieldNames ( ) ` to ` getTableSchema ( ) . getFieldNames ( )
replaced checkNotNull with verifyApplicationThreadAndInitState ( ) in multiple classes to improve thread safety and maintainability of thread management
updated schema name handling in SequenceSnapshotGenerator to use CatalogAndSchema instead of CatalogAndSchema to improve clarity and consistency in schema name handling
updated color calculations in SpriteBatch , SpriteCache , and LwjglDebugStarter to use AlphaTest instead of ProgressiveJ
replace ` toCompletableFuture ( ) . join ( ) ` with ` getSentPromise ( ) . join ( ) ` in multiple Redis connection classes
added a check for the existence of the base core in SolrLoggerServiceImpl . java to ensure that the statistic year cores are only added when
refactor task launch methods in TaskActionController , TaskAdapter , and IconRecentsView classes to improve code readability and maintainability by central
refactor MorfologikFilter to use DictionaryHolder instead of Dictionary to improve code readability and maintainability by centralizing dictionary loading logic
updated sort options from " stars " to " community _ rating " and " community _ rating " in GridFragment . java to ensure consistency with the
added imports for ViewKt and ListRow in CustomListRowPresenter . java to ensure the view is visible when the header item is not
refactor client handling in StressAction . java to use try - finally blocks to improve code readability and ensure proper resource management
refactor HttpClient class to improve code readability to enhance maintainability and maintainability of HttpClient functionality
updated case sensitivity checks in CatalogAndSchema , CatalogAndSchema , and CatalogComparator classes to use DB2Database instead of case sensitive to improve code
added Java time module registration in StandardJavaScriptSerializer to ensure proper serialization and deserialization of JSR310 support for Jackson
updated import statements from org . apache . log4j . MDC to org . slf4j . MDC to ensure proper handling of slf4j
replaced TypeBearer with Type type conversion in PhiTypeResolver . java to simplify type handling and improve code clarity
replace ` CoinbaseTransactionStatusDeserializer ` with ` CoinbaseTransactionStatus ` in ` CoinbaseTransaction ` to improve code readability and maintainability
added a method ` getBuildTargetList ` to ` BuckConfig ` and modified ` ProjectCommand ` to use ` FluentIterable ` instead of `
added a gc method to the BusySpinIdleStrategy instance in Ping . java to ensure proper GC usage for idle strategies
updated OCFile and OCFile constructors to use ContentResolver instead of ContentProvider to improve code clarity and maintainability by using ContentResolver
refactor checkbox selection logic in ReportPanel . java to improve code readability and maintainability
added a null check for slotOwner in TestingLogicalSlot . java to ensure that the slotOwner is not null to prevent potential NullPointerExceptions
added a new file ` RemoveCallsToSystemGc . java ` to handle garbage collection invocations to ensure proper handling of garbage collection invocations
removed the super ( ) method calls from multiple exception classes to streamline the code and improve maintainability
added a method to set the UI ID in ScaleImageLabel to enable customization of the UI ID for better user experience
updated variable assignment for foundEntry and update in FeedUpdateService . java to improve code readability and maintainability
updated the condition for checking " - classpath " and " - cp " arguments in the Main . java file to ensure proper handling of classpath and cp
updated the link name from " options " to " compiler " in avutil . java to ensure compatibility with the latest compiler configuration
updated the initialized variable from true to true in StorageService . java to improve code readability and maintainability
refactor Test7196045 . java to improve code readability to enhance maintainability and maintainability of the code
updated density and decay values from 1 . 5f to 1 . 95f for density and decay in ShaderParametersLightShaft . java to improve
added ` withState ` and ` stateData ` fields to ` OidcConfiguration ` and ` OidcRedirectActionBuilder ` to support
added null checks for ` uqName ` and ` inlineUniqueWhenNullable ` in ` BaseTableDdl . java ` to improve robustness
added FileDataStorageManager to UsersAndGroupsSearchProvider and updated share type checks in EditShareFragment to improve user experience by ensuring shared files are
added a method ` needsDocValues ( ) ` to ` TestBBoxStrategy ` to ensure that the ` needsDocValues ( ) ` method
refactor BufferAlignmentAgent and StringWriterOutputManager classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a new specialise method ` intForEach ` in ` Int2ObjectHashMap ` , ` IntObjConsumer ` , and ` Specialisation
added a check for WorldServerMulti before accessing scoreboard data in WorldServer . java to ensure scoreboards are compatible with the temporary map
updated method signatures in QueryDslMongoRepository , QueryDslPredicateExecutor , and SimpleMongoRepository classes to improve code clarity and maintainability by
refactor log level checks in MManager . java to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
updated vectorutil . dotProduct ( a , b ) calculation in VectorUtil . java and updated test assertions in TestVectorUtil . java to improve
added IRREVERSIBLE _ THRESHOLD constant and a method to update the last confirmed block number in DynamicPropertiesStore and Manager classes to enhance
replaced the ` setLocale ( ) ` method with ` Systems . setLocale ( ) ` in multiple classes to streamline locale management and improve
added a boolean flag ` wasNewDbCreated ( ) ` to both ` LauncherClings ` and ` LauncherProvider ` to ensure
updated assertion messages in BasicAclEntryAfterInvocationCollectionFilteringProvider . java to improve clarity and consistency to enhance code readability and maintainability by
updated null checks for datamodel in Constants . java to improve code readability and maintainability
added a check for the current thread in TestIndexWriterDelete . java to ensure that the thread is not null before proceeding
changed the visibility of the closeDatabase method from private to protected to allow access to the closeDatabase method from other methods
updated import statements in FullDetailsActivity and BaseRowItem to use ModelCompat for consistency to improve code readability and maintainability
added a loop to set attributes for SVG elements in BatikSVGDrawer to ensure proper attribute retrieval for SVG elements
refactor error handling in ConsoleKeys . java to improve code readability and maintainability
added a check for " WaitForResult " in ` CodenameOneActivity ` and modified waitingForResult assignment logic in ` CodenameOneActivity `
replaced ` prePopulate ` with ` Supplier < T > ` in ` HitQueue ` , ` SpanPositionQueue ` , and ` SpanPositionQueue
refactor widget description loading logic in WidgetCell . java to improve code clarity and ensure proper display of widget descriptions
added a constant for maximum attribute count in Attribute . java to ensure that the appropriate attribute count is exceeded for better error handling
updated the package from com . hazelcast . query to com . hazelcast . query . impl . predicates and added imports for predicates to improve
added case - insensitive filtering functionality to DefaultHeaderFilterStrategy to enhance header filtering functionality for better handling of case - insensitive headers
refactor inline calculation logic in InlineLayout and Breaker classes to improve code readability and maintainability
updated ShareUserListAdapter to use a non - null check for mAvatarRadiusDimension and improved view handling to enhance code robustness and maintainability
removed unnecessary imports and added a check for Android SDK annotations in the Setup class to simplify code and improve readability by eliminating unnecessary dependencies
added a check for insert destination before source in BrowserContentPane . java to ensure proper handling of insert destination in the browser content pane
refactor memory limit handling in CmdModifierTest . java to use a dedicated method to improve code readability and maintainability by centralizing memory limit
updated ` AbstractCxxDeps ` to use ` EMPTY _ INSTANCE ` instead of ` singleton = true ` and modified ` CxxLibraryDescription `
added a null check for the rule in JavaTestRule . java to ensure that the rule is not among its dependencies to prevent potential NullPointerExceptions
refactor proxy handling in Botania to use a map instead of a single Minecraft version to improve code readability and maintainability by centralizing proxy
removed unnecessary check for atIndex before setting it to avoid potential null pointer exceptions when atIndex is negative
updated the timeout test to use 500 milliseconds instead of 100 milliseconds to improve test reliability by allowing more time for test failures
added a AssistContentRequester parameter to the TaskOverlayFactoryGo constructor and updated related constructors accordingly to enhance the functionality of the task overlay
updated the handling of witness address in VoteWitnessProcessor . java to use encode58Check instead of decode58Check to improve code readability and ensure
refactor DefaultMethodRegressionTests to improve code readability to enhance maintainability and maintainability of the code
refactor WorkloadManagerMxBean class to improve code organization to enhance maintainability and readability of the code
replaced ` KafkaProducerException ` with ` KafkaException ` in ` KafkaOutboundAdapterParserTests . java ` to improve clarity and maintainability of the
added a call to container . closeLoader ( ) in DesktopGeneratorController . java to ensure proper resource management and prevent potential memory leaks
added clear methods in ExceptionThrowingTaskletStub and corresponding test cases in FaultTolerantExceptionClassesTests to ensure proper handling of rollback
updated error message formatting in ConfigBuilder . java for consistency to improve readability and maintainability of the code
added ` Collections . emptyMap ( ) ` to multiple classes , ` TableConfigTunerUtils ` , and ` TableConfigTunerUtils
added handling for in - progress segments in PinotRealtimeSegmentsManager to ensure that only in - progress segments are processed correctly
added a check to return null if touchable is disabled to prevent potential NullPointerExceptions when touchable is disabled
added a new test method ` testBuildUsingPrecompiledHeaderInOtherCell ` to ` PrecompiledHeaderIntegrationTest ` to ensure proper handling of pre
added a null check for cacheConfig in AbstractCacheAllPartitionsRequest . java to prevent potential NullPointerExceptions when cacheConfig is null
refactor module handling in JSweetTranspiler and ProcessUtil classes to improve clarity and consistency to enhance code readability and maintainability by
added ManagedObject annotation to MBeanContainer , Destroyable , and Destroyable classes to enhance the functionality of MBeans in the application
added a false check for the inAppBrowser variable to avoid potential NullPointerExceptions when setting the inAppBrowser variable
updated equals method calls in EspMilightHubDiscoveryService , EspMilightHubHandler , and EspMilightHubHandler to improve
updated conditional checks in Types . java and added new classes T6558559a . java and T6558559b . java to
updated player print statements in WorldEditListener . java to use getBlockIn ( ) and getBlockIn ( ) instead of set ( ) to improve clarity
added a list of KafkaFetchRecords in KafkaConsumer . java to manage the shutdown of KafkaFetchRecords to improve thread safety and ensure proper shutdown of
removed the ` examples ( ) ` method from the ` Schema ` class to simplify the code and improve readability
replaced thread . interrupt ( ) with a boolean return statement in AgentRunner . java to improve readability and maintainability of the code
added removal of time column in DefaultAggregationLoader , PinotDataSourceDimensionFilters , and PinotDataSourceDimensionFilters to ensure proper cleanup of time column
updated condition in FacetComponent . java to check shards length instead of null to improve code readability and maintainability
replaced LinkerProvider instantiation with CxxPlatforms in RustBinaryDescription , RustLibraryDescription , and RustLibraryDescription to simplify dependency
added ` getName ( ) ` and ` getName ( ) ` methods to ` JdbcAuthenticationProperties ` , ` AbstractLdapProperties ` , and ` N
added debugging statements and improved error handling in CFGPrinterObserver and IdealGraphPrinterDumpHandler to enhance debugging capabilities and provide clearer error messages for
added a small scan threshold attribute for point lookups in BaseQueryPlan , QueryServicesOptions , and QueryCompilerTest classes to improve scan accuracy and
updated method names from ` filterToStringCreator ` to ` append ` for ` routeId ` in ` RetryGatewayFilterFactory . java ` to improve
replaced calls to ` redisplay ( ) ` with ` callWidget ( REDISPLAY ) ` in ` LineReaderImpl . java ` to improve code
removed the ` onOverviewShown ` method from ` ActivityControlHelper ` , ` WindowTransformSwipeHandler ` , and ` DiscoveryBounce ` classes
updated null checks for globalMinPackedValue and globalMaxPackedValue in CheckIndex . java and added a new test for deleteAllPointDocs in
updated the publish method from true to updateLastState in ZkController . java to enhance state management by allowing updates to the last state
updated string concatenation formatting in MetastoreDirectSqlUtils . java to improve readability and maintainability of the code
removed the call to ` exp . add ( 0 , null ) ` in ` SpliteratorCollisions . java ` to streamline the code by
added text handling methods in ` Condition ` and ` exactTextCaseSensitive ` classes to handle case - insensitive texts to ensure proper handling of text
removed redundant do statements in ManyToManyConcurrentArrayQueue . java to simplify the code and improve readability
added a method ` forwardOnlyFetchSize ( ) ` to ` OrmQueryEngine ` , ` OrmQueryRequest ` , and ` Default
added exception handling for ClosedChannelException in HttpServerMultiplexChannelHandler . java to ensure proper resource management and prevent potential memory leaks
pdfbox - 4072 : fix bug in pdpage . getpid ( )
added support for rounded corners on windows in QuickstepAppTransitionManagerImpl to enhance user experience by allowing rounded corners on windows
replaced ` ShapeDrawable ` with ` View ` in ` DesktopTaskView . java ` and updated layout parameters in ` DesktopTaskView . java `
refactor UpstreamCheckService initialization to use a new UpstreamCheckService instance to improve code readability and maintainability by centralizing the configuration
refactor logging statements in AbstractSession and AbstractSessionManager classes to improve clarity and consistency to enhance code readability and maintainability
replaced LOG . error with LockException in ZooKeeperHiveLockManager . java to streamline error handling and improve code clarity
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
added a boolean flag ` containsCustomData ` to ` FileTextureArrayData . java ` and modified Mipmap generation logic in ` FileTexture
updated assertions in DefaultMaskingFormatterTest to include ' ' and ' * * * * * * * * * * * * * * *
added ` selectable ` and ` isNothingSelected ( ) ` methods to ` List ` and ` List ` classes to enhance functionality for selecting
added a check for zero values in LlapArrowBatchRecordReader . java to ensure proper handling of zero values in field vectors
added a constructor to evaluate file separators in PolicyContext and implemented a test for file separator expansion in TestPolicyContext to ensure proper handling of file
replaced HashSet with List for flatQueries and expandQueries in FieldQuery . java to improve performance and maintainability of query management
refactor TLSRestrictions class for improved readability to enhance maintainability and maintainability of the code
added a Runnable to close the producer to ensure that the producer is closed only if the producer is not null to ensure proper resource management and prevent potential
added a TreeMap for ignorableNodeValues in the assertNodeStateProvider method to ensure proper handling of ignorable node values in the test
added a lock file in RocksdbMavenPomCache . java to ensure proper cleanup of the lock file
added InetSocketAddress to the standaloneServerFactory initialization in MiniZooKeeperCluster . java and updated assertions in TestHQuorumPeer . java to ensure
http : / / issues . apache . org / jira / browse / amq - 461 - add log for connection to webservice
updated the array representation of segmentTarURIs in IngestionUtils . java to use an array to improve code readability and maintain
updated loginStudent method calls to use TEST _ STUDENT1 _ PASSWORD instead of TEST _ STUDENT2 _ ACCOUNT
updated condition checks in EnhancedBrowseFragment , StdBrowseFragment , and StdBrowseFragment to improve code readability and maintainability
updated the number of strings from 500 to 100 in TestSpecialOperations . java to increase the flexibility of the number of strings in the test
replaced ` ByteArrayInStream ` with ` ByteArrayInStream ` and removed the ` hexToBytes ` method from the ` ByteArrayInStream ` class to
updated method name from ` messageWithHeaderEntry ` to ` messageWithHeaderKey ` in ` MockitoMessageMatchers . java ` to improve clarity
added a method to check direct substates in AbstractStateMachine and implemented a method to check if the transition is direct substates to improve state management by
added checks for ListMultimap and SetMultimap in MultimapSubject . java and corresponding test cases in MultimapTest . java to ensure proper handling of
added a JoinOperation interface to the PostJoinOperation class to enhance the functionality of the PostJoinOperation class
added a new test method ` testDataIssue258 ` to ` AdditionalPostgreSQLTest . java ` to verify the behavior of the
added a try - catch block for JMSException in the destroyDurableSubscriber method to ensure proper resource management and prevent resource leaks
refactor AvaticaDatabaseMetaData class to improve code organization to enhance maintainability and readability of the code
updated MongoDbConnectionProperties and MongoDbConnectionFactory to use ` @ DurationCapable ` instead of ` 60 _ 000 ` and ` @
updated the method call from ` null ` to ` SipActivator . getMediaService ( ) . getMediaService ( ) . createAudioMediaFormat
refactor filter handling in FacetProcessor to return a boolean instead of a boolean to improve code readability and maintainability by reducing redundancy
added a boolean variable ` TIMEOUT _ HANDLER ` and modified timeout handling in ` ShuffleHandler . java ` to enable timeout configuration based on
updated variable names from ` - 1 ` to ` QUICKSTEP _ ROTATION _ UNINITIALIZED ` in ` OrientationTouchTransformer
refactor logging statements in XPathBuilder , XPathBuilder , XQueryBuilder , XPathBuilder , XPathBuilder , XPathBuilder , XPathBuilder , and XQueryBuilder
updated the class path from " . . / data / " to " DataResource . class . getResourceAsStream ( ) " in NNDataSet .
added a new test class EdgeCasesTokenizerTest for handling escaped back slash characters in GoTokenizer to ensure correct handling of escaped back slash characters in
added a check for the ` atlas ` property in ` AtlasTmxMapLoader ` and updated texture handling logic in ` AtlasTmxMap
remove property placeholdershelper . resolvepropertyplaceholders ( ) from defaultcomponent .
added a call to closeDB ( ) in BlockchainTest . java to ensure proper resource management and prevent potential memory leaks
refactor line handling in CoreMarkdownNodeRenderer to use List for better readability and maintainability to improve code clarity and maintainability by centralizing
removed unused import statements in WebServiceInboundGatewayParserTests . java to streamline code and improve readability
refactor SQL bindings initialization to use List instead of ImmutableList to improve code clarity and maintainability by reducing redundancy
added a new property for java . vm . name in VirtualMachine . java to ensure proper handling of Java VM names in the application
added a keepAlive flag to the baseUrl setting in ReactorClient . java to ensure that the baseUrl is processed after the configuration changes
updated vertex attributes from " a _ position " to " NORMAL _ ATTRIBUTE " in MD5Renderer , ObjLoader , and Obj
camel - 14263 : camel - core - add support for properties component in camel - core
updated null check for accountCapsule in UnfreezeBalanceActuator . java to improve robustness by preventing potential NullPointerExceptions
updated the release status from 0 to Alpha in XMPPServer . java to ensure compatibility with the latest release status
replaced ` t ` with ` unannotatedType ( ) ` in ` Types . java ` to improve code readability and maintainability by
refactor test assertions in StorageGroupProcessorTest to improve code readability and maintainability to enhance maintainability and maintainability of test assertions
added a new ` Environment . getAll ( ) ` method to multiple configuration classes to enhance the handling of environments in the application
added a param . waitbeforestart = 2500 in FFMpegVideo . java to set the waitbeforestart parameter to ensure the
removed the ` _ skipCorrupt ` parameter from the ` OrcEncodedDataConsumer ` constructor and modified the ` OrcEncodedDataConsumer ` constructor
removed the ` AccessorsTest ` class and refactored the ` TestListIndex ` method in ` AccessorsTest . java `
added a new method ` compileMethod ` to ` GraalCompiler ` and updated its implementation in ` LIRGenerator ` and ` LIRGenerator
updated the ` DynamoDbTicketRegistryTests ` and ` BaseAuthenticationRequestRiskCalculatorTests ` to use ` RunningContinuousIntegrationCondition ` instead of
updated block water handling in ItemBoat . java to use BlockWater instead of BlockWater . java to ensure correct positioning of the water block
lucene - 132 : fix lucene - directory . getlockid ( ) and lucene - directory . getlockid ( )
removed the ` allowExperimentalOptions ( ) ` method from the ` Launcher ` class to simplify the code and improve readability
added a new ` then ` method to ` BDDAssertions ` and implemented ` AssertDelegateTarget ` methods in ` BDDAssertions `
updated IP handling in ForwardedRequestCustomizer to use hostField instead of hp to ensure proper handling of IPv6 addresses in the host field
updated log level from debug to warn for multiple Kubernetes config files to improve clarity and consistency in logging messages
added support for canceling OC files in FileUploadService and modified upload status handling in UploadListActivity to enhance user experience by allowing users to
added a new file ProviderLoader . java and updated TerminalManager . java to use ProviderLoaderListener instead of installIfNeededAsync to enhance security by ensuring
updated import statements in StreamEnvironmentPostProcessor and StreamEnvironmentPostProcessorTests to use TraceMessageHeaders instead of Span to improve code clarity and maintainability
updated the order of the SelectFromDatabaseChangeLogStatement to include a ColumnConfig parameter to ensure that the column name is computed based on the computed
hhh - 16258 fix schema update test ( # 163 )
updated import statements in InternalPartitionServiceImpl . java and InternalPartitionServiceLiteMemberTest . java and InternalPartitionServiceLiteMemberTest . java to
[ hotfix ] [ runtime ] add isschedulerstarted ( ) method to executionschedulemanager . startscheduledelay ( )
replace ` text . toString ( ) ` with ` text . toString ( ) ` in ` BoxBuilder . java ` to improve code readability and
updated assertion messages in StatisticMap . java to improve clarity to enhance readability and maintainability of the code
updated the getStagedRectSlideEnd method from 383 to 500 in TabletSplitToConfirmTimings . java to increase the threshold for
updated the button name from " Random " to " commandmode . name " in WaveInfoDialog and PlacementFragment to use Core . bundle for
added a condition to check if the plot area is not present in BukkitMain . java to ensure proper handling of plot areas when the plot area is
added a new test method ` setTouchExplorationEnabled _ invokesCallbacks ` in ` ShadowAccessibilityManagerTest ` and modified ` ShadowAccessibility
pdfbox - 5328 : use maxGlyphId instead of firstCode and add a new test class for PDFBox5328 to improve accuracy of
replaced ` getPropertyAsString ( ) ` with ` getName ( ) ` in multiple classes to improve code readability and maintainability
refactor NPOIFSFileSystem instantiation to use POIFSFileSystem . create ( ) instead of NPOIFSFileSystem to improve code clarity
refactor plot handling in Move . java to improve code readability and maintainability to enhance maintainability and prevent potential null pointer exceptions
updated the number of matches in TestWebHCatE2e . java to ensure proper handling of version matches in the test
updated the condition for the count check in the Filters class to ensure that the count is less than 1 to avoid potential NullPointerExceptions
refactor KafkaConsumerProcessor to use NameUtils for better readability and maintainability to improve code clarity and maintainability by using hyphenate for client
added a check for the boolean value of the IsolatedClassLoader in JavacCompiler . java to improve error handling by throwing an exception if the
updated the repaintNeeded flag in EuclidianView and DrawList to return a boolean instead of void to improve clarity and maintainability of
updated null check for headerValue in SpringBatchProducer . java to improve code readability and maintainability
added a method ` isAnimationFinished ( float stateTime ) ` to ` Animation . java ` to check if the animation is finished to enhance animation
added a new test method ` testCustomFavIcon _ With _ LineBreaks ` in ` LoginMockMvcTests . java ` to ensure
added null check for otherUrl before setting refreshingText to prevent potential NullPointerExceptions when otherUrl is null
updated the ` stopEditing ` method from ` newValue0 ` to ` newValue0 ` in ` RadioButtonTreeItem ` and ` stopEditing `
refactor ObjectHashSet class to improve code organization to enhance maintainability and readability of the code
refactor code to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a patch for removing enchanted books in GuiContainerCreative . java to ensure proper handling of enchanted books and prevent deletion of enc
added a new file ` AsyncResourceTest . java ` that tests the ` AsyncResourceTest ` class to test the functionality of ` AsyncResource `
updated the ` TARGET _ FLAT _ HEADER _ MAP _ SUFFIX ` and ` TARGET _ USER _ HEADER _ MAP _ SUFFIX
added logging for invalid and unset addresses in MailService . java to improve error handling and provide clearer feedback when sending messages
replaced ` resetTaskItemView ( ) ` with ` resetToEmptyUi ( ) ` in ` TaskItemView ` and ` TaskItemView
added unit tests for partition retrieval methods in TestHiveMetaStoreClientApiArgumentsChecker . java to ensure proper handling of partition names with different size
added a closing brace in FileListListAdapter . java to improve code readability and maintainability
replaced ArrayList with List for fileId and sharees in OCFile . java and OCFileListAdapter . java to improve code clarity and
updated view removal logic in BubbleBarView . java to use getChildAt ( getChildCount ( ) - 2 ) instead of getChildAt ( getChildCount ( ) -
replaced " org . eclipse . jetty . util . server . internal . " with " org . eclipse . jetty . websocket . util . server .
removed the default value of the expiresSeconds parameter from S3Request constructor to simplify the initialization process and improve code readability
added null check before initialize components in JFXRadioButtonSkin . java to avoid potential NullPointerExceptions when the timeline is not initialized
added a check for zero splits in DeweyNumber . java and updated exception handling in DeweyNumberTest . java to ensure that
added a static variable ` categorySetString ` and modified the return statement in ` MwVolleyApi . java ` to ensure proper handling of
updated assertion messages from " control status code 1111 " to " close code 1111 " in WebSocketClientTest . java to improve clarity and consistency
added a null check for classLoader before proceeding to prevent potential NullPointerExceptions when classLoader is null
refactor PersistentAttributeTransformer to use collectInheritPersistentFields instead of collectInheritPersistentFields to improve code readability and maintainability
pdfbox - 3292 : avoid npe when page labels do n ' t have a number
added a new file ` TestPorterStemFilter . java ` implementing a new ` TestPorterStemFilter . java ` with a test class
modified the ` postBatchMutate ` method to accept a ` success ` parameter and modified the ` postBatchMutateIndispensably ` method to
updated package names from ` exlore . support ` to ` explore . support ` across multiple files to improve clarity and consistency in package structure
added synchronization in ChatWindowManager . java to ensure thread safety to prevent thread leaks and improve code readability
replaced ` Sys . touch ( ) ` with ` Sys . touch ( ) ` in multiple Java files to streamline code and improve readability by
updated the list of tracked files from HG _ CMD _ TEMPLATE to HG _ CMD _ TEMPLATE in multiple commands to improve
camel - 14263 : camel - netty : add timer to netty endpoint
updated constructors in DirectionalLight , PointLight , and SpotLight classes to be final to enhance code readability and maintainability by using
updated width and height calculations in X11GraphicsConfig , WGLGraphicsConfig , and XGLGraphicsConfig to use Math . max instead of Math
added ` toString ( ) ` methods to ` DelegatingSecurityContextCallable ` , ` DelegatingSecurityContextRunnable ` , and ` DelegatingSecurity
added AnnoFilterTreeSet and AnnoFilterTreeSet classes to ensure proper handling of annotation classes in the class
updated error handling in BytesColumnVector . java to use Integer . MAX _ VALUE instead of Integer . MAX _ VALUE to improve error handling and ensure
updated assertions in WriteBehindMapStoreWithEvictionsTest to use assertTrueEventually to improve test reliability and ensure correctness of the
added @ Override annotations to uninstallListeners methods in MotifScrollPaneUI , XTextAreaPeer , and XTextAreaPeer classes to enhance
added a method ` isEqual ` to check if the degree and coefficients are equal in ` PolyFunction ` to enhance equality checks for polynomials
added a null check for the table before configureing the value to avoid potential NullPointerExceptions when the table is not initialized
added error handling for ClassCastException in CustomChangeWrapper . java to ensure proper handling of ClassCastExceptions
updated ` DistBuildConfig ` and ` RecordingFileHashLoader ` to use ` BuckConfig ` instead of ` ConfigPathGetter ` to
changed the default value of ` isDoubleEntryEnabled ` from ` defaultValue ` to ` false ` in ` GnuCashApplication ` and `
added JUnit Ignore annotation to BasicDistributedZkTest . java to temporarily disable the test until the test is fixed
changed the return type of ` doJoin ` from ` void ` to ` boolean ` in ` JoinTemplate ` , ` JoinWorker ` , and
removed the ` getAutodeps ( ) ` method from the ` JavaLibraryDescription ` class to simplify the code and improve readability
updated intent handling in LauncherTimelineCursorAdapter to include FLAG _ ACTIVITY _ NEW _ TASK and FLAG _ ACTIVITY _ NEW _ 
added a new method ` checkPagingOrderBy ( ) ` to ` SpiQuery . java ` to enable paging order by by default
updated url comparisons in RepositoryConventionPluginTests . java for consistency to improve code readability and maintainability
added a new file ` AffiliationTask . java ` with a new class ` NodeAffiliateTask . java ` that implements a
updated URI normalization logic in TagLibraryInfoImpl . java to handle URISyntaxException instead of RequestUtil to improve error handling and provide clearer error messages
changed the access modifier of the buildUserProfileByClassCompleteName method from private to public to allow access to the buildUserProfileByClassCompleteName method
refactor caching logic in CacheKey . java and CacheKeyTest . java to improve clarity and consistency to enhance code readability and maintainability by
refactor file type detection methods to use FileSystems . getDefault ( ) instead of FileSystems . getDefault ( ) to improve code clarity and maintainability
added a call to ` wsSession . close ( ) ` in ` TestWsWebSocketContainer . java ` to ensure proper resource management and prevent
replaced ` ShadowVirtualDeviceParams ` with ` VirtualSensorCallback ` in ` ShadowVirtualDeviceManagerTest ` and added ` VirtualSensorCallbackDelegate `
added a check for the context before execution in HttpSessionSecurityContextRepository and added a new test for context removal in HttpSessionSecurityContextRepositoryTests to ensure
refactor loopback handling in NetUtil . java to improve code readability and maintainability
refactor Zlib to use DEFAULT _ BUF _ SIZE instead of BUF _ SIZE for compression failures to improve code readability and maintainability
added secure validation and XPath error handling in KeyInfoReferenceResolver , TransformXPath , and TransformXPath classes to improve error handling and ensure proper handling of
added a boolean variable ` iconChangeListenerInstalled ` and modified the handling of icon changes in ` Label . java ` to ensure icon changes are handled correctly
added " ru " , " ru " , " ru " , " ru " , " ru " , " ru " , " ru " ,
hhh - 16258 fix the bug in basesqmtosqlastconverter # getduration ( )
added a call to disable state verification in SubstrateGraphKit . java to ensure state verification is disabled after state verification
added support for setting prior SDKs and resources mode in RobolectricTestRunnerTest and TestUtil classes to enhance testing capabilities and ensure proper property
added slf4j . LoggerFactory to ViewClassLoader and corresponding tests in ViewClassLoaderTest to ensure proper class loading of the parent class
updated handling of MavenResolutionResult in ChangePackaging . java and added a new test for changePackagingRemovingDefault method in Xml . java to
updated file download logic in FileDownloadViaHttpGetTest , FileDownloadViaProxyTest , and FileDownloadViaHttpGetTest to use the extension
added a call to nk _ buffer _ clear ( cmds ) in GLFWDemo . java to ensure proper handling of command execution
replaced ` setDefaultUnits ( ) ` with ` setPreferredUnits ( ) ` in multiple classes to improve code readability and maintainability by centralizing
updated date handling in DatePatternConverterTest to use SimpleDateFormat instead of String to improve clarity and accuracy of date conversion logic
updated the return statement in Terminator . java to improve code readability and maintainability
updated error messages in FileSystem , LocalFileSystem , LocalFileSystem , LocalFileSystem , LocalFileSystem , LocalFileSystem , and LocalFileSystem classes to improve clarity and
replaced Executors with TimerTask in JabRefFrame . java to simplify thread scheduling and improve code readability
updated FtpReconnectAttemptServerStoppedIT and FtpEmbeddedService to utilize Awaitility and Awaitility to improve connection management and ensure
updated the KeyedProperties class to use ConcurrentSkipListMap instead of ConcurrentHashMap to improve performance and maintainability of the code
added ` ignore ` method to ` JavaUtilLog ` , ` Logger ` , ` Logger ` , ` Logger ` , and ` StdErrLog
added a null check for runningTaskView in LauncherActivityControllerHelper to prevent potential NullPointerExceptions when runningTaskView is null
updated the type of ` getDamage ( ) ` from ` byte ` to ` getDamage ( ) ` in ` BukkitWorld . java ` to
removed the cleanImage method call in PanelManager . java to simplify the code by removing unnecessary code
added MMapDirectoryFactory and SimpleFSDirectoryFactory classes for managing unmap configuration to implement functionality for setting unmap configuration in the JVM
added null check for the cleanUpColor initialization in PdfCleanUpProcessor . java and updated test cases in PdfCleanUpProcessorTest . java to ensure
updated the test method call from " graphTerms " to " _ s " in QueryEqualityTest . java to improve clarity and consistency in the test
refactor ExtendedOperatingSystemMXBeanImpl . java to improve code readability to enhance maintainability and maintainability
added a method ` installLeftCommands ` to install left commands in ` SideMenuBar . java ` to enhance command management functionality for better user experience
added a boolean flag ` advanceWindowed ` to ` AppSettings ` , ` TweetActivity ` , and ` UserProfileActivity ` classes to
added support for SybaseDatabase in DropPrimaryKeyGenerator . java to ensure compatibility with Sybase database types
refactor Client class to improve code readability to enhance maintainability and maintainability of the code
added a method to notifyLeaderReady ( ) in SequencerAgent . java to ensure that the leader is notified when the leader is ready
changed invalidate ( ) method from invalidate ( ) to setCellLayoutPressedOrFocusedIcon ( ) in BubbleTextView and CellLayoutChildren classes to
added a return statement to the return statement in NearCachedClientMapProxy . java to improve code readability and maintainability
refactor package - info . java files for improved readability to enhance maintainability and maintainability of the code
added a method to shutdown the HTTP server in ListenHTTP . java to improve error handling for server shutdown
updated import statements in AWS2S3StreamUploadProducer and modified related imports in S3StreamUploadOperationIntegrationTest to improve code clarity and ensure
[ hotfix ] [ runtime ] remove unused parameter from webmonitor metrics handler
added a method to drop keys if exist in the Upgrade226to227 class to ensure proper handling of keys that don ' t exist
added a new file ` TestThriftCLIServiceSecurity . java ` and modified password handling in ` TOpenSessionReq . java ` to ensure proper
added a new variable ` maxEnergyLimit ` to retrieve the energy limit based on the constant call to ensure the maximum amount of energy used for constant
added a maxInMemorySize property and its getter / setter methods to HttpClientProperties and updated the webClientPlugin configuration to enhance the flexibility of the
refactor Cache class to improve code readability to enhance maintainability and maintainability of the code
added new files ` RunCucumberTest ` and ` StepDefinitions ` to the ` com . example ` package and ` com . example `
updated double handling in TypeJsonUtils to handle JsonParseException and added error handling in TestArrayOperators to improve error handling and ensure proper error handling
removed unused bytes from Utf8StringBuilderTest . java to clean up the code and improve readability
updated parameter handling in Params . java and added a method to check for parameter sets in RestInvocationHandlerTest . java to ensure proper handling of
added maximum number of output configured on loadBalancerType and created a new CircuitBreakerLoadBalancerInvalidTest class to ensure that all outputs are configured on the
updated assertions in TestIndexWriterExceptions . java to set maxBufferedDocs to 3 instead of 3 to improve accuracy of doc frequencies in
replaced ` String ` with ` Sha1HashCode ` in multiple files to improve code readability and maintainability by reducing redundancy
added methods to retrieve enum value and longValue in AsmRuntime . java to improve code readability and maintainability
added tags for MANGROVE _ SWAMP and DEEP _ DARK tags in ForgeBiomeTagsProvider . java to enhance biome
refactor AsyncImageLoader to use ExecutorService and refactor requestImagePool in PApplet . java to improve thread management and enhance thread management
changed access modifiers of ` _ tableConfig ` and ` _ helixManager ` from private to protected in ` BaseTableUpsertMetadataManager ` to
updated format data from " u0646 " to " u0623 " in FormatData _ ar _ JO and FormatData _ ar _
updated image comparison logic in AbstractSunSecureRule . java to use hasImageEqualTo instead of equals to improve clarity and maintainability of image comparison
added null check for repos before setting the jbang version to avoid potential NullPointerExceptions when repos is null
refactor score handling in CrawlDbReader to use Float . isNaN instead of NutchWritable for NaN values to improve clarity and maintainability of
added a cleanup method in OnStartupTriggeringPolicyTest . java to ensure proper cleanup of files and prevent potential memory leaks
replaced calls to ` requestFocus ( ) ` with ` requestFocusInWindow ( ) ` in ` FilterConditionEditor ` , ` FindAction ` , and
[ hotfix ] [ test ] make checkpointscleaner asynchronous
added a new file XPathWhiteSpaceTest . java that tests XPathWhiteSpaceTest . java to test XML schema creation to ensure proper handling of XML XML schema
added a condition to check if the trie is empty before persisting the trie log layer to ensure that the trie log layer does not exist before persist
refactor FilledNewArrayInstruction class for improved readability to enhance maintainability and readability of the code
updated test timeouts in SimpleNetworkTest . java to increase test timeouts to improve test reliability by reducing test timeouts
updated path comparison logic in OCFile . java to use endsWith instead of substring to ensure correct path comparison for better readability and maintainability
added a print statement to log the error message when loading the skin file to improve error handling by providing clearer feedback when loading the skin file
added markDirty ( ) and isValid ( ) methods in LgoGroupedLevel2BatchSubscription and LgoGroupedLevel2Update classes to
added a static final Result class for UNDEFINED in Result . java and changed return type from Result . Type . UNDEFINED to Result . UNDEFINED
replaced PersistenceException with NullPointerException in TestTransactionCallback . java to ensure proper handling of NullPointerExceptions
refactor UploadJobMultiPartOperation to implement IdentifiedDataSerializable and improve response handling to enhance code readability and maintainability by utilizing a
added IOException handling and improved error handling in MessageDatabase and JobSchedulerStoreImpl classes to enhance error handling and ensure proper resource management during recovery operations
added constructors for SummaryLevels and implemented ignoringChildNodes method in SummaryLevels and VerticalNodeViewLayoutStrategy to improve code
changed the visibility of the ` pos ` variable from ` volatile ` to ` sizeMask ` and modified the ` ensureAvail ` method to
added JUnit @ Ignore annotation to ChaosMonkeySafeLeaderTest , RecoveryZkTest , and RecoveryZkTest classes to temporarily disable
updated the handling of handler targets and endpoints in StorageProxy . java to improve code readability and maintainability
updated the parameter name from ` bufferedIo ` to ` advertiseUri ` in ` FileManager . java ` to improve clarity and consistency in naming convention
refactor TransformFunctionType and TransformFunctionFactory classes to improve clarity and consistency to enhance code readability and maintainability
added ` getSimpleName ( ) ` and ` getEnclosingElement ( ) ` methods to ` VariableElement ` and ` VariableElement ` classes to enhance element
updated multiple Java files to use " RFC5280 " instead of " RFC3280 " to ensure consistency across the codebase
updated version number from " 2 . 17 . 3 " to " 2 . 17 . 4 " in Recaf . java and SearchAnnotationVisitor .
replaced LruCache with SparseBooleanArray in ListActivity and NoteAdapter classes to improve performance and maintainability of the code
updated conditional checks in DirectUpdateHandler2 . java for consistency to improve code readability and maintainability
updated path handling in ConfigFileApplicationListener and added a new test for absolute resource defaults in ConfigFileApplicationListenerTests to ensure proper handling of resource
updated the ` mPositionHelper ` constructor to include ` mContext ` instead of ` deviceInsets ` in ` TaskViewSimulator ` and ` Task
removed the condition for creating a new leadership term in the Election class to improve code readability and maintainability by reducing redundancy
updated assertions in PMDCoverageTest to use StandardErrorStreamLog instead of output to stdout to improve clarity and accuracy of error reporting in XPath rules
added a new class ` Skip ` in ` ByteArrayInputStream ` and created a new ` Skip ` class ` Skip ` class in ` ByteArrayInputStream `
refactor conditional logic in UpdaterTask . java to improve code readability and maintainability
changed the access modifier of MAX _ HEADERS from final to public in HeadersMessage . java and modified block chain download logic in Peer . java to
added " rt . jar " to the STANDARD _ LIBRARIES list in ModClassLoader . java to include the " rt . jar "
refactor connection handling in AbstractHandshakeHandler to improve code readability and maintainability to enhance maintainability and maintainability of the code
replaced ` collectGranules ( ) ` with ` collectGranules ( ) ` in multiple classes to improve error handling and ensure
added a conditional check to check if the response is already committed before sending the error message to improve error handling by ensuring the response is already committed
updated condition checks in HttpSession . java to improve clarity and consistency to enhance code readability and maintainability
updated fadeOutFakeTaskView to fadeOutFakeTaskView and added hotseatIconView visibility handling in SwipeUpGestureTutorialController
added a check for non - null prefab data in PrefabFormat . java and updated logging statements in PrefabSerializer . java to improve logging
refactored the ` LdapMockMvcTests ` to use a new ` externalGroupSet ` instance to improve code readability and maintainability by
added a validation check for non - existent account transfer amounts in FreezeBalanceActuator and TransferActuator classes to ensure that the
updated the index calculation from ' / ' to ` File . separator ` in ` FileResolverTestBase . java ` to ensure proper handling of path separator
removed the ` ShowKeyboardButton ` parameter from the ` setKeyboardButton ` method and added a new ` setKeyboardButton ` method to simplify the
updated the string representation of the session description in GpsMainActivity and AnnotationViewFragment to use EventBus instead of ContextCompat to improve thread safety
added a check for the number of pages in JsoupNonVisualRegressionTest . java to ensure correct rendering of PDFs in the test
replaced ` AndroidBufferAllocator ` with ` AndroidNativeBufferAllocator ` and added a new ` AndroidNativeBufferAllocator ` class in ` AndroidBufferAllocator
added checks to ensure flagName starts with " ! " in multiple classes to ensure proper handling of flag names in the application
added a comment for noPMD in JDBCHistoryCache . java to improve code readability and maintainability
updated condition in BattlePassManager to check if itemUseOp is equal to " ITEM _ USE _ GRANT _ SELECT _ REWARD
refactor QueuePriorityTest to use a list of PriorityElement for better readability and maintainability to improve code clarity and maintainability by centralizing
refactor AffinityApiUnitTest to use AffinityGroupDao instead of AccountVO for consistency to improve code readability and maintainability
added a null check for the main command before printing help messages to prevent potential NullPointerExceptions when the command is null
updated light output stream size from 7 to 5 in PropertyTypes and ByteIterableBase , ByteIterableBase , ByteIterableBase , ByteIterableBase ,
changed the visibility of the Scanned class from static to public to allow access to the Scanned class from other classes
updated the ` showBlank ` flag and added a new ` T8032819 ` class and created a new ` T8032819
replaced Assert . hasLength ( p . sn ) with Assert . hasLength ( p . sn ) in Person . java to ensure proper handling of
added null check for the extension check in VirtualFile . java to prevent potential NullPointerExceptions when accessing file extensions
removed the return statement from ContactRightButtonMenu . java to improve code readability and maintainability
refactor conditional checks in SimpleSlot and SlotSharingGroupAssignment classes to improve clarity and consistency to enhance code readability and maintainability
updated screen calculation logic in InstallShortcutReceiver . java to simplify screen calculation to improve code readability and maintainability
replaced direct calls to ` bind ` with ` delegate ` in ` PlainSocketImpl . java ` to improve code clarity and ensure proper resource management
added removal of removed items in BookmarkListRootFragment and MediaDetailPagerFragment to enhance user experience by allowing removal of removed items
updated log message from " in - view center point " to " in - view center point " to improve clarity of log information for better debugging
added a new file ` bug4865918 . java ` with a test class ` bug4865918 . java ` to verify scrollbar
refactor VelocityEngine initialization to use Velocity instead of VelocityEngine to improve code clarity and ensure proper initialization of VelocityEngine
updated import statements and added grouptriggers handling in QuestCommand . java to improve code readability and maintainability by utilizing grouptriggers
updated GncXmlHandler and AccountsActivity to utilize a new startXmlFileChooser method to improve code clarity and maintainability by centralizing
added ` @ ToString ` annotation to ` PartitionChangeEvent ` , ` TbApplicationEvent ` , and ` PartitionChangeEvent ` , and ` Tb
updated the configuration URI from " io : openhabcloud " to " io : openhabcloud " to ensure compatibility with the new configuration URI
updated the method for setting viewport and JScrollPane in BrowserPanel . java to improve code readability and maintainability
refactor event handling in LwjglInput and TWL , ParticleEditor , and ParticleEditor classes to improve code clarity and
added a conditional check for indexMimeTypeParts in MoreIndexingFilter . java to ensure proper handling of MIME types in the indexing filter
added a regex pattern for author processing in JSDoc . java to improve code readability and maintainability by using a more descriptive pattern
updated MetricConstant . java to use ` create _ count _ dbs ` and ` delete _ count _ partitions ` instead of ` delete _ total
added support for DrillHiveMetaStoreClient in HiveDatabaseSchema and HiveSchemaFactory to enhance the handling of Hive database access errors
updated the oauth2LoginLinks method to include a MultiValueMap parameter and added error handling to improve error handling by providing a clear error message for
updated date formats in TCKChronology and TestUmmAlQuraChronology to include " Islamic Umm al - Q
added a condition to check for Firefox in WebAudioWrapper . java to ensure compatibility with Firefox
added a ` appendInterceptor ` method to ` GrpcServerBuilder ` and modified ` InterceptorConstants ` constructor in ` GrpcServerBuilder `
added a default charset attribute to the ` Parser . java ` and modified the ` TestCompatibility . java ` to use ` default charset = UTF8
replaced the ` kill ( ) ` method with ` allocateOutgoing ( ) ` in ` WriterRecordBatch ` , ` StreamingAggTemplate ` ,
updated the method call from allocationTimeout to timeout in ExecutionGraph . java to ensure proper handling of allocation timeouts
added a boolean flag ` hasFrom ` to ` Delete ` and updated related methods in ` DeleteDeParser ` and ` DeleteDeParser ` to
refactor status handling in SynchronizeFolderOperation to use MultiStatus instead of Success and improve error handling to enhance code readability and maintainability by
added a new method ` applicableListTests ` to ` RecipeSchedulerUtils . applicableListTests ` in ` RecipeScheduler . java ` to
updated log line formatting in LogAnalyser . java to improve clarity to enhance readability and maintainability of the code
added support for Google Application credentials in the IntegrationTest class to enhance testing capabilities for application credentials
fixed - redissonsearch . getscore ( ) should use maxexclusive ( ) instead of minexclusive
refactor CCLicenseStep to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a null check for the global ID before adding it to the ifcRoot to avoid potential NullPointerExceptions when the global ID is null
updated comparison logic in OptionalAssert to use objects . getComparisonStrategy ( ) instead of equals ( actual ) to improve accuracy of comparison comparison logic
refactor memory handling in multiple classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a new file ` TestArrayCopyToFromObject . java ` that tests array copying to the ` Object ` array to facilitate testing of array
updated escape statements in BuckPythonProgram . java for clarity to improve code readability and maintainability
updated condition checks in AjpAprProtocol , AjpNioProtocol , AjpNioProtocol , and Ajp
added a new method ` findFiles ` to ` CraftingHelper ` and updated its usage in ` CraftingHelper ` and ` CraftingHelper
added JUnit @ Ignore annotation to TestLlapSignerImpl . java to temporarily disable the test case for HIVE - 22621
added null check for the exception in TestInternalInputBuffer . java to prevent potential NullPointerExceptions when the exception is null
refactor autoloadCall method to include a lower name parameter to improve code readability and maintainability by centralizing autoloadLocks
removed unused imports and updated server version comparison logic in CustomPlaybackOverlayFragment and PlaybackController classes to streamline code and improve readability by
refactor JAAS configuration handling in multiple classes to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
updated the return value from ACCESS _ DENIED to ACCESS _ ABSTAIN in Jsr250Voter . java and added
removed unused import statements and updated import statements in MP4Parser . java to improve code readability and maintainability
added a constant for HS2 proxy user in ConnectionFactory . java to ensure proper handling of session parameters based on the context ' s username
added SnappyCodec to HdfsCompressionCodec and modified HdfsProducerTest to use SnappyCodec instead of BZip2 to improve
added a sleep delay in HttpClientTest . java to ensure thread safety during test execution
replaced setsBlank ( ) with Cell . CELL _ TYPE _ BLANK in XSSFCell , XSSFSheet , and XSSFSheet
updated glyph positioning logic in GlyphLayout . java and modified text formatting in BitmapFontTest . java to enhance font rendering accuracy and improve text formatting
updated the Fabric8IstioIT . java file to use a direct path instead of a direct path to improve code readability and maintain
updated playback statistics from ` ReportPlaybackStartAsync ` to ` getPlaybackManager ( ) ` in ` PlaybackController . java ` and ` Utils
replaced private accessProperties initialization with BufferedInputStream in SimpleAuthority . java to ensure proper resource management and prevent potential resource leaks
added null checks for records in PutFromLoadAllBackupOperation , RecordStore , and RecordStore classes to prevent potential NullPointerExceptions when records are
updated return values from LENGTH _ BIT to ERROR _ BIT in ResponseFlag . java to improve code readability and maintainability
added support for adding read policies in FixDefaultPolicies . java to improve code clarity and maintainability by using DSpaceObject instead of Collection
refactor CompositeFont handling in FontUtilities . java to use a SoftReference for cached components to improve memory management and prevent potential memory leaks
updated prefHeight assignment from 0 to 0 in Tree . java to ensure proper initialization of the prefHeight variable
updated DMNEvaluatorCompiler and DMNFEELHelper to handle UnknownVariableErrorEvent and added validation tests in ValidatorTest to improve error
removed unused import statements from multiple Java files to simplify code and improve readability by eliminating unnecessary dependencies
changed access modifier of ` finishRunningRecentsAnimation ` method from private to public to allow access to the ` MAIN _ EXECUTOR
added null checks for node IDs and improved error handling in ImportContainerImpl and ImporterGDF classes to ensure proper handling of null nodes and
refactor error handling in FnApiControlClient and BeFnStateGrpcClientCache classes to improve clarity and consistency to enhance code readability and
updated BinFiles . java to use sessionFactory . createSession ( ) instead of sessionFactory . createSession ( ) in TestMergeContent . java
refactor the calculation of the closest structure in Teams . java to improve code readability and maintainability
added a check for CONTENT _ LENGTH in RestTemplateCopyHeaderFilter to skip copy content length into a request to ensure proper handling of content length
refactor literal handling in Java2TypeScriptTranslator and SyntaxTests to improve clarity and consistency to enhance code readability and maintainability by centralizing
updated the ` getSincFilter ` method to use ` 1200 ` instead of ` 2 . 0 ` and ` mSpectrumPanel `
added a AtomicLong to manage all regions in Canary . java and modified the implementation of HRegionServerTask to accept a boolean parameter to enhance performance and
removed the import of NodeModule in CassandraConnectorFactory . java and added a new method in TestCassandraConnectorFactory . java to simplify
added a call to resetCursorPosition ( ) in KahaDBStore . java to ensure cursor position is reset during order operations
added resize of frame dimensions in CallDialog , OneToOneCallPanel , and OneToOneCallPanel to ensure frame dimensions are correctly resized
fix loss of state information during world gen .
refactor TestHTTPSamplersAgainstHttpMirrorServer to use static constants instead of int to improve code readability and maintainability by central
added null checks for KerberosPrincipalHostDAO in KerberosPrincipalDAO and updated related imports in KerberosPrincipalHostEntity to improve robustness
removed the parameter ` true ` from the ` AcidUtils . getTableSnapshot ` method call in ` StatsOptimizer . java ` to simplify the method
added exception handling for ` Throwable ` in ` AprEndpoint . java ` to improve error handling and provide clearer error messages for better debugging
updated the license key from " Service & Apis \ " to " Monetization setup \ " in AndroidGradleBuilder . java to ensure
replaced the method ` isInsideTranscodeFolder ` with ` getDisplayName ( ) ` in ` DLNAResource ` and ` VirtualFolder ` to
added constant SPRING _ BOOT _ ROOT and modified package name retrieval logic in KieBuilderImpl . java to improve code clarity and maintainability
added a conditional check for the Runtime version in CheckIndexTest . java to ensure compatibility with the latest features in the test
refactor assignTargetsForSplitScreen method to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor LeaderLatch class to improve code readability to enhance maintainability and maintainability of the code
added a new method ` getParamsFile ` to ` SolidityNodeHttpApiService ` and modified ` SolidityNodeHttpApiService
replaced ` ConfidenceType . BUILDING ` with ` ListenableFuture < Transaction > ` and added a new method ` getDepthFuture ` to
added a new method ` createMediaRecorder ( String path ) ` to ` CodenameOneImplementation ` , ` Location ` , and updated related methods
changed the platformName variable from " ios " to " ios " in JavaSEPort . java to ensure the correct platform name is used
refactor PageEditClient class to improve code organization to enhance maintainability and readability of the code
updated conditional checks for ` mozDash ` and ` webkitLineDash ` in ` Graphics2D . java ` to ensure correct handling of undefined
refactor CreateVisibleSignature class for improved readability to enhance maintainability and maintainability of the code
added error handling for outgoing frames in AbstractExtension . java to improve robustness by preventing potential NullPointerExceptions
refactor classloader retrieval logic in ContextHandler . java to useAccessController for improved security to enhance security by preventing unnecessary exception handling
added functionality to retrieve feed categories based on user IDs and parent IDs to ensure proper handling of feed categories based on user IDs
refactor title handling in ContributionManagerDialog to improve clarity and consistency to enhance code readability and maintainability by using a more descriptive
added a vwap field to the Ticker constructor and updated related methods accordingly to enhance ticker functionality by allowing customization of the vwap
added support for no widgets in SearchAndRecommendationsScrollController and updated widget layout logic in WidgetsFullSheet to enhance user experience by providing a
added new classes RenderGraphAPI and WorldRendererImpl to manage RenderGraphAPI functionality to enable rendering of RenderGraph APIs in the application
added a default color setting for the primary color in NCFirebaseMessagingService . java to ensure the default color is set for the primary color
refactor ShadowUsbManagerTest . java to improve test coverage to enhance code readability and maintainability
updated variable assignments in ` AbstractDifferenceRecommenderEvaluator ` , ` AverageAbsoluteDifferenceRecommenderEvaluator ` , and ` RMSRecommenderEvaluator `
added a call to ` this . selectedConfiguration . update ( ) ` in ` Rocket . java ` to ensure the configuration is properly updated
updated bounds calculation in AndroidGraphics to use Math . max ( 1 , 2 ) instead of Math . max ( 1 , 2 , 2 ) to
replaced HashMap with LinkedHashMap in multiple classes to improve code readability and maintainability
updated NativeClosureFactory to use ClosurePool instead of ClosureManager to improve closure management and ensure proper closure management
camel - 14263 : camel - spring - test - spring - test - spring - test - spring - test - spring - test - spring
added new files WebsocketIngressIntegratedBootstrap . java and WebsocketPluginTest . java and WebsocketPluginTest . java to test WebSocket
added a new test method ` testGetServiceByNameConfig ` in ` AbstractImportMetadataSourceService ` and ` DSpaceServiceManagerTest ` to ensure
added a method to check if authenticationEssentiallyEqual in AbstractCasWebflowEventResolver to improve code readability and maintainability by centralizing
added a check for ` Boolean ` in ` X86MethodGenerator . java ` to return false if ` true ` is set to false to prevent
refactor dynamic call handling in CodeGenerator . java to improve clarity and consistency to enhance code readability and maintainability by using a more descript
added a new interface ` Insecure ` and updated ` MessageBuffer ` to use it in ` MessageBuffer ` and ` MessageBuffer ` classes to
added HIVE configuration variables for various Hive configurations in HiveConf . java to enhance configuration options for better user experience
added HashSet for scopes , policies , and policies in ResourceSet . java and DefaultResourceSetService . java to ensure proper handling of null policies in
updated the ` decrefOnClose ` variable to be final and added a new ` IndexReader ` constructor to enhance the flexibility of the ` Multi
refactor multiple Java files related to SecureDirectoryStream , WindowsAsynchronousSocketChannelImpl , and WindowsAsynchronousSocketChannelImpl classes to improve code
refactor InputFieldTest to utilize a new setup and value method for Selenium to improve code readability and maintainability
renamed the ` getFirstTypeArgument ` method to ` final ` and updated the ` getFirstTypeArgument ` method to use ` final ` instead of `
updated method names from Set to KeySet and Values in Int2IntHashMap . java to improve clarity and consistency in naming conventions
added a duration variable and modified motion handling in FlipTransition . java to improve animation speed and maintainability of the motion handling process
removed the conditional check for subsAreValidForStreaming in DLNAResource . java to simplify the logic for setting subsAreValidFor
updated majorVersion and minorVersion from 8 to 9 and minorVersion from 8 to 9 and minorVersion to improve compatibility with newer Java versions
updated warning messages in StackLocator . java to use LowLevelLogUtil . log for multi - release jars to improve clarity and maintainability of
added Java15PostProcessor and Java16PostProcessor classes to the ParserConfiguration and Java16PostProcessor classes to enhance the flexibility of the parser configuration
updated background padding logic in ExpansionViewHelper . java to ensure correct padding for replies in the status view
added a callback check for empty versions in AbstractPartitionPrimaryReplicaAntiEntropyTask . java to ensure that only one namespace is allowed before V3
added metadata and setter methods to SeedUrl and SeedResource classes to enhance metadata management for seed URLs
added a null check for the declaration before creating a Pattern to avoid potential NullPointerExceptions when the declaration is null
refactor TestCoprocessorWhitelistMasterObserver to improve code readability to enhance maintainability and maintainability of the code
updated the ` AnnotationActionValidatorManager ` to use ` ActionConfig ` instead of ` proxy . getConfig ( ) . getName ( ) ` to ensure
updated assertions in ` IterableTest . java ` to use ` Arrays . < Object > ` instead of ` null ` to improve type safety and ensure
added stream and parallel stream methods in MapIterable , PrimitiveObjectMap , and PrimitiveObjectMap classes to enhance stream handling capabilities and ensure proper handling of
modified the return statement in DiagnosticCommandImpl . java to use a clone method to ensure proper initialization of the notifInfo object
updated key comparison logic in AppW . java to use commandConstants . getString ( key ) instead of string to improve code readability and maintainability
refactor AEADBlockCipher class to improve code readability to enhance maintainability and maintainability of the code
added a new method ` isVariableLocal ` to ` VariablesMap ` , ` VariablesMap ` , and ` WebVariablesMap ` to
added a null check for resourceName in PackageResourceTable . java and updated default settings in RobolectricTestRunner . java to ensure proper resource
added a conditional check for ulSize and ulPos in TrueTypeFont . java to ensure proper handling of table and underline metrics based on size
updated ` SignPlugin ` to accept a ` HttpMessageReader < ? > ` parameter and updated ` SignPlugin ` to include ` ServerCodecConfigurer
refactor Int2ObjectCache class to improve performance to enhance performance and maintainability of the code
added validation logic for MavenDeployer in StandardMavenAuthenticationProvider . java to ensure proper validation behavior for MavenDeployer instances
refactor AudioNode class to improve code readability to enhance maintainability and maintainability of AudioNode class
added SSL SSL context initialization and improved error handling in LinkyHandlerFactory and EnedisHttpApi to enhance security by allowing SSL encryption algorithms
updated HiveFunctionRegistry to use OracleSqlOperatorTable and OracleSqlOperatorTable for better clarity and consistency to improve code readability and maintainability by
updated object names in BrokerMBeanSupport and XARecoveryBrokerTest to use ` xid ` instead of ` xid ` to improve clarity
updated the ` getBuildTargetForAlias ` method to use ` possiblyFlavoredAlias ` instead of ` alias ` to improve clarity and accuracy of
added a check for ODataFeed and modified the result processing logic in Olingo2Consumer . java to improve handling of empty data feeds and
added EQUIVALENT _ VERSIONS map and modified return logic in MetaStoreSchemaInfo . java to ensure proper handling of equivalent versions in the
removed unnecessary whitespace in the advanceExpunge method calls in UserVmManagerImpl . java to improve code readability and maintainability
added @ Deprecated annotations to AbstractDateAssert . java to indicate that these methods are outdated and should not be used
replaced ` parseTitleAndContent ( ) ` with ` getNoteTitle ( Context context ) ` in ` ONDashClockExtension ` and ` 
updated GoogleAuthUserConfigTable to use nvarchar / int4 / int instead of Matchers for consistency to improve code readability and maintainability by
replaced ` commit ( ) ` with ` markFirstRunClingDismissed ( ) ` for consistency to improve code readability and maintainability by
added a new TestIdleListener to the StandardSession class and modified the session initialization to include a TestIdleListener interface to enhance testing capabilities for idle
updated the string representation of the testBigQueryTable to include TEST _ ID to ensure proper formatting of the testBigQueryTable for better debugging
added icon background resources to HotseatPredictionController , BubbleTextView , and BubbleTextView classes to enhance user experience by ensuring icon background is reset
changed the method name from ` getFlushAfterQuery ` to ` FlushAfterQuery ` in ` MondrianProperties . java ` to improve clarity
added a new file ` AbstractTestNativeSystemQueries . java ` to test native system queries to ensure proper functionality of query execution in the native system
updated feature retrieval logic in LIMEExplanation . java and added a new test for active features in LIMEColumnarTest . java to ensure accurate
added args parameter to AppleSimulatorController and updated test cases in InstallCommand to enhance command handling and improve test coverage for Apple targets
replaced direct calls to ` getArea ( ) . getAbsolutePosition ( ) ` with ` getArea ( ) . getAbsolutePosition ( ) `
added check for available pipeline states in ContainerBase and StandardContext classes to ensure proper handling of available pipeline states
added a call to setClipToOutline ( true ) in QsbWidgetHostView . java to enable background clipping for the QSB
added logging for flag conversion in progress and logging in SQLManager , BlockTypeListFlag , and BlockTypeListFlag classes to improve logging clarity and
added conditional imports for GL _ DEPTH _ TEST and glDepthFunc in FloatingTextRenderer . java to enable and disable gl depth function
change libffi _ libffi _ libffi _ libffi _ libffi _ libffi _ libffi _ libffi _ libffi _ lib
added propagationBehavior property to JdbcAggregationRepository to ensure proper propagation behavior for transaction templates
refactor the ` configureBaseLayer ` method to use ` L1Regularization ` and ` L2Regularization ` in ` LayerValidation `
refactor readWrite ( ) and writeWrite ( ) methods in AbstractChecker . java to handle exceptions and improve error handling to enhance robustness by
replaced static variable ` colorStack ` with ` this . colorStack ` in ` GlyphLayout . java ` to improve code readability and maintainability
changed the return type of the getMappedStatement method from false to true in Configuration . java to ensure proper handling of mapped statements in the configuration
updated the method call from ` getDepth ` to ` getDepth ` in BTCEPollingMarketDataService . java to ensure consistent handling of currency depth
updated assertions in ChannelStateTests . java for consistency to improve code readability and maintainability
removed the ` versionedHashes ` field from the ` EnginePayloadParameter ` class and updated its usage in ` AbstractEngineNewPayloadTest ` to
added a property to trigger price changes in MutableOfferView to ensure proper handling of price changes
refactor Student handling in StudentFeedbackSubmissionEditSaveAction . java to improve code readability and maintainability
removed unnecessary print statements in I18NPageController . java to improve code readability and maintainability
added a conditional check for result in HStore . java to ensure proper handling of debug output in the HStore class
refactor property handling in EntityBeanIntercept and SaveManyBeans classes to improve readability and maintainability to enhance code clarity and maintainability by
added a boolean variable ` _ alwaysSaveUri ` and a getter method for the ` _ alwaysSaveUri ` property in ` FormAuthenticator ` to
added methods to set layer types and layer paint in ShadowRenderNode . java to enhance rendering capabilities by allowing custom layer types and paint
updated import statements and added a method to show the popup menu in LWChoicePeer . java to improve user experience by ensuring the popup menu is
added null check for insert in StressProfile . java to avoid potential NullPointerExceptions when insert is null
replaced ` JavaConversions . asScalaIterable ` with ` collectionAsScalaIterable ` in multiple classes to improve code clarity and maintainability
added null check for requests before processing to avoid potential NullPointerExceptions when requests are null
added warning logging for properties file loading in DefaultEnvironment . java to ensure proper handling of file loading errors
replaced the use of ` try ` with ` try ` for ` try ` in ` ClientMain . java ` to improve code readability and maintain
added a check forMulticast ( ) and isUp ( ) in SetOutgoingIf . java to ensure proper handling of multicasts in the set outgoing
updated the initialization of sqlCommand to include a length parameter to ensure proper handling of command data in the database
added methods to setLatestConsumeTime and setLatestConsumeTimeForEnergy in UnDelegateResourceActuator , BandwidthProcessor , and EnergyProcessor
added a new method ` invalidSessionStrategy ` to set the ` invalidSessionStrategy ` parameter to enhance flexibility in setting the ` invalidSessionStrategy `
updated error message from " index " to " empty " in the error message to improve clarity of error messages for better clarity
added a new test class ` MapAssert _ containsKeys _ Test ` for testing the ` MapAssert ` class to ensure that the ` MapAssert
added a new DelegatorGenerator interface for JDBC4TemporaryPreparedStatementMethods in JdbcProxyGenerator . java to support JDBC4 temporary PreparedStatement methods
added a ` ensure ` method to ` ServerWebSocketContainer ` and modified the ` upgrade ` method in ` DirectUpgradeTest ` to ensure WebSocket components
replaced ImmutableMultimap with ImmutableListMultimap in CxxFlags . java to improve code clarity and maintainability by using a more descriptive ImmutableMultimap for
PDFGraphicsStreamEngine , CurveToReplicateInitialPoint , CurveToReplicateInitialPoint , and PageDrawer classes to improve code clarity
added an empty array to the MethodHook class and updated its initialization logic in Method . java to improve code readability and maintainability by eliminating unnecessary
added a grantAccess flag to the MockAuthenticationManager constructor to enable access control to the MockAuthenticationManager
updated method names from ` afterJob ` to ` JobExecution ` in multiple classes to improve clarity and consistency in method naming conventions
added a check for ` file . canWrite ( ) ` and ` file . canExecute ( ) ` in ` SharedLibraryLoader . java `
added ` hasTimeSeriesQueryLanguage ( ) ` method to ` TimeSeriesQuery ` , ` TimeSeriesQueryOrBuilder ` , and ` TimeSeries
updated method names from ` e ` to ` event ` in ` ResultCollector ` , ` SaveService ` , and ` SaveService ` to improve
added constants for battery , time , and profile names in BundleConstants . java and CustomUrlManager . java to enhance code readability and maintainability
updated the applyRule method signature from Hashtable to Map in SearchExpression . java to improve clarity and consistency in naming conventions
replaced ` movedGeoWidget ` with ` AbsoluteScreenLocateable ` and ` movedObject ` in ` EuclidianController . java
replaced ` false ` with ` true ` in ` JoglGraphics ` and ` ProjectiveTextureTest ` with ` true ` in ` Projective
refactor the setResourceToDelegate method to return a File object instead of void to improve code readability and maintainability by centralizing file management
camel - 14237 : camel - properties - component : allow to resolve property placeholders in camel - component
updated condition in ActionScheduler and TestActionScheduler to use the correct number of attempts in TestActionScheduler to improve accuracy of execution time based on the
updated dbg _ zip to use a temporary directory for the ums _ dbg . zip file to ensure proper location of the dbg zip
updated import statements in RenderingDebugConfig and NotificationOverlay to use RenderingDebugConfig instead of WorldRendererImpl to improve code clarity and maintainability
replaced the ` pipe . gate ` with ` pipe . resetGate ( ) ` in ` Pipe . java ` and added a method to reset gate
refactor TestSupplementary . java to use Locale . getDefault ( ) instead of Locale . getDefault ( ) to improve code clarity and ensure proper locale
updated the color from 0 . 8f to 0 . 4f in the Team constructor to ensure compatibility with the latest version of the team
replaced HashSet with Collection for activeMatchedStates and updated logging statements in SequenceMatcher . java to improve performance and maintainability of the code
updated the condition to check for null and isEmpty in SoftAsserts . java to improve robustness by avoiding potential NullPointerExceptions
added error logging for invalid JSON errors in StorageResources and StoragePluginRegistryImpl to improve error handling and improve error handling for invalid JSON types
updated import statements and removed unnecessary print statements in CallTreePrinter . java to streamline code and improve readability by eliminating unnecessary print statements
added null check for note in DetailFragment and updated related logic in DetailFragment to improve robustness by preventing potential NullPointerExceptions
added a new variable ` peakTasks ` and modified the calculation logic in ` AssetManager . java ` to improve code readability and maintainability by
[ hotfix ] [ test ] allow firefox driver to be enable by default
added constant names for scores and fetch interval in Injector . java to improve code readability and maintainability by utilizing custom score and fetch interval
updated import statements from ` org . apache . commons . collections . ListUtils ` to ` org . apache . commons . collections4 . map `
added a method ` isShareSchema ( ) ` to ` CoreContainer ` and implemented a test for sharing schema in ` TestCoreContainer ` to
updated byte size calculation from sizeInBytes ( ) to sizeInBytes ( true ) in multiple classes to ensure consistent size calculation for better readability
updated assertions in VersioningTest . java for consistency to improve code readability and maintainability
pg _ catalog . pg _ type = ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '
updated the return statement in ConsensusModuleAgent . java to return a boolean instead of a boolean to improve code readability and maintainability
removed the buildMediaType method from WebClientPlugin . java to simplify the code and improve readability
replaced ` termBytesReader . fillUsingLengthPrefix ` with ` fillSlice ` for consistency to improve code readability and maintainability
updated AcidUtils to check if compactedBase is compacted and added a new cleanup method in AcidUtils . java and TestCleaner .
pdfbox - 3292 : fix npe in ptableimpl
added new classes ` PojoProducersCustomized ` , ` RestProducersCutomized ` , and ` RestProducersCutomized
updated the cache configuration from " cache " to " CACHE _ SECTION _ NAME " in ArtifactCacheBuckConfig . java to ensure consistency in
removed the call to AesGcmSivProtoSerialization . register ( ) in AesGcmSivKeyManager . java to simplify
added a new item ` ` slabWood ` to the ` OreDictionary ` class to enhance the functionality of the ` woodenWood `
refactor multiple classes related to Session and Session classes to improve code organization and maintainability
replaced ` AbstractBuildRuleWithResolver ` with ` AbstractBuildRule ` in the ` GnuLinker ` class to simplify the class structure and
updated the version string from " 3 . 2 - SNAPSHOT " to " 3 . 2 " in JMeterVersion . java to ensure compatibility with
hhh - 16257 remove duplicate @ skipfordtableconstrainttest . testtablelogicalincludedtabletableconstrainttest . testtable
updated spriteBatch draw method from centerX to centerY in HelloWorld . java to ensure proper texture positioning for better performance
updated the loop logic in PlayerFunctions . java and modified the return statement in PlotId . java and WorldGuardListener . java to improve code clarity
added a new constant LUCENE _ 8 _ 5 _ 0 to the Version class to indicate that the version is outdated and should not be
updated print statements in SSLSocketImpl . java to improve clarity to enhance readability and maintainability of the code
added a new test method ` testCastToSignedInteger ` to ` SelectTest . java ` to verify the functionality of casting to signed integer
refactor dependency type handling in CoNLLUOutputter and SemanticGraphCoreAnnotations to use SemanticGraphCoreAnnotations . DependenciesType instead of String
replaced the ` createForMissingBuildFile ` method with a ` createForMissingBuildFile ` method in ` NoSuchBuildTargetException ` and ` Parse
updated the test method call from ` testFromMain ( ) ` to ` test ( ) ` in ` TestOutOfMemory . java ` to ensure
updated the initialization of ` configBlocks ` from ` Block . blocksList . length ` to ` 256 - 1 ` in ` Configuration . java `
refactor logging statements in BukkitMain . java to improve clarity and consistency to enhance readability and maintainability of the code
updated SQL change handling in AbstractSQLChange and added a test for escaping PostgresQuestionmarkOperators in AbstractSQLChangeTest to ensure proper handling
added ` ofAll ` and ` withAll ` methods to ` MutableBag ` , ` MutableBagFactoryImpl ` , and ` MutableBag `
updated the ` title ` variable and added a check for html escape codes in ` BuildNavAndPDFBody . java ` to ensure proper handling of
added a false parameter to the MqttBrokerConnection constructor in NhcMqttConnection2 . java to ensure proper configuration of the broker connection
added null check for the DatabaseChangeLog instance before retrieving the ChangeSet to prevent potential NullPointerExceptions when the change log is not initialized
updated method invocations in StaticMethodInterceptor , RocketMQGlobalPluginHandler , and PrometheusPluginBootService to improve code readability and
added HiveMetaStoreClient to drop databases in TestHiveMetaStorePartitionSpecs and TestObjectStore classes to ensure databases are properly
added " order _ currency " parameter to the BithumbAuthenticated and BithumbAccountServiceRaw classes to support order - currency configuration in the application
deleted the ` SSEFluxWebConfig . java ` file to remove unused ` ThymeleafProperties . java ` file to streamline
updated method names from ` getReturnType ( ) . getFullyQualifiedName ( ) ` to ` getReturns ( ) . isVoid ( ) ` in
replaced the Yaml _ READER with a GET method for retrieving YAML configurations to improve code readability and maintainability by using a more descript
changed access modifiers of equals and hashCode methods from public to public in Marker . java to improve code readability and maintainability
refactor thread creation to use a new method ` awaitTermination ` instead of ` TimeUnit . SECONDS ` to improve code readability and maintainability by
added a new test class ` PersonWithSimpleConverter ` and ` PersonWithMappingConverter ` to ` MongoTemplateTests ` and created a new `
refactor syncAppletPanelSize and AppW classes to include new dimensions and adjust size calculations to improve code readability and maintainability by using
updated toolbar visibility logic in DrawerActivity . java to improve user experience by providing more informative feedback during toolbar visibility
refactor first page reader initialization to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a boolean flag ` savePasswordResult ` and updated password saving logic in ` VirtualRouterElement . java ` to improve password saving accuracy and ensure
added default values for usingOutputStream and usingWriter , usingWriter , and isCharacterEncodingSet in Response . java to ensure proper handling of character encoding
added a conditional check for assignment side effects in GroupDialog . java to ensure proper handling of assignment side effects in the group
refactor JSON and JSONObjectConvertor classes to improve code organization to enhance maintainability and readability of the codebase
updated the conditional check for icon width in FileUploadApiController . java to improve code readability and maintainability
refactor method signatures in RegisteredServiceProperty and JwtTokenCipherSigningPublicKeyEndpoint to use JcaPEMWriter instead of EncodingUtils to improve
added a new method ` checkContentTypes ` in ` Basic . java ` to check mimetypes based on Windows to ensure proper handling of MIME files
replaced System . out . println with JZlibDecoder and Z _ BEST _ COMPRESSION in NettyConnection . java to improve
added a method ` doesClassLoaderDescendFrom ` to ` Util ` and removed the ` doesClassLoaderDescendFrom ` method in ` MethodHandles
removed the ` doConnect ` method from ` ChannelProvider ` , ` ProxyChannelProvider ` , and ` ProxyChannelProvider ` classes to simplify the
added a new test method ` testEmptyFinalColumn ` in ` TextReader . java ` and a corresponding test in ` TestCsvHeader . java
added compass gravity and margin padding to the NearbyMapFragment to enhance the functionality of compass oriented maps
added a new test method ` testInterpolation ` in ` GeoPathTest . java ` to verify the functionality of the interpolation function in ` GeoPath
added exception handling for HiveException in LeafFilterFactory , ParquetFilterPredicateConverter , and related classes to improve error handling and ensure proper exception handling
added conditional logic to set the language for the current audio track in LibMediaInfoParser . java to ensure the current audio track is set based on
[ hotfix ] [ runtime ] add warning log to microserviceregistertask
replaced System . arraycopy with addAll method in multiple classes to improve code readability and maintainability by eliminating unnecessary arraycopy calls
refactor resource closing logic in DataSourceProxy . java to improve code readability and maintainability
added constructors for ClientRegistration in InMemoryClientRegistrationRepository , InMemoryReactiveClientRegistrationRepository , InMemoryReactiveClientRegistrationRepository , and InMemoryRe
added a method to reset UI state in SchemaUpgradeHelper to ensure UI state resets the UI state
added a ` failedStep ` flag and modified condition checks in ` JUnitReporter ` and corresponding test cases in ` JUnitReporterTest ` to
added a new file ` PlayerSelector . java ` to handle player selectors in the ` PlayerSelector ` class to enhance the functionality of player selectors for
added Closeable interface to the Selector class to implement Closeable interface to ensure proper resource management and prevent potential memory leaks
updated MaxConcurrentStreamsTest to use MultiplexConnectionPool for parallelism and iterations to improve connection management and ensure proper connection management
added multiple calls to ` stringType ( ) ` in ` CoreOptions . java ` to improve code readability and maintainability
updated HqlQueryRenderer and UserRepositoryFinderTests to handle null character and parameter parameters correctly to improve robustness by ensuring proper handling of null characters
updated status checks in multiple classes to use HttpStatus . NOT _ SET _ 000 instead of the process method to improve code clarity and maintainability by
http : / / github . com / codenameone / codenameone / codenameone / codenameone / codenameone / code
updated jdbc configurations to use ` StubConnection ` instead of ` jdbc : h2 : mem : " to ensure proper handling of ` StubConnection
drill - 132 : fix parquet format plugin to work with parquet table metadata .
updated the ` isSuccess ` variable to true and added error handling in ` Jsr199Javac . java ` to improve clarity and
updated the initialization of ` baseRenderer ` and ` baseModelListener ` to ` baseModelListener ` and added a new ` TableModelListener `
updated the condition in ServerConfig . java to include a maximum number of 65535 to ensure proper handling of integer values in the server configuration
added handling for document root URIs in AuthenticatorActivity , AccountRemovalJob , and DocumentsStorageProvider classes to ensure correct handling of root URIs
removed the startLogging method call in MainApp . java to streamline the logging process by eliminating unnecessary logging
added ThrowableAnalyzer to handle request rejected exceptions in FilterChainProxy and modified exception handling in FilterChainProxyTests to improve error handling and ensure proper handling
updated the method call from ` length ` to ` this . length ` in ` StringBuilder . java ` to improve code readability and maintainability by
added a check for empty filterList before throwing an IllegalArgumentException in the Filter class to ensure that the filterList is not empty before proceeding with
added a new file ` TbStopWatch . java ` to implement a StopWatch class to enable monitoring of TB stop times in the application
modified the initialization of the initialized variable in PListStore . java to ensure proper initialization of the initialized state
refactor Continuation and ContinuationFilter classes to use deprecated methods instead of Servlet classes to improve code clarity and maintainability by reducing redundancy
added a method to set the context classloader in RemoteInterpreterServer . java to ensure that the context classloader is correctly set to the context classloader
updated the condition to check for ServerPlayer in CommandSourceStack to ensure proper handling of ServerPlayer objects
updated VERSION _ CODES . P from VERSION _ CODES . P to VERSION _ CODES . O _ MR1 in ShadowRtt
updated the ` timerIdForSlot ` method to use ` indexArrayIndex ` instead of ` indexInTickArray ` to improve clarity and consistency
add ` getSimpleName ( ) ` method to ` BeanDescriptor ` , ` BeanDescriptorElement ` , ` BeanDescriptor ` , and ` BeanDescriptor `
updated URLs from " wro / all . js " to " static / all . css " and added a new WroSassProvider
added a new test method ` showLatestTimeseriesTest ` to ` IoTDBMetadataFetchIT ` to verify the functionality of the latest time
updated ` CONFIG _ LOCATION _ PARAM ` to ` contextConfigLocation ` instead of ` appContextLocation ` and ` appContextLocation ` to
added handling for CertPathValidatorException in OCSPChecker . java to ensure proper handling of CertPathValidatorException instances
added writeOutputSolutionEnabled property to ProblemBenchmarksConfig and related classes to enable write output solution configuration based on configuration
[ java ] set maxinboundmessagesize to integer . maxinboundmessagesize ( int . MAX _ VALUE )
added a new file ` Issue _ 815 . java ` with a test class ` Issue _ 815 . java ` that implements a test with
added a new shapeless recipe in BuildCraftTransport . java to enhance the handling of slime ball items
added conditional checks for elements in SequentialAccessSparseVector and implemented a new test for iterators in AbstractVectorTest to ensure proper handling of iterator
added metadata handling for owner plots in BukkitMain , EntitySpawnListener , and EntitySpawnListener classes to ensure proper metadata handling for owner plots
added a method ` getDebugLogger ( ) ` to ` DIHWriter ` and updated its implementation in ` SolrWriter ` to enhance debug logging
updated import statements in IOHelper . java and added a check for maximum file name length in MultiKahaDBPersistenceAdapter . java to improve
added a check for ` seenTag ` in ` UpToTagChangeSetFilter ` and updated the ` UpToTagChangeSetFilter ` class to handle
changed the type of ` apply ` from ` T ` to ` T2 ` in multiple classes to improve type safety and maintainability of the code
refactor BrokerRoutingManager class to improve code organization to enhance maintainability and readability of the code
updated color settings for volume and up paint in CandlestickRenderer . java to improve code clarity and maintainability by using a more descriptive
updated layout parameters in InsettableFrameLayout to use LayoutParams instead of FrameLayout . LayoutParams to improve layout flexibility and maintainability of layout parameters
added ` duration ( ) ` parameter to ` BuildTargetDurationListener ` and updated test cases in ` BuildTargetDurationListenerTest ` to enhance duration
replaced ` @ Profile ` with ` static ` static ` static ` static ` static ` static ` in multiple test classes to improve code clarity and ensure
added null check for user before iterating over claims to avoid potential NullPointerExceptions when user is null
camel - 14263 : camel - camel - camel - camel - camel - camel - camel - camel - camel - camel - camel - add
updated ConcurrentSkipListSet and NonBlockingHashSet to use NonBlockingHashSet instead of ConcurrentSkipListSet to improve performance by avoiding ConcurrentSkipListSet and NonBlockingHashSet
[ hotfix ] [ api ] add network _ id parameter to listpublicipaddressescmd . listpublicipaddresses by source network ID
added tests for ignoring battery optimizations in ShadowPowerManagerTest and ShadowPowerManager to ensure proper handling of battery optimizations in the ShadowPowerManager
updated jetty version from " 9 . 4 . z - SNAPSHOT " to " 9 . 4 . z - SNAPSHOT " in Jetty .
added unit tests for verifying wrong invocations in the NumberOfInvocationsInOrderVerifierTest class to ensure correct validation of invocations in order
added conditional handling for no match instances in TRegexExecNode . java to ensure proper evaluation handling for no match instances
added " - foreground " parameter to the startProfile method call in NewProfileExtensionConnection . java to allow users to specify the profile ' s foreground
replaced the use of ` executor ` with ` executorLauncher ` in ` MiniSolrCloudCluster . java ` to improve code readability and maintainability
updated the ` parseFieldnames ` to return a ` String [ ] ` array instead of a Map < String , String > ` to improve code
updated logging level from ' getFile ( ) ' to ' getName ( ) ' in CodeEditorView . java and EditorTextActionWindow . java to
updated skippedEntries to include an error message and updated warning messages in ClassFileReader . java and JdepsTask . java to improve error handling and
updated Fetcher and FetcherMain classes to use LuceneStorage instead of LogStorage to improve link handling and ensure proper resource management during fetching
updated the ` populateBubble ` method to include a null check for ` existingBubble ` and modified the ` populateBubble ` method to improve robustness
updated logging statements to throw an IllegalArgumentException instead of an exception to improve error handling and provide clearer error messages for scheduled routes
refactor buildRpcExt methods to use ` buildRpcExtJson ` instead of ` buildRpcExt ` to improve code readability and maintainability
added a new constant ` OptimalMulticastDelayGenerator ` and updated import statements in ` Receiver . java ` and ` Receiver . java
added json serialization for client ID and secret in ClientInformationResponseView . java to ensure proper serialization and deserialization of client information
updated limitOrders and averagePrice methods in HuobiAdapters . java to check if the amount is greater than zero to ensure that the
removed the ` rawExecutionReports ` method from the ` BinanceStreamingMarketDataService ` class to simplify the code and improve readability by eliminating
added a ` fail ( Exception ) ` method to ` LdapTimeoutTest . java ` to improve error handling by providing a clearer error message for
refactor user dictionary retrieval logic in JPhonemiser , JPhonemiser , JPhonemiser , and JPhonemiser classes to
updated password retrieval logic in AmbariServerConfigurationHandler and updated related tests in RootServiceComponentConfigurationResourceProviderTest to ensure proper handling of password
added a method to check if the segment is already parsed in ParseSegment . java and modified the parsing logic in SegmentChecker . java to improve debugging
[ hotfix ] [ yarn ] [ yarn ] add a default value for application attempt failures validity interval
added exception handling for H2 driver loading in GeoserverInitStartupListener . java to improve error handling for H2 driver loading
hbase - 14364 add config for scanner . readtype in table snapshot inputformat ( # 143 )
added fixed height and fixed width parameters to LoginInstanceRequest to enhance user experience by allowing customization of fixed fields
added ` cornerRadius ` parameter to multiple methods in ` ActivityControlHelper ` , ` WindowTransformSwipeHandler ` , and ` LauncherLayoutListener
updated the ` COMMANDS _ TO _ REMOVE ` array and added a filter for ` SHOW ` and ` DATABASES ` to
added a static variable ` doRetryOnConnPool ` and updated connection handling logic in ` TxnHandler . java ` to improve error handling and
refactor txnEnsureReserve method to txnCheckReserve and txnEnsureBackupReserve to include a pollOperation parameter to
added a new variable ` strings ` to the ` FirstOfStringsMatcher ` class to provide access to the ` strings ` array in the ` First
updated ` DELETE ROWS ` and ` DELETE ROWS CLIENT SELECT ` statements to use ` DELETE ROWS ` and ` DELETE 
added exception checking and retryable checks in BaseServiceException and BaseServiceExceptionTest to ensure proper error handling and ensure proper error reporting
added ` rapidInstallTypes ` parameter and updated related classes to include ` rapidInstallTypes ` and ` rapidInstallTypes ` to enhance functionality by allowing
updated the seed pattern from " - srand " to " - ? \ d + " in the SeedPattern to ensure proper handling of seed
updated MultimapSubject to use ` valuesForKeyFactory ` instead of ` MultimapSubject ` in ` MultimapSubject . java ` to improve
updated the return value from " hotseat " to " real display size - 1 " to ensure correct display size based on device orientation
added a transmux flag to the Transformer class and updated related constructors to include a boolean parameter to enhance transcoding capabilities for better handling of trans
added localization for strings in Picker . java to ensure proper handling of local values in the UI
added a null check for the exception in DefaultCxfRsBinding . java and updated exception handling in CxfRsConsumerTest . java
hhh - 550 : do n ' t use lock lock in db db ( # 550 )
added null check for queryId in TestJdbcDriver2 . java and modified imports in HiveStatement . java and HiveStatement . java to improve
[ beam - 16464 ] fix bug in pardotest
updated text formatting in GpsSimpleViewFragment . java for improved readability to enhance readability and maintainability of the code
removed the ` leadershipTermId ` parameter from the ` joinLogAsFollower ` method parameters to simplify the method signature and improve readability by
changed the access modifier of the exchange variable from ` getHttpExchange ( ) ` to ` this . exchange ` in ` HttpSender . java `
[ hotfix ] [ test ] move checkpointcheckpointcoordinatortest to junit 5
updated ` token ` and ` apiToken ` methods in ` AppOpticsPropertiesConfigAdapter ` and ` AppOpticsPropertiesConfigAdapter ` to
added null check for the tree before processing marker entries to avoid potential NullPointerExceptions when the tree is null
refactor font size handling in multiple classes to use Double instead of float to improve performance and maintainability of font size handling
updated the method call from ` maybeWrap ( email ) ` to ` emails ` in ` AddressBookDoCoMoResultParser . java ` to
added null check for exclusions in RawMavenResolver . java to prevent potential NullPointerExceptions when fetching exclusions
added null checks for dsxExchangeInfo and adjusted currency handling in DSXAdapters and DSXBaseService classes to improve robustness by preventing
refactor TestBlockingIO , TestResolvingTable , TestResolvingTable , and TestValidatingIO classes to improve code organization and
[ drools - 90 ] do n ' t check for releaseid if KieModule POM is invalid
updated the constructor of NativeArray from 0 to finale - k and added a conditional check for has ( k ) to ensure proper handling of property
refactor JacksonDataFormat and JacksonXMLDataFormat classes to improve code organization and maintainability
refactor method calls in HostFieldDesc . java to use CompilerAsserts instead of MethodHandles . publicLookup to improve code readability and maintain
added a method parameter annotation for CompletableFuture in DefaultNullnessAnnotations . java to enable completion of CompletableFutures in the database
updated the calculation of mFreezeCheckPoint from 9000 to 10000 in PlaybackController . java to ensure proper handling of freeze points based on the
added Whitebox imports and modified internal state management in AbstractCommonPowerMockRunner and PowerMockRunner to improve code readability and maintainability by using
updated the unmarshalIn method call to use realType ( ) instead of typeCode to ensure compatibility with realType ( )
refactor indentation handling in TabsAndIndentsVisitor to improve clarity and consistency to enhance code readability and maintainability
removed the LuceneTestCase import from TestSingleTokenTokenFilter . java to simplify the class structure and improve code readability
updated the class name from ` newColumn ` to ` wrappedText ` in ` HtmlProcessInformationsReport . java ` to improve clarity and maintain
added null check for the latest parameter in JdbcStepExecutionDao , MapStepExecutionDao , and MapStepExecutionDao to prevent potential NullPointerExceptions
added a conditional check to hide new media folder if the configuration isHideNewMediaFolder ( ) to ensure that new media folder is only added when
added null checks for first and second widget in SplitPane . java to ensure proper handling of null actors in the split pane
added handling for JavaType . Parameterized in RemoveUnusedImports . java to ensure correct handling of parameterized types in the package
added null and empty check for modInfos in UniqueModListBuilder . java to prevent potential NullPointerExceptions when modInfos are null
changed the visibility of the logger instance from class to static for TicketGrantingTicketImpl to allow dynamic logging of TicketGrantingTicketImpl
updated the SQL string for time series creation in PhysicalPlanTest . java to ensure correct time series creation for better performance
added a method ` isValue ( String value ) ` to ` AttrData ` , ` Converter ` , and updated exception handling in ` LayoutInflaterTest
added conditional checks for locale and modifier keys in CPlatformResponder and LWCToolkit classes to ensure proper handling of locale and modifier keys in the
added a new MediaDriverTestWatcher to the SpySimulatedConnectionTest class and updated its usage in CTestMediaDriver to enhance the
added a condition to check if the request URI starts with " / css " , " / images " , and " / favicon " to ensure
added a Assert statement to verify that the device is rooted to ensure that the device is not rooted when the device is rooted
removed the OracleAsiSqlRowsLimiter class and removed the OracleAnsiSqlRowsLimiter class to streamline the codebase by eliminating
updated assertions in TestSimpleBodyHandler and TestVertxTLSBuilder to use ` MultiMap ` instead of ` 1 ` to ensure proper handling of
updated path formatting in DiffRuleKeysScriptIntegrationTest . java for consistency to improve code readability and maintainability
added a boolean variable ` mIsDismissHapticRunning ` and modified conditional logic in ` TaskViewTouchController . java ` to ensure that
refactor cause handling in MixinEventWorldExplosion . java to use ProjectileSource instead of Cause . of to improve code
removed unused imports and modified the getItemId method in SymbolInputAdapter . java to streamline code and improve maintainability
updated the path for limit _ bids and limit _ asks in Bitfinex . java and BitfinexPollingMarketDataService . java to enhance flexibility
added a conditional check to replace ' ' with ' ' ' in StaxConverterTest . java to ensure that the result is properly replaced with a
added ` toString ( ) ` method to ` KubernetesLeaderElectionDriver ` , ` ZooKeeperLeaderElectionDriver ` , and
refactor SqlSessionFactoryBean class to improve code organization to enhance maintainability and readability of the code
add null check for generic call in TripleInvoker . java to improve robustness by preventing potential NullPointerExceptions
updated error handling in PolygonRegionLoader to throw a GdxRuntimeException instead of Gdx . app . error to improve error handling by throwing an exception
added a method ` isStarted ( ) ` to check if the threadlocal Deadline is not starting to ensure that the threadlocal Deadline is
added a method to retrieve IOException message for closed channels in NettyRequestExecutor . java to improve error handling and provide clearer feedback when the client
added null check for genres before setting text to avoid potential NullPointerExceptions when genres is null
updated logging statements in CheckpointCoordinator and added a test for resetting the master hooks in RegionRecoveryRecovery to improve logging clarity and ensure proper reset
added a new file ` MappedContainerComponent . java ` and modified ` EntityDataJSONFormat . java ` and ` ProtobufPersistedData `
added a null check for oldestUnpinnedMemTableInfo in WALNode . java to avoid potential NullPointerExceptions when oldestUnpinned
updated the handler method name from ` handler . handle ` to ` handler . handle ` in ` HttpTest . java ` and added a new test
change package - info . java from ` com . oracle . truffle . tutorial . background ` to ` com . oracle . truffle .
added a new test class SQLServerEscapeQuestionCharacterTest to test SQL database escape functionality to ensure proper functionality of SQL database escape functionality
added null check for routes in CamelModule constructors and updated constructors in JoobyBeanRepository to enhance robustness by preventing potential NullPointerException
refactor thread waiting logic in JavaFXSEPort . java to use Util . wait ( ) to improve code readability and maintainability by reducing
updated import statements from ` com . kenai . jaffl ` to ` com . kenai . jaffl . provider .
refactor CropperUtils to use a new method for creating BitmapCropBehaviour to improve code readability and maintainability by centralizing crop behavior management
updated ` configure ` methods to use ` getAppName ( ) ` instead of ` appName ` in ` InputRC ` and ` InputRCTest
added unit tests for handling ignored dependencies in CatalogInstallTest and UninstallTest to ensure proper handling of dependencies in the install process
replace setHeadless ( true ) with addArguments ( " -- headless = chrome " ) in multiple test files to ensure proper handling of headless
replaced the assignment of ` value ` with ` intern ( ) ` in ` VersionedValue . java ` to ensure proper initialization of ` value `
added a check for " MOVE " in the connection status check to ensure proper handling of connection status changes
updated date formatting in FixedDateFormat . java for consistency to improve readability and maintainability of date formatting
updated import statements from ` org . apache . curator . shaded . com . google . common . collect ` to ` com . google . common
modified HsBufferContext and HsSubpartitionMemoryDataManager to return a boolean instead of void to improve code readability and maintainability by
refactor permission checks in Visit . java to check for untrusted visits to improve code readability and maintainability
added a check to return if the protocol provider is unregistered before proceeding to avoid potential errors when the protocol provider is unregistered
updated conditional checks in BasicURLNormalizer and added a new test for curly braces in TestBasicURLNormalizer to ensure correct handling of curly
changed access modifiers of addRemoteAnimations and unregisterRemoteTransitions methods from protected to private to improve encapsulation and enhance encaps
updated clock rate comparison logic in EncodingConfiguration . java to ensure accurate comparison of clock rate values
added a method ` getProjectPath ` to ` ProjectGenerator ` and modified ` SeparatedProjectsGenerator ` to return a ` ImmutableSet < Path
refactor locale handling in HostLocaleProviderAdapterImpl to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a new file MSwingUtilities . java that includes a new MSwingUtilities . java file to facilitate image rendering capabilities in the application
updated MailProducer to extend DefaultAsyncProducer and modified the process method to include a callback parameter to enhance resource management and ensure proper callback behavior in the
added @ RefreshScope annotation to CasCoreWebConfiguration , PasswordlessAuthenticationConfiguration , and CasCoreWebConfiguration classes to enable refreshing of
added a new test class ` OnExceptionHandleAndThrowNewExceptionTest ` for handling exception exceptions to ensure proper handling of exception exceptions during execution
added new classes ` Main ` , ` ScriptRenderer ` , and ` ScriptRenderer ` , and ` ScriptRenderer ` , and ` ScriptRenderer `
added a condition to check input state in MimeTypes . FORM _ ENCODED and updated HTTP response handling in RequestTest . java to ensure
added a method to check if glyph width and height are greater than 0 and modified touch focus logic in multiple classes to improve touch focus handling and ensure
refactor ` reportFailure ` to ` runCloseHooks ` in ` DeploymentManager ` , ` DeploymentTest ` , and ` DeploymentTest ` to
refactor wild key handling in LexiconRecipeMappings to use a new method ` forceIgnore ` to improve code readability and maintainability by using
updated sleep duration from 100ms to 500ms in ConstantTimeBackoffTest . java to improve test reliability and ensure proper timeout handling
updated import statements and added a wildcard check for shortName in LoincHandler . java to improve code readability and maintainability by using a wildcard
replaced ClasspathURLStreamHandler with ClasspathURLStreamHandler in JollyDayHolidays . java to improve code readability and maintainability by using the class
added a new file ` FieldUtils . java ` with methods to retrieve and retrieve field names in the ` org . acegisecurity . util `
removed speculative type check from DeferredAttr . java and added a new DoubleStaticImport class for DoubleStaticImport . java to simplify type checks and improve
updated layout layout in Workspace . java to use a new layout padding for custom content to enhance layout flexibility by allowing custom content padding for widgets
added a method ` updateSettingsWithSaveLastAccount ` to ` XabberAccountManager ` and updated error handling in ` AccountAddFragment `
added a new method ` setvar ` to ` Commands . java ` to handle variable setting and display help message to enhance user experience by providing help
added a new file ` CatEntity . java ` to handle itemstack positioning in ` CatEntity . java ` to ensure proper handling of item
updated value handling in WindowFrame . java to use ValueNull . INSTANCE instead of ValueNull . INSTANCE to improve flexibility in handling unsigned range values
added a list of fonts in TestCreateSignature . java to verify that fonts are contained in a normal appearance to ensure proper handling of font
added a method to set the mode of the app in PageListController . java to ensure the app is only set when the application mode is set
added a ` DockerfileBuild ` method to ` ImageFromDockerfile ` and created a new ` DockerfileBuildTest ` class to enhance the
added null check for threadInfos and threadClassNames in ThreadInfos . java to avoid potential NullPointerExceptions when threadInfos are null
updated the check for sweepAngleOuter from 0 . 00001f to Utils . FLOAT _ EPSILON to ensure that sweepAngleOuter is
added logging statements to ChannelStatePersister , SingleInputGate , SingleCheckpointBarrierHandler , and SingleCheckpointBarrierHandler classes to improve logging clarity and ensure
added new table types for SYNONYM and INOPERATIVE _ QUERY _ TABLE to the Schema class to enhance functionality by
added minimumSimilarity parameter to FuzzyQuery constructor and modified FuzzyTermEnum constructor to include minimumSimilarity parameter to enhance query flexibility by providing a minimum
updated method name from ` addActionsView ( ) ` to ` setActionsView ( ) ` in ` RecentsView ` to improve clarity and
updated LayoutWrappingEncoder to use OutputStreamAppender instead of IOException and added immediateFlush property in LayoutInsteadOfEncoder to improve flexibility in handling immediate flush
added AMQP and kafka auto configurations in ZipkinAutoConfiguration . java to enhance auto configuration configuration for AMQP and Kafka
added null check before removing components in JLayer . java and added a new test class bug6875716 . java to prevent potential NullPointerException
updated import statements from shaded to com . google . common . base in ResolvingVisitor , SchemaResolver , Schemas , and Schemas
refactor block handling in BciBlockMapping and GraphBuilderPhase to improve code readability and maintainability to enhance code clarity and maintainability by
refactor image rendering logic in Label . java to improve code readability and maintainability
replaced the ` intToFourBytes ` method with ` Ints . toByteArray ( ) ` in multiple files to simplify code and improve readability
added null check for mObserver in NavigationModeFeatureFlag . java to prevent potential NullPointerExceptions when mObserver is null
updated the ` thenComparing ` method from ` Comparable < ? super U > ` to ` Comparable < T > ` and added a new
refactor DocIdSet class to improve code organization to enhance maintainability and readability of the code
updated the time zone setting in UserRuleAnomalyFunction to use currentKey instead of null to improve clarity and consistency in the anomaly
added error handling for NumberFormatException in VisualScoreTagTest . java to ensure proper handling of NumberFormatException during parsing
added classloader setting for mock signers in MockFactory . java and updated classloader setting in MockFactoryTest . java to ensure the correct classloader is set
added a new OriginalFormat class and implemented a parseObject method in ConverterWithEnumFormat . java to enhance formatting capabilities for the OriginalFormat class
added a constant for the PATTERN _ YYYY _ MM format in FileStorageUtils . java to improve code readability and maintainability by
refactor JAWTRenderer class to improve code organization to enhance maintainability and readability of the code
updated the ` createEndpointWithAutoDiscoverClientFalse ` method to use ` autowire ` instead of ` awsLambdaClientMock ` to simplify
cloudstack - 119 : add validation for mac address in uservmmanagerimpl . getmacaddress ( )
added support for Authorization header in ProxyServlet . java to ensure proper handling of Authorization headers in the proxy servlet
updated the method name from submit to execute in TraceableExecutorService . java to improve clarity and consistency in method naming
added methods to retrieve and set details in Authentication , UsernamePasswordAuthenticationToken , and AuthenticationProcessingFilter classes to enhance security by providing detailed details for authentication
updated randUsePoints assignment from nextBoolean ( ) to nextBoolean ( ) in SolrTestCaseJ4 . java to ensure that randUsePoints is
replace ` appendDot ( ) ` with ` endSentence ( ) ` in multiple classes to improve clarity and maintainability of the code
updated the ` formatForConsole ` method to accept a ` Locale . US ` parameter instead of ` totalTime ` and ` ansi ` to
added handling for MapExpression in GroovyParserVisitor and GroovyPrinter classes to ensure proper handling of map entries in the parser
added checks for bottom and right indicators in the Border class to ensure proper handling of bottom and right indicators in the border
refactor gesture state handling in TouchInteractionService to use a default state instead of a new instance to improve code clarity and maintainability by centralizing
updated the version string from DateTime to Instant in LlapServiceDriver . java to ensure compatibility with the latest date formats
refactor openblas and openblas _ nolapack classes to improve code readability and maintainability
replaced IOUtils with IOException in TorrentsStorage . java to ensure proper resource management and prevent potential resource leaks
added synchronization to the initTxnMgr method in SessionState . java to ensure thread safety during initialization
updated timeout values from 120ms to 480ms in ` AbstractDistribZkTestBase ` and ` AbstractFullDistribZkTestBase `
added a new file ` SearchResults . java ` with a class ` SearchResults . java ` that retrieves the total number of document results to
added null checks for threadCPUTimer and updated refresher initialization in CPUSamplerSupport . java to improve robustness by preventing potential NullPointerExceptions
added null check for primitivesTemp in BytecodeNode . java to avoid potential NullPointerExceptions when accessing primitives
added new versions " 8 . 10 . 0 - cfs " and " sorted . 8 . 0 - nocfs " to TestBackwards
updated feature flags from DISABLED and TEAMFOOD to TEAMFOOD in FeatureFlags . java and AppIcon . java to
added a new method ` getInstancePools ` to retrieve the list of instance pools in the ` InstanceResource ` class to provide a way to retrieve
refactored the method ` canEarlyTerminateOnDocId ` to use a static method ` canEarlyTerminateOnPrefix `
updated the ` isNative ( ) ` parameter from ` isNative ( ) ` to ` isToString ( ) ` in ` InlineBytecodeGenerator
added logging statements to CxxCompileStep , CxxPreprocessStep , and CxxPreprocessStep classes to improve error handling and ensure proper
added a ` removeCharacter ` method to ` StringUtil ` and modified the ` Util ` classes to utilize it to improve character removal logic and ensure
updated metadata service protocol parameters from " SERVICE _ PORT _ KEY " to " METADATA _ SERVICE _ PROTOCOL _ KEY " in multiple files to
added a new interface ` DataTransformer ` for transforming expression expressions in ` org . kie . api . runtime . process . process ` to
changed the type of ` Object [ ] ` from ` Collection ` to ` Number [ ] [ ] ` in ` DistributionGraph . java ` to
refactor conditional checks in FormatStringChecker to improve code readability to enhance maintainability and maintainability of the code
updated the initialization of SolrCore in ElectionContext . java to ensure proper initialization of SolrCore
refactor ITestDbTxnManager class for improved readability to enhance maintainability and readability of the code
refactor connection handling in DatabasePlatformFactory to use try - with - resources to ensure proper resource management and prevent potential resource leaks
added a new ` remoteCodeFirstPojoIntf ` method to ` CodeFirstPojoClient ` and ` CodeFirstPojoIntf ` classes to
do n ' t throw an exception if there be an exception in resourcevalidation process
refactor selection selection handling in ScaleDialog to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor ` updatePlayerStepStatus ` method to use ` tickBelt ` instead of ` updatePlayerStepStatus ` to improve code clarity and
added logging and logging for appearance stream creation in AppearanceGeneratorHelper . java to improve logging clarity and ensure proper handling of appearance stream creation
replaced SortedSet with LinkedHashSet in ExecuteSqlCommandStep . java to improve performance and maintainability of the code
updated TIME _ BETWEEN _ TOUCH _ AND _ DRAG from 1500 to 1000 in multiple classes to improve accuracy in
updated preload configuration from " libusb - 22 " to " libusb - 25 " in dc1394 . java to ensure compatibility with
added a check for agentSupport before setting all constructors to public in MainMockTransformer and created a new test class MockStaticWithPrivateCtorTest
[ COS ] do n ' t decrypt non - array object in securityhandler .
refactor window title handling in MainFrame . java to improve clarity and consistency to enhance code readability and maintainability by centralizing window title management
updated depth calculation logic in XRSurfaceData . java to check for pixel size before setting transparency to ensure transparency is correctly set based on pixel size
http : / / issues . apache . org / jira / browse / amq - 262 - fix error message in okhttpdatasource
added a static method ` exit ` to ` TopLogging ` and updated its usage in ` TopThreadGroup ` and ` TopThreadGroup ` to
modified the initialization of the start variable in NativeRegExp . java to ensure proper handling of global regexp indexing
added JUnit Ignore annotation to OptaPlannerDaemonSolverTest . java to ignore test failures when upgraded to optaplanner 6 . 3 .
updated the variable name from ` lowAllocation ` to ` highAllocation ` in ` DefaultAllocator . java ` to improve clarity and consistency in variable naming
added a method ` cleanEntriesWithoutFeeds ` to ` DatabaseCleaner ` , ` FeedEntryDAO ` , and ` DeleteWithoutFeeds `
changed the return type of the appendToLabel method from void to return this instead of void to allow access to the method to the method ' s method
added a new file ` NoOpIdleStrategy . java ` and modified ` LowLatencyMediaDriver . java ` to use ` NoOpIdleStrategy
added HttpStatus handling in CacheControlHeadersWriter and modified HTTP headers handling in CacheControlServerHttpHeadersWriter to improve response handling and ensure proper handling of
refactor ` constantValueInertSplice ` and ` constantValueInertToolEvalNodeFactory ` methods to use ` ToolEvalNode
added a method to paint the tab area in SynthTabbedPaneUI . java to improve code readability and maintainability
updated the ` getKrakenDepth ` method to accept a ` Object . . . . args ` parameter and modified the ` getKrake
added ` getFileSeparator ( ) ` and ` isAbsolute ( String path ) ` methods to multiple classes to enhance file path normalization functionality and improve file handling
added a new method ` build ` in ` JavaProvenance ` and updated the ` MavenProjectParser ` to utilize it to enhance the
added trace logging for Hive UDFs in HiveFunctionRegistry . java and updated related tests in TestInbuiltHiveUDFs . java
updated the loop condition from 100 to 200 in CloudStateUpdateTest . java to ensure consistency in the loop logic
updated exception handling in ColumnFamilySerializer and HintedHandOffManager to handle UnknownColumnFamilyException instead of UnserializableColumnFamilyException to improve error
added a check for writable output files in NativeErrors . java to ensure that the output file is writable when the output file is not writable
added a try - catch block for NameNotFoundException in LauncherModel . java to handle NameNotFoundException during package retrieval to ensure proper handling of
cloudstack - 118 : do n ' t throw cloudexception when upgrade the database
added skip policy checks in AbstractFaultTolerantChunkOrientedTasklet and modified exception handling in FaultTolerantChunkOrient
replace startsWith with regionMatches in LineReaderImpl . java to ensure proper handling of case - insensitive statements
added imports for SourcesFileResults and SourcesFileResults and updated dataTables handling in Recipe . java to improve code readability and
added functionality to dismiss all tasks in TaplTestsTaskbar to ensure the overview is only dismissing all tasks when there are no tasks
added a new interface ` DbUpgradeSystemVmTemplate ` and modified ` Upgrade41400to41500 ` to implement ` DbUpgradeSystemVm
refactor connection handling in LdapClient . java to improve code readability and maintainability
refactor index handling in SequenceAction . java to improve code readability to enhance maintainability and maintainability of the code
added ThreadLocal for access level validation in CassandraServer . java to ensure proper access level management and prevent potential NullPointerExceptions
added a conditional check forSynthetic field in ReflectUtils . java to skip processing if the field isSynthetic ( ) is called to ensure proper handling of
added LoggerProvider to the Configuration class and created a new LoggerProvider class in ApplicationController to enhance logging capabilities for better debugging
changed the type of ` ImmutableMap ` from ` String ` to ` Object ` in ` ServerStatusCommand ` and updated the port handling in ` Server
added a ` deprecationWarningIssued ` flag to ` SpringFactory ` and updated test cases in ` SpringFactoryTest ` to improve error handling and
added a deepStart method to the Startables class to facilitate asynchronous execution of startables
removed deprecated ` reservePrimitiveExtensionArray ( ) ` method from ` Shape . java ` and ` ShapeImpl . java ` to streamline the code
refactor BlockLaserTable and TileLaser . java to implement ILaserTargetBlock instead of BlockBuildCraft to improve code
updated condition in AbstractJdbcDatabase to check if objectName contains " ( " ) " instead of " - " to improve clarity and maintainability of
removed unused imports from TestSolr4Spatial2 . java to streamline code and improve readability
set expire messages period to 0 in MemoryLimitTest . java to ensure that the test will consume 2 * pageSize mem when the test fires
removed null check for p and handlerName in RequestHandlers . java to simplify code and improve readability
updated the method to replace ' - ' with ' . ' in the log name to ensure proper handling of log names for better debugging
replaced ` PYTHONPATH ` with ` Maps . filterKeys ( ) ` in ` ProjectBuildFileParser . java ` to streamline the
replaced calls to ` getFormat ( ) ` with ` stream . getFormat ( ) ` in ` DirectAudioDevice ` , ` Toolkit ` , and `
added null check for enums in ElasticSearchStringLookupService . java to avoid potential NullPointerExceptions when enums is null
updated error message formatting in CommitLogReader . java to improve clarity of error messages for better readability
added a call to ` containerScope . getPolicy ( ) ` in ` WebSocketSession . java ` to ensure proper handling of WebSocket sessions
removed the conditional check for static fields of the current type in Java2TypeScriptTranslator . java to simplify the code and improve readability by eliminating
updated the webroot argument from UI _ DIR to UI _ DIR in UserService . java to ensure the correct webroot is used for
updated import statements from ` org . junit . Test ` to ` org . junit . junit . jupiter . api ` in multiple test classes
replaced InvocationTargetException with MonitoredVmUtil . isAttachable method in JpsProxy and Utils classes to improve code readability and maintainability by
replaced the ` printHeaderObject ` method with ` createHeader ` in multiple formatter classes to improve code readability and maintainability by centralizing header
updated import statements and added a method to place stop orders in VircurexTradeService . java to improve code clarity and ensure proper handling of stop
added buffer . reset ( ) and buffer . reset ( ) in ReduceRecordProcessor . java to ensure proper handling of buffer resets
added null checks for mOriginalForeground and mOriginalBackground in FloatingWidgetBackgroundView . java to prevent potential NullPointerExceptions when mOriginalBackground
refactor conditional checks in FloatingDecimal and FloatingDecimal classes to improve code readability and maintainability
added a check for ` propertyType ` in ` PropertyDescriptor ` and created a new ` Test7189112 ` class ` Test7189
[ java ] use fingerprint . getMaxVersionEncountered ( ) instead of fingerprint . getMaxVersionEncountered ( ) to simplify version retrieval logic
added a check for secure headers before setting the origin in NettyRequestFactory . java to ensure proper handling of headers based on secure URLs
updated animations in RecentsView and TaskView to use alpha values instead of setVisibility in RecentsView and TaskView classes to improve animation consistency and
updated assertion messages in ORCRecordReader . java for consistency to improve readability and maintainability of the code
removed unused samples from DemoUtil . java to streamline the code and improve readability
updated import statements in PersistenceProvider . java for consistency to improve code readability and maintainability
[ hotfix ] [ runtime ] use org . apache . hadoop . ipc . rpcengine instead of org . apache . hadoop . ipc
added diagnostic listener for union and fixed fields in TestSpecificCompiler . java to improve code clarity and maintainability by utilizing diagnostics
replace ` else ` with ` return ` in ` WebSocketEndpoint ` and added a new test for session closed behavior in ` WebSocketIT ` to ensure
updated delay values from 1 to 5 in multiple service classes to improve clarity and maintainability of the code
updated XML configuration mappings in XmlConfigurationProvider . java to use Apache Struts instead of OpenSymphony Group to improve code readability and
added a condition to stop audio tracks in WebCCInputPanel . java to ensure proper handling of video tracking when the stream is stopped
updated ` chartData ` to ` ArrayList < BittrexChartData > ` and added a new ` BittrexChartDataPeriodType `
removed unused imports and updated import statements in GMLExamples . java to streamline imports and improve code clarity
replaced substream with skip ( 200 ) in TargetType58 . java to improve readability and maintainability of the code
added a ` getIdentifierGenerator ` method to ` SimpleValue ` and updated related test cases in ` CompositeIdFkGeneratedValueIdentityTest ` to
renamed ` FindFullTextAction ` to ` DownloadFullTextAction ` and updated related methods to use ` DownloadFullTextAction ` instead of `
updated URIRegisterExecutorSubscriber and ShenyuClientRegisterDefaultService to utilize a list for URI registration to improve code readability and maintainability
refactor WebSocketMapping , WebSocketUpgradeFilter , and WebSocketUpgradeFilter classes to improve code readability and maintainability
added a blank check for OSDbHash in OpenSubtitle . java to avoid potential NullPointerExceptions when OSDbHash is null
added token transfer functionality to RuntimeImpl and MUtil classes to enhance token transfer functionality for smart contracts
refactor file deletion logic in FtpOperations . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated the return statement from ` getSearchBindDN ` to ` getSearchBindPassword ` in ` JacksonLDAPConfiguration . java ` to improve clarity
added a check for empty result set for match and modified condition checks in MapJoinOperator . java and HybridHashTableContainer . java to ensure
added a endPoint parameter to the HTTPSPDYAsyncEndPoint constructor and updated related methods in ServerHTTPSPDYAsyncConnectionFactory to enhance
added intent . putExtra ( " id " , id ) to various classes to enhance user experience by providing a clearer id for tweets
added handling for proxy authentication in HttpURLConnection . java to ensure proper handling of proxy authentication during connection disconnection
updated the number of children from int to AtomicInteger in TraceContext . java and added a test for trace ID generation in TraceContextTest . java to
updated JWT and WebsocketData classes to use JWT and JWT instead of JWT to improve flexibility in handling JWT and Websocket
[ hotfix ] [ test ] disable test in valuetypetest
updated import statements in ResourceFactoryServiceImpl and ResourceFactoryServiceImpl to implement KieResources instead of KieDescr to improve code clarity and maintainability by
updated predicate types from ` getAsByte ( ) ` to ` NOT _ IN ` in multiple predicate classes to ensure proper handling of NOT _ IN
replaced ` AccountUtils . AccountNotFoundException ` with ` Exception ` in multiple classes to improve error handling and improve code clarity
added null check for witnessService before validation to prevent potential NullPointerException when witnessService is null
updated the variable name from ` getExprString ( ) ` to ` getExprString ( ) ` in ` JoinDesc . java ` to ensure
added a check to ensure the element ' s javadoc is not present before setting it to avoid potential NullPointerExceptions when the element is not present
replaced ` holderMethod ` with ` holderMetadata ` in ` CompiledICHolder ` and added a new ` RedefineInterfaceCall ` class to
refactor animation handling in Tabs . java to improve readability to enhance maintainability and maintainability of the code
[ hotfix ] [ table - planner - planner - planner - planner - planner - planner - planner - 
updated the calculation of ` x ` and ` y ` in ` Polygon . java ` to ensure correct calculation of ` x ` and ` y `
updated the ` createCache ` method to accept an ` Configuration < Object , Object > ` instead of ` Configuration < Object , Object > ` to
added a check for empty stringConstant in InheritanceUnsafeGetResource . java and added a new Bug2974855 . java file to ensure
refactor ShadowCookieManager class to improve code readability to enhance maintainability and maintainability of the code
added a new flag ` EXTERNAL _ AUTHORIZATION _ AUTHORIZATION _ AUTHORIZATION _ DROP _
added a conditional check for WebGL type in Stage . java and updated the draw method call in ProgressBar . java to improve code readability and
added support for ByteOrder in BasicPlatformCapability , LLVMLanguage , and LLVMLanguage classes to ensure proper handling of byte order based on
changed the name of PING _ TIMEOUT _ PROPERTY _ NAME from " namedpipesocketprovider . timeout " to " windowsprovider . timeout "
updated the ` initWebViewLogin ` method to accept a ` String ` parameter and modified the ` initWebViewLogin ` method to include a base URL
updated the error message for JDBC Type validation in CallableStatementHandler . java to improve clarity and consistency in error reporting
updated date formatting from " yyyy - MM - dd " to " yyyy - MM - dd " in AuditEventsMvcEndpoint and added a
refactor ExponentialTimer and ExponentialTimerBeanInfo classes to PreciseThroughputTimer instead of ExponentialTimer to improve code
added a method to remove softBody in SoftBodyTest . java to ensure softBody is properly deleted to prevent potential memory leaks
changed interface modifiers from ` SinkFunctionProvider ` to ` SinkRuntimeProvider ` and ` SourceFunctionProvider ` to allow access to the interface
updated log messages from ` e ` to ` toString ( ) ` in ` ZeppelinhubClient ` , ` ZeppelinHub ` ,
added a new file ` JingleTest . java ` to test Jingle content handling to ensure proper handling of non - redundant namespaces
added null check for ` redplasma ` in ` BuildCraftEnergy ` and ` BCStatCollector ` to prevent potential NullPointerExceptions
added HTTP _ 2 header handling in BareResponseImpl and updated HttpInitializer to use HttpToHttp2ConnectionListener to improve HTTP response handling and
refactor conditional checks in Remove . java for consistency to improve code readability and maintainability
updated delimiters in SimpleReport . java for consistency and clarity to enhance readability and maintainability of the code
added a new file ` setIgnoreSymbolFile ( true ) ` to ` JavapTask ` and modified the ` T6863746 `
replaced ` TickerDemo ` with ` StreamingTickerDemo ` and removed ` TickerDemo ` with ` StreamingTickerDemo ` to simplify
refactor switch statements in Runtime . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
ggb - 242 fix app3d . createinput3d ( ) to be non - applet
added @ Ignore annotation to KinesisIntegrationTests . java to temporarily disable test coverage
replaced ` ParserException ` with ` return false ` in ` parsePayload ` method to simplify the method signature and improve code readability
updated the ` getRepositoryFactoryClassName ` method to implement ` getRepositoryFactoryBeanClassName ` in ` JpaRepositoryConfigExtension . java ` to improve clarity
refactor ` getExecutableCommand ` methods to return a ` List < String > ` instead of a string to improve code clarity and maintainability by
updated variable assignments in IOSGLES20 . java to improve code readability and maintainability
removed the UploadPathActivity class and removed the UploadPathActivity class to streamline the codebase by eliminating unnecessary imports
updated return statements for totalTermFreq and sumTotalTermFreq in SimpleTextFieldsReader . java to improve code readability and maintainability
refactor ` JDTTreeBuilderQuery ` to use ` JDTTreeBuilderQuery ` instead of ` JDTTreeBuilderQuery ` to improve
added a database parameter to the populateValidateNullableIfNeeded and populateValidateForeignKeyIfNeeded methods in ColumnSnapshotGenerator . java to ensure proper handling of database types
refactor Database class for improved readability to enhance maintainability and readability of the code
refactor SpringApplicationBuilder class to improve code organization to enhance maintainability and readability of the code
removed the ` IndexOptions ` variable from ` DefaultIndexingChain ` and updated iterator assignment in ` PointInSetQuery ` to streamline the
removed the map method for rawName in SchematicHandler . java to improve code readability and maintainability
added handling for " java . util . Collections $ EmptyList " and " java . util . Collections $ EmptySortedSet " in AbstractCollectionAssert
removed the static ` static ` modifier from the ` Option ` enum to improve code readability and maintainability
updated the ` doneClick ( ) ` logic in ` Compose ` , ` ComposeActivity ` , and ` ComposeActivity ` classes to
removed the ` toggleKeepInSync ( ) ` method from ` FileDetailFragment ` and updated its usage in ` OCFileListFragment `
replaced ` DatatypeConverter . parseBase64Binary ` with ` Base64 . decode ` and added a new test class ` ImageUtilTest `
added a new class ` ControllerCounter ` , ` DBCallback ` , and ` DBCallback ` to implement the ` ControllerCounter ` and ` DB
updated the ` deleteTicket ` method from ` String ` to ` final ` to ensure that the ` deleteTicket ` method returns a final value
added a new file ` FlywayMigrationRunner . java ` with a class ` FlywayMigrationRunner . java ` to facilitate testing of
added a new class ` OverrideIsEmpty ` and added a new ` OverrideIsEmpty ` class for handling empty entries in ` HashMap ` and `
updated the version number from " 0 . 6 . 0 " to " 0 . 7 . 0 " in TsFileDBConstant . java to
added @ Nullable annotation to the ` modify ` method in ` CompressionCodec ` , ` WriterImpl ` , and ` ZlibCodec ` classes to
added null checks for the main attribute in LauncherHelper . java and modified jar creation logic in Arrrghs . java to improve robustness
rename test classes from ` BasicErrorControllerIntegrationTests ` to ` BasicErrorControllerTests ` to improve clarity and consistency in naming conventions
[ gr - 24335 ] fix compilation error in hotspotprofilerinfo
replaced ` CellCopyPolicy ` with ` CellCopyPolicy ` and modified ` XSSFSheet ` to use ` other . isCopyCellValue (
refactor icon loading logic in Launcher and FloatingIconView classes to improve code clarity and maintainability by centralizing icon loading logic
updated method call from ` getValues ( ) ` to ` getRawValueCharSequences ( ) ` in ` formFieldValuesToCaps ` to
added orientation check in IconRecentsView . java to ensure item decoration is invalidated based on configuration orientation
deleted the AddAdapter . java file to remove unused AddAdapter . java to streamline the codebase by eliminating unused classes
added a check for empty constructorCodeList and modified the loop logic in NonStaticLifter . java to improve code readability and maintainability by
refactored the handling of sorting columns in OpTraitsRulesProcFactory to improve clarity and consistency to enhance code readability and maintainability by
refactor testLogWatcher to use a looper method for better readability and maintainability to improve code clarity and ensure proper handling of message registration
added a print statement for " < any > " in Java2TypeScriptTranslator . java to improve code readability and maintainability
updated SDK version from " 4799589 " to " 4913185 " in SdkConfig . java to ensure compatibility with the latest
added a conditional check for SPRING _ AOP _ PROXY _ TARGET _ CLASS in TraceEnvironmentPostProcessor . java to ensure proper
removed the singletonLock variable from TypeCachingBytecodeGenerator to simplify the code and improve readability
updated ` responseClassCallback ` and ` forwardClassCallback ` methods to ` responseClassCallbackWithClass ` and ` forwardClassCallbackWithString `
added a ` append ` parameter to the ` writeFile ` method and modified the ` writeFile ` method in ` Utils ` and ` SuiteHTMLReporter `
refactor MavenExecutionContextView and MavenRepositoryMirror to use getMirrors ( ) instead of getMessage ( MAVEN _ MIRRORS )
added a ` name ` parameter to multiple constructors in ` BuildRuleSourcePath ` , ` SourcePathTypeCoercer ` , and
updated the condition for matching the redirect URI in OAuth20CallbackAuthorizeEndpointController and added a new test for operation client matching in OAuth20CallbackAuthorize
replaced ` EMPTY _ ANNOTATIONS _ ARRAY ` with ` AnnotationParser . toArray ` in multiple classes to improve code readability and maintainability
updated the return type of ` getBadgedDrawableForUser ` to ` getBadgedIconForUser ` in ` UserManagerCompatVL
updated the default value for line separator in GlobalConfiguration . java to include LF , CR and CRLF to improve clarity of line separator configuration
updated the check for ` isDerivedClass ` from ` isImplementingInterface ` to ` isDerivedClass ` in ` ConfigurationManagerUtils ` to
refactor input handling in BaseController to use sanitizeInput method to improve code readability and maintainability by centralizing input handling logic
added @ io . grpc . stub . annotations . GrpcGenerated annotation to ReservationServiceClient and ReservationServiceGrpc classes to improve code clarity and
added IOException handling to the buildFileNamesCanBeDifferentCrossCell method in InterCellIntegrationTest . java to ensure proper handling of file contents in the
refactor CountersReader class for improved readability to enhance maintainability and maintainability of the code
refactor container type handling in AllAppsRecyclerView and UserEventDispatcher classes to improve code readability and maintainability
hbase - 14279 deprecate bufferpoolsize and reservoir . buffer . size ( ) for future release
refactor SQL query handling in AbstractTestNativeJoinQueries , AbstractTestNativeWindowQueries , and AbstractTestNativeWindowQueries to use a new method
added method ` getAllGenericParameterTypes ( ) ` to ` Executable ` , ` Parameter ` , and ` Parameter ` classes to ensure proper handling of parameter
refactor TestFSTs class to improve code readability to enhance maintainability and maintainability of the code
updated methods to use getLabelTop ( ) and getLabelTextHeight ( ) in CanvasDrawable and LaTeXTextRenderer classes to improve label height
hbase - 16464 add initial size to reduce the size of the table split policy .
removed the resetLoadedState call in LauncherClings . java to streamline the code and improve maintainability
replaced ` keys ` and ` updatesAt ` with ` updates ` and replaced ` updatesAt ` with ` updatesAt ` and ` updatesAt `
added a ` excludedDatasources ` field and a method to set the ` excludedDatasources ` property in ` SpringDataSourceBeanPostProcessor
added storeUndoInfo ( ) method in TableValuesView and TableValuesPanel to storeUndoInfo ( ) in TableValuesView and TableValuesPanel
refactor KinesisProxy to use a protected method for better encapsulation and improve error handling to enhance encapsulation and maintainability
refactor channel handling in VelbusSensorHandler . java to improve code readability and maintainability
disable unfavorable benchmarks due to unfavorable benchmarks
added unit tests for illegal database names in IoTDBSessionSimpleIT . java and updated PartialPath . java to ensure proper handling of database
added a call to resetNewFiles ( ) in GarbageCollector . java to ensure that new files are reset before processing
updated ` desiredWorkspaceLeftRightOriginalPx ` and ` desiredWorkspaceHorizontalMarginOriginalPx ` to use ` desiredWorkspaceHorizontalMarginOriginalP
refactor CharTokenizer to improve code readability and maintainability to enhance maintainability and maintainability of the code
replace GoogleCredentialsProvider with GoogleCredentialsProvider in DeviceManagerStubSettings . java to enhance security by allowing jwt access to the Google credentials provider
updated the XENSERVER _ NETWORK _ LABEL constant from " xenservernetworklabel " to " xenservernetworklabel " to
updated libgdxVersion and libgdxNightlyVersion from " 1 . 5 . 5 " to " 1 . 5 . 7 -
removed the metricNames field from the SolrCore class to simplify the code and improve readability
replaced URI creation with Fs . fromUrl method in MavenManifestFactory . java to improve code readability and maintainability
added a new variable ` IS _ MAC ` in ` OisControllers . java ` to check if the OS is Mac to ensure compatibility with
refactor JdbcAggregationRepository to improve code organization to enhance maintainability and readability of the code
added clear ( ) and addAll ( other . slotList ) in Frame . java to ensure proper handling of slot lists
added a reset of m _ predCount in PredicatedNodeTest . java to ensure that predCount is always set to - 1
added imports and modified properties handling in ConfigurationSpringInitializer . java to improve configuration management and ensure proper configuration management
updated ` setupLogging ` method to accept ` org . slf4j . Logger ` instead of ` org . slf4j . Logger ` to
replaced HashMap < String , Operator < ? extends Serializable > > with LinkedHashMap < String , Operator < ? extends Serializable > > in multiple Java files to
added null checks for jdbcHandlerMap in TypeHandlerRegistry . java to ensure proper handling of jdbcHandlerMap in the TypeHandlerRegistry class
added debug logging for multiple items in HibernateItemWriter , FlatFileItemWriter , and JmsItemWriter classes to ensure proper logging of items
refactor LanguageRange parsing logic in LocaleUtils . java to improve readability and maintainability of the code
added a call to execute the handler context in VertxHttp2Handler and updated the startServer method in VertxHttp2Test to ensure proper
refactor SXSSFEvaluationWorkbook and BaseXSSFEvaluationWorkbook to use a Map for table cache to improve cache management and ensure consistent
updated schema text handling in BaseSchemaTextFormatter to use SchemaTextDetailType . BASIC instead of SchemaTextDetailType . VERBOSE to improve
replaced ` MongoFactoryBean ` with ` MongoClientFactoryBean ` and ` MongoClientFactoryBean ` in ` MongoNamespaceReplicaSetTests . java
replaced HashSet with LinkedHashSet for roots , leaves , and roots , and leaves in SparkWork . java to improve code readability and maintainability by using
replaced the initialization of tableScanCloneOpsForJoin with a list of tableScanCloneOpsForJoin to improve code readability and maintainability by
added a null check for the client ID before parsing headers to prevent potential NullPointerExceptions when the client ID is null
added AchievementList . field _ 187981 _ e . clear ( ) to StatList . field _ 187981 _ e . clear
updated variable names in MutableDatabaseInfo , MutableJdbcDriverInfo , and MutableJdbcDriverInfo classes to improve code readability and maintainability by reducing
updated method name from ` link _ share _ read _ only ` to ` link _ share _ view _ only ` in QuickSharingPermissionsBottomSheet
added long buffer handling in ByteBuffersDataInput . java and implemented long buffer handling in ByteBuffersDataInput . java to improve data handling and ensure
refactor file time handling in UnixFileAttributes and Basic classes to use a static method for better readability to improve code clarity and maintainability by
added a new file ` TestNoEagerReclaimOfHumongousRegions . java ` with a class ` TestNoEagerReclaim
modified the scrolling logic in AllAppsContainerView to check if the search bar is hidden before updating the header scroll to improve user experience by preventing
updated the route path from " router " to " routes " in EnvRouterFeature . java to ensure compatibility with the latest routes configuration
added null check for cur and next in LineChartRenderer . java to prevent potential NullPointerExceptions during rendering
added a new ` ReloadPageAction ` class and implemented a ` ReloadPageAction ` class to handle the ` reloadPage ` action to
updated log level from info to warn for ` warn ` in ` SQLManager . java ` to improve clarity and consistency in logging messages
updated MIN _ SPRING _ VERSION from " 3.2 . 7 . RELEASE " to " 3.2 . 8 . RELEASE " to ensure compatibility
added a null check for configuration type in UpgradeHelper . java to ensure that the configuration type does not have a selected version
replace Iterator with ServiceLoader in GeoServerExtensions . java to simplify imports and improve code readability
added a method to close the table in HiveHBaseTableInputFormat to ensure proper resource management and prevent potential resource leaks
added stopStatementExecutor ( ) method to JdbcConnector , HiveViewImpl , and HiveViewImpl classes to ensure thread safety during statement execution
updated feature settings in multiple classes to use HashMap < String , Object > instead of Collections . EMPTY _ MAP to improve code clarity and maintainability by
updated JdbStopThreadidTest . java to use OutputAnalyzer instead of JdbCommand . cont to ensure that the JDB output is properly
added a ` getType ` method to ` ShadowContentResolver ` and its corresponding tests in ` ContentResolverTest ` to provide a way to retrieve the type
replaced ` runnable ` with ` entry ` in ` ExpressionThreadPoolManager . java ` to improve code clarity and maintainability by using a more descript
updated the default HTTP port from " port " to " vertx . httpPort " in HttpTestBase . java to ensure the correct port is used for
removed the addCaptureListener method from the buttonTable ' s addListener method to improve code readability and maintainability
updated the DEFAULT _ BATCH _ SIZE constant from 10 to 3 in NewSessionQueueOptions . java to ensure proper handling of available processors in the
added a try - catch block to establish resource manager connection in TaskExecutor . java to improve error handling for resource manager connection failures
refactor exception handling in LambdaRewriter and AbstractMemberFunctionInvokation classes to use a new LambdaExpressionFallback method to improve code clarity and
updated the min validation logic in ProgressBar . java to include a new parameter to ensure that the minimum value is greater than the maximum value
refactor message handling in DefaultStateMachine and State classes to include an entity parameter to improve clarity and maintainability of message processing logic
added new interface ` Cursor ` , ` Database ` , ` Database ` , ` Database ` , ` Row ` , and ` Row ` classes to
refactor AbstractIterableAssert , AbstractPathAssert , AtomicReferenceArrayAssert , and InstanceOfAssertFactories classes to improve code organization and maintainability
added ` setBeanId ` method to ` EbeanServer ` , ` DefaultServer ` , and ` TDSpiEbeanServer ` classes to
updated the method call from " tools / xslt / add - menu - to - site - descriptor . xsl " to " add - to -
added a list of request matchers to the HttpSecurity class to enhance security by allowing multiple request matchers
added hashCode ( ) and equals ( ) methods in ContactResource . java to provide a way to calculate the hashCode ( ) method based on the resourceName
added methods to retrieve request and response in AbstractProcessor , AbstractAjpProcessor , and AbstractHttp11Processor classes to improve code readability and
updated log messages in FileManager . java to improve clarity and consistency to enhance readability and maintainability of log messages
added a tearDown method to TestJdbcDataSource and a tearDown method in TestIndexSearcher to ensure proper cleanup of the data structure during tests
replaced direct calls to ` getSourceFile ( ) ` with ` getSourceFile ( ) ` in ` SyntaxTests . java ` to streamline code by
refactor ConnectionModel and ModeledConnection classes to improve code readability and maintainability
refactor ParserDecorator to use MetadataPolicy and FallbackParser instead of TemporaryResources to improve code readability and maintainability by centralizing parser
update FMLSecurityManager to check for valid class contexts instead of hardcoded classes to improve code readability and maintainability
updated variable names from ` serverUrl ` to ` username ` and ` newAccountName ` in multiple classes to improve code readability and maintainability
updated the method call from " swap " to " rename " in TestCoreAdminApis . java and CoreApiMapping . java to use a
added a new test method ` testJsxComment ` to ` JsLexerJsxTest ` and updated formatting in ` DumpingVisitor `
added ScreenRecordRule import and annotation to AddWidgetTest . java to enable screen recording functionality for improved performance
added a new environment variable ` printsErrorWhenBuckConfigIsMissing ` to ` BuildEndToEndTest ` and modified ` Cxx
added performance checks for physical memory size and limit in TestStringBufferAndBuilderGrowth . java to ensure proper handling of test memory sizes and
added a constructor to ` MapToLocalDateConverter ` and modified ` MapToLocalDateConverter ` to use ` ConversionService ` instead of `
added success flag to HiveMetaStoreClient . java to ensure proper handling of the success state of HiveMetaStoreClient
updated conditional checks in ResourceReferenceInfo . java and modified the condition in Dstu2BundleFactoryTest . java to ensure proper handling of include
updated condition checks in TimeLineCursorAdapter and TweetActivity to include " amp . twimg . com / v " and " amp . tw
added @ Deprecated annotation to AreaReference . java to indicate that the code is outdated and should not be used
refactor ElementType and Target classes for improved readability to enhance maintainability and maintainability of the codebase
added assertions for ` REF _ invokeStatic ` and ` REF _ invokeSpecial ` in ` MemberName . java ` to ensure correct reference
changed the default value of ` __ submitKeyUpdates ` from " false " to " true " in ` SelectorManager . java ` to ensure thread
updated the condition for firstEvent in EditNodeTextField . java to improve code readability and maintainability
camel - 14263 : camel - bean - expression - add support for mandatory bean
refactor BenchmarkPublisher , LoopMQTTHandler , and ProtocolPublishDecodingServer , and PublishReceiverHandler classes to improve code organization and maintainability
refactor exception handling in AgentRunnerTest . java to improve code readability and maintainability
added descriptions for multiple Maven project properties in multiple Java files to improve clarity and maintainability of Maven project property descriptions
refactored the handling of active and uvs in ObjLoader . java to improve code readability and maintainability
refactor ProcessEngine class to improve code readability to enhance maintainability and maintainability of the code
replaced calls to ` reentrantLock ` with ` lock . unlock ( ) ` across multiple classes to improve code readability and maintainability by
updated ` PrintMavenAsCycloneDxBom ` and ` PrintMavenAsCycloneDxBom ` methods to include
updated the back method call from ` back ( ) ` to ` back ( evt . getComponent ( ) ` in ` UIBuilder . java ` to
refactor certificate verification logic in SASLAuthentication . java to improve readability to enhance maintainability and maintainability of the code
updated ` ObjectArraySubject ` and ` ObjectArraySubject ` methods to accept ` T @ Nullable [ ] ` instead of ` T @ Nullable `
updated timeout value from NutchConf . get ( " mapred . temp . dir " , " mapred . temp . dir " , "
replaced OMR . gui . removeBoardsPane ( ) with tab . deselected ( ) in SheetAssembly and StubsController to improve
added a method ` getSessionId ( ) ` to ` RemoteWebDriver ` to retrieve the session ID to provide access to the session ID for better
added null checks before calling setTimeInterval method in ImportContainerImpl . java and updated related tests in ImporterGEXF2Test . java to
updated the command call from " - logLevel INFO - serverPort " to " - serverPort " in MockServerContainer . java to ensure compatibility with
updated error logging in FunctionRegistry . java to include a message to improve clarity of error logging for better debugging
refactor DispositionProcessor to use CrawlMetadata instead of RobotsHonoringPolicy to improve code readability and maintainability by centralizing
added JUnit Ignore annotation to ITSystemTest . java to temporarily disable tests that are no longer needed
updated file path handling in DefaultPackageScanResourceResolverTest . java to use File . separator instead of File . separator to improve code readability and
added a method ` alternativePath ( ) ` to ` ExpectNewDemo . java ` to implement an alternativePath method in the ` ExpectNewDemo
added a call to getFirstFilter ( ) in LogEntryParseTester . java to ensure proper initialization of the first filter in the input
added protectionDomain parameter to BufferAlignmentAgent . java to enhance security by allowing protection domains
added dispose ( ) method to WaterRipples class to ensure proper resource management and prevent potential memory leaks
added a new configuration parameter ` hive . disable . unsafe . external . table . operations ` and updated the ` DynamicPartitionPruningOptimization `
updated the Authorization header description in TokenKeyEndpointDocs . java to ensure that no authorization is required for requesting public keys
updated wallpaper offset calculation in Launcher and Workspace classes to ensure proper handling of wallpaper offsets for better user experience
updated SybaseASADatabase and SequenceSnapshotGenerator to use SybaseASADatabase instead of SybaseASADatabase to ensure proper handling of
updated the autocommit mode description from " autocommit " to " rollback " in PutSQL . java and added a new test for commit operations to
added sanity checks for directory creation in SnapPuller . java and corresponding test cases in TestReplicationHandler . java to ensure proper handling of directory
updated AppTargetId from " id : launcher " to " launcher : launcher " in AppEventProducer . java to improve code clarity and maintainability
replaced ` out . writeBytes ` with ` void ` in multiple classes to improve clarity and maintainability of the code
updated parameter names from ` getAuthorizationRepository ( ) ` to ` getAuthorizationRequestBaseUri ( ) ` across multiple classes to improve clarity and consistency
added a new header message for splitting key - value pairs in GenericUDFStringToMap . java to provide clearer insights into key -
updated PlainFormatter to use ChronoUnit instead of Instant . ofEpochSecond and adjusted formatting in PlainFormatterTest to improve clarity and maintainability of the
updated RETRY _ CLOSE _ TIMEOUT _ MS from 1000 to 3000 and refactored timeout handling in AgentRunner . java to improve timeout
hhh - 16257 - remove unused method in classloadingstrategyhelper . getprivatelookup ( )
refactor Mockito class to improve code readability to enhance maintainability and maintainability of the code
updated logging level from Closing to New in HiveProtoLoggingHook . java to improve clarity and consistency in logging messages
added JUnit Ignore annotation to SamplingNamingTest . java to temporarily disable tests that do not have at least one sample result
updated error message from " then zero " to " zero " in GridLayout . java to improve clarity and consistency in error reporting
updated string formatting in DecisionNode and WagonCART classes to improve clarity and consistency to enhance readability and maintainability of the code
added sorting logic for bound sheet records in XLS2CSVmra and BoundSheetRecord classes to ensure proper sorting of bound sheet records based on
refactor the calculation of avgImpulse and endInstImpulse in ThrustCurveMotor . java to improve code readability and maintainability
refactor input system initialization to use inputManager instead of inputManager to improve code readability and maintainability
refactor hash code calculation logic in UniverseBuilder . java to improve code readability and maintainability
added a deprecated method ` getMesh ( ) ` to ` Block . java ` and updated the ` getMesh ( ) ` method in ` Block
replace keytabPath with localKeytabPath and localKeytabPrincipal in YarnApplicationMasterRunner and YarnTaskManagerRunner to improve code
added a new option ` Option . EMPTY _ WORD _ OPTIONS ` to ` LineReader ` and updated matcher logic in ` LineReaderImpl
updated method call from writeCommitLog to writeCommitLog in Keyspace . java to ensure proper handling of writeCommitLog configurations
refactor DisplayContents handling in CaptureActivity and PreferencesActivity to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a new test method ` testBatching ` in ` JoinedTableTest . java ` to verify batching functionality to ensure that batching
added exception handling for EntityExistsException in JpaPersistenceService . java to improve error logging for duplicate timestamps in persisting items
removed the deprecated ` format ( ) ` option from the ` RuntimeOptions ` and updated its usage in ` RunCukesByCompositionTest ` to
removed the save ( ) method call from PMS . java to streamline the code by eliminating unnecessary call to save ( )
refactor back key handling logic in ExtendedEditText . java to improve code readability and maintainability
updated the ` newCapacity ` variable from ` int ` to ` int ` and added a new ` Capacity ` class in ` AbstractStringBuilder `
updated method call from goHome ( ) to onNoteSaved ( ) in DetailFragment . java to improve code readability and maintainability by
added ` endnotes ` handling in ` XWPFDocument ` and ` XWPFParagraph ` classes to handle ` Endnotes `
added a clientInfo parameter to the CasAuthenticationTransactionSuccessfulEvent constructor in DefaultAuthenticationManager . java and updated related tests accordingly to include the client
added a test method ` testVersion ` to ` BridjOGRDataStoreTest . java ` to verify the version of ` Bridj
added a new file ` Lifecycle . java ` that implements network error handling to implement network error handling for network errors in the system
updated URL handling in DeviantartRipper . java to handle 404 404 responses to improve error handling and ensure proper logging for 404 404 responses
removed unused imports from BodyTubeShapes , RocketFigure , and RocketFigure classes to simplify code and improve readability by
added a flag ` RETINA ` and updated surface scaling logic in ` PJOGL . java ` to ensure proper texture scaling based on
updated settingsStep to use setInitialValues ( ) instead of getComponent ( ) in FlutterCreateAdditionalSettingsFields . java and added a method to
refactor DiskDocValuesConsumer to use BlockPackedWriter instead of FormatAndBits to improve code readability and maintainability by eliminating redundant code
refactor ` DefaultStatusRoute ` to use ` SortedSet < StatusRoute > ` instead of ` ArrayList < StatusRoute > ` to improve code clarity
removed unnecessary code from GoAwayTest . java to simplify code and improve readability by eliminating unnecessary code
added ` FluentPropertyBeanIntrospector ` to ` ReflectionUtils ` and created a new ` FluentSetterBean ` class in ` EasyRandomTest
updated imports and added a new HttpResponse class in BlockingHttpEndpoint and HttpEndpoint classes to improve code readability and maintainability by centralizing
refactor FileSortByExpressionTest and FileSortByIgnoreCaseExpressionTest to use a prepareFolder method to improve code readability and maintainability by
updated the logging statement for lastAppearedTaskTarget and lastAppearedTaskId in GestureState . java to improve clarity and maintainability of the
added boolean flag ` writeImageScalingInformation ` and ` setImageScalingInformation ` to ` imagePDFConformance ` and ` setOutputTable
added a check for the aggregate function name in TSServiceImpl . java to ensure proper handling of paths in the database
updated ` Nested2 ` and ` WithNestedTest ` classes to extend ` WithNestedTests ` and added a new ` WithNestedTests ` class
added XCapEnable and XCapServerUri selection logic in PresencePanel . java to ensure that the XCapServerUri is selected only when
added a new constant ` STRUTS _ HANDLE _ EXCEPTION ` and updated exception handling logic in ` Dispatcher ` to improve error handling and
added ` stopEditing ` methods to ` CodenameOneImplementation ` , ` TextArea ` , ` TextArea ` , and ` TextArea ` classes to ensure
add null check for group attribute in ControlRate . java and add a new test for non - existing group attribute in TestControlRate . java to
updated the ` showDialog ` method to include a new ` isNewComponent ` parameter and modified the ` selectPreset ` method in ` ComponentConfig
added logging for error and error messages in ChatAnnotation . java to improve error handling and ensure thread safety during message sending
added a check to skip test cases for MS Windows in HTMLDataFlavorTest . java to ensure that the test is only run for MS Windows
added SQL _ SERVER _ SNAPSHOT parameter to the SERIALIZABLE connection in TransactionIsolationLevel . java to enhance transaction isolation handling by
added a loop for closing the new recids in AsyncWriteEngine . java to ensure proper resource management and prevent potential memory leaks
updated import statements in multiple classes to use ` ZipFile . version ( ) ` instead of ` JreCompat . getInstance ( ) . getInstance ( )
added null checks for ` getCommandClass ( ) ` in ` RegisteredServiceSimpleFormController . java ` to prevent potential NullPointerExceptions when `
changed disk _ failure _ policy from best _ effort to ignore in Config . java and added a switch case in CassandraDaemon . java to allow for
changed access modifiers of methods from public to public in RipperInterface . java and RipStatusHandler . java to improve code readability and maintainability
added a check for the address in the filter method in PeerDiscoveryAgent . java to ensure that the filter is only applied when the address is in
removed the setJobIdentifierFactory method from SimpleCommandLineJobRunner to streamline the code by eliminating unnecessary method
updated import statements for AutoRebalanceStrategy and ClusterDataCache in PinotSegmentRebalancer . java to improve code readability and maintainability
refactor DeleteContainer and ContainerConfig classes to utilize a auto - remove flag to improve code clarity and maintainability by reducing redundancy
refactor DefaultSeleneseCommand to use static final int constants and add a new test class DefaultSeleneseCommandTest to improve code clarity
added multipleAttemptsRule class to CreateGlossaryTests . java to enable testing of multiple attempts in tests
updated the method call from ` Schema ( ) ` to ` Components . COMPONENTS _ REF ` in ` ModelResolver . java `
replaced ` deleted ` with ` source ` in ` EntityDeletedEvent ` and updated related tests in ` IdentityZoneEndpointsMockMvcTests ` to improve
added support line matching logic in FormatConfiguration and updated media handling in DLNAMediaInfoParser to ensure proper handling of support line matches and improve
added a new file TestProfileReturnTypePrinting . java that includes a new class TestProfileReturnTypePrinting . java to implement method printing functionality for
added lock and lock handling in ParseConfigUtils . java to ensure proper resource management and prevent potential memory leaks
refactor MinMaxValueBasedSelectionOrderByCombineOperator to use AcquireReleaseColumnsSegmentOperator instead of IntermediateResultsBlock to improve code clarity and
removed the @ Ignore annotation from FirefoxProfileTest . java to clean up the code and improve readability
updated the return statement for display density and bounds information in HasAndroidDeviceDetails . java to improve clarity and maintainability of the code
removed unused imports from multiple Java files to simplify code and improve readability by eliminating unnecessary dependencies
added ` disabledShadow ` and ` disabledForeground ` style to the ` ImportPanel ` class to enhance user experience by providing a clearer color for
removed multiple @ Override annotations from CacheControlImpl . java to improve code readability and maintainability
added a check for empty dates in ScheduledAction and a corresponding test in ScheduledActionTest to ensure proper handling of scheduled execution dates in the future
refactor the upload button handling in ShareActivity to use a Menu for better user experience to improve user experience by providing a simple menu for multi -
refactor multiple Java classes for consistency and clarity to improve maintainability and readability of the codebase
added ` loadMetaData ` method to ` MeXBTExchange ` , ` RippleExchange ` , and ` MeXBTExchange ` classes to
added a new ` WritableSerializer ` to the ` CrawlDbReader ` class and implemented a new ` WritableSerializer ` class to facilitate serialization of
removed unused imports from TestJaspicBasicAuthenticator . java to streamline the code and improve maintainability
added discovery . mdns configuration to MDNSDiscoveryService to provide configuration for the discovery . mdns configuration
added a null check for messageItem before calling scrollToPositionWithOffset to avoid potential NullPointerExceptions when messageItem is null
added ForkJoinWorkerThread to the ForkJoinPool initialization in TestBPIndexReorderer . java to enhance thread management by providing a random thread for improved performance
removed unnecessary assertions for dependencies with DATANODE and NAMENODE in RoleCommandOrderTest . java to improve code readability and maintainability
added a new method ` restoreLocalInfoFromTableInfo ` to ` PartInfo ` to ensure that the ` PartInfo ` class does not throw
updated check statements in JvmUtils , LikeCondition , and AbstractOperationGenerator classes to improve code readability and maintainability
refactor BitmapFontTest to use Matrix4 for transformations and transform matrices to improve performance and maintainability of the image rendering process
added a check for builtin aggregates in the StreamPhysicalPythonGroupWindowAggregateRule . java file to ensure proper handling of builtin aggregates
removed the ` hasPendingEcho ` flag and updated the ` hasPendingEcho ` method in ` EndpointState ` and ` Gossiper ` to
added a method ` getUnreachableTokenOwners ( ) ` to ` Gossiper ` , ` StorageProxy ` , and ` Storage
refactor CoordMultiplyReplacer to unwrap ExpressionNode instead of ExpressionNode in CoordMultiplyReplacer . java and add a new test for
added a null check for the saved content type in FormAuthenticator and SavedRequest classes to ensure proper handling of content type in the application
added null check for localGraphicsEnvironment and modified display assignment logic in XToolkit . java to improve robustness by preventing potential NullPointerExceptions
refactor RecommenderJob , RecommenderJob , and AbstractJob classes to improve code organization and maintainability
replaced ` metaLock ` with ` metaWriteLock ` and ` metaReadLock ` and ` metaReadLock ` and ` metaWriteLock ` to improve
added a new test method ` testReadIdentityProviderInOtherZone _ Using _ Zones _ Token ` in ` IdentityProviderEndpointsMockMvcTests `
updated JobHandle handling in ObjectTypeNode and ReteooWorkingMemory to use ExpireJob instead of JobHandle to ensure timestamp is not null
removed unused import of Service in SendTicketGrantingTicketActionTests . java to streamline code by eliminating unnecessary dependencies
added logging for updating subscription versions in RebalancePushImpl . java to improve tracking of rebalance changes in the cluster
added a new ` detachedMkDirMode ` property and updated related configurations in multiple configuration files to enhance configuration management and ensure proper handling of
added a new test method for reinitializing the follower in the cluster to ensure that the follower is restarted when the message is not
updated the default label pattern from " authors3 " to " auth " in the JabRefPreferences . java file to ensure compatibility with the new
replaced ` getLd ( ) . getParseTimeDeps ( ) ` with ` getCxxPlatform ( ) ` in ` DBinaryDescription `
added null checks for oAuthService and refactored initialization logic in GoogleCloudAPI and GoogleTTSService classes to improve code robustness and
updated file deletion logic in GenericFileOnCompletion and added a new test for file deletion in FileConsumeDoneFileIssueTest to improve error handling and
added a boolean variable ` reopenReaders ` to the ` SolrConfig ` and modified the condition in ` SolrCore ` to ensure proper handling of
added a new constant for the DIALECT _ VERSION in FreeplaneVersion . java and added dialect attribute in MapWriter . java to provide a
added ` currentDate ` and ` currentTimestamp ` methods to ` Update ` , ` UpdateTests ` , and ` updateObject ` classes to enhance
added a dup method in ` Attr ` and created a new ` PrimitiveTypeInBoundForMethodRefTest ` class in ` PrimitiveTypeInBound
replaced ` Condition ` interface with ` Condition ` in multiple test classes to improve code readability and maintainability
updated imports in TestFacetsCollector . java to use constantscorequery instead of Term to improve performance and maintainability of the code
removed multiple calls to " java . lang . invoke . AbstractValidatingLambdaMetafactory " and " java . lang . invoke . Invoke . Type
updated the ` providesUploadController ` method to include direct nearby upload preferences in ` CommonsApplicationModule ` to enhance functionality by allowing direct nearby upload preferences
added support for sysDummy1 and " SYSDUMMY1 " in multiple parser classes to ensure proper handling of sysDummy1 and sys
updated logging statements in TraceGatewayEnvironmentPostProcessor , TraceGatewayEnvironmentPostProcessor , and SamplerAutoConfigurationTests to improve clarity and maintainability of
added POIXMLProperties and modified property retrieval logic in WorkbookProperties and TestPOIXMLPropertiesExtractor to ensure proper handling of POI XML properties
fix ( geotiff ) : fix floatNegInfinitynodata ( ) in geotiffreader
refactor CLIDriver and SessionState classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
replaced ` Executor ` with ` Scheduler ` and updated ` httpScheduler ` in ` MockRestAdapter ` and ` MockRestAdapterTest ` to improve
added a default method ` selectByRuleIdSet ` to ` RuleConditionMapper ` and modified the ` selectByRuleIdSet0 ` method
added a method ` addExitDescription ` to ` ExitStatus ` and updated exception handling in ` AbstractJob ` , ` AbstractStep ` , and
added a condition to check if the entity player is not the player in the MultiblockRenderHandler to ensure proper handling of the player ' s entity
updated ` columnFamily ` and ` columnFamilyColumn ` parameters from ` columnFamily ` to ` columnFamilyColumn ` and ` columnFamilyColumn `
updated range length calculation in PlotConfiguration . java for consistency to improve code readability and maintainability
refactor the ` buildUIAlertView ` method to use ` VoidBlock1 ` instead of ` UIAlertViewDelegateAdapter ` to improve code
replaced params . getBuildTarget ( ) with nativeLinkable . getBuildTarget ( ) in PythonUtil . java to improve code clarity and maintain
updated the method signature from ` arrayValue ` to ` values ` in ` Value ` , ` HasValue ` , and ` HasValue ` classes to improve
removed Assert . assertNull ( item ) from AdvServiceTest . java to simplify the test by removing unnecessary assertions
replace ` potentiallyConvertMapKey ` with ` potentiallyEscapeMapKey ` in ` MappingMongoConverter ` to improve code readability and maintainability by
updated Timber descriptions in NearbyMapFragment . java to improve clarity to enhance readability and maintainability of image descriptions
camel - 14263 : camel - core - use the deprecated column instead of javatype
updated FuzzyLikeThisQuery to handle non - existing terms in FuzzyLikeThisQuery and added a test for non - existing fields to ensure
updated the ` writeApplicationsLinks ` method to accept a ` boolean tabularList ` parameter and modified the ` separator ` parameter to enhance flexibility
updated import statements and refactored IdentifierService instantiation in CreateMissingIdentifiers . java to improve code readability and maintainability by centralizing the
updated the method call from ` bytes . length ` to ` bw . getLength ( ) ` in ` VectorColumnAssignFactory . java ` to ensure
added a return value to the getDisplayScript method in LocaleNameProvider . java to ensure that the method returns null instead of an abstract method
updated variable names from ` keyToPress ` to ` sequence ` in ` RemoteWebDriver . java ` and ` BasicKeyboardInterfaceTest . java
updated the initialization of cosObjects in COSArrayList . java to use the size of the list size of the list to ensure that the list is
added synchronization for active interfaces in NetworkConfigurationWatcher and its implementation in NetworkManagerListenerImpl to ensure thread safety and prevent potential memory leaks
refactor HSSFWorkbook to utilize a separate method for retrieving embedded objects in HSSFWorkbook to improve code readability and maintainability
removed unused import of Shdr in ShaderNodeLoaderDelegate . java to streamline code by eliminating unnecessary dependencies
refactor role params handling in AmbariManagementControllerImpl to use a TreeMap instead of a TreeMap to improve code readability and maintainability by
added a check for " Symbol " font in PDSimpleFont . java to return true if the base font is a symbol instead of a symbol
replaced GlStateManager . popAttrib ( ) with GL11 . glPopAttrib ( ) in ModelHourglass . java to ensure proper handling of
updated LiveTvGuideActivity and ProgramListAdapter to use mCurrentGuideStart instead of instance variables to improve code readability and maintainability by
refactor MockGateway and MainMockTransformer to use Whitebox for method invocation to improve code readability and maintainability by centralizing method invocation logic
added libfreetype . so and libfontmanager . so to the dlopen method in JREUtils . java to ensure compatibility with the new
replaced ` replacer1 ` with ` exprWithDummyArg ` in ` FunctionParser . java ` to improve clarity and maintainability of the code
graalvm : fix checkstyle issue in loopsafepointeliminationphase
refactor type handling in TypeFrameModelingVisitor to improve clarity and consistency to enhance code readability and maintainability by reducing duplication
added a new ` LocalizedString ` class and modified ` Attr ` and ` Attr ` classes to utilize a new ` LocalizedString `
added a ` disableClasspathSearch ` property and its getter / setter methods to ` ServerConfig ` and ` DefaultContainer ` to enable the configuration of
replaced ` formats ` with ` final ` and updated the initialization of ` minBufferSize ` and ` maxBufferSize ` in ` DataLine . java `
updated the ` retries ( ) ` method from 0 to default 2 in ` Reference . java ` and updated the ` retries ( ) ` method to
added JSON handling for settings in TexturePacker . java to ensure proper handling of settings in the application
added a new view for uploading images and wiki text in AchievementsFragment . java to enhance user experience by providing a clearer text view
added test cases for ` beginEnter ( ) ` and ` endRunAnnotationProcessors ( ) ` in ` TranslatingJavacPhaseTracer
added category info handling in CategoryInterface and MwQueryPage classes to ensure proper handling of category information in the query
updated assertion messages in AuthzAuthenticationRequest . java to improve clarity to enhance readability and maintainability of the code
added accessibility management functionality to TaskbarStashController to enhance user experience by allowing the taskbar auto - hide timeout for improved user experience
added a check for ` ^ ' ' in signature handling in ` GenericSignatureParser . java ` to ensure that ` NoSuchElementException ` does not throw
updated access flags from ACC _ STATIC to ACC _ STATIC in ClassVisitorDriverFromElement and added new test cases in StubJarTest to
added null checks for the in variable in IntervalFilter . java and added null checks in LowpassIntervalsSource . java to ensure proper handling of
added a new test method ` testEntrySetIteratorLastHashNext ` and ` testEntrySetIteratorLastNext ` to ` MapInterfaceTest `
added a serialVersionUID field to the TreeMap class to ensure proper serialization of the TreeMap class
updated the createdAt method from ` Instant . ofEpochMilli ` to ` Instant . ofEpochSecond ` in ImageData . java to ensure accurate
added support for ` grobcovF2m ` and ` grobcovC1 ` in ` SingularWebService ` and ` CAS
added imports for EncryptionUtils and updated key deletion logic in AccountRemovalJob . java to enhance encryption capabilities for account removal operations
updated the ` keepAliveHeaderValue ` method to use ` AsyncHttpProviderUtils . keepAliveHeaderValue ` instead of ` JDKAsyncHttpProviderUtils .
added a check for empty interceptorList in PostJoinMapOperation . java and a corresponding test in PostJoinMapOperationTest . java to ensure that
removed multiple processors for StandardInliningCDATASection , JAVASCRIPT , and CSS in StandardDialect . java to streamline code by eliminating unnecessary processors
removed unnecessary spillEnabled parameter from BaseHybridHashTable and LongHybridHashTable classes to simplify the codebase by eliminating unnecessary spill configuration
refactor environment variable handling in EnvironmentVariableHelper . java to improve clarity and consistency to enhance code readability and maintainability by centralizing environment variable
updated import statements and modified import statements in DefaultActionMapper . java to improve code readability and maintainability
added import statement for SerializableMode in Mockito and PluginSwitch classes to improve code readability and maintainability
added null check for fieldInjectionPoint before throwing an exception to prevent potential NullPointerExceptions when fieldInjectionPoint is not set
updated Expression array handling and added isolation level handling in Parser and Mode classes to enhance flexibility in handling isolation level clauses and ensure proper handling of isolation
updated HIVE _ SERVER2 _ TRANSPORT _ MODE from ConfVars to HIVE _ SERVER2 _ THRIFT _
added a method ` isCacheable ( LeafReaderContext ctx ) ` to ` GlobalOrdinalsWithScoreQuery ` to check if the query is
added a new file TestStrangeControl . java that tests the StrangeControl class to facilitate testing of StrangeControl functionality in the loop
updated method calls from " % s . json " to " % s . jslib " in JsFile , JsLibrary , and J
added selectionStart , selectionEnd , and selectionStart fields to ShadowEditText . java to enhance user experience by allowing dynamic selection based on index and end
refactor GRPCEnrichment to use Closeable instead of void to improve resource management and ensure proper shutdown of GRPC servers
added ` use ` method to ` Jooby ` and ` Router ` classes and updated related test cases in ` Jooby ` and `
added null check for fst in FreeTextSuggester . java to prevent potential NullPointerException when Lookup not supported
added newline character to the output string in T4975569 . java and updated the verify method in T6729471 . java to
added loading of abi writer class in JavacInMemoryStep . java to ensure proper handling of abi writer class loading
added @ SuppressWarnings ( " BooleanMethodIsAlwaysInverted " ) annotation to PubRoot . java to suppress warnings related to BooleanMethod
added a condition to check if the PullMessageService is stopped before executing the scheduledExecutorService to ensure that the scheduledExecutorService is only scheduled when the shutdown
refactor EnergyEndpointer class to improve code organization to enhance maintainability and readability of the code
refactor component preset handling in ComponentPresetChooserDialog to improve code readability and maintainability to enhance maintainability and maintainability of the code
removed unused imports from BazaarRepository , CVSRepository , and IndexDatabase classes to streamline code by eliminating unnecessary dependencies
refactor switch case statements in GoogleSheetsEndpoint . java to improve code readability and maintainability
added a default value for the ` getExportedHeaderStyle ( ) ` method in ` CxxLibraryDescription ` and modified ` CxxLibrary
deleted the files Constants . java and DistanceUtils . java to remove unused files to streamline the codebase
updated disk delimiter handling in RandomPartitioner . java to use splitPoint instead of split to improve readability and maintainability of the code
refactor JDK22OrLater imports and add FallbackLinker initialization logic in NativeImageGenerator and JDKInitializationFeature
added a new test method ` testCreateInline ` to ` RoleBindingTest ` and modified ` RoleBindingOperationsImpl ` to handle role bindings to
added logging for session cookie configurations in UaaSessionCookieConfig . java to enhance logging capabilities for session cookie configurations
updated file name prefix calculation to use cal . get ( Calendar . DAY _ OF _ YEAR ) instead of log . get ( Calendar . DAY
updated condition in ObservableBlockingSubscribe . java to improve clarity to enhance readability and maintainability of the code
added error handling for invalid options in JavapTask and created a new class T8033711 to improve error handling and provide clearer error
replaced direct calls to ` collect ( toList ( ) ) ` with ` toList ( ) ` for consistency to improve code readability and maintain
updated logging level from error to warn in TaskDriver . java to improve clarity and consistency in logging behavior
[ hotfix ] [ network ] add tieredstorage configuration to input gatespecutils
updated the ` isNotSuccessStatus ` method to include a ` isNotSuccessStatus ` method to improve code readability and maintainability by using
added config . useGL20 = true in Cuboc . java and updated LwjglApplication initialization in CubocDesktop . java
removed redundant check for VoidType in JimpleBody . java to simplify code and improve readability
replaced ` DefaultSourcePathResolver ` with ` AddToRuleKey ` and refactored ` OutputMacroExpander ` to use ` Arg `
updated assertions in ` LogExceptionSqlTest ` and ` SimpleTestInClusterSupport ` to use ` lightJob ` instead of ` isTerminal (
added a check for " / build / " files in the MergeWordsListTask class to ensure that only valid files are processed
updated method signatures in FeedbackSessionResultsBundle , InstructorFeedbackResponseComment , and InstructorFeedbackResponseComment classes to improve code clarity
refactor conditional checks in Container . java for consistency to improve code readability and maintainability
added a new file ` TestEscapeThroughInvoke . java ` implementing a new ` TestEscapeThroughInvoke . java ` implementing a ` TestEscapeThrough
replaced the skip method with IOUtils . read method in FilePreviewService . java to improve readability and maintainability of the code
updated the init method from PoolProperties to PoolProperties and added a new test for error handling in JdbcInterceptor classes to improve error reporting and ensure proper
changed catch block from Exception to Throwable in CoreContainer . java to improve error handling by catching Throwable instead of Exception
modified LruBlockCache to return a boolean for eviction in LruBlockCache and added a test for eviction progress in TestLruBlockCache
removed redundant check for taskCount in RecentsView . java to simplify code and improve readability
updated sleep duration from 1000ms to 5000ms in HelixBrokerStarter and HelixServerStarter to improve thread safety and maintainability of
added ` CoinmateExchange ` , ` CoinmateStatic ` , ` CoinmateMetadataServiceRaw ` , and ` CoinmateMetadataServiceRaw `
updated validation logic in DefaultModelValidator and updated related tests in DefaultModelValidatorTest to ensure proper handling of file paths within the project directory
refactor COSWriter to handle null values and update key handling in COSWriter to improve code readability and maintainability by centralizing key
added functionality to populate and populate DisplayData in PTransform and PTransform classes to enhance display data management and ensure proper handling of display data in P
updated assertion logic in SubjectTest . java to use assertThat instead of a new DefaultSubject instance to improve clarity and consistency in assertion handling
remove jdk . certpath . disabledAlgorithms property in clientjsseserverjsse
updated error messages for subcommand groups in OptionData . java to improve clarity and consistency in error reporting
refactor module - info . java to improve code readability to enhance maintainability and maintainability of the code
added error handling for unknown server errors in IOSImplementation . java to improve error handling and prevent potential NullPointerExceptions
updated variable name from ` sCheckingEvents ` to ` mCheckingEvents ` in ` LauncherInstrumentation . java ` and ` LogEventChecker .
refactor exception handling in FileSinkOperator to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
added diagnostic handling to the SchemaGenerator class to improve code readability and maintainability by utilizing diagnostics
updated the ` generateErrorMessage ` method to use ` OptiqSemanticException ` instead of ` RuntimeException ` to improve clarity and consistency in error handling
refactor DataSourceMonitorTests class to improve code readability to enhance maintainability and maintainability of the code
added a HashSet < String > to the loadedResourcePaths list in ClasspathMethodScanner . java to ensure that loadedResourcePaths is only added when
added null check for the test instance before accessing it to avoid potential NullPointerExceptions when the test instance is not initialized
added null check for response in RoutingInBoundHandler . java to avoid potential NullPointerExceptions when response is null
added ` natIp ` annotation to ` EkeyConfiguration ` , ` EkeyHandler ` , and ` EkeyUdpPacketReceiver ` to
updated import statements for ArrowByteBufAllocator and ArrowByteChannelAdapter to use ArrowByteBufAllocator instead of BaseAllocator to improve code
refactor CommitLogArchiver , CommitLogReplayer , and JdbcDecimalTest classes to improve code organization and maintainability
http : / / issues . apache . org / jira / browse / amq - 2616 - unexpect / amq - 2
refactor SubscriptionHelper to use AtomicReference and AtomicLong instead of Flow . Subscription in MultiTimeout . java to improve code readability and maintainability by central
added compaction counter handling in LeveledManifest . java and updated related methods in LeveledManifest . java to improve compaction management and ensure accurate
added a @ Test annotation to TestOrcTimezone1 . java to enable testing of the TestOrcTimezone1 class
refactor metrics handling in Debug . java for improved readability and maintainability to enhance code clarity and maintainability by centralizing metrics matching logic
added error handling for JSON processing in multiple classes to improve robustness by throwing an exception when retrieving instance to segments map
added null check for column class and created a new test class for 6888156 to ensure proper handling of Object types in JTable
added a conditional check for ` Environment . SHELL . exists ( ) ` before adding ` Environment . SHELL ` to ` args `
updated the deleteWithoutSubscriptions method from 10 to 1 in DatabaseCleaningService . java to ensure proper deletion of feed without subscriptions
updated import statements and added a new class with dependency in MockitoExtension . java and JunitJupiterTest . java to improve code clarity and
refactor FieldMonitor class to improve code readability to enhance maintainability and maintainability of the code
removed deleteFilesAfterClose ( ) and fileMmapEnableIfSupported ( ) from BTreeMapTest . java to improve code readability and
updated the iterator initialization logic in SortedIntList . java and added a new SortedIntListTest . java file to improve iterator management and
updated exception handling in DefaultRemoteProxy . java and removed printStackTrace ( ) from JMXHelper . java to streamline error handling and improve code clarity
updated the default writebuffer size from 4MB to 64MB in RocksDBConfigurableOptions . java to ensure consistent write buffer size for better
updated the constructor of ` Style . java ` from ` true ` to ` getFont ( ) ` in ` Style . java ` to improve code clarity
updated the argument name from " message " to " no encoding " in FacebookShare . java to improve clarity and consistency in message handling
removed the JSON graph configuration from the SamzaRunner to streamline the configuration for JSON graph management
replaced Vector3f with MouseInput in HelloAudio . java to improve code readability and maintainability by using a more descriptive Vector3
refactor LoopRotateBadNodeBudget class to improve code readability to enhance maintainability and maintainability of the code
updated ` convertToMongoType ` methods to accept ` TypeInformation < ? > ` instead of ` Object ` to enhance type conversion functionality by allowing generic
add a test for imaginaryUnit in GeoInputBoxLinkedGeoTest and update related geo text in GeoInputBoxRenderer to ensure proper handling of imaginary
[ selenium - 219 ] fix typo in sendkeytoactiveelement . sendkeytoactiveelement
added methods to retrieve and scale multi - image images in AddAndScaleMultiImage . java to ensure proper handling of negative target sizes in image
removed the method ` extendArgumentCheck ( ) ` and ` extendWrapStore ( Engine engine ) ` from ` DBMaker . java ` to simplify
added a call to updateShiftStateNow ( ) in AnySoftKeyboard . java to ensure that the shift state is updated correctly
removed the ` detectedActivity ` variable and updated the ` detectedActivity ` field from ` SerializableLocation ` and ` SerializableLocation ` to simplify the code
updated import statements from ` ExtensionConfig ` to ` protocol ` in multiple Java files to ensure consistency in naming conventions across the application
removed unused import of Buildable in AaptPackageResources . java to streamline code by eliminating unnecessary dependencies
refactor file handling in CodeException , CodeException , ConstantInvokeDynamic , and ConstantMethodHandle classes to improve readability and maintainability of file
updated the error message from " Invalid Upgrade protocol " to " Status " in WebSocketUpgradeHandler . java to improve clarity of the error message for
updated blockMode assignment in P11Cipher . java to use MODE _ ECB instead of MODE _ ECB to improve code readability and maintainability by
refactor Mockito class to improve code readability to enhance maintainability and maintainability of the code
refactor permission checks in Merge . java for better readability to improve code clarity and maintainability by reducing redundancy
removed deprecated methods in HttpContentResponse , HttpRequest , and HttpResponse classes to streamline code and improve maintainability
replaced ` com . sun . speech . freetts . en . us . PhoneSet ` with ` de . dfki . lt . m
updated the ` stripQuotes ` method to use ` LinkedHashMap < String , String > ` instead of ` HashMap < String , String > ` to
replaced the Rendering class with a new method ` updateRendering ` in ` DLNAResource ` to improve code readability and maintainability by
added a list of resolution repositories in DefaultPluginManager . java to ensure that resolution groups are included in the resolution group
refactor CxfRsProducerClientFactoryCache2Test and CxfRsProducerClientFactoryCacheTest to use ApplicationContext instead of a
refactor PhysicsClient class to improve code organization to enhance maintainability and readability of the code
added JUnit @ Ignore annotation to SessionTest . java to temporarily disable test cases for frequent failures
added a new File instance to create a new File instance to ensure that the file is created only when the name is specified
added a deprecated method ` handleAll ( ) ` to ` TryType ` class to indicate that the ` handleAll ( ) ` method is deprecated
added a new file ` ChannelTest . java ` with a test class ` TestDefaultConstructor ` and modified ` Channel . java ` to ensure that
added logging and logging methods to GenericDAOImpl , ForumServiceImpl , and ForumServiceImpl classes to enhance debugging capabilities and ensure proper logging of stack
removed the @ Test annotation from FormLoginIntegrationTests . java to improve code readability and maintainability
added conditional checks for arguments in FunDefBase and ParenthesesFunDef classes to ensure proper handling of arguments for functionalities
refactor config retrieval logic in CheckDatabaseHelper to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated the ` supressWarnings ` list to suppressWarnings ` and added a conditional check for InnocuousThread to ensure suppressWarnings is only
updated JsonToken handling in JsonTreeReader and added a new test for next JSON element parsing in JsonElementReaderTest to improve readability and ensure correct
added a new option ` withDashArguments ` in ` TestCommand . java ` and a new test method in ` ExternalTestRunnerIntegrationTest . java `
added a method ` dedup ` and ` indexSolr ` to ` SolrDeleteDuplicates ` , ` SolrIndexer ` , and ` Solr
[ hotfix ] [ table - planner ] add support for blink planner in streaming mode
added a call to clearDatabase ( ) in MssqlIntegrationTest . java to ensure the database is cleared before proceeding
refactor progress handling and display logic in Progress . java and RSSReader . java to improve code readability and maintainability by centralizing progress
added a condition to check if the parent file exists before accessing it to prevent potential NullPointerExceptions when the parent file is not exists
added methods to write and close POI documents in IOUtils . java to ensure proper resource management and prevent potential resource leaks
replaced println statements with print statements in JavaBuild . java to improve readability and maintainability of the code
changed the visibility of the ` _ root ` field from ` Box ` to ` BlockBox ` and added getter methods for ` _ dotsPerPoint
updated the ` apply ` method to accept a ` final ` parameter and modified the ` apply ` method in ` CustomQueryFilterFactory ` to enhance
http : / / issues . apache . org / activemq / browse / amq - 118 - add default port to the router
updated SnmpTargetHandler and SnmpTargetHandlerTest to use ThingStatus . UNKNOWN in various test classes to improve status management and ensure proper cleanup of
added a list of instructors with submit privileges in the instructor list to ensure that instructors with submit privileges are included in the instructor list
added a @ Incubating annotation to the AvailableSettings class to indicate that the AvailableSettings class is outdated and should not be used
refactor path handling in FileResolverImpl . java and add war file resolution logic in WarFileResolverTest . java to improve code readability and
updated the string representation of newFlushedSize from " newFlushedSize " to " newFlushedSize " in DocumentsWriterPerThread .
updated debug output to use dirt . getUnlocalizedName ( ) instead of dirt . func _ 149739 _ a ( ) to improve
updated conditional checks in ImageProcessor . java to use stripWhitespaceY instead of stripWhitespaceX to improve code readability and maintainability
updated the lazy weak lock initialization logic in FeedRefreshUpdater . java to increase thread allocation for improved performance
updated the ` MetadataIndexNode . deserializeFrom ` method to include a ` exactSearch ` parameter in ` MetadataIndexNode . deserializeFrom ` method
removed the ` DateFormat ` parameter from the ` makeResultFromDelimitedString ` method in ` CSVSaveService . java ` to simplify the method signature
added Dimension to layout FList in NavigationShareTab . java to improve UI responsiveness by allowing layout of FList elements
replaced OffsetAttribute with State in BeiderMorseFilter and added a new test for CustomAttribute in TestBeiderMorseFilter to
refactor UpnpAudioSinkReg , UpnpRendererHandler , UpnpRendererHandler , UpnpEntryQueue , and UpnpEntryQueue classes
update burst position setting in LensWarp . java to use a BlockPos instead of a block position to ensure proper positioning for bursts
added ` toJson ` method to ` JsonTest ` and updated import statements in ` JsonTest . java ` to improve test reliability and ensure proper
refactor MutableContextDataSupplier class to improve code organization to enhance maintainability and readability of the code
updated exception handling from Exception to Throwable in CoreContainer . java to improve error handling and ensure proper logging of exceptions
updated KubernetesMockServer from true to https in KubernetesServer . java to ensure compatibility with the latest Kubernetes
refactor ForeignCallNode instantiation to use UnaryMathIntrinsicNode for UnaryMathIntrinsicNode to improve code readability and maintainability by using
updated HTTP response handling in DefaultServlet to use POST instead of METHOD _ NOT _ ALLOWED to improve clarity and consistency in response handling
added Locale . US for DecimalFormatSymbols in TiffExtractor . java to enhance DecimalFormat functionality by allowing locale - specific DecimalFormat symbols
updated exception handling in ShowFileRequestHandler and added a new test for 404 404 responses in SolrServerTest to improve error handling and ensure proper handling of
added exception handling functionality to the ReflectorClassWriter class to enhance exception handling capabilities for better exception handling
added clamp method to Vector2 and implemented clamp method in Vector2 to improve clamp functionality and ensure proper clamping of vector objects
added OAuth2 authentication handling in ChainedTokenGranter . java to ensure requested scopes are set when the incoming token is requested
refactor BC _ instanceof class to improve code readability to enhance maintainability and maintainability of the code
removed the setSaveFlags ( SAVE _ ALL ) method from EditorBottomSheetBehavior . java to improve code readability and maintainability
added JUnit @ ExtendWith annotation to UaaUrlUtilsTest . java to enhance test coverage and ensure compatibility with the latest JUnit tests
hhh - 16257 make nativequeryscalarreturn a domaintype instead of type parameter
added synchronization for aatInfo and modified return logic in SunLayoutEngine . java to ensure thread safety and prevent potential memory leaks
updated TypedSet to use IntArrayList instead of IntBigArray and IntArrayList to improve performance and maintainability of the code
updated the driver variable name from HTML _ UNIT _ JS to REMOTE in multiple classes to improve clarity and maintainability of the code
refactor BrokerRequestUtils to improve code readability to enhance maintainability and maintainability of the code
refactor InjectorBuilderImpl to use a Map < Class < ? > , Object > instanceMap for improved clarity to enhance code readability and
replaced ` ParserConfig . getAbsolutePathToBuildFile ` with ` getBasePath ( ) ` in ` BuildTargetToRawTargetNodeTransformer . java `
added a null check for the value before setting the result to avoid potential NullPointerExceptions when the value is null
refactor connection management in OperationSetPersistentPresenceJabberImpl and ProtocolProviderServiceJabberImpl to improve code clarity and maintainability by
updated the DEFAULT _ LOAD _ FACTOR constant from 0 . 67F to 0 . 67F to improve code readability and maintainability
added a method ` getAllDataTypePhysicalVariations ` to ` VectorizationContext ` , ` Vectorizer ` , and ` VectorPTFDesc `
updated package structure from com . google . zxing to com . google . zxing . client . j2se in HtmlAssetTranslator
removed unnecessary conditional checks for VERTICAL _ SWIPE _ INDICATOR and RECENTS _ CLEAR _ ALL _ BUTTON to
added Entity annotation to BaseActivityEventEntity . java to enhance entity management by allowing Entity to be attached
added partition sections for TouchInt in NavBarSwipeInteractionHandler , TouchInteractionService , and TraceHelper classes to improve code readability and maintainability
added a new file ` InvalidOptions . java ` that implements an ` InvalidOptions . java ` that validates the usage of ` javap `
added a check for supported bounds in DisplayController . java to check if the number of displayed displays does not match the current size of supported bounds
refactor OAuth20UsernamePasswordAuthenticator and OAuth20Utils to use OAuthUtils for client ID and client secret retrieval to improve code clarity and maintainability
changed the ` _ unwrapServletException ` variable from false to true in ` ErrorPageErrorHandler ` , ` ErrorPageErrorHandler ` , and ` ErrorPage
added handling for status updates in PackageUpdatedTask . java to ensure proper handling of status information
[ seda ] fix default unbounded queue size in seda component
added batchUpdateStart ( ) , batchUpdateEnd ( ) , and batchUpdateEnd ( ) methods to Kernel , App , and App classes to
added HttpClient configuration handling in ThirdEyeApplication . java to enhance HttpClient configuration management by allowing custom HttpClient configurations
added a Sort parameter to the JpaJobPersistenceImpl and JobInstanceFetchRequest classes to enable sorting functionality for job instances
refactor CryptoFacilitiesTradeService to use OpenOrders instead of ExchangeException to improve code readability and maintainability by centralizing
added CancelEventTimer to manage keyboard canceling events in AlgebraViewWeb . java to improve user experience by preventing user canceling the keyboard
refactor memMove methods to use NativeFunctionInterfaceRuntime for improved code readability and maintainability to enhance code clarity and maintainability by centralizing
refactor method signatures in BindLdapAuthenticationHandler and ResolverTestConfig to improve code readability and maintainability
added a blockToolTip property and its getter / setter methods to ToolTipManagerW and ModeToggleMenu classes to enhance user experience by allowing customization of the
added a ` timeStyle ` parameter to ` DefaultDateTypeAdapter ` and updated related methods in ` GsonBuilder ` and ` GsonBuilder ` to
replaced " UID " with " > " in playerSet . append ( " > " ) in ListCommand . java to improve code readability and
added a check to return a List < Z > instead of a List < Z > to prevent potential NullPointerExceptions when the list is empty
added exception handling for CommandException in ParametricCallable . java to ensure proper handling of CommandException instances
added a boolean parameter to the getLikeExpression method in VectorizationContext . java and updated related methods in VectorizationContext . java to enhance functionality
added start and stop methods to StreamSupplierComponent , NativeStreamSupplierComponentImpl , and NativeStreamSupplierComponentImpl classes to enable dynamic start and stop
removed the ` runChild ` method and modified the ` runChild ` method in ` LuceneTestCase . java ` to streamline the code by eliminating
refactor multiple Java classes for consistency and consistency to improve maintainability and readability of the codebase
refactor context handling in DefaultServlet to use initContextHandler method to improve code readability and maintainability by centralizing context handling logic
added a new test method ` testRouteBuilderRef ` to the ` OSGiBlueprintTestSupport ` class to ensure that the ` OSG
updated assertions in TestExecuteStreamCommand to include a check for the existence of " fffffffffffffffffffffffffffffff " in the flow file to ensure
refactor returnTypeSubstitutable and returnTypeSubstitutable methods in Types . java to improve code readability and maintainability by
added ThrottleType enum and its getter and setter methods for throttleType in TestExecutor . java to enhance flexibility in handling throttling and
updated color assignment in ColorBleedEffect . java and added a conditional check for blendSrcFunc in SpriteBatch . java to ensure proper
refactor Annotation and AnnotatedElement classes for improved clarity to enhance maintainability and readability of the codebase
added a new interface ` Model ` and updated the ` Sheet ` and ` Workbook ` classes to implement the model interface to implement the model interface
updated filter patterns from " ? i " to " CAMEL _ FILTER _ PATTERN " in multiple classes to improve clarity and consistency in filter
added a boolean flag ` clearEntityManager ` to ` JpaItemWriter ` and its implementations in ` JpaItemWriterBuilder ` and `
added null checks for ` info ` in ` InstallShortcutReceiver ` , ` LauncherModel ` , and ` LauncherModel ` to prevent potential
added a new boolean parameter ` true ` to ` TwoDimensionalCollectionValuedMap ` in ` CoreMapNodePatternTrigger . java ` to
updated the host and exchange name from " btc - e " to " wex " in WexExchange . java to improve clarity and consistency
added null checks for columnReaders and reader in OrcEncodedDataConsumer , EncodedTreeReaderFactory , and EncodedTreeReaderFactory to
added null check for files in SegmentInfos . java and a test for file deletion in TestIndexReader . java to ensure proper handling of file deletion
updated search parameter types in HSearchSortHelperImpl and FhirResourceDaoR4SearchWithElasticSearchIT to use ITestDataBuilder for
updated BigDecimal calculation to handle negative decimal values instead of setScale to ensure accurate rounding of decimal values
updated limit checks from 1 to 0 in RangeInputStream , RangeReader , and RangeReader classes to ensure proper handling of negative limit values
camel - 14263 : camel - spring - config : add timeutils . printduration ( ) to debug log .
updated the ` getNextChunk ` method to include ` segmentStartTimeInPeriodUs ` instead of ` startTimeUs ` in ` HlsChunk
updated package names from ` com . apache . lucene . xmlparser . builders ` to ` org . apache . lucene . util . LuceneTestCase
added a call to setNextInput in OutputHandler and corresponding test cases in StatefulOperatorTest to ensure proper handling of stateful operations in the
removed null check for fill and stroke in Area and Line classes to simplify code and improve readability by eliminating unnecessary null checks
removed the ` Blockchain ` constructor and modified the ` dbExists ` method in ` Blockchain ` and ` BlockchainTest ` to streamline
added trim ( ) method to SQLPlusSupport . java to improve code readability and maintainability
added async configuration for sockets in Http11AprProtocol . java to ensure sockets are only set when possible
updated divider location calculation in DockSplitPaneW . java to ensure proper handling of divider locations
added health check methods to ControllerMeter and modified health check methods in PinotControllerHealthCheck to enhance health check functionality and provide better error handling for service
added visibility of sharedAvatars item in LocalFileListAdapter to enhance user experience by allowing shared avatars to be displayed
updated the scss files from " org / geogebra / mebis / mow . scss " to " org / geog
refactor conditional checks in multiple classes to improve code readability to enhance maintainability and maintainability of the code
added logging logic for command execution in LogInterceptor . java to ensure proper execution of command execution based on logging level
replaced CountDownLatch with assertWaitUntil for finished spans in EventBusTracingTestBase . java to ensure that finished spans are processed before proceeding
refactor QueryParser to use Locale . getDefault ( ) instead of Locale . getDefault ( ) to simplify locale handling and improve code readability
replaced ` Arrays . asList ` with ` Collections . singletonList ` in ` EntryCustomizationDialog ` , ` EntryCustomizationDialog ` , and ` FieldSet
make rulebaseimpl class public and add a new rulebaseimpl class to improve code clarity and maintainability
added a new class ` OcspUnauthorized ` and created a new ` OcspUnauthorized ` class for handling UNAUTHORIZED cases to enhance
added serverState variable and modified sleep duration in SSL . java to improve server state management and ensure proper exception handling for server failures
added a new constant ` COUNTER _ OPEN _ CONNECTION _ COUNT ` and updated related methods in ` SourceCounterMBean ` and ` A
changed the ` execute ` method from ` to ` public ` in ` ExecutionStrategy ` , ` ExecutorServiceExecutionStrategy ` , and ` ExecutorServiceExecutionStrategy
refactor ` createDefaultJavaPackageFinder ` method to return ` ImmutableSet < String > ` instead of ` ImmutableSet < String > ` to improve code
added PrintWriter to the OutputWriter initialization in ScriptExecutable . java to ensure proper PrintWriter usage for output output
updated FileSourceTextLinesITCase to use UUID for staging files to ensure compatibility with UUID generation for staging files
added import statement for DataTable in JRubyStepDefinition . java to enhance code readability and maintainability
updated setVisibility methods to use View . VISIBLE instead of View . VISIBLE in SearchImagesRenderer and ApacheHttpClientMediaWikiApi to improve visibility and
refactor ReadSentimentDataset class to improve code readability to enhance maintainability and maintainability of the code
updated error message formatting in FormulaParser . java to improve clarity and maintainability of error reporting
added getter and setter methods for WebSocket address in WebSocketClient . java to improve socket handling and ensure proper handling of WebSocket connections
refactor close method calls in ConsensusModuleHarness . java to improve code readability and maintainability
refactor widget size handling in WidgetGroup . java to use setSize method to improve code readability and maintainability by centralizing resize logic
updated the check for sessionFixationAttribute to use Boolean . valueOf instead of Boolean . valueOf to ensure proper handling of sessionFixation attribute
added edgeOption parameter to the scienceLab startOneChannelLA method in LALogicLinesFragment . java to ensure proper handling of edge options in the
updated sleep duration in ChromeBinary . java and added resetBackoff ( ) methods in ChromeDriver . java to improve backoff management and ensure correct backoff behavior
added a URI template attribute to the TraceExchangeFilterFunction and related classes to enhance the handling of URI templates in the HTTP client
updated the ` removeDeleted ` method from ` ColumnFamilyStore ` to use ` Integer . MIN _ VALUE ` instead of ` gcBefore ` to
updated renderingIntent return values in ICC _ Profile , ColorConvertOp , ColorConvertOp , ColorConvertOp , ColorConvertOp , ColorConvertOp
added a boolean flag ` isNotSureAllowed ` to ` FeedbackContributionQuestionDetails ` and modified the return statement in ` FeedbackQuestion
added multiple calls to ` PublicMethed . waitProduceNextBlock ` and ` PublicMethed . waitProduceNextBlock ` to ensure
removed the Serializable annotation from KafkaExactlyOnceSink and removed the Serializable interface from KafkaRecord to improve code readability and maintainability
updated connection handling in PooledConnectionImpl . java and added a test for PGConnection in BaseDataSourceTest . java to improve connection management and ensure proper
refactor PropertyTable and CloseIgnoringInputStream classes for improved readability to enhance maintainability and maintainability of the code
updated logging messages in TokenAuthenticationHandler to use RegisteredServiceProperties . TOKEN _ ENCRYPTION . getPropertyName ( ) instead of warn to
removed the deprecated @ Deprecated annotation from Hazelcast . java to streamline the code and improve maintainability
added a method to create completed command report in AbstractServerAction and updated its implementation in FinalizeKerberosServerAction to improve command handling and ensure proper
refactor NamedListCodec to utilize Iterator and Iterable methods for handling iterators to improve readability and maintainability of the code
added null check for state before assigning new owners in MigrationManager . java and added a test for assignCompletelyLostPartitions method in Migration
added schema inclusion rule to ApiExample . java to enable inclusion of schema inclusion rules in the API example
updated the expected value from 3 . 0 to 7 . 0 in StreamExpressionTest . java to correct the expected value from 3 . 0 to 7
updated the ` createLinearRing ` method to use ` CoordinateSequences . ensureValidRing ` instead of ` CoordinateSequences . createLinearRing
added methods to retrieve base name and getDimensionCount in ConstantPool . java to improve code readability and maintainability
added a method ` setDebugEvaluationOutputForNextEval ` to ` FormulaEvaluator ` , ` XSSFFormulaEvaluator ` , and ` XSSF
updated imports and modified test assertions in TestModule and RefactoringTest to use JRE instead of JRE to improve test reliability and ensure proper
updated the constructor of ExoPlayerProfile from false to false in LegacyMediaManager and PlaybackController to improve code readability and maintainability by
added a return statement in DynamicStyleBar . java to improve code readability and maintainability
added logging statements for repetitive repetitions in Utils . java to improve logging clarity and maintainability of the code
refactor ReactiveAuthorizationManager class to improve code readability to enhance maintainability and maintainability of the code
added a check for boolean type in the TypeEmitter class to ensure proper handling of boolean types
refactor LLVMStackFrameNuller and LLVMStackFrameNuller classes to use Address instead of FrameSlot to improve code clarity
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
added a new file ` CaffeineCacheDefaultConfigurationTestSuite . java ` to verify transaction - aware cache proxy verification to ensure that transaction - aware
added a method ` calculateBoundingBox ( ) ` to calculate bounding boxes based on the number of components to provide a way to calculate bounding boxes based on
added a new enum ` TargetHashFunction ` and updated the ` getHashFunction ` method to use ` MURMUR _ HASH3
refactor DefaultConfigurationProperties class to improve code organization to enhance maintainability and readability of configuration properties
added highLightColor and highLightAlpha settings to ListViewMultiChartActivity and BarChart classes to improve visual consistency in the chart rendering process
removed the call to pgSgPathPlanMap . put ( tmpPg , sgPathPlanMap ) in ClusterPlanRouter . java to
[ hotfix ] [ test ] fix bug in infinispanremoteproducerit
added a check for the existence of a staging repository in MavenArtifactFetcher and refactored MavenDependencyResolver to improve resource management and ensure proper resource
updated fragmentShader from " precision mediump float " to " # ifdef GL _ ES " and " # ifdef GL _ ES " to
updated ` RSGroupInfo ` and ` TestUpdateRSGroupConfiguration ` to use ` Set < Address > ` instead of ` SortedSet < Address
added exception handling for JSP page loading in TagLibConfiguration . java to ensure proper logging for no TldProcessor configurations
removed the default match version setting from CustomAnalyzer and added a new test class DummyVersionAwareTokenFilterFactory in TestCustomAnalyzer to streamline version
added a new test method ` getApplicationInfo _ readsValuesFromSetPackageArchiveInfo ` to ` ShadowPackageManager ` to ensure proper handling of package archive
refactor method invocations to use MethodUtil for improved readability to enhance code clarity and maintainability by centralizing method invocation logic
updated import statements and added progress update types in GradleBuildService and Main classes to enhance event handling and improve code clarity
removed synchronization of syncObject in AndroidWebDriver . java to streamline code by eliminating unnecessary synchronization
refactor initialization fail timeout handling in HikariConfig and HikariPool classes to improve code readability and maintainability
updated the method ` getResult ( ) ` to use ` HttpResponseListener ` instead of ` timeOut ` to improve code readability and maintainability by
changed the visibility of the ` isNative ` variable from ` boolean ` to ` transient boolean ` in ` JMethodIdTable . java ` to
updated error message formatting in CEntryPointCallStubMethod . java to improve readability and maintainability of error messages
refactor RuleEnableHandler to RuleEnablementActionHandler instead of RuleEnableHandler to improve code readability and maintainability
refactor ELResolver , ImplicitObjectELResolver , and TagSupport classes to improve code readability and maintainability
updated logging statements in AuthzAuthenticationFilter and AuthzAuthenticationManager to include ' credentials ' parameter to improve logging clarity for authentication requests
replaced ` getBasicSourceOptions ( ) ` with ` getBasicSinkOptions ( ) ` for consistency to improve code readability and maintainability by
added null check for the repository model in UsersPanel . java to improve robustness by preventing potential NullPointerExceptions
added support for " . otf " and " . OTF " in multiple font names to enhance font handling capabilities for better user experience
refactor parameter matching logic in AnnotationMatcher to improve clarity and consistency to enhance code readability and maintainability by centralizing parameter matching logic
updated the method name from " OFF " to " SEVERE " in Grep . java to enhance clarity and maintainability of the code
added conditional checks for debug logging in FaultTolerantChunkProcessor . java to ensure proper handling of debug output during write operations
updated the initialization of ` includes ` and ` excludes ` in ` SurefirePlugin . java ` to ensure that ` includes ` and ` excludes `
added a method ` shouldMoveToDefaultScreenOnHomeIntent ( ) ` to ` onHomeIntent ( ) ` in ` Launcher . java
updated the maximum bitrate from " 110 " to " 30 " in PMS . java to ensure the maximum bitrate is set to 30
removed the ` getOptions ( ) ` method from the ` CommandLineParser ` class to simplify the code and improve readability
changed the return statement from ` description ` to ` trim ( ) ` in ` MutableDatabaseProperty . java ` to ensure proper handling of descriptions
updated file path from " / JDK8022548 . out " to " JDK8022548 . out " to
updated the error message from ` process . pid ( ) ` to ` process . pid ( ) ` in ` ProcessBesuNodeRunner . java
added getLoadedMusic ( ) and getLoadedSound ( ) methods to MusicLoader , SoundLoader , and MusicLoader classes to provide functionality for loading
removed unused imports from OnBeanCondition . java to simplify code and improve readability
added ScreenRecordRule annotation to RequestPinItemTest . java to enable screen recording functionality for better user experience
added null check for lrPauseButton in CPUFeature and MemoryFeature classes to ensure proper selection behavior when lrPauseButton is not null
replaced ` PreferenceMultiline ` with ` PreferenceCategory ` and updated preference handling in ` Preferences . java ` to improve code clarity and maintainability by
updated the method call from ` Presence . Type . AVAILABLE ` to ` Presence . Type . AVAILABLE ` in ` XMPPConnection
updated StringBuilder initialization logic in ObjectInputStream . java to ensure utflen is less than 0 to improve performance by avoiding unnecessary initialization of StringBuilder
added spring metrics export enabled to WebApplicationContextRunner and ReactiveWebApplicationContextRunner to enable statsd export behavior based on spring metrics
refactor InterruptedException class to improve code readability to enhance maintainability and maintainability of the code
refactor ServiceTicket class to improve code organization to enhance maintainability and readability of the code
refactor connection check logic in ConnectionCheckOperation . java to improve code readability and maintainability
added a check for ` Map . class . isAssignableFrom ( targetType ) ` in ` ArgumentArrayMessageMapper . java ` to ensure correct handling of
updated condition checks in SolrServiceCommunityCollectionItemFilterPlugin and updated related test cases in XmlWorkflowFactoryTest to improve code readability and
updated PasscodeManager to set Flag _ ACTIVITY _ REORDER _ TO _ FRONT to FRONT intent flags to ensure compatibility with
refactor PatternParameterConfigurator to use Template instead of Template to improve code readability and maintainability
updated the ` beginDraggingWidget ` method to return a boolean if ` image . getDrawable ( ) ` is null to ensure proper handling of
added JUnit Ignore annotation to TestPackedInts . java to temporarily disable test coverage for LUCENE - 4488
added null check for the root component in DynamicStyle . java to prevent potential NullPointerExceptions when processing components
added a boolean field ` confusionMatrix ` and a method to update the confusion matrix in ` TestClassifier ` , ` TestSentence ` , and `
refactor error handling in JMeterThread to improve code readability and maintainability to enhance maintainability and maintainability of the code
added unit tests for getConnectedDevices and removeDevice methods in ShadowBluetoothHeadsetTest . java to ensure proper handling of connection state management
updated the test method name from " # autowire " to " # autowired " in PropertyBindingSupportTest . java and PropertyBindingSupport
updated objectMethods to include " clone " and modified FINALIZE _ METHOD in ResultObjectProxy . java to improve code clarity and maintainability by
added null checks for the Counters object and write verification in IntegrationTestBigLinkedList . java to improve robustness by preventing potential NullPointerExceptions
added handling for REFERRING _ OBJECTS . ID in DebuggerConnection . java and implemented a new REFERRING _ OBJECTS class
updated the condition for checking the registered service ID in SamlIdPServicesManagerRegisteredServiceLocator to ensure proper matching of registered service IDs
added a null check before running on the UI thread to avoid potential NullPointerExceptions when the activity is null
updated logger initialization in multiple classes to use the logger instead of the logger variable to improve code readability and maintainability
added ` setStringType ` and ` getStringType ` methods to ` DatabaseAdaptor ` , ` SessionTableSchema ` , and ` SessionTableSchema `
refactor UIMAUpdateRequestProcessorTest to throw an exception instead of a junit Ignore annotation to improve clarity and maintainability of the test method
refactor thread name retrieval in multiple classes to improve clarity and consistency to enhance code readability and maintainability by centralizing thread name management
refactor TaskletAdapter class to improve code organization to enhance maintainability and readability of the code
added a new test method ` testDROOLS2200 ` in ` DMNRuntimeTest ` and modified ` DecisionTableImpl ` to
added glFlush ( ) for texture map creation in SplashProgress . java to ensure proper handling of texture map creation on macos
added a tooltip to show CGCP button in RocketPanel . java to enhance user experience by providing feedback when the CGCP button is
replaced calls to ` owner . getTypes ( ) . add ( e ) ` with ` owner . addType ( e ) ` in multiple classes
updated FlutterRetargetAction and HotReloadFlutterApp classes to include text and description to enhance user experience by providing more informative text
use stringtemplate instead of stringtemplate for column name
updated the calculation of BRIGHTNESS _ FACTOR from intValue ( ) to doubleValue ( ) to ensure accurate calculation of BRIGHTNESS _
refactor revision handling in SSCMHistoryParser to improve clarity and consistency to enhance readability and maintainability of revision parsing logic
added a boolean parameter ` isAdmin ` to the ` createUser ` method and modified the ` createUser ` method to accept a ` boolean `
added null checks for indexedWriteMethod and writeMethod in IndexedPropertyDescriptor , Introspector , PropertyDescriptor , and PropertyDescriptor classes to ensure proper handling of boolean
updated debug logging statements in DynatraceExporterV2 and DynatraceExporterV2Test to improve clarity and consistency to enhance code readability
updated method signatures in Context . java , Response . java , and Response . java , and Response . java to improve code readability and maintainability
added setCapabilitiesFromSpongeBuilder method to MixinItemStack . java to ensure capabilities are properly deserialized to prevent potential NullPointerExceptions
changed the assertion from " default " to " binding2 . getExecutionId ( ) in LifecycleUtilsTest . java to ensure the correct execution ID
added a condition to check if the contract type is TriggerSmartContract and updated contract validation logic in Wallet and GetContractServlet classes to improve contract
updated package - info . java files to include the com . ibm . dtfj . image and com . ibm . lang . management package to
refactor the add method in DocumentsWriterDeleteQueue to improve readability and maintainability of the code
added a check for duplicates in JavadocTool . java and updated test cases in T7091528 . java to ensure that duplicates are ignored
changed the default value of STRIP _ IPV6 from " true " to " false " in HostPort . java to ensure proper handling of
added a List < String > parameter to the LoginServerTokenEndpointFilter constructor and modified login information handling in TokenMvcMockTests to enhance security by
added a new constant ` C _ KEY ` in ` LanguageFactoryTest ` and updated conditional checks in ` CPPParserTokenManager ` to ensure
replaced ThreadPoolExecutor with MoreExecutors . newSingleThreadExecutors . newSingleThreadExecutors . newSingleThreadExecutors . newSingleThread
added support for cache control and expires in LoginService , FormAuthenticator , and ConstraintTest classes to enhance user experience by providing a clearer cache configuration
updated error logging in VoiceManager . java to include the exception message to improve clarity of error messages for better debugging
replaced AllHSSFUtilTests with TestAreaReference , TestRKUtil , and TestSheetReferences in HSSFTests and TestEmptyDocument
refactor FetchHTTP2Test , FetchHTTP2Test , and FetchHTTPTestBase classes to improve code organization and maintainability
added null check for the output directory in TestCommand . java to prevent potential NullPointerExceptions when output is null
added imports for ExternalResourceControlPriority and updated theAccessController setting in Java2DRenderer . java to improve user experience by allowing the user to
added exception handling for ArrayIndexOutOfBoundsException in TestTriggerCoverage . java to improve error reporting for unsupported fonts on Windows
added a final static variable ` mbean ` and modified the ` main ` method to be ` final ` and modified the ` testCPUTime ` method
added checks for empty comments in TabsAndIndentsVisitor to ensure proper handling of empty comments
updated assertions in SimDistribStateManager and TestTriggerIntegration to include totalReplicaRate instead of 5 . 0 to improve code clarity and ensure accurate
updated comparison logic in DatabaseChangeLog , RanChangeSet , and RanChangeSet classes to use equalsIgnoreCase for consistency to improve code readability and maintainability
removed the ` getString ` method from ` ShadowBundle ` to simplify the ` getString ` method and improve code clarity
refactor date formatting logic in TweetActivity to use Locale instead of Locale to improve code readability and maintainability by centralizing date formatting
added a check for empty connections in StandardProcessSession . java to ensure proper handling of empty connections in the process session
updated keyboard keyboard handling in DetailFragment to use requestFocus ( title ) instead of AppTourHelper . isPlaying ( ) to improve user experience
added a check for the existence of " file : / / " in the ` main . setExtraClassPath ` method to ensure proper handling of
refactor solve method to be synchronized and add a check for matrixForSolve to improve thread safety and avoid potential null pointer exceptions
added import statement for Message in GenericMessage . java to enhance code readability and maintainability
added a method to join TaskAttempt fields in PostgresConnector and updated related queries in MapReduceJobHistoryUpdater to improve code readability and maintain
refactor filter handling in AquaFileChooserUI to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor loop logic in P2PTransportManager . java to improve thread safety to enhance thread safety and maintainability of the code
updated the return statement in ArrayPtg . java and added a new test method in TestArrayPtg . java to improve code clarity and ensure
updated import statements in PGtokenizerTest . java to use Assertions . assertEquals and Assertions . assertTrue for improved test coverage
refactor Java2TypeScriptTranslator and Java2TypeScriptTranslator to improve variable handling to enhance code readability and maintainability by centralizing variable
updated the handling of auto - increment columns in AddAutoIncrementChange . java to ensure that the database does not support auto - increment columns
updated byte handling logic in DataInput . java for clarity to improve readability and maintainability of the code
removed unnecessary assertions in ImageParserTest . java to improve code readability and maintainability
updated the method call from ` getParent ( ) ` to ` parent . getParent ( ) ` in ` Component . java ` to improve code readability
updated import statements in multiple classes to use ` StringUtils . standardize ` for consistency to improve code readability and maintainability
replace ` NativeCrypto . ENGINE _ finish ` with ` NativeCrypto . ENGINE _ free ` in ` NativeCryptoTest . java ` to
refactor iteration event handling in multiple classes to improve code readability and maintainability to enhance maintainability and maintainability of iteration event management
refactor FormDataHttpContentProcessor and NettyStreamingFileUpload to ensure proper resource management to ensure proper resource management and prevent potential resource leaks
added a call to deleteLogs ( ) in TestRecovery . java to ensure proper cleanup of logs during test execution
updated URL handling in BrowserActivity to check for " twitter : / / " and added a conditional check for URL handling to improve URL handling and ensure
added a awaitHostStatus call to the DeploymentGroupTest . java file to ensure proper handling of host status during deployments
updated logResult method from false to true in VisibilityController . java to ensure proper logging behavior for labels allowed
updated logging level from 0 to 25 in RestTemplateRetryTests . java to increase the maximum number of retries for better debugging
removed System . out . println ( result ) from StandardTypeMapperComponent . java and added @ Override annotations in StandardTypeMapperComponent . java to
added ` ValueResourceLoader ` and ` Converter ` classes for fraction handling in ` PackageResourceLoader ` , ` R ` , and ` R ` classes to
added a check for file write permissions in BasicFrame . java to ensure proper handling of file write operations
refactor dependency version retrieval in UpgradePluginVersion . java to improve clarity and consistency to enhance code readability and maintainability
hbase - 13232 raise quotaexceedtablequotasexception instead of retryioioioioioioioioio
refactor multiple attribute classes to improve code organization to enhance maintainability and readability of the codebase
refactor TestFuzzPreLoop class to improve code readability to enhance maintainability and maintainability of the code
added a conditional check for the f0 parameter in HTSVocoder . java to ensure proper initialization of the f0 value
added a null check for the connectionCatalog and updated related logging in SchemaRetriever and TableRetriever classes to enhance robustness by preventing potential NullPointerExceptions
refactor encoding handling in CoyoteAdapter and InputBuffer classes to use SynchronizedStack to improve code readability and maintainability by central
added support for empty pages in the Workspace class to enhance user experience by allowing users to choose from empty pages
added a warning log when cucumber - needle has been deprecated to indicate that cucumber - needle has been deprecated
refactor theme handling in ShadowThemeTest and ShadowArscAssetManager to use Resources . Theme _ AnotherTheme to improve code clarity and maintainability
updated import statements in VerifyFast . java to use Arrays . toString ( ) instead of Arrays . toString ( ) to improve clarity and maintainability of
removed the ` @ @ system _ versioning _ alter _ history ` annotation from the ` EHistory2 . java ` annotation to streamline the
refactor proto handling in CodeGenerator and Global classes to improve clarity and consistency to enhance code readability and maintainability
updated the shuffle method call from ` Collections . shuffle ( readers ) ` to ` random ( ) ` in ` TestFilterDirectoryReader . java `
added a check for the userName in the displayName string in UsersAndGroupsSearchProvider . java to ensure the displayName is only used when the username is
updated the path formatting in CookieRetrievingCookieGenerator to use StringUtils . defaultIfBlank ( path ) instead of String . format ( "
refactor multiple Java files to improve code readability to enhance maintainability and maintainability of the code
change cacheName assignment from ` getBackupCount ( ) ` to ` getTotalBackupCount ( ) ` in ` AbstractCacheService . java ` to
updated comparison logic in ValidationResult . java to include a check for ve . pageNumber to ensure proper comparison of pageNumber with ve . pageNumber
added a condition to check if the focused widget is not null and the focused widget is not null to ensure that the focused widget is equal to the
refactor ` playSoundAtLocationExcept ` and ` playSoundPitchRange ` methods in ` SoundUtil . java ` to improve code read
replaced ` appleCxxPlatformFlavorDomain ` with ` getAppleCxxPlatformsProvider ` in ` ApplePackageDescription ` and ` Abstract
added a test case for SQL queries in ClickHouseStatementTest . java to ensure correct functionality of SQL queries in the test
updated method names from ` onConnect ` to ` onAccept ` in ` ServerSessionListener ` and ` AbstractHTTP2ServerConnectionFactory ` to
refactor EnglishPTBTreebankCorrector class to improve code organization to enhance maintainability and readability of the code
added a new file TestGetLoggerNPE . java to implement logging functionality to facilitate testing of logging functionality in the application
added a new method ` getData ( ) ` to ` PathSharingContext ` , ` ScriptedProcessor ` , and ` ScriptedDecideRule
refactor method handling in EspressoRootNode and StaticObject classes to improve clarity and consistency to enhance code readability and maintainability by central
refactor NextValExpression to utilize a regex pattern and improve value handling in ExpressionDeParser to enhance code readability and maintainability by using
updated error message in LocalizationSupport . java to include a full path for resource bundle access to improve readability and maintainability of the error message
added clearing of pending writes in BoundedLocalCache . java and updated related tests in BoundedLocalCacheTest . java to improve memory management and
added a new order direction parameter to the QuoineExchange and QuoineNewMarginOrderRequest classes to enhance the flexibility of the order direction
added boundInitialization method to PropertyDescriptor and created a new Test7192955 class to ensure proper initialization of bean classes and ensure proper handling of
updated ` failsafeWidth ` and ` failsafeHeight ` from ` failsafeWidth ` to ` setDisplayModeCallback ` in ` Lw
added a check for the parent form before setting buttonsAwatingRelease to prevent potential NullPointerExceptions when the parent form is not initialized
refactor wrapWidth calculation in LineCell and StyledTextAreaSkin to use getWrapWidth ( ) instead of getPrefHeight ( ) to
updated typo in XSLTErrorResources _ it . java to improve clarity to enhance readability and maintainability of the code
updated the initialization of paramValues in CustomChangeWrapper and CustomPreconditionWrapper to use LinkedHashMap instead of HashMap to improve clarity and maintainability of the code
updated string formatting in multiple text classes to use String . format ( ' ' , ' ' , ' ' , ' ' , ' ' , and
replaced ` namespaceContext . getNamespaceContext ( ) ` with ` getNamespace ( prefix ) ` in ` StaxXmlPullParser . java ` to simplify
removed the ` nestedJoins ` flag from multiple test classes to streamline the code by eliminating unnecessary configurations
updated account type checks in QueryManagerImpl . java to include root admin only to ensure that admins are specified by root admin only
added a cache location for JavacFileManager in SourceFileManager . java and modified CompletionTaskProcesor instantiation in CompletionProvider . java to
added Hive credentials for METASTOREURIS and HIVE _ AUTHORIZATION _ MANAGER in TestMsgBusConnection . java to enhance
replaced Assert with MatcherAssert in KuduIOIT and XmlIOTest classes to improve code readability and maintainability
added @ Nullable annotation to MetadataRenderer , TextRenderer , MetadataOutput , and TextRenderer classes to ensure proper handling of null handlers in the code
updated offsetMemorySize calculation in SymbolMapReaderImpl . java and added a new test for symbol file mapping in LineTcpConnectionContextTest . java
removed unnecessary print statements for termFilter and otherTermFilter in TermFilterTest . java to streamline code and improve readability
replaced the ` Reflection ` class with ` TypeConverters ` in multiple files to simplify the codebase and improve readability
refactor ThreadlessExecutor to use boolean methods for finished and waiting to improve code readability and maintainability by reducing duplication
replaced ` IndexOutOfBoundsException ` with ` IndexOutOfBoundsException ` in ` DateTimeFormatter ` and added a new test in ` TestDateTimeParsing ` to
updated the ` CHUNK _ LENGTH ` and ` CHUNK _ LENGTH _ KB ` constants to use ` chunk _ length _ kb
added a new class T7034495 for handling wildcard cases in Types . java and created a new T7034495 . java to
removed unnecessary loops in LotsOfEvents . java to simplify code and improve readability
refactor conditional checks for REFER and REFER characters in TransclusionDecideRule . java to improve code readability and maintainability
refactor Micronaut version printing in Micronaut . java to improve code readability and maintainability
added tests for Print _ Area and Area3DPtg functionalities in TestBugs . java to ensure correct handling of formula names in
updated MindIcon instantiation to include a description parameter to improve clarity and maintainability of the code
changed the method signature of onHomeIntent from ` onHomeIntent ( ) ` to ` onHomeIntent ( internalStateHandled ) ` to
added a boolean variable ` preferDependencyTree ` to ` getPreferDependencyTree ( ) ` in ` CxxBuckConfig . java `
added new methods to show details for the active tab in multiple activity classes to enhance user experience by providing additional information about the active tab
updated method names from " $ apply " to " $ applyStatic " in multiple Java files to improve clarity and consistency in naming conventions
refactor MinimalEncoder and HighLevelEncodeTestCase to use a randomize253State method to improve code readability and maintainability by central
updated formatting in SourceBuilder . java to improve clarity and consistency to enhance readability and maintainability of the code
added a call to notifyDataSetChanged ( ) in FolderSyncActivity . java to ensure proper notification of data changes during synchronization
removed the setDefaultWALSyncMode method from ShadowSQLiteConnection to simplify the code and improve maintainability
updated type checks in RemoveJavaDependenciesAdapter . java and added assertions in Collections . java to improve type safety and ensure correct handling of list types in
removed unused methods in DefaultS3CrtAsyncClient . java to streamline the code and improve readability
updated password tests for DEF length 110 object truncated by 28 in ParserTest . java to improve clarity and consistency in password validation logic
updated the assertion message in HazelcastTestSupport . java to include found - content to improve clarity of the assertion message for better readability
added exception handling for CiBailout bailout and GraalInternalError in GraphBuilderPhase and GraphBuilderPhase classes to improve error handling and ensure
refactor image retrieval logic in EuclidianPen , EuclidianViewND , and Application classes to improve image
refactor SQLXML class for improved readability to enhance maintainability and readability of the code
added a limit parameter to the ` getOrderBook ` method and updated its usage in ` YoBitMarketDataService ` and ` YoBitMarketDataService
updated exception handling in StressHierarchyBaseClass and TriggerUnloadingByFillingMetaspace to use HeapOOMEException instead of GotWrong
added StreamReadConstraints to StandardDataFlow to ensure proper handling of stream - read constraints
updated variable names from ` configuration . getString ( KEY _ ENGINES ) ` to ` getString ( KEY _ ENGINES ` in ` P
replaced ` FullIterator ` with ` WheelIterator ` and updated ` TimerWheelTest ` to use ` WheelIterator ` instead of ` Full
added error handling for missing bug pattern in BugInstance . java to improve robustness by providing a clearer error message for missing bug patterns
updated timeout checks in LocalChunkProviderTest to use a constant WAIT _ CHUNK _ IS _ READY _ IN _ SECONDS instead of 3
changed the visibility of uncomplete checklists from true to false to ensure the menu is only visible when the uncomplete checklists menu is
refactor result map handling in DefaultResultSetHandler to use a String parameter and add a new Contract class to improve code readability and maintainability by
added null check for defaultHome and unregistered receiver registration in OverviewComponentObserver . java to ensure proper handling of receiver registration when defaultHome is
removed the VertxGen annotation from PumpImpl . java to streamline code by eliminating unused imports
updated method calls in FileDetailFragment , OCFileListFragment , and OCFileListFragment to improve code readability and maintainability by
updated token handling in ConfigAttributeEditor and added a new test for trailing space in ConfigAttributeEditorTests to improve code readability and ensure correct handling
refactor ClassUsingAnotherAuxiliary , ClassUsingAnotherAuxiliary , and SelfClassWithAux classes to improve
changed access modifier of ` singleModulReference ` to ` singleModuleReference ` and added a new ` getUnnamedModule ` method to
added checks for " pg _ " column names in DatabaseMetaData . java and updated relKind assignment in DatabaseMetaData . java to ensure proper handling of
updated TIER _ ENTERPRISE _ PLUS _ VALUE from deprecated to deprecated in Agent . java and AgentProto . java to improve
updated RQST _ FIELD _ DESC from " rqst " to " rqst " in ThriftHiveMetastore . java
added a new module - info . java file to implement module - info . java to enhance the functionality of module - info . java
added conditional checks for flushing and write state in SslConnection . java to ensure proper handling of buffered output in the SSL connection
updated Log4j2LogDelegateFactory and LoggerFactory classes to use LogManager instead of LogManager to improve logging clarity and maintainability of logging functionality
refactor LIBJVM handling in ExecutionEnvironment and Test7029048 to improve code readability and maintainability to enhance maintainability and
refactor ` ExecutableFindOperation ` , ` ReactiveFindOperation ` , and ` ReactiveMongoOperations ` classes to improve code organization and maintainability
updated PGProperty from null to " org . postgresql . ssl . LibPQFactory " in PGProperty . java to ensure compatibility with the
added a disabled annotation to the @ Test annotation in TestInterProcessSemaphoreEdges . java to indicate that the test is still failing
added sorting of theme names in EditableResources . java to improve code readability and maintainability
added a new file ` OSvTerminal . java ` and modified ` TerminalFactory . java ` to utilize a new ` OSvTerminal `
added a condition to check for " . gs " and " . gr " files in ClassType . java to ensure compatibility with the newer
replaced HashMap with TreeMap for combined vectors in DrillTestWrapper . java to improve performance and maintainability of the code
added a condition to check for names and values in XPathEntityProcessor . java to ensure proper handling of names and values in the process
refactor WebSocketPolicy class to improve code readability to enhance maintainability and maintainability
removed static modifiers from ` ShadowTelephonyManager ` , ` ShadowWifiManager ` , and ` ShadowWifiManager ` classes to simplify code
added a new method ` resolveMessage ` to ` StandardMessageResolver ` for handling template - based resolutions in ` StandardMessageResolver ` to enhance
updated method calls in AsmUtil . java to use generics instead of generics to improve code readability and maintainability by using generics
added a new file ` LoggingAuditService . java ` that implements UAAAuditService for auditing user logins to enable logging of user login
added null checks for TemperatureObject and TemperatureUnit in TadoZoneStateAdapter and AirConditioningZoneSettingsBuilder to improve robustness by
updated condition to check for abstract methods in BeanDefinitionInjectProcessor to ensure proper handling of abstract methods for proxy methods
added logging for Java System Property and HTTP proxy configuration in HttpEndpoint . java and created a new HttpProxyTest . java file to ensure proper proxy
updated MAX _ ENCODING _ VERSION from " 1 . 1 " to " 1 . 2 " to ensure compatibility with the latest encoding version
added a call to ` jdk . internal . util . StaticProperty . jdkSerialFilter ( ) ` in ` System . java ` to ensure proper
camel - 14263 : camel - core - camel - core - camel - core - camel - core - camel - core - camel - core
replaced ` forceFinished ( true ) ` with ` forceFinishScroller ( ) ` in multiple classes to improve code readability and maintainability by
added ConfigUtils import and modified ensureRealtimeClusterIsSetUp method to include environment variables to enhance configuration handling for real - time configurations
added ` isError ( ) ` and ` error ( ) ` methods to ` ValidationReport ` , ` RefValidator ` , and ` RefTest
updated inline statements in InvariantDeviceProfile . java to use closestProfile . inlineQsb instead of system . arraycopy to improve code readability
updated method signatures in SortedArrayStringMapTest to use URLDecoder instead of String to improve error handling and ensure proper encoding of URLs
updated the ` @ Given ` annotation from ` 10 ` to ` . * ` in ` TransformSteps . java ` to improve clarity and consistency in
updated the ` retinaProp ` variable and added null checks for ` image ` in ` Toolkit . java ` and ` PGraphicsJava2D
updated timeout handling in FaultToleranceTest . java to use a more descriptive timeout variable to improve code readability and maintainability by reducing
refactor package - info . java files for improved readability to enhance maintainability and maintainability of the code
added a method to set the Docker image URL in Environments . java to ensure proper URL handling for docker images
added multiple System . gc ( ) calls for System . gc ( ) in KnowledgeAgentTest . java to ensure proper cleanup of system . gc
refactor AdditionalAnswers , AnswerFunctionalInterfaces , InvocationOnMock , and InvocationOnMock classes to improve code organization and maintainability
updated the ` createHardLink ` method to include a ` copyFile ` method in ` SnapshotTaker . java ` to improve file management
updated method signatures in AsyncOperationDocProvider , OperationDocProvider , and SyncOperationDocProvider classes to improve readability and maintainability of the code
replaced calls to ` inputs . head ( ) . getManager ( ) . zeros ( ) ` with ` singletonOrThrow ( ) ` in multiple classes
added a conditional check for Xml . Document in Autodetect . java to ensure proper handling of XML elements
updated ` NotesHelperTest ` and ` GeocodeHelperTest ` classes to use ` AndroidJUnit4 ` instead of ` InstrumentationTestCase ` to
refactor ProofOfWorkRule and DifficultyRule classes to GasLimitRule and ParentGasLimitRule to improve code readability and
changed the visibility of the setupData method from public to private in BaseAssumptionsRunnerTest . java to allow access to the setupData
updated ` autocommit ` to ` runInTransaction ` and updated related methods to use ` runInTransaction ` instead of ` autocommit ` to
added null check for endStream in TripleServerStream . java to improve robustness by preventing potential NullPointerExceptions
updated URLs in JobManagerOptions , RestartStrategyOptions , and RestartStrategyOptions to use Site . BaseURL instead of . . /
added a new test method ` testIssue154 ` in ` SelectTest . java ` to verify that the SQL parser returns a valid modified time
refactor Common class for improved readability to enhance maintainability and maintainability of the code
refactor launcher instrumentation to use Closable for improved code readability to enhance maintainability and maintainability of the code
refactor StreamExecDeduplicate class to improve code organization to enhance maintainability and readability of the code
added warning logging for kafka messages in KafkaSubscriber . java to ensure that kafka messages are sent to the topic
added PersistentPropertyAccessor and PersistentPropertyAccessorFactory to SimpleElasticsearchPersistentEntity and SimpleElasticsearchPersistentProperty classes to ensure proper handling of Persistent property accessors
changed the return type of ` setCoord ` from ` void ` to ` boolean ` in ` GeoCoordSys1D ` and ` GeoSegment
added logging for scroll event handling in AskGestureEventsListener . java to enhance debugging capabilities for scrolling events
updated comparison logic in NGramEstimator . java to improve accuracy in comparison logic
updated import statements from ` cucumber . runtime ` to ` io . cucumber . core . runtime ` across multiple files to ensure consistency in naming conventions
added properties for folder icons in StatsLogCompatManager . java to ensure proper handling of folder icons based on label state and cardinality
updated check for getServerSlogan ( ) and getServerName ( ) to return getServerName ( ) instead of getServerSlogan ( ) to
added a new file TestSkeletonPredicates . java with a new class TestSkeletonPredicates . java for testing skeleton predicates to facilitate testing of
refactor SelectionHighlighter to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a new class ` StringResultConverter ` and modified ` AsmRuntime ` to use ` Charset ` instead of ` Pointer ` to improve charset
removed the @ Disabled annotation from multiple test classes to improve code clarity and maintainability by reducing redundancy
updated condition in JansiWinSysTerminal in JansiWinSysTerminal . java to improve code readability and maintainability
updated the ` setInBuffer ` method to include null checks for ` buffer ` and ` buffer ` in ` BufferUtils . java ` to improve
updated data directory path from " data / " to " File . separator " in TestSolrDiscoveryProperties . java to ensure consistent path handling for data
added support for " linux " and " mac " operating systems in AutoUpdaterServerProperties . java to enhance compatibility with different operating systems
updated the ` lockFile ` and ` lockName ` fields from ` File ` to ` String ` in ` FSDirectory ` and ` Lock `
updated the method call from " android . widget . TextView " to " apps _ view " in Overview . java to improve code readability and
refactor ClientDatagramEndPoint to use ClientDataEndPoint . this instead of Invocable . InvocationType to improve code readability and maintainability
updated GET _ STEP _ EXECUTIONS constant from " oreder " to " order by STEP _ EXECUTION
updated button handling in LwjglInput . java to handle unknown buttons to ensure correct handling of unknown buttons and prevent potential NullPointerExceptions
added HTTP request parameters to the TaskRestRepositoriesIT . java file to ensure proper handling of rejected requests in the application
updated logging statements to use a static final Logger for better clarity and consistency to improve code readability and maintainability
removed the ` MINUTES ` modifier from the ` SsoAccessTokenProvider ` and updated its usage in ` SsoAccessTokenProviderTest ` to
do n ' t delete github build on macos
added methods to return null values in GreetResourceMockedTest , GreetResourceMockedTest , and OciMetricsCdiExtensionTest
refactor conditional checks for defaultCloseOperation in JFrame . java to improve code readability and maintainability
added null check for connection before executing MediaDatabase to avoid potential NullPointerExceptions when connection is null
replaced the ` metricsContext ` variable with a ` super . initializeMetrics ` method in ` SuggestComponent . java ` to streamline metrics initialization
refactor output retrieval logic in OCFileListFragment . java to improve code readability and maintainability
updated key loading methods in ScpServerTestSupport and ResourceHelperKeyPairProvider to use Iterable < KeyPair > instead of ArrayArray to improve code
refactor SourceVersion class to improve code organization to enhance maintainability and readability of the code
added a new file ` ThreadFactoryTest . java ` that tests thread creation in ` org . eclipse . jetty . util . thread ` to ensure
refactor lockPeriod retrieval logic in DelegateResourceActuator and ProposalUtil classes to improve code readability and maintainability by centralizing lock
added a new TicketModel instance to the EditTicketPage class to initialize the ticket model for the application
changed the default value of " ENABLE _ PREDICTION _ DISMISS " from false to true to enable dimiss apps from predicted list
refactor ` GenericAssert ` methods to accept ` Class < S > ` instead of ` Class < S > ` to enhance type safety by allowing
updated MENU _ DELETE _ TWEET , MENU _ QUOTE , and MENU _ MENU _ COPY _ MENU _
removed redundant calls to interruptLock . lock ( ) in JMeterThread . java to improve code readability and maintainability
refactor MediaCodecAudioRenderer to use ` decryptOnlyCodecFormat ` instead of ` codecPassthroughEnabled ` to improve clarity and maintainability of
added a conditional check for result in the offerFailure method in ServerHTTP2StreamEndPoint to ensure proper resource management and prevent potential resource leaks
updated XSLTErrorResources _ de . java and XSLTErrorResources _ fr . java to use Silent - Modus instead of Stiller Modus
added ThreadSafe annotation to CheckpointsCleaner . java to ensure thread safety during tests
replaced Observer with Subscriber in MockRestAdapter and RestAdapter classes to simplify subscription handling and improve code clarity
refactor components file creation logic in ComponentPresetManager . java to improve clarity and consistency to enhance code readability and maintainability
added support for unique column names in multiple jdbc driver classes to enhance flexibility in handling unique column names in the jdbc driver
replaced the boolean flag ` bFirstTime ` and ` cbDefaultVoice ` with ` cbInputListener ` in ` MaryGUIClient . java `
added validation for invalid sessions in Session . java and updated related tests in SessionHandlerTest . java to ensure that sessions are not valid and improve error
deleted the ExceptionHelper . java file to remove unused code to streamline the codebase
updated keyPairGenerator initialization from 256 to 255 in JceX25519Domain . java to ensure consistency in keyPairGenerator initialization
added a call to setCodec in TestBlockPostingsFormat3 . java to enable the use of TestUtil ' s alwaysPostings
added logging for empty checkpoint ranges in CheckpointRangeHeaders . java to ensure proper logging of empty checkpoint ranges
added null checks for algorithm parameters in OperatorHelper . java to improve robustness by preventing potential NullPointerExceptions during algorithm creation
replaced DARWIN _ AARCH64 / DARWIN _ AARCH64 with MACOS _ AARCH64 in multiple files to
added null checks for builder and uri handling in DebugSourcesResolver . java to improve robustness by preventing potential NullPointerExceptions
updated the condition in AbstractTest . java to return Transport . values ( ) instead of Transport . values ( ) to improve clarity and consistency in handling
updated error messages from false to true in FileUploadUtils and modified file handling in UploadRefreshDeleteIntegrationTest to improve clarity and maintainability of error messages
replaced direct calls to ` BufferUtils . newDisposableByteBuffer ` with ` BufferUtils . newUnsafeByteBuffer ` across multiple files to improve code clarity and
set ` USE _ PIPELINE _ DOWNLOADER ` to true in ` FastSyncChainDownloader . java ` to enable the downloader by default
updated Calendar . DST _ OFFSET from rawOffset to rawAmount in SimpleDateFormat . java and added a new Bug7130335 .
refactor icon count calculation in AllAppsView . java to improve code readability and maintainability
added a conditional return statement for the router in VirtualNetworkApplianceManagerImpl . java to improve code readability and maintainability by avoiding unnecessary
refactor StringBuffer class for improved readability to enhance maintainability and maintainability of the code
added a variable ` rule . uid ` to the ` RuleResource ` class to ensure proper handling of rule UIDs in the application
added a null check before calling unsubscribe in RegistryProtocol . java to avoid potential NullPointerExceptions when listener is null
added a new property ` PRETTY _ PRINT ` to the ` JoltTransformJSON ` class and updated the JSON string handling logic to
changed the visibility of ` ACCESS _ TABLE ` from private to public in ` InstrumentBranchesPhase . java ` to allow access to the ` ACCESS
updated message formatting in DataSourceInitializer and DataSourceInitializerInvokerTests to improve clarity and consistency to enhance readability and maintainability of the code
refactor ` doRun ` method in ` TcpTransport ` and ` XmppTransport ` classes to use ` IOExceptionSupport . create ( ) `
refactor multiple Java classes for improved readability and maintainability to enhance maintainability and maintainability of the codebase
added a new parameter ` effectiveClusterVersion ` and ` isUpgradeSuspended ` to the ` AmbariManagementControllerImpl ` class to enhance
removed copyright year from FindsByCssSelector . java to improve code clarity and maintainability
removed the assignment of ` wfields ` from the ` writer . getFields ( ) ` method in ` Resolver . java ` to simplify the code by
added a constructor to the OAuthProperties class and updated key size setting in OAuthProperties to ensure proper encryption and signing settings for OAuth properties
added a method ` getColumnFamilyCount ( ) ` to ` HTableDescriptor ` , ` HTableProcedure ` , and ` DeleteTableProcedure `
replaced the use of AllowedResourceAliasChecker with a method call to addAliasCheck to improve code readability and maintainability
refactor ObjectInputStream , ObjectOutputStream , and Serializable classes to improve code organization to enhance maintainability and readability of the codebase
added a new interface ` IdleStrategy ` and updated the ` Cluster ` interface in ` ClusteredServiceAgent ` and ` ClusteredServiceAgent
updated the incrementing of the current chunk ID in ChunkedWriter . java to ensure consistency with the current chunk ID generation
added a new abstract class AbstractJobExecutor that implements JobExecutor to implement BatchCriticalException for job execution in the batch processing process
updated the replayFuture handling in RecoveryStrategy . java to improve readability and maintainability of the code
replaced ` hugeStaticBase ` with ` staticBase ` in ` HugeResourceTest . java ` to improve code readability and maintainability by
added a method ` getServiceIds ( ) ` to return an empty list of service IDs in ` AbstractConsulClient . java ` to
replace Float . floatToIntBits ( float ) Math . random ( ) with SecureRandom ( ) . nextInt ( ) in DB . java to improve security by ensuring
refactor error handling in RuntimeCompilationFeature to improve clarity and consistency to enhance code readability and maintainability by utilizing a more descriptive
removed redundant assignment of currentStart and baselineStart in TimeOnTimeComparisonHandler . java to streamline code by eliminating unnecessary assignment
updated import statements and added new methods for abstract methods in CallsRealMethods . java and CreatingMocksWithConstructorTest . java to enhance
refactor checkPackageAccess methods in NashornScriptEngine and Context classes to improve code readability and maintainability to enhance encapsulation and
updated ContextPathPluginTest to extend AbstractPluginDataInit and added error configuration handling in ContextPathPluginTest . java to improve error handling and ensure
replaced ` dtm ` with ` model ` in ` ContributionListPanel . java ` and updated font handling in ` ContributionListPanel . java
added support for request HAS _ TIS in multiple protocol classes to enhance testing capabilities for touch interaction services
refactor connect action handling in ConnectAction . java to improve code readability and maintainability
changed the type of ` showRulesResult ` from ` String ` to ` BuildTarget ` in ` TargetsCommand . java ` to improve clarity
added new classes ` ArrayHelper ` , ` Comparables ` , ` Objects ` , and ` NativeRegExp ` , and ` Objects `
added handling for HOME , END , and HOME , and LINES in Less . java to ensure proper handling of home , and end
removed the synchronized variable ` plots ` from the ` PlotHandler ` class to simplify the code and improve readability by eliminating unnecessary synchronization
refactor intent handling in Utilities . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
changed the constructor visibility of Roster from public to public to allow access to Roster from other classes
added basicConstraints configuration to certGen for basicConstraints to ensure proper handling of basicConstraints in cert generation
added a new test method ` testFixedNestedTransform ` to ` TextVisualRegressionTest . java ` to verify the behavior of ` fixed - nested
replaced ` Integer . MAX _ VALUE ` with ` precisionStep ` in ` TrieDateField ` , ` TrieField ` , and ` TrieField
removed the TaskbarStateHandler class from BaseQuickstepLauncher to streamline the codebase by eliminating unnecessary state management
added a new file ` ArrayLength . java ` with a class ` ArrayLength . java ` that tests the fields and fields to facilitate testing of
added logging for destroyed Hazelcast processes in HzStartIT . java to improve debugging and ensure proper cleanup of Hazelcast processes
refactored the save method in ApplicationSettingsService to use a PostConstruct annotation and modified the save method to improve code readability and maintainability
updated assertion logic in Safepoint . java to check for negative values to ensure proper handling of negative values
updated the type of threadNameField to use Ljava / lang / String instead of charArray to improve clarity and maintainability of the code
updated default RAND _ SEED from System . currentTimeMillis ( ) to 42 in Lucene90HnswGraphBuilder and HnswGraph
added a ` strokeObject ` and modified ` strokeObject ` initialization in ` PGraphicsJava2D . java ` to use ` fontObject `
refactor SQL expression expansion logic to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a method ` findInterestingChildren ( ) ` to ` Comment2000 . java ` to ensure that an instance of ` Comment2000 . java
added import statement for PMS . 141 and updated status code setting in HTTPServer . java to ensure proper handling of status warnings in the P
refactor modifier handling in PSurfaceAWT , MouseEvent , and MouseEvent classes to use event . getModifiersEx instead of event . getModifiers ( ) to
updated import statements for CYCLES _ 6 and CYCLES _ 3 in AMD64CountLeadingZerosNode and AMD64Count
added null check for contentTypeStr in EntityParser . java and added a new test for plain message handling in AS2ClientManagerIT . java to
refactor Locale class for improved readability to enhance maintainability and readability of the code
added a ` clear ` method to ` ErrorConsoleController ` , ` ErrorConsoleViewModel ` , ` LogMessages ` , and ` LogMessages `
updated the initialization of mRecentsAnimationController in RecentsView . java to ensure proper initialization of mRecentsAnimationController
replaced ` ConsolePlayer ` with ` LocaleHolder ` and updated related methods in ` Debug ` , ` CaptionMap ` , and ` DummyCaption
added connection pooling functionality to ConcurrentBatchIdentifierTest , SequenceOptimizerIdentifierTest , and related test classes to enhance test reliability and ensure proper resource management
added support for OperaDriver in DefaultDriverSessions . java to ensure compatibility with the latest Opera driver capabilities
updated catch block from MalformedURLException to Exception in ManageJournalsPanel . java to improve error handling and provide clearer feedback for download failures
added new components " LIFX Mini White to Warm " , " LIFX Z " , and " LIFX Z " in LifxProduct
refactor async request handling in OverseerCollectionProcessor and CollectionsHandler classes to improve clarity and consistency to enhance code readability and maintainability by
updated PGSQL _ DEFAULT _ TCP _ PORT _ NUMBER and PGSQL _ PK _ BYTES _ LIMIT values in PostgresDatabase and
updated LogPanel instantiation to use repositoryModel . HEAD instead of null to ensure proper handling of empty objects in the log page
updated the calculation of the parent tail position in SkeletonInterBoneWire . java to use XYZ instead of UNIT _ Y to ensure
added a method ` browserDestroy ` to ` AndroidImplementation ` and modified the ` destroy ` method in ` AndroidImplementation . java ` to ensure proper
added a wait for the active collection in AutoScalingHandlerTest . java to ensure proper resource management and prevent potential memory leaks
refactor screen terminal handling in ScreenTerminal . java and Tmux . java to improve clarity and consistency to enhance code readability and maintainability by
added ControllerState checks in SoftResetAction . java to ensure proper handling of controller states in the SoftResetAction
disable on - disc stream cache for texture pack reloading
added handling for the parent folder retrieval in Request . java and RequestV2 . java to ensure proper retrieval of the parent folder based on the current
changed the variable ` isPersistent ` from ` isPersistent ` to ` persistent ` in ` NetworkOfferingVO . java ` to improve clarity and consistency
added a close method to the FileOutputStream in AndroidImplementation . java to ensure proper resource management and prevent potential resource leaks
added exception handling for Forbidden and RestClientException in StandardGitHubRepository . java to improve error handling and provide clearer error handling for unauthorized
added a method ` getOriginal ` to ` MessageFactory2Adapter ` and updated the ` AbstractLoggerTest ` to use ` MessageFactory2Adapter `
added @ SuppressWarnings ( " BanSerializableRead " ) annotations to multiple test classes to suppress warnings during serialization tests
updated regex patterns from 2 to 3 in Version . java to ensure compatibility with newer version specifications
added error handling for initial delay and dismiss delay in ExtractionModelFrame . java to improve user experience by preventing potential stack overflows
refactor ` ProjectCommand ` to use ` ImmutableSet < BuildTarget > ` instead of ` getArguments ( ) . getArguments ( ) ` to
added timezone assignment for the time zone in TimeTest . java to ensure correct timezone format for better performance
refactor MediaSessionConnector to improve code readability to enhance maintainability and maintainability of the code
replace JSSEFactory with SslImplementation in Http11NioProcessor . java to enhance SSL support by using the endpoint ' s SSL implementation
updated the accuracy display string from " altitude " to " accuracy " in GpsLoggingService . java to improve clarity and consistency in accuracy display information
added a new method ` isFuturesEnabled ( ) ` to ` BinanceExchange ` , ` BinanceAccountService ` , and ` Bin
replaced ` accounts ` with ` instructorCoursesTable ` and ` instructorAccountsTable ` in multiple files to improve code readability and maintainability
added a method to set the accept queue size in ThriftHttpCLIService to ensure proper handling of queue sizes in the connector
added a constant for the ` PROPERTY _ DISABLE _ WATCHER ` property in ` PathWatcherService . java ` to ensure proper handling
added a check for SSL scheme in JmsFactory . java to ensure proper handling of SSL schemes in JmsFactory . java
replaced ` parseError ` with ` validationError ` in ` DrillSqlWorker . java ` and ` TestWindowFunctions . java ` to improve error
updated the calculation of the duration in GCInspector . java to ensure that the duration is zero for a really fast collection
replaced ` flatMap ` with ` filter ` for ` JavadocComment ` in ` NodeWithJavadoc ` and added a new ` getJavadoc ` method
replaced the ` reserveMemory ` method with ` isOsx ( ) ` in ` ReserveMemory ` and updated its usage in ` WhiteBox
added methods to check for region closing and closing or splits in IndexRebuildRegionScanner to improve code readability and maintainability
hbase - 14264 hbaseadmin . getprocid ( ) should be protected instead of private to avoid memory leak .
added a constructor to WSDLServiceFactoryBean in CxfEndpoint . java and added a new constructor in WSDLServiceFactoryBean . java to
replaced BufferedWriter with a List for databaseChangeLog and containerMap in YamlChangeLogSerializer . java to improve code readability and maintainability by using
replaced print statements with print statements in SchemaPrinter . java to improve readability and maintainability of the code
refactored ChunkLoc and ChunkLoc initialization in DebugRoadRegen and SchematicHandler to improve code readability and maintainability by simplify
replaced calls to ` getContext ( ) ` with ` getActivity ( ) ` in ` HomeFragment . java ` to improve code readability and maintainability
hhh - 16257 add native to the auto - generated value in the auto - generated value generation .
removed the ` country ` parameter from the ` getSystemTimeZoneID ` method to simplify the method signature and improve code readability
added position and remaining parameters for uncompressed data in BZip2Codec and TestBZip2Codec to improve data handling and ensure proper buffer management
add startLogger method to GeoGebraLogger and update AppW and AppW classes to streamline logging management and improve code clarity
added a new constant VALUE _ TYPE _ EMPTY in Type . java and updated the creation method in Value . java to improve type handling and ensure proper
updated condition checks in GroupManager . java to use ` equals ( group ) ` instead of ` equals ( group = = = group = = group
refactor Liquibase and LiquibaseDropAll classes to improve code organization and maintainability
refactor SimplexNoise class to improve code organization to enhance maintainability and readability of the code
added a static method ` newInstanceExact ` to ` TargetGraphFactory ` and updated its usage in ` VersionedTargetGraphBuilderTest ` to enhance
updated method names from ` getMinRowCompactedSize ( ) ` to ` getMeanRowSize ( ) ` across multiple files to improve clarity and
added ArtifactVersionAdapter to MetadataCollection and modified GsonBuilder to use transient type adapters to improve type handling and ensure proper deserialization of ArtifactVersion
added a boolean variable ` hasPrevious ` and modified the handling of ` hasCurrent ` in ` NativeArray . java ` to ensure proper handling of
replace storageManager . saveNewFile ( ) with mCurrentUpload . getFile ( ) . setParentId ( ) in FileUploader . java to
added a new file ` UTF8ReaderBug . java ` that accepts supplementary characters in UTF - 8 parsing to ensure proper handling of UTF -
added a new test class ` ProxyBuilderTest ` to test the behavior of the ` sayHello ` method to ensure that the ` sayHello `
updated ` buildSubscriptionStreams2 ` to ` ethbtc @ depth20 ` and ` ethbtc @ depth20 ` to
added a method ` resetAllocation ( ) ` to ` SimpleParallelizer ` and a method to reset the initialAllocation and maxAllocation to ensure proper
removed unused import of AssertTree in AmbariManagementControllerTest . java to streamline code by eliminating unnecessary dependencies
added synchronization for configProps and props in Agent . java and created a new AgentCMETest . java file to ensure thread safety and ensure proper
refactor ModelUtils class to improve code readability to enhance maintainability and maintainability of the code
refactor AbstractDoubleArrayAssert class to improve code readability to enhance maintainability and maintainability of the code
refactor width calculations and height calculations in Legend . java to improve code readability and maintainability
added testDelay ( ) and testAbort ( ) methods to CodeFirstSpringmvcIntf , CodeFirstSpringmvcIntf , and
updated the logic for adding term frequencies in MoreLikeThis . java to improve readability and maintainability of the code
replaced ` requireRule ` with ` BuildTargetSourcePath ` in ` Omnibus . java ` to improve code clarity and maintainability by using a
added a flag to disable the botania versioning in CommandDownloadLatest . java to improve user experience by providing feedback when the botania versioning
updated ` filePaths ` and ` numberOfFiles ` values from ` Collection ` to ` List ` and updated related imports in ` MediaFolder `
updated command line formatting in AidlStep and GenAidlTest to improve code readability and maintainability
added a new file ` Issue79Test . java ` and modified ` ObligationAnalysis . java ` and ` ObligationAnalysis . java
added a TODO comment to the FakeHttpLayer class to improve code readability and maintainability
updated the error handling in EmbeddedLeaderService to revoke the candidate to ensure the candidate is revoked before proceeding with the listener
replaced Stream < Flowable < List < ServiceInstance > > > with Single < List < ServiceInstance > > in CompositeDiscoveryClient . java to
replaced ` systemResources . getConfiguration ( ) ` with ` configuration ` in multiple classes to improve code readability and maintainability by centralizing configuration
[ hotfix ] [ runtime ] add description to jobmanageroptions
updated the ` updateNoWidgetsView ` method to use ` updateRecyclerViewVisibility ` instead of ` updateNoWidgetsView ` to improve code
added exception handling for XML output factories in XmlUtil . java and updated test assertions in MultiVersionXmlParserTest . java to improve error handling and
added a setUp method to the AuditAliasCommandIntegrationTest class to ensure proper initialization of the workspace during integration tests
removed unnecessary logging statements in WidgetsFullSheet and WidgetsRecommendationTableLayout to clean up the code and improve readability
[ hotfix ] [ test ] disable test for document - literal in cxf test
added error handling for periodical refresh failures in CachedStore . java to improve error handling for periodical refresh failures
refactor ChainingAuditPrincipalIdProvider and CasCoreAuditConfiguration to use RequiredArgsConstructor and add providers to improve code clarity and maintainability
added a method to check default background color in HSSFCellStyle and modified color handling in HSSFPalette to improve color handling and ensure
refactor ZonedDateTimeFormatterBenchmark class to improve code organization to enhance maintainability and readability of the code
added a new test class ` DistributedUpdateProcessor ` and modified ` DistributedUpdateProcessorTest ` to use ` shouldBufferUpdate ` to improve
added null checks for motor and stageNr in SimulationListHandler . java to ensure proper handling of null values when motor and stageNr
updated the ` getItem ` method to accept a boolean parameter and modified the ` getItem ` method to accept a ` boolean ` parameter to enhance functionality by
refactor ExtendedMasterSecretExtension class for improved readability to enhance maintainability and maintainability of the code
updated the variable name from ` List ` to ` final ` in ` AndroidInput . java ` to ensure proper initialization of the processor
added a listener to handle write failures in WritableKeyProcessor to ensure proper handling of write failures during writing
added " CUBE " to MySQLDatabase . java to ensure compatibility with the latest MySQL database features
added error handling for ` IOException ` in ` TestUtil . java ` to ensure proper resource management and prevent potential resource leaks
refactor ExperimentalRobolectricTestRunner and TestRunnerForApiVersion to MultiApiRobolectricTestRunner to improve code clarity and maintainability by
refactor connection timeout handling in DefaultOkHttpClientFactoryTest . java to improve clarity and consistency to enhance code readability and maintainability
refactor BatchUpdateException , PreparedStatement , PreparedStatement , and Statement classes to improve code organization and maintainability
added a null check for os in RawMessageContentRedirectInterceptor . java to prevent potential NullPointerExceptions when os is null
added RecoSegment , Inertia , and AlgebraViewW classes , and updated widget size calculations in AlgebraViewW to
added a ` fromCli ` parameter to the ` jailerMain ` constructor in ` Jailer ` and ` UIUtil ` classes to enhance
refactor HttpRequest class to improve code readability to enhance maintainability and maintainability of the code
added a new ` pull _ unread ` attribute to the ` TalonPullNotificationService ` class to ensure the ` pull _ unread ` attribute is
added a condition to check for the kind of object in IsNullNode . java to ensure proper handling of null objects in the object processing process
updated memory usage in Box2DTest , Pong , and OrthographicCamera classes to improve performance and maintainability of the code
added null checks for mCommentsRecyclerView in ViewPostDetailFragment . java to ensure proper layout management and prevent potential NullPointerExceptions
updated logging level from trace to warn in CLIService . java to improve clarity and consistency in logging output
added logging for method flags in JimpleBodyBuilder . java to ensure proper handling of abstract methods in the method
ggb - 10plus : do n ' t run textfield click on browser 10plus
updated the ` getNotificationUsers ` method to include a ` deviceId ` parameter in ` NotificationManager ` , ` CacheManager ` , and `
updated the baseUrl string from " v4 . 1 / 6 _ 5 _ TIFs " to " SRT - ZIP / SRTM
refactor MotifFileChooserUI to remove propertyChangeListeners and add a new bug6520101 class to improve code clarity and maintainability
refactor handle methods to return boolean values instead of void to improve code readability and maintainability by reducing duplication
refactor ` getRuleOptional ` methods to return ` Optional < BuildRule > ` instead of ` fromNullable ` and ` getRuleOptionalWith
added visibility for transportSpinner in HostListActivity to ensure proper visibility of transportSpinner when makingShortcut is enabled
added null check for attributes _ field in Attr . java and created new classes T7043371 . java and T7073477 .
refactor backPressed methods to return a boolean for better readability and maintainability to improve code clarity and ensure proper handling of back button click behavior
added a new constant ` LONG _ VIEW _ INDEX _ ENABLED _ ATTRIB ` and updated the ` getViewIndexDataType ` method in `
updated the append method name from " V " to " v " in SDRTrunk . java to ensure consistency in formatting of variable names
replaced ` with ` StringUtils . cleanPath ` in ` PrivateKeyParserTests . java ` to clean the path to improve code readability and maintainability
removed the ` newTable ` parameter from the ` diffDropColumn ` method in ` MTable . java ` to simplify the method signature and improve
updated IndexWriter configuration from LUCENE _ 40 to TEST _ VERSION _ CURRENT in TestAddIndexes . java to ensure compatibility with the
hbase - 13232 disable no - strict column family check in importtsv . java
updated logRecordingChannel and logSubscriptionId fields in ConsensusModuleAgent . java to use longSubscriptionId instead of String to improve
updated startActivity method calls and added voice button visibility in Launcher . java to enhance user experience by allowing users to navigate from the application details
added a check for " i " in JSON nodes in PoloniexStreamingService . java to ensure proper handling of JSON nodes in JSON
refactor Procedure class for improved readability to enhance maintainability and maintainability of the code
added Locale . getDefault ( ) and ResourceBundle . getBundle ( rbName ) to CoreResourceBundleControl and Window classes to enhance resource management by providing a default
added a new class ` NormalizeArrayCreationsKotlin ` and a new ` NormalizeArrayCreationsKotlin ` to handle array creation
added a check for mincount and modified counting logic in PerSegmentSingleValuedFaceting . java to improve accuracy of indexing and ensure accurate
updated authorList initialization to use Objects . firstNonNull instead of Optional . fromNullable to ensure proper handling of author lists
added a new test class ` OSGiTest ` and created a new ` OSGiTest ` class to validate import statements and ensure proper
refactor isDependentServiceEnableable method to use a separate method for checking services to improve code readability and maintainability by encapsulating
hbase - 13232 remove the ` ` clearbufferonfail ' ' flag and remove the ` ` clearbufferonfail ' ' flag
refactor scan methods to use ` CtStatement ` instead of ` ifElement . getThenStatement ( ) ` to use ` CtStatement
added a method ` hasUserData ( ) ` to ` SimpleFeatureImpl ` and a corresponding test for user metadata in ` SimpleFeatureImplTest `
updated method signatures in DDLPlanUtils and ExplainTask to use HiveUtils instead of HiveException to improve code readability and maintainability by
refactor RelyingPartyRegistration class to improve code organization to enhance maintainability and readability of the code
removed the enableLogging method from the JavaCompiler class to simplify the code and improve readability
added a new file ` InJavaSourceSet . java ` and modified ` UsesJavaVersion . java ` to include a random ID for source
added a new file path for the fits file in TestGDALParser . java to ensure proper resource loading for the fits file
added a method ` createGetter ` to ` ReflectionHelper ` to allow dynamic creation of a getter method in the ` createGetter ` method
removed the useExternalStorage check from DirectUpload . java to simplify the logic for better readability and maintainability
added a new constant ` INDEXER _ NO _ COMMIT ` and updated ` IndexerMapReduce ` and ` IndexerOutputFormat ` classes to
updated parameter name from true to false in CreateVolumeCmd . java and added null check for diskOfferingId in StorageManagerImpl . java to ensure
added a null check for the content variable in ToHtml . java and updated assertions in BaseTestCellComment . java to ensure that non - empty
added null checks for ` amountToAdd ` , ` periodToSubtract ` , and ` LocalDate ` , and ` LocalDateTime ` classes to ensure proper handling
added a new file ` Issue382 . java ` that handles specific error types in ` get ( ) ` and ` request ( ) ` to
replaced the ` signum ` method with a static method ` signum ` in ` PositionUtils . java ` to simplify the code and improve readability by
added a text field visibility setting for the holder in AttachmentAdapter . java to ensure proper visibility of the holder ' s text
refactor AstParentConsistencyChecker , JDTImportBuilder , and JDTImportImpl classes to use CtReference instead of null to improve code
updated the method call from ` getProfile ( ) : : getProfile ( ) : : getProfile ( ) ` to ` getProfile ( )
refactor LiquidBlock class to extend BucketPickup and add a new BucketPickup class to improve block state management and ensure proper handling of
added a check for the exception in the log in AMQ2902Test . java to ensure proper handling of exceptions in the log
updated setTimeZone from " PST " to " America / Los _ Angeles " in LocaleProviders . java to ensure compatibility with the latest US / Los
updated the ` DistinctErrorLog ` class to use ` distinctObservation ` instead of ` existingObservation ` to improve clarity and maintainability of the
updated attribute names from ` false ` to ` Nightly . class . getAnnotation ( TestGroup . class ) . enabled ( ) ` in multiple classes
refactored logger creation in SQLEditorSupport and SQLExecutionLoggerImpl to use getOrCreateLogger ( ) instead of createLogger ( ) to improve robust
added imports for Class , Method , and Proxy in GraalContext . java to ensure proper handling of methods in the GraalContext class
updated getRGB and getDataElements methods in PGraphics2 . java to use getDataElements instead of getRGB and setDataElements to improve code clarity and ensure proper
updated the method call from HiveUtilities . verifyAndAddTransactionalProperties to HiveUtilities . verifyAndAddTransactionalProperties to ensure proper handling of
refactor overlay handling in Workspace . java to improve code readability and maintainability to enhance maintainability and maintainability of overlay management logic
hhh - 13232 add batchbuilderimpl and unmodifiablebatchbuilderinitiablebatchbuilderimpl and unmodifiablebatchbuilderinit
replace calls to ` shouldNotReachHere ( ) ` with ` shouldNotReachHereUnexpectedInput ( ) ` in multiple Java files to
added a new test class ` MockWithStaticStateDemo ` to ` PartialMockingRetainsStateTest ` and created a new ` Mock
added a new test method ` testUnionWithBracketsAndDeparsedAndDeparsed ` to ` SelectTest . java ` to validate SQL parsing
added null check for ugi and improved error handling in SecurityUtil . java to enhance robustness by preventing potential NullPointerExceptions
added error handling for audio buffers in OpenALMusic and OpenALMusic classes to ensure proper error handling for audio buffers
deprecate the ` reslovestringparameter ` method in ` EndpointHelper ` , ` QuartzComponent ` , and ` Quartz
updated precision calculation logic in RexNodeConverter . java to use scale 1 instead of length and scale to improve precision handling and ensure correct handling of
replaced direct calls to ` getVendorProperties ( ) ` with ` getDeviceProperties ( ) ` in ` WebAuthnMultifactorDeviceProviderAction
updated the assertion in WalletTestAccount003 . java to use Long . toString ( now ) instead of String . toString ( now ) to
replaced AxialStage with RocketComponent in BasicFrame , DesignPanel , and DesignPanel classes to improve code readability and maintainability by
added a default value for ` long - running - time ` in the ` Args ` class to ensure that the ` long - running - time `
updated conditional checks in FindRefComparison and RefComparisonWarningProperty classes and added a new class Ideas _ 2012 _ 21 to improve code clarity and
updated import statements in HttpServerProvider , HttpServerProvider , and ScriptEngineManager to use ServiceLoader instead of Service . providers to improve code readability and maintainability
replaced ` toString ( ) ` with ` toPlainString ( ) ` in ` XSDecimalBinding ` and modified ` GML3EncodingTest `
updated assertions in TestRestClientRequestImpl . java for consistency to improve code readability and maintainability
added a check for referenceDatabase in MissingUniqueConstraintChangeGenerator . java to ensure proper equality checks for reference databases
replaced the addAndroidConstants method with a return statement in IjProjectTemplateDataPreparer . java to improve code readability and maintainability by
updated assertions in ` DuplicateCookieTest ` and ` SessionRenewTest ` to include ` Matchers . is ( 0 , TimeUnit . SECONDS )
added user args to the ChromeTraceBuildListener and modified the ChromeTraceBuildListenerTest to include user args to improve command handling and ensure proper daemon
refactor ResourceBundle retrieval methods to use ModuleSupport for better readability and maintainability to improve code clarity and maintainability by utilizing ModuleSupport for
updated trace level from " match limit " to " match order " in HepPlanner . java to improve clarity of trace messages for better debugging
added a new file ` TheRockMetaDataDemo . java ` with a demo class ` TheRockMetaDataDemo . java ` to provide a way to
changed ` FloatingDecimal ` and ` FormattedFloatingDecimal ` classes from ` FloatingDecimal ` to ` strictfp ` and added a
replaced unparseIdentifier method with an unparseIdentifier method in ColumnStatsSemanticAnalyzer . java to improve code readability and maintainability
added a new test method ` replaceField ` to ` JavaTemplateContextFreeTest ` and modified ` BlockStatementTemplateGenerator ` to use ` Integer
added a check for ` m . isStatic ( ) ` before accessing ` m . isSynthetic ( ) ` in ` InstantiateStaticClass ` and
replaced ` projectFilesystem . getPathForRelativePath ( basePath ) ` with ` projectFilesystem . getPathForRelativePath ( basePath ) ` in ` WorkspaceAndProject
added handling for RescueInfo in IkStepDefinition . java to improve error handling and ensure proper handling of rescue operations
updated ` equals ` and ` hashCode ` methods to use ` getClass ( ) ` instead of ` final ` and ` hashCode ( ) ` across multiple
updated SyncLevel enum from NONE to FSYNC and added a method to retrieve the default sync level to improve flexibility in handling sync level configurations
replace ` pauseMillis ` with ` clientPause ` for clarity to improve readability and maintainability of the test code
added a check for RECOVERY in the RecoveryStrategy class to ensure proper handling of RECOVERY data types
updated the method call from ` getWidth ( ) ` to ` getHeight ( ) ` in ` create ( image . getWidth ( ) ` to ensure accurate
added SDKPath field and modified ProcessExecutorParams initialization in AppleBundle and SwiftStdlibStep classes to enhance flexibility in handling SDK paths and ensure proper
refactor TransientBlobCleanupTask and TransientBlobCache to use a BiConsumer for deleting internal files to improve code clarity and maintainability by
updated log messages for 1 - 1 NAT rule in NetworkManagerImpl . java to improve clarity and consistency in logging messages
refactor PasswordEncoder and StandardPasswordEncoder classes to improve code readability and maintainability
added conversion of row types in HiveSortLimitPullUpConstantsRule and HiveUnionPullUpConstantsRule to ensure proper handling of row types for sorting
refactor BetterBlockPos class to improve code organization to enhance maintainability and readability of the code
updated the return statement from ` getProxy ( ) ` to ` getProxy ( getClass ( ) . getClassLoader ( ) ` in ` EmbeddedVelocityTool
replaced ` autoConnect ` with ` getVersionString ( ) ` for better clarity to improve code readability and maintainability by using a more descript
added support for OracleDatabase in LoggingExecutor and JdbcExecutor to ensure proper handling of trailing characters in SQL statements
added a new boolean variable ` UNKNOWN _ VALUES _ ARE _ NSP ` and a constant ` UNKNOWN _ VALUES _ ARE _ NSP
set the port for the main server in MainTest . java to ensure the correct port is set for the server
updated BLOB _ SIZE and SLIDER _ MARGIN from 7 to 6 and updated slider length calculations in DrawAudio . java to improve
added a method to add multifactor authentication provider bypass in DuoSecurityMultifactorProviderBypassConfiguration to ensure proper handling of multifactor authentication
updated method signatures in MaxRectsPacker . java for consistency to improve code readability and maintainability
updated import statements in multiple XML adapter classes to improve clarity and consistency to enhance code readability and maintainability
added support for the help page in the PMS and HelpTab classes to enhance user experience by providing a customized help page
added new GeocodeProviderFactory and Constants classes to implement GeocodeProviderBaseFactory and updated Constants interface to enhance functionality for the Omni Notes Beta
updated import statements from ` org . apache . lucene . analysis . util . CharArraySet ` to ` org . apache . lucene . analysis .
added a new test method ` testConstructorException ` in ` OptionTest ` and modified exception handling in ` ResourceManagerImplTest ` to improve error handling
updated GATEWAY _ SERVER _ ID from " GATEWAY _ SERVER " to " GATEWAY _ SERVER
updated method calls from ` getIndexOptions ( ) ` to ` DocValuesType . NONE ` in ` SegmentsInfoRequestHandler . java ` and added
updated the calculation of numPredictiveAppCols from Math . max ( numColumns , numAppsCols , numAppsCols ) to
added a method ` hasScalarSubqueryInput ` to ` JoinUtils ` , ` DrillJoinPrule ` , and ` TestNestedLoop
added a new file ` BlockBuildCraft . java ` that implements a BlockContainer class to facilitate the construction of block blocks in the world
updated gravity settings in DeviceProfile . java to use FrameLayout . LayoutParams for targetsLp and targetsLp to improve code readability and maintain
replaced the call to ` run ( ) ` with ` start ( ) ` in ` YahooSession . java ` to improve code readability and maintain
added null check for metaStoreClient in HiveMetaStore and modified error logging in HiveMetaStoreClient to improve robustness by preventing potential NullPointerException
updated getDisplayScript method to use Category . DISPLAY instead of getDefault ( ) in Locale . java and added a new test for display scripts to ensure
replaced static imports of ` BASE _ URL _ PROP ` with ` CORE _ NAME _ PROP ` in ` Replica . java ` to
replaced ThreadLocalRandom with Random in StoreDirectTest . java to simplify the code and improve readability
refactor backupFavorites and backupWidgets methods in LauncherBackupHelper to improve readability and maintainability of the code
updated error messages from " space < 0 " to " space < 0 : " in Cell . java to improve clarity and consistency in error handling for
added a new file ` ResiliencePooledRouteOkTest . java ` that tests the ` ResiliencePooledRouteOk ` class
replaced ` getBodySpace ` and ` mBarSpace ` with ` getBarSpace ` in multiple chart classes to improve code readability and maintainability
refactor ShadowProcess class to improve code readability to enhance maintainability and maintainability of the code
updated import statements in FileMessageHistoryTest . java to use TemporaryFolder for clarity to improve code readability and maintainability by using a temporary
added logging levels for express , express , and mongodb driver logging in Grasscutter . java to enhance logging capabilities for better debugging
updated ` highlightCnstScrRngQuery ` and ` setHighlightCnstScrRngQuery ` methods to static to
updated state checks in Launcher and Workspace classes to improve clarity and consistency to enhance code readability and maintainability by ensuring proper state management
refactor multiple assertion classes to improve code organization to enhance maintainability and readability of the codebase
updated conditional checks in SnippetTemplate . java to include cacheable parameters to ensure template notifications are only notified when the cacheable is set
added support for core scope session in multiple classes to enhance flexibility in handling Solr core configurations
updated the ` CREATE TABLE ` method to include a primary key key in ` DatabaseMetaDataTest . java ` to ensure the correct primary key is retrieved
updated command names from " -- permissions - config - path " to " -- permissions - config - file " in multiple files to improve clarity and consistency
refactor HttpSessionContextIntegrationFilter to simplify session creation logic to improve code readability and maintainability
added a new file TestIfWithDeadRegion . java that implements a Supplier < String > and implemented a new test class TestIfWithDeadRegion
updated the EnglishUdLas variable name from EnglishUd to EnglishUsd in DependencyParserITest and DependencyParser . java to
updated the loop iterations in SnowflakeIdGeneratorTest . java to use HighResolutionTimer . enable ( ) and disable ( ) to ensure proper
added a ` staticUi ` property to ` AppSettings ` and modified the ` hideToastBar ` method in ` MainFragment ` to support
replaced the return statement with a try - finally block in WindowsSecurity . java to ensure proper resource management and avoid potential memory leaks
refactor parameters handling in SamlRedirectLogoutHandler and WhitelistLogoutHandler to improve clarity and consistency to enhance code readability and maintainability by
updated message handling in MEncoderVideo , NavigationShareTab , and PluginTab classes to use Messages . getString ( " Dialog . Options " ) instead
added assertions for X - tika - ooxml and X - tika - ooxml and X - tika - ooxml in TestMimeType
replaced ` runnerOptions . getGlue ( ) ` with ` FixJava . join ( List < String > objects ) ` in multiple Java files to
camel - 14279 : camel - core - fix xml output for xml output
added a synchronized method ` removeVersionInfoForEndpoint ` to ` MigrationCoordinator ` and updated its usage in ` StorageService ` and ` MigrationCoordinator
added debug logging for audio capture devices in DeviceConfiguration . java to improve logging clarity and ensure proper handling of audio capture devices
added a WebsocketConfig to the ShenyuConfig class and updated WebSocketPluginConfiguration to use a maximum frame payload size to enhance the Websocket
refactor CacheValidationListener to utilize CopyOnWriteArrayList for resultQueues and improve thread safety to enhance performance and maintainability of the CacheValidationListener
added a check to ensure that the content length is not empty before adding it to the document to prevent potential NullPointerExceptions when the content length is
added a method ` solvingTerminated ( ) ` to ` DefaultSolverJob ` to improve thread safety and maintainability of the code
refactor ` createTimeseries ` method to use ` internalCreateTimeseries ` instead of ` createTimeseries ` to improve error handling and ensure
added a check method to the Authz class to provide a way to check the result of the Authz class
changed access modifiers of several methods from public to protected in ShadowActivityManager , ShadowActivityManager , and ShadowSettings classes to enhance encapsulation
refactor isRecursive logic in ManagementServerImpl to use cmd . isReserved ( ) instead of null to improve code readability and maintainability by
updated HttpParser to use " " instead of " " in HttpCompliance . RFC2616 . ordinal ( ) to ensure compatibility with RFC2616
added ` threadCompleteInitialization ` method to ` J9VMInternals ` , ` Thread ` , and ` Thread ` classes to ensure proper handling
added ` getExternalStoragePublicDirectory ` method to ` ShadowEnvironment ` and created a new ` EnvironmentTest ` class in ` ShadowEnvironment ` to enhance
added a new test method ` testMVELTypeCoercion ` to ` MiscTest . java ` to ensure proper handling of
refactor log file handling in LoggingConfig . java to improve clarity and consistency to enhance code readability and maintainability
added exception message to the logging statement in ActionNode . java to improve clarity of error messages for better debugging
added a check for " tel : " in the toNumber string in SipUtil . java to ensure that the correct number is used in the
refactor conditional checks in FileListListAdapter to improve code readability and maintainability to enhance maintainability and maintainability of the code
removed deprecated HIVEOPTSORTDYNAMICPARTITION configuration from HiveConf and TestTxnCommands3 to streamline code and improve maintainability
hive - 13232 : do n ' t set sessionid and logid in executestatementoperation and executestatementoperation .
updated method calls in BTCMarketsStreamingAdapters and BTCMarketsWebSocketSubscriptionMessage to use Arrays instead of Lists to improve code
updated assertions in OGRDataStoreTest to use getTypeName ( ) instead of getName ( ) to improve clarity and consistency in naming conventions
removed the ` onErrorInStep ` method from the ` StepListenerSupport ` class to streamline the code by eliminating unnecessary code
refactor Wallet class to improve code readability to enhance maintainability and maintainability of the code
camel - 14279 : camel - netty - http : use default charset when use default charset
updated logging statements in TestNonBlockingAPI . java to use log . info instead of System . out . println to improve clarity and maintainability of
added a check to check if the row is greater than the number of connections in DbConnectionDialog . java to ensure that the connection list is
added a new file ` MethodWithSameNameAsEnclosingClass . java ` to handle method declarations with same name as the enclosing class to ensure proper
added support for ExtendedPlatformComponent in ManagementFactory and created a new ExtendedPlatformComponent class in ExtendedPlatformComponent to enhance platform management capabilities and ensure proper
added quotes for ` sql ` in ` BasicQueryTest . java ` to ensure proper handling of escape sequences in SQL statements
[ bleutrade ] use org / knowm / bleutrade / bleutrade / dto instead of org / knowm / bleu
refactor TextEscapeUtils to improve code readability to enhance maintainability and maintainability of the code
added a new constant FILTER _ PARAM in AbstractSpatialFieldType . java and updated the FilteredQuery instantiation in AbstractSpatial4Spatial . java to improve
updated auto email sending logic in GpsLoggingService and AutoEmailHelper to improve user experience by providing feedback during email notification
refactor Inlinks and LinkDb classes to use HashSet instead of ArrayList for improved readability and maintainability to enhance code clarity and maintainability by
added a synchronized method ` stopScan ( ) ` to the ` TradfriDiscoveryService ` class to ensure that the ` removeOlderResults
modified the testFilterForPartition method to accept a boolean parameter and modified the testFilterForPartition method to handle blocking mode to ensure proper handling of
added Abandoned and Abandoned to the list of request workflows in TicketModel and TicketBasePage to enhance the
updated columnAliasPrefix assignment from " c " to " c " in multiple platform classes to ensure consistency in naming conventions and improve code clarity
updated LlapRowRecordReader and LlapRowInputFormat to use BytesWritable instead of Text to improve data serialization efficiency and maintainability by using Bytes
added a new class ` NonNativeJVMDetector ` and modified ` TerasologyEngine ` to check for 64 - bit architecture to enhance
updated comparison logic in PdfCopy . java to use copyObject ( ) instead of copyObject ( ) to improve code readability and maintainability by
added a new option for DAEMON in the RESET _ ALARM and DAEMON options in TerminalClient and TerminalClient classes to enhance
added a new file ` FlushIndexTask . java ` that implements a PerfRunData class to implement the FlushIndexTask class to provide a
updated method signatures in BinaryMemtable , ColumnFamilyStore , ColumnFamilyStore , ColumnFamilyStore , ColumnFamilyStore , and Memtable classes to
updated conditional checks in MediaLibraryFolder . java to include SEASONS for better clarity to enhance code readability and maintainability
added a new file LocalSocketAddress . java to verify IPv6 addresses to ensure proper handling of IPv6 addresses in the system
updated grid size steps from 2 to 2 in GridSizeMigrationTask . java to ensure accurate scaling of grid size steps
updated method names from ` getName ( ) ` to ` classForName ( ci . name ) ` in ` SerializerPojoPojo . java ` to
added a new ` READ _ ONLY ` constant and modified the ` Context ` class to include ` options ` and ` isReadOnly ( ) ` to
refactor LookAndFeelCommand class to improve code organization to enhance maintainability and readability of the code
updated the calculation of lastRunEnd to use ceiling ( lastRunStart ) instead of floor ( lastRunEnd ) to ensure accurate calculation of run
added EOFException and EofException handling in GracefulStopTest . java to ensure proper exception handling for EOFExceptions
refactor NetJavaImpl to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor NetworkParameters class to improve code readability to enhance maintainability and maintainability of the code
removed the conditional check for allowAccountAssetOptimization in DynamicPropertiesStore . java to simplify the logic for account asset optimization
added a new constant ` J9 _ GC _ POLICY _ NOGC ` to ` VM . java ` to provide a default value for GC
added error handling for invalid protocol packets in TransactionCapsule . java to improve error handling for invalid protocol packets
deleted the ` ExceptionTypeChecking . java ` file and added a new ` ExceptionTypeChecking . java ` class to streamline the codebase by
updated resource retrieval to use " en / " instead of " en / " instead of " en / " to improve clarity and maintainability of resource
added a new file ` ProcessorInfo . java ` with available processors in the ` io . vertx . core . impl . cpu ` package to facilitate
added a new method ` xslt ` to generate HTML output via ` PrintingBugReporter ` to provide a way to generate HTML output based on
refactor LogbackLoggingSystem to use ` final ` instead of ` Optional < String > ` for better readability and maintainability to enhance code
refactor HostLevelParamsHolder to use ServiceComponentRecoveryChangedEvent instead of Collection to improve code clarity and maintainability by using a more descriptive
added a new test method ` shouldCreateHandlerByDefault ` to ` SleuthTagPropagationAutoConfiguration ` and modified the ` Sle
refactor dependency handling in RustCompileUtils to use switch - case for SHARED and STATIC _ PIC to improve code readability and
updated the oauth2LoginLinks method to include a MultiValueMap parameter and added error handling to improve error handling by providing a clear error message for
added firstKey and firstKeySeeked fields to HalfStoreFileReader and HStore classes to improve readability and maintainability of key retrieval logic
hhh - 14257 add isalways ( ) method to columndefault , generationtype , and generationtime
added a new test method ` testLayerNormNan ` in ` TestLayerOpValidation . java ` to validate layer normalization functionality to ensure correct
replaced direct calls to ` showShareFile ( ) ` with ` getFileOperationsHelper ( ) ` across multiple activities to improve code clarity and maintainability
added a new file ` LiquibaseUpdateMojoExecutionTest . java ` that tests the ` LiquibaseUpdateMojoExecutionTest ` class to
updated the value of the proxyType from ` to ` toUpperCase ( ) ` to ensure the proxyType is properly converted to ` toUpperCase ( ) `
added a new class ` mod _ MinecraftForge ` and modified ` mod _ MinecraftForge ` and ` mod _ MinecraftForge ` to
added a new variable ` tablesOfColumnsFetched ` and modified the caching logic in ` JdbcDatabaseSnapshot . java ` to improve the handling of
added CSS border styling to the CSS border in CSSBorderTest . java to improve visual consistency and maintainability of the CSS border handling
refactor RetryAutoConfiguration and LoadBalancedRetryPolicy to include a ConditionalOnClass annotation and add a new RetryInterceptorAutoConfiguration class to improve code
updated the constructor call from FILL _ PARENT to MATCH _ PARENT in CellLayout . java to ensure that the layout correctly reflects the
updated the calculation of the parentTaskName to use System . currentTimeMillis ( ) instead of System . nanoTime ( ) to ensure the parentTaskName
added logging logic for AddServiceRequest in ServiceResourceProvider . java to improve error handling for invalid Add Service requests
refactor conditional checks for index versioned files in IndexDatabase . java to improve code readability and maintainability
updated the handling of ` ggbround ` in ` CASgiac . java ` to use ` im ` instead of ` im ` to
refactor AnonCipherWithWantClientAuth class for improved readability to enhance maintainability and maintainability of the code
added @ Deprecated annotations to ProducerTemplate . java to indicate that these methods are outdated and should not be used
refactor JLayer class to improve code readability to enhance maintainability and maintainability of the code
updated assertion logic in EvictionTest to use AssertTask for better readability to improve code clarity and maintainability by using a more descript
replace ` encodeInternal ` with ` saltedPass ` in ` Md5PasswordEncoder . java ` to improve clarity and consistency in password encoding
replaced ` viewTreeObserver ` with ` mTaskRecyclerView . getViewTreeObserver ( ) ` in ` IconRecentsView . java ` to improve
refactor Response class to improve code readability to enhance maintainability and maintainability of the code
updated variable name from Long . MIN _ VALUE to Long . MAX _ VALUE for consistency to improve code readability and maintainability
added a resize of the call participant panel in SecurityPanel . java to improve user experience by providing a more detailed panel size
added null checks for replies in TweetActivity , TimeLineCursorAdapter , and TweetView classes to prevent potential NullPointerExceptions when replies are
updated ` HitbtcBalance ` and ` HitbtcAdaptersTest ` to use ` Objects . equals ` and ` Objects .
refactor SQL code generation to use CharSequence column instead of copying the metadata to improve clarity and maintainability of the metadata handling logic
updated return statement from ` s ` to ` addrs . toString ( ) ` in ` RetriesExhaustedWithDetailsException . java `
refactor file closing logic in EditGcodeFile . java to use OpenCookie instead of ContextAwareAction to improve code readability and maintainability
updated import statements in JsonToGrpcApplicationTests . java to use HttpClients instead of BasicHttpClientConnectionManager to improve code clarity and maintainability by
refactor energy removal logic in PipePowerWood . java to improve code readability and maintainability
added a check to delete the temporary output file before deleting it to ensure proper cleanup of temporary output files
updated the ` BitstampWebSocketTransaction ` constructor and added a new ` BitstampStreamingMarketDataServiceTest ` class and updated import statements in ` Bit
added checks for expired time and size values in ReplayProcessor , ReplaySubject , and ReplaySubject classes to ensure proper handling of expired values
updated the expectedCitation string from " [ 1 ] " to " [ 1 ] " in CitationStyleGeneratorTest . java to
added support for video HDR format in MediaTableFiles . java and modified SQL queries in MediaTableFiles . java to enhance user experience by allowing
added a method to check if the equation definition is only shown in EXAM in AlgebraItem . java and updated features in App . java
added a null check for the component in SIPCommTextFieldUI . java to prevent potential NullPointerExceptions when component is null
added caching configuration for the startrow in MetaReader . java to ensure caching is enabled when the scan root is not present
updated the init script from " q _ test _ init . sql " to " q _ test _ init _ for _ minimr . sql
updated Math . java and StrictMath . java files for consistency to improve code readability and maintainability
added a new feature flag ENABLE _ TRANSIENT _ TASKBAR to FeatureFlags to enable transient taskbar in the application
refactor AccessExecution and ArchivedExecutionVertex classes to improve code organization to enhance maintainability and readability of the codebase
added a conditional check to set density to 3f in IOSGraphics . java to ensure density is only set when the scale is 3
change optional and vararg fields from optional to vararg in Parameter . java to improve code clarity and maintainability by using a more descriptive
added a new Exception object to the logging statement in RegionStateStore . java to improve error handling by providing a clearer error message
fix testclusterupgradeutils # testclusterupgradeutils # testclusterupgradeutils # testclusterupgradeutils # testclusterupgradeutils # testclusterupgrade
refactor AsyncHttpConnection and AsyncContextTest to improve error handling and add a new LocalAsyncContextTest class to enhance code clarity and maintainability
added a boolean parameter ` showArrow ` to the ` SearchUiManager ` class to allow customization of the ` showArrow ` flag in the
added lock mode handling in Database . java and modified testSetMode method in TestRowLocks . java to improve lock mode management and ensure proper
added a test for linux / amd64 in BigEndianTest . java to ensure compatibility with linux / amd64 tests
added checks for Integer and IntValue types in Scalars . java to ensure proper handling of integer and integer input types
added a check for empty PRIMARY KEY aliases before throwing an InvalidRequestException to ensure that only PRIMARY KEYs are used when there are multiple
added support for button icons in CellLayout , Hotseat , and Launcher classes to enhance user experience by allowing customization of button icons
added exception handling for isolate query for Flutter views in VMServiceManager . java to improve robustness by throwing an exception when no isolate to query
added methods for handling MIME content type and xss protection in HeadersConfigurer . java to enhance the handling of HTTP headers in the application
refactor ObjectEnumerableAssert class to improve code readability to enhance maintainability and maintainability of the code
refactor ` DevToolsProvider ` to use ` devTools ` instead of ` SeleniumCdpConnection ` to improve code readability and maintainability
added a type parameter to the AggregateRoot annotation in EventSourcingRepositoryTest . java to ensure the correct type of the AggregateRoot annotation
added prebuilt library handling to PythonBinaryDescription and PythonInPlaceBinary classes to ensure proper handling of pre -built library paths in the binary
refactor NetServerOptionsConverter and HttpServerOptions classes to use ClientAuth instead of ClientAuth to improve code clarity and maintainability by centralizing client
updated directory paths from " / user / hive . repl . rootdir " to " / user / $ { system : user . name } "
refactor task view handling in RecentsView . java to improve code readability and maintainability
increase timeout from 60 seconds to 60 seconds in AmqpTransformerTest . java to allow for more time for test execution
removed the call to clearAll ( ) in DataTableTopComponent . java to streamline the code and improve readability
replace controller with flowController in DecreaseContextLevelProcessable , GatheringModelProcessable , and SimpleModelProcessable classes to enhance flow
updated variable names from ` getExchangeSumNum ( ) ` to ` setExchangeSumNum ( ) ` in ` OperatorTreeGenerator ` and `
added a new import statement for ClassLoaderHandler in the module - info . java file to enable classloading functionality in the application
updated method signatures in SolutionBusiness and SolverAndPersistenceFrame to return the best solution instead of a working solution to improve code clarity and maintainability
added a JsonIgnore annotation to the ApplicationSettings class to enable removal of jackson from the application settings
added a null check for the throwable in PlotListener . java to ensure that the throwable is not null before proceeding
removed unnecessary check for queryInfo in QueryTimeManager . java to simplify code and improve readability
updated deltaProgress from NONE to GUI _ ONLY and modified condition checks in TileAutoWorkbenchBase . java to ensure proper handling of items in the
added a conditional check for parser hasNext ( ) before setting position and position in Gl200TextProtocolDecoder to ensure proper handling of the parser ' s
refactor time column names in AvroRecordToPinotRowGenerator to use incomingTimeColumnName instead of timeColumnName to improve code clarity and
removed unnecessary calls to ` HttpMethed . waitToProduceOneBlock ` in ` HttpShieldTrc20Token004 . java `
added a new interface ` Initializable ` in ` ContainerBuilder . java ` and created a new ` Initializable ` interface in ` ContainerImpl .
refactor TimerObservationHandler to utilize LongTaskTimer for improved readability and maintainability to enhance code clarity and maintainability by utilizing a
updated the variable ` SYNC _ DELTA _ RATE ` and ` SYNC _ DELTA _ RATE ` to use a
added logging for unwrapped fragment expressions in AbstractStandardFragmentInsertionTagProcessor . java to enhance debugging capabilities for fragment insertion tags
changed the type of the _ attributes assignment from HashMap to ConcurrentHashMap in SessionData . java to improve type safety and simplify the serialization process
updated the message handling in ActiveMQMessageConsumer to use copy ( ) instead of copy ( ) to improve clarity and maintainability of message management
added support for dark text in dark text in ColorExtractionAlgorithm . java and updated related methods in ColorExtractionAlgorithm . java to enhance color handling and
added a check to ensure the data folder is accessible before adding it to the srcFolderPathList to ensure that the source folder is only added when
replaced ` BuildConfig . BUILD _ TYPE . equals ( " debug " ) ` with ` StringUtils . isEmpty ( ) ` in multiple files to
removed the initialization of the sessionRegistry instance from the SessionRegistryImpl class to simplify the initialization process and improve code readability
added logging statements for connection complete and error messages in NettyStreamingService . java to improve debugging and provide clearer feedback on connection failures
replaced ` Factory ` with ` JavassistProxyFactory ` and updated import statements in multiple test files to ensure compatibility with Javassist
replaced ConcurrentLinkedQueue with ConcurrentHashSet in QueuedThreadPool . java to improve code readability and maintainability
refactor SocketExceptions and ExceptionText to use InetAddress . join ( ) instead of StringBuilder to improve code readability and maintainability by centralizing
added a method to check if the view directory is under the repo directory to ensure that the view directory is under the repo directory
refactor tab header handling in JabRefFrame . java to improve code readability and maintainability
refactor multiple test classes for improved readability and maintainability to enhance maintainability and maintainability of the codebase
added a check for ACTIVE and REPLAYING state in PeerSync . java to ensure that the update log is only logged when the state is
deleted the ConnectionHook . java file to remove unused code to streamline the codebase by eliminating unused code
removed the ` waitForReplicasInSync ` and ` waitForReplicasInSyncWithLeader ` methods from multiple test classes to simplify the code and
camel - 14263 : camel - camel - camel - camel - camel - camel - camel - core - camel - camel - camel - camel
updated ApexLanguageModule to use the current external version instead of " 45 " and added a method to check for namespaceGuarded access to enhance
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
added a static class ` AggregateEngineHolder ` and updated the usage of ` AggregateThread ` in ` AggregateEngine ` and ` OverflowQueryEngine
updated WebSocketAsyncConnection constructor to include ByteBufferPool instead of StandardByteBufferPool in WebSocketAsyncConnection and WebSocketServerFactory to enhance buffer management for WebSocket connection
updated scrollToPositionWithOffset logic in UploadActivity . java to ensure correct positioning for thumbnails in the UploadActivity
added validation for column metadata in SqlCodeGenerator and implemented a new test for timestamp handling in SqlCodeGeneratorTest to ensure proper handling of column metadata
refactor animation handling in LauncherAnimUtils and LauncherStateTransitionAnimation classes to improve code readability and maintainability
added a check to disable default user agent based on httpClient configuration to ensure that default user agent is disabled based on configuration
added a boolean flag ` pubsubhubbub ` in ` FeedRefreshUpdater ` and ` ApplicationSettings ` classes to check if the feed is pubsub
changed the visibility of the finalize method from public to protected to allow subclass access to the finalize method
updated method names from ` isAnonymousOrLocalClass ` to ` isAnonymousOrSyntheticClass ` in ` StubJarClassEntry . java ` and
added a new file ` DSpaceWebapp . java ` that implements a ` AbstractDSpaceWebapp ` class to implement functionality for REST REST
added null checks for leftTableAlias in CalcitePlanner and RowResolver classes to ensure proper handling of table alias configurations
updated the trigger key name from " Trigger " to " Trigger " in JobGenerator . java to ensure consistency in key naming conventions
updated logging statements to use ` getTransactionId ( ) ` instead of ` discard ( ) ` to improve clarity and consistency in logging messages
updated import statements in BasicMapTest . java for clarity and clarity to improve code readability and maintainability
updated the boolean variable name from ` rcfileOptimizedWriterEnabled ` to ` rcfileWriterValidate ` in multiple config files to improve clarity and
added a new enum ` TlsClientCertPolicy ` and modified ` GitBlitServer ` to use ` TlsClientCertPolicy ` to
added a debug log statement in KrakenFuturesStreamingService . java to log a warning when the subscription is failed to subscribe to authenticated feeds
added headers parameter to the ProxyWebSocketHandler constructor and updated related methods in WebsocketRoutingFilter to enhance the handling of WebSocket protocols based on the
added debug logging for HiveQueryResultsFetchReq in HiveQueryResultSet . java to enhance debugging capabilities for fetching results
updated variable name from ` dimName ` to ` dimName ` in ` HolidayEventFormatter . java ` to improve code readability and maintainability
refactored the ` FinalizePrivateFieldsTest ` and ` FinalizePrivateFields ` methods in ` FinalizePrivateFieldsTest ` and `
refactor UnexpectedJobExecutionException class to improve code organization to enhance maintainability and readability of the code
removed the ` shouldUseOpaqueButtons ( ) ` method from ` AquaUtils ` and removed the ` shouldUseOpaqueButtons ( ) ` method
updated the calculation of maxFreq and docsEnum in DrillSidewaysQuery and DrillSidewaysScorer to improve null safety and
added a new class registry for GeoDegeneratePath in StandardObjects . java to ensure proper handling of GeoDegeneratePath classes
removed the ` preFill ` parameter from ` ParticleEffectPool ` , ` FlushablePool ` , and ` ReflectionPool ` classes to simplify
added a conditional updateStateForFlag to TaskbarLauncherStateController and updated state handling in TaskbarStashController to improve state management and ensure
added null checks for getDefaultStyle ( ) and StyleInfo in CascadeDeleteVisitor . java to ensure proper handling of null values and prevent potential NullPointer
updated Dimension and setPreferredSize methods in GuiUtil and StatusTab classes to improve size and max width management to enhance code readability and maintainability by
refactor icon retrieval logic in FileTreeViewHolder . java to use TreeFileExtension . Factory for better readability to improve code clarity and maintainability by
updated assertions in ParallelUniverseTest to use ` contains ( ) ` instead of ` isEqualTo ( " v18 " ) . isEqualTo ( " v18
updated the calculation of passed and skipped tests in XMLReporter . java to improve thread safety and ensure thread safety during test execution
added a new file TestNativeProbabilityFunctionQueries . java that implements AbstractTestNativeProbabilityFunctionQueries . java to facilitate testing of native probability function queries
added a call to ShutdownThread . deregister ( this ) in ClientContainer . java to ensure proper deregistering of the shutdown thread
added a method ` dropTemporaryTableAfterUse ` to ` SybaseASE15Dialect ` to check if a temporary table is used to prevent
refactor HtmlUnitWebElement and Color classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated SolrCore , XMLWriter , DocIterator , and QueryParsing classes to improve performance and maintainability of the codebase
refactor LinksIndexingFilter class to improve code readability to enhance maintainability and maintainability of the code
updated string formatting in VirtualAllocCommitUncommitRecommit . java to include reserved 1024KB for test to improve readability and maintainability of the
updated ad playback state retrieval logic in AdTagLoader , AdTagLoader , and AdsMediaSource classes to improve ad playback state management and ensure
added a suppress warning for the equality check in MultimapSubject . java to ensure that the contract of this method does not follow Multimap . equals
updated variable names from ` deg _ text ` to ` unit _ hz ` in ` WaveGeneratorActivity . java ` to ensure consistency in variable
remove beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta -
removed redundant putAll method call in TestLabelOptions . java to simplify code and improve readability
refactor vertex format handling in VertexLighterFlat . java to improve code readability and maintainability
refactor TracingClientInterceptor and ITTracingServerInterceptor to use SpanInScope for tracing tracing to improve code readability and maintainability by central
replaced ` ZoneId ` with ` toZoneId ` in ` ScheduledTrigger . java ` and updated the formatting in ` ScheduledTriggerTest . java
added a new ` AsyncBucket ` and ` InMemoryExtension ` class and updated related classes to include ` InMemoryExtension ` and ` InMemoryExtension ` to
refactor classes directory handling in resexhausted003 . java to use regex for class path validation to improve code readability and maintainability
updated variable names from ` _ maxIdleTime ` to ` _ lowResourceMaxIdleTime ` and ` _ soLingerTime ` to improve
refactor OngoingStubbing class for improved readability to enhance maintainability and maintainability of the code
updated ObjectMapper objectMapper to use a Optional < WebServer > for reusing and refactored web server port retrieval logic to improve web server management and
replaced productConstructor with constructor in HttpClientUtil . java and added SolrHttpClientImpl in SolrTestCaseJ4 . java to improve code clarity and maintainability
added a check to ensure thread allowlist is not cleared before clearing the allowlist to avoid potential IllegalStateException when the thread allowlist is not cleared
updated the method call from ` setOutputSource ` to ` setItemWriter ` in ` TransformerWriterItemProcessorTests . java ` to improve clarity
[ dmn ] add a check to check if the hit policy be non - COLLECT .
added a new test method ` testSlidingWindowsCombine ` in ` CombineTest . java ` to validate the behavior of the ` Combine ` class to
added a conditional check for all apps dirty before binding all apps in Launcher . java and updated logging statements in LauncherModel . java to
added a check for the " Running " attribute in ManagedFileWatcherReloadStrategyTest . java to ensure that the test correctly handles the " Running "
refactor Beautiful class to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor AquaMenuBarUI to use GetBooleanAction instead of getPrivSysProp to improve compatibility with LWCToolkit ' s embedded environment
updated setRawLocation method to accept a boolean parameter and modified setRawLocation method to include a boolean parameter for fall distance setting to enhance functionality by
updated the query logic in SimpleJpaRepository to use a Specification for sorting to improve query performance and ensure proper query handling
added timestamp and nonce and number values for genesisBlockArg in BlockUtil . java to improve data integrity by ensuring consistent timestamp and nonce and number
replaced ` LoopSafepointInsertionPhase ` with ` SafepointInsertionPhase ` across multiple classes to simplify the code and improve readability by eliminating unnecessary
added null checks for children in RSGroupInfoManagerImpl and modified the loop logic in ZKProcedureMemberRpcs to improve robustness by
changed access modifiers of ` ArtifactResolver ` and ` getAllDependecies ` methods from ` public ` to public in ` ArtifactResolver ` to allow
added Thread . currentThread ( ) . stop ( ) to ClientConnectionHandler , BulletPhysics , and ChunkProcessingPipeline classes to improve thread management and
added a check to ensure maxBufferedDocs is less than 1 to prevent IllegalArgumentException when maxBufferedDocs is less than 1
added a boolean variable ` loginCurrentlyInProgress ` and modified ` loginCurrentlyInProgress ` and ` onRestoreInstanceState ` in ` LoginActivity `
added null checks for the next element in Pump . java and added a new test for UUID generation in PumpTest . java to ensure that
changed access modifiers of HttpShardHandlerFactory and LBHttpSolrServer from private to protected in HttpShardHandlerFactory and LBHttpSolrServer
updated order from LOWEST _ PRECEDENCE to HIGHEST _ PRECEDENCE and added a new DefaultAuthenticationServiceSelectionStrategy
added imports for Server , HandlerList , and HandlerList in TestJNDI . java to ensure proper handling of server configurations
refactor SortedDynPartitionOptimizer to improve code readability and maintainability to enhance readability and maintainability of the code
updated the return statement from ` NioEventLoop ` to ` true ` in ` FileStreamChannel . java ` to ensure proper handling of N
replace oldNumNulls with newNumNulls in StatsUtils . java to ensure correct rounding of newNumNulls based on newNumRows
camel - 16464 : camel - kamelet - add support for kamelet in the integration test .
updated import statements and added a taskDone flag in OSMJob . java to improve code clarity and enhance error handling for authorized users
refactor test methods to use CompilationResult instead of System . out for clarity and consistency to improve code readability and maintainability
added a ` clientAuth ` property and its getter / setter methods in ` IoTDBRestServiceConfig ` , ` RestService ` , and
replaced ` mocksToBeInjected ` with ` mockCandidate ` in ` PropertyAndSetterInjection ` and added a new test class ` ChildWithSame
refactor BloomFilter64bit and BloomUriUniqFilter to use InitializingBean for improved readability to enhance code clarity and maintainability by
changed ` getCursorAdapter ( false ) ` from ` false ` to ` true ` in ` HomeFragment . java ` and added a preference for
setIntermediateHeaderHeightRatio from 1f to 75f in ProfilePager . java to increase header height ratio for improved performance
replaced ` @ SuppressWarnings ( " null " ) ` with ` jdk . nashorn . internal . events . RecompilationEvent `
added HOST _ SYS _ PREPPED configuration to ExecutionCommand and ClientConfigResourceProvider classes to ensure proper handling of system pre - installed
added a logEveryUnknownFileFormat parameter to the include method in DatabaseChangeLog . java and created a new UnknownChangeLogFormatLoggingTest .
added a loop to remove the ' / ' character from the location directory to ensure proper cleanup of the location directory
added a new static property ` PROP _ ENTITIES ` and ` PROP _ SCORES ` to the ` StaticPipeline ` class to
refactor filename handling and path handling in Frame and Utils classes to improve clarity and consistency to enhance code readability and maintainability by centralizing path
do n ' t throw an exception if the datastore be not find in the workspace
refactor Assert class for improved readability to enhance maintainability and maintainability of the code
added unit tests for MultiLineGridlikeText and MultiLineJaggedText to ensure proper functionality and functionality of text processing in the area
replaced calls to ` assertMockEndpointsSatisfied ( ) ` with ` sendAMessageToOneTopicWithTwoSubscribers ( ) ` for better clarity
replaced direct calls to ` writeMeasurementSches . get ( 0 ) ` with ` writeMeasurementSches . get ( 0 ) `
updated the loop condition in TestPromotionFromSurvivorToTenuredAfterMinorGC . java to include expected memory usage to improve performance
updated log4j12 and reload4j version from log4j12 to log4j - reload4j in LoggingOptionsTests . java
added a waitForAssert method in HueBridgeHandlerOSGiTest . java to ensure that the test succeeds with a waitForAssert method
updated package names from ` com . itsaky . androidide ` to ` com . itsaky . androidide . activities ` across multiple
[ drools - 1276 ] [ drools - 1276 ] ignore test that fail when drools - 1276 be fixed
added a constructor to create a new PullRequestMergedEventsStream that retrieves an Avro schema from the Pinot schema to enhance functionality by
refactor AbstractExpressionPart class to improve code readability to enhance maintainability and maintainability of the code
refactor TaskSlot class to improve code readability to enhance maintainability and maintainability of the code
replaced FIRE _ EXCEPTION _ ON _ FAILURE and FIRE _ EXCEPTION _ ON _ FAILURE with ChannelFutureListener and
added a check for LockException before releasing locks in MoveTask . java to avoid potential NullPointerExceptions when unlocking locks
refactor ` cucumber - jruby . properties ` to use ` ResourceBundle . getBundle ( " cucumber - jruby . properties " ) ` instead of
replaced ZERO _ ADDRESS with ByteUtil . EMPTY _ BYTE _ ARRAY in Transaction . java to simplify the code and improve readability by
refactor class loading logic in ClassGraphClassLoader . java to improve code readability and maintainability
added test cases for blob storage in JobManagerStartupTest . java to ensure proper handling of non - sir files in the application
updated the string " alpha1 " to " Lpha1b " and " lpha1b " in CloudDatastreamResourcesProto . java
added a Bundle to the FileDisplayActivity to set the extras for the builder to enhance the application ' s application ' s capabilities
added a null check for the particle in ParticleEmitter . java to prevent potential NullPointerExceptions when processing particles
updated test assertions in AmbariManagementControllerImplTest to use ` clusterNew ` and ` clusterNew ` instead of ` clusterNew ` to
removed the nullable flag from the @ Column annotation in TransientSessionTicketImpl . java and added logging for NoResultException in JpaTicketRegistry
refactor Bug4823811 . java to improve code organization to enhance maintainability and readability of the code
added a function to apply path relativizer in RmStep . java to ensure proper handling of path relativizers in the
updated requestFullState method to accept a boolean parameter and modified requestFullState method to improve flexibility in requesting the initial request state
updated imports and added attribute handling in ShibbolethCompatiblePersistentIdGenerator and ShibbolethCompatiblePersistentIdGenerator to improve code clarity
updated the @ Inject annotation from ` @ Inject ` to ` @ Inject ` in ` RequestValidationService . java ` to improve code readability and
added a bundle to hide the keyboard message in the UiThreadHelper class to enhance user experience by allowing the user to hide the keyboard message
updated condition checks in FileNodeProcessor , MManagerBasicTest , and MTreeTest classes to improve code readability and maintainability
refactor NavigableMap , NavigableSet , and NavigableSet classes to improve code organization and maintainability
added a new test method ` testSlurpFile ` to ` IOUtilsTest . java ` to verify the functionality of ` IOUtilsTest . java
added @ FunctionalInterface annotation to multiple classes to enhance functionality by allowing functional interfaces in the codebase
refactor span retrieval logic in TraceWebFluxTests . java to use a new method ` spanWithName ` to improve code readability
added DateConverter and HiveSchemaConverter classes to handle dates to improve date conversion functionality and ensure correct handling of date types
updated ansi escape sequence from " \ \ s * " to " \ \ s * " in StyleConverter . java to ensure proper handling of
refactor ` convertToDouble ` method to use ` MyError ` instead of ` MyParseError ` and improve error handling in ` InputDialogTable
added null checks for tableFields and outColumnCnt in SemanticAnalyzer . java to ensure proper handling of column counts and improve error handling
refactor assertion logic in WANDScorer . java to improve clarity and consistency to enhance readability and maintainability of the code
refactor Correspondence class to improve code organization to enhance maintainability and readability of the code
updated import statements in PaintSetEnabledDeadlock . java for improved code clarity to enhance readability and maintainability of the code
updated curPixVal from - 1 to 0xFF000000 in XRSolidSrcPict . java and added a new WhiteTextColorTest .
refactor listSubTypes and listSupertypes methods in BiomeDictionary . java to use Collection instead of List to improve code readability and maintain
updated the variable name from withinTolerance to exceedsTolerance in BoundedLocalCache . java to improve clarity and consistency in variable naming
added @ StabilityRule for LOCAL and PLATFORM _ POSTSUBMIT in TaplTestsLauncher3 . java to ensure compatibility with the latest platform
refactor package - info . java files for improved readability to enhance maintainability and maintainability of the code
added a condition to check if the log file suffix is empty before processing it to ensure that logFileSuffix is only processed when it is empty
refactor PythonBuckConfig class to improve code organization to enhance maintainability and readability of the code
added unit tests for adding and clear system shared library names in ShadowPackageManagerTest , ShadowApplicationPackageManager , and ShadowApplicationPackageManager to ensure correct handling of
refactor MeiligaoProtocolDecoder to use extendedInfo instead of Position and extendedInfo for better readability to improve code clarity and maintainability by
added a null check for the tile before returning the total battery capacity calculation to prevent potential NullPointerExceptions when tile is null
refactor cache handling in PrefFragment to use a new TrimCache class and add a new TrimCache class to improve cache management and ensure proper
updated import statements from ` com . google . api . client . util . List ` to ` com . google . common . collect . collect `
updated BasicAuthAccessControlFactory and BasicAuthAccessControlFactory to throw NotAuthorizedException instead of false to improve error handling and provide clearer error messages for
added a ` @ SuppressWarnings ( " unused " ) ` parameter to the ` schedulePeriodically ` method in ` Scheduler ` and ` Subscription `
updated the refreshListOfFilesFragment method from false to onItemClicked in FileDisplayActivity . java to improve user experience by allowing the user to
added a check for multiple streams and improved error handling in StreamUtil . java to ensure proper resource management and prevent potential resource leaks
updated method signatures in SessionHiveMetaStoreClient and HiveMetaStoreClient to use CreateTableRequest instead of EnvironmentContext to improve code clarity and
added a boolean flag ` aborted ` and modified the ` start ` and ` abort ` methods in ` FixedRateFragInsStateTracker ` to
refactor indent handling in multiple parser classes to improve clarity and consistency to enhance code readability and maintainability by reducing duplication
added new classes NetworkWifiStatusReceiver , ChangeWifiStatusEvent , and ChangeWifiStatusEvent to manage network status changes to enhance user experience by enabling
refactor conditional checks for control Frames in FrameGenerator . java to improve code readability and maintainability
added a visibility setting for the collapse handle in WidgetsBottomSheet to ensure the collapse handle is visible when the collapse handle is displayed
added new files ` Issue475 . java ` and ` XSS . java ` to handle HTML , HTML , js , and HTML , JS
added a check for empty units to scroll in StandardGraphIO . java to ensure proper handling of units to scroll
updated the condition to check if the contract list size is greater than 1 to ensure that the contract list is only processed when the contract list size is
added ` add ` and ` put ` methods to ` JsonArray ` , ` JsonObject ` , ` JsonObject ` , and ` JsonObject ` classes to enhance
added a new method ` hashCode ( ) ` to ` IPPPrintService ` and created a new test class ` TestRaceCond ` to
refactor version handling in DB2iDialect and DB2zDialect to simplify version handling to improve code readability and maintainability by centralizing
added a condition to check if the platform fee is greater than 0 to ensure that the connection is only enabled when the platform fee is greater than the
refactor BatchUpdateException , PreparedStatement , PreparedStatement , and Statement classes to improve code organization and maintainability
refactor the queueInputBuffer method in MediaCodecRenderer . java to improve readability and maintainability of the code
changed access modifiers from public to public in multiple classes to improve code readability and maintainability
added Retrofit import and modified Part . java and PartMap . java to use Retrofit instead of Part . java to utilize R
refactor JSON build logic in JsonBuildHelper and ParamsBuildHelper classes to improve clarity and consistency to enhance code readability and maintainability by
added TYPE _ TASKBAR _ OVERLAY _ PROXY and TYPE _ TASKBAR _ OVERLAY _ PROXY to
added @ BetaApi annotation to AwsClustersClient , AzureClustersClient , and AwsClustersClient classes to ensure compatibility with
updated alpha calculation logic in ClipAnimationHelper and RemoteAnimationTargetSet classes to improve accuracy of progress tracking based on activity type
updated the method call from ` createRenderScript ( true , true ) ` to ` createRenderScript ( true ) ` to improve code readability
refactor PMD class to improve code readability to enhance maintainability and maintainability of the code
updated the ` PluginListCellRenderer ` and ` PluginManagerActivator ` classes to use ` isSystemBundle ` instead of ` getHeaders ( ) ` to
updated import statements in IntegrationTestSparkBulkLoad . java and IntegrationTestSparkBulkLoad . java to improve code readability and maintainability
added a constant LOW _ FALSE _ POSITIVE _ RATE for the BloomFilter in KeyChainGroupTest . java to improve the accuracy of
refactor configuration handling in Overview . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
changed the return statement from ` findAttache ( hostId ) ` to ` agentAttache ` in ` AgentManagerImpl . java ` to
added a null check for the value before adding it to the entrySet list to avoid potential NullPointerExceptions when value is null
cloudstack - 154 : log a warning if the cloudstack agent do not have KVM
added " NAME _ ATTRIBUTE " to NO _ NAME and NO _ VALUE constants in ParamAction . java to enhance code readability and maintainability
updated constructors in BaseStubbing and ConsecutiveStubbingImpl to use invokedMock ( ) instead of invokedMock ( ) to improve
added a static method ` stripMethodParams ` to handle method parameters in ` LocationOpener . java ` to improve code readability and maintainability
updated the version name and code for GreatVoyage - v4 . 2 . 1 - 62 - gaff237ef7 to include
replaced ArrayList with Collection for allowedCommands in OutputFilter . java to improve performance and maintainability of the code
refactor SymbolMBLayer and SymbolMBLayer to utilize LabelCacheItem instead of TextSymbolizer to improve code readability and maintainability by
fix bug where overlap feature be not present in gpopuppanel .
updated error messages in ValidationSuite . java for clarity and consistency to improve readability and maintainability of error messages
refactor the StartingWindowListener to use a new StartingWindowListener class and improve transition management to enhance code clarity and maintainability by centralizing transition
added a doc comment inherited from MBeanServerConnection in MBeanServer . java to improve code readability and maintainability
added exception handling for SecurityException in CheckPackageAccess . java to ensure proper handling of security exceptions during security checks
updated the timeout value from 30 seconds to 90 seconds in ThreadSafetyTest . java to ensure that the executorService is terminated only when the executorService is
changed the default value of ` loggingEnabled ` from ` true ` to ` Boolean ` and added a new test class ` XRLogTest `
added @ JsonIgnore ( true ) annotation to Schema . java to ensure proper handling of JSON fields in the schema
increased the timeout from 5000 to 10000 in TestNonTxIndexBuilder . java to allow more time for test execution
refactor the train method in SimpleNaiveBayesClassifier to use logLikelihood instead of zero to improve code readability and maintainability by
added AuditLoggerModule to the CheckDatabaseHelper class and updated injector initialization in Guice to enhance audit functionality and ensure proper injector initialization
refactor Prototype class to improve code organization to enhance maintainability and readability of the codebase
added null check for tableIsTransactional in SemanticAnalyzer . java to avoid potential NullPointerExceptions when tableIsTransactional is null
removed the writeFragment method from RecordingWriter and added onBlock method in ReplaySessionTest to streamline the writing process and improve code clarity
updated CeaDecoder and CeaSubtitle to use Format . OFFSET _ SAMPLE _ RELATIVE instead of 0 in CeaDecoder
updated ` groupByTypeAndTag ` method calls to use ` alias ` instead of ` ASC ` in ` KairosDatastoreTest . java
updated currency pair names from " BTC _ CAD " to " USD " in VaultOfSatoshiBaseService . java to
updated import statements and refactored EntityManagerFactory initialization in multiple test classes to ensure proper resource management and prevent potential resource leaks
updated import statements in ZipkinKafkaSenderConfiguration and ZipkinAutoConfigurationTests to use KafkaSender instead of KafkaSender to ensure compatibility with
added new test classes GwtBinaryIntegrationTest , GwtBinaryIntegrationTest , and A classes for testing GWT binary integration to enhance testing capabilities for GWT binary
updated loadingCauseLabel visibility logic in BrowserContentPane , SQLConsole , and SQLConsole classes to ensure proper handling of loading cause labels and improve error
replaced ` Randomizer ` with ` getRandomValue ( ) ` in ` EnhancedRandomImpl ` and ` EnhancedRandomImplTest
added a new constant ` XMLSecurityPropertyManager ` and updated the initialization of ` spm ` and ` nonvalidatingConfiguration ` to enhance security
added a new file ` InlineDefaultMethod . java ` that implements ` InterfaceWithDefaultMethod0 ` , ` InterfaceWithDefaultMethod1 ` , and `
updated the return statements in SqliteFieldPredicateView . java for clarity to improve readability and maintainability of the code
changed access modifier of getDMNProfiles method from private to protected to allow subclass access to the method
refactor RedissonScript to use MasterSlaveEntry instead of WriteAllAsync in RedissonScript . java to improve code readability and maintainability
refactor time handling in EspressoLanguage and StaticObject classes to improve clarity and maintainability to enhance code readability and maintainability by
updated debug logging messages from debug to verbose in multiple project generator classes to improve clarity and consistency in logging output
refactor FMLProxyPacket handling in FMLOutboundHandler . java to ensure proper release of the proxy packet
added a constant for HTTP _ JETTY _ SERVER _ HANDLERS in ExecConstants . java and updated thread pool initialization in WebServer
refactor shortcut retrieval logic in LauncherModel . java to improve code readability and maintainability by reducing redundancy
removed unnecessary check for String value in DefaultHttpClientBinderRegistry . java to simplify code and improve readability
removed the case for navigateUp ( ) in DetailFragment . java to streamline the code by eliminating unnecessary navigateUp ( ) calls
added a condition to check if the hasAndroidMarket ( ) is included to ensure that the play services are only added when the market is present
refactor cell handling in TableBlockParser to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a ` bridgingHeader ` parameter and updated related methods in ` NewNativeTargetProjectMutator ` and ` AbstractAppleNativeTargetBuilder
replaced ` Path ` with ` List < SourceFile > ` in ` PotentiallyDeadCode . java ` to improve code readability and maintain
added support for the " findDiamond " option in Attr and DiamondRedundantArgs classes to ensure proper handling of redundant types in the
replaced calls to ` getInvocationStageTrace ( ) . startSend ( ) ` with ` onStartSendRequest ( ) ` in multiple classes to
removed the import of Utils for Utils . toJSONString ( factory ) in SolrCacheHolder . java to streamline the code by eliminating unnecessary logging
added exception handling for AuthenticationException in LdapCtxFactory . java to ensure proper handling of AuthenticationExceptions
removed the static variable ` zero ` from ` Float . floatToRawIntBits ` in ` Test6796786 . java ` to simplify
added local file for " logback . dev . xml " in JoobyMojo and Main classes to ensure proper configuration of the configuration file
added a new file JaasEventCheck . java that implements JaasAuthenticationSuccessEvent and JaasAuthenticationSuccessEvent to implement JaasAuthenticationSuccess
replaced ` currentPage ` with ` viewsToAnimate ` in ` QuickstepTransitionManager . java ` to improve code readability and maintainability by using
updated string distance comparison logic in ConjunctionSolrSpellChecker and added a new test class ConjunctionSolrSpellCheckerTest to ensure consistent string
updated imports from HashMap to Map in ShadowSystemServiceRegistry . java to improve code readability and maintainability
removed multiple SINGLE _ LEADER _ INFORMATION _ CHANGE _ EVENT _ LOG _ NAME constants from DefaultLeaderElectionService . java
changed the visibility of the setAuthentication method from public to public to allow access to the method from other classes
added a new property ` AGENT _ SCRIPT _ TIMEOUT ` to ` AgentProperties ` and updated its usage in ` DefaultHostListener `
updated JDBC _ TABLE and JDBC _ SCHEMA parameters in AbstractJDBCConnectorProvider . java to ensure proper handling of JDBC _ TABLE and JDBC
updated SQL query parameters from " AUP " to " AUP " in multiple Java files to improve clarity and consistency in SQL updates
updated ` schemaTypeCache ` to use ` Collections . synchronizedMap ` and modified ` computeIfAbsent ` in ` SpecificData . java
refactor headers handling in StaticServerHttpHeadersWriter and add a test for header written with different case to improve header handling and ensure proper handling of
added JUnit Ignore annotation to LatticeDemo . java to temporarily disable tests that rely on files available from CMU
added a call to mkdirs ( TEST ) in TestCollector . java to ensure the test directory is created before proceeding
added chunked streaming mode setting in StarTreeJobUtils . java to ensure proper handling of chunked streaming mode
added new classes ` BasicSyntaxChecker ` and ` MultipleTypeSyntaxCheckerTest ` to the ` org . eel . kitchen . jsonschema `
updated import statements from com . google . protobuf to org . apache . apache . thirdparty . com . google . protobuf . com . google .
added a new test class ` Node ` for handling stack overflow exceptions in ` BeanPopulatorTest . java ` to ensure proper handling of stack overflow exceptions
added IOException to getRemoteName method in AccountingTransceiver . java to ensure proper handling of IOException
updated exception handling in UserAccountManagerImpl and ClientFactoryImpl to use HttpClient instead of OwnCloudClient to improve robustness by ensuring proper HttpClient
refactor WebSocketConnection and ExplicitDemandTest classes to improve code readability and maintainability
added support for AspectJ mode in GlobalMethodSecurityBeanDefinitionParser to enhance aspect management by allowing protection of protect - pointcut definitions
updated import statements and improved hostname verification logic in Connection . java to enhance code clarity and maintainability by using a more descriptive method
added a ` remove ` method to ` OHLCSeries ` and implemented a new ` remove ` method in ` OHLCSeries ` to
updated method calls from ` invoke ( ) . joinInternal ( ) ` to ` invokeUrgent ( ) ` in ` ClientSchemaService ` and
refactor joint removal logic in World . java to improve code readability and maintainability
added a null check for filterPattern in SearchFilter . java and modified filtering logic in ServerChatRoomQuery . java to improve robustness by ensuring
[ hotfix ] [ test ] add license check to sourcereadertestbase
updated exception handling in DocumentsStorageProvider . java to improve clarity and consistency to enhance code readability and maintainability
added a new ` HookDefinition ` interface and a ` JavaHookDefinition ` interface in ` cucumber . runtime ` and ` cucumber . runtime ` to
added a private method ` flushIfDeadlockRisk ` to ` QueryExecutorImpl . java ` and modified the logic in ` QueryExecutorImpl .
updated the ` setExoOptions ` method to include a ` allowTs ` parameter and modified the ` setExoOptions ` method to
added a method to remove user identifiers in DMRDecoderState . java to ensure that user identifiers are removed from the database
added a static Color class and updated the toString method in RailButtonShapes and RailButtonShapes classes to improve code clarity and maintainability by
updated null handling logic in CountAggregationFunction and added a new test for totalCountWithNullHandlingQueryOptionEnabled in NullHandlingIntegrationTest to ensure proper
added a deep variable ` this . deep ` to the ` InternalTransaction ` class to ensure proper initialization of ` InternalTransaction `
updated string concatenation in StreamInitiation . java to use StringUtils . escapeForXML instead of StringUtils . escapeForXML to ensure proper handling of XML
updated work directory initialization to use config . get ( " work . dir " ) instead of using config . get ( " work . dir " )
added a conditional check for the " deprecated " attribute in RuleSetFactory to ensure that the rule is only used when the " deprecated " attribute is
replaced Label with Opcode in AMD64DirectCallOp . java to streamline code buffer positioning for better readability and maintainability
added constant values for minStamp and maxStamp in TimeRange . java and created a test for range creation in TestTimeRangeTracker . java to
refactor BitDocIdSet class for improved readability to enhance maintainability and maintainability of the code
refactor connection handling in AbstractTimelineMetricsSink to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated MIME type comparisons in DetailFragment , DetailFragment , GalleryActivity , and GalleryActivity to improve code readability and maintainability by
refactor tank fill logic in BlockTank . java to check if the world isRemote and not theRemote world to ensure proper handling of fluids
refactor CsharpLibrary to handle legacy build rules based on rule analysis to improve code readability and maintainability by using a more descriptive
added handling for PEP packets in IQPEPHandler . java to ensure proper processing of PEP packets from the sender
added a null check for runtime before checking intrinsicGraph and runtime to prevent potential NullPointerExceptions when intrinsicGraph is null
updated condition in MetricTrackingWindmillServerStub and StreamingDataflowWorker to check if active is empty before refreshing active work to improve
updated COSParser to use long values instead of long variables for object ID and objectOffset to improve code readability and maintainability by reducing unnecessary
added constructors and constructors for LwjglAppletApplication in LwjglApplet . java to enhance application management by allowing
removed the ` DockerClientConfig ` parameter from the ` stringRepresentation ` method in ` EnvironmentAndSystemPropertyClientProviderStrategy . java ` to simplify the code
refactor LDAP authentication handling in LdapAuthenticationHandler to improve code readability and maintainability to enhance maintainability and maintainability of the authentication process
refactor Int2ObjectCache class to improve performance to enhance performance and maintainability of the code
added a ` resolveFromAttribute ` field to ` AbstractLdapAuthenticationProperties ` and updated the ` LdapUtils ` to use it in ` LdapUtils
refactor Readable class for improved readability to enhance maintainability and readability of the code
removed unused imports and added font handling in JsoupNonVisualRegressionTest . java to streamline code and improve readability by eliminating unnecessary
updated the menu icon from ' share _ menu _ item ' to ' android . drawable . ic _ menu _ share _ menu _ share ' to
refactor JVM version handling in Constants . java to use StringTokenizer for better readability and maintainability to improve code clarity and ensure compatibility with J
added exception handling for AbstractMethodError and NoSuchMethodError in PoolUtilities . java to ensure proper handling of JDBC connection timeouts
refactor GenericContainer class for improved readability to enhance maintainability and maintainability of the code
replaced HashSet with ArrayList for filteredSet and filteredList in Enclosed . java to improve performance and maintainability of the code
added multiple @ Override annotations in CentralAuthenticationServiceImpl , ImmutableAuthentication , and AbstractCasView classes to improve code readability and maintainability
replaced ` png ` with ` gif ` in ` ChartProvider . java ` to improve code readability and maintainability
replaced ` getPath ( ) ` with ` getParent ( ) ` in ` ImportMenuItem ` , ` AppendDatabaseAction ` , and ` OpenDatabaseAction
updated the return statement from ` F . at ` to ` nil ( ) ` in ` JavacParser . java ` and added a new `
added handling for AFTER and BEFORE cases in JpaQueryCreator and UserRepository classes to improve user creation logic and ensure proper handling of timestamp
refactor Test15FloatJNIArgs to improve code readability to enhance maintainability and maintainability of the code
updated import statements in plugin . java for clarity and consistency to improve code readability and maintainability
updated substring length from 2 to 1 in MockProcessContext . java and added a new test for fake encryption and decryption in TestMockProcessContext
added a boolean flag ` isInCallback ` to ` AeronArchive ` and ` ensureNotReentrant ( ) ` in ` AeronArchive
added null check for the inp _ dep before merging to avoid potential NullPointerExceptions when the inp _ dep is null
[ hotfix ] [ test ] increase timeout for sslbytesservertest
refactor Peer class to improve code readability to enhance maintainability and maintainability of the code
updated ` RealtimeIndexingCoordinator ` and ` StreamProvider ` classes to use ` IndexSegment ` instead of ` toImmutable ` toHistorical
added null check for exportedData before writing to the output to prevent potential NullPointerExceptions when the viewCaptureDataSupplier is null
replaced ` updatePopupY ( ) ` with ` getScrollThumbRadius ( ) ` in ` RecyclerViewFastScroller . java ` to improve the
added a check for tool windowInstantiated in BuckWSServerPortUtils and updated import statements in BuckEventsConsumer and BuckToolWindowFactory to
added a conditional check for Windows platforms in the GeneralTab class to ensure proper handling of prevents sleep configurations based on the operating system
updated import statements in HttpConfigurationAuthorityOverrideTest . java to use jakarta . servlet instead of javax . servlet . ServletException to improve code
added startCrop and endCrop variables to QuickstepAppTransitionManagerImpl . java and updated croppedWidth and croppedSize calculations in QuickstepAppTransition
added a new boolean variable ` fullScreenExclusiveModeState ` and updated related methods in ` XWindowPeer ` and ` XWindowPeer ` to
added handling for string lengths in StringUtil . java and created a new UMSUtilsTest . java file to ensure proper handling of string lengths
added credentials handling to DagUtils for URIs in DagUtils . java to enhance security by providing credentials for URIs in DagUtils
camel - 14263 : camel - camel - xref - test - remove unnecessary use of map . entrySet ( ) .
replace ` names [ 0 ] . trim ( ) ` with ` trim ( ) ` in ` SessionState . java ` to improve code readability
updated message formatting in GpsMainActivity . java to improve clarity to enhance readability and maintainability of the code
refactor Job class to improve code readability to enhance maintainability and maintainability of the code
added a ` testUnusedType ( ) ` method to ` Main ` and implemented a ` testUnusedType ( ) ` method in ` AutoValue
updated component names from " hbase _ master _ host " to " hbase _ master _ hosts " in multiple classes to ensure consistency in naming conventions
removed EventReaderDeserializer and EventWriterSerializer from EventReaderDeserializer , EventReaderDeserializer , and EventWriterSerializer to streamline the codebase
updated ` performJoin ` method to accept ` List < GenericRecord > ` instead of ` GenericRecord ` to improve performance and maintainability of the
updated maxDelegateLockPeriod handling in ProposalUtil and WalletTest classes to use DELEGATE _ PERIOD instead of 0 to improve
changed the type of ` networkRateMbps ` and ` getNetworkRate ` from ` int ` to ` Integer ` in multiple classes to
removed the constructor of CmcExchange from CmcExchange to streamline the code by eliminating unnecessary initialization
added a check for the existence of " seed . node . ip . list " in GossipLocalNode . java and updated address handling in Constant
changed the default value of ` enabled ` from ` Boolean . parseBoolean ` to ` Boolean . parseBoolean ` and added a new test class ` ClientT
updated swagger - ui resources from 2 . 10 - 1 to 3 . 18 . 2 in multiple files to ensure compatibility with the latest swagger - ui
refactor divide logic in MutableBigInteger and add modular inverse handling in ModInvTime class to improve clarity and maintainability of the modular inverse
updated the handling of ` String ` in ` NamedObjectList ` to use ` String ` instead of ` Utility . isBlank ( name ) ` to
refactor cleanupEmptyDir method calls to use ` Util . cleanupEmptyTableDir ` instead of ` FileSystem ` to improve code clarity and maintainability
refactor AsyncCache and Cache classes to improve code organization to enhance maintainability and readability of the codebase
added import for RCFileInputFormat in SerializationUtilities . java to enable serialization of RCFileInputFormat in the application
added typeOf and categoryOf methods to TypeMapperComponent to support type - and - category types in the TypeMapperComponent class
http : / / issues . apache . org / jira / browse / amq - 461 - add error handling for invalid host header
updated the ShadowTimeZoneFinderTest and ShadowTimeZoneFinder to use ReflectionHelpers instead of TimeZoneFinder to improve clarity and maintainability of timezone lookup logic
removed the addOutgoingValues method from StandardOp . java to streamline the code and improve readability
replaced ` segment ` with ` directory ` in ` SegmentCoreReaders . java ` and ` cfsDir ` in ` SegmentReader . java
added ` hasMainThreadProfile ` method to ` AggregateDao ` , ` AggregateRepository ` , and ` TransactionQuery ` classes to ensure proper handling
added a check for required annotations in the InterfaceValidator class to ensure that annotation definitions are not allowed in non - required states
updated name names from " greekLowerCase " to " greekLowercase " in various classes to improve clarity and consistency in naming convention
refactor HSSFSheet and Sheet classes to improve code organization to enhance maintainability and readability of the code
updated LuceneSearchRequestProcessor initialization to use DiscoverySearchRequestProcessor instead of LuceneSearchRequestProcessor to ensure compatibility with DSpace 4 . 0
added a list of ids to the BasicDateTime class to ensure proper handling of dates in the DateTime class
updated SurfaceSyncGroup initialization to use " TaskBarController " instead of " TaskBarController " to ensure compatibility with the new taskbar controller
updated method calls to use BsonObjectId instead of BsonObjectId in GridFsTemplate and added a new test for retrieving gridfs files to
updated ` query _ shouldReturnColumnIndexes ` and ` query _ shouldReturnColumnIndices ` methods to include total size and bytes so far in ` ShadowDownload
updated text insertion logic in TextField . java to improve clarity and consistency to enhance readability and maintainability of text insertion logic
added a check for the target object in GroupNodeViewModel . java to avoid potential null pointer exceptions when matching the target
refactor the ` afterSetStatements ` method in ` Lower ` and ` BlockLexicalContext ` classes to improve code readability and maintainability by
added hashCode method to IntervalXYDelegate , XYSeriesCollection , and XYSeriesCollection classes to enhance hashing capabilities for interval calculations
refactor ClientQueueDisruptionTest to remove unused imports and improve code readability to enhance maintainability and maintainability of the code
updated method names from ` testScript ` to ` verifyScriptedAttributeFilter ` in ` CloudWatchAppender ` , ` CachingAttributeRepositoryTests
updated the method name from " serializeSpecialDoubleValues ( ) method . " to " serializeSpecialFloatingPointValues ( ) method . " to
added ` waitToProduceOneBlock ` method to ` HttpTestZenToken002 ` and ` WalletTestZenToken007
added checks for empty subtag and privateuse in Locale . java and modified language tag handling in LanguageTag . java to improve language tag handling and
added a configuration option to disable SSH into KVM agents in the management server to enhance security by allowing users to SSH into KVM agents
changed the visibility of the ScheduledAction class from public to abstract in SchedulerWhen . java to improve encapsulation and maintainability of the code
updated import statements in EmojiKeyboard . java to use PagerSlidingTabStrip instead of PagerSlidingTabStrip to improve code readability and
added a check for " - " in the filter condition in SimpleSearchQueryConverter . java to ensure that the filter does not contain " - "
updated column names from " natural order " to " Natural column order " in BrowserContentPane , DataBrowser , DataBrowser , and DataBrowser to
removed unnecessary Arrays . copyOf ( in , 6 ) from Utils . java to simplify the code and improve readability
added a call to htmlEncodeButNotSpace for remoteAddr in HtmlSessionInformationsReport . java to ensure proper encoding of remoteAddr
updated the condition for checking the item name from " / " to " smarthome / items / " in ItemStateTriggerHandler . java to ensure
removed unnecessary synchronization in FastHttpDateFormat . java to simplify code and improve readability
refactor move file handling in Hive . java to improve thread management to enhance code clarity and maintainability by centralizing thread management
added a ` trigger ` method and a ` period ` parameter to the ` WrapTimer ` class to allow users to cancel a timer based on the
updated types for SQL _ DATE and LOCAL _ DATE in TypeStringUtils . java and added a new test in TypeStringUtilsTest . java to enhance type
updated the error logging logic in AbstractStatusReporter to include a verbose flag to enhance debugging capabilities by providing a verbose flag for better debugging
refactor ClickStartHandler and ClickStartHandler classes to use a boolean parameter for menu visibility to improve code readability and maintainability by ensuring menu
added validation for VPN connection in Site2SiteVpnManagerImpl to ensure that VPN connection can only be esitablished
updated error handling in CursorReadingTask and added a new test for error handling in CursorReadingTaskUnitTests to improve error handling and ensure proper handling
added logging for PDF thumbnail creation and extraction in PDFBoxThumbnail , PDFFilter , and PDFFilter classes to improve error handling and provide clearer error
refactor CuratorZookeeperClient to use a single thread executor for CuratorWatcherImpl to improve thread management and ensure proper shutdown of CuratorWatcher
refactor AnomalyDetectionResource and AnomalyDetectionResourceTest classes to improve code organization and maintainability
refactor URL deletion logic in HostsList . java to improve code readability and maintainability
refactor Java6Assertions and Conditions classes to improve code readability and maintainability
changed the method signature of ` replaceOrderBulk ` from ` Collection ` to ` List < BitmexPrivateOrder > ` in ` Bitm
refactor enterDefault method to enterIdentNode and enterIdentNode in FindScopeDepths and Lower classes to improve code readability and maintainability
added a new class ` J9ConstantHelper ` and modified ` ObjectHash ` to utilize ` long ` instead of ` public static final `
added a new test class ` ConcurrentModificationExceptionOnMultiThreadedVerificationTest ` for handling concurrent invocations to ensure proper handling of concurrent invocations
added session . removeAllResources ( ) method to BaseTransport , TransportSession , TransportSessionManager , and TransportSession classes to enhance resource management and ensure
replaced calls to ` pd . getProperties ( ) ` with ` pd . getOverlayedProperties ( ) ` in ` MapOperator . java ` and
updated the method loadHandle method call to use EnumSet . of ( HANDLE _ STATIC ) instead of EnumSet . of ( HANDLE _ 
added null check for extTypeCustomDesers before initialization to prevent potential NullPointerExceptions when extTypeCustomDesers is null
removed the setting of the mockserver . logLevel setting in the Main . java file to streamline the code by eliminating unnecessary logging
removed the @ Test annotation from AbstractRegistryFactoryTest . java to improve code readability and maintainability
removed redundant import statements in AbstractSolrMorphlineZkTestBase . java to streamline code and improve maintainability
updated the ` scoreMap ` and ` termScoreMap ` to use ` String < Float , Float > ` instead of ` scoreMap ` to
updated the condition checks in U64 . java to check for non - negative data to improve code readability and maintainability
removed the ` fx - text - fill ` style and updated the ` fx - font - size ` style in ` MainViewModel . java ` to
added a boolean flag ` didSupportDarkText ` in ` WallpaperColorInfo . java ` to ensure proper handling of dark text in dark mode
replaced ` onTooEarly ( ) ` with ` nonForce ( ) ` in ` CheckpointRequestDecider ` and added a test
updated the maximum pool size from 1000 to 8 and updated related imports in Parallel . java to enhance flexibility and maintainability of pool size measurements
updated the filtering logic in AuthenticationAttributeMultifactorAuthenticationPolicyEventResolver to use anyMatch instead of filter to improve code readability and maintainability by
added test cases for Windows ServerCore container in OpenCVImageFactoryTest . java to ensure proper handling of Windows ServerCore containers
refactored the handling of topic and queue prefetchs in ActiveMQConnectionFactory and ActiveMQConnectionFactoryTest to improve code readability and
updated the getReturnValue method to throw Throwable instead of null to improve robustness by preventing potential NullPointerExceptions
added a Repeatable annotation for Issues in Issue . java to provide a way to handle Issues in the application
updated userProps from " hcat _ user " to " webhcat _ user " in BlueprintConfigurationProcessor and BlueprintConfigurationProcessorTest
added null check for socksProxyHost in PGStream . java to prevent potential NullPointerExceptions when connecting to the socket
added a javadoc to retrieve the unique identification of a slot in SlotReport . java to improve code readability and maintainability
removed the import of ClassUtils from ReflectionUtils . java to streamline the code by eliminating unnecessary dependencies
refactor ` _ excludeProtocols ` to ` LinkedHashSet < String > ` and ` _ excludeCipherSuites ` in ` SslContextFactory
added a static variable ` systemResource ` to return the ` systemResource ` instance to ensure that the ` systemResource ` is only used when the
added constant PLAINTEXT _ SEGMENT _ EXTRA _ SIZE to StreamingAeadDecryptingChannel and StreamingAeadSeekable
added a new test method ` circuitBreakerInvalidFallbackThrowsException ` in ` ServerMvcIntegrationTests . java ` to ensure proper handling of
updated HttpClientBuilder initialization to use SSLSocketFactory instead of SSLContexts to enhance SSL connection handling by providing a default SSLSocketFactory
removed the resetBytesReadCounter ( ) method call in PerformanceTest . java to improve code readability and maintainability
added ` preferAES ` and ` setPreferAES ` methods to ` ProtectionPolicy ` , ` StandardProtectionPolicy ` , and ` StandardProtection
camel - 14263 : camel - opentelemetrytestsupport should log info if log be log .
added a new test method ` testLoadBalancerInstanceOperations ` in ` ElbIntegrationTest . java ` to verify instance registration functionality to ensure that instances are
updated the method name from ` setAlarm ` to ` setRingtone ` in ` AlarmReceiver . java ` to improve clarity and consistency in
added error handling for file creation in DiacriticTest . java to ensure proper handling of file creation during testing
hhh - 16257 add support for oracle 11 when use ojdbc6
refactor TextureUnpacker to use file . exists ( ) instead of textureFile . file ( ) to improve error handling and ensure proper file
refactor AmbariManagementControllerImpl to use Lock for cluster write locks to improve readability and maintainability of the code
refactor FilterChainProxy and DefaultFilterInvocationSecurityMetadataSource classes to improve code organization and maintainability
added a new test method ` testResultSetShouldNotCloseStatement ` to ` HiveStatement ` and modified ` HiveQueryResultSet ` to check if the
refactor the markSupported method in InputStreamBodyGenerator and ChunkingTest classes to improve readability and maintainability of the code
updated the return statement in DatabaseSchemaManager to handle pre - deleted databases to ensure proper handling of pre - deleted databases based on partition management
added a check for the " chunkedWriter " pipeline in Http1xUpgradeToH2CHandler . java to ensure proper handling of the
refactor delete item logic in EnhancedBrowseFragment and FullDetailsFragment to use getBaseItem ( ) instead of toString ( ) to improve code
updated CSSBank and RuleFinder to implement RuleBank and updated RuleFinder to implement RuleBank and RuleFinder to improve rule management and maintain consistency in
added a try - catch block for exception handling in JcaTlsCrypto . java to improve error handling by throwing an exception during initialization
added new file ` TestMonomorphicObjectCall . java ` and ` Object ` classes in ` java . lang ` and ` Object ` to
updated the ` removeMetaDataSource ` method calls to use ` toFront ( ) ` instead of ` removeMetaDataSource ` to improve code clarity and
hbase - 14264 add timerange ( ) to defaultmemstore and testdefaultmemstore . testmultipletimestamps
[ hotfix ] [ runtime ] remove unused state root directory from taskmanager services configuration
changed the ` isAlterView ` variable from ` false ` to ` true ` in ` AlterTimeSeriesStatement ` and modified the ` isAlt
updated regex matchers in Condition . java and added a new MatchTextConditionTest . java file to enhance regex matching functionality and ensure correct matching of
added error handling for retrieving routing table builders in HelixBrokerStarter . java to improve robustness by preventing potential runtime exceptions
updated variableSatisfied logic in HttpClientIntroductionAdvice . java to improve clarity and consistency to enhance code readability and maintainability
updated JmsAppenderConnectPostStartupIT , JmsAppenderConnectReConnectIT , JmsClientTestConfig , and JmsClientTestConfig
refactor session invalidate logic in ApiServlet . java and ManagementServerImpl . java to improve error handling to enhance code readability and maintainability by
removed the ` toSortedListWithCounts ` method from the ` Counters ` class and updated its usage in ` CountersTest ` to
updated the ` initialize ` method to use ` original ` instead of ` status ` in ` BasicTumbleStepper . java ` to improve code
added a static method ` getCurrentTimeMillis ( ) ` to ` LLVMAMD64SyscallClockGetTimeNode ` and updated its usage to
updated the readability of the ` readObject ` method to use ` JCTree ` instead of ` JCTree ` to improve code clarity and maintainability
added a null check for the indexToNode array in LRUDictionary . java to prevent potential NullPointerExceptions when indexToNode is null
updated DatagramPacket initialization and added checkFiltering method in DatagramSocket . java and DatagramChannelImpl . java to improve filtering logic and ensure proper handling of
updated imports from junit . Before to junit . jupiter . api . BeforeEach in TestQueryDNS . java to ensure compatibility with the
added a new file ` NutchServerInfo . java ` for managing job and running jobs in the service to provide functionality for handling job and running
replaced OffsetAttribute with AttributeSource in EdgeNGramTokenFilter . java to simplify attribute handling and improve code readability
updated timestamp handling in CqlInserter , ThriftInserter , and SettingsColumn classes to use Long . parseLong instead of Long . parseLong for timestamp
refactor DSAParameterGenerator to use BigInteger . ONE instead of BigInteger . ONE to improve code readability and maintainability by reducing redundancy
refactor NumberUtils and Numbers classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated mask checks in InetAddressSet . java and added new test cases in InetAddressSetTest . java to ensure correct handling of byte values and improve test
added constraint violation checks for SQLException and DataIntegrityViolationException in DefaultJdbcOptimisticLockingExceptionMapper to ensure proper handling of constraint violations in
updated parameter names from ` rewriteRequestForStaticTopic ` to ` rewriteResponseForStaticTopic ` in ` ConsumerManageProcessor ` and ` RemoteBroker
added a new method ` addTab ` and ` insertTab ` to the ` Tabs ` class and modified the ` createTab ` method to
replaced ` size ( ) ` with ` 0 ` in multiple Java files to improve code readability and maintainability by reducing redundancy
[ hotfix ] [ test ] add taskmanagerruntimeinfo to mockenvironmentbuilder
updated comparison logic in MavenVisitor . java to improve clarity and consistency to enhance code readability and maintainability
updated test cases in ZookeeperDataChangedListenerTest to use a new ` SelectorData ` instead of " MOCK _ APP _ NAME2 "
added a new file FormatCheckingTest . java to verify class format error handling to ensure proper handling of class format errors with invalid class names
updated line number handling in CodeGenerator . java to improve code clarity and maintainability
added a try - catch block for exception handling in the result list to improve robustness by preventing potential runtime exceptions
added methods to create radio buttons in RadioButton . java to enhance user interface functionality by allowing selection of radio buttons
updated cache size from 100000 to 10000 and updated CHUNK _ METADATA _ CACHE _ SIZE from 100000 to 10000 in LRUCache and
changed the visibility of the DEFAULT _ CAPACITY constant from private to public in SimpleChannel and ChannelParser classes to enhance encapsulation and improve
added null check for symbolicName before processing to avoid potential NullPointerExceptions when symbolicName is null
updated log messages in ModeContribution . java and modified mode loading logic in PApplet . java to improve clarity and maintainability of logging messages
added error handling for shutdown hooks in IOManager and modified sleep duration in YARNSessionFIFOITCase to improve error handling and provide clearer
changed projectRoot and androidManifestPath parameters from projectRoot to androidManifestPath in RobolectricTestRunner constructors to improve clarity and consistency in
updated conditional checks in AbstractMessageProducingHandler and added a test for notPropagatedHeaders in AbstractReplyProducingMessageHandlerTests to ensure
refactor CompareMode class to improve code readability to enhance maintainability and maintainability of the code
added HasTests annotation to RustBinaryDescription , RustLibraryDescription , and RustLibraryDescription classes to enhance the functionality of ` Arg `
updated drawable names from ` ic _ recent _ image _ 120dp ` to ` ic _ recent _ image _ placeholder ` in ` FileMessageV
refactor OnExitTest class to improve code readability to enhance maintainability and maintainability of the code
added a method ` onUserPreferenceChanged ` to ` TaskbarManager ` to ensure the taskbar is recreated after user preference changes
added support for Ibm VM in HeapDump . java and updated dumpHeapHotSpot method calls in HeapDump . java to enhance
added try - finally blocks for session closing in MyBatisProducer . java to ensure proper resource management and prevent potential resource leaks
updated driver initialization from FIREFOX to IE and added a new method for wdSwitchToWindow and wdQuit in multiple classes
updated DN _ IteratorToFor from JDK 5 for - loop to Java 5 for clarity to enhance code readability and maintainability by
set the state of the application in JmxApplicationProvider to ensure the application ' s state is unAVAILABLE to avoid potential memory leaks
replaced assertions in ` ByteBufferAs - X - Buffer ` with ` Heap - X - Buffer ` and ` StringCharBuffer ` classes to improve
replaced ` toUri ( ) . toUri ( ) . toUri ( ) . split ( Path . SEPARATOR ) ` with ` Path .
added a check for the length of the sorted array in NativeArray , ArrayFilter , and DeletedRangeArrayFilter classes to ensure proper handling of
changed the enum name from ` Protocol ` to ` Transport ` in VirtualAuthenticatorOptions . java to allow access to the enum from other enums
refactor document creation in TestMultiPhraseQuery . java to use a Document instance to improve code readability and maintainability
updated the assignTickets method from false to PaymentProxy . OFFLINE in ReservationController . java and modified the condition in TicketHelper
refactor Thread handling in HttpChannelState . java to improve thread safety and error handling to enhance code readability and maintainability by centralizing thread
replaced printStackTrace ( ) with debug logging in multiple test files to improve logging clarity and ensure proper logging for debugging purposes
refactor package - info . java files for improved readability to enhance maintainability and maintainability of the code
added consistencyForPaxos = = LOCAL _ SERIAL to the read method in StorageProxy . java to ensure consistency based on the consistency level
added a check for " Home " in HeosDiscoveryParticipant and added serial number handling in HeosPlayerHandler to ensure proper handling of player serial
added a ` Wait ` field and its getter / setter methods to ` PlainSelect ` , ` SelectDeParser ` , and ` SelectDeParser
refactor attribute handling in Neo4j to use AttributeController and AttributeTable for improved clarity to enhance code readability and maintainability by centralizing
added null check for serverName in SessionManager . java to avoid potential NullPointerExceptions when matching server names
nifi - 154 : deprecate rocksdbmetronome package ( # 152 )
updated the initialization of the isGrantable variable from " IS _ GRANTABLE " to " results " in TableExRetriever . java to ensure
updated script execution logic in JavascriptContext . java to check if the URL starts with " javascript : " instead of " javascript : " to improve
added a check for Mac OS in CxfMtomConsumerTest . java to ensure proper handling of OS environments during test execution
added a new boolean flag ` isNewCf ` to the ` admin . modifyColumn ` method in ` LoadTestTool . java ` to
added Disposable interface to Texture class and updated the Texture class to implement Disposable to improve resource management and ensure proper implementation of the Texture class
added null check for tldBundleLocation before adding it to multiple classes to prevent potential NullPointerExceptions when tldBundleLocation is null
added validation for GoQuorum compatibility mode in BesuCommand . java to ensure that GoQuorum compatibility mode is enabled before proceeding
updated exception handling in HttpInput . java to use Throwable instead of IOException to improve clarity and consistency in error reporting
added a condition to check if the change in the era is causing issues in era issues to ensure that the change in era is causing issues in the
updated API operations in HostService , HostService , and RootServiceService classes to use ViewResponseWrapper instead of Wrapper to improve clarity and consistency in
updated the comparison logic in FilteredQuery . java to use getBoost ( ) instead of getBoost ( ) to ensure accurate query comparison based on
modified the constructor of FileMenuFilter to accept a parameter instead of a parameter to improve code readability and maintainability
refactor ArticleElement and TextEditAdvancedPanel to use VerticalPanel instead of ListBox and VerticalPanel in TextEditAdvancedPanel
added a new file TestCMSClassUnloadingDisabledHWM . java to test CMS class unloading functionality to ensure that CMS class unloading
refactor SpongeForgeEventFactory to check if the entity is empty before returning it to improve code clarity and prevent potential NullPointerExceptions
updated ColumnMapKeyMappingPreparedStatementSetter and MultipleColumnJdbcKeyCollector classes to ItemPreparedStatementSetter instead of KeyMappingKeyMappingPreparedStatementSetter
replaced ` Range ` with ` IdentityQueryFilter ` in ` CompactionsTest . java ` to improve code readability and maintainability by using
added null check for resourceType in MiniAapt . java and added a test for invalid item resource parsing in MiniAaptTest .
updated LIKE ( " like " , true ) and added SpELJudge to the OperatorEnum and OperatorJudgeFactory classes to enhance
updated the condition for checking the type of ordinalityType in LocalExecutionPlanner . java to ensure that the type of ordinalitySymbol is equal to
replaced the use of ` SwingUtilities . isEventDispatchThread ( ) ` with ` EventQueue . lookup ( ) ` in ` Profiler . java `
added import statement for ConscryptCertBlacklist , ConscryptCertStore , ConscryptHostnameVerifier , and Java8EngineSocket to ensure
refactor attribute resolution logic in AttributeResolution9 and ShadowArscAssetManager9 to improve code readability and maintainability
updated the list of options from " 1 . 5 " to " 6 " in the SetupHid . java file to ensure compatibility with the latest
change access modifier of ` extractMetadataColumns ` from private to public and add ` MetadataOnlyProjectionRewriter ` class to allow access to ` Metadata
added sorting of localized names in AboutActivity . java to ensure proper sorting of localized names in the list
updated javadocs in SpeechTranslationServiceClient , SpeechTranslationServiceStubSettings , and SpeechTranslationServiceStubSettings to improve clarity and consistency in
added a conditional check for live streaming mode in HomeFragment . java to ensure that shared preferences are only updated when liveStreaming is enabled
added a ` e ` to the ` MappingException ` message in the ` AuditConfiguration ` class to enhance error handling by providing clearer context for
updated test assertions in FileConsumerPollStrategyStopOnRollbackTest to use Awaitility for better readability to improve test accuracy and ensure correct rollback
updated type parameters from ` Arrays . asList ` to ` AbstractType < ? > ` in multiple classes to enhance type safety and improve type safety in
added transport handling functionality to GitClientApplication and updated repository URL handling in RepositoryUrlPanel to improve transport handling and ensure proper handling of repository URLs
added support for " trackpad gesture " and " press nav handle enabled " in multiple input consumer classes to enhance user experience by providing a clearer
added null check for mavenMetadata before accessing availableVersions to prevent potential NullPointerExceptions when the mavenMetadata is null
added a check for " Disabled " in the Large Page Support output in TestLargePageUseForHeap . java to ensure proper handling of large
[ hotfix ] [ table - planner - planner - planner - planner - planner - planner - planner - 
added IOException handling to the getTestParameters method in BrokerXmlConfigStartTest . java to ensure proper handling of test parameters in the application
added a new file ` TestObjectStreamClass . java ` and created a new ` TestObjectInputStream ` class with a class ` TestObjectStreamClass `
added null checks for datacenterInfo in ZoneAwareDiscoveryFilter . java to prevent potential NullPointerExceptions when datacenterInfo is null
updated logging statements in OpenTracingTracer . java to use warn instead of error to improve clarity and consistency in logging messages
added a toString ( ) method to the Generator class to provide a string representation of the registered generators
updated quotes in URI . java and added new test cases for quotes in Test . java to improve code readability and maintainability by centralizing quotes
added a null and empty resource check in ClusterControllerImpl and implemented a test for resource retrieval in ClusterControllerImplTest to ensure proper handling of resource
refactor response handling in AccepttoApiUtils to improve clarity and clarity to enhance code readability and maintainability by reducing redundancy
updated vertex buffer handling logic in VertexBufferObject . java to ensure proper handling of vertex sizes based on Android version
refactor SybaseASADatabase class to improve code organization to enhance maintainability and readability of the code
added a ` forceProjection ` parameter to ` HashJoinInfo ` constructor and updated related constructors to include a ` forceProjection ` parameter to enhance
added a method ` getStringDistance ( ) ` to ` SpellChecker . java ` to provide a way to retrieve the string distance in the SpellChecker
added FLAG _ ONE _ SHOT and FLAG _ IMMUTABLE constants and updated PendingIntent creation logic to ensure compatibility with newer Android versions and
added methods to set and set read column IDs in HiveFileFormatUtils and HiveInputFormat to improve code readability and maintainability by centralizing
replaced calls to ` getUPNPAddress ( ) ` with ` getIPv4MulticastAddress ( ) ` in ` UPNPHelper . java `
added ` DisplayTemporaryToast ` method to ` SavedExperiments ` and ` DisplayTemporaryToast ` in ` SavedExperiments `
added null check for serviceInfo and updated version setting in ServiceModuleTest to ensure proper handling of service versions in the service module
added a new test class ` RawSerializationTest ` to verify JSON serialization functionality to ensure proper serialization and deserialization of JSON objects
refactor SeleniumServer and SeleniumServer to use SslCertificateGenerator instead of SeleniumServer to improve cert generation efficiency and maintainability of SSL cert generation
added padding padding for the replies list in ExpansionViewHelper . java to ensure the status view reflects the correct padding for the replies list
increased the timeout from 3 seconds to 60 seconds in ExpiringUrlCacheTests . java to allow for more time for resource access exceptions
added a new test method ` testNGramFilterPayload ` to verify the behavior of NGramFilterPayload to ensure that NGramFilter is properly
refactor AclImpl class to improve code organization to enhance maintainability and readability of the code
added a new test method ` differentArraysShouldBeRandomizedWithDifferentSizes ` to ` EasyRandomTest . java ` to ensure that
added exception handling in RebootAnswer , StopAnswer , and StopAnswer classes to improve error handling by providing more informative error messages
added ThreadLocal for tryWriteAgain in SslConnection . java to improve thread safety and prevent potential NullPointerExceptions
added a new method ` ancestorsVisible ( ) ` to check if the parent is visible in the Actor class to improve code readability and maintainability
added logging of failed deployment group name and error message in RollingUpdateOpFactory . java to improve debugging by providing clearer feedback during deployment operations
[ hotfix ] [ table - planner ] [ table - planner - planner - planner - planner - planner - 
added a new event class ` AuthenticationFailureUsernameNotFoundEvent ` and added a new ` AuthenticationFailureUsernameNotFoundEvent ` class to handle authentication failures to
refactor AtMostXVerificationTest class to improve code readability to enhance maintainability and maintainability of the code
updated DEFAULT _ QTYPE constant from OldLuceneQParserPlugin to QParserPlugin . DEFAULT _ QTYPE in QueryComponent . java and
updated SimpleDateFormat initialization to use Locale . US instead of Locale . US to ensure compatibility with the latest Locale in the MonthDateTest
added a new method ` isInitialized ( ) ` to ` ILanguageServer ` , ` JavaLanguageServer ` , and created a new test class
updated the ` test _ fetch _ token _ from _ authorization _ code ` to ` test _ fetch _ token _ from _ authorization _ code `
added ` beginTransaction ( ) ` and ` setTransactionSuccessful ( ) ` methods to ` DatabaseAdapter ` and ` GncXmlHandler ` to
updated byte array handling in MimeType . java to use ByteArrayOutputStream instead of byte array to improve performance and maintainability of byte array handling
refactor exception message handling in MessagingTemplate . java to improve clarity and consistency to enhance code readability and maintainability
added a method ` isAcceptable ( SourceFile sourceFile , P p ) ` to ` AutoFormatVisitor ` to check if a CompilationUnit is
set maxBufferedDocs ( Integer . MAX _ VALUE ) and setRAMBufferSizeMB ( 100 ) in TestIndexWriterMergePolicy . java to ensure
added a call to ` wits . clear ( ) ` in ` Manager ` , ` NodeDelegateImpl ` , and ` NodeDelegateImpl `
added exception handling for NoSuchElementException in CopyOnWriteMap . java to ensure proper handling of NoSuchElementException during eviction
updated log logging methods to use info instead of level in multiple classes to improve clarity and consistency in logging information
added reindex requests for reindex collection requests in BasicAuthIntegrationTest and DaemonStream classes to enhance testing capabilities for reindex collection requests
replaced HashMap with LinkedHashMap in DependencyUtil . java to improve performance and maintainability of the code
added error handling for InternalServerErrorException in JerseySupport and corresponding test cases in JerseySupportTest to improve error handling and ensure proper logging of internal error
updated response headers handling in Http2TestBase to use a validateHeader method to improve code readability and maintainability by centralizing header validation logic
refactor system properties handling in System . java to improve code readability and maintainability to enhance maintainability and maintainability of system properties
changed the type of ` contains ` and ` doesNotContain ` methods from ` String ` to ` CharSequence ` in ` StringSubject ` and `
added ` toBeInvestigated ` to ` CheckGraalIntrinsics . java ` to ensure proper handling of the ` toBeInvest
changed the class name from IntUtilsTest to PrimUtilsTest in IntUtilsTest . java to improve clarity and consistency in naming conventions
added a new property ` ds2 ` in ` PersistenceManagerProvider . java ` to ensure proper handling of connection factory configurations
refactor DeploymentOptions class to improve code readability to enhance maintainability and maintainability of the code
updated the ` updateTextButtonWithDrawable ` method to use ` Drawable . ConstantState ` instead of ` Drawable . ConstantState ` to improve code
replaced ` ByteArrayInputStream ` with ` StringReader ` in ` XmlParser ` , ` YamlParser ` , and ` YamlParser ` classes to improve code
added logic to rewrite COALESCE children in RexNodeConverter and implemented a new method for handling COALESCE functions to enhance
removed the ` testUnmarshalFailed ` method from the ` HL7DataFormatTest ` class to simplify the test code and improve readability by
added context classloader setting for the proxy factory in JavassistProxyFactoryFactory . java to ensure proper resource management and prevent potential resource leaks
changed the constructor of DefaultDateTypeAdapter from DateFormat to final in DefaultTypeAdapters . java to improve thread safety and maintainability of the code
refactor method signatures in DocumentUtil . java to improve code readability to enhance maintainability and maintainability of the code
replaced the ` newQuery ` variable with ` setURI ( uri ) ` in ` HttpClientRequestBase ` and added tests in ` HttpClientRequestBaseTest
removed the filterOldEntries method from FeedRefreshUpdater . java to clean up the code and improve readability
updated logging level from fatal to warn in FSHLog . java to improve clarity and consistency in logging messages
refactor NodeMap class to use NodeMapIterable instead of Iterable to improve type safety and maintainability of the code
updated import statements in DiscoveryClientRouteDefinitionLocator . java to use FilterDefinition instead of FilterDefinitionLocator to improve code readability and maintainability by
added a condition to check if the fields are empty before adding them to the operations list in MongoRecordReader and RexToMongoTranslator to ensure
added a check for empty admin list before adding it to the admin list to ensure that the admin list is only added when the admin list is empty
replaced multiple calls to ` MultiFields ` with ` getSlowAtomicReader ( ) ` in multiple classes to simplify code and improve readability by using
replace ` toString ( bean . toString ( bean ) ` with ` ObjectHelper . getIdentityHashCode ( bean ) ` in ` ConstantBeanHolder .
updated the handling of ` JavaType . Primitive ` in ` GroovyParserVisitor . java ` to ensure that ` primitiveType ` is not null before
refactor hashCode methods in FrameInfoQueryResult and JavaLangSubstitutions classes to improve code readability and maintainability
updated string formatting in SedaBlockWhenFullTest . java to improve clarity and consistency to enhance code readability and maintainability
added a new file ` org . apache . lucene . core . testresources . testresources . java ` to package - info . java to facilitate
updated the calculation of the buffer size in MessageUnpacker . java to ensure proper position calculation for better readability
updated import statements from ` io . micrometer . common . lang . Nullable ` to ` io . micrometer . core . lang . Nullable `
added user property to IconDB COLUMN _ COMPONENT and COLUMN _ USER in IconCache . java to ensure proper handling of user information in the icon
updated condition in DefaultMQProducerImpl . java to use the defaultMQProducer . getBackPressureForAsyncSendSize instead of the defaultMQProducer
added a boolean parameter ` isClassfileOnly ` to the ` addWhitelistedResource ` method in ` ClasspathElement ` and ` Classpath
added a new method ` fixBaremetalForeignKeys ` in ` Upgrade410to420 . java ` to handle foreign key
removed the IJava2DRenderer interface from the Java2DRenderer class to streamline the codebase by eliminating unnecessary interface
added onTearDown method to DefaultAudioSink to handle offload buffer emptying to ensure proper handling of offload buffers in the audio sink
refactor UpstreamCacheManager to utilize a concurrent map for upstream delay init and save upstream task to improve thread management and reduce redundancy in the upstream
refactor StreamType class to improve code readability to enhance maintainability and maintainability of the code
added a warning message to indicate that the output is not expecting this output to ensure that the output is not expecting this output
replaced ` GitBlitWebSession ` with ` RequiresAdminRole ` in ` FilestorePage ` , ` RootPage ` , and ` Root
added JUnit Ignore annotation to CamelElasticsearchRestTest . java to temporarily disable tests that are no longer needed
added a check for the type of the accept method in ExpressionControlBusFactoryBean . java to improve type safety and prevent potential NullPointerExceptions
updated currency codes from " Altcoin " to " BuyWithFiat " in the OfferBookChartView . java file to improve code
refactor method handling in MethodBasedRouter to use RestConsumerContextPathMatcher and add a new RestletInvalidURLTest class to improve code clarity
replace ` blockHeight ` with ` coinbaseValue ` in ` createNextBlock ` and ` createNextBlockWithCoinbase ` methods to improve
replaced the ` Serializable ` interface with ` serialCloneNoCatch ` in ` BTreeMapJava ` and modified the ` JSR166Test
added null check before logging error messages in RuleEngineImpl . java to avoid potential NullPointerExceptions when the exception is not null
updated the condition for generating statistics in the command mode check to improve code readability and maintainability
updated the return statement from ` mFilesAll ` to ` mFiles . indexOf ( file ) ` in ` LocalFileListAdapter . java `
deleted the PlainVerifier . java file to remove unused PlainVerifier . java to streamline the codebase
added a check to close system windows in OverviewCommandHelper . java to ensure proper resource management and prevent potential memory leaks
updated DialogFragmentIT and OCFileListBottomSheetDialog to use BottomSheetBehavior instead of BottomSheetBehavior to improve user experience by
updated charset handling in RestAdapter and MimeUtilTest to use UTF - 8 instead of UTF - 8 to ensure compatibility with UTF - 8 encoding
added a call to ` super . deinitialize ( ) ` in ` TextField . java ` to ensure proper initialization of the ` TextField ` class
updated the ` testSerialization ` method to use ` TestUtilities . serialised ` instead of ` ByteArrayOutputStream ` and ` ObjectInputStream ` to improve
updated variable names from ` previousRange ` to ` previousUntilLastClause ` in ` LogicalGenerator ` , ` GroupByFillDataSet ` , and
added validation for negative array sizes in JAXWSExceptionBase . java to ensure proper exception handling for negative array sizes
updated import statements from ` org . junit . Assert ` to ` org . junit . jupiter . api . Assertions ` in ` Ct
updated the join time from 10 seconds to 60 seconds in T6567415 . java to increase the time of the join operation for better performance
updated default values from " legacy " to " region " in multiple test files to improve clarity and consistency in naming conventions
added ` title ` and ` i18nSafe ` annotations to ` ShadowActivity ` , ` ShadowAlertDialog ` , and ` ShadowToast
updated import statements in POIFSFileSystem . java to use POILogger instead of Log to improve clarity and maintainability of logging functionality
added channel state handling for alarms in InstarHandler . java to improve code readability and maintainability by centralizing channel state
added latency handling in MapDeleteMessageTask and a corresponding test in LocalMapStatsTest to improve latency management and ensure proper cleanup of local map statistics
updated enum name from ' PARAM ' to ' HEADER ' in Option . java and added a switch statement in Response . java to improve code readability
added a method to find Javac locations and improved error handling in CheckResourceKeys . java to enhance code clarity and ensure proper handling of Javac
updated FlutterModuleBuilder and FlutterCreateAdditionalSettings to set the project name based on platform support to enhance flexibility in setting the project name for
added a new test class ` DeprecatedStubbingTest ` to verify the behavior of deprecated stubbing methods to ensure that deprecated stubbing methods are correctly
updated import statements in ITBraveServletFilter . java to use javax . servlet instead of org . eclipse . jetty . server . DispatcherType
refactor EnglishGrammaticalRelations and EnglishGrammaticalStructureTest to include NML and NX tags to improve code readability and
added a new property ` provAllowRSAKeyExchange ` to ` TLS _ RSA _ WITH _ AES _ AES _ AES _
replaced ` output _ reader ` with ` reader . close ( ) ` in ` PerforceHistoryParser ` , ` PerforceRepository ` , and
added OAuthFactory and oAuthHandleId fields to PubSubAPI , SDMAPI , and SDMAPI classes to ensure proper handling of OAuth
updated interpolator handling in TaskbarEduView to use EMPHASIZED instead of AGGRESSIVE _ EASE to improve animation
[ iotdb - 2690 ] add info log when datanode report region be not equals .
added a new file FileDialogLeakTest . java that tests the finalization of a Frame in a Thread to ensure that the finalization of the
hbase - 14279 move testopentableincoprocessor from hbase to hbase . coprocessor
added an import statement for Uninterruptible from ` implementationMethod ` to ` TruffleFeature . java ` to ensure proper handling of Uninterruptible
[ hotfix ] [ table - planner - planner - planner - flink ] [ table - planner - flink ] fix
added a null check for the disi condition in DrillSidewaysScorer . java to prevent potential NullPointerExceptions when disi is
replaced calls to ` assertTimelineChange ( ) ` with ` assertTimelineChangeBlocking ( ) ` in multiple test files to improve thread safety and ensure
added support for the Java specification version in Constants . java and updated conditional checks in Helper . java to enhance compatibility with the latest Java version specifications
updated the ` FileReporterTest ` to use ` File ` instead of ` String ` and ` File ` to ensure proper handling of NullPointerExceptions
updated the condition for getEndToEndEncryptionKeysExist ( ) from isFalse ( ) to isFalse ( ) to ensure proper handling of encryption keys
added support for home navigation in DirectMessageConversation to enhance user experience by allowing users to navigate to the home navigation menu
updated PROTOCOL _ VERSION from 5 to 6 and added user handling in RpcServlet and RpcUtils to enhance user retrieval capabilities and improve error handling for
added a new property ` @ EnabledIfSystemProperty ` to the ` TestJdbcPluginWithMSSQL ` class to enable system architecture based on OS architecture
replaced startClass assignment with originalStartClass in WhiteboxImpl . java to improve code readability and maintainability
refactor local registration logic in DexBody . java to improve clarity and consistency to enhance code readability and maintainability by centralizing local registration
replaced calls to ` getAsyncContext ( ) . getResponse ( ) ` with ` getSuppliedResponse ( ) ` in ` TestAsyncContext
[ drools - 117 ] fix bug when lookandfeel be not incompatible .
updated regex patterns in AppPage . java to improve clarity to enhance readability and maintainability of the code
refactor animation handling in LauncherAppTransitionManagerImpl . java to improve code readability and maintainability
updated the AddressFormatException message to include the version instead of base58 to improve clarity of the error message for better debugging
updated the method call in EditOfferDataModel . java to use newOfferPayload . getExtraDataMap ( ) instead of offerPayload . get
updated milestone parameters initialization logic in TicketPage . java to ensure proper handling of open tickets and repository parameters
changed the battery initialization from 640 to 80 in PipeItemsWood . java to allow for more flexible battery configurations
added a ` getClusterKey ` method to the ` getClusterKey ` method and updated related methods to include blueprint name and revision to enhance cluster
changed the default value of ` downgradeAllowed ` from ` boolean ` to ` true ` in ` UpgradePack . java ` and added a test
updated the ` scanQName ` method calls to use ` NameType . ATTRIBUTENAME ` instead of ` NameType . ATTRIBUTE ` to improve
added a new Configuration class EMULATE _ SYSTEM _ LOADLIBRARY and updated library loading logic in Library . java to enhance library
replaced ` APP _ NAME _ COMPARATOR ` with ` getAppNameComparator ( ) ` in multiple classes to improve code readability and maintain
updated entry handling in DefaultPlatformManager and FatJarStarter classes to ensure proper resource management and prevent potential resource leaks
updated the ` doTest ` method signature from ` digest ` to ` iterations ` in ` TestSecretKeyCredentialHandler . java ` to improve clarity
refactor RouteBuilderFinder and RouteBuilderFinder to use SpringCamelContext instead of ApplicationContextAware to improve code clarity and maintainability by consolid
updated descriptions in MetricOptions . java for consistency and clarity to improve readability and maintainability of the code
hbase - 14299 fix testfulllogreconstruction fail due to server failure
added a boolean variable ` reuseAddress ` to ` DatagramSocketOptions ` and its implementations in ` DatagramSocketOptions ` to ensure that the ` DatagramSocket `
updated player name from " Server shutting down " to " getShutdownMessage ( ) " in GlowServer . java and ServerConfig . java to
deleted the Locatable interface from the project to remove the deprecated Locatable interface to streamline the codebase
updated error prefix formatting in VersionInfo . java to improve clarity and consistency to enhance readability and maintainability of the error message
replaced equalityPredicateColumns with predicateColumns in StarTreeIndexOperator . java to improve code readability and maintainability
refactor code in HandshakeHandler to improve readability and maintainability to enhance maintainability and maintainability of the code
removed unnecessary closing braces in Navigator . java to improve code readability and maintainability
[ pinot - 23232 ] [ pinot - plugin ] add parquetrecordreaderconfig to fileformat . parquet . parquet
added support for GREATER _ THAN _ EQUAL and LESS _ THAN _ EQUAL in MongoQueryCreator and MongoQueryCreatorUnitTest
refactor grouping logic in CalciteSqlParser to utilize a new method for evaluating grouping expressions to improve code readability and maintainability by
replaced UnsupportedOperationException with Unsafe . getUnsafe ( ) . invokeCleaner ( MappedByteBuffer . this ) . invokeCleaner ( MappedByteBuffer . this )
replaced ` l . getValidator ( ) . getValidator ( ) . getValidator ( ) ` with ` validator . getValidator ( ) ` to
added a ` schedule ( ) ` method to ` CircuitBreakerImpl ` and updated related test cases in ` CircuitBreakerTest ` to improve
updated intent flags from FLAG _ ACTIVITY _ EXCLUDE _ FROM _ RECENTS to FLAG _ ACTIVITY _ NEW _ 
updated property names from " webui . submit . ajax " to " webui . submit . upload . progressbar " in multiple files to improve
added JUnit Disabled annotation to TableExtRetrieverTest . java to enable retrieval strategy for column privileges in the test
added synchronized method to addExportedCount , getExportedCount , and getExportedCount methods in EntityGraph . java to ensure thread safety
updated import statements in MetricsImpl . java to use IntRangeUtil1 . requireNonNegative instead of IntRangeUtil1 . requireNonNegative to
updated HttpParser to handle invalid characters and added a new test for encoded header in HttpTokens . SPACE and HttpTokens . SPACE to improve
changed the layout name from trends _ activity to configuration _ activity in ConfigurePagerActivity . java to ensure consistency in layout naming conventions
updated print statements in SLWTTextListing . java to use pos " in the document to improve clarity and consistency in logging messages
solr - 12028 : refactor forceleadertest to use tlogreplicas instead of tlogreplicas
refactor Thread class to improve code readability to enhance maintainability and maintainability of the code
refactor RECOGNIZED _ TEMPLATE _ FILE _ SUFFIXES to utilize a set of RECOGNIZED _ 
camel - 14263 : camel - cxf : xmlsoap : fix xmlsoap . xmlsoap . xmlsoap . xmlsoap . xmlsoap
refactor ` YamlRepresenter ` and ` RepresentConfigurationSection ` classes in ` YamlRepresenter ` to improve code readability and maintainability
updated date formatting in ToChar . java and added a test for TRUNCATE TABLE T in TestFunctions . java to ensure correct formatting of date
added validation for ValidTxnList and ValidTxnWriteIdList in GenericUDTFGetSplits . java to ensure proper handling of valid txn
refactor JsonSerDe to use isEmpty ( ) instead of length ( ) for consistency to improve code readability and maintainability
added null check for the book path before loading to prevent potential NullPointerExceptions when the book path is not available
replaced ` SSTDeserializer ` with ` IntMapper < UnicodeString > ` in ` SSTDeserializer ` and ` TestSSTDeserializer ` to
added a new constant DEFAULT _ GRID _ COLUMN and updated the scaling logic in AppPreferencesImpl . java and ExtendedListFragment . java to
updated return statements in Platform . java and ComparisonFailureWithFieldsTest . java to include line - break characters differ to improve clarity and accuracy of
added a ` waitingForKeys ` variable and modified the condition in ` DecoderInputBuffer ` , ` ClippingMediaPeriod ` , and ` Sample
updated API paths from " / api / v3 / accounts " to " / v3 / accounts " in OkexV3 . java to
refactor conditional checks for epsilon and epsilon values in LineUtilitiesTests . java to improve code readability and maintainability
added error handling for varargs and old array syntax in JavacParser and created new classes for varargsAndOldArraySyntax and T6569
updated DefaultDrmSession and DefaultDrmSessionManager classes to include playback thread handling to enhance session management capabilities for better debugging
updated variable context handling in VariableContext . java and added unit tests in TestVariableContext . java to improve variable context handling and ensure correct handling of
added tests for invalid compilation unit and profile string parsing in ExperimentParserTest and ExperimentJSONParser to ensure proper handling of JSON types in the
updated buffer position handling in Piece . java and SharingPeer . java to improve code clarity and maintainability
added a ` HttpClientProperties ` parameter to the ` GatewayAutoConfiguration ` and updated the ` HttpClientProperties ` to include a ` responseTimeout ` parameter
refactor ` getNativeLinkTargetGroup ` and ` getNativeLinkTargetInput ` methods to use ` NativeLinkTargetGroup ` instead of `
added a new test class ` MainRestConfigurationTest ` to verify the functionality of the ` RestConfiguration ` class to ensure proper handling of REST configuration
added a visitFieldAccess method to the ASTConverter and refactored the conversion method in RexNodeConverter to enhance field access handling and improve
added a constant for the QUERY _ LOG _ ENTRY _ VALUES array in QueryLogger . java to improve code readability and maintainability by
added a method ` noProxyPredicate ( ) ` to ` Proxy ` , ` WebClientRequestBuilderImpl ` , and ` WebClientRequestBuilderImpl `
updated certificate handling in PKCS12KeyStore and StoreSecretKeyTest to handle null chains correctly to improve robustness by preventing potential NullPointerExceptions
added a static method ` checkReflectionAccess ` to ` NativeObject ` , ` Bootstrap ` , and ` ReflectionCheckLinker ` classes to enhance
changed the constructor of CollisionMap from public to public in CollisionMap . java to improve code readability and maintainability
removed the @ NotNull annotation from the getRawInputFromTransactionInput constructor and added a null check for the input to prevent potential NullPointerExceptions
refactor log level handling in ConfigurationValueConverter and Main classes to improve code readability and maintainability
removed unnecessary imports and updated SQL statements in ConfigurationServerImpl . java to simplify code and improve readability by eliminating unnecessary imports
added encryption exception handling for Old Excel files in OldExcelExtractor and updated test cases in TestOldExcelExtractor to ensure encryption is supported for Old Excel
added a new ` extra _ image _ build _ argument ` method to the ` mx _ java _ benchmarks . py ` class to enhance the
removed unnecessary conditional check for image visibility in TimeLineCursorAdapter . java to improve code readability and maintainability
updated sleep duration from 10 to 50 in BatchingStateChangeUploadSchedulerTest . java to limit attempts timing out to avoid all attempts timing out
updated ` ShadowContext ` to use ` File ` instead of ` EXTERNAL _ FILES _ DIR ` in ` ContextTest ` to ensure
refactor ExceptionFactory instantiation to use Class . forName for improved error handling to enhance code readability and maintainability by reducing redundancy
updated WAIT _ TIME _ MS from 10000 to 60000 and updated the WAIT _ TIME _ MS from 10000 to 60000 to allow for
added support for the AUD request parameter in the ConnectOAuth2RequestFactory and ConnectTokenEnhancer classes to enhance user experience by providing a specific
changed the default value of ` breakOnFirstError ` from ` true ` to ` true ` in ` KafkaConfiguration . java ` to simplify the
added a new constant ` selectableItemBackground ` to the ` R . java ` class to enable the functionality of the ` selectableItemBackground
updated import statements and added a method to place stop orders in GatecoinTradeService . java to improve code clarity and ensure proper handling of stop orders
updated eventType assignment in TxnSetOperation . java to simplify eventType assignment to improve code readability and maintainability
added a new file ` ResumableRandomAccessFileListener . java ` and modified ` ResumingExternalDownload . java ` and ` Resuming
updated class name from " AccessLogValve $ 3 " to " AbstractAccessLogValve $ 3 " in SecurityClassLoad . java to
added handling for format strings in HSSFDataFormat . java and updated test cases in TestWorkbook . java to improve format handling and ensure correct
[ hotfix ] [ flinkkafka ] deprecate flinkkafkaproducer and flinkkafkaproducer
updated the calculation of compressed chunk length in CompressedInputStream . java to use the maximumCompressedLength instead of the maximumCompressedLength to ensure that the
camel - 14263 : camel - redis - add idempotent repository that expire the redis key
fix itemstack repair bug ( # 77964 )
added a boolean variable ` realLocalRepo ` and modified the path retrieval logic in ` LegacyLocalRepositoryManager . java ` to ensure proper handling of
added exception handling for task managers in LocalInstanceManager and improved error handling in JobManager and JobManagerThread to enhance error handling and provide clearer
added support for deploying files in AbstractArtifactResolutionException to enhance the application ' s functionality for deploying files
replaced direct calls to ` getTemporalPath ( ) ` with ` getInternalTemporalPath ( ) ` in multiple files to improve
refactor FeedEntryStatusDAO to utilize CollectionUtils for filtering feed entries to improve code readability and maintainability by utilizing CollectionUtils for
added executeStart ( ) and executeEnd ( ) methods in ContextImpl . java and updated test cases in BlockedThreadCheckerTest . java to
updated ` instantiate ` method to accept ` formatterString ` instead of ` ctorArg ` in ` FormatterConverter ` and added a null check for `
added compatibility check for Android SDK version in LoadContactsTask . java to ensure compatibility with the latest Android SDK version
replaced ` setRemoteAddress ` with ` remoteAddress ` and ` remoteHostname ` in ` Credentials . java ` to simplify code and improve readability by
added null check for realClass in Robolectric . java to prevent potential NullPointerException when shadowClass is not annotated with @ Implements
added conditional checks for tlsMutualAuthenticationRequired in NettySslContextFactory and ExampleNettySslContextFactory to ensure proper handling of required authentication
added a new test method ` requestingPlainHttpEndpointOverHttpsThrowsSslException ` in ` BasicHttpTest . java ` to ensure
added methods to retrieve consumer , producer , and producer in AbstractKafkaResumeStrategy . java to enhance functionality for retrieving consumer , producer , and
refactor event handling in PageChangeListener and FrameRenderer classes to improve code readability and maintainability
updated warning message in CommunicationsManager . java to include email address and from / text to improve clarity and consistency in warning messages
added draftQueryOptimise method to BeanDescriptor , BeanDescriptorDraftHelp , and BeanDescriptorDraftHelp classes to enable drafting of drafting
http : / / issues . apache . org / activemq / browse / amq - 5103988 - fix issue # 51039
updated array initialization in ExecutableFactory , ZipFolder , and ZipFolder classes to improve code readability and maintainability
refactor multiple Java files related to EndpointConfiguration , SpEL , and SSLContextParameters to improve code organization and maintainability
updated directory handling in AttachFileAction . java to use workingDirectory instead of JabRefPreferences to improve code clarity and maintainability by using a
updated AccessTest . java to use LoadOptionsBuilder instead of SchemaCrawlerOptionsBuilder to improve flexibility in loading schema and load options
refactor TestLoadLegacyLibrary to use J9vm ' s test _ load _ legacy _ library and add a new test method for loading legacy
updated exception handling in TestReader . java to return null instead of throwing an exception to improve error handling by returning null instead of throwing an exception
added methods to set name , enabled , and expanded settings in ProjectProperty . java to enhance the functionality of the project property
refactor connection handling in AbstractDbmsOperationHandler to use try - with - resources for resource management to improve resource management and ensure proper resource management
refactor DataStreamJob class to improve code readability to enhance maintainability and maintainability of the code
added error handling for ErrnoException in TestContentProvider . java to ensure proper resource management and prevent potential resource leaks
refactor service class handling in CxfEndpoint . java to use ClassHelper for instance handling to improve code readability and maintainability by utilizing
added a check for " h2 - 14 " protocol in HTTP2ServerConnectionFactory . java to ensure compatibility with HTTP2 protocols
refactor method handling in LambdaToMethod and ReflectionVisitor classes to improve clarity and consistency to enhance code readability and maintainability by centralizing method
updated the regex pattern in CoordinationTransformer . java to use " what < WP > " instead of " verb < 2 " to improve clarity
updated the URL file size from 5000 seconds to 60000 seconds in DL4JInceptionV3Net . java to allow for more time
added a call to set phraseSlop in QueryParser to set the phrase ' slop value to ensure that phraseSlop is properly set for
updated sleep duration from 10 to 100 in LongPressMouseListenerTest . java to improve clarity and consistency in delay scheduling
updated server configuration values from 8188 to 6188 in FlumeTimelineMetricsSink , HadoopTimelineMetricsSink , and HadoopTimelineMetricsSink
added a new method ` scheduleParallel ` in ` GameScheduler ` , ` ScreenGrabber ` , and ` ScreenGrabber ` to
updated visibility logic in EditShareFragment . java to include options available to enhance user experience by allowing additional edit options
updated progress calculation in DepthController . java to ensure progress is within a reasonable range for improved performance
removed the packetReceived method from ClientSession , ComponentSession , and Session classes to streamline the code by eliminating unnecessary packet processing
updated logging statements in DefaultCasDelegatingWebflowEventResolver and DelegatedAuthenticationGenerateClientsAction classes to improve logging clarity and ensure proper handling of
added null checks for service before retrieval in multiple classes to prevent potential NullPointerExceptions when service is null
added hidden attributes to the arity and arity in PantheonCommand . java to enhance user experience by allowing hidden permissions
added a call to doNotInstrumentClass in AndroidConfigurer to ensure that the CoroutinesRoom class is not instrumented
refactored the ` isSupported ` method in ` NegotiateAuthentication ` to use ` PlatformLogger ` instead of ` PlatformLogger ` to
removed the setInitScript method from the InitializingDataSourceFactoryBean class to simplify the initialization process by eliminating unnecessary initialization
camel - 14263 : camel - queue - reply manager should resolve thread name with concurrent consumer .
refactor AuthenticationProvider and TargetObject classes to improve code organization to enhance maintainability and readability of the codebase
added flushLines ( ) and closeMCBlock ( ) method calls in PdfDocument . java to ensure proper resource management and prevent potential memory leaks
added a new test method ` testPatternSelector ` in ` PatternLayoutTest . java ` to validate pattern selector functionality to ensure proper handling of pattern
updated HTABrowserLauncher and WindowsHTMLRunnerTest to use selenium - server / core / TestRunner . html instead of throw an UnsupportedOperationException to
added a new ` MwThankPostResponse ` class and created a new ` MwThankPostResponse ` class to implement functionality for
added SocketBased interface and modified ChannelEndPoint and SslConnection to implement SocketBased to enhance socket handling capabilities and improve socket handling
refactor revokingStore initialization and setMaxSize methods in Manager . java to improve code readability and maintainability
added unit tests for ` implicit _ join _ 1 ` and ` implicit _ join _ 2 ` in ` HQLTest . java ` to ensure
refactor assertion logic in NonVisualRegressionTest . java to improve clarity and consistency to enhance code readability and maintainability
replaced direct calls to ` toCommit ` with ` filesToCommit ` and added a new ` assertNoUnreferencedFilesOnClose ` method
refactor method signatures in BaseError . java for improved readability to enhance maintainability and maintainability of the code
added a check for the presence of a user resource percent in ConsumeUserResourcePercentActuator . java to ensure that the contract is not
added a condition to check if the old login is not shown in the AuthenticatorActivity to ensure that old logins are only shown when the old
rename ` StreamNetworkThroughputBenchmarkTests ` to ` StreamNetworkThroughputBenchmarkTest ` to improve clarity and consistency in naming conventions
replaced ` setResponsePage ( UsersPage . class ) ` with ` setResponsePage ( UsersPage . class ) ` to improve code readability
updated the debug log message to include an error message for plugin credentials to improve clarity of error reporting for plugin credentials
added try - finally blocks for closing the server socket channel in ConnectionManager . java to ensure proper resource management and prevent potential resource leaks
refactor Rocket class to improve code organization to enhance maintainability and readability of the code
added a method to create DynPartSpec in BaseSemanticAnalyzer to improve code readability and maintainability
refactor rounding logic in StringTemplate and StringTemplate classes to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
added method ` visitDirectory ` to ` JarDirectoryStep ` , ` DirectoryTraversal ` , and corresponding tests in ` DirectoryTraversal ` to ensure proper
added a new file ` JWKSetEditor . java ` that implements a PropertyEditorSupport for setting a text in ` JWKSet ` to enable
added assertions for firstPendingTerm and lastPendingTerm in OrdsBlockTreeTreeTermsWriter and BlockTreeTermsWriter to ensure proper handling of
added a conditional check for ThrowableTracer in JFRListener and updated method resolution logic in InvokeEspressoNode to improve error handling and ensure
changed the default value of " fetcher . threads . per . host . by . ip " from true to false to ensure the default value is
removed the condition for timeToLiveOfQuery in StatementUtil . java to simplify the logic for better readability and maintainability
added imports for UnconfiguredTargetConfiguration and TargetConfigurationHasher in HaskellGhciRuleIntegrationTest . java to ensure proper handling of target
refactor ReplicaPosition class for improved readability to enhance maintainability and maintainability of the code
update time calculation in VirtualNetworkApplianceManagerImpl . java to use aggDate instead of endDate to ensure accurate time calculation for network usage stats
updated interpolator configurations to use final _ FRAME instead of allAppsFade and instANT to improve animation flexibility and maintainability of animation
updated swipe length calculation in Background . java to adjust the visible bounds based on display size to improve visual consistency and maintainability of the nav bar
added a new module ` org . eclipse . jetty . http3 . server ` and updated the ` fillInterest ` initialization in multiple Java files to
added null check for value in JsonType and modified variable names in JsonTest to improve robustness by preventing potential NullPointerExceptions
replaced direct calls to ` InitialContext ` with ` getGlobalNamingContext ( ) ` in ` ResourceResolverBean . java ` to improve code clarity and
updated the return type of the ExecutionCheckpointingOptions from ` Optional ` to ` defaultValue ` in ` CheckpointConfig ` and ` ExecutionCheckpointing
refactor InnerClassesTable to use ElementKind instead of typeElement and add a test for finding inner class references in package annotations to improve element handling
updated command line string from " test . tool . vm . opts " to " test . tool . vm . opts " to ensure compatibility with the
replaced FluentIterable with MoreCollectors in ChromeTraceBuildListenerTest . java to streamline file handling and improve code clarity
updated the ` register ` variable from ` true ` to ` REGISTER _ KEY ` and updated logging statements in ` ServiceConfig . java ` to
added security mode handling in SettingsManager and updated exception handling in OTRManager to improve security management and ensure proper exception handling when security mode is disabled
updated NODE _ LABEL _ OUTLINE _ SIZE and NODE _ LABEL _ OUTLINE _ TRANSPARENCY in PreviewProperty and
refactor ProxySelector , URL , and URLStreamHandler classes to improve code organization to enhance maintainability and readability of the codebase
added a true parameter to Win32FontManager . java to enable font processing by default
added null check for the v before visiting it to avoid potential NullPointerExceptions when v is null
added error handling policy to JDTBatchCompiler to ensure proper handling of errors in JDT batch compilation
added content and text anchor alignment functionality to LabelBlock and LabelBlockTests classes to enhance user experience by allowing alignment of text anchors
refactor Class and Parameter classes to improve code organization to enhance maintainability and readability of the codebase
refactor IndexReader class to improve code readability to enhance maintainability and maintainability of the code
changed the visibility of the ` isLoopback ` variable from ` boolean ` to ` Boolean ` and added null checks for ` networkInterface ` to
updated DateUtils and Rfc1123DateDeserializer to include a locale parameter to enhance date parsing functionality by allowing locale to be set
updated the download method from " download " to " pdf " in FileDownloadViaProxyTest . java to ensure proper extension handling for missing files
added a new property ` OUTPUT _ NO _ HITS ` to ` AbstractJsonQueryElasticsearch ` and modified the ` handleHits ` method to
removed aggregationRatio parameter from ` updateQuotaRunningVMUsage ` and ` updateQuotaDiskUsage ` methods in ` QuotaManagerImpl . java `
refactor case statements in Election . java to improve readability and maintainability to enhance code readability and maintainability by reducing duplication
refactor ReadFilesP and StreamFilesP classes to improve code readability and maintainability to enhance code readability and maintainability by reducing redundancy
removed unnecessary check for item name in PageChangeListener . java to simplify widget handling and improve code readability
added a method ` isWriteProtected ( ) ` to ` Workbook ` , ` FileSharingRecord ` , and modified username handling in multiple files to
added error handling for unregistering sessions in PluginMonitoringFilter . java to ensure sessions are correctly unregistered when exceptions are thrown
refactor CategorizationFragment class to improve code organization to enhance maintainability and readability of the code
updated the ` updateStatus ` method call from ` false ` to ` not reachable ` in ` HueLightHandler . java ` to improve clarity
added loading functionality to FMLClientHandler and created a new GameSettings class to manage the loading state of the FML client to enhance client loading
updated return statements in UI . java and BlockInventoryFragment . java to use Core . bundle . getOrNull instead of mil [ ] to improve
updated type handling in MessagePackParser and added a new BinKeyPojo class and corresponding tests in MessagePackParserTest to improve type safety and ensure
added a new method ` queriesWithReservedWordsAsIdentifiers ` in ` HqlQueryTransformerTests ` and ` JpqlQueryTransformerTests
added tests for ` MapOfMapSerialization ` , ` Map < String , String > ` , and ` Map < String , String > ` to
added conditional checks for x2 and y2 in GeometryUtils . java to ensure proper handling of offset calculations
replaced ` SORT _ ORDER _ DIALOG _ TAG ` with ` SORTING _ FRAGRMENT ` in ` FileDisplayActivity `
added error handling for empty TestPlans in StandardJMeterEngine . java to ensure proper handling of empty TestPlan instances
updated method names from " dbmsName " to " getDbmsName " and " getSchemaName " in multiple classes to improve clarity and
added a check for non - strict mode identifiers in the ` argIdent ` variable to ensure that ` argIdent ` is not null to prevent potential
updated the default protocol setting from " SSL - HTTP / 1 . 1 " to " SSL - HTTP / 1 . 1 " to ensure compatibility with
changed the ` displayVolume ` variable from ` DisplayVolume ` to ` DisplayVolume ` to allow users to set the default value of ` DisplayVolume
updated the ` version ` method to include a boolean parameter and added a new ` VersionTest ` class to enhance version handling by providing a clearer
updated condition checks in ChangeLogParameters . java for consistency to improve code readability and maintainability
updated log level from warn to debug in JtaTransactionManager . java to improve clarity and consistency in log messages
hhh - 15436 skip setoperationtest because it cause exception during formatting of SQL string
refactor socket timeout handling in Connection . java to improve code readability and maintainability
replaced Utils . getStatusBarHeight ( context ) with MainActivity . isPopup ? Utils . getStatusBarHeight ( context ) : Utils . getStatusBar
changed the default value of ` CHA ` from ` false ` to ` true ` in multiple classes to ensure proper initialization of ` CHA `
added logging statements for original and current context classloader in ActiveMQResourceAdapter . java to improve logging clarity for thread context loading
removed the ` generateSeededTimeRandomizersAndTheirExpectedValues ` method from ` JodaTimeRangeRandomizersTest ` to simplify the
added a conditional check for SERVLET MAJOR version in WebDescriptor . java to ensure proper URL handling for SERVLET MAJOR
updated the isReady method to check for Readiness in BaseOperation and added node status checks in Readiness . java to enhance readiness functionality and
updated the loop statement in StorageProxy . java to use handler . endpoints instead of liveEndpoints to improve code readability and maintainability
added a null and empty check for creationStatements in IdTableHelper . java to prevent potential NullPointerExceptions when creationStatements is null
updated RPC _ VERSION from 1 to 2 in DataRpcConfig and UserRpcConfig to ensure compatibility with new RPC versions
added a null check for ` System . getSecurityManager ( ) ` in ` ObjectStreamClass ` , ` ObjectStreamField ` , and ` ObjectStreamField `
removed unused imports and modified timeSince method in Utils . java and XLCDCommunicator . java to streamline code and improve readability
added null check for host in DefaultMetricsTagProvider . java to prevent potential NullPointerExceptions when host is null
updated the test case from ` addTestSuite ( MockBrowserTest . class ) ` to ` addTestSuite ( MockBrowserTest . class ) ` to
updated logging level from OFF to ERROR in Launcher . java to improve clarity and consistency in logging behavior
changed visibility of ` mPaintIcon ` , ` mCanvasARGB ` , ` mCanvasARGB ` , ` mCanvasARGB `
added a boolean flag ` firstCallPrepareDo ` to ` PrepareInterceptor ` and updated prefix handling in ` PrepareInterceptorTest ` to enhance functionality for
refactor focus handling in Launcher to improve code readability and maintainability to enhance maintainability and maintainability of the code
replaced ` asEagerSingleton ( ) ` with ` @ Singleton ` in ` AuthWithStoreFeature . java ` and ` Auth . java ` to
added a new parameter ` ignoreInvisibleAssociations ` to the ` incomingAssociations ` method and modified condition checks to include a boolean parameter to
removed the ` CAPACITY _ TYPE _ PRIVATE _ IP ` parameter from the ` _ capacityDao . removeBy ` method call to simplify the
updated relative URL formatting in ProfileServlet . java to improve clarity to enhance readability and maintainability of the profiler documentation
added a new ` RequiredRefFieldModel ` class and updated related logic in ` ModelResolver ` and ` ModelResolver ` to enhance the handling of
updated import statements from ` CasCoreBootstrapConfiguration ` to ` CasCoreConfigurationWatchAutoConfiguration ` across multiple classes to improve code clarity and
refactor FeatureFlags class for improved readability to enhance maintainability and maintainability of the code
updated ` hueId ` to ` 17 ` and modified ` hueIDPrefix ` in ` ConfigStore . java ` and ` CommonSetup . java
added check for picture cache in TimeLineCursorAdapter , TimelineArrayAdapter , and TimelineArrayAdapter to ensure proper handling of image caches
updated log messages for Major compaction and minor compaction in HiveConf . java to improve clarity and maintainability of log messages
added a null check for the storage path before checking if the waiting to send is down to prevent potential NullPointerExceptions when the storage path is
added a checkResize method to the VectorMapJoinFastBytesHashMap , VectorMapJoinFastBytesHashTable , and VectorMapJoinFastLongHash
refactor LDAPConnectionService class to improve code organization to enhance maintainability and readability of LDAP connection management
removed the required flag from the XmlAttribute annotation in AggregateDefinition . java to simplify the code and improve readability
updated debug logging statements in TouchInteractionService , RecentsAnimationDeviceState , and RecentsAnimationDeviceState classes to improve clarity and maintainability of
added a condition to check if the class name starts with " com . intellij . rt . junit . " to ensure compatibility with the latest JUnit
updated assertions from ` hits . length ( ) ` to ` hits2 . length ( ) ` in ` TestMultiSearcher . java ` to ensure
added a new file ` LucenePackage . java ` with a static class ` LucenePackage . java ` that constructs the LucenePackage to provide a
updated the method call from ` sizeInBytes ` to ` sizeInBytes ` in ` RAMDirectory . java ` to improve code readability
added estimate ( ) method to StatsRulesProcFactory , GenericUDAFEvaluator , and BloomKFilter classes to improve accuracy of the calculation of
added a null check for the drawerToggle before proceeding to avoid potential NullPointerExceptions when the drawerToggle is not initialized
added @ SuppressWarnings ( " unused " ) annotation to the convertToAuthentication method in DefaultAuthenticationAdapter . java to suppress unused fields
refactor classloader handling in Scanner . java to improve clarity and consistency to enhance code readability and maintainability by centralizing classloader handling logic
modified the ` getAuthors ` method to include a ` fieldName ` parameter for better readability to improve code clarity and maintainability by using a
added a method to cancel the recovery state in CoreContainer . java to ensure the recovery state is canceled before proceeding with the shutdown process
replaced ` Math . abs ( ) ` with ` Math . abs ( ) ` in ` bug5070081 . java ` to improve accuracy of
added a null check for the found list in RepoEditView . java to improve robustness by preventing potential NullPointerExceptions
updated connection messages in PGProperty and ChainedPhysicalStreamBuilder to improve clarity and consistency to enhance code readability and maintainability
added trust resolver and default role prefix to SecurityEvaluationContextExtension and updated SecurityEvaluationContextExtensionTests to improve security evaluation handling and ensure correct default role
added a condition to set the exponentSize if it is zero to ensure the exponentSize is not zero to avoid potential NullPointerExceptions
replaced direct instantiation of ` ocLocalFolder ` with ` getUsableSpace ` in multiple files to improve code readability and maintainability by
updated the ` DistinctSqlAggregation ` to use ` other . values ` instead of ` delegate . combine ` in ` DistinctSqlAggregation `
added a test method to verify post login activities for successful authentication to ensure proper functionality of login activities for successful authentication
refactor ExtractorSpanishStrippedVerb initialization to use a new constructor to improve code readability and maintainability by centralizing verbStripper
replaced ` code ` with ` length ` in ` CharArraySet ` and updated related logic in ` TestCharArraySet ` to improve code clarity and
updated error messages in MuxerWrapper . java to improve clarity and consistency to enhance readability and maintainability of the code
updated method signatures in JsBundleGenrule and JsBundleGenruleDescriptionTest to use AndroidPackageable instead of JsBundleGenrule
added character encoding setting to UTF - 8 in StringDictionary and implemented a test for UTF - 8 characters in DictionariesTest to improve character encoding
updated the case name from " Logical Analyzer " to " Logic Analyzer " in InstrumentsFragment . java to simplify the code and
added a static variable ` instanceClassName ` and modified the initialization of ` vectorClassName ` in ` AbstractVector . java ` to ensure that the class
removed syncMetaLeader ( ) call from CMManager . java to streamline the code by eliminating unnecessary synchronization
replaced ` convertToEqualShareFormatHtml ` with ` noResponseHtml ` in ` FeedbackContributionQuestionDetails ` and ` FeedbackQuestionDetails `
added import statement for TestLoggingExtension in DiagramRendererTest . java to enhance testing capabilities for debugging purposes
added a ` mapUnderscoreToCamelCase ` parameter to multiple methods in ` FastResultSetHandler ` , ` ObjectWrapper ` , and ` MapWrapper `
added VIOMI _ WATERHEATER _ E1 support to MiIoDevices . java to support the VIOMI Internet electric
replaced ` getSslSessionData ( ) . getCerts ( ) . getCerts ( ) . getCerts ( ) ` with `
added a new file ` CreateNewSpreadsheet . java ` with a new file ` CreateNewSpreadsheet . java ` that implements a functional
replaced Duration with long for timeToLive in CacheProperties and RedisCacheConfiguration to improve performance and maintainability of cache configuration management
updated content URI handling in LauncherBackupHelper and LauncherModel to use CONTENT _ URI _ NO _ NOTIFICATION instead of CONTENT _ URI to
updated the testCompile group version from 2 . 14 . 0 to 2 . 27 . 2 in SwaggerResolveTest . java to ensure compatibility with
added synchronization for lucidaFontName in SunFontManager . java to ensure thread safety during synchronization
added a conditional check for ` c ` in ` DocClassUtil . java ` to check if ` ltLen ` is greater than ` ltLen
updated the return statement from ` String . format ` to ` String . format ` in ` Workspace . java ` to improve code readability and maintain
added a message for no validation errors found in ValidateCommandStep . java to provide feedback when no validation errors are found
refactor IntegrationTestContextLoader to use ServletContext instead of StringUtils to improve resource management and ensure proper resource handling for WebApplicationContext configurations
refactor scroll handling in Component and Container classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated the condition for UUID type in RamlType . java to improve code readability and maintainability
added a new class ` ClientStat ` and updated related methods in ` DefaultStatsService ` , ` StatsService ` , and ` StatsService `
updated regex patterns in CellContentConverter to improve clarity and consistency to enhance code readability and maintainability
updated regex patterns in SeleneseTestCase . java to improve clarity and consistency to enhance code readability and maintainability
refactor MondrianProperties class to improve code readability to enhance maintainability and maintainability of the code
added stack trace printing and improved test cases in ProcessTools . java and CustomLauncherTest . java to enhance debugging capabilities and ensure proper handling of stack
added a new test method ` testEmbeddedImage ` to the ` TumblrRipperTest ` class to ensure that the ` testEmbeddedImage
added a condition to check if the symbol has a slot before converting the method to ensure that the method does not have a slot for the store type
refactor load data handling in ContainerMediaChunk and InitializationChunk classes to improve code readability and maintainability
added a ` toString ` method to ` BaseLockFactoryTestCase ` and modified ` IndexWriterConfig ` to use ` PrintStreamInfoStream ` instead of
added a method ` isDynamic ( ) ` to ` ServiceLoader ` and updated constructors in ` TikaConfig ` and ` DummyParser ` to
updated imports and added checks for package - info and package - info in multiple files to improve code clarity and ensure proper handling of package - info
added a static final string for IMPORT _ CMD in DataImportHandler . java and updated the condition in DataImporter . java to improve code
added a new test method ` doesNotModifyInnerClassesIfIgnoreDefinitionTrue ` to ` ChangeTypeTest ` and modified condition checks in ` Change
removed unused import of Log in JettyService . java to streamline code by eliminating unnecessary dependencies
updated the ` checkItemPlacement ` method to include a new ` ArrayList < Long > ` parameter and modified the ` checkItemPlacement ` method to
added KillSwitchServlet class to Jetty7AppServer and created a new KillSwitchServlet class to handle Kill switch cases to ensure proper handling of
refactor the handling of transformed rows in LLRealtimeSegmentDataManager to improve code readability and maintainability by reducing duplication
added a check for Windows operating systems in Tests . java to ensure proper handling of Windows operating systems in the application
added error dialog for ADD _ CONTACT _ NOT _ CONNECTED in AddContactDialog . java to ensure that the add contact dialog is only
updated the registration of USER _ DETAILS _ SERVICE _ FACTORY from getRegistry ( ) to registerBeanComponent ( ) to ensure proper bean
updated the bitmap draw method from left to null in FastBitmapDrawable . java to ensure proper rendering of bitmaps with null values
updated date formatting in Meitrack , TotemProtocolDecoder , and TotemProtocolDecoder to use yymmdd instead of yymmdd
changed method visibility from public to protected in SunFontManager and X11FontManager classes to enhance encapsulation and enhance encapsulation
added @ Deprecated annotations to EnhancedRandom . java to indicate that these methods are outdated and should not be used
updated exception handling in ClientMapStoreTest and ClientMapStoreTest to check for ExecutionException instead of ReachedMaxSizeException to ensure proper exception handling
added a boolean flag ` keepEmptySentences ` to ` DocumentPreprocessor ` and modified the handling of empty sentences in ` SentimentPipeline `
updated the ` createArtifactSubdirectory ` method to return a boolean indicating that the ` createArtifactSubdirectory ` method returns a boolean instead of a
refactor ReusableCompiler and JavaLanguageServer to use JavaCompilerService . NO _ MODULE _ COMPILER instead of a static class to
added null check for resource in DirectAgentAttache . java to avoid potential NullPointerExceptions when resource returns null
refactor sendEmail method to throw MessagingException instead of MessagingException to improve error handling and improve clarity in email sending logic
added a new file ` PipeItemsObsidian . java ` and modified ` PipeItemsObsidian . java ` to handle null
updated DateFormatEvaluator and FileListEntityProcessor to use Locale . ROOT instead of TimeZone . getTimeZone ( ) and Locale . ROOT ) for date parsing to
added a boolean flag ` includeDecals ` to ` StorageOptions ` and its getter / setter methods in ` StorageOptionChooser ` to enable
updated the ` generateDocumentation ` method to include a null parameter in ` Liquibase ` and added a new ` getImplementedDatabases `
updated HiveProtoLoggingHook to include a queue name and modified test assertions in TestHiveProtoLoggingHook and TestHiveProtoLoggingHook to
updated log messages for consistency checks in SolrIndexConfig , SolrIndexConfig , and DocExpirationUpdateProcessorFactory to improve clarity and consistency in log messages
updated class file version from 58 . 65535 to 44 . 65535 in ignoreRecordAttribute . java and recordReflectionTest . java to ensure compatibility with the
added a new test class ` LdapPasswordAuthenticationTest ` to test LDAP password authentication to ensure correct functionality of LDAP password authentication in the application
updated import statements for OrcInputFormat and BasicStatsNoJobTask from OrcInputFormat to BasicStatsNoJobTask to improve code readability and
added eventProject and eventEditor fields to the FlutterReloadManager class and updated the handleSaveAllNotification method to improve event handling and ensure proper
refactor VisibleAdvance class for improved readability to enhance maintainability and maintainability of the code
added a ` start ` method to ` Reflector ` and updated related methods in ` ReflectorTest ` and ` DefaultSharedIndexInformerTest `
added a condition to check for dynamic number columns in EdgeDataTable , NodeDataTable , and NodeDataTable classes to ensure proper handling of dynamic
added null checks for the ResolvedGroupArtifactVersion constructor in RawPom . java to ensure proper handling of null values and prevent potential NullPointerExceptions
added null check for apiInfo before setting it to avoid potential NullPointerExceptions when apiInfo is null
refactor HeadersConfigurer and CacheControlHeadersWriter classes to improve code organization to enhance maintainability and readability of the codebase
added shader loading and destroyed shaders in PhotoPanel and FlameRenderer to enhance rendering capabilities and ensure proper resource management
updated FxWindow , InsnListEditor , InsnListEditor , InsnListEditor , InsnProxyListEditor , and Insn
added a check for the length of the ch array in CSSParser . java to ensure proper handling of characters in the CSS parser
added a boolean flag ` isDecorated ` to the ` UIServiceImpl ` class to enable the use of the ` JFrame ` and ` JDialog `
updated SQL query syntax in HostRoleCommandDAO . java to improve code readability and maintainability
updated LJ1200Message . java to use F6 _ TRANSPONDER _ TEST _ COMMAND instead of F5 _ UNKNOWN
refactor swipe handling logic in WindowTransformSwipeHandler . java to improve code readability and maintainability
replaced HostDatabase with ColorStorage in ColorsActivity . java to improve code readability and maintainability
refactor String class for improved readability to enhance maintainability and maintainability of the code
removed unused import statements from multiple Java files to simplify code and improve maintainability by eliminating unnecessary dependencies
added a method ` getGlobals ( ) ` to ` MapGlobalResolver ` to provide a way to retrieve globals from the map
added assertions for the sendcoin method in MultiSign34 . java to ensure that the sendcoin method correctly reflects the current state of the sendcoin
updated import statements from ` org . junit . Assert . Test ` to ` org . junit . jupiter . api . Assertions . assertEquals `
added a constant for path separator in JavadocReport . java to improve code readability and maintainability
changed the visibility of the ` augmentSuccessViewModelObjects ` method from static to static to allow dynamic access to the ` augmentSuccessViewModelObjects ` method
added a call to assertPresenceOfFieldInMetamodelFor ( AbstractEntity . class , Person . class ) in InheritanceTest . java to
updated Outlink instantiation to use ` getConf ( ) ` instead of ` getConf ( ) ` in multiple parser classes to improve code clarity and
removed the ` LexicalContext ` parameter from the ` ensureUniqueNamesIn ` method signatures to simplify method signatures and improve code readability
added a method to remove unused imports in UseLambdaForFunctionalInterface . java and updated type expression handling in TypesInUse . java to improve
replace appendClassSelector with appendClassSelector in m _ classFilesets to improve code readability and maintainability
added a condition to check if the root input is not supported in HiveCardinalityPreservingJoinOptimization . java to ensure that the root input is not
refactor RegistryEvent to use IForgeRegistry < T > instead of IForgeRegistry < T > to improve code clarity and maintainability
updated variable assignments for x3 , y3 , and y3 in Intersector . java to improve code readability and maintainability
added default methods for ` sbeDecodedLength ` , ` sbeLimit ` , and ` sbeLimit ` in ` MessageDecoderF
refactor ElasticsearchContainerTest to use ` Version . CURRENT . toString ( ) ` instead of ` 5 . 6 . 12 ` to improve code
updated the parsing logic in PeerMessage . java to use ByteBuffer . wrap for buffer copying to improve readability and maintainability of the code
added support for HDP - 1 . 2 and HDP version in ClusterDefinition and GSInstallerClusterProvider classes to enhance compatibility with the latest
removed the ` setConfiguration ( FtpConfiguration ) ` method from the ` FtpEndpoint ` class to streamline the code by eliminating unnecessary configuration
[ zeppelin - 2632 ] [ runtime ] set dependency status to READY when download dependency
updated the method call from ` code . newLocal ( v ) ` to ` code . newLocal ( v ) ` in ` Gen . java
added a check for basic constraints in ForwardBuilder . java and created a new class BuildEEBasicConstraints . java to ensure proper handling of basic constraints
added a new method ` initAfterFirstDbConnection ( ) ` to ` JdbcPostgresqlDAO ` to initialize the first database connection to ensure that
added a maximum buffer size to the WebSocket connection in SimpleEchoClient . java and modified the input buffer size handling in AbstractWebSocketConnection . java to
replaced ` undeleteAll ` with ` pendingDeleteCount ` in ` SegmentReader ` and added a new test method ` testIndexReader ` to
added null check for scopes before proceeding to prevent potential NullPointerExceptions when scopes are null
added null check for orderBy before processing to avoid potential NullPointerExceptions when orderBy is null
updated import statements in ClusterEntrypointTest . java to use hamcrest matcherAssert instead of junit to improve code readability and maintainability
added a check for Backed Up state in the VMSnapshotManagerImpl to ensure proper handling of Backed Up VM snapshots
added debug logging for initHiveLog4jMessage in HiveServer2 . java to enhance logging capabilities for better debugging
added a check for empty tasks in AssetManager . java to ensure proper handling of empty tasks before proceeding
added a boolean parameter to the deleteNode method and updated the deletePubkeysListNode and OpenPgpPubSubUtil methods to return a boolean to
updated ` RelationCompositeKey ` and ` TsKvLatestEntity ` to use ` StringDataEntry ` instead of ` TsKv
added checks for empty barcodes in Code128Reader , Code39Reader , and FalsePositivesBlackBoxTestCase to ensure proper handling of barcodes
updated the initialization of suites in SSLContextImpl and SystemPropCipherSuitesOrder to use LinkedHashSet instead of TreeSet to improve performance and maintainability
added a method to check if the control character is a control character in Escaper . java and improved test coverage in InternationalizationTest . java to
refactor provider method invocation logic in ProviderSqlSource and SqlProviderTest classes to improve clarity and consistency to enhance code readability and maintainability by
updated import statements and added null checks for aliasChildren in InternalMNode . java to improve robustness and prevent potential NullPointerExceptions
added a method ` getLayoutTransitionOffsetForPage ( int index ) ` to ` PagedView ` and updated scroll calculation in ` Workspace ` to
refactor ` JavaTemplate ` to use ` pruned ` instead of ` snippets ` for clarity to improve code readability and maintainability by
added setAccessible method to WidgetInterceptor to ensure proper initialization of the method in the WidgetInterceptor class
added a check for database server ID in ConnectorConfigGenerator to ensure proper handling of field configurations for database server IDs
updated Mozilla version in AbstractRipper to include Windows NT 10 . 0 and Windows NT 10 . 0 to ensure compatibility with Windows
added a new menu item for the web interface in BasicSystemUtils . java to improve user experience by allowing users to navigate to the web interface
refactor value handling in HandleGetter . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
added error handling for ArrayIndexOutOfBoundsException in EncryptedSlideShow . java to ensure proper handling of ArrayIndexOutOfBoundsException when building the record
updated logging statements and improved error handling in ` FileCheckpointIO ` and ` FileCheckpointIO ` classes to enhance logging clarity and ensure proper handling of
added a call to ` loadBattlePassManager ( ) ` in ` Player . java ` to avoid null pointer exceptions during avatar postLoad
updated Docker image string from " sshd " to " sshd - 1 . 0 " in PortForwardingContainer . java to ensure compatibility with
added a new byte array for the bigObject array in ThresholdTest . java to ensure the initial full - gc is used during tests
updated log handling logic in StdErrLog and StdErrLogTest classes to ensure proper logging behavior based on the configured level
added a method ` getRemoteSerivce ` to ` RedissonRemoteService ` and updated request queue names in ` RedissonRemoteService `
added a ` isSelected ( ) ` method to ` MultiButton ` and modified the ` setSelected ( boolean ) ` method in ` MultiButton ` to
updated import statements in CustomPlaybackOverlayFragment . java to use NextUpActivity instead of UpNextActivity to improve code readability and maintainability by
refactor the creation of ReplicasManager in BrokerController to improve code readability and maintainability
refactor RedisReactiveHealthIndicator to use ReactiveRedisConnection instead of createHealthIndicator to improve code clarity and ensure proper resource management
replaced ` styledAttributes ` with ` getThemeColor ` in ` ProgramGridCell ` , ` Utils ` , and ` Utils ` classes to
changed method names from participantTransportAddressChanged to peerTransportAddressChanged in multiple classes to improve clarity and consistency in naming conventions
removed multiple calls to ` registerTypeAdapter ` in ` ToolingApiLauncher . java ` to streamline the code and improve readability
[ hotfix ] [ test ] fix testpayloadcheckquery . testpayloadcheckquery . testpayloadcheckquery
refactor ConsoleReader and ConsoleReaderTest to use a new test case for reading characters with masks to improve code readability and maintainability by
added a method to handle user confirmation in BaseCommand . java to ensure proper handling of user confirmation in the command execution process
change package names from ` org . graalvm . compiler . test ` to ` org . graalvm . compiler . api `
removed the ` receiver . getID ( ) ` parameter from the constructor of ` SlotSharingGroup ` and removed the ` receiver . getID ( ) `
added support for the " one . util . streamex . emulateJava8 " flag in StreamExInternals . java and modified the dropWhile
updated the data path from " data / wheel . png " to " data / sys . png " in multiple test files to ensure compatibility with the
refactor intent registration logic in Launcher . java to improve code readability and maintainability
updated import statement from ` org . apache . ambari . server . state . Cluster ` to ` org . apache . ambari
updated the ` reuseRefreshToken ` and ` allowIntrospection ` flags in ` ClientDetailsEntity ` , ` ChainedTokenGranter ` , and `
replaced calls to ` write ` with ` htmlEncode ` in ` HtmlSessionInformationsReport . java ` to improve code readability and maintainability
updated PhraseQuery and PhrasePrefixQuery to include PhrasePrefixQuery and SpanQuery in the Query class to enhance search functionality by providing a
replaced size ( ) = = 0 with isEmpty ( ) in CommentsInserter , CommentsParser , and CommentsParser classes to improve code
refactor isLiteralString and isThisElementAnOperandInBinaryStringConcatenation methods in NoValueOfOnStringType . java to improve
updated ` isNotEqualTo ` and ` isNotIn ` methods to accept ` Object [ ] ` instead of ` A ` and ` Iterable `
updated imports and package names from ` lambda ` to ` exception ` in ` JwtPlugin ` and ` ThrowingFunction ` to improve code
added a new method ` getUploaderBehaviour ( ) ` to ` AppPreferences ` , ` PreferenceManager ` , and ` setUploaderBehaviour `
refactor TypeFactory and DefaultJavaPrettyPrinter to improve handling of null values and improve code clarity to enhance readability and maintainability of the code
updated BitmapDrawable instantiation to use Robolectric for Bitmap classes to ensure compatibility with the latest Robolectric library
removed the ` isValidSEnding ` method from the ` isValidEnEnding ` method in ` DutchStemmer . java ` to simplify the
changed the drawable name from ` add ` to ` current ` in ` PageIndicator . PageMarkerResources ` from ` add ` to ` current `
added a volatile int variable ` reinvocations ` to the ` BasicInvocation ` class to ensure the ` reinvocations ` variable reflects the current
updated topPadding calculations in DefaultLookAndFeel . java to use getInnerHeight ( ) instead of getHeight ( ) to ensure proper calculation of topPadding
added a break statement in the Recognize class to improve code readability and maintainability
added PreferenceExtensionsKt and PreferenceManager2 support in Workspace , FolderNameEditText , and PopupContainerWithArrow classes to enhance user experience by
updated formula handling logic in ExcelBatchReader . java and added a new test for text formula parsing in TestExcelFormat . java to ensure correct handling
added a new test class ` Foo ` and a dump method in ` ImmutableField ` and ` ASTClassOrInterfaceBodyDeclaration ` to ensure proper
added a ` userAgent ` field to the ` CommaFeedConfiguration ` and modified the ` HttpGetter ` initialization in ` HttpGetter ` to ensure
added required parameter to AvroDataFormat and BarcodeDataFormat classes to ensure proper handling of XmlAttribute annotation
updated logging level from info to debug in Utilities . java to improve clarity of logging for better debugging
rename QueueTest class to QueuedPipeTest to improve clarity and consistency in naming conventions
updated the checkVersion method to use a method to retrieve the unique ID from the OfflinePlayer to ensure compatibility with the latest OfflinePlayer
refactor route handling in DefaultRoutesCollector to use a try - catch block to improve code readability and maintainability by reducing redundancy
added a ` vertexColor ` property to ` PShape3D ` class and modified color handling in ` PShape3D . java ` to
added a boolean parameter ` isPkColumnFiltered ` to ` SchemaDotFormatter ` and updated related methods in ` DiagramRendererOptionsTest ` to
removed Shadow . extract ( shadowMatrix ) from ShadowMotionEvent . java to simplify the code and improve readability
updated package structure of MetaRules and MetaRules from ` com . facebook . buck . parser . api ` to ` com . facebook . buck .
refactor class handling in GroovyEngine to simplify code and improve readability to enhance maintainability and maintainability of the code
refactor BrandingServlet and PluginContextListener to include a new PluginContextListener class and add a PluginContextListener to enhance plugin context management and
replaced System . out . println with System . out . println in NativeCodeGenerator . java to improve code readability and maintainability
removed updateActiveInstances ( ) and updateActiveInstances ( ) calls in FlightConfiguration . java to streamline the code and improve readability
added a new test method ` ExpectedException ` and updated ` ThrowableAssert _ hasCause _ Test ` to use ` ExpectedException ` instead of `
removed the ` flattenName ` method from ` AutomaticDependencies . java ` to simplify the code and improve readability
replace requestedScopes with allowedScopes in ClientDynamicRegistrationEndpoint . java to ensure proper handling of allowed scope configurations
added unit tests for setting Firefox profiles and capabilities in MarionetteTest . java to ensure proper handling of Firefox profiles in the application
added ` getDescription ( ) ` method to ` Route ` , ` ProcessorDefinition ` , and ` Route ` classes to enhance description handling and ensure proper
refactor JavacTreeMaker class to improve code readability to enhance maintainability and maintainability of the code
added weight setting for edge weight in ImporterCSV . java to ensure proper handling of edge weight in CSV processing
updated the method ` getHoursInMonth ` to use ` getHoursInCurrentMonth ` instead of ` s _ hoursInMonth ` to improve
updated SQL queries in DatabaseMetaData and DatabaseMetaData classes to use adrelid and attnum instead of null to ensure compatibility with adrelid and
added a null check for binarized sentences in SentimentAnnotator . java to ensure that binarized sentences are not built by
added StringBuffer representations for username and passwords in User . java and updated UserTests . java to ensure proper handling of revoked authorities in the user
added null check for message body in MessageHelper . java to improve robustness by preventing potential NullPointerExceptions
refactor ` fromExecutionVertex ` to ` ExecutionVertex ` and ` ExecutionProducer ` in multiple files to improve code readability and maintainability by
refactor RosterAccess and RosterManager to use GroupManager instead of subJID and improve error handling to enhance code clarity and maintainability
added a path reference to Maven test classpath in AbstractJRubyMojo . java and removed unnecessary @ Override annotations in CucumberMojo . java to
refactor method calls in MethodHandleImpl and MethodHandlesTest to use a new userMethod method to improve code readability and maintainability by centralizing
added imports for StopFilterFactory , StopFilterFactory , and LegacyHTMLStripCharFilterFactory to CommonGramsQueryFilterFactory , and Legacy
updated width and height checks in URLImage . java to check if placeholder images are not greater than width and height to ensure accurate comparison between width and
added a condition to check if the package name starts with " META - INF / " before appending to the list to ensure that the package
refactor ` createImageToFileSystem ` and ` createImageToStorage ` methods in ` ImageDownloadService ` and ` ImageDownloadService ` to
updated assertions in StackWalkerTest to use VersionCheck for the expected number of values to improve clarity and maintainability of the test case
changed the visibility of the addViewportJob method from protected to public to allow access to the method from other classes
updated variable names in SimpleWordCount and RBKTimeWindowTest classes to improve clarity and consistency to enhance code readability and maintainability by
added server startup and no system exit checks in TestDatabase . java to ensure proper handling of system exit status
added null and empty checks in NodePathsConvertOperator and SchemaQueryMergeOperator to ensure proper handling of null and empty children to prevent potential NullPointerException
updated harvesting time retrieval methods to return the total harvesting time instead of the harvesting time to improve clarity and maintainability of harvesting time
updated font drawing methods in ParticleEditor . java for consistency to improve code readability and maintainability
updated UpgradeCatalog240 . java and UpgradeCatalog240Test . java to handle keyserver - port configurations correctly to ensure proper
added a background color to the SvgViewerFactory class to enhance the visual appearance of the svg viewer ' s background
updated import statements from ` @ Config ` to ` @ Implementation ` in ` ShadowKeyguardManagerTest ` and ` ShadowKeyguardManager ` to
updated ` containsExactly ` method to accept ` varargs ` instead of ` first ` , ` rest ` , and ` varargs ` to
updated Bucket4jFilterFunctions to use refillGreedy and refillGreedy instead of simple to ensure proper handling of
added an external list of stopwords in GermanAnalyzer , GermanStemmer , and WordlistLoader classes to improve code readability and maintainability by
added hooks to the Generator class and updated transformation handling in multiple classes to improve clarity and maintainability of the code
added handling for NoClassDefFoundError in REngine . java to handle NoClassDefFoundError to ensure proper handling of NoClassDefFound
refactor TraceWebFilter and TraceWebFluxTests to use SpanAndScope instead of Span . class to improve code readability and maintain
added a null check for the exception before setting the exception to prevent potential NullPointerExceptions when the exception is null
updated SolrServerException instantiation in CommonsHttpSolrServer . java to include getBaseURL ( ) to ensure proper handling of SolrServerException instances
updated the setLandscape method to check if the printSetupRecord is not set to false to ensure that the printSetupRecord is not set
added null check for NullWritable in JavaVoidObjectInspector . java to avoid potential NullPointerExceptions when accessing null values
added a check for the argument name in ArgDesc . java to ensure proper handling of argument names
added background listener handling to the AndroidLocationPlayServiceManager class to ensure proper handling of location updates based on AndroidImplementation
removed unnecessary check for primitiveType in MeshBuilder . java to improve code readability and maintainability
refactor length checks in TruffleString . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a call to setCommandList ( isCommandList ( ) ) in ComboBox . java to ensure command list is only set when the command
nifi - 118 : use tlshelper . escapefilename ( ) instead of tlsclientmanager . escapefilename ( )
updated command line arguments in ZkCLI . java for consistency to improve code readability and maintainability
updated condition checks in FirmwareUpdateProgressInfo , BridgeHandler , BridgeHandler , and WemoLightHandler to improve code readability and maintainability
added a condition to check if the remoteGrpcStatus is OK before posting the post to ensure that the post is only posted when the remote is
refactor method signatures in multiple classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a new entity ID for the tick entity in ForgeChunkManager . java to ensure the tick entity is only added when the tick entity is
added error handling for GLSurfaceViewAPI18 errors in GLSurfaceViewAPI18 . java to improve clarity and maintainability of error handling in the
added a method ` getSupportedLocales ( ) ` to ` FeatureRegistry ` and implemented locale comparisons in ` InfoRequestHandler ` to improve locale
replace serverURI with http : / / myhost : myhost : myhost : 1234 / tests / in RFC2616BaseTest . java
added a call to addToHelperList ( ce ) in Construction . java to improve code readability and maintainability
added handling for escape sequences in GlyphLayout . java to ensure proper handling of escape sequences in the layout
refactor context classloader handling in Transport , TCPTransport , and TCPTransport classes to improve security and maintainability of context classloader management
added null checks for mParents in ReceiveExternalFilesActivity . java to prevent potential NullPointerExceptions when processing folders
added null check for m _ serviceLoaderClassLoader before loading the ITestNGListener class to prevent potential NullPointerExceptions when m _ serviceLoaderClassLoader
removed the debug logging statement in BarrowmanCalculator and TubeCalc classes to simplify the calculation and improve code readability
added a check for ` obj instanceof Node ` and updated column assignment logic in ` TimelineControllerImpl . java ` to ensure proper handling of node
added a method to register extra components in BaseBrokerStarter to ensure proper handling of extra components for broker admin
added a new test method ` testBug4658 ` in ` MultiCfQueryExecIT . java ` to verify the behavior of SQL queries
refactor PeerGroup and PeerGroupTest to use LinkedList instead of ArrayList to improve code readability and maintainability
added variables ` mjPrev ` and ` mjUnchangedCycles ` and ` mjStored ` to ` TileAbstractBuilder ` to
removed the ` getConfigNodeSimpleConsensusSnapshotTriggerThreshold ` parameter from ` ConfigNodeConfig ` and added a ` RatisConfig `
refactor multiple Java classes for improved readability to enhance maintainability and maintainability of the codebase
added a null check for ManagedService in DefaultRemoteProxy . java to prevent potential NullPointerExceptions when unregistering JMXHelper instances
[ tika - 164 ] [ tika - 164 ] fix encodingdetector in packageparser
added a new file TestSplitThruPhiDivMod . java that includes a new test class TestSplitThruPhiDivMod . java to
added methods to lookup generic interfaces and interfaces in TemplateRegistry . java to enhance type lookup functionality and ensure proper handling of generic interfaces
updated the constructor from 512 to 1028 in ByteArrayOutputStream . java to ensure compatibility with the latest version of ByteArrayOutputStream
added Chinese , Arabic , and Farsi symbols to the list of languagesExcluded in PlayerSettingsScreen . java to enhance user experience by providing more detailed
refactor byte array handling in TransferCompletionHandler to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated method names from ` setVisible ( false ) ` to ` addWindowListener ( WindowAdapter ) ` in multiple menu classes to improve clarity and consistency in
added null check for the src field in SemanticAnalyzer . java to improve robustness by preventing potential NullPointerExceptions
added scaling logic in SkeletonRenderer . java to ensure correct alignment of the mesh in the renderer
added the ` getSolrHome ( ) ` method to ` DistributedClusteringComponentTest ` and ` BaseDistributedSearchTestCase ` classes to provide
added ComponentScan annotation to SpringWebConfig . java to enable component scanning functionality for improved security
removed the ` getAccount ( ) ` method from the ` UserListItem ` class to streamline the code by eliminating unnecessary functionality
added a new test method ` installPackage _ defaults ` to ` ShadowPackageManager ` , ` ShadowApplicationPackageManager ` , and ` ShadowApplicationPackageManager `
refactor AvailableSettings class for improved readability to enhance maintainability and maintainability of the code
added TransactionCapsule and ReceiptCapsule fields to the TransactionTrace class to enhance transaction tracing capabilities for better transaction management
added a new property ` shuffleMemberList ` to ` ClientProperties ` , ` ClusterListenerSupport ` , and ` ClusterListenerSupport ` classes to
updated the initialization of Text and CrawlDatum in SegmentReader . java to improve code readability and maintainability
refactor JsonDeserializer class to improve code readability to enhance maintainability and maintainability of the code
updated fetchSize configuration to use ThreadLocal for fetchSize in TsfileDBConfig and QueryProcessExecutor to improve thread safety and maintainability of fetch
replace trunk ( ) with trunc ( ) in GenericUDFTrunc . java to improve clarity and consistency in formatting
removed the import of ExecutionContext in TaskletStep . java to streamline the code by eliminating unnecessary dependencies
updated the ` title ` variable from ` String ` to ` String ` in ` Lwjgl3WindowConfiguration . java ` to ensure proper
added a static final ` EMPTY _ BODY ` to ` AsyncHttpClientCall ` and a corresponding test in ` AsyncHttpClientCallTest ` to ensure
added a new interface ` EmbeddedServerInstance ` to the ` io . micronaut . discovery . EmbeddedServerInstance ` class to indicate that the
added a try - catch block to register mac events in JabRefFrame to ensure proper handling of mac events in the application
updated SecurityTokenServiceAuthenticationMetaDataPopulatorTests to SecurityTokenServiceTokenFetcher instead of AuthenticationMetaDataPopulator to improve clarity and consistency in naming conventions
updated the return statement from ` toEnum ` to return ` toEnum ` instead of ` toEnum ` to improve code readability and maintainability
changed the visibility of hideUnprivilegedObjects from private to private final to ensure the visibility of the hideUnprivilegedObjects
updated logging statements in ThreadedAcousticScorer and AudioDataSourcesTest to use ConfigurationManager to improve logging clarity and ensure proper batch
added a check for Android version in IOUtils . java to ensure proper handling of Android versions in the application
replaced ` Context ` with ` VariableInstanceEntity ` in ` ByteArrayType ` and updated related test cases in ` ServiceTaskVariablesTest ` to improve
refactor multiple EhCacheTicketRegistry , LdapPasswordPolicyEnforcer , LdapPasswordPolicyEnforcer , and SamlCompliantUniqueTicketIdGenerator
refactor logger retrieval logic in MavenLoggerFactory to use computeIfAbsent method to improve code readability and maintainability by reducing redundancy
deleted the DataOutputOutputStream class and modified HbaseObjectWritableFor96Migration to remove the DataOutputOutputStream class to streamline the codebase by eliminating unnecessary
updated the autogather flag from false to false in TestAcidOnTez . java to ensure that the autogather flag is
updated logging level from info to debug in MavenEnhancePlugin . java to improve clarity and consistency in logging output
added a method ` getDefaultProviderName ( ) ` to ` Platform ` , ` OpenSSLProvider ` , and ` StandardNames ` classes to enhance
added imports for Captor and CaptorAnnotationProcessor in Fields . java and created instance fields in MockitoBeforeTestNGMethod . java to enhance
added checks for ` onlyRun ` and ` testMethodNames ` in ` TestSuiteBuilder . java ` to ensure that ` onlyRun `
refactor GroovyAutoComplete and GroovyLanguage to improve prefix handling to enhance code readability and maintainability by centralizing prefix logic
refactor GraphHopper initialization to use GraphHopperOSM instead of GraphHopperOSM to improve code readability and maintainability by
( chore ) camel - selenium - http : / / issues . apache . org / jira / browse / amq - 461
changed the visibility of ` mHideSysUiScrim ` from final to ` mHideSysUiScrim ` and added a preference handling to
refactor ` enqueue ` and ` cancel ` methods in ` Call ` , ` OkHttpCall ` , and ` OkHttpCall ` classes to
refactor swipe handling logic in WindowTransformSwipeHandler . java to improve code readability and maintainability
changed the interface ` RequestMatcher ` from ` org . springframework . security . web . util . matcher . RequestMatcher ` to ` org .
added a new ` ImplicitLambdaConsideredForApplicabilityTest ` class and implemented a new ` ImplicitLambdaConsideredFor
replaced calls to ` testBoxedAndDevirtualizedTypes ` with ` testBoxingConstructors ` and ` testBoxingValueOf `
added unit tests for retrieving qualifiers in DeviceConfig and DeviceConfig classes to ensure correct usage of qualifiers based on display dimensions
replaced ` LocalDateTime ` with ` RuntimeException ` in multiple test files to simplify timestamp handling and improve code readability
updated the icon name from drawable . logo to mipmap . ic _ launcher in RootCursor . java to ensure compatibility with mipmap icons
added errorBuilder . setContentText ( content ) to FileUploader . java to ensure proper handling of error messages
refactor ConcurrentHashMap class to improve code organization to enhance maintainability and readability of the code
added methods for adapting user trades in AbucoinsAdapters , AbucoinsTradeService , and AbucoinsTradeServiceRaw to
refactor plot handling in PlotSquared and Delete classes to use a boolean value of true to improve code readability and maintainability by centralizing plot
Added a new constructor to HtmlUnitDriver to handle browser launcher capabilities in the browser launcher to ensure compatibility with the latest browser launcher capabilities
added support for VARBINARY type in BlobType . java to ensure proper handling of VARBINARY types in the database
refactor version handling in SetCookieSupport . java to simplify code and improve readability to enhance maintainability and maintainability of the code
added synchronization in LibFFIContext . java to ensure thread safety and avoid potential synchronization issues
updated InboundBuffer to use ` ContextInternal ` instead of ` Context ` and updated context handling in ` InboundBuffer ` and ` Vert
updated LDAP timeout handling in Connection . java and added a new ` LdapTimeoutTest . java ` method in ` LdapTimeoutTest . java ` to
updated usage message from " UniocdeData . txt " to " UnicodeData . txt " in CharacterName . java and Properties . java to
added a header for " inoutHeader " in CxfMessageHeadersRelayTest to set the operation name to " inoutHeader " to ensure
refactor multiple UI classes to improve code organization to enhance maintainability and readability of the codebase
added BoosterSet import and modified return statement in ComponentAssemblySaver . java and BoosterSet . java to ensure proper handling of Booster
added password authentication functionality to JabRef . java to enhance security by allowing proxy user and port to be authenticated
replaced ` MetricsUtil . getInterval ( ) ` with ` MetricsUtil . getMeter ( MetricsKey . BLOCKCHAIN _ FORK _ 
replaced InternalError with a return statement in Class . java to improve code readability and maintainability
updated logging statements in TestIPCUtil . java to utilize Log4JLogger instead of Log to improve logging clarity and maintainability of logging
removed chunked transfer encoding from NettyRoutingFilter . java to simplify the code and improve readability
added a call to clearAttributes ( ) in PatternTokenizer . java to ensure attributes are cleared before processing
added pollingPeriod parameter and improved exception handling in VerificationAfterDelayImpl and After classes to enhance error handling and improve error handling for verification failures
added a compaction flag to the CliConfigs and implemented compaction handling in SessionState to enhance user experience by allowing compaction based on session state
refactor DockerInterpreterProcess to use FileUtils instead of hardcoded intpPath to improve code readability and maintainability by utilizing FileUtils for
hbase - 13232 hbaseadmin . gettableregions ( ) return empty list instead of empty list
added @ Ignore annotation to PartialEscapeAnalysisTest . java to temporarily disable tests for clarity
removed the ` calcXBounds ` method calls in ` BarLineChartBase ` , ` CombinedChartRenderer ` , and ` Renderer ` classes to
added a try - finally block to ensure proper resource management and prevent potential resource leaks
added a call to release the headerBuffer in HttpSenderOverHTTP . java to ensure proper resource management and prevent potential memory leaks
added a new test file ` UseDiamondOperatorWithVarTest . java ` and modified ` Java17TypeSignatureBuilderTest . java `
added null check before closing ResultSet in JdbcExecutor . java to ensure proper resource management and prevent potential NullPointerExceptions
updated driverVersionMajor and driverVersionMinor values from - 1 to 6 in DerbyDatabase . java to ensure compatibility with the latest driver versions
added a new test class ` Foo ` and modified ` UseStringBufferLengthTest ` to check if literals are empty to ensure that literals
removed log . error ( msg , e ) from RemoteSparkJobMonitor . java to streamline error handling by eliminating unnecessary logging
modified the createDb method to return a Connection object instead of void to ensure proper resource management and prevent potential resource leaks
refactor multiple classes related to CreateCustomMetric and ListResources to improve code organization and maintainability
hbase - 16464 add offpeak option to compaction configuration ( hstore . hstore . size . offpeak )
added handling for the " address " node in BitstampDepositAddress . java and created a new test class DepositAddressJSONTest . java to ensure
updated exception handling in BufferingResponseListener to use response . abort ( ) instead of throw an IllegalStateException to improve error handling and ensure proper response
updated the method call from ` linkInDeletedDirectories ` to ` linkPath . toAbsolutePath ( ) ` in ` ProjectView . java ` to
updated ` InvocationFinishedEvent ` and ` InvocationFinishedEvent ` to implement ` InvocationType ` instead of ` Event ` in ` DefaultMetricsRegistry `
added a loop to check if the network interface does not supportMulticast to ensure proper handling of multicast addresses in the network interface
refactor checkSum logic in ChangeSet . java for consistency to improve code readability and maintainability
added a clone method to BufferedChecksumIndexInput to ensure proper initialization of IndexInput
updated the calculation of ` x * y ` and ` y * y ` in ` Circle . java ` to ensure accurate calculation of ` radius `
added a conditional check for the frequencyBand identifier in P25Channel . java and modified the return statement in P25ExplicitChannel . java to ensure
updated tapSquare and tapRectangle fields to use rectangle dimensions instead of square dimensions to improve flexibility in handling tap rectangles in gesture detectors
changed default value of DEFAULT _ REPLICATE _ ON _ WRITE from true to false in CFMetaData . java to ensure proper handling of
added a lastFillTime parameter to CryptoFacilitiesAuthenticated , CryptoFacilitiesTradeServiceRaw , and CryptoFacilities
added the ` getDelegate ( ) ` method to ` TraceCallable ` , ` TraceRunnable ` , and ` TraceRunnable ` classes to enhance the
added functionality to retrieve the share file fragment in FileActivity and updated snackbar handling in FileDisplayActivity to improve user experience by providing more informative
added a new method ` quiche _ stream _ writable ` in ` ForeignIncubatorQuicheConnection ` , ` qui
added a call to ` JavascriptContext . java ` in ` JavascriptContext . java ` to improve code readability and maintainability
refactor TableCell constructors in BaseTextFormattingHelper and TableCell classes to improve code readability and maintainability
added a new file ` TracingAutoConfiguration . java ` for tracing auto configuration to enable tracing capabilities in the application
added a Para parameter to the addContent method in Submissions . java to improve code readability and maintainability
updated the ` getPrunedQueryableSegments ` method to include a ` List < IndexSegment > ` parameter and added a new ` List < Index
refactor VertxBufferTest class to improve code readability to enhance maintainability and maintainability of the code
added a new test class ` TestMessageSubmissionChunk ` and created a new ` TestMessageSubmissionChunk ` class in ` AllHSMFTests `
changed the visibility of the mContext variable from private to protected in PredictionAppTracker . java to allow subclasses to access the context
removed unused imports from ShowTablesOperation and ShowViewsOperation classes to streamline code and improve readability
added a new class ` MongoDataIntegrityViolationException ` and modified ` MongoTemplate ` to include ` WriteResult ` and ` MongoActionOperation `
updated the return statement from ` jobContext . jobCompletionFuture ( ) ` to ` jobCompletionFuture ( ) ` in ` JobCoordinationService
updated the ` bitsToHumanReadable ` method to include ` mimeType2HUmanReadable ` and modified the ` bytesToHumanReadable ` method to
updated the implementation of ` newMergePolicy ` to use ` TieredMergePolicy ` instead of ` TieredMergePolicy ` to improve
added a check forOverviewStateEnabled in RecentsView . java to prevent potential NullPointerExceptions when mOverviewStateEnabled is false
updated error message from ` ` cpu ' ' to ` ` cpu ' ' in ` CpuNDArrayFactory . java ` to improve clarity
updated the ` loadSettingModels ` method to accept a ` referencePropertiesInputStream ` parameter and added a new ` referencePropertiesInputStream ` parameter to enhance
added null checks for incoming fields and terms in FilterLeafReader . java to prevent potential NullPointerExceptions when incoming fields and positions are null
added SecretKeySizeProvider and updated key size handling in JceCRMFEncryptorBuilder and AllTests to improve encryption encryption capabilities and ensure correct
refactor exception handling in NetSocketReader and SoftEndOfStreamException to improve clarity and maintainability of exception handling
removed unnecessary import statements in multiple Java files to streamline the codebase by eliminating unnecessary dependencies
updated size from 9 to 10 in BundledDistributionTest . java and added tests for database user retrieval in PostgreSQLTest . java to
[ hotfix ] [ pipeline ] add config option for job name in streamexecutionenvironment
updated layout calculations in OverviewState . java to use DeviceProfile instead of workspacePageHeight and scale based on deviceProfile . isTwoPanels
updated IcePlainsBiome class to extend SnowyBiome and updated temperature and rainfall values accordingly to improve code readability and maintainability by using a
replaced ` getZone ( ) ` with ` getMaxTime ( ) ` in ` DataUpdateManager ` , ` StorageUtils ` , and `
added a boolean parameter ` isQualified ` to ` ThisReference ` and updated related methods in ` CompilationUnitBuilder ` and ` CompilationUnitBuilder `
updated regex pattern from " wmde . " to " wmde . " in XhamsterRipper . java to ensure compatibility with
updated the loop logic in GlowWorld . java to use a temp list instead of an empty list to improve code readability and maintainability by
added a null check for schema before accessing the tableName variable in OracleDialect . java to avoid potential NullPointerExceptions when schema is not null
updated the condition for pathPart in FlutterConsoleFilter . java to improve clarity to enhance code readability and maintainability
added a number of files parameter to the FileMenuFilter class and updated related constructors in FileMenuFilter , FileDisplayActivity , and OC
refactor NetworkPublication class to use termLengthMaskMask instead of termWindowLength to improve code readability and maintainability
refactor GuildUpdateOwnerEvent class to improve code readability to enhance maintainability and maintainability of the code
updated inPortalTicks logic in Player . java , Entity . java , and Player . java , and Entity . java , and Entity . java to
added compressed color handling and improved color handling in ClusterMonitorTileSkin . java to enhance color handling and ensure proper color handling for compressed tiles
refactor multiple codec classes to improve code organization to enhance maintainability and readability of the codebase
updated the calculation of ` lengthDataBits ` to use ` long ` instead of ` int ` for clarity to improve code readability and maintainability
removed unnecessary check for header in RendererConfiguration . java to simplify code and improve readability
update disk offering logic to check if the same disk offering does not match with the custom service offering to ensure proper handling of new disk offering changes
updated import statements in HitbtcAdapters . java and added LimitOrder . Builder in HitbtcAdapters . java to improve code clarity
updated idleCount and consecutiveIdleCount logic in LLRealtimeSegmentDataManager . java to use consecutiveIdleCount instead of idleCount to improve
updated the description of the JRuby Scripting service in JRubyScriptEngineFactory . java to enhance clarity and maintainability of the code
updated the ` displayName ` variable from ` name ` to ` displayName ` in ` ConfigCategory . java ` to improve code readability and maintainability
updated condition in ParticipateAssetIssueActuator to check if exchangeAmount is greater than - 000001f to ensure correct handling
removed unnecessary loop condition in FeedUtils . java to streamline code by eliminating unnecessary loops
added a new test method ` testHDF4 ` in ` HDFParserTest . java ` to ensure proper parsing of HDF4 files
added a static final boolean for CALCITE _ 6092 _ FIXED in the Bug class and updated related test cases in SqlOperatorTest to
updated null checks for languageServer in IDEEditor . java to improve code readability and maintainability
added a new method ` quietCloseAll ` to ` CloseHelper ` and modified the ` quietCloseAll ` method in ` CloseHelper ` to
updated the button name from ' posBtn ' to ' common _ yes ' in RemoveFileDialogFragment . java to improve user experience by providing a more
added a null check for srcWidth and dstHeight before calling drawImage in Pixmap . java to avoid potential NullPointerExceptions when srcWidth and
replaced ` ReflectionHelpers ` with ` ProtectionDomain ` in ` UnsafeAccess . java ` and updated method calls in ` UnsafeAccess . java
updated regex pattern patterns in GUIUtil . java and added tests for regex validation in GUIUtilTest . java to improve regex validation accuracy and ensure correct
refactor conflict handling in CachedRowSetWriter to use long conflicts instead of boolean to improve code readability and maintainability by reducing redundancy
updated SDK version checks to use MIN _ SUPPORTED _ SDK instead of MIN _ SUPPORTED _ SDK to ensure compatibility with newer SDK versions and
added a conditional check for reference in ReferenceMemory . java to ensure proper handling of reference references
added seed file handling in Injector . java and updated error logging in Injector . java to ensure seed files are processed correctly and improve logging clarity
updated conditional logic in FloatingIconView . java to include a conditional check for the hideOriginal tag to ensure proper handling of the original view '
updated the calculation of maxNodes from 0 to 0 in DefaultLoopPolicies . java to ensure that the maxNodes is always greater than 0 to avoid
added a check for texture coordinate type in CombinedTexture . java and updated texture handling in UVCoordinatesGenerator . java to ensure proper handling of texture
added a check to ensure barcodeFile does not delete the barcode file before deleting it to prevent potential NullPointerExceptions when the barcode file is not deleted
added method ` seek ` and ` close ` to ` TracingConsumer ` , ` TracingProducer ` , and ` TracingProducer ` classes
updated the handling logic in HandleDAOImpl . java to use the correct prefix length instead of locate to improve clarity and maintainability of the code
replaced ` addAll ( collection ) ` with ` addAll ( collection ) ` in ` JSONSerializer . java ` to improve code readability and maintainability
refactor AbstractTimer constructor to use a deprecated constructor instead of a deprecated constructor to improve code readability and maintainability
added a warning message if the Universal Gcode Sender version does not match " nightly " to improve user experience by providing clearer feedback when
updated the ` getResponsesSortedByRecipient ` method to include a ` sortByTeam ` parameter and modified the ` getResponsesSortedByRecipient `
change return statement from " Remove unnecessary throws " to " Remove unnecessary ` throws ` declarations in UnnecessaryThrows . java to improve clarity
replaced the ` CacheApplication ` class with ` CacheController ` and updated its usage in ` CommonsApplication ` and ` ShareActivity ` to improve code
replaced ` getApplicationContext ( ) . startService ( ) ` with ` RuntimeEnvironment . application . startService ( ) ` in ` ShadowContextImpl
refactor StatisticsServlet class to improve code readability to enhance maintainability and maintainability of the code
updated the configuration update logic in RuntimeEnvironment . java to ensure compatibility with newer Android versions
added VERSION _ DEF _ STACK _ REPO _ UPDATE _ LINK _ EXISTS property to VersionDefinitionResourceProvider and its corresponding
refactor ApplicationImpl , NodeImpl , and Witness classes for improved clarity to enhance maintainability and readability of the codebase
added a null check for indexName in CFMetaData . java to prevent potential NullPointerExceptions when indexName is null
added " com . sun . org . apache . xml . internal . resolver . helpers . " and " com . sun . org . apache .
updated method names from ` persist ` to ` updateExecutionContext ` across multiple classes to improve clarity and consistency in method naming conventions
added handling for LoopExitNode in GraphUtil . java to ensure proper input processing for loop exit nodes
refactor RecyclerView and WidgetsRecyclerView to use WidgetsRecyclerView instead of RecyclerView to improve code readability and maintainability by using a more descript
added a condition to check if the terminal is not supported in ConsoleReader . java to ensure that the terminal is only used when the terminal is not
updated random values in CloudExitableDirectoryReaderTest , CloudExitableDirectoryReaderTest , LBHttpSolrClient , and LBHttpSolr
added a condition to check if the session data is valid and modified session management logic in AbstractSessionCache . java to improve session management and ensure proper
added null check for columnNames in ChangedIndexChangeGenerator . java to improve robustness by preventing potential NullPointerExceptions
refactor ButtonGroup to use ArrayList instead of Vector for buttons to improve code readability and maintainability by utilizing a list of buttons
refactor UserManagerCompat and UserManagerCompatVN classes to use Mr1 and ATLEAST _ MARSHMALLOW to improve
added databaseMajorVersion and getDatabaseMinorVersion methods to MockDatabase , AbstractDatabase , and ReorganizeTableStatement classes to enhance database version retrieval capabilities
updated the ` spawnThreadToCompareActionGraphs ` method to use ` MapDifference ` instead of ` Set ` and ` MapDifference ` to
added new classes LockDatabaseDesc , UnlockDatabaseDesc , and UnlockDatabaseDesc to implement a Serializable interface for Lock Database and UnlockDatabase in DDL
refactor RankingTopComponent , RankingUIModel , and RankingToolbar classes to improve code readability and maintainability by
added a check for DisconnectMessage and updated logging statements in HandshakeHandler . java and NodeImpl . java to ensure proper handling of disconnect messages and
added a new test method ` testSetDeleteSG ` to ` IoTDBAuthorizationIT ` to verify the functionality of ` SET STORAGE GROUP
updated documentation files to use Google ' s Cloud : : Documen instead of DocumentAi in multiple proto files to improve clarity and consistency in
refactor variable validation logic in Assertions and FindMissingTypes classes to improve clarity and consistency to enhance code readability and maintainability by centralizing variable
added methods for afterTestClass and beforeTestClass in StepScopeTestExecutionListener . java to enhance testing capabilities for test execution
updated import statements in CountersManager . java to use UTF - 8 encoding instead of UnsafeBuffer to improve code readability and maintainability by
replaced ` toString ( ) ` with ` setAddress ( ) ` in multiple classes to simplify code and improve readability
added null check for joinKeys before cloning joinKeys in JoinDesc . java to prevent potential NullPointerExceptions when copying joinKeys
added a default principal resolver to the WebAuthnConfiguration to enhance security by providing a default principal resolver for web authentication
added a ` ImmutableList < Path > searchPaths ` parameter to the ` addSettingsFromFile ` method and modified the ` addSettingsFromFile ` method to
changed the type of binarizedTrees and leafLists from List < List < Tree > > to final in Oracle . java to improve
[ hotfix ] [ runtime ] [ runtime ] ignore unscaling checkpoint option when rescaling of unaligned checkpoint
refactor UnsupportedOperationVisitor to use a boolean parameter for improved code readability and maintainability to enhance code clarity and ensure proper handling of UnsupportedOperation
added static methods for debugging and logging in CompileTheWorld . java to improve code readability and maintainability by centralizing logging behavior
added a check for LocalVariable in the LambdaRewriter class to ensure proper handling of LocalVariable instances
added conditional checks for MySQL database types in CreateTableGenerator . java to ensure proper handling of timestamp column types in database operations
added classloader management to EnvConfiguration . java to ensure proper classloader management and prevent potential memory leaks
added a conditional check for stageNr in SimulationListHandler . java to ensure that the motor configuration is only set when stageNr is
updated the ` runFunctionalCommandLineRunnersAndApplicationRunners ` method to use ` BeanDefinitionOrderRunnerConfig ` instead of ` FunctionalRunner
refactor TransactionUtil2 class implementation to improve code readability and maintainability
updated the ` validateIssuerClaim ` method to accept a ` Optional < OAuthRegisteredService > ` parameter and modified the ` validateIssuerClaim ` method
added null check for coll in ClusterState . java to avoid potential NullPointerExceptions when coll is null
updated alignment setting in TextArea to use getAllStyles ( ) instead of getStyle ( ) to improve readability and maintainability of the code
added ` foreignDatabaseName ` and ` foreignSchemaName ` methods to ` ForeignKeyColumn ` , ` ForeignKeyColumnMutator ` , and ` ForeignKeySchema
refactor ElectionState initialization to use TimeoutException instead of ElectionState . INIT to improve error handling and provide clearer error messages for leader registration
added a private method ` shadowOf ` to ` ShadowActivity ` and updated the ` ShadowBluetoothDevice ` to use ` Shadow . extract
drill - 4192 : fix selection root to be empty ( # 4192 )
added a new method ` onInventoryTick ` to ` IForgeItem ` and ` IForgeItemStack ` classes to enhance inventory tick handling
refactor Export and IOUtil classes to use ByteArrayOutputStream instead of FileOutputStream and ByteArrayOutputStream to improve code readability and maintainability by centralizing
added a null check for getSherlockActivity ( ) before invalidateing options menu to prevent potential NullPointerExceptions when the getSherlockActivity is
updated widget binding logic in AppsCustomizePagedView , Launcher , PendingAddItemInfo , and PendingAddItemInfo to
added new constants for air pressure , air quality , and co2PPM in EcobeeSensorThingHandler . java to enhance functionality for air
refactor contact handling logic in OperationSetServerStoredContactInfoFacebookImpl . java to improve code readability and maintainability
added environment variables for AAPT and AAPT2 in the Genrule class to enhance environment variables for AAPT and AAPT2
added a conditional check for TruffleCompilerOptions . TruffleInstrumentBranches in InstrumentBranchesPhase and InstrumentBranchesPhase to ensure proper handling of
added a null check before disposing the message to prevent potential NullPointerExceptions when the message is not initialized
added init ( ) method to TronStoreWithRevoking , TxCacheDB , and TransactionCache to ensure proper initialization of the transaction cache
updated logging level from " Log4j " to " LogWatcher " in CoreContainer . java to improve clarity and consistency in logging messages
replaced printStackTrace ( ) with fail ( return ) and improve error handling in CategoryPlotTests . java to enhance clarity and maintainability of error reporting
replaced ByteArrayOutputStream with SmallByteArrayOutputStream in IOSImplementation . java and added SmallByteArrayOutputStream . java and SmallByteArrayOutputStream . java to improve performance
updated attributes in OGLESShaderRenderer , Shader , and Shader classes to use IntMap instead of HashMap to improve code clarity and maintainability by
updated the connection string from " territory = en _ US " to " shutdown " in AbstractDIHJdbcTestCase . java to ensure proper resource management
added null checks for firstExchangeTimestamp and lastExchangeCompletedTimestamp in RouteInfo . java to ensure proper handling of null values and avoid potential NullPointerException
updated the javadoc method to use a default language instead of a default language in TestHtmlTag and TestUseOption to improve clarity and maintainability of
added a condition to check if the result is in a complete state before checking if the item list is larger than 10 to ensure that the result is
updated command line arguments in HybridClusterIntegrationTestCommandLineRunner to use timeColumnName instead of timeFieldSpec to improve clarity and maintainability of command line
updated output format handling in TestUtility and OutputOptions classes to improve clarity and consistency to enhance code readability and maintainability by centralizing extension handling
updated condition in DeviceProfile . java to check if the bottom margin is not greater than the bottom space to ensure that the correct margin is not exceeded
added hashCode methods to AnimationList , SceneKey , and GltfModelKey classes to enhance hashing capabilities for animation lists
added a ` _ date ` field and modified the ` setDate ` method in ` AbstractGenerator ` , ` Generator ` , and ` Generator ` classes
replaced Adler32 with CRC32 in Store . java to improve code readability and maintainability
updated the XenHeartBeatInterval parameter from " any # of seconds " to " null " to ensure that the heartbeat interval is not
added a new constant ` ZERO _ AREA _ FIN ` and updated warning handling in ` FinSetCalc . java ` and ` FinSet
refactor ElasticsearchIO to use a new DocumentMetadataSerializer class for better readability and maintainability to improve code clarity and ensure proper serialization of Document
hhh - 16257 add datetrunc function to filter out trunc function
added a condition to check if a memory pool is not found in MetricUtils . java and updated error handling in MetricUtilsTest . java to ensure
added a boolean flag ` useJavaScript ` and updated return statements in ` UserTests ` , ` FileTreeNode ` , and ` FileTreeNode ` classes
updated validation errors in ValidationTask . java to use RUNTIME _ PROTOTYPE _ FACTORY _ TYPE _ EnclosingNames instead of ConfiguredType
updated the BACKFILL constant from " / generateAnomaliesInRange " to " / replay " in DetectionResourceHttpUtils .
updated return statements in PrecompiledContracts . java for consistency to improve code readability and maintainability
refactor AllAppsContainerView to improve code readability and maintainability to enhance maintainability and maintainability of the code
remove beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta -
updated method names from ` altContext . start ( ) ` to ` otherContext . start ( ) ` in ` ResourceHandlerTest . java `
removed unnecessary conditional check for WORKSPACE _ CUSTOM in Cling . java to simplify code and improve readability
added a null check for lookupModule in TruffleJDKServices . java to ensure that lookupModule is not null to prevent potential NullPointerException
added JUnit Ignore annotation to the shadowInvocationWhenChildIsInstrmentedButUnshadowed method in ClassicSuperHandlingTest . java
updated import statements from ` v1 . v1 . v1 . to ` v1 . service . itbit . v1 . service .
updated the handling of profiling parameters in ProfilingActivationInterceptor and ScopeInterceptor classes to improve clarity and consistency to enhance code readability and maintainability by
updated Utils , ApplicationUtils , and AsyncSocketFactory classes to be final to ensure proper initialization of Utils and AsyncSocketFactory classes
added error handling for IOException and improved error handling in RegionsApiUtil . java to ensure proper resource management and prevent potential resource leaks
replaced instances of ` getClass ( ) . getName ( ) ` with ` java . util . Hashtable ( ) ` in ` Util . java ` to
added tableNameWithType parameter to the log message in RetentionManager . java to enhance clarity of log messages for better debugging
replaced length ( ) checks with trim ( ) for fragmentList in QueryExecutorImpl . java to improve code readability and maintainability
updated error message from ` path . to ` modFile . getFilePath ( ) ` to ` modFile . getFilePath ( ) ` to ensure
refactor node and edge builder handling in PartitionToolbar . java to improve code readability and maintainability by reducing duplication
added checks for task view visibility in RecentsView . java to ensure proper handling of task views when the grid is visible
updated the ` calculate ` method to accept ` BMIViewObject ` instead of ` Map < String , String > ` across multiple classes to enhance
replaced Comparator . comparing with Comparator . comparing in QueryCommand . java to improve code readability and maintainability
added a check for HayBale or BlockHayBale in Entity . java to ensure correct damage calculation based on HayBale
refactor environment variable handling in WindowsProcessAddressSpace and J9DDRImageProcess classes to improve code readability and maintainability by centralizing
added plugin property handling in ` OptionsParser ` and corresponding tests in ` OptionsParserTest ` to ensure proper handling of plugin properties in the application
updated condition in HashJoinBatch . java to check if the hashTable is empty to ensure proper handling of empty hashTables when the joinType is
added a condition to check if the timestamp is negative before checking for seconds in Timestamp . java and updated related tests in TimestampTest . java to ensure
removed the ` archiveCtx ` variable from the ` AeronArchive ` connect method in ` ClusteredServiceAgent . java ` to simplify the code
added a condition to check if the compiler threshold is not compiled before proceeding to improve code readability and maintainability
added a new environment variable ` ENV _ 2 ` and a method ` testImage2 ` in multiple test classes to enhance testing capabilities for image
added new constants for NAMESPACE _ LAUNCHER and NAMESPACE _ LAUNCHER in TogglableFlag . java and updated related methods
change log level from debug to info in DockerClientFactory . java to improve clarity and consistency in logging messages
added a condition to check if the platform is ANDROID before proceeding to avoid potential NullPointerExceptions when the platform is ANDROID
updated assertions in RoutesTest . java to use assertThat for better readability to enhance code clarity and maintainability by centralizing assertion logic
added new classes ` BytePredicate ` , ` FloatPredicate ` , ` ShortPredicate ` , ` FloatToLongFunction ` , and ` ShortTo
refactor getSubsColor method to return a String instead of int to improve clarity and consistency in color handling for video bitrate configurations
added a condition to check if the future is complete before deregistering it to ensure that the future is only deregistered when the future is complete
replaced the initialization of ControlFrameBytes with a call to output ( null , null , null , null , null , null , null , null ,
added handling for redirected intents in LoginActivity and SignupActivity to ensure proper redirection behavior when redirected
added ShadowCheckedTextView to the Robolectric class and created a new ShadowCheckedTextView class to support CheckedTextView functionality in Robolectric
added Serializable interface to ParserState and updated method signatures in AccessorProperty , AccessorProperty , and Property classes to ensure proper serialization and deserialization of
added a new key " identrustdstx3 [ jdk ] " to VerifyCACerts . java to enable testing of identrustd
removed redundant attributes for TEMPDIR _ CONFIGURED and TEMPDIR in WebInfConfiguration . java to improve code readability and maintainability
added support for occupant nick in Occupant . java and a corresponding test in MultiUserChatTest . java to ensure proper handling of occupant
added context parameter to the QuicSession constructor in QuicConnection and QuicSession classes to enhance connection management by allowing context to be set
updated CreateIndexTask to use LogMergePolicy instead of hardcoded methods to improve code readability and maintainability by utilizing LogMergePolicy
refactor null checks in ICU4JImpl and TextPosition classes to improve code readability and maintainability
added ComputedDateValue and ComputedNumericValue imports and improved error handling in AddDefaultValueChange . java and AbstractDatabase . java to enhance
refactor NbtScoreboardIoService to improve code organization to enhance maintainability and readability of the code
updated SAML2Configuration and SAML2ServiceProviderMetadataResolver to check if the service provider metadata resource does not exist to improve clarity and maintainability of the
changed the visibility of the ` printer ` variable from private to protected and modified the ` createPrinter ( ) ` method in ` GraphPrinterDumpHandler
updated the calculation of the average price in HuobiAdapters . java to ensure accurate calculation of the average price in the order
updated method calls from ` getName ( ) ` to ` getTarget ( ) ` in ` ProjectionOperation ` , ` TypeBasedAggregationOperationContext ` , and
removed the boolean result variable from the addViewer0 method in FakePlayer . java to simplify the code and improve readability by eliminating unnecessary logic
added constant state handling in Workspace , FolderAdaptiveIcon , ShiftedBitmapDrawable , and ShiftedBitmapDrawable classes to improve code clarity
refactor connection handling in SPDYClient to improve code readability and maintainability to enhance maintainability and maintainability of the code
add null check for ` obj ` in ` ProtostuffObjectOutput ` and add a new test class ` ProtostuffObjectOutputTest ` to ensure
refactor method signatures in DecompressObjectstreams , DecompressObjectstreams , DecompressObjectstreams , DecompressObjectstreams ,
refactor BarrowmanCalculator class to improve code organization to enhance maintainability and readability of the code
added a conditional check for axis numbers in the DrawAxis class to ensure proper handling of axis numbers in the drawing process
refactor setFilter and setWrap methods to use unsafeSetFilter and unsafeSetWrap instead of setFilter to improve code clarity and maintainability by
updated the variable name from ` returnToWorkspace ( ) ` to ` returnToWorkspace ( ) ` in ` XmlWorkflowServiceImpl . java `
added SSL SSL configuration in CustomUrlJob and added a new CustomUrlTrustEverything class to enable SSL SSL configuration based on URL protocols
updated clock rate handling in multiple classes to use ` getRealUsedClockRateString ( ) ` instead of ` getClockRate ( ) ` to
refactor TextureAtlas class for improved readability to enhance maintainability and readability of the code
updated the ` getProductNameForBuildTargetNode ` method to use ` getModuleName ` instead of ` getProductNameForBuildTargetNode `
added locking and unlocking logic in TestSlot . java to ensure proper resource management and prevent potential memory leaks
added support for ID _ LIST query types in SqlTreeBuilder . java and created a new TestFindIdsWithInheritance . java file to enhance query
refactor WebSocketServletRFCTest to improve readability and maintainability to enhance code readability and maintainability
refactor reference handling in WasmFunctionInstance and WasmFunctionNode to improve code readability and maintainability
added ttl parameter to the ClickHouseLogCollectClient and updated related classes to include a getter and setter for the ttl value to ensure proper handling of
updated serialization type from NESTED _ OBJECT to NAMED _ FIELD in CustomChangeWrapper , CustomPreconditionWrapper , and XMLChangeLogSerializer to
updated import statements in DeploymentExceptionTest . java and added server start and stop methods in DeploymentExceptionTest . java to improve code clarity and ensure proper
added exception handling for initialize and initialize vector drawables in CommonsApplication and NearbyController classes to improve error handling and ensure proper resource management during
added a null check for objectName before returning it to avoid potential NullPointerExceptions when objectName is null
updated error message from ` path ` to ` e . getMessage ( ) ` in ` Command . java ` and ` TestPrint . java ` to
[ hotfix ] [ table - planner ] [ table - planner - planner - planner - planner - planner - 
updated X500Signer initialization and added null checks for issuer and subject names in KeyTool . java and Resources . java to improve robustness by ensuring
added a Deprecated annotation to the RuntimeOptions class to indicate that the class is deprecated and should not be used for removal
removed unnecessary byte array conversion in Utils . java to simplify code and improve readability
added a new interface ` PermissionEvaluator ` to check if a permission is defined in the ` org . springframework . security . expression ` package to
added support for ERASE _ LINE _ ON _ FINISH in LineReader and LineReaderImpl to enhance user experience by providing a
updated condition in MasterFileSystem . java to check if onlineServers is not already contains to ensure that onlineServers is only processed when the server
replaced ` CALC _ MERKLE _ ROOT _ FAILED ` with ` BLOCK _ MERKLE _ ERROR ` in multiple exception
refactor ExpandWar to use URLConnection instead of JarFile to improve URL handling and improve code readability to enhance maintainability and maintainability by centralizing
refactor error handling in DefaultHttpClient and FullNettyClientHttpResponse to handle Throwables instead of Exceptions to improve error handling and ensure proper logging
updated the layout wrapper from center ( ) to centerAbsolute ( ) in Picker . java to ensure the wrapper is centered on the center of the
added a method to recycle memory segments in NetworkBufferPool and added a new test for requestMemorySegmentsInterruptable2 to improve memory segment handling and
added a static variable ` newMbeanServer ` and modified the initialization of ` MBeanServerFactory . releaseMBeanServer ` to improve code readability and maintain
replaced AndroidJUnit4 runner with RetryTestRule in AbstractIT . java to improve code clarity and maintainability by centralizing RetryTestRule
refactor autoCommit logic in QueryStateMachine to use session . getRequiredTransactionId ( ) instead of boolean to improve code readability and maintainability
refactor import statements in multiple Java files to improve code readability and maintainability
added a check for " javax . microedition . khronos . opengles . GL " in the InstrumentationConfiguration to ensure proper handling
[ hotfix ] [ test ] remove unused ` ProcessingTimeCallback ` from ` StreamTaskTimerTest ` and ` TestProcessingTimeServiceTest `
added null checks for _ uri and modified URI retrieval logic in ` Request . java ` and ` RequestTest . java ` to ensure proper handling of
refactor storage point retrieval logic to use a new method ` getLegacyAvailableStoragePoints ` to improve code readability and maintainability by centralizing
added methods to update priority and unavailable sessions in SessionManager . java to improve session management by ensuring priority and availability are updated correctly
added a method to add a package to scan the pro package to enhance functionality by allowing the pro package to be scanned
removed the ` syncedFolderList ` parameter from the ` deleteSyncedFolders ` method in ` SyncedFolderProvider ` to simplify the
updated the ` loadWithNewGlobal ` method to include a ` Object . array . args ` parameter and added arguments handling in ` Context ` to
refactor path handling logic in FastPathResolver to improve clarity and maintainability to enhance code readability and maintainability by reducing redundancy
updated weigher methods from length ( ) to toIntExact in HiveClientModule . java to ensure proper handling of weigher sizes in the
updated method names from ` isExceedRandomizedType ` to ` hasAlreadyRandomizedType ` in multiple classes to improve clarity and consistency
added support for ` LEAD ` and ` LAG ` functions in ` UnsupportedOperatorsVisitor ` and a corresponding test in ` Test
added clearing of proxy request headers in AbstractProxyServlet . java to ensure proper handling of request headers
added a check to skip the SA attach test in CompressedClassSpaceSizeInJmapHeap . java to ensure that SA attach tests are skipped
added a null check for bgColor and a new TranslucentWindow class to prevent potential NullPointerExceptions when bgColor is null
added null checks for user details in UserInfoActivity . java to prevent potential NullPointerExceptions when user info is null
added CustomFieldBehavior and CustomFieldSerialization to PrecompiledHeaderData and updated PreprocessorDelegate to check if leadingIncludePaths is not serializable to ensure
[ hotfix ] [ table - planner - planner ] [ table - planner - planner - planner - planner - 
added a new file ` MultipleOutputsIntegrationTest . java ` to test named output groups in the project to ensure that named output groups are used in
added a check for the old content in FileSettings . java to ensure proper handling of setting keys and value to improve code readability and maintainability
refactor StatelessControllerServiceInitializationContext and StatelessFlow classes to use VersionedProcessGroup instead of SSLContext to improve code readability and
replaced ` new Object [ ] { } ` with ` ArrayUtils . EMPTY _ OBJECT _ ARRAY ` in ` BinaryCipherExecutorTests . java
added a @ TaskbarModeSwitch annotation to the TaplTestsQuickstep class to enable taskbar mode switching during tests
added a new DeviceStatus entry for leaving - dock , energy - save - mode , and energy - save - mode in DeviceStatus . java to
refactor exception handling in ModelLoader to use ItemLoadingException instead of Exception to improve clarity and maintainability of exception management
added @ Ignore annotation to KrakenFuturesStreamingPublicDataTest . java and removed unused imports from KrakenFuturesStreamingPublicDataTest
added a conditional check for 2X graphics in PSurfaceJOGL . java to check if the graphics is 2X to ensure proper handling of
refactor RussianLowerCaseFilter class for improved readability to enhance maintainability and maintainability of the code
[ hotfix ] [ test ] do n ' t attempt to connect to a single zookeeper client port .
added separator and path separator characters to the displayName list in FileDisplayActivity . java to ensure proper handling of separator and path separator characters
changed access modifiers of ` in ` BufferedInputStream ` and ` inRead ` in ` LittleEndien . java ` to ` inRead ` and
added a boolean variable ` repeatFirstLineIndent ` and modified indent handling in ` ColumnText . java ` to improve code clarity and maintainability by
updated the comparison logic in Oid . java to use Object instead of Object to improve type safety and prevent potential ClassCastExceptions
added checks for metrics tracker factory and health check settings in HikariPool . java to improve performance and maintainability of metrics tracking
updated import statements for ControlFlowAnchorNode and ControlFlowAnchored in LoopEx . java to improve code readability and maintainability
added focus paint to the buttons array in WindowsPlacesBar . java to improve user experience by preventing focus issues
added a condition to check for UniqueConstraint in the backingIndex field to ensure that the backingIndex field is only supported for ForeignKey objects
added a deprecated method ` getAccountLedgersWithParams ` to ` KucoinAccountServiceRaw ` and a new ` getAccountLedgersWith
added metadata handling for group metadata in CommunityAdminGroupLinkRepository and a new test for metadata handling in CommunityAdminGroupLinkRepository to ensure proper metadata
updated the GapInsertionDetector to use HypothesisUtterance instead of HypothesisUtterance to improve code
added a new file RubyScriptTextTest . java to test script rendering with cached scripts and reused scripts to ensure that the script engine is correctly
replaced getBackgroundThread ( ) with getDatabaseUpdateThreads ( ) in FeedRefreshUpdater . java and added a getter method for databaseUpdateThreads in ApplicationSettings
updated FASTSCROLL _ THRESHOLD _ MILLIS from 40 to 10 in RecyclerViewFastScroller . java to increase the FASTSCROLL _ 
replaced ` MetaUtil . toInternalName ` with ` Ljava / lang / System ` in ` HotSpotResolvedJavaField . java ` to
hhh - 13644 do n ' t throw null pointer exception when create procedure call
added null check for apiProperties in RestSwaggerSupport . java to prevent potential NullPointerExceptions when accessing API properties
added BinaryFrameGenerator , TextFrameGenerator , and TextFrameGenerator classes for WebSocket framing to enhance WebSocket handling capabilities for WebSocket frames
updated WebDriverWait methods to use WebDriverWait instead of findElement to ensure proper handling of element locations in the browser
replaced Math . abs ( lat ) with nextBoolean ( ) in RandomGeo3dShapeGenerator . java to streamline the code by eliminating unnecessary
added a keepAlive method to the ResourceBundle class to provide a way to reuse the loader in the application
changed return value from false to true in SQLiteDatabase . java to ensure proper handling of boolean values in the SQLiteDatabase class
added a constant for util concurrent signatures in the FindJSR166LockMonitorenter class to ensure proper handling of concurrent concurrent signatures
added MkdirStep and MkdirStep to multiple classes to enhance functionality by allowing MkdirStep to be added to multiple files
refactor error handling in MeshLeveler . java to improve clarity and consistency to enhance code readability and maintainability by using more descriptive
[ kie - pmml ] add support for jpmml - pmml parsing and compilation
changed locationMode from locationMode to thermalStatus in ShadowPowerManager . java to ensure proper handling of thermal status in the PowerManager
added a new constant for OS _ MAC _ TMP _ DIR and modified the directory creation logic in MountableFile . java to ensure proper directory
added a boolean flag ` USE _ MEMORY _ MAPPED _ BUFFERS ` in ` PrjFileReader ` and ` CatalogManager `
added a null check for the organization in the pom file to ensure that the plugin does not have an organization in the pom . xml file
removed unused contributor license agreements from SepPostingsWriterImpl . java to improve code readability and maintainability
deleted the TerminateWebSessionListener . java file to remove unused code to streamline the codebase
updated the method call to use System . getProperty ( " java . class . path " ) instead of System . getProperty ( " java . class .
replaced ` ArrayUtils . EMPTY _ BYTE _ ARRAY ` with ` new byte [ 0 ] ` in ` KM200Device . java
added a new test method ` dontChangeJavadoc ` to the ` AddLicenseHeaderTest ` class to ensure that the ` rewriteRun ` method does
changed the LAUNCHER3 _ PHYSICS flag from false to true to enable the LAUNCHER3 _ PHYSI
added a new < div class = ' noPrint ' and a < / div > element to the HtmlThreadInformationsReport . java file to
updated LUCENE _ MAIN _ VERSION from " 3 . 1 " to " 4 . 0 " and updated TEST _ VERSION _ 
added symbolicator and task fields to BsdDebuggerLocal and PlatformInfo classes to ensure proper handling of symbolicator and task in OS X
refactor FMLClientHandler and FMLIndexedMessageToMessageCodec to use WeakReference < WeakReference < FMLProxyPacket > > instead of protected
added a conditional check for Connection reset by peer in NetworkDispatcher . java to ensure proper logging of network events when the connection is reset
added null checks for conductorByteBuffers and receiverByteBuffers in Aeron . java to ensure proper initialization of adminBuffers and prevent potential NullPointerException
added a break statement in TouchImageView . java to improve code readability and maintainability
updated command line formatting in AdvancedSettingsProto . java to improve clarity and consistency to enhance code readability and maintainability
removed SSLHandshakeListener from FeedableBodyGenerator . java to clean up the code and improve readability
added conditional checks for fully qualified names in TypeUtils . java to ensure correct handling of fully qualified names in the class
replaced NonBlockingHashSet with ConcurrentSkipListSet for memtablesPendingFlush in ColumnFamilyStore . java to ensure thread safety when memtablesPendingFlush is
added null checks and improved error handling in MemberEnter and Erroneous classes to enhance robustness by preventing potential NullPointerExceptions
updated browser initialization from NO _ BACKGROUND to NONE in BugInfoView . java to ensure compatibility with the new browser structure
updated the closing button from finish ( ) to finish ( ) in AboutActivity . java to improve code readability and maintainability
updated the calculation of lowerBound ( ) and upperBound ( ) in IntegerStamp . java and added unit tests in IntegerStampTest . java to ensure accurate
added a new method ` readStream ( InputStream InputStream ) ` to the ` ITextUserAgent ` class to improve readability and maintainability of the
refactor SwitchCompiler and CaseStmtToken classes to improve variable handling to enhance code readability and maintainability by centralizing variable handling
refactor the initialization logic in RSAClientKeyExchange to use a try - catch block for unsupported key exceptions to improve error handling and ensure proper exception
updated the lib attribute name from " AdditionalDependencies " to " psapi . lib " in WinGammaPlatformVC10 . java to ensure compatibility with
added a newline property to the SQL comment string in StringUtilsTest . java to improve code readability and maintainability by using a more descript
added default encoding and output encoding settings to TemplateEngineFreemarker and ApplicationControllerTest classes to ensure compatibility with newer Java versions and ensure compatibility with
replaced ByteArrayInputStream with byte array handling in CRDGeneratorTest . java to improve code readability and maintainability
changed the visibility of holdSamples and type from static to final in SampleSenderFactory . java to enhance encapsulation and improve code clarity
added a null check for the testngEmailableReporter property before adding a reporter to prevent potential NullPointerExceptions when the testngEmailableReporter is not
added quotes check in CommandLineBuilder and modified test assertions in CommandLineBuilderTest to ensure quotes are properly quoted and improve test coverage for quoted characters
changed access modifiers of the ` Clock ` interface from public to public in multiple classes to improve code readability and maintain consistency in naming conventions
added a call to setNumReduceTasks ( numFetchers ) in FreeGenerator . java to set the number of fetchers in the job
updated the ` getFieldValueFromObjectValue ` method to use ` getFieldDefinitions ( ) ` instead of ` getFieldValueFromObjectValue ( ) `
updated the file version from 505365 to 532077 in SaveService . java to reflect the new version of the file
added support for GL _ ARB _ texture _ float and GL _ ARB _ texture _ float extensions in FloatTextureData . java to enhance
added a synchronized method ` write ` and ` closeFile ` in ` FileServer . java ` and updated file handling in ` FileServer . java
added null check for outputDirectory and dirName before setting outputDirectory to prevent potential NullPointerExceptions when outputDirectory is null
updated the ` getFuture ` method to use ` PerfStatsCollector . getInstance ( ) ` instead of ` getFuture ( ) ` to improve
updated the method call from getCurrentJDKTool to getTestJDKTool in JMapHProfLargeHeapTest and JD
added a new enum ResourceErrorHandling . java for handling configuration errors to enhance error handling capabilities for configuration configurations
modified buffer position calculation in RAMInputStream and added a test for EOFException in TestRAMDirectory to ensure proper handling of EOFExceptions and ensure
updated error handling in DefaultServlet and JspServlet classes to include request URIs to enhance error handling by providing more context in error messages
updated ForkJoinWorkerThread to use a boolean parameter and added a new AccessControlContext class to enhance thread management and ensure proper access control context management
updated the ` CHECK _ EVERY _ N ` constant and modified the ` checkFreeMem ( ) ` method to use ` 0xFFFF `
[ hotfix ] [ test ] remove unnecessary initialization of hregion . openhregion ( )
added null check for currentSelectionArea before processing objects in CompatibilityEngine . java to avoid potential NullPointerExceptions when currentSelectionArea is null
added a new test method ` testJaasDemo ` in ` DemoModulesTests . java ` to ensure proper handling of Jaas demo
added a conditional check for spanX and spanY in CellLayout . java to ensure that spanX and spanY are not null to avoid potential
refactor CacheOffHeap class to improve code readability to enhance maintainability and maintainability of the code
added dependencies handling in CreateTable . java and a test for referenceLaterTable in TestCases . java to ensure that the table depends on another
added a check for XML gid values in TiledLoader . java to ensure proper handling of XML gid values in TiledLoader
added synchronization to the setWorkingSet method in InMemoryTileCache . java to ensure thread safety when accessing jobs
added a new Java file ` Solution . java ` with a Java file ` Solution . java ` to implement a method to account for 0 starting stone
added a new interface ` AddressChecker ` and modified ` TrackerRequestProcessor ` to use ` myAddressChecker ` instead of ` InetAddress . getByName
replaced direct calls to ` getTranslucentMovingBlock ( ) ` with ` getTranslucentMovingBlock ( ) ` in ` Forge
added a method to remove tag tags in GuiConfigEntries . java to enhance tag removal functionality by allowing tags to be removed
changed the type of ` thingTypeVersion ` from ` int ` to ` String ` in ` ModuleType ` and updated properties in ` Netat
added null check for recieptents before proceeding to avoid potential NullPointerExceptions when recieptents is null
added a method ` isSingle ` to check if the body class is a single parameter to improve code readability and maintainability by centralizing the
added a ` client ` parameter to ` DockerClientFactory ` and updated related methods in ` RemoteDockerImage ` and ` RemoteDockerImage ` to
added resourcesMode parameter to AndroidMetadata and updated related constructors to include resourcesMode parameter to enhance metadata management by allowing resources mode to be set for
replaced ` DateUtils . truncate ` with ` Calendar . getInstance ( ) ` in ` HistoricProcessInstanceQueryImpl . java ` to improve code readability
updated the import method call from ` gradleImporter . importProject ` to ` gradleImporter . importProjectCore ` in ` OpenAndroidModule . java
added error handling for CommandFailedException in LiquibaseCommandLine . java to ensure proper handling of CommandFailedException during execution
refactor TreeMap class to improve code organization to enhance maintainability and readability of the code
added methods ` isEnableAsyncStackTraces ` and ` setEnableAsyncStackTraces ` to ` CN ` and ` Display ` classes to enable
added a setter method ` setGlowColor ` to ` BubbleTextView ` and a method to set the background color in ` Folder ` to
added style classes for link , desc , and link , link , link , link , link , link , link , link , link , link ,
updated the return type from " java . lang . Short " to " java . lang . Short " in AbstractJdbc2ResultSetMetaDataTest . java
removed redundant code from Lucene40LiveDocsFormat and SimpleTextLiveDocsFormat to simplify code and improve readability by eliminating unnecessary code
added null check for _ info before checking if _ info is null to prevent potential NullPointerExceptions when _ info is not null
added a constructor to ShadowLocation with a provider parameter to facilitate instantiation of the ShadowLocation class
updated maxRAM calculation logic in LauncherPreferenceJavaFragment . java to check for deviceRMB less than 2048 to ensure that maxRAM is
refactor LocalMapStatsProvider and MapStatisticsAwareService to use ProxyService instead of LocalMapStatsImpl to improve code clarity and maintainability by
added logging for file existence and no file specified in FileProfileActivator . java to enhance logging capabilities for file activation checks
updated the method call from " noname1234 " to " invalid _ " in the addToBody method to improve clarity and correctness of the method
updated roles assignment in GuildImpl . java to use a set instead of a list to improve clarity and consistency in the code
updated the return value from 30 to MAX _ NUM _ UPLOADS _ SHOWN in ExpandableUploadListAdapter . java to ensure that
added unit tests for deleting user records in DashboardUserMapperTest . java to ensure correct behavior of delete operations in the database
refactor recipientIdentifier and primaryParticipantIdentifier parameters in InstructorFeedbackResultsPageData . java for consistency to improve code readability and maintainability
added method ` execute ` to ` LLVMDerefHandleGetReceiverNode ` , ` LLVMPointerStoreNode ` , and `
added a method to retrieve the buffer size in BufferedIndexOutput to provide functionality for retrieving the buffer size
added usage help help and descriptions for the Terasology launcher in the Terasology . java file to improve user experience by providing
refactor action bar title retrieval logic in DrawerActivity . java to improve readability and maintainability of the code
refactor CommandLineParserTest to improve code readability to enhance maintainability and maintainability of the codebase
added interpolators for all APPS and all APPS in QuickstepAtomicAnimationFactory and PortraitStatesTouchController to enhance animation flexibility by allowing
updated the return statement from ` Character : : toUpperCase ` to ` StringFromExternal ` in ` DefaultJavaLanguageNamer . java ` to improve
removed unused native methods for setFrame and release in CWrapper . java to streamline the code by eliminating unused native methods
added constant handling in Checker . java and created a new ValueTest . java file in ValueTest . java to improve code clarity and ensure constant
refactor MontgomeryMultiplyTest and TestMulAdd , TestMulAdd , and TestSquareToLen classes to improve code organization and maintainability
removed null check for constructors in PojoUtils . java to simplify code and improve readability
refactor JiraConfiguration class to improve code readability to enhance maintainability and maintainability of the code
updated error handling in UploadBuild . java for improved clarity to enhance code readability and maintainability
updated bounds calculations in DeviceProfile . java to use search bar top offset instead of 0 to improve flexibility in handling search bar positions
updated log messages in PulseAudioAudioSource , PulseAudioAudioAudioSource , and PulseaudioSimpleProtocolStream to handle idle timeouts
refactor OverviewCommandHelper to use runOnUiThread instead of runOnUiThread to improve code readability and maintainability by centralizing
removed the ` getSourceGroupOptional ( ) ` method from the ` AppleSource ` class to simplify the code and improve readability
updated the await timeout from 220000 to 90000 in TestSimTriggerIntegration . java to ensure correct wait time for triggerFiredLatch to
replaced outputPositionCount with positionCount in RunLengthEncodedBlock in FloatSelectiveStreamReader . java to improve code readability and maintainability
refactor conditional checks for bestSoFar and bestSoFar in AbstractNodeCostSearch . java to improve code readability and maintainability
added a conditional check for component type " Form " and " Dialog " in ResourceEditorView . java to ensure proper handling of UI component types
updated import statements in DragView , FloatingIconView , and FloatingIconView classes to use LauncherModel instead of UiThreadHelper to
added null check for commitPoint in ReplicationHandler . java to avoid potential NullPointerExceptions when the commitPoint is null
added unit tests for ` getImeiForSlot ` and ` setImei ` methods in ` ShadowTelephonyManagerTest ` to
refactor the debug method from ` debug ` to ` debugRequestEntity ` in ` SimpleHostRoutingFilter . java ` to improve code clarity and
added destory ( ) method to IndexSegment , BitmapInvertedIndex , BitmapInvertedIndex , BitmapInvertedIndex , and
added imports and modified setUp and setUp methods in NormalMessageSendAndRecvIT . java and added defaultMQAdminExt to ensure proper handling of
updated charset handling in StatVisualizer to use StandardCharsets instead of Charset to improve clarity and maintainability of charset handling
hbase - 14264 hregion . getbulkload ( ) should throw ioexception instead of multipleioexception
added a ` commission ` parameter to ` DefaultWithdrawFundsParams ` constructor and a constructor of ` DefaultWithdrawFundsParams
removed the import of StreamTerminator from AutoClosingReferenceStream . java to streamline the code by eliminating unnecessary dependencies
removed redundant ` MorphlineRuntimeException ` methods from ` LoadSolrBuilder ` , ` SolrLocator ` , and ` MorphlineRuntimeException ` to
added a check for the body before invokeing abstract overloaded methods in Java2TypeScriptTranslator . java to ensure proper handling of abstract overloaded
added stackless logging for file sessions in TestFileSessions . java to ensure proper logging of file sessions during testing
added serializable serialization for SQL data types in MutableColumnDataType and Entities classes to improve code clarity and ensure proper serialization of data types
refactor SubExactLConstantTest and SubExactLNonConstantTest classes to improve code organization and maintainability
added null checks for claimRequestString in ConnectOAuth2RequestFactory . java to improve robustness by avoiding potential NullPointerExceptions
updated the constructor of HiveFilterSetOpTransposeRule to use RelBuilderFactory instead of FilterFactory to improve flexibility and maintainability of the filter
replaced ` processTypeHintForNestedDocuments ` with ` processTypeHintForNestedDocuments ` in ` UpdateMapper ` and added unit tests
updated CoreAdminRequest to use CoreStatus instead of CoreAdminResponse to improve code readability and maintainability by centralizing core status retrieval logic
added a list of transformers and locators to the ModDirTransformerDiscoverer class to ensure proper initialization of transformers and locators
updated string concatenation in AbstractQuerydslProcessor . java to improve clarity to enhance readability and maintainability of the code
added a method ` getCallStack ( ) ` to the ` PEGraphDecoder ` class and updated its usage in ` PEGraphDecoder ` to
refactor RestTemplateBuilder to use copiedSetOf instead of setOf for consistency to improve code readability and maintainability
camel - 14263 : camel - mail : use identityhashcode ( ) instead of dumpmessage ( )
added null checks before setting the redelivery policy in ActiveMQConnectionFactory and PrefetchSubscription classes to prevent potential NullPointerExceptions when originalDestination is
added a call to setIsPropertyName ( ) in getIdentifierName ( ) to ensure proper handling of property names
added WaveGeneratorActivity and InstrumentsFragment to manage the coming soon activity to enhance the application ' s ability to generate the coming soon activity
added logging for null values and improved null checks in KeyedProperties . java and SheetOverlaysManager . java to ensure proper handling of null
added tests for log , log , and exec events in PodIT . java to ensure proper logging and logging of pods in the client
added a new test method ` testNoWriter ( ) ` to ` SolrCore . initIndex ` to ensure the ` slaveClient ` does not
added handling for dispatching method kernel Okra in GraalKernelTester . java to ensure proper handling of method kernel responses
refactor DefaultDnsClient and MxRecord classes to implement Comparable < MxRecord > to improve clarity and maintainability of record comparison logic
refactor thread creation in XToolkit . java to use a doPrivileged method to improve code readability and maintainability by centralizing thread management
added validation for the SelectBox dropdown in UITest . java to ensure that the dropdown is selected on Linux 6
replaced ` throw new IllegalStateException ` with ` Collector . printStackTrace ( e ) ` in ` JobGlobalListener . java ` to improve error handling by
added a parentSplit parameter to the createState method in FlowBuilder and adjusted state creation logic in SplitState to enhance state management by providing a parent
changed the visibility of the connectionState variable from private to volatile in SSLSocketImpl . java to ensure thread safety and prevent potential memory leaks
updated the default polling period from 10 to 1000 in AbstractPollingEndpoint . java and added a periodic trigger property in EnableIntegrationTests . java to improve
replaced ` malloc ` with ` malloc ` and ` nmalloc ` in ` MemoryStack ` , ` MemoryUtil ` , and ` Memory
added exception handling for IOException and DocletAbortException in HtmlDoclet , AbstractDoclet , and AbstractDoclet classes to improve error handling and
added null checks for parentClassOrInterface and parentEnum in UnusedModifierRule . java to enhance code robustness by preventing potential NullPointerExceptions
replaced ` interceptor - > interceptors . ifAvailable ( ) ` with ` : : add ( ) ` in multiple classes to improve code clarity and
updated the Parameterized parameter name from " ssl = { 0 } " to " ssl = { 0 } " in AbstractHttpClientServerTest . java to
updated transformation handling in TransformationHelper . java to handle IllegalFormatException to improve error handling and ensure proper logging of transformation transformation errors
replace userPermissions with activeConnectionPermissions in ActiveConnectionRESTService . java to improve code readability and maintainability
updated Point . java to include EqualsBuilder in Point . java to improve code readability and maintainability
added null check for outputRoot before processing files to avoid potential NullPointerExceptions when outputRoot is null
pdfbox - 4072 : add annotationfilter to pdfpage , pdfrenderer , pdfrenderer , pdfrenderer , pdfview , pdfbox , pdf
refactor StackTraceCleaner class to improve code readability to enhance maintainability and maintainability of the code
added handling for CSS , js , css , css , css , css , css , and js files in PluginServlet . java to enhance content type
hhh - 13232 skip sqlliteral test for oracle8i and sqlserverdialect
updated the upgrade method from ` slot ` to ` slotSize ` in ` ForkController . java ` and added null check for ` stats `
added ` getStats ( ) ` methods to ` AbstractDataImportHandlerTest ` , ` ContextImpl ` , and ` DocImpl ` classes to
kristianrossiang : use longpolling timeout instead of timeout
updated gesture handling in PagedView , BaseOverview , and LauncherInstrumentation classes to utilize AccessibilityManagerCompat for improved scroll handling to enhance
replaced ` unlocks ` with ` unlocks ` in ` UI . java ` and added a button for unlocks in ` PausedDialog `
added a call to clear drops in PlayerEventListener . java to ensure proper handling of drop events
added a static final String DEFAULT _ PARAM to the StreamResult class to provide a default value for the input name in the output stream
updated import statements in AttributeNormalizerTest . java for clarity to improve code readability and maintainability
updated print statements in TsFileSketchTool and LocalTsFileInput classes to improve clarity and maintainability of the code
added headersToExclude field to UmbrellaHeader and modified test assertions in ProjectGeneratorTest to improve header handling and ensure proper handling of Swift
updated the method signature from ` onHttpError ` to ` onHttpHeaderError ` in ` GrizzlyAsyncHttpProvider . java ` to
added encode ( ) method in RequestPlugin . java to ensure proper encoding of request plugins
added support for DB - related expressions in RolapNativeSql and RolapNativeTopCount classes to enhance SQL query handling and ensure proper handling of
added a check for null and empty passwords in LdapAuthenticationProviderImpl and created a new TestLdapAuthenticationProviderImpl class to ensure that LDAP user
replace Long . toString ( number ) with String . toString ( generation ) in COSObjectKey . java to improve code readability and maintainability
added handling for complexWriters in ProjectRecordBatch . java to ensure proper cleanup of complexWriters
added @ SuppressWarnings ( " serial " ) annotations to multiple cache classes to suppress warnings and improve code clarity
changed the visibility of ClassGraphClassLoader from public to public in ClassGraphClassLoader . java to improve code clarity and prevent potential NullPointerExceptions
added a check for empty schema errors in ErrorResponseException . java to ensure proper handling of empty schema errors
added a constructor to EventSourcingRepository that accepts a snapshotTriggerDefinition and a RepositoryProvider to facilitate the instantiation of EventSourcingEvent
refactor binary node handling to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor text handling in SearchedPeopleCursorAdapter and QustomDialogBuilder to improve clarity and consistency to enhance code readability and
refactor NuvoConnector and NuvoHandler to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated the value of planarConfiguration to use TIFFBaseline . PLANARCONFIG _ CHUNKY instead of TIFFExtension . PLAN
added a call to ` is . close ( ) ` in ` ItemListTag . java ` to ensure proper resource management and prevent resource leaks
added a new class ` AverageUtil ` and updated ` TileLaserTableBase ` and ` TileLaserTableBase ` classes to
added new classes ` SigInt ` , ` SigIntBarrier ` , and ` SigIntBarrier ` , and ` SigInt
refactor edge handling in ExporterGEXF . java to improve clarity and maintainability to enhance code readability and maintainability by centralizing
replaced byte array with Text in TCTLSeparatedProtocol . java to improve code readability and maintainability by using a more descriptive
added a constructor to initialize rubric descriptions in FeedbackRubricQuestionDetails and updated related test cases in FeedbackResponseDetailsTest to
replaced DB2Database with ORIGINAL _ CASE comparison in CatalogComparator . java to improve clarity and consistency in schema comparison logic
refactor BrowserMobProxyTest to use closePreviousWebdriver and startBrowserMobProxyServer instead of setUp and tearDown to improve test reliability and ensure
updated criticalErrors format in ModelRepositoryImpl . java to use Integer . toString ( diagnostic . getLine ( ) instead of String . toString ( ) to
removed redundant calls to mTextWatcher . reset ( ) in InPlaceEditView . java to improve code readability and maintainability
updated InternalByteArray and TruffleString classes to improve performance to enhance performance and maintainability of the codebase
[ hotfix ] [ flink - flink ] [ table - common ] [ graph - flink ] [ graph - common ] [ graph
refactor multiple assertion classes to improve code organization to enhance maintainability and readability of the codebase
updated ClassA \ 314 \ 201 . java and added a new DiacriticTest . java file for Mac OS X to ensure
replace CountDownLatch with CyclicBarrier in ClusterMembershipTest . java and add a new method ` assertExecutionsDone ` in ` ClusterMembershipTest . java `
added exception handling for workspace readers in DefaultMaven . java and updated related logic in DefaultGraphBuilder . java to improve error handling and ensure proper handling
updated ssl scheme handling in ServiceRegistryConfig and added tests for IP ports in TestServiceRegistryConfig to ensure proper handling of IPv6 and IPv6
refactor Mockito class to improve code readability to enhance maintainability and maintainability of the code
updated the constructor signature of Jdbc3Connection from ` getHostSpecs ` to ` getHostSpecs ` in ` Jdbc3Connection . java ` to
added a synchronized method ` ensureInstance ( ) ` to ` ServletHolder ` and modified the ` ensureInstance ( ) ` method to improve thread safety
added logging for delta server time in BinanceExchange and BinanceBaseService classes to enhance logging capabilities and improve logging clarity
added a condition to check for nonstop servlets in Tomcat85ContainerAdapter and Tomcat90ContainerAdapter to ensure proper handling of Servlets
added null check for the Form instance before deregistering animated to prevent potential NullPointerExceptions when the form is not initialized
updated the ` decodeResource ` method to accept ` options ` instead of ` new BitmapFactory . Options ` and modified the ` decodeResource ` method
added a constant for NUMBER _ OF _ MESSAGES and updated subscription handling in ExamplePublisher and RateSubscriber classes to improve code readability and maintainability
refactor TimelineArrayAdapter to use LinkifyText for better readability and maintainability to improve code readability and maintainability by centralizing
updated the list of supported parameters in PostgresDatabase and NumberType classes to include additional parameters to enhance functionality by allowing parameters to be set based on
refactor ` EntryProcessorBouncingNodesTest ` to use ` final ` for better readability and maintainability to improve code clarity and maintainability
updated state checks to use isRemovableState ( ) instead of isHardDeletableState ( ) in AmbariManagementController
added null check for the thingRegistry in CreateBridgeServlet and updated exception handling in CreateBridgeServletTest to improve robustness by preventing potential NullPointerException
refactor ` PreconditionEnforcer ` and ` CrawlServer ` to use ` synchronized ` instead of ` server ` in ` CrawlServer ` to
added null checks for getDisplayName ( ) in multiple classes to prevent potential NullPointerExceptions when getDisplayName ( ) is null
added a default shader parameter to the SpriteBatch constructor and updated related constructors to accept a ShaderProgram parameter to enhance flexibility in shader creation by
added properties to set the ` options ` property for ` on ` in ` TestUtil . java ` to ensure proper handling of the ` on `
added element type conversion logic in SortedSetTypeCoercer and updated related tests in TypeCoercerTest to improve element handling and ensure
refactor message string handling in RemoveFileDialogFragment and RemoveFilesDialogFragment to simplify code and improve readability to enhance maintainability and maintainability of the
added a check for 256 byte values in URLPathEncoder . java to ensure compatibility with 256 byte values
added a port parameter to the InetSocketAddress and updated the registration logic in UserContext . java to improve user experience by ensuring the address address is correctly
removed unnecessary assertions in HostResourceProviderTest . java to improve code readability and maintainability
removed the ` log ` parameter from the ` loadConfiguration ` method in multiple classes to simplify the method signature and improve readability
refactor SIPCommFrame to use init ( ) methods for improved code readability to enhance maintainability and maintainability of the code
removed the ShadowHtml class and updated its usage in RobolectricBase . java and HtmlTest . java to streamline the codebase by
added a new class ` StarTreeRecordStoreFactoryBlackHoleImpl ` to implement the ` StarTreeRecordStoreFactoryBlackHoleImpl ` class to
updated logger initialization in HttpClientLoadTest . java to use H3 and quic loggers instead of loggers to improve logging clarity and maintainability
changed the visibility of the addListeners method from private to private in MockSettingsImpl and added a new test for listener validation in MockSettingsImplTest
refactor StateHandleStore class to improve code readability to enhance maintainability and maintainability of the code
updated import statements from ` org . eclipse . jetty . util . security . Constraint ` to ` org . eclipse . jetty . http . security `
refactor section assignment logic to use Const . DEFAULT _ SECTION instead of " None " to improve code clarity and maintainability by centralizing section
refactor error handling in JMeterUtils . java to use try - with - resources for resource loading to improve code readability and maintainability by
camel - 1145 : add a test to check if the port be not available
added BuildTarget parameter to multiple classes to enhance the functionality of library parameters in the build process
removed the # validating - cerficates link from TrustEverythingTrustManager . java to improve code readability and maintainability
removed the ` getPageSizeVal ` method from the ` ListCapacityCmd ` class to simplify the code by eliminating unnecessary logic
added a case CLOSED in the IteratingCallback class to handle CLOSED cases to ensure proper handling of CLOSED events
added a boolean flag ` isAuthorized ` to ` AccessControlContext ` and updated related methods in ` AccessController ` , ` ProtectionDomain ` , and
refactor exception handling in OSGiDeployer to check for AbstractOSGiApp instead of Exception to improve code readability and maintainability
added handling for " tiff " and " tiff " MIME type in DLNAMediaInfo . java to ensure proper handling of MIME type
refactor OptimizedCallTarget to use a new OptimizedAssumption array to improve code readability and maintainability by centralizing
added a new file ` CubocDesktop . java ` and updated ` MapRenderer . java ` to use ` LwjglApplication `
updated file names from " monitor - test - 1 " to " target - all - permission . policy " in PolicyMonitorTest . java to ensure
added a call to ` trashbinListAdapter . removeAllFiles ( ) ` in ` TrashbinActivity . java ` to ensure proper cleanup of
updated the method call from ` org . eclipse . jdi . Bootstrap . allConnectors ( ) ` to ` com . sun . jdi
refactor ` execute ` method in ` LLVMCheckGlobalVariableStorageNode ` and ` Runner ` classes to improve code readability and
added intent handling to the createLauncherEvent method in UserEventDispatcher . java to enhance user event handling by allowing intent to be passed to the user
added a constant MAX _ BURN _ TARGET _ LOWER _ FLOOR to the BurningManPresentationService to ensure that the max
refactor UniqueConstraintSnapshotGeneratorSnowflake and UniqueConstraintSnapshotGeneratorSnowflake to use H2Database instead of Schema to improve
added a check for empty named values in DMLTransformer . java to ensure proper handling of empty named values from DUAL statements
updated import statements in ServiceValidateControllerTests . java to use ` https : / / www . github . com ` instead of ` http : /
added a boolean parameter ` isStatement ` to the ` getDefaultValidFunctionName ` method and modified the ` hideDefaultName ` method to accept a `
refactor JarLauncher class to improve code readability to enhance maintainability and maintainability of the code
changed the type of ` results ` and ` contextHolder ` from ` BlockingQueue ` to ` Collection < Throwable > ` in multiple classes to enhance type
updated DeviceConfiguration and OperationSetVideoTelephonyJabberImpl to include a Dimension parameter and added a check for CallPeerJab
added a new test method ` testUpdateWithPGobject ` to ` ResultSetTest . java ` to ensure proper functionality of the ` PGobject `
updated password reset logic in PasswordResetEndpoints . java and added a new test for password reset functionality in PasswordResetEndpointsTest . java to improve code
updated the method call from ` getChildNodes ( ) . item ( 1 ) . item ( 1 ) ` to ` getDocumentElement ( ) ` to ensure
refactor Cache class to improve code readability to enhance maintainability and maintainability of the code
updated variable names from ` timeInSec ` to ` prevTimeMillis ` in ` Isochrone . java ` and ` SPTResource
added a check for a valid binding in the TileLightRelay class to ensure that the light relay is only processed when the binding is valid
added a new ` Chainer ` class and updated ` CollectionSubject ` and ` CollectionSubject ` to use ` Chainer < CollectionSubject < T
refactor Model class for improved readability to enhance maintainability and readability of the model class
updated the recordedTime calculation in Locations . java to increase the time of the recordedTime variable to ensure accurate calculation of the recordedTime variable
added a check to resize the status status if the terminal type is WINDOWS to ensure that the status status is resized when the terminal type is not
added a condition to check if the host version state is not NOT _ REQUIRED before setting all host versions to ensure that all host versions are set
updated test paths in IntegrationTestCase and JsInteropRestrictionsCheckerTest to use JRE _ PATH instead of JSINTEROP _ PATH to
updated import statements to use LinkedHashSet instead of HashMap to improve code clarity and maintainability by using a more descriptive variable name
removed exception handling in OperationServiceImpl . java to simplify error handling and improve code readability
updated the method call from ` PluginHelper . getConfigurerResolver ( econtext ) ` to ` resolvePropertyConfigurer ( econtext ) ` to improve
updated the executor name from " commitlog _ archiver " to " CommitLogArchiver " in CommitLogArchiver . java to improve clarity
added connect ( ) and connect ( ) methods in CloudSolrClient and TestCloudSolrClientConnections classes to ensure proper handling of configuration uploads to
added synchronization to multiple bindings in Breakpoint . java , DebuggerSession . java , and DebuggerSession . java to ensure thread safety and ensure thread safety
refactor file handling in RobolectricTestRunner and ShadowContext classes to improve code readability and maintainability
added imports for LinkedHashSet and TreeMap in SecureXStream . java and updated getStyles ( ) tests in XStreamPersisterTest . java to ensure
added a new method ` withKModuleModel ` to ` InternalKieBuilder ` and modified ` KieHelper ` to use ` InternalKie
added conditional checks for Farmland and Farmland fields in BlockEventListener . java to ensure proper handling of Farmland fields in the plot
added a default method ` getLocalIp ( ) ` to ` FinishedSpan . java ` to provide a default implementation of ` getLocalIp ( )
updated executionContext in JdbcStepExecutionDao and updated test cases in StatefulRetryStepFactoryBeanTests to improve error handling and ensure correct handling of
updated number of words from            
updated python . java to include " libs " and " libs " in tensorflow . java and added preloadresource in tensorflow . java
refactor ` PluginTab ` to use ` ArrayList < DownloadPlugins > ` instead of ` ArrayList < DownloadPlugins > ` to improve code readability
updated logging statements in DefaultHistory . java to use warn instead of debug to improve clarity and consistency in logging messages
added a null check for the hyper host datacenter in VmwareStorageProcessor to prevent potential NullPointerExceptions when the hyper host datacenter is
changed the stop method from ` stop ( ) ` to ` stop ( true ) ` in ` SftpServerTestSupport . java ` to ensure
refactor ExperimentalMockitoJUnitRunner to improve code readability to enhance maintainability and maintainability of the code
updated GpsSettingsActivity and Session classes to use GetBuildSerial instead of Build . SERIAL to ensure compatibility with newer Android versions and improve
refactor SwapGBuffers class to improve code readability to enhance maintainability and maintainability of the code
added null checks for spatial and skeletonControl in AnimControl . java to improve robustness by preventing potential NullPointerExceptions
added a new method ` setSmartReplies ` to ` ShadowRankingTest ` and updated corresponding imports in ` ShadowRanking ` to
updated the handling of segment files in ArchiveConductor . java to improve clarity and consistency to enhance readability and maintainability of the code
updated the variable name from ` getConfigDir ( ) ` to ` getConfigDir ( ) ` in ` CarrotClusteringEngine . java ` to
added a null check for testRect in WindowsTreeUI . java and created a new bug8004298 . java file to handle null testRects
updated ` buildStdArgs ` and ` buildStdArgs ` to ` buildStdArgs ` and ` buildStdArgs ` in ` ScriptUtils `
added exception handling for column vector loading in RecommenderMapper , Retriever , and CacheTest to improve error handling and ensure proper handling of null
added a setup method for ClientInfo in SurrogateAuthenticationEventListenerTests . java to ensure proper handling of client information in the test
added a boolean variable ` isUserView ` to ` CardPresenter . java ` to reset the user view state to ensure that the user view is
replaced ` DiagramRenderer . isGraphvizJavaAvailable ` with ` GraphvizUtility . isGraphvizJavaAvailable ` across multiple
refactor metric retrieval in LogDispatcherThreadMetrics . java to improve code readability and maintainability
added a new module - info . java file for sqlite module dependencies to ensure proper dependencies are required for the sqlite connector
added a Thread . sleep ( 500 ) to StreamResetTest . java to ensure thread safety during test execution
removed the conditional check for " api " configuration in the PermissionsManager initialization to simplify the code and improve readability
refactor DateParser and TestDateParser classes for improved readability to enhance maintainability and maintainability of the code
added a method ` getDepth ( Context context ) ` to the ` SpringLoadedState ` class to provide a way to calculate the depth of the
refactor BinaryDecoder to use Arrays . copyOfRange instead of System . arraycopy to improve code readability and maintainability
refactor ExecutionGraph class to improve code readability to enhance maintainability and maintainability of the code
refactor notification handling in NotificationActivity and NotificationRenderer classes to improve code readability and maintainability
updated exception handling in DefaultExceptionConverter and EndpointTest to handle null invocations to improve robustness by preventing potential NullPointerExceptions
added a ` setLock ` method to ` GlowContainer ` and updated related methods to use ` Optional ` instead of ` Setter ` to improve
updated method calls in ProxyMaker . java to use reflect . Method instead of MethodHandle to improve clarity and maintainability of the code
removed unnecessary casting of ` int ` to ` Integer ` in ` MathTest . java ` to simplify type casting and improve code clarity
removed unnecessary casting of " metrics " and " datasets " in BaseEmailContentFormatter . java to simplify code by eliminating unnecessary casting
refactor layout panel visibility logic in LayoutPanel . java to improve code readability and maintainability to enhance maintainability and maintainability of the layout
added null checks for the dead server location in ServerCallable . java to prevent potential NullPointerExceptions during server execution
refactor multiple BuilderFactory and Pipeline classes to improve code organization to enhance maintainability and readability of the codebase
added a null check for the key parameters before generating public keys in BasicChecker . java to prevent potential NullPointerExceptions when key parameters are missing
refactor MediaTypeRequestMatcher to use a private method to handle ignored MediaTypes instead of contains to improve code readability and maintainability by centralizing
updated logging statements in LlapBaseInputFormat to use taskAttemptId instead of job . get ( MRJobConfig . TASK _ ATTEMP
added spring . main . allow - bean - definition - overriding property to EventServiceTests . java to allow bean - definition - overriding by default
added a null check before closing the indexReader in DeleteDuplicates . java to avoid potential NullPointerExceptions when indexReader is null
updated package names from ` BTCMarketsStreamingService ` to ` BTCMarketsStreamingMarketDataService ` across multiple files to improve clarity and
added a new test method ` issue151 ` in ` FencedCodeBlockParserTest . java ` to verify the rendering of ` BR
added a new file ` CompatibilityTest . java ` to test the implementation of the ` Compatibility . xml ` to ensure proper handling of property
added new classes ` PushComponentsModule ` , ` PushUtils ` , ` PushUtils ` , ` PushUtils ` , and ` SecurityUtils `
updated the number of replicas from ` numCurrentReplicas ` to ` numTargetReplicas ` in ` TableRebalancer . java `
update version numbers from " 2 . 6 . 1 " to " 2 . 7 . 0 " in ExoPlayerLibraryInfo . java to reflect
updated XMLLayoutTest and ExtendedThrowablePatternConverterTest to use System . getProperty ( " line . separator " ) instead of System . getProperty ( "
added socket timeout handling in AjpAprProcessor . java to handle socket timeouts to ensure proper handling of socket timeouts during processing
updated the ` friction ` and ` restitution ` values from ` friction ` to ` restitution ` and ` density ` in ` 
replaced ` fetchSaclingFactors ` with ` fetchScalingFactors ` across multiple classes to improve clarity and consistency in the anomaly
added a try - catch block to execute the shell command in LauncherInstrumentation . java to improve code readability and maintainability
added unit tests for font and link tags in ResourcesTest and ResStringPool to ensure correct handling of font and link tags in the resource pool
updated the path for GuiStatsComponent in GuiStatsComponent . java to ensure compatibility with the latest GuiStatsComponent class
added permission handling for pending add items in Launcher . java to enhance user experience by providing feedback when no phone permission is available
updated the return value from 32 to 36 in SimulationPanel , PlotDialog , BasicEventSimulationEngine , and BasicEventSimulationEngine classes to improve
updated GeoPointDistanceQuery , GeoPointInBBoxQuery , GeoPointInPolygonQuery , and GeoPointInPolygonQuery classes to improve code
added a method ` isDockerAvailable ( ) ` to ` DockerClientFactory ` to check if the Docker client is not available to ensure that the
removed the VPX constant from CodecTypes . java to streamline the code by eliminating unnecessary initialization
added a command to set the coordinator address in the DistBuildFactory and DistRunCommand classes to enhance configuration for the remote coordinator thrift server
added a static method ` match ` in ` FsUtils ` , ` WrapTimer ` , and ` WrapTimer ` classes to handle path matcher
added a condition to check if the value is greater than zero before adding a label to the labelValues to ensure that the labelValues are only added
added null check for result before processing to avoid potential NullPointerExceptions when result is null
removed the @ Test annotation from TestPerfBenchMarkDriver . java to streamline the code and improve readability
added materialization time setting in ObjectStore and created a test for update creation metadata in TestObjectStore to ensure proper handling of creation metadata updates in
added exception handling for UnsatisfiedLinkError in VoskSTTService . java to improve error reporting for missing native dependencies
added a property to remove the ONE _ WAY property in JMSSamplerGui and modified message formatting in JMSSampler to improve code clarity
updated conditional logic in GlyphView . java to use GoodBreakWeight instead of GoodBreakWeight to improve code readability and maintainability
refactor synchronization logic in RCFile . java to improve readability and maintainability of the code to enhance code readability and maintainability by
removed the @ AwaitsFix annotation from AutoAddReplicasPlanActionTest . java to improve code clarity and maintainability
replaced ` steps ` with ` unwound ` in ` ToePool . java ` and added a new ` LinkedList < String > ` to
updated method signatures in ClipboardTransferable , DataTransferer , and DataTransferer classes to improve code readability and maintainability
added a random - free port parameter to the command line in TestThriftServerCmdLine . java to ensure that the command prints the correct port
added a check for ` atEOF ( ) ` in ` RegExpScanner . java ` to return false if the ` atEOF ( ) ` is
added a static variable ` enabledMetrics ` and ` enabledTimers ` to the ` Debug ` class to ensure proper handling of metrics and timers
added null check for multiUserChat . getNickname ( ) in ChatRoomJabberImpl . java to avoid potential NullPointerExceptions
added null checks for filename and length in PApplet . java to prevent potential NullPointerExceptions when filename is null
refactor refreshToken creation logic in DefaultOAuth2ProviderTokenService to use createRefreshToken method to improve code readability and maintainability by centralizing the
updated error message formatting in BuckConfig . java to improve clarity and maintainability of error messages
removed the ` jobGraph ` field from ` YarnFlinkApplicationMasterRunner . java ` to simplify the code and improve readability by eliminating
added a synchronized method ` nativeGetHardwareBuffer ( ) ` to ` ShadowNativeImageReaderSurfaceImage . java ` to ensure that the native method
added SSL URI to BTCChinaMarketDataService initialization in BTCChinaExchange . java to ensure proper SSL URI handling for BTCChina exchanges
replaced BufferedWriter with a method to retrieve the file path based on the project ' s base directory to improve code readability and maintainability by using a
added new classes ` OauthController ` , ` Oauth2PluginTest ` , and ` Oauth2PluginTest ` , and ` O
refactor SemgrexPattern class for improved readability to enhance maintainability and maintainability of the code
refactor ` AbstractStreamEx ` , ` StreamEx ` , ` StreamEx ` , ` StreamEx ` , ` StreamEx ` , and
updated error logging and added exception handling in RestCodec and ExceptionToProducerResponseConverters to improve error handling and ensure proper exception handling during operation operations
updated the shouldComeFromThisClassLoader check to include " specs2 " and " scala . " in RobolectricClassLoader . java to
added a condition to check if the transmittable audio encoding is not contained to ensure that the transmittable audio encodings are only processed when it is
updated ` CreateTableGenerator ` to use ` DatabaseFunction ` instead of ` SequenceNextValueFunction ` and added a new test for ` DatabaseFunction
added tests for station3Gml31 and station3Gml32 in NormalizedMultiValuesTest . java to ensure correct handling of station coordinates
added a boolean flag ` wasInvoked ` to ` NetworkTestUtils ` and updated http proxy handling in ` UaaHttpRequestUtilsTest ` to
added a condition to check if the processor isConfigured ( ) and modified regex processing logic in ColumnarDataSource , RowProcessor , and RowProcessor to
updated ` splitIntoThirtyParts ` and ` getPositionsArraySize ` methods to use ` SEEK _ LENGTH ` instead of `
added new classes XLCDCommunicator , XLCDCommunicator , XLCDController , XLCDController , XLCDController , and XL
updated import statements and refactored schema loading in KieModuleMarshaller . java to improve code readability and maintainability by centralizing schema loading logic
updated condition checks for retry times in EventQuery and EventQuery002 classes to ensure retry times are non - negative to ensure that retry times are
replaced ` awaitThreadState ` with ` join ` in ` WorkerProcessPoolTest . java ` to simplify thread state handling and improve code readability
refactor DelegatingMethod to use hashCode ( ) and add a new DelegatingMethodTest class to improve code clarity and maintainability by centralizing
updated constant values for FREEZE _ V2 , UNFREEZE _ V2 , and WITHDRAW _ EXPIRE _
replaced the ` pid . waitFor ( ) ` method with a ` ConfigurationException ` method in ` DownloadPlugins . java ` to improve error handling by
removed the SpringTransactionHooks class from the SpringTransactionHooks . java file to simplify the codebase by eliminating unnecessary dependencies
refactor AbstractClassAssert class to improve code readability to enhance maintainability and maintainability of the code
added a new file ` GetUninitializedStringValue . java ` that tests the ` GetUninitializedStringValue ` class to implement a test for
added providedDepsBuilder and updated dependency resolution logic in AndroidLibraryDescription and GraphEnhancementQueryEnvironment to enhance dependency resolution and improve dependency resolution logic
added a new BooleanFlag for ENABLE _ KEYBOARD _ TRANSITION _ SYNC in FeatureFlags . java to enable enabling animations
replaced the variable ` sSavedBugreport ` with a static boolean variable ` sSavedBugreport ` to improve code readability and maintainability by
added a constant CINEPACK from " cinepack " to " cinepack " in FormatConfiguration . java and updated format assignment in Lib
refactor hand movement animation handling in Player . java to improve code readability and maintainability to enhance maintainability and maintainability of hand movement animation
replace data . describe ( ) with digest . toString ( ) in GrpcCasBlobUploader . java to improve readability and maintainability of
removed the HSQLDBServerFilesFilter class and updated its implementation in TestUtility . java to simplify the code and improve readability by eliminating unnecessary
added a null check for restoreFromSeed and restoreFromKey in WalletAppKit . java to prevent potential NullPointerExceptions when restoreFromSeed
updated the method call from ` getApiDataVideoVersion ( ) ` to ` getApiDataSeriesVersion ( ) ` in ` MediaTableTV
added a method ` visitMethodInvocation ` to handle type creation in ` HasTypes ` to ensure proper handling of type creation in the method invocation
refactor AmbientCubemap to use a constant NUM _ VALUES instead of 6 * 3 to improve code readability and maintainability by centralizing
added functionality to display the mode reset message in MethodsFeature and ObjectsFeature classes to improve user experience by providing clearer feedback when the mode
added checks for negative masked numbers in multiple mask classes to ensure proper handling of negative numbers in the masking process
refactored ` BoundedOverheadBlockStoreTest ` and ` DerbyBlockStoreTest ` to use ` TemporaryFolder ` instead of `
added isItemStackDamageable ( ) and getHasSubtypes ( ) methods to the ItemStack class to ensure proper handling of item damage
added a new ` LineState ` class and modified ` LineState ` constructor to use ` OptionalDouble ` instead of ` alpha ` to improve code
updated the preference setting for the browser startup page in FirefoxProfile and FirefoxDriverTest to ensure proper handling of the browser ' s startup page
added a condition to check the upgrade status code in Http1xClientConnection . java to ensure proper handling of upgrade requests for HTTP requests
updated the task name from " compile " to " process - classes " in JoobyMojo . java to improve clarity of the task ' s
removed the shutdown method from HTTPHC4Impl . java to ensure proper resource management and prevent potential memory leaks
added a check for aggregate function suffix in the AmbariMetaInfo class to ensure proper handling of aggregate function suffixes when the aggregate function suffix
added a new method ` setFullscreenParams ( fullscreenParams ) ` to ` TaskOverlayFactory ` , ` TaskThumbnailView ` , and `
added a new file ` Solution ` with a Java class ` Solution ` that prints the frequencies in the application to provide a solution for
changed SocketChannel initialization from ` ch1 ` to ` null ` in ` ClusteredAgentManagerImpl . java ` to ensure proper initialization of SocketChannel
refactor MutisignOperationerGodicTest . java to improve code readability and maintainability
added exception handling for NoSuchElementException in StaxEventItemReader and added a test for restarting at the end of file to ensure proper handling of
updated import statements and added null checks for qualified resource names in ShadowTextView and TestAttributeSet classes to improve code robustness and ensure proper handling of null
replaced ` com . nimbusds . jose . shaded . json . JSONArray ` with ` net . minidev . json `
updated OS . java to include " AIX " and modified family assignment in PKCS11Test . java to ensure compatibility with the new OS
replace ` router . getPrivateIpAddress ( ) ` with ` router . getRouterControlIp ( router . getId ( ) ` in ` VirtualNetwork
added a method ` invokeWithoutBlockingWithResultSync ` to ` CN ` to provide a way to invoke the ` invokeWithoutBlockingWithResult
deleted the PresenceMessageComboTests . java file to remove unused PresenceMessageComboTests . java to streamline the codebase
updated calculation calculations in PortraitPagedViewHandler . java to use Math . round instead of Math . round to improve accuracy and accuracy of drawing
updated method calls in TestClusterDumper . java for consistency to improve code readability and maintainability
updated the method to align class sizes in KeyValue . java to improve performance by aligning class sizes with expected data sizes
camel - 14263 : camel - core - add type converter to default camel context
added conditional task dispatching logic in SparkCrossProductCheck . java to ensure proper handling of conditional task execution
refactor action handling in multiple classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
added support for JSON response in LoginInfoEndpoint and updated test cases in LoginInfoEndpointTests to enhance JSON response handling and ensure correct functionality of authentication
added a method ` toDescriptiveString ( ) ` to return a string representation of the region name in ` AssignmentManager . java `
changed message and result parameters from message to result in HuobiAccountInfo and HuobiAccountServiceRaw classes to improve clarity and consistency in
added support for " PERIOD " in MariaDBDatabase and a test for adding a period column in AddColumnGeneratorTest to ensure proper handling of
[ beam - 16386 ] [ beam - java ] add support for external transforms in portablepipelineoptions . java
added support for Launcher shortcuts in VersionChangeLogs . java to enhance user experience by providing clearer feedback during dictionary loading
updated NUM _ MILLIS _ IN _ DAY constant from private to public and added a new constant NUM _ MILLIS _ IN _ DAY to improve
removed system . out . println ( ) from ImageResourceLoader . java to clean up the code and improve readability
refactor the invocation logic in multiple classes to improve clarity and consistency to enhance code readability and maintainability by reducing duplication
updated validation logic in Attr . java and added a new NoWarnOnImplicitParams . java file with a new class NoWarnOnImplicitParams .
refactor menu menu handling in FileMenuFilter and FileDetailFragment to improve code readability and maintainability
added reserved0 , reserved3 , credit , payment , and payment types to BTCETransHistoryResult . java and BTCETransHistoryTest .
replaced ArrayList with HashSet for consistency in RetryFilterFunctions . java to improve code readability and maintainability
added @ Deprecated annotation to PluginLoader class to deprecate plugin loading functionality
updated condition checks in LastQueryExecutor . java and added a new test for lastWithUnseqTimeLargerThanSeqTimeTest . java to
updated the end of the string appending in the request string to improve code readability and maintainability
added a static variable ` error ` in ` BuildImageMojo . java ` to set the log level to error to ensure that the log level is
added a method to set the safe area of the title bar in Sheet . java to ensure the title bar is displayed when the title bar is
updated loop condition in OverflowSeriesImpl . java to remove unnecessary loops to improve readability and maintainability of the loop logic
added support for SQL parsing and deparsed in AlterTest . java to ensure proper handling of SQL queries in the database
changed the access modifier of the copyState method from public to public to allow access to the copyState method from other
fixed - redissonexecutor . executecallable should use completableFuture ( ) . tocompletableFuture ( ) . tocompletableFuture ( ) .
added a constant for SUFFIX _ SPLIT _ FILE and updated file name handling in FileLister and FileSystemSplit to improve code readability and
refactor multiple OrcBatchReader , OrcRowInputFormat , OrcTableSource , OrcTableSource , OrcRowInputFormat , and
refactor conditional checks for valueArg in CompareFunctionsProcessor . java to improve code readability and maintainability
updated the ` reduceScopeForLimitedSpace ` method to accept a ` expectedSize ` parameter and modified the ` checkAvailableDiskSpace ` method
removed multiple toString methods from SegmentTermVector , TermFreqVector , and QueryTermVector classes to streamline code and improve readability
added a check to remove task stack listener in AbsSwipeUpHandler and updated TaskAnimationManager to ensure task stack listener is not unregistered when the
added a ` getLockTimestamp ` method to ` AppPreferences ` , ` PreferenceManager ` , and updated the ` setLockTimestamp ` method to
added a method to retrieve the artist from the current audio track to improve user experience by providing a more descriptive artist string
added a null check for remoteMessage in NCFirebaseMessagingService . java to avoid potential NullPointerExceptions when remoteMessage is null
added null checks for splitInfo and modified condition checks in SplitText . java and TestSplitText . java to ensure proper handling of empty splits
added handling for Windows key store in HttpsConnectorFactory to ensure proper handling of Windows key store configurations
increase the default check timeout from 400 to 1 _ 000 in RestTemplateSenderTest , WebClientSenderTests , and WebClientSenderTests to
added a condition to check if the remote folder is not present in FileSyncAdapter . java to ensure that the remote folder is ignored when the file
added animations to the Slider class and updated related methods in Slider . java to enhance animation functionality by allowing dynamic animations based on animation duration
updated assertions in LineSeparatorProcessorTest . java for consistency to improve code readability and maintainability
updated maxWidth and maxHeight settings in TexturePacker . java to use 1024 instead of 512 to improve flexibility in the texture packing process
added a new test method ` negatedTernaryNotUnwrapped ` in ` UnnecessaryParenthesesTest ` to ensure
camel - 16263 : camel - core - add null check for the body if it be null
added a new TextFeedbackTest class and created a new TextFeedbackTest class in AllTests . java and implemented a test for TextFeedbackTest to
updated score comparison logic in DefaultSolrHighlighter . java to use Float . compare instead of Math . round to improve accuracy in score comparison logic
refactor case statements in AddAndScaleMultiImage and ResourceEditorApp to use try - with - resources for better resource handling to improve code clarity
added a method ` arrayClassElementOffset ` to ` HotSpotReplacementsUtil ` and modified ` ArrayCopySnippets ` to use it to
added a boolean variable ` firstLine ` and modified condition checks in ` DefaultLogPublisher . java ` to improve code readability and maintainability by
added support for remote SCM systems in Configuration , RuntimeEnvironment , and Indexer classes to enable support for remote SCM systems in the application
updated state checks in MieleApplianceHandler . java to include additional state checks to ensure proper handling of state changes in the application
updated StatsLogCompat and SysUiStatsLog methods to use SysUiStatsLog instead of StatsLogCompat to improve code readability and maintainability
updated log variable name from ` log ` to ` LOG ` in ` LocalZookeeper . java ` to improve code readability and maintainability
added tests for project generation events in EventSerializationTest . java to ensure proper handling of project generation events
add support for prerelease feature in selectionmanager . getspecpoints ( )
refactor JavaCompiler class to improve code organization to enhance maintainability and readability of the code
added a check for remainingTime before executing random reads in IntegrationTestTimeBoundedRequestsWithRegionReplicas . java to ensure test execution time is
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
added " -- gc - sections " and " -- nocopyreloc " to the ldflags in NdkCxxPlatform . java to
refactor URI handling in SpringCloudCircuitBreakerFilterFactory to use ServerWebExchangeUtils for expanded URIs to improve code readability and maintain
refactor multiple test classes to improve code organization to enhance maintainability and readability of the codebase
added null checks for uri and localName in ReadOnlySharedStringsTable . java to improve robustness by preventing potential NullPointerExceptions
added a method to retrieve accountnet by query address in HttpMethed . java and updated test cases in HttpTestAccount001 . java to
added a check for availTextWidth in SwingUtilities2 . java and improved error handling in Test6635110 . java to ensure text layout is
replaced the ` flatteningIterator ` with ` flatteningIterator ` and updated related methods in ` FileResourceIterator ` and ` FlatteningIterator
replaced ` AppSettings . getInstance ( context ) ` with ` replaceAll ( ` body ` ) ` in ` TweetLinkUtils . java ` to
refactor SecurityCenterSettingsServiceClient and package - info classes to improve code organization and maintainability
added a test method ` reloadAndDeleteAnyExistingQuestion ( ) ` to ` InstructorFeedbackEditQuestionsUiTest . java ` to
refactor return statements in HSSFSheet and BaseTestSheet classes to improve code readability and maintainability
added permission checks for launcher activity in InstallShortcutReceiver , PackageManagerHelper , and PendingAddItemInfo to ensure proper handling of malicious intents
updated the ` pendingSessions ` and ` pendingClusterSessions ` to use ` sendEvent ` instead of ` notifySessionOpened ` to
refactor hash code calculation in AbstractParquetMapInspector to improve clarity and consistency to enhance code readability and maintainability by centralizing hash code
added a check for remotely closed connection in HTTP3StreamConnection . java to ensure proper resource management and prevent memory leaks
added AutoCloseable interface to the SplitReader interface to implement AutoCloseable to enhance flexibility in closing the SplitReader class
removed the deepCopy method from GsonBuilder to simplify the copy process and improve code readability
added a static final LLSourceMap for NOT _ FOUND in LLScanner and LLSourceBuilder to improve code readability and maintain
refactor file handling in RestClientRequestImpl . java to improve code readability and maintainability to enhance readability and maintainability of the code
updated the method call from dispatchStatusString to dispatchStatusString to improve code readability and maintainability
replace MockFactory . class . getClassLoader ( ) with SearchingClassLoader . combineLoadersOf ( toMock ) and add a new SearchingClassLoader
added a new file ` TestRefreshFlagBug . java ` to handle drag - to - drag - to - drag - to - drag - to
updated condition checks in ConstantPropagateProcFactory . java to include LEFT _ SEMI _ JOIN to ensure proper handling of LEFT _ SEMI _ JOIN
refactor response completion logic in HttpReceiver and HttpSender classes to improve code readability and maintainability
updated array length calculation in multiple classes to use arrayOopDescLengthOffset instead of arrayLengthOffset to improve clarity and maintainability of array length
[ hotfix ] [ test ] add default policy to brokertestsupport
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
added a check to stop the app context before stopping it to ensure that the app context is stopped only when the app context is not running
replaced the method ` drawItem ` with ` GlyphLayout ` in the ` drawItem ` method to improve code readability and maintainability by using
refactor metrics handling in SpringmvcClient to use MetricsPublisher and improve exception handling in CodeFirstSpringmvc . java to enhance performance and
removed the ` SAFE _ ACCOUNT _ AGE _ DATE ` constant from the ` AccountAgeWitnessService ` class to simplify the code by
updated switch statements in StructureHeader and StructureReader classes to improve readability and maintainability of the code
added resourceUrlProviderExposingInterceptor to the CasWebflowContextConfiguration and related classes to enhance security by allowing resource URL providers to be
added ` DexReturnInliner ` and ` DeadAssignmentEliminator ` classes and implemented a new ` DexReturnInliner `
replaced ` Rule ` with ` getProperties ( ) ` in ` RuleResource ` , ` EnrichedRuleDTO ` , and ` Enriched
updated LinkOption . NOFOLLOW _ LINKS from NOFOLLOW _ LINKS to NOFOLLOW _ LINKS in PathResource . java
[ hotfix ] [ table - planner ] remove sql dialect from executionentry
refactor resource handling in AndroidBinaryGraphEnhancer , AndroidPackageableCollector , and AndroidPackageableCollector to use Supplier < ImmutableSet < String >
added a new file ` ASTPackageDeclarationTest . java ` that tests the ` ASTPackageDeclarationTest ` class to ensure that the ` ASTPackage
set min _ cross _ compaction _ unseq _ file _ level for min _ cross _ compaction _ unseq _ file _ level
[ hotfix ] [ runtime ] move active resource manager into active package
changed the ` testCheckColumn _ WrongOrder ` method from ` testCheckColumn _ WrongOrder ` to ` DisabledTestCheckColumn
updated import statements and added a new test class path handling in ZipResource . java and added a new test class ZipResourceTest . java to ensure
updated the ` ExpandableUploadListAdapter ` to use ` mName ` instead of ` mProgressListener ` in ` ExpandableUploadListAdapter `
refactor configuration handling in RobolectricTestRunner to use ArrayList for class hierarchy to improve code readability and maintainability
replaced Block . blockRegistry with Iterables . filter for block and itemRegistry in ModelLoader . java to improve code readability and maintainability by
updated abstract methods in AbstractDataChangedListener and WebsocketCollector to use WebsocketConnect instead of SyncDataService to improve code readability and maintain
updated JSONPojoConvertor to handle Enum types and added color handling in JSONPojoConvertorTest to improve type safety and maintainability of enum values
added warnings for ` -- view ` option in ` IjProjectCommandHelper . java ` to indicate that ` -- view ` option is deprecated and
refactor GWTRequestWrapper to use ByteArrayOutputStream instead of StringBuilder and ByteArrayOutputStream to improve performance and maintainability of the code
updated GyroControl to use OrientationCorrectionListener and added OrientationCorrectionListener for sensor events to improve sensor handling and ensure proper handling of
change BIOME _ LIST _ SIZE from 256 to BiomeGenBase . getBiomeGenArray ( ) . length to ensure proper handling of
updated method names from ` println ` to ` print ` in ` GetInterfaceTest . java ` to improve clarity and maintainability of the code
replaced the use of ` jdtCompiler . getEnvironment ( ) ` with ` jdtCompiler . getEnvironment ( ) ` in ` FileCompilerConfig .
added a new interface ` ByteToLongCollector ` to implement a ` ByteToLongCollector ` interface to implement the ` ByteToLongCollector `
added a preload flag to the MMapDirectoryFactory to enable the application ' s preloading functionality
added custom metrics for various component configurations in BukkitPlatform . java to ensure accurate rendering of component configurations in the application
refactor QuickConnectREST class to improve code readability to enhance maintainability and maintainability of the code
added aspect configuration for the default card image in CardPresenter . java to ensure the default card image is displayed based on the tile port folder
added exception handling for logining page URLs in AuthenticationCountSelector , AuthenticationCountSelector , and LoginRedirect classes to improve error handling and ensure proper
refactor VectorHashKeyWrapper to use empty arrays instead of clone methods to improve code readability and maintainability by reducing duplication
added unit tests for ` nanoTime ( ) ` and ` nanoTime ( ) ` in ` TimeChangeTest . java ` to ensure proper handling of time
added trim ( ) method to MultiPartFilter and modified MultipartFilterTest to handle null line parameters to ensure proper handling of null values and improve
fix entity entity drop drop event ( # 70527 )
updated error messages from " configured " to " unknown " in OpenUVBridgeHandler and updated status updates in OpenUVReportHandler to improve clarity and
removed the UnsupportedOperatorsVisitor class from the planner class to simplify the code and improve readability
replaced UnsupportedOperationException with RdepsFunction in GraphEnhancementQueryEnvironment and added a new RdepsFunction in GraphEnhancementQueryEnvironmentTest
refactor Character class to improve code readability to enhance maintainability and maintainability of the code
added a boolean variable ` entireRocket ` and modified the selection option initialization logic in ` ScaleDialog . java ` to improve flexibility in scaling whole
replaced ` Arrays . toString ( bytes ) ` with ` bytes . getBytes ( 4 ) ` in ` UpdateableResultTest . java ` to ensure
added null checks for offlineTableName and realtimeBoundaryInfo in BaseBrokerRequestHandler . java to ensure proper handling of time boundary information when offlineTableName is
refactor AjpAprProcessor and Http11AprProcessor to improve code readability and maintainability to enhance maintainability and maintainability
updated regex patterns in EightmusesRipper . java for better clarity and consistency to improve readability and maintainability of the code
replaced ` mDevice . getDevice ( ) . wait ( ) ` with ` TestHelpers . wait ( ) ` across multiple test classes to improve
updated the condition in QuickstepLauncher to check if the profile is phone and landscape to ensure proper handling of mobile profile layouts and improve user experience
replaced ` getValue ( ) ` with ` unwrap ( QueryImpl . class ) ` in ` PartTreeJpaQueryIntegrationTests . java ` to
updated the method ` readMatchingLines ` to use ` subsystem . readMatchingLines ` instead of ` Files . readAllLines ` to improve
removed dynamic check logic in JpaQueryExecution . java to simplify the code and improve readability
added a null check for the entity type in PhysicsProcess . java to prevent potential NullPointerExceptions when the entity type is null
added a new test method ` EntryProcessorTest ` that clears the map when value attributes are indexed in ` EntryProcessorTest . java ` to
added a new method ` OperationSetJitsiMeetToolsJabberImpl ` and created a new ` OperationSetJitsiMe
updated color calculations in Utils . java and UtilsTest . java to use ` Color . values ( ) . length ` instead of ` 99TEST `
added easy bind functionality to DefaultMenu , EditorMenu , and EditorMenus classes to enhance user experience by enabling easy bind functionality
added RmStep to the build target path in Aapt2Link . java to ensure correct path generation for build cells
updated the initialization of ` Capture ` to use ` Capture . newInstance ( ) ` instead of ` Capture < Supplier < Tool > > ` to ensure
updated the selection logic in EuclidianController , EuclidianControllerD , AlgebraControllerD , and Alg
added error handling for MarkedYAMLException in YsldValidator . java to improve error handling and ensure proper exception handling
added ` isCanceled ( ) ` methods to ` BehaviorCall ` , ` BehaviorCall ` , and ` ExecutorCallAdapterFactory ` to
refactor ` isAnnotationPresent ` methods to use ` default ` instead of ` Objects . requireNonNull ( annotationClass ) ` for consistency to improve code
added a default implementation for the removeAllWidgets method in UILayout . java to provide a default implementation for unsupported functionality
[ hotfix ] [ test ] [ test ] add log4j2 logging to log4j2
updated the return value from ` getOutputSizeForFinal ( inputLen ) ` to ` getOutputSizeForUpdate ( inputLen ) ` to ensure the
added handling for high - res content in PlaybackController . java to ensure proper handling of high - res content for high - res content
refactor ReadSourceTranslatorBatch and ReadSourceTranslatorMockBatch to use DataSourceV2Relation instead of AppliedPTransform to improve code clarity and
updated GpsLoggingService to remove the " gps " and " passive " listeners when preferCellTower is enabled to improve user experience by
refactor putString method to use byte array instead of boolean and improve width measurement logic to enhance memory management and maintainability of the code
added imports for BaseItemDragListener and updated item creation logic in FolderIcon . java to ensure proper handling of items related to BaseItemDrag
added method ` createEmptyArtifact ` to ` RepositoryConnector ` , ` FileSystemConnector ` , and ` SignavioConnector ` to handle empty connector
corrected the spelling of " EXCHANGE _ SERVER " and " QUEUE _ DURABLE " in the RabbitMQPublisherImpl
removed unnecessary check for afterAug1 in VideoViewerActivity . java to simplify code and improve readability
added a compactPath call to SftpOperations . java to ensure proper path handling for Sftp operations
updated the assertIsSatisfied method from assertIsSatisfied to assertMockEndpointsSatisfied in BaseWeatherConsumerTest . java to ensure that mockEndpointsSatisfied is
updated variable name from ` groupSortStr ` to ` sortWithinGroupStr ` in ` QueryComponent . java ` to improve clarity and consistency in
updated condition checks in BlockDoublePlant and BlockType classes to include LARGE _ FERN and LARGE _ FERN to improve
updated the method call from setFocusable to setRequestFocusEnabled in TranscodingTab . java to improve clarity and maintainability of the code
added exception handling in VirtualMachineManagerImpl . java to improve error handling by throwing an exception
updated DB2TestSystem to acceptLicense ( ) and modified import statements in DockerDatabaseWrapper and TableIsEmptyGenerator to improve code clarity and ensure
refactor unit handling in DoubleModel and GeneralOptimizationDialog to utilize a new setter method to improve code readability and maintainability by centralizing
added a new static final CurrencyPair for BTC _ ZMW in CurrencyPair . java to facilitate the use of the ZMW currency
added a check to set the number of samples in TestPBRLighting . java to ensure the correct number of samples is set
updated assertion statements in StepWithSimpleTaskJobParserTests . java for consistency to improve code readability and maintainability
changed the variable name from ` getUsernameAndPasswordAndPassword ` to ` final ` in ` CentralAuthenticationServiceImplTests . java ` to ensure the
updated the formatting of the ` ggbabs ` method in ` ExpressionNode . java ` to improve code readability and maintainability
refactor service output handling in DDLSemanticAnalyzer to improve clarity to enhance code readability and maintainability by reducing redundancy
add a method to convert ClassOrInterfaceType to ClassOrInterfaceTypeType and updated the compareBigDecimal method to use it to improve type safety and
added " org . eclipse . jdt . " to WebAppContext . java to hide jdt used by jetty
removed the useAuthCache ( ) method from the NegotiateAuthentication class to simplify the return statement for better readability and maintainability
updated namespace assignment in PageTitle . java to use Utils . capitalize ( segments [ 0 ] ) instead of Utils . capitalize ( segments [ 0 ]
camel - 18263 : camel - direct - add support for no available consumer .
added a null check for the zooKeeper before setting it to prevent potential NullPointerExceptions when the zooKeeper is null
updated the progressBar step name from " Initializing mods Phase 2 " to " Initializing mods Phase 2 " to improve clarity and consistency in the progressBar
replaced ` mVibrator . vibrate ( ) ` with ` runOnUiHelperThread ( ) ` in ` AllSetActivity `
added a call to updateLastRemoteStreamId ( streamId ) in HTTP2Session . java to ensure proper handling of remote stream IDs
refactor Graphics2D handling in EditorHeader , EditorToolbar , and EditorToolbar classes to improve clarity and consistency to enhance code readability and maintain
replaced ` termWindowSize ` with ` sentPosition ` in ` DriverConnection ` , ` DriverPublication ` , and ` nextTermOffset `
updated import statements in CtAnnotationImpl . java for consistency to improve code readability and maintainability
refactor ExoPlayer class to improve code readability to enhance maintainability and maintainability of the code
refactor the getRGBPixelImpl method to use a rectangle instead of a native method to improve code readability and maintainability by encapsulating
added a new method ` newPrintStream ` to ` System . java ` and updated the output stream encoding handling in ` System . java ` to
updated the vibrate value from 1 to 25 in TouchableMovementMethod . java to increase the accuracy of the vibration value
added import statements and modified import statements in AppEngineSqlCloudSession and FlybushDataClearer classes to improve code clarity and maintainability
replaced ` executor ` with ` sslContextFactory ` in ` WebSocketClient ` constructor to improve clarity and maintainability of the constructor constructor
selenium - server / tests / html / test _ i18n . html / test _ i18n . html / test _ i18n
refactor exception handling in BytecodeParser and SharedGraphBuilderPhase to use loadConstantException instead of IllegalArgumentException to improve code clarity and maintainability
restore the auth system state in XmlWorkflowServiceIT . java to ensure proper handling of auth system state in the application
added a new ` LowercaseComparator ` class and modified the ` compareTo ` method in ` CoNLLUFeatures . java ` to improve the accuracy
refactor ` JavadocTool ` to use ` uniquefiles ` instead of ` Iterable ` and ` ListBuffer < JavaFileObject > ` to improve code
refactor FormHandlingTest to handle UnsupportedOperationException and improve error handling in MultiSelect to enhance test coverage and ensure proper functionality of option management
added a check for the length of keys in HighestKvno . java to ensure proper handling of count error messages
added error handling for retrieving attributes for objects with 1 record in HDF5BatchReader . java to improve robustness by handling potential HDF exceptions
[ beam - 14338 ] fix build error in batchload and batchload and batchload
updated XmlRootElement annotation from " copySnippetRequestEntity " to " createTemplateRequestEntity " and added ApiImplicitParams annotation in ProcessGroupResource to enhance
added a new file ` TestMultiANewArray . java ` to test multi - array handling to ensure proper handling of multi - array configurations
removed the use of secondary storage VM for managed storage in the management server to simplify the configuration by providing a more descriptive configuration for managed storage
updated the calculation of block IDs in SyncBlockChainMsgHandler to include headID and headNum for consistency to improve code readability and maintain
updated the theme setting in PreviewTabView to use preferences . getTheme ( ) instead of preferences . getTheme ( ) to improve user experience
added null check for reader before closing it in VectorizedParquetRecordReader . java to ensure proper resource management and prevent potential NullPointerExceptions
added a new test method ` testHttpIdleTime ` in ` ConnectorTimeoutTest . java ` and a corresponding test for HTTP idle time to ensure
added new constants for DICT _ LIST _ PROP and SIGNATURES _ PROP from " dcoref . dictlist " to " dcore
updated the ` readIdentifier ( ) ` method to use ` readTagName ( ) ` instead of ` readIdentifier ( ) ` and added a `
updated JpaPagingItemReader from ` Object ` to ` JpaPagingItemReader < Foo > ` in ` JpaPagingItemReaderIntegrationTest
updated logging level from warn to debug in DistributedQueue . java to improve clarity of logging for better debugging
updated ColorExtractionService to use getHotseatPallete ( ) method to improve code clarity and maintainability by utilizing BitmapRegionDecoder
updated import statements in TypeRegistry and TypeRegistry classes to include DefaultDataTableEntryTransformer and TableCellByTypeTransformer to enhance code clarity and maintainability
removed assertion for newAvailableShared in AtomicRemainder . java to improve code readability and maintainability
refactor multiple Audio classes to improve code organization to enhance maintainability and readability of the codebase
removed the projectGenerated flag from ProjectGenerator and WorkspaceAndProjectGenerator classes to simplify the code and improve readability
updated condition to check for USER _ PROPERTY and AUTH _ HEADER in DriverUtils . java to improve code readability and maintainability
refactor contact form handling in Routes . java and add a new Contact class in ApplicationController . java to improve code clarity and maintainability by
replaced ` Connection ` with ` ObjectPermission ` in ` SimpleUser ` and updated related methods to use ` ObjectPermissionSet ` instead of ` Connection
updated RELEASE _ VERSION from 20 to 21 in IconCache . java to ensure compatibility with the latest release version
changed the parameter name from KnowledgeBase to KieBase in the setMode method to improve clarity and consistency in method naming
updated ` findWhereNameLikeAndActive ` method signatures to ` findWhereNameOrAliasLikeAndActive ` and ` findWhereNameOrActive
refactor IOUtils handling in DocFieldProcessor to use IOUtils . closeSafely for improved readability to enhance code clarity and maintainability by using IOUtils
refactor AbstractDataChangedListener , HttpLongPollingDataChangedListener , and RuleServiceImpl classes to improve code organization and maintainability
added a click listener to the overflow button in ExpansionViewHelper . java to enhance user experience by allowing users to click the overflow button
updated ` failWithoutSubject ` and ` failWithoutSubject ` methods to use ` non - null ` instead of ` null ` to improve clarity and
added a method to update the line height in AlgebraViewW . java and updated related components in InputTreeItem . java to improve line
updated package structure and import statements in ProtoBufferUtilitiesTest . java to improve code readability and maintainability by centralizing package structure
refactor divider position handling in JabRefFrame to use Platform . runLater for better readability to improve code clarity and maintainability by
updated the ` getNewFileImpl ` method to return ` String [ ] ` instead of ` String [ ] ` and modified the ` generate ` method
do n ' t use map instead of map for geoserver
updated the method name from ` extractTypes ` to ` dataTables ` in ` RecipeDescriptor . java ` to improve clarity and consistency in the
added a method ` metaContactAvatarUpdated ` to ` MclStorageManager ` , ` MetaContactAvatarUpdateEvent ` , and updated related classes
updated import statements from ` org . apache . sshd . server . Command ` to ` org . apache . sshd . server . command .
added a new test method ` testCleanUpAuditLogTablePostParametersByPosition ` to ` AuditLogTest . java ` to ensure proper cleanup
added @ SuppressWarnings ( " unchecked " ) annotation to the inject method in ComponentContext . java to improve code readability and maintainability
added regex patterns for comment lines in ACLFileParser and modified the parsing logic in ACLFileParserTest to improve regex handling and ensure correct parsing of
added a new ` DynamicDrillTable ` parameter to the ` MapRDBFormatMatcher ` and updated its usage in ` MapRDBSub
added ancestorDimensionValues to StarTreeImpl and refactored related logic in StarTreeNodeImpl to improve the handling of ancestor dimensions and enhance logging clarity
added user unlock check in TouchInteractionService and updated closeOpenViews methods in RecentsAnimationDeviceState to ensure proper closing of open views when user
updated condition for widthStr and positionStr in Photo . java to ensure proper handling of width and position parameters
refactor cert validation logic in PKIXValidator . java to improve code readability and maintainability
[ hotfix ] [ test ] add archunit test for hadoop bulk
updated package names from ` org . apache . shenyu . integratedtest ` to ` org . apache . shenyu . integrated . test
removed unnecessary ` skipProjectNetworks ` parameter from ` aclType ` and ` specifyIpRanges ` in ` NetworkServiceImpl . java ` to
replaced remove ( ) method with get ( ) method in RuntimeTypeAdapterFactoryFunctionalTest . java to improve code readability and maintainability by
added a boolean flag ` storeUndoInfoForProperties ` to ` App . java ` and a method to store the ` storeUndoInfoForProperties
added security checks for the gradProp property in XRCompositeManager . java to ensure proper access control for the gradProp property
replace assertions in StreamCloseTest with a await method for better readability to improve code readability and maintainability by using a more descriptive
replaced the ` doAfterFlush ` method with ` doAfterFlush ` and added a null check for ` perFields ` in multiple classes to ensure
added Deprecation functionality to ConfigurationMetadataGenerator and AbstractJpaProperties classes to ensure proper handling of non - deprecated errors in configurations
refactor BiInt2ObjectMap and Int2ObjectHashMap to use final ints for capacity and mask to improve code readability and maintainability
updated HIVE _ MOVE _ FILES _ THREAD _ COUNT from 25 to 15 in HiveConf . java and modified file rename logic
added logging statements and improved error handling in ParallelNioSender . java to enhance logging clarity and maintainability of error handling
added null check for context in SchemeAndroidIDE . java to avoid potential NullPointerExceptions when context is null
replaced ` unhookCustomClassLoaders ` with ` uninstallNativeImageClassLoader ` in ` NativeImageGeneratorRunner ` and ` NativeImageBuildServer `
updated method signatures in SwitchUserAuthorityChanger , SwitchUserProcessingFilter , and SwitchUserProcessingFilter to use a List instead of void to improve
refactor ` JaxrsIntegrationTest ` and ` JaxrsSpringIntegrationTest ` classes to extend ` JaxrsIntegrationTestBase ` and ` 
updated the ` isJdbc41Compliant ` method to use ` setQueryTimeout ` instead of ` isJdbc41Compliant ` to
added @ DataProvider annotations for XML and supplementary characters in XslSubstringTest . java to enable testing of XML and SupplementaryCharacters
updated the ` close ( ) ` method from ` eventWriter . close ( ) ` to ` delegateEventWriter . close ( ) ` in multiple
added a constructor to MariaDBDatabase and updated sequence handling logic in CreateSequenceGenerator to enhance database handling capabilities and ensure proper sequence retrieval logic
updated error messages from " is divisible by " to " is divisible by " ALIGNMENT " in multiple files to improve clarity and consistency in error
updated import statements to use ` TableDataManagerProvider ` instead of ` BrokerResponse ` in multiple test files to improve code clarity and maintainability
added support for MFLNExtension and MFLNExtension in SSLExtension . java to enable MFLNExtension to enable MFLNExtension
replaced ` ObjectIterator < T > ` with ` ObjectHashSetIterator ` and updated constructors in ` ObjectHashSet ` and ` ObjectIterator ` to
added exception handling in MainActivity and Compose classes to improve error handling and ensure proper handling of URL lengths
added a new constant ` DATAPOINT _ TTL ` to ` CassandraDatastore ` and updated data point write handling in ` WriteBuffer ` to improve
updated the ` checkForAndKillXcodeIfRunning ` method to include a ` enablePrompt ` parameter and modified the ` checkForAndKillXcode
added a method ` getTerrainAtCell ` to retrieve the terrain at a cell to enhance functionality for retrieving terrains based on grid coordinates
added a new class ` T6665791 ` and created a new ` T6665791 ` class ` T6665791 ` to print
added error handling for FileNotFoundException in ResourceLoader . java to improve error reporting when quest encryption keys are not found
added a condition to check if the push protocol is not enabled to ensure that the protocol is only enabled when the push protocol is enabled
refactor PointValue class to improve code readability to enhance maintainability and maintainability of the code
removed the sign method call in BlockUtil . java to streamline the code by eliminating unnecessary code
added null checks for getRoots ( ) and roots in FileSystemView , Win32ShellFolder2 , and Win32ShellFolder2 classes to ensure
updated row height calculation and added last row handling in ColumnText and PdfPRow classes to improve clarity and maintainability of the code
updated undoTrash , undoArchive , and undoArchive variables in ListFragment . java to utilize SparseArray for improved performance to enhance readability and
added methods to adjust feedback questions and comments in UploadBackupData . java to enhance user experience by allowing users to update feedback questions and comments
added null check for data in bug8024061 . java to ensure proper handling of null data
removed the ` PstmtDelegate ` interface and its implementations from ` ServerConfig ` and ` DefaultContainer ` to streamline the codebase by
refactor AppWidgetResizeFrame and Launcher to use AppWidgetHostView instead of Padding for widget padding to improve code clarity and maintainability
added support for ConsStringFilter in NashornBeansLinker . java to enhance compatibility with ConsStringFilter in the application
refactor ClassGraph and ScanResult classes to improve code organization to enhance maintainability and readability of the codebase
updated latch initialization in IdleTimeoutTest . java to use goAwayLatch instead of latch to improve readability and maintainability of the test
replaced ` getFailure ( ) . getMessage ( ) ` with ` hasMessageThat ( ) ` in ` IterableSubjectTest . java ` to improve
replaced ThreadLocal with a null variable for the current book assignment in multiple classes to improve code clarity and ensure proper initialization of the current book
updated the vote method to accept a Class parameter and added support for the object type in ContactSecurityVoter . java to improve type safety and ensure
removed unused imports for GachaHandler and Tools in DataLoader . java to streamline code by eliminating unnecessary dependencies
added rowsAffected parameter to ` postUpdateLog ` methods in ` AbstractUpdateCommandStep ` , ` UpdateCommandStep ` , and ` UpdateCount
refactor margin calculations in EuclidianDockPanelWAbstract and improve margin calculation in EuclidianDockPanelWAbstract to
updated foregroundFPS and backgroundFPS constants in JglfwApplicationConfiguration . java to set foregroundFPS and backgroundFPS to 60 to
added assertions for ObjectReleaseTracker and TransactionLog in HdfsTransactionLog , HdfsTransactionLog , TransactionLog , and TransactionLog classes
removed the DefaultWebSocketFrame from the writeAndFlush method in DefaultHttpServer . java to streamline the code for better readability and maintainability
updated StateMachineErrorTests to use ` TestApplicationEventListener1 ` and ` TestApplicationEventListener2 ` instead of ` TestApplicationEventListener ` to improve
replaced Intent with setListBackground method in SettingsActivity . java to improve code readability and maintainability by centralizing background color
added null check for line in RMEThingHandler . java to avoid potential NullPointerExceptions when line is null
added a ` accumulate ` method to the ` JavaUserDefinedAggFunctions ` class to implement a ` accumulate ` method to provide a way to accumulate
updated formatting in Put . java and ReplicationSink . java to improve code readability and maintainability
updated VALID _ CACHE _ SET and REGEXP _ CACHE _ CACHE to use Map instead of Set to improve performance and maintainability of
added a static method ` reset ` to the ` GameThread ` class to ensure proper initialization of the ` gameThread ` instance
added a ` login ` method to the ` DigestAuthenticator ` class to check if the ` credentials ` is equal to the ` Digest ` value to
refactor parameter handling in SavedRequestAwareWrapper to improve code readability and maintainability to enhance code clarity and maintainability by centralizing parameter
updated info messages in BasicConfigurator , LoggerContext , and ConfigurationAction classes to improve clarity and consistency to enhance code readability and maintainability by using
replaced countDown ( ) calls with wakeup ( ) in CommitLog , HAService , and HAService classes to improve code readability and
added a check for Android SDK version in PhotoViewerActivity and updated AutoCompletePeopleAdapter logic in UserAutoCompleteHelper to ensure compatibility with Android
updated schema info level from minimum ( ) to basic ( ) in SchemaCrawlerTest . java to ensure consistency in schema info level configuration
updated XMLStreamWriter initialization to use BufferedOutputStream instead of zipOut to ensure proper resource management and prevent potential resource leaks
replaced the use of ` random . nextBytes ( ) ` with ` Charset . forName ( UnicodeUtil . randomFixedByteLengthUnicodeString ( )
fix MC - 103516 bug fix by fix MC - 103516 .
removed multiple calls to " psiprobe . Tomcat10ContainerAdapter " in ProbeConfig . java to streamline the list structure for better
[ KieSession ] add a new test method ` testMultiAccumulate ` to ` MarshallerTest ` and ` ProtobufInputMarshaller ` to
refactor case checks in NowSearchTerm and SearchTermBuilder classes to improve code readability and maintainability
changed the visibility of PDFCloneUtility from public to public to allow access to PDFCloneUtility from other classes
updated RemoteEndpointServiceAccessStrategy and WSFederationRelyingPartyAttributeWriter to use SpringExpressionLanguageValueResolver for method and headers to improve
added a new method ` newResponseBuilder ` to the ` SearchHandler ` class and updated ResponseBuilder initialization to improve code readability and maintainability
added notification for the command START notification in AsyncBackgroundTaskManagerTest . java to ensure proper notification of command execution during test execution
updated the ` computePreviewDrawingParams ` method to use ` recomputePreviewDrawingParams ` and added a null check for ` mReferenceDrawable `
refactor tokenizer handling to use CharFilterFactory instead of TokenFilterFactory to improve code readability and maintainability by utilizing CharFilterFactory for
removed null check for plot and hotspot parameters in AbstractCategoryItemRenderer . java to simplify code and improve readability by eliminating unnecessary null checks
added verbosity handling to JavacStep and ExecutionContext classes to enhance verbosity handling by allowing verbosity overrides based on silent mode
added a null check for the database type in DbSqlSession . java to ensure proper handling of database schema based on the database type
updated contextDesc assignment to use LogManager . getContext ( false ) . getClass ( ) . getSimpleName ( ) instead of LogManager . getContext ( false ) .
added a new file TestShrinkToOneRegion . java that uses System . gc ( ) to implement a system . gc ( ) method for better
added Splitter to the list of custom packages in SandboxTestRunner . java to improve code readability and maintainability
updated context handling in AnalyzingInfixSuggester and added a new test for binary context in AnalyzingInfixSuggesterTest to
updated the handling of ` localAttachment ` in ` PushsaferMessageBuilder . java ` to use ` image / ` instead of ` attachment `
removed the ` showLabelStats ` method from ` ModelExplorer ` , ` SequenceModelExplorer ` , and ` SequenceModelExplorer ` classes to simplify
PDFTextStripper : remove null check for characterListMapping to simplify code by eliminating unnecessary null checks
updated the ` FORMATTER ` constant from ` getVarByte ( ) ` to ` getVarChar ( ) ` in multiple test files to improve
updated the ` evaluate ` method to use ` BigDecimal ` and modified the ` evaluate ` method to use ` BigDecimal ` instead of ` Long ` to
refactor injectionEnabled and useIncludedLibrary in GraalJSScriptEngineFactory to use ConfigParser instead of Object to improve code readability and maintain
changed the Test1 and Test2 classes from class to public to allow external access to the Test1 and Test2 classes
updated TranslatableCaptions to use ` plotEntry ` instead of ` now ` and ` plotEntry ` in ` PlayerEventListener . java `
updated method signatures in ConditionAndOr and ConditionInConstantSet to use session parameter instead of directly using a session parameter to improve flexibility in accessing
replaced calls to ` doTestNormsStoredFields ` with ` NumericDocValuesField ` in ` BaseNormsFormatTestCase . java ` to
refactor Box2DCharacterControllerTest to use a loop to improve code readability and maintainability to enhance maintainability and maintainability of the
added test cases for globalbuffersize and threadbuffersize in TestBadOptionValues . java and modified test cases in TestMemoryOptions . java to
removed unnecessary whitespace in ObjectAlignment and Options classes to simplify code and improve readability
added an abstract method ` getTargetPackage ( ) ` to ` AbstractAndroidInstrumentationTestJVMArgs ` and modified ` DefaultAndroidManifestReader ` to
refactor DocHelper class to improve code readability to enhance maintainability and maintainability of the code
added a new ArrayList to the acceptableThrowawayItems list in Settings . java to enhance flexibility in handling possible throwaway items
replaced calls to ` mh1 . invokeExact ` with ` mh2 . invokeExact ` and ` mh2 . invokeExact `
updated the isWorkingOnMessage method from " MessageHandler Thread " to " MessageHandler Thread " in MessageHandler . java to improve clarity and maintain
refactor Inflection class to improve code organization to enhance maintainability and readability of the code
added getLocale ( ) and setLocale ( Locale ) methods to EvaluationContext to enable locale management for evaluation context
removed the import of Plugin in SummaryPrinter . java to streamline the code by eliminating unnecessary dependencies
added a break statement in DrawerActivity . java to improve code readability and maintainability
updated import statements from ` where ` to ` query . getQueryObject ( ) ` in ` MongoQueryCreator . java ` to ensure proper handling of
added a new constant XWORK _ LOGGER _ FACTORY in XWorkConstants . java and updated LoggerFactory . java to include a userLoggerFactory property
updated method names from ` adminAddPeerFailsWhenP2PDisabled ` to ` adminAddPeerFailsWhenP2PDisabledOn
updated bean names from " livenessStateProbeIndicator " to " readinessStateHealthIndicator " in multiple configuration classes to improve clarity and consistency in bean
refactor LocalPStoreProvider to use ConcurrentMap for concurrent map creation to improve concurrency handling and ensure proper cache management during write operations
refactor deleteFiles method to use private method for improved code readability to enhance encapsulation and maintainability of the code
replaced ` Provider ` with ` ServiceProvider ` in ` ServiceLoaderSpliterator ` and ` TypeUtil ` classes to improve code readability and maintainability by
refactor ` findField ` and ` setField ` methods in ` JavaInteropReflect ` , ` JavaObjectMessageResolution ` , and `
added checks for toolchain creation in AbstractCell and DefaultToolchainProvider classes to ensure toolchains are only created when the toolchain is not
added a boolean variable ` contextAddedToEngine ` and modified synchronization logic in ` PolyglotEngineImpl . java ` to improve thread safety and
updated condition checks in AbstractCheckDescriptor . java for consistency to improve code readability and maintainability
added ` exportedLinkerFlags ` parameter to ` PrebuiltCxxLibraryDescription ` and updated related methods in ` PrebuiltCxxLibraryBuilder
updated ` onConfigurationChangedInternal ` and ` updateRecentsRotation ` methods in ` AbsSwipeUpHandler ` and ` RecentsView ` to
updated type checks from ` ItemReadListener ` to ` ItemProcessListener ` and ` ItemWriteListener ` in multiple classes to improve type safety and
updated the hash string handling in AbstractBlockChain . java to use getHeader ( ) . getHashAsString ( ) instead of newBlock . getHeader (
updated the method call from ` storePathPhysic ` to ` getStorePathPhysic ( ) ` in ` DefaultMessageStore . java `
replace try - with try - with - try - with - resources in MicrometerMetricManager . java to improve code readability and maintainability by
added checks for deleted messages in CompactionLog . java to ensure proper handling of deleted messages
added @ Deprecated annotations to AbstractJPASubQuery , JPACommonQuery , and JPAQueryBase classes to indicate that these classes are deprecated
added a method to check for system UI objects in AbstractLauncherUiTest to ensure proper handling of keyguard status views in the application
changed the visibility of the logger variable from static to final in SessionRegistryImpl . java to enhance encapsulation and improve code clarity
added checks for empty cookie jars in InMemoryCookieStore and NullUriCookieTest to ensure proper handling of empty cookie files
added an ` toString ( ) ` method to ` BonsaiValue ` and updated related methods in ` BonsaiWorldStateArchive ` to
changed the ` getText ` method from ` String ` to ` CharSequence ` in multiple repository classes to improve clarity and maintainability of the code
added a @ NotYetImplemented annotation to the AlertsTest class to ensure that the AlertsTest class does not implement the MAR
added error handling for connection retrieval in SocketConnector . java to improve robustness by preventing potential IOExceptions
replaced ` CMD _ ESCAPER ` with ` WindowsCreateProcessEscape ` in multiple files to improve code clarity and maintainability by using a
added synchronization for heartbeatExecutorService in DbTxnManager . java to ensure thread safety during shutdown
replaced ` transformBuildResultIfNotPresent ` with ` transformBuildResultAsyncIfNotPresent ` and added a ` wrapWithTracingAndCancellation ` method to
added a new method ` updateFirstLineShowing ( ) ` to ` TextArea ` to ensure proper handling of first line showing in the TextArea '
added tests for temporary and staging directories in TestInformationSchemaWithPrivilege . java to enhance testing capabilities for temporary and staging files
added null checks for graphicsConfig and parent in Component . java to improve robustness by avoiding potential NullPointerExceptions
updated server status handling in CXFTestBase and modified test cases in TikaServerIntegrationTest to improve server status handling and ensure proper test coverage for
refactor pipeline processing logic in Pipeline . java to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
refactor parser handling in PrintTagList . java to improve clarity and clarity to enhance code readability and maintainability by centralizing parser functionality
replaced ` getFullyQualifiedName ( ) . getFullyQualifiedName ( ) ` with ` toString ( ) ` in ` InsertDeParser ` and added a
updated exception handling in JournalCorruptionEofIndexRecoveryTest . java to check for EOFException instead of EOFException to improve error reporting and ensure
[ java ] use awaitleadermemberid ( ) instead of awaitleadermemberid ( )
updated the calculation of arc and outer values in LineBorder . java and updated the calculation in Test4252164 . java to improve accuracy of
added null and empty check for galleryImages in PostGalleryTypeImageRecyclerViewAdapter to prevent potential NullPointerExceptions when galleryImages is null
refactor deployment ID handling in StandardChangeLogHistoryService and CreateDatabaseChangeLogTableGenerator to improve code readability and maintainability
updated usage string from ` org . apache . pdfbox . examples . fdf ` to ` org . apache . pdfbox . examples . interactive
removed the boolean parameter from the getIndex method calls in AlterTableAddConstraint . java to simplify the method signature and improve readability
added a new map for provisional engines in QuickfixjComponent and updated test cases in QuickfixjComponentTest to improve engine management and ensure correct
added a boolean field ` displayZoomControls ` to the ` RoboWebSettings ` class and modified the ` setMixedContentMode ` method to
added corporea block and corporeaSlab blocks to ModBlocks and LibBlockNames classes to enhance the functionality of corp
refactor ConnectionFactory class to improve code readability to enhance maintainability and maintainability of the code
added a method to disable menu updates in GpsMainActivity to enhance user experience by allowing users to disable menu updates based on application settings
updated the message format from ` search ` to ` filter list ` in ` ExtendedListFragment . java ` to improve clarity and maintainability of the
hhh - 16399 fix test failure in entitytest . testservice ( )
added auto - resize mode and auto - resize mode in MotorMountConfigurationPanel . java and modified the constructor in MotorConfigurationPanel . java to ensure
updated the LINE _ SEPARATOR variable from ` lineSeparator ( ) ` to ` System . getProperty ( " line . separator " ) ` to
added methods to retrieve creator and getSubject and subject properties in POIXMLProperties and created a test case for document properties in TestPOIXMLProperties
updated the method call from ` doStop ( ) ` to ` doStop ( ) ` in ` HandlerWrapper . java ` to improve code read
added a condition to check for the length of cncFile in Aeron . java to ensure proper handling of empty cnc files
updated ` NonMarkedFoo ` and ` FooCommand ` classes to use ` Command ` instead of ` Marker ` and ` FooCommand ` to
added methods to check for jmod files in ClassFileSourceImpl to ensure proper handling of jmod files in the class path
updated ` TreeBackedElement ` to accept ` @ Nullable ` instead of ` canonicalizer ` in ` TreeBackedElement ` and ` Tree
updated Saml2TokenGranterTest and UserTokenGranterTest to use PublicTokenRequest instead of Saml2TokenGranterTest to
updated the method call from arrayLength to valueRangeObject in AbstractFromPropertyValueRangeDescriptor . java to improve code clarity and maintainability by using a
added synchronization method to ZKAssign , ZooKeeperWatcher , and ZooKeeperWatcher classes to ensure proper synchronization of node nodes
added exception checks for EGL14 and EGL _ NO _ CONTEXT in GlUtil . java to ensure proper handling of EGL contexts
added a new test method ` testRuleFlowGroupDeactivate ` in ` ExecutionFlowControlTest . java ` and updated activation handling in ` DefaultA
added a return statement in HystrixDashboardConfiguration . java to improve code clarity and maintainability
refactor droppipe procedure logic in IoTDBPipeTest and IoTDBPipeIT to improve error handling and ensure proper error reporting for pipe
refactor ClientQueueDisruptionTest to remove unused imports and improve code readability to enhance maintainability and maintainability of the code
refactor CtReferenceImpl to use DefaultJavaPrettyPrinter instead of SignaturePrinter to improve code readability and maintainability by using a standardized
changed the visibility of validateInstance method from public to protected to allow subclasses to access the validateInstance method
updated import statements in GeoPointField , GeoPointInPolygonQuery , and GeoPointPrefixTermsEnum classes to improve code clarity and maintainability by
added a new file ` FakeBuildable . java ` and modified ` OnDiskBuildInfoTest . java ` to use ` FakeBuildable `
removed null and empty items from GuiIngameForge and UniversalBucket classes to simplify code and improve readability by eliminating unnecessary null checks
updated method names from ` path ` to ` timeseries ` in ` TSParser . java ` and ` SQLParserTest . java ` to
added a check for EPSILON before retrieving the Velocity in TubeCalc . java to ensure proper handling of Velocity in the calculations
replaced direct calls to ` getBucket ` with ` _ storage ` in ` GcsPinotFS . java ` to improve code readability and
added finally blockCloseVertxByName method to TestHighwayTransport . java to ensure proper resource management and prevent potential resource leaks
added methods to create and recreate history views in DbTriggerBasedHistoryDdl , PostgresHistoryDdl , and PostgresHistoryDdl to
updated the clustering engine check from 2 to 3 in the CarrotClusteringEngineTest . java file to ensure compatibility with the latest clustering
added JUnit Ignore annotation to SynDataReplyDataLoadTest . java to temporarily disable tests that need to be rewritten
updated ParserCacheCommand and ParserStateObjectInputStream to use ParserStateObjectInputStream and added a new ParserStateObjectInputStream class to improve error handling and
added null checks for changeLog and objectQuotingStrategy in ChangeSet and DatabaseChangeLog classes to ensure proper handling of objectQuoting
replaced ` parse ` method with ` fromXmlStream ( zipFile ) . fromXmlStream ( zipFile ) . fromXmlStream ( zipFile
deleted the CsrfControllerAdvice . java file to remove unused code to streamline the codebase
refactored path handling in AntCompiler to utilize a quotePathList method to improve code readability and maintainability by centralizing path
added scrim animation animation properties and updated background color handling in Launcher and AllAppsBackgroundDrawable classes to enhance user experience by allowing dynamic alpha
updated validation logic in TypeInferenceUtils and added new test cases in TypeInferenceUtilsTest to ensure accurate validation of integer values and improve test coverage for
chore ( deps ) : upgrade gapic - generator - java to 2.1 . 0 and update gax - java to 2.16 . 0 (
added tests for path prefix handling in WindowsPathParser and PathOps classes to ensure correct handling of path prefixes and improve error handling
refactor MulticastSocket initialization to use MulticastSocket instead of InetSocketAddress to improve code readability and maintainability
replaced direct calls to ` writer . close ( ) ` with ` writer . close ( ) ` in ` TestWildcard . java ` to improve code
refactor the return statement in IndexColorModel . java to use a clone method to improve code readability and maintainability
changed access modifier of ` deriveCollectorName ` from private to protected in ` ProfilerCollector ` and added a new test class ` TestCollector `
added a method ` requiresTypeHint ` to check for ` Collection ` instead of ` handledByCustomConverter ` in ` MappingMongoConverter ` to
added PerfStatsCollector import and measure the creation of the proxy factory in the ProxyMaker class to improve performance by providing a measure for the proxy
added @ SuppressWarnings ( " unchecked " ) annotations to GroovyEngine . java to suppress unchecked warnings during compilation
added ConnectException to the ConnectionException message in TCPConnection . java to improve error handling and provide clearer feedback on connection exceptions
refactor reinflateWidgetsIfNecessary ( ) method to use getWorkspace ( ) instead of reinflateWidgetsIfNecessary ( ) to improve
added a new file ` DeleteInsideFileDialogTest . java ` that tests the ` DeleteInsideFileDialogTest . java ` class to test file
replaced Display . update ( ) with Display . processMessages ( ) in LwjglAbstractDisplay . java and removed unused imports in Test
added exception handling for screenshots in various test classes to improve error handling and ensure proper handling of screenshots in the user interface
added methods , methods , and method checks in TestIgnorance . java to ensure proper handling of environment variables in tests
removed the pointer parameter from the fling method in ScrollPane . java to simplify the method signature for better readability and maintainability
added null check for pageable in QueryDslJpaRepository to avoid potential NullPointerException when pageable is null
added a ` computeMemorySize ` method to ` MemoryManager ` and its corresponding test cases in ` MemoryManagerTest ` to ensure that memory size
increased test timeout from 2000000 to 20000 in JMSPublisherConsumerTest . java and PublishJMSTest . java to enhance test reliability by
refactor SnowballAnalyzer class to improve code organization to enhance maintainability and readability of the code
refactor previous index assignment logic in StreamingAggTemplate . java to improve code readability and maintainability
added a static method ` pluginErrorMessage ` to handle null checks in ` BytecodeParser . java ` to improve error handling by throwing an Graal
added a default method ` stream ` to ` StreamSupplierComponent ` to enhance the functionality of ` StreamSupplierComponent `
updated log messages in MediaMonitor . java to improve clarity and consistency to enhance clarity and maintainability of log messages for better debugging
refactor constructor methods in InjectorProxy and StandardInjectorProxy to use InvocationTargetException instead of void to improve code clarity and maintainability by centralizing
removed the call to out . close ( ) in FlinkStreamingCreateFunction . java to ensure proper resource management and prevent potential resource leaks
added unit tests for CREATE TABLE and ALTER INDEX idx _ t _ fb in ShowStatement and UnsupportedStatement to ensure proper handling of SQL creation and
replace null with ImmutableList . of ( ) in AppleTest . java to ensure proper handling of null values and avoid potential NullPointerExceptions
added Quality Distribution test to the NamedSetTest class to enhance testing capabilities for Quality Distribution
refactor websocket connection handling in DeconzBridgeHandler and WebSocketConnection classes to improve clarity and consistency to enhance code readability and maintainability by central
replaced null attributes with removeAttribute methods in AbstractProcessingFilter . java to improve code readability and maintainability
hbase - 14264 testregionreplicareplicationendpoint . testregionreplicareplicationendpoint . testregionreplicareplicationendpoint . testregionre
added PMS configuration to FormatRecognitionTest . java to ensure proper handling of PMS configurations
added a method to create OVA data disk templates in TemplateService and updated event handling in ObjectInDataStoreManagerImpl and ImageStoreUploadMonitorImpl
updated import statements in PrincipalAttributeRegisteredServiceUsernameProviderTests . java to use JUnit4 instead of CasCoreServicesConfiguration to improve code clarity
added @ Override annotations to CentralAuthenticationServiceImpl , RemoteCentralAuthenticationService , RemoteCentralAuthenticationService , RemoteCentralAuthentication
updated SQL queries in AppendOnlySchemaIT . java for consistency to improve readability and maintainability of the code
added a check for document count mismatches in SegmentReader . java to ensure that document count mismatches are handled correctly
updated the ` logException ` method to accept an ` exception ` and added logging methods for exception logging to enhance exception handling and provide more context for
updated FilamentFactory . java to handle shorter lengths for staves w / no starting barline to improve clarity and maintainability of the
changed the default value of ` handleFileUploads ` from ` true ` to ` true ` in ` VertxPlatformHttpEngineConfiguration ` to
added a test method ` doFilterDefaultRequireCsrfProtectionMatcherAllowedMethodsCaseSensitive ` to ` CsrfFilterTests ` to ensure
removed static fields from HotSpotObjectConstantImpl . java to simplify code and improve readability by eliminating unnecessary static fields
refactor SpellCheckComponent and SpellingResult classes to use ' addFrequency ' instead of ' add ' to improve code clarity and maintainability by
replaced Instant . now ( ) with Instant . withWatermark ( now ) in FileIO . java to improve readability and maintainability of the code
changed the type of ` cteDefinition ` from ` cteDefinition ` to ` cteDefinition ` in ` SqmCteStatement
added import statement for java . sql . ResultSetMetaData in QueryCompilerTest . java to improve code readability and maintainability
added root path to the library path in JsLibrary . java to enhance functionality by allowing the library to be located within the project
updated slider size from 180 to Math . PI in RailButtonConfig . java to ensure consistent rendering of sliders in the application
updated the drawEncloser method from 8f to 9f in OverlayRenderer . java and added Timers . run ( ) to improve
added expressionLanguageSupported ( true ) method to KerberosProperties . java to enhance code readability and maintainability
removed the ` setRemotePlayersHeldItemMountPointScale ` method from the ` setRemotePlayersHeldItemMountPointComponent ` method to
refactor setupViews method to include ScrimView and improve scrim view handling to enhance code clarity and maintainability by utilizing ScrimView
added methods to enable periodic materialization enabled in ExecutionConfig and StateChangelogStateBackend classes to enable periodic materialization by enabling periodic materialization
added a ` value ` field to the ` ProtocolParameter ` and its getter / setter methods in ` ProtocolParameter ` and ` ParamTagHandler `
added a new test method ` testChunkingWithHead ` to ` TestHttpServlet ` to verify chunking behavior to ensure proper handling of header
added a boolean variable ` isBumped ` to the ` parseDetails ` method and modified the ` parseDetails ` method to return a boolean to
added headers for " application / x - www - form - urlencoded " in SwitchToPostInterceptor . java and SearchRequestUnitTest . java to
refactor EmbeddedClientConnector to improve code readability to enhance maintainability and maintainability of the code
added logging for SQLFeatureNotSupportedException in PhoenixResultSet . java to improve error handling for SQLFeatureNotSupportedException
added null checks for AndroidNet in AndroidDaydream . java to ensure proper initialization of AndroidNet instances
updated variable names from " numRowsIndexed " to " numRowsConsumed " in LLRealtimeSegmentDataManager . java to improve clarity and consistency in
removed false parameter from getDepositAddresses calls in KrakenAccountService . java to simplify code and improve readability
hbase - 14279 remove prefixtreecodec from TableMapReduceUtil . java to streamline the codebase
added a ` inflationFailed ` flag and modified the ` root ` variable in ` DesignerActivity ` , ` AttrInfo ` , and ` XMLLayout
refactor PushbackInputStream class to improve code readability to enhance maintainability and maintainability of the code
refactor the LoweringToolBase class to be abstract and improve code readability to enhance maintainability and maintainability of the code
updated the message format from download _ folder _ failed _ content to sync _ folder _ failed _ content in ErrorMessageAdapter . java to improve clarity
replaced ` Scanners . among ( " \ n " ) . source ( ) ` with ` Parsers . string ( " \ r \ n
updated the method call from ` reader . getDeletedDocs ( ) ` to ` MultiFields . getDeletedDocs ( ) ` in ` ReadTask
added refreshFlags and setBoundRefresh ( ) in SimpleBatchNode . java to ensure correct refresh behavior for batch operations
refactor isGuaranteedSafepoint method checks to use isUninterruptible ( ) instead of isGuaranteedSafepoint ( ) to improve code
refactor LwjglWindow to use IntBuffer for framebuffer size callback to improve code readability and maintainability by centralizing framebuffer size
updated the calculation of centerTaskParallaxToRight and otherAdjacentTaskParallaxOffscreen in LauncherAppTransitionManagerImpl
refactor LiteralNode to use NullLiteralNode instead of NodeLiteralNode to improve code readability and maintainability by reducing redundancy
added setLength method to CompoundFileWriter and IndexOutput classes to ensure proper file length calculation for file operations
updated AndroidNdkScriptGenerator and LwjglDebugStarter to use Mpg123Test instead of SpriteBatchShaderTest to
updated source key handling in AWS2S3Consumer , AWS2S3Producer , and AWS2S3Producer to use sourceBucket instead of
added permission checks for " * " permission in RuleBasedAuthorizationPlugin and updated test cases in TestRuleBasedAuthorizationPlugin to improve permission handling and ensure correct
updated ZookeeperClientServerRegisterRepository to handle null data and updated URIRegisterDTO handling to improve robustness and prevent potential NullPointerExceptions
replaced ` makeDeepMock ` with ` deepStub ` in ` ReturnsDeepStubs . java ` to simplify the code and improve readability by
updated byte handling in ` Runtime . java ` to use ` size ( ) ` instead of ` toByteArray ( ) [ 0 ] ` to ensure that
updated debug logging message in BibEntry . java to improve clarity and consistency to enhance logging clarity for date parsing
updated the ` mapPBEAlgorithmToOID ` method to throw an ` throws NoSuchAlgorithmException ` instead of an ` throws NoSuchAlgorithmException `
refactor TIFFReader to use inputLength instead of length to improve readability and maintainability of the code
added validation for job parameters in CommandLineJobRunner and added a test for invalid parameters in CommandLineJobRunnerTests to ensure that job parameters are not provided
updated string comparisons in SmtpTests , MailTests , and MailTests to ensure consistency in string comparisons
updated case statements in ExtendedConnectionDataSourceProxy . java for consistency to improve code readability and maintainability
updated the lastSequenceId and getLastSequenceId methods in LongSequenceGenerator . java to use AtomicLongFieldUpdater instead of synchronized synchronized to improve thread safety and
added a new file ` Test . java ` that implements a method to calculate the sum of the value of a string to facilitate testing of the sum
updated SDK configurations in ShadowWifiManagerTest , WifiUsabilityStatsEntryBuilder , and WifiUsabilityStatsEntryBuilder to
added a new Java file ` Solution . java ` with a new Java class ` Solution . java ` to provide a solution for evaluating queries in a
refactor columnFamilyStores and Gossiper classes to use ConcurrentMap instead of Map to improve concurrency handling and prevent potential NullPointerExceptions
refactor taskbar handling logic in TaskbarManager . java to improve code readability and maintainability
refactor SyncFutureCache class to improve code organization to enhance maintainability and readability of the code
updated the DEFAULT _ DUBBO _ PROTOCOL _ VERSION from " 2 . 0 . 1 " to " 2 . 0 . 2 " to
updated UselessStringValueOfRule to use ASTLiteral instead of ASTLiteral to improve code clarity and ensure proper handling of string literals
added a new test method ` testEllipseNoseconeDrag ` to ` SymmetricComponentCalcTest . java ` to verify the behavior of the
added a new constant ` targetMaxTypeShardSize ` and updated constructors in ` HollowProducer ` to include a ` targetMaxTypeShardSize
added new versions " 5 . 5 - cfs " and " 5 . 5 - nocfs " to TestBackwardsCompatibility . java to
refactor CompilationTask class to improve code readability to enhance maintainability and maintainability of the code
updated assertions in TestSemanticAnalysis and DDLTask classes to improve clarity and consistency to enhance code readability and maintainability
added a call to ClearDatabaseChangeLogTableStatement in AbstractJdbcDatabase . java to ensure proper handling of database change log tables
refactor RestClient and CallPath classes to use version variables for URL and version to improve code readability and maintainability by centralizing version handling
refactor exception handling in PhoenixDriver . java to improve thread safety and ensure thread safety to ensure thread safety when the Phoenix driver is closed
refactor exception handling for UnsupportedOperationException in TouchApp , EuclidianViewM , and other classes to improve code clarity and maintainability
added a after method to delete all files in ConflictsResolveActivityIT and modified FolderPickerActivityIT to improve user experience by ensuring all files
[ gr - 24335 ] fix graalization grouping in nativeimagegenerator and compilequeue .
added a check for the length of ` copy ` in ` StringHelper . java ` and a corresponding test in ` StringHelperTest . java `
updated JpaQueryCreator to handle NOT _ CONTAINING types and added a new method to check for NOT _ CONTAINING to
updated authentication logic in SipSecurityManager and modified branch ID push logic in SipSecurityManager to improve authentication handling and ensure correct branch ID push
added a call to dispatch a message in the P25MessageFramer class to enhance message dispatching capabilities
added null checks for handler and exception handler in WebSocketImpl . java and added a new test for clearClientHandlersOnEnd method in WebsocketTest
[ dspace - 13232 ] [ test ] restore auth system state in indexeventconsumer and DiscoveryIT
replaced calls to ` getResources ( ) ` with ` getPaddingForWidget ` in ` AppWidgetResizeFrame . java ` and ` Launcher .
added hideAllApps ( ) methods to TaskbarUIController , TaskbarAllAppsController , and BaseActivityInterface classes to enhance user
removed the synchronized block from the launch method in CrawlJob . java to streamline the code by eliminating unnecessary synchronization
updated the calculation of ` Point ` from ` getX ( ) ` to ` getY ( ) ` in ` JavaSEPort . java ` to ensure
refactor notification handling in UploadService to use startForeground instead of notificationManager to improve code readability and maintainability by reducing redundancy
added a new test method ` testStaticFinal ` to ` ExcessivePublicCountTest . java ` to ensure proper handling of static final values
hbase - 14279 set hbase . client . retries . number to 3 for test hbase . client . retries . number
change log level from info to debug in TransactionalMessageServiceImpl . java to improve clarity and consistency in logging
added exception handling for FileNotFoundException in ResourceUtils . java and updated logging statements in AbstractCipherExecutor . java to improve error handling and ensure proper logging
added a new ` BittrexTickersResponse ` class and updated ` BittrexMarketDataServiceRaw ` and ` BittrexMarketDataService
refactor enum constant retrieval logic in EntityEntry . java to improve code readability and maintainability
removed the ` endpoint ` parameter from the ` unregisterSession ` method in multiple classes to simplify the session registration process and improve code readability
added ` ` [ ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '
refactor stylesheet handling in ResourceService and ResourceHandler classes to use HttpContent for improved resource management to enhance code clarity and maintainability by centralizing
added a call to clearIndex ( ) in TestFiltering . java to ensure that the index is cleared before proceeding
updated the method call from ObjectParameterStrategy to PointerParameterStrategy in X86MethodGenerator . java to ensure compatibility with PointerParameterStrategy and improve method
updated the check for CockroachDatabase in the CreateSequenceGenerator class to include CockroachDatabase instead of PostgresDatabase to ensure
removed the ` isEnum ` flag from the ` isEnum ` method in ` ObjectStreamClass . java ` to simplify the code and improve readability
updated the ` UnsatisfiedLinkError ` exception to ` SymbolNotFoundError ` and added a new ` SymbolNotFoundError ` class in ` Library . java `
added conditional checks for only pseudo fields in BinaryResponseWriter . java to ensure proper handling of non - pseudo fields in the search process
added handling for PING and PONG in WebSocketImplBase . java and a test for WebSocketPausePing in WebSocketTest . java to ensure
updated NON _ IDENT _ ESCAPES string from " $ ^ " to " $ ^ " in RegExpScanner . java to ensure consistent
refactor DnsResolverProvider and HostnameResolutionTest to use authoritative DNS cache instead of DnsServerAddressResolverBuilder to improve cache management and ensure
added @ ConditionalOnClass annotation to TraceMessagingAutoConfiguration . java to enable debugging of messaging tracing in the application
updated SQL query logic to use ` quoteIdentifierString ` instead of ` isDB2 ( ) ` to improve code readability and maintainability by
refactor import statements in IDELanguageClientImpl , EditorTextActionMode , EditorTextActionWindow , and EditorTextActionMode to improve code
added a conditional check for ' / ' character in XMLLightweightParser . java to ensure proper handling of ' / ' characters in XMLLightweight
removed the setVisibility method from TouchCharInput . java to simplify the code and improve readability
added a null check for the current user before checking if it is null to prevent potential NullPointerExceptions when the current user does not exist
added a conditional check for the index before setting the slot and set members in JSObjectLinker . java to improve code readability and maintainability
replaced ` RandomStringGenerator ` with ` DefaultRandomStringGenerator ` and updated constructors in ` DefaultUniqueTicketIdGenerator ` and ` HostName
added @ Deprecated annotation to SecurityConfig class to indicate that security configurations are outdated and should not be used
added @ Deprecated annotations to multiple classes to indicate that these classes are deprecated and should not be used for removal
deleted JoglDebugAdaptor . java and removed JoglDebugAdapter . plumbJoglDebug ( ) from RocketFigure3d .
added ` toString ( ) ` methods to ` ExtraFieldPropagation ` , ` AWSPropagation ` , and ` AWSPropagation ` classes to provide clearer
added PendingIntent handling in FileDownloader , FileUploader , and FileUploader classes to ensure proper handling of content intents
replaced the ` nextOrd ` method with a ` set ( ) ` method in ` Lucene80DocValuesProducer . java ` to improve code
refactor DateTimeFormatter class for improved readability to enhance maintainability and maintainability of the code
updated desktop properties in WToolkit . java to use Integer . valueOf ( 50 ) instead of Class . forName to improve code readability and maintainability
updated the ` setAdministratorCredentials ` method to throw an ` KerberosAdminAuthenticationException ` for null and empty credentials to improve robustness by ensuring
added a constant MAX _ WIDTH _ SCALE _ FOR _ LARGER _ SCREEN and adjusted width calculations in BaseWidgetSheet . java
added rendering logic for sketch window color in PSurfaceJOGL . java to ensure proper rendering of sketch window color
refactor Hashing class to improve code readability to enhance maintainability and maintainability of the code
updated the accept method from ` contains ` to ` endsWith ` in ` FileSenderFactory . java ` to improve clarity and consistency in file handling logic
updated drawable names in UserInfoActivity . java to use string resources instead of android . os . Build to improve code readability and maintainability by
added null check for newType in J . java to prevent potential NullPointerExceptions when type is null
updated the ACTIVITY _ START _ DELAY constant from 500 to 800 in Launcher . java to increase the activity start time for better user experience
added a new constant for WEBAPP _ HOME in SolrJettyTestBase and updated path initialization in JettyWebappTest to ensure
removed the diameter assignment and added clearing of selectedMotorSet in ThrustCurveMotorSelectionPanel . java to streamline the code by eliminating unnecessary
added BufferUtil . clearToFill ( buffer ) method to ByteBufferPool . java to ensure proper resource management and prevent potential memory leaks
updated the ` processNotificationRules ` method to use ` originatorId ` instead of ` EdgeEventActionType ` and added a new test for
updated attribute names from " authorization . ldap . groupBase " to " authentication . ldap . groupObjectClass " and " authentication . ldap . group
added deleteExchange ( " x " ) and queueDelete ( " q " ) in DurableOnTransient . java to ensure proper deletion of the
replaced TIMEOUT . getSize ( ) with TIMEOUT . get ( ) in BulkSlotProviderImplTest . java to improve error handling and ensure proper
updated connection handling in ServerInfoService . java and added exception handling in ServerInfoService . java to improve error handling and provide clearer error handling
refactor CompositeHandlerAdapter to improve code readability to enhance maintainability and maintainability of the code
refactor Quartz2Adapter to improve code readability to enhance maintainability and maintainability of the code
added error handling for IllegalStateException in SulongLibrary . java to ensure proper handling of IllegalStateExceptions
updated schema number from 24 to 630 in SecurityNamespaceHandler and XsdDocumentedTests to ensure compatibility with the latest Spring Security version and
replace ` helper ` with ` args ` in ` ConfigMappedNameResolverFactory ` , ` DiscoveryClientNameResolver ` , and ` DiscoveryClientName
added a check for non - empty annotations in JavacParser and added a new test class TestAnnotatedAnonClass to ensure proper handling of annotations
added a new class " com . sun . naming . internal . " to the CheckPackageAccess class to enhance the functionality of the CheckPackageAccess
changed the strict value of ` strict ` from false to true in ` StaxEventItemReader . java ` to ensure that the strict flag is
added a boolean array for ` isExhausted ` and updated the readPartition method in ` OfflineSorter ` and ` TestOfflineSorter `
refactor ActionResetingPool class for improved readability to enhance maintainability and maintainability of the code
added a condition to check if the color mode is null before returning it to avoid potential NullPointerExceptions when the color mode is null
refactor CellLayout to use a new method ` getReorderRadius ` to improve code readability and maintainability to enhance maintainability and maintainability
removed the call to showLoadingDialog ( ) in FileOperationsHelper and OCFileListFragment to improve code clarity and maintainability by centralizing
added a null check for uigestureFile before loading xmlLogs and recordsMap to prevent potential NullPointerExceptions when the uigesture
updated the ` doesNotMatch ` method to use ` Locale . getDefault ( ) ` instead of ` toUpperCase ( Locale . getDefault ( ) ) `
added a call to setListeners ( ) in XmlSuite . java to ensure listeners are correctly set to the result
added a new method ` loadWithNewGlobal ` in ` Global . java ` and updated related methods in ` ScriptFunctionImpl . java ` to
added a new method ` fromJsonString ` to ` StarTreeIndexSpec ` and modified ` TableConfigTest ` to use ` ObjectMapper ` for JSON
added import statement for ObjectPostProcessorConfiguration in HttpSecurity , HeadersConfigurer , and Saml2LoginConfigurer , and Saml2LogoutConfigurer to
updated regex patterns in AndroidFileHandle , GwtFileHandle , FileHandle , FileHandle , FileHandle , FileHandle , and FileHandle classes to
kristianrossiang : fix npe in operator .
added imports for FieldCache and purgeFieldCache in TestDistributedSearch . java to ensure that the field cache is only cleared when there ' s
added a new test method ` testBoundaryMessageEventOnSubprocessAndInsideSubprocess ` in ` MessageBoundaryEventTest . java ` to ensure
refactor ` resolveInterfaceOrVirtualCall ` and ` resolveStaticCall ` methods to use ` target ` instead of ` recvType ` to improve
refactor Queue and PolicyEntry classes to use MessageGroupHashBucket instead of SimpleMessageGroupMap to improve code clarity and maintainability by utilizing
added constants for NETSCAPE _ SLOT _ ID and PRIVATE _ KEY _ SLOT _ ID and PRIVATE _ KEY
added a new add method to manage widgets in Layout and GdxRenderer classes to enhance functionality by allowing widgets to be added to the dialog group
added JUnit Ignore annotation to UnalignedCheckpointITCase . java to temporarily disable tests that are no longer needed
added new imports for SourceDataLine , Clip , and Transmitter in JDK13Services . java to ensure proper handling of type classes
added a condition to check if a keyword does not match the htmlFilename to ensure proper handling of keyword references in the code
added a check to determine the size of multiple pairs in MulticastProcessor . java to ensure proper handling of multiple pairs in the multicast process
removed the ` getStartCount ( ) ` method from ` SegGraph ` , ` SegToken ` , and ` WordDictionary ` classes to
updated telegraf escape logic in FlavorStatsdLineBuilder . java and added a new test class FlavorStatsdLineBuilderTest . java
updated TRIBES _ MBR _ BEGIN and TRIBES _ MBR _ END bytes in MemberImpl . java to ensure proper port
replaced ` OperatorMulticast ` with ` OperationMulticast ` in ` Observable ` , ` OperatorMulticast ` , and ` OperationMulticast ` classes to improve code
updated the message sending timeout from 1 to 100 in EventBusTracerTestBase . java to allow more time for the message sending process
added a try - finally block in VertxTestBase . java to ensure proper resource management and prevent potential resource leaks
added a synchronized method ` destroy ( ) ` to ` SessionFactoryServiceRegistryImpl ` class to ensure proper initialization of the ` cachedEventListenerRegistry `
refactored the ` openLocalhost ` method to use ` getJwtTokenFromLocalStorage ( ) ` instead of ` openHomePage `
refactor IValueUtilsTest to use NDArray instead of PtNDArray to improve code readability and maintainability by centralizing
added task stack tracking functionality to RecentsView and removed the onEnterAnimationComplete method from BaseActivity to improve user experience by providing a clear effect
added a new test class ` DefaultSplitCharacterProfilingTest ` to validate the optimization of the checkDatePattern method to ensure that the optimization of the
added null check for factoryBean properties before setting it to prevent potential NullPointerExceptions when factoryBean is not initialized
refactor animation handling in ContentFillItemAnimator to use a new method ` endPendingAnimation ` to improve code readability and maintainability by central
added logging for playback duration in the LauncherAnimationRunner class to enhance debugging capabilities by providing more detailed duration calculations
added a check for BailoutOnException in C1XCompilation . java and added a new BailoutOnException flag in C1
updated signup and passwd variables from " / forgot _ password " to " / forgot _ password " in Links . java to
[ hotfix ] [ runtime ] rename slotprofile . previousexecutiongraphallocations to reservedallocations
replaced ` SimpleDateFormat ` with ` getOnlyFormat ` in ` TimeConverter . java ` to improve code readability and maintainability by centralizing
add GC _ NODATA property to GeoTiffReader and add test cases for retrieving GC _ NODATA in GeoTiffReaderTest to ensure
added null checks for exceptionSourceSection in LLVMBasicBlockNode and updated the source section creation logic in LLVMWriteNode to ensure
updated return statement from ` toString ( ) ` to ` toByteArray ( ) ` in ` JdbcExecutionContextDao ` and ` DefaultExecutionContextSerializerTests ` to
removed the blockUntilConnected ( ) method from TestPathChildrenCache . java to improve thread safety and ensure proper handling of connection state changes
refactor ArrayTypeHandler to improve code readability and maintainability to enhance maintainability and maintainability of the code
replaced RegexpTunnel with REProgram and refactored prefix retrieval logic in JakartaRegexpCapabilities . java to improve code readability and maintainability by
updated application initialization to use Application . class instead of null to ensure compatibility with Application . class
add a new test method ` testNPEOnMutableGlobal ` in ` Misc2Test . java ` to verify global behavior to ensure proper
added validation checks for asset names and descriptions in AssetIssueActuator and TransactionUtil classes to ensure that asset names and descriptions are valid
add check for parent algorithm in CopyPaste . java to check if the parent algorithm is not a textfield to ensure that the correct parent algorithm is
updated descriptions in LGWebOSActions , LGWebOSUpnpDiscoveryParticipant , LGWebOSUpnpDiscoveryParticipant , LGWebOSUp
replace setSeedNodes and setActiveNodes with setActiveNodes and setActiveNodes and setActiveNodes to setActiveNodes and setActiveNodes to
updated assertions from " posToStartOffset " to " posLen " and " posLength " in BaseTokenStreamTestCase . java to improve clarity
updated the ` getNextTime ` method to include a ` modulus ` parameter and modified the ` increment ` method in ` TimeBasedTriggeringPolicy `
added method ` performItemClick ` to ` ShadowAdapterView ` , ` ShadowListView ` , and ` findIndexOfItemContainingText ` to
pdfbox - 3252 : fix bug in pdfbox - 3252
added null check for loopScope and modified the afterMethodScope method handling in GraphDecoder . java and PEGraphDecoder . java to improve robustness
updated HttpSessionDestroyedEvent to use getSession ( ) instead of getSource ( ) and added a new test class HttpSessionDestroyedEventTests for security context retrieval to
added a test method to change the service name in zipkin in the zipkin span reporter to ensure that the service name changes in the zipkin
added logging statements in JavaInMemoryFileManager , JavaInMemoryFileManager , and JavacToJarStepFactory classes to improve logging clarity and
updated ` SeparatedProjectGenerator ` and ` SeparatedProjectsGenerator ` classes to use ` SeparatedProjectsGenerator ` instead
updated the tryLock method from 4 to 10 in ClientMultiMapLockTest . java to increase the time for locking in the test
updated ` ConfluentSchemaRegistryDeserializerProvider ` to include ` DEFAULT _ CACHE _ CAPACITY ` parameter and modified ` of ` of ` method
replaced remind with checkAtStartup in UpdateInfoDialog . java to improve clarity and maintainability of the code
refactor NodeGenerator to utilize ImmutableList for strongKeys , softValues , and weighed methods to improve code readability and maintainability by centralizing
refactor property retrieval logic in CascadingActions . java to improve code readability and maintainability
added support for the ` getProto ` and ` setProtoCheck ` methods in ` ScriptObject . java ` to enhance the functionality of the `
updated DEFAULT _ READ _ MODE from " heap " to " mmap " and added logging for segment loading in ImmutableSegmentLoader to improve clarity and
added imports for ByteArrayTemplate for ByteArrayTemplate in ArrayTemplateBuilder . java to ensure proper initialization of ByteArrayTemplate instances
added a new ` Hipchat ` class and modified ` SamlServiceProviderProperties ` to extend ` Hipchat ` and ` CasSaml
updated the ` commandRegistryUrls ` variable to use a ` Set < URL > ` instead of a list of ` List < URL > `
added logging for uncovered http methods in ConstraintSecurityHandler . java to improve logging clarity and ensure proper logging of uncovered http methods
updated the login method signature from ` checkLoggedIn ( ) ` to ` checkLoggedIn ( ) ` in ` SvnRepositoryConnector ` to ensure
camel - 16263 : camel - activemq - add test for session transacted without transaction manager
updated import statements from ` GetStoragePoolCapabilitiesAnswer ` to ` GetVmVncTicketAnswer ` in ` VmwareResource . java `
refactor Timers class to improve code organization to enhance maintainability and readability of Timers class
replaced ` OVERWRITE _ EXISTING ` with ` APPEND _ TO _ ZIP ` in ` DefaultDefectReporter . java `
removed deprecated tokens from UAX29URLEmailTokenizer . java to streamline code and improve maintainability
updated ` ScriptObject ` to use ` ScriptObject ` instead of ` Map < Object , Object > ` in ` ScriptObject ` and ` Context
refactor EventBusMetrics class for improved readability to enhance maintainability and maintainability of the code
added a method to retrieve the default locale from the EPerson in the I18nUtil class and updated its usage in WorkflowManager to improve locale
updated JaversTransactionalDecorator to implement InitializingBean and modified the ensureSchema method to implement InitializingBean instead of PostConstruct to enhance the
removed null check for pgTypeName in TypeInfoCache . java to simplify code by eliminating unnecessary null checks
added multiple server configurations to the ScopedHandlerTest class to ensure proper handling of server configurations
added a constructor to the CallTimeoutException class and updated related imports in multiple classes to enhance error handling and provide clearer feedback during call timeouts
updated condition in RestLoginProcessingFilter to check if the login request password is empty to ensure proper handling of blank credentials and prevent potential NullPointerExceptions
updated permission check from Objects . equals ( " , " * " ) to Strings . equals ( " * " ) in CommandMap .
replaced ` encoding ` with ` sourceCharset ` and added ` setCharacterEncoding ` method in ` AbstractCompiler ` and ` ICompiler ` classes to
updated ` postLogin ` and ` getPostLogin ` methods to use ` String ` instead of ` byte [ ] ` to improve code clarity and
refactor simulation handling in GeneralOptimizationDialog to improve code readability and maintainability to enhance maintainability and maintainability of simulation management
camel - 14286 : camel - core - add contextreloadenabled property to configure contextreloadstrategy
updated logging statements in CommonTestUtils . java for improved clarity and consistency to enhance code readability and maintainability
refactor PrologSizeSanityCheck class for improved readability to enhance maintainability and maintainability of the code
refactor NearbyListFragment to improve code readability to enhance maintainability and maintainability of the code
added a check for ` markSupported ( ) ` before calling ` invokeSafely ( nonCloseable : : reset ` in ` RequestBody `
updated condition checks in EmbeddedNeo4jServer , Neo4jEmbeddedSettings , and TypeArgumentQualifier classes to ensure that allCandidatesAre
added null checks for CharacterMovementComponent and HealthComponent in MovementDebugCommands . java to improve robustness by preventing potential NullPointerExceptions
updated random methods in RandomLoadBalancer . java to include half length total weights instead of index to improve performance and maintainability of the randoming process
updated GsonParser and MetricsResourceTest to use ` @ SuppressWarnings ( " unchecked " ) ` instead of ` sb . toString ( ) ` to
updated param names from " gcmsort " to " desc " in ApacheHttpClientMediaWikiApi . java to improve clarity and maintainability of the
replace ` checkTransactionSynchStatus ( ) ` with ` pulseTransactionCoordinator ( ) ` in multiple classes to improve code readability and maintainability
replaced ` ReentrantLock ` with ` PipeTaskCoordinatorLock ` and added a new ` PipeTaskCoordinatorLock ` class in ` PipeTaskCoordinator ` to
added a conditional check for pre - instrumented jars in DefaultSdkProvider . java to ensure proper handling of pre - instrumented jars in
updated conditional statement from ' ! ' to ' ! ' in ExecDriver . java to improve code readability and maintainability
added checks for default value and required fields in IndexSchema . java and implemented a test for unsupported fields in BadIndexSchemaTest . java to ensure
refactor repair logic in StorageProxy . java to improve code readability and maintainability
updated ` addAllSystemIncludeRoots ` method to use ` Iterables . transform ` instead of ` ImmutableSortedSet . copyOf ` and added a
refactor AdaptableX509CertSelector to check for SKIDSensitive and SNSensitive fields in AdaptableX509CertSelector and ForwardBuilder
[ log4j2 - 132 ] remove unnecessary buffersize assignment from nosqlappender # getbuffersize ( )
removed the deprecated @ Deprecated annotation in GuiScreenEvent . java to indicate that the class is outdated and should not be used
refactor category removal methods in CategoryEditSearchRecyclerViewAdapter to improve code readability and maintainability
added a ServerCacheType parameter to the ` createCache ` method and updated related methods to accept ` ServerCacheType ` and ` ServerCacheType
refactor RocketComponent to reset massOverriddenBy and CDOverriddenBy variables to improve code readability and maintainability
replaced ` doCompile ` with ` post ` and added a ` destroy ` method in ` JavaCompilerService ` and ` SynchronizedTask ` to
refactor ` MultiThreadedBuildRuleResolver ` to use ` Supplier < V > ` instead of ` doCompute ( ) ` to improve code
added synchronization to the WanReplicationServiceImpl class and modified executor initialization in WanReplicationServiceImpl . java to ensure thread safety and prevent potential
added null checks for tPartition and tPartition in Partition and DDLSemanticAnalyzer classes to prevent potential NullPointerExceptions when tPartition is null
updated schema configuration from " schemas " to " schemaIds " in LocalServiceRegistryClientImpl and RemoteServiceRegistry to improve clarity and consistency in
added a new file ` FilesTest . java ` with tests for deleting files in ` FilesTest . java ` to ensure proper handling of
removed exception handling in ServerSocketAdaptor and SocketAdaptor classes to simplify error handling and improve code readability
updated the class name from " java . lang . System " to " Logger . class . getName ( ) " in SSLLogger . java to ensure
replace currentWorkingDirectoryList . clear ( ) with a method call to addWorkingDir ( ) to improve code readability and maintainability by centralizing
added a null check for the cn parameter in ItemInfo . java and updated mInsets in Workspace . java to ensure that mInsets is
changed the visibility of the ` GeneratedEntityDecorator ` class from public to private to allow external access to the ` GeneratedEntityDecorator ` class
updated the http path in SimplePostTool . java to improve clarity to enhance readability and maintainability of the code
refactor symbolic handling in AlgebraItem and add tests for maxCommand and minCommand in GeoSymbolicTest to improve code readability and
replaced ` ShutdownThread ` with ` Exception ` in ` JavaxWebSocketClientContainerProvider ` and updated exception handling in ` JavaxWebSocketClient
added a null check for the type check in the Linux . java file to ensure proper handling of null types in the application
added tearDown ( ) methods to JdbcTestBase and related test classes to ensure proper resource management and prevent potential memory leaks
added a method ` getSearchStr ` to retrieve the search string in ` RemoteBrowseHandler . java ` to enhance search functionality by allowing users to
removed the visibility of the neutral button in SetupEncryptionDialogFragment . java to improve code readability and maintainability
hhh - 13232 make countitems ( ) return true instead of 0
updated SQL statements in DDLTask . java to use ` ` ` instead of ` ` to improve code readability and maintainability by centralizing
added exception handling and logging for OAuth2 exceptions in CheckTokenEndpoint . java to improve error handling and logging for OAuth2 exceptions
refactor multiple renderer classes to improve code organization to enhance maintainability and readability of the codebase
updated IdentityZoneEndpointsIntegrationTests and JdbcIdentityZoneProvisioningTests to use ParameterizedTypeReference instead of serviceInstanceId to improve code clarity and maintainability by using
updated dismiss delay from 20000 to 10000 in ExtractionModelFrame . java , DataBrowser . java , and SQLConsole . java to improve code
added version requirements for Surefire 2 . 22 and JUnit 5 in ActionProviderImpl . java to enhance testing capabilities for Surefire 2 . 2
updated exception handling in WorkerShellStep to use RuntimeException instead of HumanReadableException to improve error handling clarity and maintainability of exception handling
[ hotfix ] [ test ] add @ publicevolving annotation to org . apache . flink . annotation
refactor StreamCepstrumSource class to improve code readability to enhance maintainability and maintainability of the code
added a condition to check if the index exceeds the size of the items to ensure that the index is less than the specified size
updated assertions in CloneHelperTest to use Parenthesis instead of OrExpression to improve clarity and consistency in assertion handling
added a confirmation flag for the DebugPaste command in DebugPaste . java to enable confirmation of the command for debugging purposes
updated exception handling in multiple configuration classes to use orElseThrow instead of get ( ) in JerseyWebEndpointManagementContextConfiguration and HealthEndpointReactiveWeb
updated focus logic in DrawEquationWeb . java to use MathQuillGGB instead of textareaJQ . find ( ' textarea '
replaced ` Arg ` with ` AbstractGoBinaryDescriptionArg ` in the ` GoBinaryDescription ` class to improve clarity and maintainability of the code
added null checks for application . env and application . env in Jooby . java to improve robustness by preventing potential NullPointerExceptions
replaced ` RetryListenerSupport ` with ` SecondDummyRetryListener ` in multiple classes to improve clarity and maintainability of retry listener handling
changed the visibility of the ` writeCounter ` method from private to private in ` ElasticMeterRegistry ` and modified the ` ElasticMeterRegistry
updated email and author variable from String to final in Contribution . java to improve clarity and maintainability of the code
updated the length calculation in JUnitFormatter . java to improve readability and maintainability of the code
added a check for the class type in the LinkedList instance to ensure proper initialization of elements based on the class type
added ` resource . getURL ( ) ` to the exception message in ` StaxEventItemReader ` and ` StaxEventItemReaderTests
refactored the TestMultiRenderTarget class to use PointLight arrays instead of Geometry to improve code readability and maintainability by centralizing the
added null check for currentProfile in DelegatedAuthenticationClientLogoutAction . java to avoid potential NullPointerExceptions when the currentProfile is null
replaced target . addNamespaceDeclaration with newElement . addNamespaceDeclaration in SaajStaxWriter . java to improve code readability and maintainability
added BigInteger implementations for BigInteger and BigInteger in KeyStoreManager . java to enhance security by utilizing BigInteger instances for better security
updated index handling in GImpactCollisionShape and MeshCollisionShape classes to use getIndicesAsList ( ) instead of getIndexBuffer ( ) to
set the engine version for the process definition in BpmnDeployer and its test to ensure that the process definition correctly reflects the current engine version
updated property names from " class . resource . loaders " to " class . resource . loaders " in SpecificCompiler . java to improve
refactor thread handling in CEntryPointSnippets and VMThreads to improve clarity and consistency to enhance code readability and maintainability by centralizing thread
added null check for the map in GenericUDFMapValues and created a new TestGenericUDFMapValues class to ensure proper handling of null
updated the method name from " interceptors " to " handlerInterceptors " in EndpointWebMvcAutoConfigurationTests . java to ensure consistency in naming
added support for oil power and lake generation rates in BCEnergyConfig and BCEnergyConfig classes to enhance energy generation capabilities and enhance energy generation
added logging for directory creation in ImportContext . java and improved error handling in JobQueue . java to ensure proper resource management and prevent potential resource leak
updated the exception message from " memoryRealm . readXml " to " sm . getString ( " memoryRealm . readXml " ) " to ensure
updated import statements in RegisteredService . java and removed unused imports in CRLDistributionPointRevocationCheckerTests . java to streamline
updated multiple constants in ZipConstants , ZipConstants64 , and ZipEntry classes to improve code readability and maintainability
refactor file system creation methods in ZipFileSystemProvider . java to improve code readability and maintainability by centralizing file handling logic
replaced the use of Box . createHorizontalStrut with Box . createHorizontalGlue for conditionPanel to improve code readability and maintainability by using
added a @ Override annotation to the createConnection method in FailoverUpdateURIsTest . java to improve code readability and maintainability
added SerializedName annotations for baseUrl , mirrorsList , repoId , and repoId in ServiceOsSpecific . java to ensure proper serialization of
added a ` deleteBook ` method to ` DatabaseAdapter ` and updated related test cases in ` BooksDbAdapterTest ` and ` ImportAsync
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
updated the method call from ` len ` to ` len - responseMsgPos ` in ` AbstractAjpProcessor . java ` to ensure correct
refactor admin server startup and shutdown methods in XMPPServer and AdminConsolePlugin to improve code readability and maintainability by centralizing context management
replaced ` unregisterHandlers ( ) ` with ` MessageConsumer < ? > ` in ` WebSocketImplBase . java ` to improve code readability and
set device _ id _ transformation _ method and enable _ id _ table _ log _ file in IoTDBDescriptor . java to ensure proper configuration
updated NUM _ DOCS _ PER _ TYPE from 2000 to 100 in ExitableDirectoryReaderTest and added a new DelayingSearchComponent
updated the condition for the mockTsp check in TestSignatureInfo . java to ensure that the mockTsp is not null to prevent potential NullPointer
refactor script code initialization in Transaction and Script classes to use witnessScript instead of data to improve code readability and maintainability by centralizing script
updated the expression from " / schema / types / fieldtype " to " / schema / types / fieldType " in IndexSchema . java to ensure
added null checks for valueCompleter in Completers . java and created a new OptionCompleterTest . java file to ensure proper handling of null values
refactor S3Utils to improve code readability and maintainability to enhance maintainability and maintainability of the code
change the type of ` String ` from ` String ` to ` int ` in multiple classes to improve clarity and consistency in naming conventions
refactor file handling in FtpHelper . java to improve code readability and maintainability to enhance maintainability and maintainability of file handling logic
updated import statements in TweetFragment . java for clarity to improve code readability and maintainability
updated the expected timestamp handling in AccessLogSupportTest . java to use TimestampLogEntry . create ( ) instead of TimestampLogEntry . create ( ) to
updated the path of the maryCacheFile from " testfiles - deleteme " to " tmp / testfiles - deleteme " to ensure
removed null check for subscribers in SettingImpl . java to simplify code and improve readability by eliminating unnecessary null checks
added null check for marshaller in AbstractSamlObjectBuilder and updated exception handling in AbstractSaml10ResponseView to improve robustness by preventing potential NullPointer
replaced printStackTrace ( ) with LogUtil . warn ( ) in DataBrowser . java to improve logging clarity for better debugging
added a check for assetsDirInDevMode without trailing slash in DevMode and updated the AssetsControllerTest to ensure that the asset directory is
added writeOptions parameter to RocksDBKeyedStateBackend . db in RocksDBKeyedStateBackend . java to enhance data handling by
updated the default format string from " value - tag - index " to " value - index " in CoreLabel . java to ensure consistency with the
updated method names from " dijkstrabi " to " dijkstrabi " in the GraphHopper class to improve clarity and
updated the ` nativeSecp256k1 ` and ` nativeAltbn128 ` from ` false ` to ` true ` in multiple classes to
replaced DuclsSandboxTest with SandboxTest for consistency to improve code readability and maintainability
camel - 14263 : camel - cxf : use exchange . setexception instead of log
changed the access modifier of the forwardPropagateTree method from public to public to allow access to the forwardPropagateTree method
updated the query string in JDBCExample . java to include a range of 20ms instead of a single parameter to ensure that the query correctly reflects the
added validation for the project path in DefaultModelValidator . java to ensure proper handling of file location during profile activation
refactor Style class for improved readability to enhance maintainability and maintainability of the code
added a boolean flag ` isZoom ` and modified the ` onKeyDown ` method in ShareActivity . java ` to enable zooming functionality for better
added a check for deprecated fields in the Json class to ensure proper handling of deprecated fields
added animation functionality to the LauncherFragment class to enhance user experience by providing feedback when the launcher is not running
updated the method name from " readTokenStorageFile " to " readTokenStorageFile " in HadoopModule and Utils classes to improve clarity and
added progressable parameter to the createSequenceWriter method in Utilities . java and HiveIgnoreKeyTextOutputFormat . java to enhance progress handling by allowing progress
updated string formatting in SourceCoordinatorProvider . java to improve clarity to enhance readability and maintainability of the code
added functionality to remove the contribution from the ContributionListPanel to improve user experience by ensuring the contribution is removed from the panel
updated the ` HyervisorTemplateAdapter ` to use ` HypervisorTemplateAdapter ` instead of ` HyervisorTemplateAdapter `
added a check for the user ' s dir in RegularFileObject . java to ensure proper handling of the user ' s dir when it is
updated the calculation of the sample rate in DefaultAudioSink . java to ensure that the correct sample rate is set to 48000 instead of 48000
[ log4j2 - 132 ] filter map message in log4j2 - log4j2 - log4j2 - 4
refactor VerificationInOrderWithCallsTest . java to improve code readability and maintainability
updated the ` setFromAxis ` method call from ` axis . z ` to ` axis . x ` in ` Quaternion . java ` to improve
updated the name of COLLECTION _ DELIM from " colelction . delim " to " collection . delim " in serdeConstants .
added a new test method ` testListenerConnectedAtStart ` to ` TestFrameworkBackground ` for handling connection state changes to ensure proper handling of connection
updated type handling logic in DocRenderer . java and added new test cases in PHPCCDocumentationTest . java to improve code readability and maintainability
added a boolean flag ` mIsOneHandedModeSupported ` and modified condition checks in ` RecentsAnimationDeviceState . java ` to improve
added onDetachedFromWindow method to AppsCustomizePagedView to ensure proper cleanup of AppsCustomizeAsyncTask instances
added a dictionary parameter to the Morfologik analyzer and updated the MorfologikFilter constructor to include a dictionary resource parameter to enhance the
refactor error handling in ResultSetTest . java to improve clarity and consistency to enhance code readability and maintainability
removed the debug flag from the InitializeProjectMessage constructor in GradleBuildService . java to simplify the initialization process by removing unnecessary debug logging
updated ` preventedByLocking ` and ` preventedByMVCC ` to use ` AtomicBoolean ` instead of ` AtomicReference < Boolean > ` to improve
refactor tooltip handling in ComponentTreeRenderer to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated the await method from 5 seconds to 10 seconds in ZipkinStreamTests . java to improve code readability and maintainability
refactor DeviantartRipper to use ConfigString for username and password to improve code readability and maintainability
removed the array of KNOWN _ GOOGLE _ SIGNATURES from the PackageUtils class to simplify the code and improve readability by
updated the method call from ` commonApp . createSolutionBusiness ( ) ` to ` commonApp . createSolutionBusiness ( ) ` to ensure proper
added a method to notify window state changes in WWindowPeer . java to ensure proper event handling for window state changes
added description setting for the email description in EntityGroupKeyContentFormatter and TestEntityGroupKeyEmailContentFormatter to enhance user experience by providing a clear
updated the method call from ` remove ( sel ) ` to ` data . remove ( sel ) ` in ` UserData . java ` to ensure
updated language retrieval logic in Locale . java and added a new test case in LocaleTest . java to improve language handling and ensure proper handling of locale
updated the ` parse ` method to use ` parser . createUpdateVisitor ( ) ` instead of ` new ` UpdateVisitor ( database ) ` to
added a check for screen pinning active in the OverviewCommandHelper class to ensure proper handling of screen pinning state during execution
added a new variable ` mNoDataText ` and ` mNoDataTextDescription ` and updated text rendering logic in ` Chart . java `
added synchronization to checkHeadWritten and checkHeadWritten methods in Http1xServerResponse and Http2ServerResponseImpl classes to ensure thread safety during
refactor chunk handling logic in NettyResponse . java to improve code readability and maintainability
updated HTTP headers in multiple test classes to use " http " instead of " 1001 " and " http " to ensure compatibility with the latest HTTP
added ` keySet ` and ` values ` methods to ` RedissonLocalCachedMap ` and ` entrySet ` methods in ` RedissonLocalCachedMap
camel - 14263 : camel - jpa - add support for component creation in jpa endpoint
updated jumpSpeed assignment from fallSpeed to jumpSpeed in PhysicsCharacter . java and PhysicsCharacter . java to ensure consistency in jumpSpeed assignment
added a null check for reparsedFunction in Parser . java to avoid potential NullPointerExceptions when reparsedFunction is null
updated logging statements in BitstampPusherService and BitstampPusherService to improve clarity and consistency to enhance code readability and maintainability by
added a new constant ` OLD _ SEGMENT _ PATH ` and modified ` getOldUploadSegmentHttpURI ` to ` OLD _ 
updated the method call from ` findOne ( ) ` to ` findOne ( filter ) ` in ` MongoDbTailTrackingManager . java ` to ensure
added a method ` assertPredicateFails ` to ` LanguageTestSupport ` and implemented a ` assertPredicateFails ` method in ` Juel
added a bound to the alpha value in RecentsView . java to ensure the alpha value is correctly bound to 1
updated the version string from " version " to " version " in ManifestReversion . java to ensure compatibility with the latest version requirements
refactor DataSyncConfiguration class to improve code organization to enhance maintainability and readability of the code
added import for JavaSnippetRepository and initialized JavaSnippetRepository in JavaLanguageServer . java to ensure proper initialization of JavaSnippetRepository in the application
added a loop to update sums in StarTreeRecordStoreCircularBufferImpl . java to improve performance by avoiding unnecessary sum updates
updated URLs from " http : / / code . google . com / p / chromedriver / downloads / list " to " http :
updated PgEventConsumer , PgEventProducer , and PgEventProducer to use try - with - resources to improve resource management and ensure
replaced multiple imports from ` com . sun . synd . SyndCategory ` with ` com . rometools . rome . io
http : / / issues . apache . org / activemq / browse / amq - 2627 - add support for content - length header
refactor Dialog class for improved readability to enhance maintainability and readability of the code
removed the constructor of EnhancedRuntimeException from the constructor of EnhancedRuntimeException to simplify the constructor and improve code readability
added latch handling and improved exception handling in SocketAppenderTest . java to improve thread safety and ensure thread safety during debugging
camel - 14263 : camel - dsl - remove EventAdminEndpointBuilderFactory from endpointbuilders
refactor method types in ByteArray . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a method to disable input proxy in RecentsAnimationWrapper to enhance user experience by enabling input proxy management when touch is already in progress
removed the JUnit Ignore annotation from RestletDomainServiceTest . java to clean up the test code and improve readability
replaced ` currentIdx ` with ` resizeAndRehashIfNeeded ( ) ` in ` HashTableTemplate . java ` to improve code readability and
added a new file ` com . hazelcast . test . modulepath ` to the ` com . hazelcast . test . modulepath ` package to ensure
updated the ` getCompiler ( ) ` method in ` JavaLanguageServer ` and ` JavaServerConfiguration ` to include source directories to improve clarity and
removed the menu _ open _ web and mute _ hashtags from the MENU _ OPEN _ WEB menu to simplify the menu logic for
updated method names from ` nodeIsAncestorOfItself ` to ` nodeIsNotDescendantOfItself ` and ` nodeIsDescendantOfItself
updated the calculation of world coordinates in WorldEditPlayer . java to use Math . max ( 0 , pos . getBlockY ( ) ) instead of
updated the ` selfCheckDataTypes ` method to accept ` PathNotExistException ` instead of ` DataTypeMismatchException ` to improve error handling and ensure
updated formatting in JavaCompiler . java to improve code readability and maintainability
[ hotfix ] [ stream ] use getboxexecutor ( ) instead of getboxexecutor ( )
hbase - 14264 add a new rpc post check to ensure that the meta be set and fix a meta
replaced ` meter - > meter . getId ( ) ` with ` Meter : : id ` in ` GatewayMetricFilterTests . java ` to
replaced ` BlockJUnit4ClassRunner ` with ` BlockJUnit4ClassRunner ` and updated constructor parameters in ` BlockJUnit4Class
replace remoteItems with lastTimeData in updateHandler . handle ( " delete " , remoteItems ) and updateHandler . handle ( " delete "
updated the calculation of allAppsCellWidthPx to balance allAppsCellPaddingPx to ensure correct rendering of allAppsCell
[ hotfix ] [ log4j2 ] fix log4j2 . log4j2 . log4j2 . log4j
updated method calls from ` doc ( ) ` to ` this . doc ( ) ` in ` BooleanScorer2 . java ` to improve code
added a call to forceMerge ( 1 ) in TestMultiPhraseEnum . java to ensure proper merging of phrases in the output
updated the ` close ` method from ` Connection ` to ` void ` in multiple classes to ensure proper resource management and prevent potential memory leaks
refactor GetLocations class to improve code organization to enhance maintainability and readability of the code
replaced printStackTrace ( ) with null checks in SchemaValidatorTask . java to simplify code and improve readability
replaced ` UncheckedIOException ` with ` ignore ` in ` Contents . java ` to ensure proper handling of IOException exceptions
updated ` GeneratePubkeyActivity ` to extend ` AppCompatActivity ` instead of ` Activity ` to ensure compatibility with the latest AppCompatActivity
added lastTermOutPosition and lastTermOutPosition to RubyFlavorProcessor and refactored emitSnippet methods to use StringBuilder instead of String to improve
added null checks for username and password in DerbyDatabase and BaseLiquibaseTask classes to enhance robustness by preventing potential NullPointerExceptions
removed the useCaches flag from the Nio2Endpoint class to simplify cache management and improve code readability
updated CasGeoLocationConfiguration to use Resource instead of MaxmindProperties to improve flexibility in database readability and maintainability
updated html files in InstructorFeedbackResultsPageUiTest . java for improved clarity to enhance code readability and maintainability
added a scan parameter to the ` useEncodedQualifierListOptimization ` method in ` BaseResultIterators ` and ` EncodedColumnsUtil ` to
updated method signatures in ApprovalStore , ApprovalsControllerService , and ApprovalsControllerService classes to improve code readability and maintainability
added a boolean flag ` mStartedDownload ` to ` FileDownloader ` to cancel the downloader in progress ticker to ensure that the downloader is
updated method names from ` getOpenView ` to ` getAnyView ` in ` TaskbarDragLayerController ` and ` AbstractFloatingView
updated project version from " 1 . 0 . 11 " to " 1 . 0 . 13 " in JFreeChartResources . java to reflect the
replace ` yield ( ) ` with ` Thread . yield ( ) ` in ` SyncThread . java ` to improve thread management by using a more
refactor GsonBuilder class to improve code readability to enhance maintainability and maintainability of the code
added null check for centerGeo and fixedPoints in ProverBotanasMethod . java to avoid potential NullPointerExceptions when centerGeo is
removed the EspressoHome option from the EspressoOptions and updated its usage in EspressoProperties to streamline the
refactor CtCodeElement , CtVariableWrite , and CtTypeInformation classes to improve code organization and maintainability
changed the visibility of the DeleteSessionAction class from protected to private and changed the visibility of the deleteSession variable to improve encapsulation and
updated ` InvalidDocumentStoreApiUageException ` to ` InvalidDocumentStoreApiUsageException ` instead of ` InvalidDocumentStoreApiUageException
updated the variable ` sz ` from ` size ( ) ` to ` 0 ` in ` JoinQParserPlugin ` , ` SolrIndexSearcher `
added a parameter to the triggerMediaScan method call in FileDownloader . java to ensure proper handling of media scan events
removed the use of Verbosity for postTestResults in TestRunning . java to simplify the code by eliminating unnecessary verbosity checks
added custom G - code settings for custom G - codes in MainWindow . java to ensure proper handling of custom G - codes in the application
updated import statements in AdditionalJaxbMappingProducerImpl . java to use BufferedWriter and OutputStreamWriter instead of PrintWriter to improve code clarity and maintainability by
refactor JsonElement class to improve code readability to enhance maintainability and maintainability of the code
added imports for SolrTestCaseJ4 and reset resetExceptionIgnores in TestBadConfig . java to ensure proper exception handling during test execution
added a method to remove fragments and action bar in GpsMainActivity to improve user experience by preventing unnecessary fragment removal
updated spanishTokens to include " ( " , " , " , " , " , " , " , " , " , " , "
refactor range handling in RemoteMediaHandler , RemoteRawHandler , RemoteMediaHandler , RemoteRawHandler , RemoteMediaHandler , RemoteRawHandler ,
updated the gcode file path from " shapeoko . txt " to " line skip _ test . gcode " in VisualizerCanvas . java
added new versions " 8.1 . 0 - cfs " and " 8.1 . 0 - nocfs " to TestBackwardsCompatibility .
updated the method name from ` containsAllEntriesOf ` to ` containsAllEntriesOf ` in ` Assertions _ sync _ with _ InstanceOfAssertFactories _
added a condition to check if the query state is done before closing the exchange client to ensure proper resource management and prevent potential resource leaks
changed the visibility of the expandFilename method from public to private in IntegrityCheck . java and added a setUp method in IntegrityCheckTest .
removed unused import of SolrClient in ChaosMonkey . java to streamline code by eliminating unnecessary dependencies
added null check for fas before initialization to avoid potential NullPointerExceptions when fas is null
refactor the ` NestedRepositoryTreePanel ` class to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated the constructor of ExtensionTypeHeader to accept a length parameter and added a checkArgument to ensure that the extension type is within - 128 to 127
added IOException handling to multiple methods in PDField , PDTextField , and AppearanceGenerator classes to improve error handling and ensure proper exception handling
changed the visibility of ` deleteOnShutdown ` and ` pushOnShutdown ` from ` deleteOnShutdown ` to ` pushOnShutdown ` and `
refactor trigger handling in ReactiveStateMachineExecutor to include a MonoSinkStateMachineExecutorCallback for improved error handling to enhance code readability and maintainability by
added a test method to check if multiple Python executables on path first is used in BuckConfigTest . java to ensure that multiple Python executables
added a call to setDefaultButton in InitialAccountRegistrationFrame to ensure the sign - in button is correctly set to the account registration button
added a new configuration for ` TEZ _ DYNAMIC _ SEMIJOIN _ REDUCTION _ FOR _ MAPJOIN `
updated error logging messages in RegistrationRestRepository . java to include an exception to improve clarity of error messages for better debugging
removed ` FieldAccessibilityCallback ` and ` MethodAccessibilityCallback ` from multiple Java files to simplify the package structure and improve readability
added a static method ` listableCollector ` to ` OidcIdTokenClaimCollector ` and created a new test class ` Oidc
removed the center field from Circle , Polygon , Polygon , Polyline , Polygon , Polyline , Polygon , Polyline , Polygon , Polyline ,
updated the condition in RegisterAndProcessBundleOperation to check if the Pcollection is non - null to improve code readability and maintainability
refactor SslContextFactory class implementation to improve code readability and maintainability
replaced ` MAX _ EXPECTATIONS ` with ` defaultMaxExpectations ( ) ` in ` ConfigurationPropertiesTest . java ` to improve
updated the return statement from " access _ confirmation _ error " to " access _ confirmation _ error " to reflect the correct error message for access confirmation
added a new class ` ConsumerClassLoaderFilter ` and a corresponding test class ` ReferenceConfigTest ` to implement a class ` ConsumerClassLoaderFilter ` to
added a ` copyRowHeight ` parameter to the ` shiftRows ` method and modified the ` shiftRows ` method to include a ` resetOriginalRowHeight
updated the ` setRolloverIcon ` method to use ` b . setRolloverPressedIcon ` instead of ` sel ` and ` sel `
refactor grid translation handling in TaskViewUtils and RecentsView classes to improve code clarity and maintainability by centralizing grid translation logic
refactor Assertions class for improved readability to enhance maintainability and maintainability of the code
added null checks for currentDateTimeFunction in multiple database database classes to ensure proper handling of null values
added a ` anonymousPath ` method to ` IOUtils ` and created a new ` TestIOUtils ` class in ` Log4jUtils ` to
added a new method ` getContentDescriptionForTask ` to ` DigitalWellBeingToast ` and updated related calls in ` TaskView `
added a timeout check for metaAvailable in CatalogTracker . java to prevent potential NullPointerExceptions when metaAvailable is null
updated LineNumberTagAggregator and TestDominance classes to improve code readability and maintainability
updated the return statement in GenericItem . java to use StateConverterUtil . defaultConversion method to improve code readability and maintainability by using a
hhh - 14157 add test for fetchpostanddetailsprojection in bidirectionalonenplusone
added a call to removeExtraEmptyScreen ( ) in LauncherModel . java and updated startSearchPageIndex assignment in LauncherModel . java
updated the initialization of ` baseDerivedRefs ` to use ` other . baseDerivedRefs ` instead of ` entry . getValue ( ) ` to improve
updated line formatting in GoogleLineChart , GooglePieChart , GoogleLineChart , GoogleLineChart , GoogleLineChart , GooglePieChart
replace try - catch block with try - catch block in SendingAccountor . java to improve readability and maintainability of the code
added a position field and a method to set the position in WALPrettyPrinter to provide a way to set the position of the printer ' s
updated the server socket port from 1 to 0 in TestNettyTransceiverWhenFailsToConnect . java to ensure that the server socket is
updated the ` generateReport ` method to sort events in ` SimpleReport ` and added a new test for ` sortEventsBeforeGenerateReport ` to
added a new test method ` getCsvLine _ DescriptionContainsDoubleQuote _ ReturnsCSVLineWithEscapedQuote _ ReturnsCSVLineWithEscapedQuote `
refactor DcorefChineseBenchmarkSlowITest and AbstractSequenceClassifier to use coref . doScore and coref . do
added a check for the recipient JID in IQRouter , IQHandler , and IQHandler to ensure that the recipient JID is
removed the @ JniImpl annotation from the VM class to improve code readability and maintainability
updated configuration settings in Fetcher2 . java to use Protocol . CHECK _ BLOCKING and Protocol . CHECK _ ROBOTS instead of plugin
added a check for " dolbyvision " format in FFMpegVideo and MediaInfoParser to ensure proper handling of video formats
updated AstTests to use " other _ package2 " and " other _ package2 " instead of " other _ package " to improve clarity and
updated the calculation of the current diameter in WorldBorder and added a new test class WorldBorderIntegrationTest for resizeWorldBorder to ensure accurate calculation of the
hbase - 14264 hmaster . getwalgroupsreplicationstatus ( ) should return replicationstatus if master can host user region
refactor login event handling in AppWFull . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated the ` markDataResourceOnline ` method to use ` generateInstanceConfigs ` instead of ` new ArrayList < InstanceConfig > ( ) ` to
changed the visibility of the FieldAttributes class from final to public to allow access to the FieldAttributes class from other classes
added a new test method ` testReadErroneousMavenProjectContainsReference ` in ` ProjectBuilderTest . java ` to ensure proper handling of
removed null checks for protoGetSwitches and protoHistory in PropertyMap . java to simplify code and improve readability
replaced direct calls to ` getControllerId ( ) ` with ` getControllerId ( configId ) ` across multiple files to improve code clarity and
updated session . close ( ) method call to use session . close ( ) instead of sessionFactory . close ( ) to ensure proper resource management and
updated the condition in OidcConsentApprovalViewResolver to check if the service isGenerateRefreshToken ( ) to improve code readability and maintainability
removed system . out . println ( ) from Http2SolrClient . java to clean up the code and improve readability
updated the extractor method from ` extractor ` to ` NoopGetter ` and added a new ` NoopGetter ` enum in ` Baggage
refactor ConditionalOnEnabledResourceChain class to improve code readability to enhance maintainability and maintainability of the code
added a condition to check if the treeRoot getChildCount ( ) is greater than zero to ensure that the treeRoot is only processed when the treeRoot
updated the method call from ` getFilteredStream ( ) ` to ` getUnfilteredStream ( ) ` in ` JBIG2Filter .
refactor logging statements in FacebookImpl . java to improve clarity and consistency to enhance code readability and maintainability by using a more descriptive
updated return values from " h : mm a " to " skeleton " in ShadowICU . java . vm . vm . vm . vm .
removed the KeyguardManager reference from TouchInteractionService . java to simplify the code and improve readability by eliminating unnecessary code
added a null check for diskOfferingVO before setting the default disk offering ID to prevent potential NullPointerExceptions when diskOfferingId is null
replaced FileChannel with AsynchronousFileChannel in UtowBodyHandler . java to improve code readability and maintainability by using a more descript
refactor ` SigInt ` , ` SigInt ` , and ` SigIntTest ` classes to improve code readability and maintain
refactor ` updateByBoundingBoxResize ` method to use ` prepareBoundingBoxResize ` instead of ` updateByBoundingBoxResize ` to improve code clarity and
updated the return value from - 1 to 0 in Asset . java to ensure proper handling of negative values
replaced ` SIZE ` with ` Callable ` and updated ` valueLoader ` in ` ComputeBenchmark . java ` to use ` Callable ` instead of `
added onRefreshListener method to UploadListFragment to notifyDataSetChanged ( ) to ensure that the adapter is notified when the data is refreshed
refactor BibDatabaseContext and BibDatabaseContext to use Optional < Path > instead of File to improve code readability and maintainability by
replaced ` ParticleEmitter . class ` with ` ParticleEmitter . get ` and added a dispose method to improve code readability and maintainability
refactor Tomcat to simplify service handling and improve code readability to enhance maintainability and maintainability of the code
updated error messages from " desired file " to " desired file " in multiple files to improve clarity and consistency in error reporting
added a condition to return if playback state is not PLAYING to ensure proper handling of playback state before proceeding
updated the retrieval of ServiceComponentDesiredStateEntityPK from the serviceComponentDesiredStateEntityPK to 0L to ensure proper retrieval of serviceComponentDesired
refactor ` Java2TypeScriptTranslator ` to include ` InnerClassFieldClash ` and add a new ` InnerClassFieldClash `
added logging and follow redirect filter configurations to DockerClientFactory , DockerClientProfile , and DockerClientProfile classes to enhance client profile configuration for better
added a try - finally block to unlock the displayChanged ( ) method in XToolkit . java to ensure proper locking and locking of the
updated import statements in NationalizedScalarQueryTest . java to use SQLServer2008Dialect instead of DB2Dialect and PostgreSQLDialect
added a try - finally block to verify the zip header in OPCPackage . java to ensure proper resource management and prevent resource leaks
changed the visibility of the storeClassFile method from private to public to allow access to the method from other classes
updated assertions in SingletonSortedSetDocValues and added a new TestSortedSetDocValues class with a test class for no more ORDS to ensure
updated error messages from " invalid command " to " invalid port number " in CGIHandler and JavaVM classes to improve clarity and consistency in error
added a conditional check for " \ 033 [ 0m " in LineReaderImpl . java to ensure proper handling of line ending characters
updated ` DistBuildService ` and ` ServerContentsProvider ` to use ` ImmutableSet < String > ` instead of ` List < String > `
added a check for vertex count in OGLESShaderRenderer . java to prevent potential NullPointerExceptions when vertex count is zero
refactor IncorectBindingPuzzleFixedTest and DescriptiveMessagesOnVerificationInOrderErrorsTest to use IMethods instead of InOrder
replaced ` FileUtil . createData ( root , menuPath ) . delete ( ) ` with ` FileUtil . createFolder ( root , menu
remove unused import of Node in TypeSystem . java to improve code clarity and maintainability
refactor JsonObject class to improve code readability to enhance maintainability and maintainability of the code
updated condition checks in SelectChannelEndPoint . java and HttpConnection . java to include low resource max idle time checks to ensure proper handling of idle time
refactor BlockState handling in FarmlandBlock . java to improve code readability to enhance maintainability and maintainability of the code
updated database connection handling in QueryDatabaseMetaDataIT , ConnectionQueryServicesImpl , and UpgradeUtil classes to improve database connection handling and ensure correct indexes are
updated HttpCookie to use Locale . US instead of Locale . US and added a new B6791927 class for cookie expiration date parsing to ensure
refactor db closing logic in DbHelper . java to improve code readability and maintainability
updated the poll method from 1 seconds to 5 seconds in BatchMessageListenerContainerIntegrationTests . java to allow more time for processing batch messages
updated EconomyAllocationStage constructor to accept OptionValues instead of LinearScanPhase and added TraceRegisterAllocationPhase in EconomyCompilerConfiguration and EconomyAllocationStage to
refactor key binding handling in SourceTab and CodeAreaKeyBindings classes to improve code readability and maintainability by centralizing key binding functionality
added a static field ` objectMapper ` to set line separators to ensure proper handling of line separators in JSON output
updated string replacement for windows path in NativeEnvironmentRepository . java to ensure proper handling of Windows path paths
added a prepare method to the BaseTest class and refactored Application handling in multiple test classes to improve code clarity and maintainability by centralizing
[ java ] remove unneeded variable in recordinglog . validateexistinglog ( )
updated import statements in ITSystemTest . java to use ` ErrorGroupName ` instead of ` GroupName ` to improve code readability and maintainability
removed unnecessary sleep logic in TestFuzzOptimizations . java to streamline memory usage handling and improve code clarity
added a boolean variable ` reverseImage ` and modified preference handling in ` CameraManager . java ` to improve code readability and maintainability by using
updated conditional checks for " META - INF / " entry names in multiple files to improve code readability and maintainability
added a new Predicate < Triple < Triple < BaseRuntimeChildDefinition , IBase > > > to replace fields by predicate in TerserUtil
updated import statements in AuthenticationSuccessListenerTests and AuthenticationSuccessListenerTests to use JUnit 6 for consistency to improve code readability and maintainability by
replaced New . arrayList with a new ArrayList for type retrieval to improve code readability and maintainability by reducing redundancy
refactor TypeUtil class to improve code readability to enhance maintainability and maintainability of the code
updated the triggerTime variable from LocalDateTime to LocalDateTime in AbstractAlertNotifyHandler . java to ensure compatibility with the latest timezone settings
added a method ` maybeCreateAbstractMethodErrorThrower ` to handle abstract method errors in ` MethodHandleResolver . java ` to enhance error handling by
updated the boolean handling logic in SimpleFunctionExpression and added a new test for body Ognl expression validation in SimpleTest to ensure proper handling of
removed unnecessary check for empty toExplore in AbstractParser . java to simplify code and improve readability
added IOHelper import and copied it in JcloudsPayloadConverter . java to utilize IOHelper . copy ( is , cos ) to improve
removed the @ Ignore annotation from CamelConsulTest . java to ensure that OSGi bundle is not released yet
added a new test class ` CheckACC _ STRICTFlagOnDefaultMethodTest ` and added a new test class ` CheckACC _
set driver timeout to 2 _ 000 in ChannelValidationTest . java to ensure driver timeout is set to 2 _ 000
added a new file ` FileExtensions . java ` that utilizes ImmutableSet for CLANG _ SOURCES and CLANG _ HEADERS to facilitate
replaced ThreadLocalDateFormat with ThreadLocal . withInitial ( FORMAT _ PROTOTYPE ) in DateFormatUtil . java to simplify the code and improve readability by
[ hotfix ] [ test ] remove unused jvmdeprecatedoptions
added support for the CLIENT _ CUSTOM _ DISPLAY _ NAME property in multiple classes to enable configuration of the client based on environment variable names
added EarlyTerminationException to multiple operators and updated exception handling in CombineGroupByOperator , CombineGroupByOperator , and CombineSlowOperatorsTest
updated the method call from ` targetFunction . apply ( messageStream ) ` to ` targetFunction . apply ( messageStream ) ` to improve clarity
refactor response handling in HttpBindServlet , HttpConnection , and HttpConnection classes to improve code clarity and maintainability by centralizing connection handling logic
added a null check for the parent parameter in ForgeEventFactory . java to avoid potential NullPointerExceptions when parent is null
added KeyCrypterException to the catch block in WalletTool . java to improve error handling for key crypter exceptions
added @ Deprecated annotation to AsyncCompletionService and SubmitOrderedCompletionService classes to indicate that the class should no longer be used
fix typo in HyphenationTree . java to improve code readability and maintainability
added a Thread . sleep ( 200 ) to the IQRegisterHandler class to improve thread safety and prevent potential memory leaks
refactor Resources class to improve code readability and maintainability to enhance maintainability and maintainability of the codebase
updated the typo in the PARAMETER _ NEEDS _ TO _ BE _ NAMED string from " @ Param " to " @ Param
set providersChanged to false in ConfigurationManager . java to ensure providersChanged is only set when the provider is not set
added a new method ` quoteIdentifierTokens ` to ` SemanticAnalyzer ` to handle escaped identifiers in Hive lexer to ensure proper handling of escaped identifiers in
added a warning log for missing ' name ' entry in FileSystemFontProvider . java to prevent potential NullPointerExceptions when missing ' name ' entry
replaced ` AbstractAnalysisFactory ` with ` @ SuppressWarnings ( " unchecked " ) ` in ` SolrResourceLoader . java ` to improve code clarity and
refactor condition checks in Window . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
added null check for appManifest before setting targetSdkVersion to avoid potential NullPointerExceptions when appManifest is null
refactor ConfigurationMetadataGenerator and CasConfigurationMetadataCatalog to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a ` userName ` field and its getter / setter methods to ` Driver ` and ` HiveSemanticAnalyzerHookContext ` classes to allow users to
added methods to set Transformer files , URL , InputStream , and XmlConverter in XsltBuilder and XsltComponent classes to enhance flexibility in
added a new ` HadoopShim ` parameter and updated related classes to include ` tezHadoopShim ` and ` tezHadoopShim ` to
updated URI parsing logic in ShadowAssetManagerTest and ShadowContentObserverTest to use Uri . parse instead of Uri . parse to improve code clarity and
added null check for context before logging access in CoyoteAdapter . java to prevent potential NullPointerExceptions when context is null
updated logging statements in ThroughputLogger and ThroughputLoggerTest to improve clarity and consistency to enhance code readability and maintainability
refactor VM version checks in CompilerConfigFileWarning and ConfigFileWarning to use Platform . isDebugBuild ( ) instead of System . getProperty ( "
replaced ` MeterStatisticsManager . statisticsOperationMap ` with ` Map < String , MeterDetailStatisticsModel > ` in ` DefaultLogPublisher
updated logback configuration file handling in FrameworkLauncherExtended . java to ensure proper handling of logback configuration file paths
updated method signatures in CipherExecutor , CookieRetrievingCookieGenerator , and related classes to enhance code readability and maintainability by standardizing
replaced ` BASH _ ESCAPER ` with ` SHELL _ ESCAPER ` in multiple files to improve clarity and maintainability of
replace ` waitUntilReadyAndSucceed ` with ` try ` for ` GenericContainer < ? > ` in ` AbstractWaitStrategyTest
change test class name from ` TestLucene50FieldInfoFormat ` to ` TestLucene60FieldInfoFormat ` to improve clarity
updated the closing brace in RelativeDateFormatTests . java to improve code readability and maintainability
added a method ` generateShieldAddress ` to ` RpcApiService ` to generate a ShieldAddress to provide a way to generate a Shield
refactor ` readConsoleInput ` methods to return ` String ` instead of ` byte [ ] ` to improve code readability and maintainability by
replace presubmit with postsubmit in TestStabilityRule . java to improve clarity and maintainability of the code
added a conditional check for the bestTextFragment ' s score in DefaultSolrHighlighter . java and updated related tests in HighlighterTest . java to
updated tryToLogin method to include username and password parameters in WebdavClient to enhance security by providing credentials for login requests
added null check for EntityMonster and EntityAvatar in HandlerSceneEntityDrownReq and PacketSceneEntityDrownRsp classes to
updated the ` resolveOrCreateDestination ` method to use ` replyManager . getReplyTo ( ) ` instead of ` replyManager . getReplyTo
replaced ` wrapCollection ( parameter ) ` with ` wrapCollection ( parameter ) ` in ` DefaultSqlSession . java ` to improve code readability
updated import statements and added logging for unknown currencies in BTCEAdapters . java to improve error handling and provide clearer logging for unknown currencies
refactor subscription handling in DurableConduitBridge . java to improve clarity and consistency to enhance code readability and maintainability by simplifying subscription
PDFParserConfig : update averageCharTolerance and spacingTolerance from 0 . 5f to 0 . 5f in PDFParserConfig . java to reflect
added a tenantIsolation parameter to the startController method and updated related methods in the ControllerTest , ClusterTest , and ClusterTest classes to enhance tenant
replaced ` ImmutableMap . Builder ( ) . build ( ) ` with ` Map < String , Object > ` in ` HasSettings . java ` to
added a check for empty attrs in ProjectWorkspace . java to ensure proper handling of empty attributes
updated ` getProjectJdkName ` and ` getProjectJdkType ` to ` getProjectJdkType ` and ` getProjectLanguageLevel
updated log message from Experimenal to Experimental in HiveSessionProperties . java to improve clarity of log messages for better debugging
added a new method ` scottWithUserDetails ` to ` GrantedAuthorityEffectiveAclsResolverTests . java ` to ensure proper handling of
replaced ReflectionClassDeclaration with getSolvedJavaLangObject ( ) in JavaParserTypeDeclarationAdapter . java to improve clarity and consistency in method resolution logic
added constants for numberOfButtons and MAX _ BUTTONS _ SUPPORT in XToolkit . java to improve code readability and maintainability by reducing
updated import statement from jdk . testlibrary . Asserts . assertEquals to com . oracle . testlibrary . Asserts . assertEquals to ensure compatibility with
added a new ` MessagePackFactory ` class and updated the ` MessagePack ` class to use ` MessagePack . DEFAULT _ CONFIG ` to enhance
added tags for ` IS _ DESERT ` , ` IS _ CAVE ` , and ` IS _ CAVE ` in multiple tags to
updated method names from ` present ` to ` draw ` across multiple screen classes to improve clarity and consistency in method naming conventions
added a condition to check if the horizontal element is non - horizontal before updating UI IDs to ensure proper handling of UI IDs based on the
removed the ` DOI _ URL _ PATTERN . matcher ( identifier ) . matches ( ) ` method from ` DOIServiceImpl . java
replaced ` touchHandler ` with ` hasMultitouch ` in ` AndroidInput ` , ` AndroidLocklessInput ` , and ` touchHandler `
refactor commit position handling in ClusteredServiceAgent and RecoveryState classes to improve code clarity and ensure proper resource management
added new classes ` UserSite ` and ` UserSiteId ` , ` UserSiteId ` , ` UserSiteId ` , and ` User
added error handling for IPv6 port and default port in HttpConverterRegistrar . java to ensure proper handling of IPv6 addresses and improve error handling for
http : / / issues . apache . org / jira / browse / amq - 261 - fix the issue where the host / pool
updated file length handling in NRTCachingDirectory . java to ensure proper resource management and prevent resource leaks
refactor ` JavascriptCompiler ` to use ` ExpressionContext ` instead of ` InvocationTargetException ` and use ` ExpressionContext ` instead of ` Invocation
refactor UISettings class to use synchronized for better thread safety to improve thread safety and maintainability of the code
added support for native text input handling in TextField . java to ensure proper handling of text input during text selection
added validation for ` schemaChangeErrString ` and ` emulatorErrorString ` in ` SpannerIO ` and ` SpannerIO ` classes
updated the initialization of ` TreeMap < String , byte [ ] > ` to ` TreeMap < String , byte [ ] > ` in multiple test files
updated ` ObjectInputStream ` and ` CloneArray ` classes to use ` short [ ] ` instead of ` double [ ] ` and ` short [
updated nonce retrieval logic in OIDCAuthenticationFilter . java to improve clarity and consistency to enhance code readability and maintainability
added a conditional check for relationship fields in DCInputSet . java to ensure proper handling of relationship fields in relation fields
added a new constant CAPABILITIES _ SERVER _ SLOGAN in multiple classes to set the server slogan to the capabilities table to
refactor conditional logic in DrawerActivity to improve code readability to enhance maintainability and maintainability of the code
updated error handling in SolrRequestParserTest . java to use Assume . assumeNoException instead of fail to improve clarity and maintainability of error reporting
added a check for empty missing symbol events in MissingSymbolsHandler . java to prevent potential NullPointerExceptions when no symbol events are found
updated data types in StringHelperTest . java for improved readability to enhance code clarity and maintainability
added a boolean flag to check if the data provider is not an empty array or iterator to ensure that the data provider is returned an empty array
replace ` Collections . EMPTY _ LIST ` with ` Collections . emptyList ( ) ` in multiple registry classes to ensure proper handling of empty collections
updated XML version from " freeplane 1 . 0 " to " freeplane 1 . 8 " and updated selection style configuration in MapStyleModel to
updated the method call from ` mass ` to ` restitution ` in ` setRestitution ` to improve clarity and maintainability of the
added a new file ` AutoFtpActivity . java ` to handle FTP test failures to enhance user experience by providing feedback on FTP failures
updated token handling in BaseSemanticAnalyzer to use unescapeSQLString instead of unescapeSQLString to improve code readability and maintainability
added getters and setter methods for imageX and imageY in ImageViewer , OnOffSwitch , and UIBuilder classes to enhance state management and
added a new file ` RemoteExecutionEnabled . java ` that implements custom serialization and deserialization methods in ` BuildableSerializerTest . java ` to enable
updated the error message from " Paremater " to " Parameter " in BookmarkValidationProcess . java and TrailerValidationProcess . java to
replaced FileReader with InputStreamReader in ImportCsv and PublicBAOS classes to improve readability and maintainability of the code
added a call to assertWorkingScoreFromScratch in AbstractScoreDirector . java to ensure that workingScores are not stale when completedScore is not
updated the configuration of SEMIJOIN _ CONVERSION from " enable . semijoin . conversion " to " optimize . semijoin . conversion " to
added logging statements to multiple DatagramPacketByteArrayDecoder , DatagramPacketEncoder , and DatagramPacketObjectDecoder classes to ensure proper logging of message content in the application
refactor directory removal logic in SynchronizeFolderOperation and FileDisplayActivity to improve code readability and maintainability to enhance maintainability and maintainability
added assertions to verify transaction hashing in PollingTransactionReceiptProcessorTest . java to ensure proper handling of transaction hash values in the test
added @ Deprecated annotation to the ` SchemaRegionBasicTest ` class and modified the ` testConstructSchemaBlackList ` and ` testDeleteTimeseries
added a null check for sampleMimeType in MediaCodecRenderer to prevent potential NullPointerExceptions when the sampleMimeType is null
replaced ` notify ( ) ` with ` wait ( ) ` in ` QueryExecutorImpl ` and ` AbstractJdbc23PoolingDataSource ` to improve
updated the @ AllArgsConstructor annotation to use JsonCreator . Mode . PROPERTIES instead of JsonCreator . Mode . PROPERTIES to ensure proper serialization
added a check for the index creation of a view in MetaDataClient . java to ensure that the index creation of an index on a view is not
added a new class ` Website ` and modified ` PopulatorImplTest ` to utilize a new ` Website ` class to enhance the
added a setup method to initialize the Locale in BSFormatterTest . java to enable testing of Locale in the application
added a derp filter to the CoreModManager class to detect jar files that have been named as zip files to improve error handling for problem jar
updated assertions in MultiPartParsingTest to use Matchers . equalToIgnoringCase instead of containsString to improve clarity and consistency in assertion logic
added checks for single and non - single parameters in SimpleExprGenerator to ensure correct handling of function parameters in the code
added a volatile boolean variable ` createdVertx ` and modified the condition to check for ` createdVertx ` to ensure that ` createdVertx
refactor writeAttributes method calls in NodeStyleBuilder . java to improve code readability and maintainability
updated logging statements in SynchronizeFolderOperation , SynchronizeFolderOperation , FileDisplayActivity , and FileDisplayActivity to ensure proper handling of null files
added a boolean property ` ignoredReadStatus ` to the ` Entries ` class and modified ` FeedREST ` classes to ensure that unread flag is
updated resource resolution in multiple test classes to use MavenPaths instead of URIs to improve flexibility in resource resolution and ensure proper resource management
added validation logic for URI and MetaDataRegisterDTO in RegisterServerConsumerExecutor and URIRegisterExecutorSubscriber classes to ensure proper handling of non - null URI
added a condition to check if the sound is paused in GwtMusic . java to ensure that the sound is not paused when the playback state is not
updated permission checks in MainCommand . java and added PERMISSION _ ADMIN _ SUDO _ AREA permission check in Captions .
updated query options handling in ServerRequestPlanVisitor and added a trace flag in QueryRunnerTestBase to enhance query execution capabilities and enhance query execution functionality
updated comparison logic in multiple parser input files to use path . getFileName ( ) . toString ( ) instead of path . equals ( toUri ( )
updated assertion logic in ResourcesTest . java to include pureEmoji and mixEmojiAndText for consistency to improve code readability and maintainability
added a new native method ` NMTWaitForDataMerge ` and ` NMTMallocWithPseudoStack ` to ` WhiteBox ` to
[ hotfix ] [ runtime ] use javaeitherserializersnapshot instead of javaeitherserializer snapshot
updated DEFAULT _ ROTTS and DEFAULT _ ROTATE _ SERVERS to DEFAULT _ ROTATE _ RESOLV _ OPTION
added a call to ` super . __ associate ` in ` RequestRockerTemplate ` and a corresponding test in ` RequestRockerTemplateTest `
pdfbox - 3292 : fix npe in pd non - terminal field
updated XML namespaces from " core / parser / core / xml " to " www . liquibase . org / xml / ns / dbchangelog
change the package name from ` com . oracle . truffle . api . source ` to ` com . oracle . truffle . api . test
updated the return value of RepositoryVersionState from INIT to NOT _ REQUIRED in multiple classes to ensure proper handling of INIT and NOT _
added SchemaComparison to the compare method call in GenerateChangeLogTask . java to enhance compatibility with schema comparisons
updated import statement from org . junit . Test to org . testng . annotations . Test in TestBackwardAnolyFunctionUtils . java to ensure
added a new file ` ProgressiveJPEGTest . java ` with a new test class ` ProgressiveJPEGTest . java `
updated MaterialLoader to set alpha threshold and ambient , ambient , texName , and texName variables to improve ambient and
update native - image building error message to include a target architecture check to improve clarity of native - image building on Windows
added a null check for the text parameter before resize to avoid potential NullPointerExceptions when text is null
updated the readVarInt method call from ` readVarInt ( ) ` to ` readVarInt ( ) % 1 _ 000 _ 
added private constructors to PushUtils and ThumbnailsCacheManager classes to ensure proper initialization of PushUtils and ThumbnailsCacheManager
refactor the calculation of the length variable in RocketPanel . java to simplify the code and improve readability
removed cast to MockDirectoryWrapper in TestDirectoryReaderReopen . java to streamline code by eliminating unnecessary casting
updated the load method from " datafiles / presets " to " datafiles / presets " in Startup . java to ensure compatibility with
updated animation handling in TaskbarStashController , InvariantDeviceProfile , and FloatingIconView classes to ensure compatibility with newer Android versions
replaced ` Args . getInstance ( ) . getMyKey ( ) . getMyKey ( ) . getNodeId ( ) ` with ` RefreshTask
added a new test method ` testOnlyOneJDK ( ) ` to ` PMDTaskTest ` and implemented target JDK15
refactor QuotaResponseBuilderImplTest to use MockitoJUnitRunner instead of PowerMockito to improve code readability and maintainability by using
added static variables for errStream , outStream , and errStream in TestSchemaToolCatalogOps . java to ensure proper handling of System . err
added a dfsClient parameter to the ` FanOutOneBlockAsyncDFSOutputSaslHelper ` class and updated related methods accordingly to enhance
updated MongoQueryMethod and MongoRepositoryFactoryBean to accept RepositoryMetadata instead of Class < ? > to enhance metadata handling for MongoQuery methods
added a new ` EntityResolver2Wrapper ` class and modified ` Digester ` to use ` PropertySource ` instead of ` PropertySource ` to
updated import statements in MetaDataEndpointImpl . java for consistency to improve code readability and maintainability
updated ALLOWED _ REPEATED _ DEADLOCKS from 5 to 10 and modified deadlock count logic in TxnHandler . java to improve
updated position and typeface calculations in BarChartActivity , LineChartActivity1 , and YAxisRenderer classes to improve code readability and maintainability
added a new method ` isPrintableChar ` to handle printable characters in ` FsUtils . java ` to ensure proper handling of printable characters
refactor ` in ` and ` using ` methods in ` Selenide ` and ` WebDriverRunner ` classes to improve code readability and maintain
refactor exception handling in DefaultMaven and DefaultProjectBuilder to include process plugin configuration to improve code readability and maintainability by centralizing plugin configuration
updated return statements in ProxyConnectionManager , ProxyConnectionManager , ServerTrafficCounter , and ServerTrafficCounter classes to improve code readability and maintainability
added file existence check for resources in ITSystemTest . java to ensure proper resource management and ensure proper resource management
updated return value from " STUB " to null in ModeledConnectionRecord , ActiveConnectionRecord , and AuthenticatedUser classes to enhance robustness
added a check for the admin button in CommunityListServlet to enable users to manage admin permissions based on user context
refactor ThreadPoolExecutor initialization to use AtomicInteger for longCompactions and shortCompactionThreadCounter to improve code readability and maintainability by reducing redundancy
updated the package name retrieval from ` getApplication ( ) . getPackageName ( ) ` to ` getResources ( ) ` in ` WallpaperChooser . java `
updated the ` getPlayersInPlot ( ) ` method to include a ` getPlayersInPlotVisible ( PlotPlayer < ? > )
refactor AndroidManifest , ResName , ResName , and ShadowActivity classes to improve code organization and maintainability
refactor MlibOpsTest class to improve code readability to enhance maintainability and maintainability of the code
replaced " com . sun . management . internal . OperatingSystemImpl " with " com . sun . management . internal . OperatingSystemImpl " in
updated the attribute name from " referencedContainer " to " ReferencedContainer " in SchemeGenerator . java and added a new test for buildable
removed unnecessary null checks for key and iv in UploadFileOperation . java to simplify code and improve readability by eliminating unnecessary code
added @ Stability annotation to WorkProfileTest . java to ensure compatibility with the latest platform flavors
removed unnecessary check for bucketing version in TezCompiler . java to simplify the code and improve readability
updated the method call from ` setCursorPosition ( x , y ) ` to ` input . setCursorPosition ( x , y ) ` to
added a new abstract class ` LockFreeBucketContendedTimeMeter ` and modified ` LockFreeBucketLayout ` to extend ` AbstractBucket ` to
added a method to print thread pool statistics in NodeProbe . java to enable debugging of thread pool statistics in the cluster
updated the method call from ` Utils . getMaxBitrate ( ) ` to ` userPreferences . getValue ( ) ` in ` ExternalPlayerActivity `
added support for tracing span IDs in ZipkinHttpSpanExtractor and added a new test for tracing span IDs in TraceFilterTests to enhance
refactor ` getUserPaymentAccounts ` method to return ` Set < PaymentAccount > ` instead of ` HashSet < PaymentAccount > ` to improve
refactor code to use ReflectionUtil instead of ReflectionUtil for better readability to improve maintainability and maintainability of the code
added a call to setProject ( p ) in LauncherUtils . java to ensure the project is set to the correct project
added ProjectFilesystem parameter to JsBundle , JsLibraryBuilder , and JsLibraryBuilder classes to ensure proper handling of root paths in the
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
refactor MetricsDSLContext class to improve code readability to enhance maintainability and maintainability of the code
replaced the ` VersionBuckConfig ` interface with ` ImmutableMap . builderWithExpectedSize ` in the ` VersionBuckConfig ` class to simplify
added error handling for TypeNotPresentException in the bindShadowClass method to ensure proper handling of TypeNotPresentExceptions
changed the visibility of the validateTypes method from static to public to allow access to the method from other classes
added @ BetaApi annotation to multiple classes to ensure compatibility with the latest Beta API
added slf4j logging functionality to the SimulationStatus class to enhance logging capabilities for simulation status
updated VERSION _ POSITION _ Y from 138 to 150 and updated font sizes in Splash . java to ensure compatibility with newer graphics
refactor notification creation in UserInterfaceComponentImpl to runLater method to improve code readability and maintainability
added a call to thenReturn method in ReturnsElementsOf . java to improve code readability and maintainability
updated error message from " non - string partition column is not allowed " to " non - string partition column is only allowed using equality " to improve
added a new test method ` testLineFileDocs ` in ` BaseStoredFieldsFormatTestCase . java ` to ensure proper handling of document fields in
added a new method ` getVersionCode ( ) ` to retrieve the version code in multiple classes to improve code readability and maintainability by centralizing
refactored injection logic in BeanInfo and MyDummyBean classes to improve clarity and consistency to enhance code readability and maintainability by centralizing
replaced ` getContentDispositionFilename ( ) ` with ` getSubmittedFileName ( ) ` in ` MultiPartInputStreamTest . java ` to improve clarity and
added a boolean variable ` bufferOwned ` and updated constructors in ` IndexBufferObject ` and ` VertexBufferObjectWithVAO ` to
refactor PasswordManagementWebflowConfigurer to use a transition forgotPassword to improve code readability and maintainability
refactor JerseyClientConfiguration class to improve code organization to enhance maintainability and readability of the code
replaced ` CharacterStreamReadingMessageSource ` with ` CharacterStreamWritingMessageSource ` in ` ConsoleInboundChannelAdapterParser ` and ` ConsoleOutboundChannel
replaced direct calls to ` s ` with ` o ` in multiple test files to improve clarity and maintainability of the code
added method ` crop ( ) ` to ` StringDict ` and ` Table ` classes in ` StringDict ` , ` Table ` , and `
added ` AutoCloseable ` annotations and implemented ` AutoCloseable ` methods in ` GenericContainer ` and ` GenericContainerRuleTest ` to enhance
updated logging statements in MediaInfo and RendererConfigurationTest to use ConfigurationException instead of ConfigurationException to improve error logging clarity and ensure proper exception handling for
added schemapattern option handling in BundledDriverDatabaseConnector and PropertiesDataSourceDatabaseConnector to enhance database connection configuration for better user experience
updated the return statement in ProvSSLSessionImpl . java to use TlsUtils instead of TlsUtils . EMPTY _ BYTES to improve
updated the calculation of bitmap sizes in AndroidGraphics . java to improve accuracy of bitmap rendering in AndroidGraphics . java
refactor Base64 class implementation to improve code readability to enhance maintainability and maintainability
updated ` LLVMGetStackFromThreadNode ` , ` LLVMGlobalContainer ` , and ` LLVMGlobalContainer ` to
updated the Ignore annotation in JavascriptEnabledDriverTest . java to include IPHONE , SELENESE , and SELENESE to improve
updated FlowBuilder and FlowJobBuilderTests classes to improve code clarity and maintainability
updated ` AttributeResource ` and ` OverlayResourceIndex ` classes to use ` resId ` instead of ` ResName ` and ` resId
refactor Docker context handling in DefaultDockerClientConfig and DockerContextMetaFile to use a resolveContextTLSFile method to improve code readability and maintain
updated the ` tearDown ` annotation from ` @ After ` to ` @ Before ` in ` SimpleReactiveElasticsearchRepositoryTests . java ` to improve
updated conditional logic in Attr . java and added a new T6450290 . java class with a new T6450290 . java
added logging level configuration to the LoggingFlags and LoggingOptions classes to enhance logging capabilities for logging levels
added logging statements and modified deleteItemsFromDatabase method to include a collection of packages to improve logging clarity and maintainability of the code
added allFilesOption methods to FileActivity , FileDisplayActivity , FileDisplayActivity , and PreviewImageActivity to ensure proper handling of all files
added a new method ` forEachOperation ` and ` hasMatching ` in ` MutationOperationGroup . java ` to ensure that the ` MutationOperation `
updated the calculation of numPredictiveAppCols from Math . max ( numColumns , numAppsCols , numAppsCols ) to
removed the initialization of the value string from the StringUtils class to streamline the code by eliminating unnecessary initialization
added new classes ` RequestMatchers ` , ` RequestMatchersTests ` , and ` RequestMatchers ` to handle request matchers to enhance
removed unnecessary conditional checks in EuclidianController . java to simplify code and improve readability
updated the round method from ` height ` to ` bgBottomHeight ` and ` bgRightWidth ` in ` ProgressBar . java ` to ensure
updated the path for external functions . json in PrestoSparkNativeQueryRunnerUtils . java to ensure the correct file path is used
added final variables for extra _ L0 , extra _ L3 , and extra _ L4 in BruteArgumentMoverHandle . java to
added a condition to check if the handler is INVALIDATED in LauncherSwipeHandler . java to ensure proper handling of handler states when the handler is
added orientation checks in CellLayout and Workspace classes to ensure proper layout calculations based on orientation
added a check for the " / robots . txt " path in HttpRobotRulesParser . java to ensure proper handling of robots . txt
updated import statements and updated image icons in JBrowseModule . java and CallHierarchyTopComponent . form to improve code clarity and maintainability by using
replaced " continue " with " createWorld " in WidgetUtil . trySubscribe ( this , " createWorld " , and " return " , "
updated null checks in UDFOPDivide . java and added a new TestUDFOPDivide . java file to ensure correct rounding of
updated method signatures in FlowJob and FlowJob classes to improve clarity and consistency to enhance code readability and maintainability
updated method parameters in FormLoginBeanDefinitionParser , LogoutBeanDefinitionParser , and LogoutBeanDefinitionParser to use AbstractAuthenticationProcessingFilter instead of filterProcesses
added onDestroy ( ) method to ShareActivity , ContributionsActivity , and ContributionsActivity classes to ensure proper cleanup of service unbinding
replaced ` thumbNail . getTag ( ) ` with ` thumbnail . getTag ( ) ` in ` WallpaperPickerActivity . java ` to improve
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
added request timeout setting to RaftServerConfigKeys . Rpc . setRequestTimeout ( properties , config . getRpc ( ) . getRequestTimeout (
replaced error logging with debug logging in TsFileResourceManager and updated file processing logic in ResourceManagerTest to improve logging clarity and ensure proper resource management
updated setModelSource method to set system properties for model source to ensure proper handling of system properties for the model source
added server metrics for readiness checks and updated service status retrieval methods to use ServerMetrics instead of instanceId to improve metrics management and ensure proper server metrics are
added model registration for animatedtorch in BlockAnimatedTorch . java to enhance the functionality of the animatedtorch model
added null check before closing the writer in FileHistoryCache . java to prevent potential NullPointerExceptions when closing the writer
added a new method ` getHiveOnTezConfFromDir ` to ` UtilsForTest ` and updated related classes to use it to
added a new link for Muting Users in FeaturesActivity . java to enhance user experience by providing a clearer link for Muting Users
added support for direct method handle configuration in System . java to enable support for direct method handles in the application
hbase - 13232 splitonleadingvarcharcolumnspolicy should use SteppingSplitPolicy instead of ConstantSizeRegionSplitPolicy instead of ConstantSize
updated method signatures in AbstractYarnClusterDescriptor . java to improve clarity and consistency to enhance code readability and maintainability
updated the method call from ` getPronunciations ( ) ` to ` getWord ( ) . getSpelling ( ) ` in
updated JSON string formatting in JsonUtilsTest . java to improve clarity to enhance readability and maintainability of the code
added support for the tweet ID in TimeLineCursorAdapter , TimelineArrayAdapter , and Compose classes to enhance user experience by ensuring the tweet
added a warning log when a message listener is lost in MessageRunner . java to provide clearer feedback when a message is lost
replaced IOException with NoClassesFoundToAnalyzeException in FindBugs2 . java and added a new class NoClassesFoundToAnalyzeException
updated import statements from ` Key ` to ` PublicKey ` in ` KeyFetcher . java ` to ensure compatibility with the latest security features
added a boolean variable ` isIncompatible ` to the ` DLNAResource ` class to ensure proper initialization of the ` isIncompatible ` variable
updated the method name from AccountCreateContract to AccountCreateContract in RpcApiService . java to improve clarity and consistency in method naming conventions
pdfbox - 4072 : fix npe in PDFunction # getranges ( )
updated ack cause handling in MessageListenerRedeliveryTest and MessageListenerRedeliveryTest to improve clarity and maintainability of ack cause reporting
updated StarTreeIndexSpec and IndexLoadingConfigMetadata to use Server . Server . DEFAULT _ STAR _ TREE _ FORMAT _ VERSION instead of
updated title retrieval logic in FeedUpdateService . java to ensure title starts with a maximum length of 2048 characters
replaced the ` previewPanel ` with ` ColorChooserComponentFactory . getPreviewPanel ( ) ` and added a new ` Test6977726 `
updated logging level from info to debug in DefaultBuildExtensionScanner . java to improve clarity of logging for better debugging
added null check for reusable bitmap in AndroidTileBitmap . java to avoid potential NullPointerExceptions when decoding fails
added a new method ` getLayoutParams ( ) ` to ` FakeView ` to provide a way to retrieve the layout parameters in the FakeView class
added a check for the isClosed ( ) method in DefaultCursor . java and a corresponding test in CursorSimpleTest . java to ensure that the cursor
pdfbox - 4071 : fix bug in pdpagedestination . indexOfpage ( )
added JUnit Ignore annotation to JMSClientTest . java to temporarily disable tests that are no longer needed
added a private String ts field and its getter and setter methods to the Message class to enhance the functionality of the Message class
added a new class ` ExceptionMapperUtils ` and updated the ` GenericExceptionMapper ` to utilize ` ExceptionMapperUtils ` to improve error handling
changed the access modifier of AbstractExecutor from public to public to allow access to the AbstractExecutor class from other classes
refactor ` removeLegacyParameters ` method to use ` PMap ` instead of ` GHRequest ` to improve code clarity and maintainability by
refactor ` FailureLogAnalyzerTest ` , ` OperatingSystemProvenanceTest ` , ` SourceFileResultsTest ` , ` RangeTest `
refactor CSRF attribute handling in PluginServlet to use a static method for setting the CSRF attribute to improve code readability and maintainability by
added a bootstrap flag for PackageShader and ClassFileMetaData in the EclipseLoaderPatcherTransplants . java file to enhance bootstrap configuration handling by
do n ' t render drl output if non - numeric value be set
added a conditional check for debug logging before logging the default value in HiveConf . java to ensure proper logging behavior for debugging purposes
added null checks for axes and buttons in Lwjgl3Controller and Lwjgl3ControllerManager to prevent potential NullPointerExceptions when
updated import statements from ` cucumber . api . java ` to ` io . cucumber . core . backend . ObjectFactory ` in WeldFactory and test
removed unnecessary check for host in PortForwardListActivity . java to improve code readability and maintainability
added SHOULD _ SNAPSHOT _ DATA property and its getter / setter methods in GlobalConfiguration and Data classes to enable SHOULD
refactor SyncedFolderObserver to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor LocationMarshaller to improve code readability to enhance maintainability and maintainability of the code
updated touch handling logic in StatusBarTouchController , OtherActivityInputConsumer , and TouchInteractionService to use swipeWithinQuickSwitchRange to improve touch
updated import statements from ` VectorReader ` to ` VectorReaderImpl ` across multiple files to improve code readability and maintain consistency in naming conventions
replaced ArgumentMatchers . any with Matchers . any in multiple test files to simplify import statements and improve code clarity
replaced direct calls to ` getRelativePathName ( ) ` with ` getRelativePath ( ) ` in multiple files to improve code readability and maintainability
updated method signatures in SegmentMapper , CompositeTransformer , and RecordReaderFileConfig to use RecordReaderConfig instead of GenericRow to improve clarity and maintain
added a null check for the extractor in multiple classes to prevent potential NullPointerExceptions when the extractor is null
cloudstack - 118 : add findcorrectresourcelimitforaccountanddomain ( ) method to resourcelimitservice . findcorrectresourcelimitforaccount
addPotionshiftevent to inventoryeffectrenderer and add a cancelable event for the PotionShiftEvent class to ensure proper event handling for Potion
added a deprecated constant ` COLD _ READS _ TO _ OMIT _ KEY ` to the ` SizeTieredCompactionStrategyOptions ` class
added a call to leech . stop ( ) in ClientTest . java to ensure that the client stops the leech process
refactor broker metrics handling in PopMessageProcessor to utilize BrokerMetricsConstant for better readability to improve code maintainability and maintainability by
refactor KeyboardAddonSettingsFragment to improve code readability to enhance maintainability and maintainability of the code
added JUnit Ignore annotation to ShadowDateUtilsTest . java to temporarily disable tests for a moment
renamed ` EventLoopGroupMongoClientSettingsBuilderCustomizer ` to ` NettyDriverMongoClientSettingsBuilderCustomizer ` and updated related methods accordingly to improve
added upgrade request handling in UpgradeConnection , ClientConnectTest , and JettyTrackingSocket classes to ensure proper handling of upgrade requests in the websocket
added timeout handling in AndroidImplementation . java to ensure proper timeout handling for Android implementations
replaced RpcUtils . getRepositoryMemberPermissions with List < RegistrantType > in GitblitClient . java and RepositoriesPanel . java to
added a new test method ` testQuotedCastExpression ` to ` SelectTest . java ` to ensure proper handling of quoted cast expressions
added a check for ` isRoot ( ) ` in ` Misc . java ` to check if ` isRoot ( ) ` is true to
refactor FixedThreadExecutor to use DynamicPropertyFactory for group and thread per group to improve code clarity and maintainability by utilizing DynamicPropertyFactory
added null check for field before checking for null values in AbstractChangeGenerator . java to prevent potential NullPointerExceptions when field is null
updated ` CasEventListener ` methods to use ` InitializingBean ` instead of ` CasEventListener ` to improve code clarity and maintainability by
refactor animation handling in ShadowAnimation . java and add a new test for canceling endsTheAnimation method to improve code readability and maintainability
added a close method to the DeflaterOutputStream in RegionFile . java to ensure proper resource management and prevent potential resource leaks
added a new file ` gsp001 . java ` with methods to retrieve system properties at early phase Agent _ OnLoad to enable testing of system
refactor annotation handling in BeanDefinitionInjectProcessor to improve clarity and maintainability to enhance code readability and maintainability by reducing duplication
updated CameraNode , LightNode , LightNode , LightNode , LightNode , LightNode , LightNode , LightNode , and LightControl classes
refactor PopupNotificationPanel to use SwingUtilities . getWindowAncestor instead of JWindow to improve code readability and maintainability by centralizing window title
replaced NoInstanceException with InferenceException in the Infer class to simplify exception handling and improve clarity in exception handling
added a method ` getFeatureValue ( ) ` to ` FeatureField ` to provide access to the ` featureValue ` field
updated the ` after ` method signature from ` int ` to ` long ` in ` Mockito . java ` to improve clarity and maintainability of the
added onBuild property and its getter / setter methods to ContainerConfig , Info , and ExecutionDriver in ContainerConfig , and Info classes to enhance configuration
added conditional checks for RTL and RTL in Toolbar and FlowLayout classes to ensure correct alignment of buttons in the toolbar and FlowLayout classes
added a boolean variable ` enablePositionIncrements ` to the ` StopFilter ` class to enable the ` enablePositionIncrements ` flag to enable
added a new InternetAddress to the EmailsTest and SystemErrorEmailReportTest classes to ensure the correct Internet address is used for testing purposes
added a flag ` mTryShareAgain ` to ` FileActivity . java ` to reset the ` mTryShareAgain ` variable to
added tty name handling in JansiNativePty . java to improve compatibility with Maven ' s jansi native pom properties
updated byte size handling in BandwidthProcessor . java to use bytesSize instead of zero to improve performance and maintainability of the code
replaced ` await ( ) ` with ` await ( ) ` for async task spans in ` Issue410Tests . java ` to improve code
updated API URLs from public to private in EaseeBindingConstants . java to streamline the code and improve maintainability
updated sleep duration in KafkaIOIT . java to use kafkaContainer . withStartupAttempts ( 3 ) instead of 2 to ensure that the kafka container
replaced ` Matchers . anyOf ` with ` is ( itemName ) ` in ` SearchResultMatcher . java ` to improve clarity and consistency in
updated import statements and added SSL SSL handling in OkHttp . java to enhance security by ensuring trusted SSL certificates are handled correctly
replaced ` mA11yLongClickListener ` with ` buttonView ` in ` NavbarButtonsViewController ` and ` TaskbarNavButtonController `
added a new file ` HyperlinkFormula . java ` with a new class ` HyperlinkFormula . java ` and modified ` StringPtg .
added null checks for stdout and stderr in ShellStep . java to avoid potential NullPointerExceptions when escaping output directories
increased TIMEOUT _ MILLIS from 1000ms to 2000ms in AsyncAppenderTest . java to increase timeout time for test execution
added a ` objectName ` parameter to the ` escapeDatabaseObject ` method in ` AbstractDatabase ` and ` AbstractDatabase ` classes to enhance database
added a boolean variable ` inputChanged ` and modified conditional checks in ` MaterialRenameDialog . java ` to improve code readability and maintainability by
added a new test method ` setState ` in ` ShadowDisplayTest ` and a corresponding method in ` ShadowDisplay ` to ensure proper handling of display
add support for direct invocation service in ows
added case statements for KEY _ X and KEY _ Y in GlobalKeyDispatcherW . java to ensure proper handling of KEY _ X and KEY _
added minimum server version checks for pg _ catalog and pkic in PgDatabaseMetaData . java to ensure proper handling of database versions based on server version
removed the ` message ` variable from the ` Message ` class to streamline the code by eliminating unnecessary initialization
updated method signatures in ` getPathsFromResource ` to use ` URI ` instead of ` String ` to improve code readability and maintainability by
added support for monitoring node URLs in RemoteCollector to enhance user experience by allowing monitoring node URLs based on application name
refactor headers handling in HeadersBeanDefinitionParser to use a resolveAttribute method for better readability and maintainability to improve code clarity and ensure proper handling
updated EOFException handling and logging statements in ProtobufLogReader . java to improve clarity and clarity of error messages for better debugging
replace ` destroyRegistries ( ) ` with ` destroyMetadataReports ( ) ` in ` DefaultApplicationDeployer . java ` and add
refactor case statements in MyBatisProducer . java to improve code readability and maintainability
refactor GoAwayGenerator and GoAwayBodyParser to use writeStatusCode method to improve code readability and maintainability by centralizing status
updated the ` AuditEvent ` to use ` String ` instead of ` String ` in ` AuditEventTests . java ` to improve code clarity and
added conditional checks for float rounding errors in Interpolation . java to ensure proper handling of float rounding errors
updated path assignment from " defaults / " to " / defaults / " in ForgeWorldEdit . java to ensure proper handling of path paths for
added a variable ` dx ` to the builder in ` DxStep . java ` to improve code readability and maintainability
added assertions for PointRangeQuery and PointRangeQuery in TestPointQueries . java to ensure proper equality checks for PointRangeQuery objects
added a constant for HFILE _ ARCHIVED _ HFILE _ DIR and modified the initialization of archivedHfileDir to improve
added a condition to check if the file name is not equal to the file transfer request file size to ensure that the file label is only displayed when
removed the throw statement in JedisClusterCommand . java to streamline the code by eliminating unnecessary exception handling
[ hotfix ] [ test ] add chainingstrategy to rowtimeminibatchassgineroperator
updated ` FilterInvocationDefinitionSourceEditor ` to use ` PathBasedFilterInvocationDefinitionMap ` instead of ` RegExpBasedFilterInvocationDefinitionMap ` to
refactor QMapReadRandomKeyBenchmark , QMapReadRandomKeyBenchmark , QMapReadRandomKeyBenchmark , QMapWriteBenchmark , and
added G _ SCH _ B configuration to HybridPlotWorld . java to initialize G _ SCH _ B for debugging purposes
modified the handling of fields and fields in GroovyEngine . java to handle empty fields and improve identifier conversion logic to enhance robustness and maintainability of
set drawable to false in AlgoDependentNumber . java to ensure proper drawable handling for the number
added TCP connection timeout and TCP keepalive configuration in HiveConf . java and HiveServer . java to enhance server connection handling and enhance debugging capabilities
updated method name from ` getRenameEmptyFiles ( ) ` to ` isRenameEmptyFiles ( ) ` in ` FileRenameAction . java `
removed unnecessary imports for BeanProperty in DeleteHandler . java and updated logSql method in DmlHandler . java to streamline code by eliminating
refactor RealtimeSegmentRelocator to use TimeUtils for better thread management to improve code readability and maintainability by reducing redundancy
updated the success variable from ` success ` to ` success ` in ` CreateVPCCmdByAdmin . java ` to improve code readability and maintain
updated windowAlpha calculation in WindowTransformSwipeHandler and FloatingIconView classes to use Math . max instead of interpolatedProgress to improve accuracy in
updated schema checks in SecurityNamespaceHandler . java to include spring - security - 3 . 2 and spring - security - 4 . xsd schema to
updated multiple Java files for consistency and clarity to improve code readability and maintainability
changed access modifiers of fields from private to final in DisruptorProviderManage , QueueConsumer , and QueueConsumer classes to enhance encapsulation
added a new file ` TestConfigureUDF . java ` and implemented a new ` TestConfigureUDF ` class in ` ExprNodeGenericFunc
updated regex matchers in LogMessageWaitStrategy and added Parameterized parameters in LogMessageWaitStrategyTest to improve clarity and maintainability of regex matchers
updated logger initialization from ` logger . debug ( ) ` to ` logger . debug ( ) ` in ` LOG . java ` to improve clarity and
replaced ` updatePurgedShards ` with ` deletePurgedShardNodes ` for consistency to improve code readability and maintainability
updated the default version from " 16 " to " 17 - preview " in JavaLanguageModule . java and updated the LanguageVersionTest . java to
added a constant ` SECONDS _ TO _ WAIT _ FOR _ COMPRESSION _ JOBS ` to ` CoreConstants ` and updated
added a null check for lastLocationAccess in VolatileReadNode . java to prevent potential NullPointerExceptions when lastLocationAccess is null
added a ` getSteps ` method to the ` SimpleJob ` class and modified the ` getStep ` method to return an unmodifiable list to improve
removed unused ` fromBase58 ` and ` toBase58 ` parameters from ` fromBase58 ` and ` toBase58 ` to simplify code
refactor currency pair retrieval logic in BitstampAdapters . java to improve code readability and maintainability
updated the ` Measurement ` method to use ` baseTimeUnit ` instead of ` TimeUnit . NANOSECONDS ` in ` LongTaskTimer
[ flink - 24437 ] [ table - planner - euphoria - euphoria - euphoria - euphoria
refactor HostEditorActivity to use CharSequence instead of String for color values to improve code readability and maintainability
updated ` IncompatibleDatabaseHandler ` and ` DatabaseVersionHandler ` classes to use ` SystemProperties ` instead of ` IncompatibleDatabaseHandler ` to
added a constant MAX _ TWEETS _ IN _ CONVERSATION in ExpansionViewHelper . java to limit the number of replies
updated refresh interval from 1 to 2000 in AbstractCachedLDAPAuthorizationMapLegacyTest . java to increase the refresh interval from 1 to 2000
added a new test method ` getPersistedByteSizeCorrectlyForFullyAckedTailPages ` in ` Queue . java ` to ensure
updated the return statement from ` getClass ( ) . getImplementationTitle ( ) ` to ` GlowServer . class . getPackage ( ) ` to
refactor the grow method to use a new grow method to improve code readability and maintainability by centralizing the grow method
removed unused import of DataOutputStream in GdxSetup . java to streamline code by eliminating unnecessary dependencies
added a method ` getSubmittedFileName ( ) ` to ` AttachmentHttpBinding ` to provide a way to retrieve the file name from the part
added a call to markReadForLoad ( ) in LauncherFragment . java to improve readability and maintainability of the code
removed the ` PRINT _ FAILED _ CLASSES ` flag from the ` JarInstrumentor ` class to streamline error handling and improve clarity
added a method ` checkForSpillPossibility ( int currentPartition ) ` to ` HashAggTemplate ` to check if the current partition is
updated variable names from " cfx " to " tvd " in IndexWriter . java to ensure consistency in variable naming and improve code readability
added a constant for default name ID format in SamlProfileSamlNameIdBuilder to ensure proper handling of supported name formats in SAML profile
added setRedirect ( false ) and error handling in ChangePasswordPage . java to improve user feedback during password change execution
updated the closing brace in Deadlock2 . java to improve code readability and maintainability
added a method ` getMaxIdleTime ( ) ` to the ` NioReceiverMBean ` class to provide access to the ` getMaxIdleTime (
deleted the FontScalingTest . java file to remove unused code to streamline the codebase
added checks for filterBeginDate and filterEndDate in RRD4jPersistenceService . java to ensure proper handling of filterBeginDate and filterEndDate
added null checks for numVectors in GenericUDAFComputeStats . java to prevent potential NullPointerExceptions when numVectors is zero
updated import statements and import statements in ExecutableRefTest . java to use JUnit ' s JUnit ' s JUnit ' s JUnit '
added null check for view and glass pane before setting view and glass pane in JLayer . java and added a new bug6994419 .
camel - 14263 : camel - wiretap - add support for wiretap
changed the visibility of the setAction method from public to protected to allow subclasses to access the method from other methods
added a new option validation for planner . enable _ topn in PlannerSettings . java and updated SystemOptionManager . java to enable the
removed unnecessary ` aeronDirectoryName ` method calls from ` ArchiveLoggingAgentTest ` , ` ClusterLoggingAgentTest ` , and ` Driver
added a queued flag to RedisConnection and updated related methods in RedisExecutor and RedisQueuedBatchExecutor to improve connection management and ensure proper handling of queued
replaced ByteArrayOutputStream with URL and added URL handling in HiveConf . java to improve URL handling and ensure proper resource management during configuration initialization
updated model initialization to use criteria . getDevice ( ) instead of Device . defaultDevice ( ) to improve clarity and consistency in model creation logic
removed the onCreateOptionsMenu ( MenuInflater ) method from SimulationViewer . java to streamline the code and improve readability
refactor CertificateValidator class to improve code readability to enhance maintainability and maintainability of the code
updated the path for the home directory from " user . home " to " hawtio . dirname " to ensure the correct directory path is used
added logic to return SINGLE _ SPACE instead of SINGLE _ SPACE to ensure proper handling of empty comments in space operations
changed the visibility of ` mClosed ` and ` mActualDictionary ` from ` boolean ` to ` volatile ` in multiple files to ensure thread safety
removed the printStackTrace ( ) method call in ContextHandler . java to streamline error handling by eliminating unnecessary logging
updated the CustomItemDropTest class to extend BaseTest and added a new test class for CustomItemDropTest to enhance test coverage and ensure proper
added a check for ifNotExists in DDLTask and updated related classes to include a boolean parameter to ensure proper handling of ifNotExists in
refactor NfsSecondaryStorageResource to use Arrays . fill ( byte ) for read operations to improve readability and maintainability of the code
updated control request stream ID retrieval in EchoServiceNode , BasicAuctionClusteredServiceNode , and BasicAuctionClusteredServiceNode classes to
added support for spatial operators in CapabilitiesTransformer and updated WFSTestSupport to include supported spatial operators to enhance functionality by allowing spatial operators to be
added @ LuceneTestCase . AwaitsFix annotation to BasicDistributedZkTest . java to improve test coverage for test failures
refactor preface handling logic in Http11InputBuffer . java to improve readability and maintainability of the code
changed the ` isIngressExclusive ` variable from true to false in ` AeronCluster . java ` to ensure that the ` isIngressExclusive `
updated HBaseStorageHandler to use an array of HBASE _ CACHE _ KEYS instead of a single string array to improve flexibility in handling cache
added a new variable ` runningRecordCount ` and updated the ` updateRunningCount ` method to use ` currentRecordNumberInFile ( ) `
added a filter for the year in the CategorizationFragment to filter out the merged items to improve user experience by providing more informative logging for
updated color handling in CacheableTextView , CellLayout , CellLayout , and HolographicOutlineHelper to use Mode . CLEAR instead of Mode .
added a check for OpenGL ES 2 . 0 in the Mesh class to ensure that the render method is only used when the OpenGL ES 2
added a method to set the invocation context for the ActionContext in BackgroundProcess . java to ensure that the invocation context is correctly set for the application
added a new method ` getUnescapedName ` and updated related methods in ` BaseSemanticAnalyzer ` and ` QBParseInfo ` to
added connection timeout setting in TestConnections . java and modified the count initialization in StubConnection . java to ensure connection timeout is set to final
added test cases for query aggregations in TestHiveAggregationQueries . java to ensure correct behavior of query aggregations in the application
replace idleTimeout with writeTimeout in WebSocketConstants . DEFAULT _ IDLE _ TIMEOUT and updated idleTimeout handling in WebSocketChannel . java to improve
updated the variable ` shares ` to use ` user . toPlatformAccount ( ) . name ` instead of ` account . name ` to ensure consistent
refactor InetAddress address handling in Inet6Address . java to improve clarity and maintainability to enhance code readability and prevent potential NullPointerExceptions
replaced calls to ` updateProgress ( ) ` with ` setButtonEnabled ( button ) ` in ` PlaybackControlView . java ` to improve code
updated the ` isPresent ` method to use ` id ` instead of ` idInternal ( ) ` in ` Session ` and ` Token ` classes to
updated the method call from ` getTransitiveClasspaths ( ) ` to ` getImmediateClasspaths ( ) ` in ` DefaultJavaLibrary `
changed the default value of UseExceptionProbability from true to ____ in GraalOptions . java to improve clarity and maintainability of the code
updated newPlateColor handling in PredictedAppIcon . java to use M3HCT for improved color handling to enhance user experience by
refactor MySQLUser to use a new init method for user creation to improve code readability and maintainability by centralizing the init method
updated aliases from " center " to " centre " in Middle . java to ensure consistent naming conventions for better readability
added DirectUpload injection method to CommonsApplicationComponent and modified DirectUpload class to be public to allow external access to DirectUpload in the application
updated axis position calculations in BarChartActivity , BarLineChartBase , BarLineChartBase , BarLineChartBase , BarLineChartBase ,
updated flavors in AndroidLibraryDescription and JavaLibraryDescription to include CLASS _ ABI _ VERIFIED _ SOURCE _ ABI _ 
added support for operation event status type in OnlineHubService and CompositeLogService to enhance the functionality of the CompositeLogService class
added debug logging for annotations in DexAnnotation . java to improve clarity and maintainability of annotations in the code
replaced ` @ StartBundle ` with ` @ Setup ` and ` @ Teardown ` in ` JmsIO . java ` to improve code
[ hotfix ] [ test ] add class path to sortedarraystringmaptest
updated file loading logic in PackageResourceLoader . java to improve clarity and consistency to enhance code readability and maintainability by using a more descriptive
updated method names from ` this . aggregate ` to ` max ` and ` min ` in ` DataSet . java ` to improve clarity and consistency in
added JUnit Ignore annotation to WorkProfileTest . java to temporarily disable tests that are no longer needed
updated ` ShouldHaveMessage ` to use ` escapePercent ` instead of ` escapePercent ` in ` ShouldHaveMessage ` and added a new `
added a method ` getURI ( ) ` to ` JCache ` and updated its usage in ` JCacheManager ` and ` JCache ` classes to
added logging level handling for ActivitiTaskAlreadyClaimedException in CommandContext . java to improve clarity and maintainability of logging level based on
updated the initialization of ALPNClientConnectionFactory in HTTP2Client . java to improve code readability and maintainability
updated the calculation of the value in EntityPropertiesPacket to use the instance ' s getBaseValue ( ) instead of the value to simplify the code by
updated SonosAudioSink to use ThingHandlerHelper instead of ThingStatus to improve code clarity and maintainability by using a more descript
updated await timeouts in ContextRegisterListenerTest , SpringMvcClientBeanPostProcessorTest , and SpringMvcClientBeanPostProcessorTest to use a
updated logging level from info to debug in LightThingHandler . java to improve clarity and consistency in logging messages
updated AsyncJobManagerImpl to use RejectedExecutionException instead of Job - Executor to improve error handling and ensure proper handling of rejected executions
replaced ` Pluralizer . * ` with ` StringJoiner . join ` in multiple files to improve clarity and maintainability of the code
changed the type of the ` generate ` method from ` Frame ` to ` DataFrame ` in ` DataGenerator . java ` to improve type safety and
refactor multiple package - info . java files to improve code organization to enhance maintainability and readability of the codebase
added a check for empty physical column names in OrcPageSourceFactory and added a new test method in TestHiveFileFormats to ensure
added a call to mixPlay ( input , amp ) in the Engine . java file to enhance playback functionality for better readability
refactor JComponent and SynthTextPaneUI classes for improved readability to enhance maintainability and maintainability of the code
updated the return values from ` Math . abs ` to ` Math . abs ` in multiple test files to improve accuracy and accuracy of test execution
removed conditional checks for leadingIncludePaths in PreprocessorDelegate . java to simplify code and improve readability
updated the test method name from ` testMatrixVectorMultiplicationShouldUseBrackets ` to ` matrixVectorMultiplicationShouldUseBrackets ` and
added new elements " getSearchCriteria " , " find " , " findAll " , and " findAll " to the SelenideElementProxy class
updated the calculation of the sample rate in DefaultAudioSink . java to ensure that the correct sample rate is set to 48000 instead of 48000
added a method ` getFormula ( ) ` to ` Name ` and modified ` XSSFName ` to accept a ` String ` parameter to improve
updated the calculation of the target value from 60000 to 90000 in HighDimensionsTest . java to improve accuracy of scale factor calculations
updated condition in SimpleTypeGT . java and added a new test for pattern schema parsing in GMLParserTest . java to ensure proper handling of
added a new file ` ClassPathXmlJobRegistryContextTests . java ` that includes a test class for locating job names in the registry to
changed float array types from float to long in MotionPauseDetector . java to improve performance by using long arrays instead of float arrays
added @ Deprecated annotation to RestletEndpoint . java and updated RestletGetTest . java to include a deprecated annotation and added a new test for
removed the ` showOut ` method from the ` LogEndpointBuilderFactory ` class to streamline the configuration for better readability and maintainability
refactor ChromeTraceBuildListener to use a new ` writeChromeTraceMetadataEvent ` method to improve code readability and maintainability by centralizing
updated limitOrders logic to check for canceled and REJECTED order status to ensure correct handling of canceled and REJECTED orders
added pixel stride checks and modified pixel offset calculations in BufferedImage and LCMSImageLayout classes to improve image layout handling and ensure correct pixel offsets are used
updated timestamp handling in Event and JrubyEventExtLibrary classes to use JrubyTimestamp . newRubyTimestamp instead of Timestamp . newTimestamp to improve
added a check to return a resource if the path endsWith " / " to ensure proper handling of resource paths in the WebAppContext
updated ScriptFunctionImpl from " SETTER " to " GETTER " in ScriptFunctionImpl . java to improve code readability and maintainability by
replaced ` amt ` with ` scrollAmount ` in ` JEditTextArea . java ` and updated conditional logic in ` JEditTextArea . java
updated import statements and added null check for callerLoopScope before setting guardsStage and stageFlags to enhance code robustness and prevent potential NullPointerExceptions
updated import statements in SniperPrettyPrinterJavaxTest . java to use jupiter . api instead of spoon . support . sniper .
refactor URLOutputStreamTest and GuiceFactoryTest to use try - with - resources for better resource management to improve code readability and maintainability
added @ Entity annotations to Mail . java to support Entity annotations in the Mail class
updated default values from false to true and modified command line arguments in the Main . java file to enhance clarity and maintainability of the code
added methods to retrieve atomic data and values buffer in CountersReader . java to enhance data handling capabilities for improved performance
added a boolean flag ` hasReadNonEmptyFile ` in ` ScanBatch . java ` and a corresponding test in ` TestJsonReader . java
added null check for internalCustomName before fail comparing in StringSubject . java and updated test cases in StringTest . java to improve error
added a regex pattern for LIB _ PATTERN in LibUtils . java to improve code readability and maintainability
updated catch statements in ` JrtJavaBasePackages ` and ` PackageHelper ` classes to use ` Error ` instead of ` ClassNotFoundException ` to
added a method to check if the file system is in safe mode in MasterFileSystem and modified file system check logic to ensure proper handling of safe mode
updated error message formatting in TranslatingJavacPhaseTracer . java to improve clarity and maintainability of error messages
removed the ` PluginDescriptor ` method from ` DefaultPluginCache ` and updated its implementation in ` DefaultPluginCache ` to streamline the code by
refactor contact status handling in OperationSetPersistentPresenceJabberImpl . java to improve code readability and maintainability by reducing redundancy
removed unused imports and modified the withResourceAndParams method in multiple classes to simplify the code and improve readability by eliminating unnecessary dependencies
added a new file ` AccountInfoFetchIntegration . java ` that tests the ` fetchAccountInfo ` method to verify the functionality of fetching account
added mouse wheel functionality to VDUInput , vt320 , and TerminalView classes to enhance user experience by providing mouse wheel functionality
updated library path setting logic in Natives . java to improve clarity and consistency in library path handling
removed the ` ColumnHstore ` annotation and updated import statements in ` AnnotationFields ` , ` DeployCreateProperties ` , and ` Deploy
added support for PLAYER _ SKIN _ FLAGS in GlowPlayer , MetadataIndex , and MetadataIndexTest to enhance metadata handling by allowing
updated LoadBalancerWithServiceTests to use slf4j instead of RequestFieldMatcher to improve code clarity and maintainability by utilizing logging for master URL
refactor ` createSimpleEntryView ` method to use ` getMember ` instead of ` localMember ` to improve code readability and maintainability
replaced System . getProperty ( " os . version " ) with AccessController in JRSUIUtils . java to improve security by using AccessController for
added a new constant for FREEMARKER _ CONFIGURATION _ FILE _ SUFFIX and updated fileSuffix initialization in TemplateEngineFreemarker . java to
updated hashCode calculation in SelectMessageQueueByHash to use mqs . size ( ) instead of mqs . size ( ) to ensure
refactor dockParent handling in ToolbarPanel to use AnimationCallback for improved animation handling to enhance code readability and maintainability by centralizing animation
replaced ` bindConditionally ` with ` bind ` in ` StyledTextAreaVisual . java ` to improve code readability and maintainability by
added ` declaredPlatforms ` parameter to ` PrebuiltAppleFrameworkDescription ` , ` CxxBinaryDescription ` , and ` CxxGen
replaced SimpleParameterAccessor with ParametersParameterAccessor in JpaCountQueryCreator , PartTreeJpaQueryExecution , and PartTreeJpaQueryExecution
added a null check before setting the password attribute to avoid potential NullPointerExceptions when passwordAttribute is null
added a check for array type in DataUtilities and implemented a test for default values in DataUtilitiesTest to ensure proper handling of array types in the
added null check for hostAddress and port in SslContextFactory . java to prevent potential NullPointerExceptions when hostAddress is null
updated assertions in TestFSTableDescriptors . java to check if cachehits > = count * 2 to ensure that cachehits is greater than
added a new method ` deleteCookieNamed ` to ` ExportedWebDriverFunctions ` and updated cookie deletion logic in ` InternetExplorerDriver ` to
added a boolean flag ` mHasEndedLauncherTransition ` in ` AbsSwipeUpHandler ` and updated related logic in ` RecentsView `
added meta charset attribute to HTML files in HTMLListWriter . java and HTMLWriter . java to ensure proper handling of meta charsets
refactor IndexReader class to improve code readability to enhance maintainability and maintainability of the code
updated HIVE _ STATS _ KEY _ PREFIX _ MAX _ LENGTH from 200 to 150 in HiveConf and TableScanOperator to
updated the ` comboBox . add ` method in ` BasicComboBoxUI . java ` and added a new ` bug6337518 . java `
refactor TestRandomAccessBuffer class for improved readability to enhance maintainability and maintainability of the code
refactor UserInfoActivity class to improve code readability to enhance maintainability and maintainability of the code
added notification notifications for HomeContentProvider in multiple service classes to ensure proper notification of content URIs when notifications are received
added a new boolean field ` mStayPressed ` and updated background handling logic in ` BubbleTextView ` and ` Launcher ` classes to
updated the ` getFallbackResponse ` method signatures to accept ` Throwable ` instead of ` Invocation ` to enhance error handling by providing a more informative
removed unnecessary conditional check for env . _ compile _ only in DumpBytecode . java to simplify code and improve readability
updated return statements in ChannelUri . java to check for null tags before returning null to improve robustness by avoiding potential NullPointerExceptions
updated JAVA _ REGEX _ SPECIALS from " [ ] ( ) " to " [ ] ( ) " in RegexpUtil .
added action bar title handling in FileActivity and updated action bar title in FileDisplayActivity to ensure action bar title updates correctly when the action bar is
replaced ` Iterables . getOnlyElement ( ) ` with ` Iterables . getLast ( convertedElements ) ` in ` PythonDslProjectBuild
updated the schedule annotation from " * " to " 0 " in CleaningService . java to ensure the correct time zone is used for cleaning
updated TransactionalValidationListener to handle partitioned table partitions and improved error handling to enhance the validation process for partitioned table partitions
added a new method ` Enable polling ` in ` ReplicationHandler . java ` and updated the ` SnapPuller . java ` to enable polling
updated generatedKey variable from int to long in ShadowSQLiteDatabase . java and added a new test for auto - increment functionality in SQLiteDatabaseTest .
updated the return statement from ` getC ( ) ` to ` get ( ) ` in ` SimpleReferenceCache . java ` to improve code readability
updated error messages in multiple test classes to include " failed to " failed to " failed to inline " and " failed to inline " to improve clarity
updated keepAliveTimeoutShared and keepAliveTimeoutCustom fields from 60 to 10 in WebClientFactoryImpl . java to improve code readability and maintainability by
deleted the HttpTestAccount001 . java file to remove unused code to streamline the codebase
refactored error handling in ` Dispatcher ` and ` DispatcherTest ` to use ` try ( Throwable ) ` instead of ` Exception ` to improve
camel - 14286 : camel - cxf : fix camel - cxf binding to be compatible with cxf _ message
added a case for ` ~ ` in ` ClientUtils . java ` to handle ` ~ ' ' cases in ` ClientUtils . java ` to
camel - 14289 : camel - slack - add default delay for camel - slack
refactor block removal logic in BlockUtil . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated form layout values from 4 , 4 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 3 , 3 , 3 ,
added a new file ` bug8057791 . java ` with a new file ` bug8057791 . java ` that implements a
updated conditional checks in LambdaToMethod and added a new class LambdaInterfaceStaticField to improve code readability and maintainability
refactor RunnerBuilder to use WebSocketMethodsFactory for handling WebSocket methods to improve code readability and maintainability by centralizing WebSocket methods
added a null check for the to parameter in ComposeActivity . java to ensure proper handling of null to avoid potential NullPointerExceptions
refactor ParquetFixedWidthDictionaryReaders and ParquetFixedWidthDictionaryReaders to improve readability and maintainability of the code
refactor divider bar calculations in PortraitPagedViewHandler . java to use dp . isLandscape instead of Math . round to improve
added a new ` Log ` annotation and a ` LogInterceptor ` interface in ` SpringCloud Example ` and ` TestController ` classes to provide a
updated debug logging in QueuedThreadPool . java to include trace - > trace - > trace - > trace - > trace - > trace to ensure
refactor caching methods to use Optional < Implementation > instead of ReferenceType to improve code clarity and maintainability by standardizing implementation handling
updated the calculation of the reference map in FrameMap . java to include a totalFrameSize parameter to ensure the reference map reflects the total frame size
refactor TypesafeConfigurator to improve code readability to enhance maintainability and maintainability of the code
added a new file ` CamelGraphqlTest . java ` with a test class ` CamelGraphqlTest . java ` to implement a test for
updated the main method from ` main ` to ` bug1 ` and ` bug3 ` in ` RFE2891944 . java `
updated encoding handling in HttpClientIntroductionAdvice to use UTF - 8 instead of UTF - 8 to improve code readability and maintainability
updated the ` unsupportedPlatformTool ` class to implement ` UnsupportedPlatformTool ` instead of ` unsupportedPlatformTool ` to improve clarity and maintainability of
updated the loop count calculation in RecoveryStrategy . java to use a int instead of a double to improve clarity and consistency in log messages
added ` size ( ) ` method to ` FlightConfiguration ` and ` FlightConfigurationImpl ` classes to provide a way to retrieve the size of the
refactor test methods in KieAddressManagerTest , AddressManagerTest , and AbstractAddressManagerTest to use Field instead of Field to improve performance and
updated components in VLCVideo . java for clarity and consistency to improve code readability and maintainability
updated URLs from ` bisq / bisq / bisq ` to ` bitsquare / bitsquare / bitsquare / bitsquare ` to
updated the AUTHORITY constant from " talon . provider " to " twitter . provider " in HomeContentProvider . java to ensure compatibility with
updated user configuration directory from " user . home " to " / user . home " in MavenCli . java and MBoot . java to ensure
added a call to gl20 . gl_ ARRAY _ BUFFER in VertexBufferObjectWithVAO . java to ensure proper handling of buffer
refactor ServerHttpSecurity class to improve code readability to enhance maintainability and maintainability
added JUnit JUnit @ Disabled annotation to PostgresStoredProcedureIntegrationTests . java to disable tests for testing purposes
added default headers to HttpClientProperties , CasCoreHttpConfiguration , and CasCoreHttpConfiguration to enable customization of HTTP headers in the configuration
added new classes ` ThingsboardCredentialsViolationResponse ` , ` UserPasswordNotValidException ` , and ` UserPasswordNotValidException ` to handle
deleted the NoOpConfigPathGetter . java file to remove unused code to streamline the codebase
updated signingKey initialization in EngineAuthService . java to use Bytes . fromHexString instead of Codec . base16Decode to improve code readability
replaced CascadedStyle with CSSName and added null checks for float values in FloatUtil . java to ensure proper handling of float values based on
added imports for PlanningEntity , PlanningEntity , PlanningEntity , PlanningEntity , PlanningEntity , PlanningEntity , PlanningEntity , and PlanningFactProperty
replaced ` CaseInsensitiveHeaders ` with ` MultiMap ` and updated the ` getDefaultHeaders ` method to use ` MultiMap ` instead of ` 
replaced ` enc ` with ` charset ` in ` ProxyServer ` , ` ProxyServer ` , and ` Realm ` classes to improve clarity and
added a method ` getJobId ( ) ` to ` StepContext ` and its corresponding tests in ` StepContextTests ` to provide a way to
updated comparison logic in ExpandableUploadListAdapter and FileStorageUtils to use Long . compare instead of Long . valueOf for consistency to improve accuracy in
added debug logging for HTTP responses in DefaultJdkHttpClient and JdkBlockingHttpClient to improve logging clarity and ensure proper logging of HTTP responses
updated import statements from ` GeneralSecurityException ` to ` UsernamePasswordCredentials ` in ` LegacyAuthenticationHandlerAdapter . java ` to improve code clarity and
changed the visibility of the WingDings class from final to public to allow access to WingDings from other classes
refactor filter removal logic in FilterManager . java to check if the filter is not our own key to improve code readability and maintainability by
added a ` wrap ` method to ` BCPGInputStream ` and modified the ` wrap ` method in ` BCPGKeyRing ` to
updated MinimalLockingWriteAheadLog to use BufferedOutputStream instead of DataOutputStream to ensure proper resource management and prevent potential resource leaks
added a new test method ` testSelectAll ` to ` TestJdbcDriver2 ` and modified column qualifier handling in ` HiveBaseResultSet ` to
refactor FocusTransitionTest class to improve code readability to enhance maintainability and maintainability of the code
updated GWT import from org . gwtproject . core . client . GWT to com . google . gwt . core . client . GWT
refactor CounterStatsAggregator to check for MapRedTask instead of MapRedTask to improve clarity and maintainability of job retrieval logic
updated the initialization of the readListener variable from ` Objects . requireNonNull ( readListener ) ` to ` Objects . requireNonNull ( readListener )
refactor color handling in AppearancePanel to use ColorSelectionModel instead of ColorSelectionModel to improve code readability and maintainability by centralizing color handling
updated the constructor call from ` false ` to ` hidden ` in ` TaskHelper . java ` to improve clarity and maintainability of the constructor
[ hotfix ] [ test ] fix failovertimeouttest . testfailovertimeouttest . testfailovertimeouttest
pdfbox - 2471 : close tif file in CCITTFactory and CCITTFactoryTest classes to ensure proper resource management and prevent
added import statement for DefaultParameterHandler in BoundSql , SqlSource , and LanguageDriver classes to improve code readability and maintainability
refactor loop depth handling in LinearScanWalker to improve clarity and consistency to enhance code readability and maintainability by reducing duplication
added a new file ` MicronautAstBuilder . java ` that implements a compile method in ` GroovyCompiler ` to facilitate the compilation of Groovy
refactor cursor closing logic in PgResultSet and PgStatement classes to use closeInternally to improve code readability and maintainability by central
changed serviceAdvisorType from null to PYTHON in ServiceInfo . java to allow dynamic access to the serviceAdvisorType in the application
updated the ` resolver ` variable to use ` threadResolver ` and modified the ` getResolver ` method to use ` ThreadLocal ` to improve thread management
updated ` Path ` and ` PdfContentStreamProcessor ` to use ` List < String > ` instead of ` Collection < ? extends Subpath >
replace new byte arrays with a random byte array in SendCoinShieldTest . java to improve code readability and maintainability by using random byte arrays
added a method to set an email address and a distinguisher in SkeinParameterSpec . java to provide a way to set a personalisation
removed unnecessary conditional checks for argCount in CodeGenerator . java to simplify code and improve readability
updated scroll method parameters from 1 to 50 in multiple classes to improve code readability and maintainability
changed the pointer field from private to public and added reset methods in FlatRecordReader . java to allow access to dataStartByte and reset to the
updated ` ContentDigestHistory ` and ` BdbContentDigestHistory ` classes to use ` BdbContentDigestHistory ` instead of ` ContentDigest
updated import statements and simplified casting logic in CastExpression . java to improve code readability and maintainability by eliminating unnecessary imports
refactor accepts handling in AbstractResource to use boolean instead of ArrayList to improve code readability and maintainability by reducing redundancy
added a false parameter to the TaskView class to ensure proper functionality of the TaskView class
added a method ` isAutoIncrement ` to ` CreateTableChange ` , ` LiquibaseDataType ` , and ` LiquibaseDataType `
updated the errorText variable from ` errorText ` to ` errorText ` in ` ExceptionResponse . java ` to improve clarity of the error message
updated import statements and modified import statements in LocalManagementTest . java to improve code readability and maintainability by eliminating unnecessary imports
updated the logic for adding currentStatus and boosterStatus in BasicEventSimulationEngine . java to ensure proper insertion of currentStatus and boosterStatus
added ajp connector creation and ajp port parameter to the GitBlitServer class to ensure proper handling of AJP port configuration
added a new class ` IntersectionClassType ` and created a new ` Intersection03 ` class in ` TransTypes . java ` to ensure
renamed the EmbeddingTest class from EmbeddingTest to EmbeddingITest to improve clarity and consistency in naming conventions
added a native method ` startToolkitThread ` to ` WToolkit . java ` to ensure that the thread is only created when the thread is not
added a pool parameter to the BundleContentSubstitutedLocalizationSupport constructor and modified the LocalizationFeature to use it to improve the flexibility of bundle compression
added conditional checks for surface visibility in PApplet . java to ensure proper visibility behavior for surface surfaces
replace " RecordTransformationTest " with " getClass ( ) . getName ( ) in AbstractRecordExtractorTest . java to ensure the correct file name is
added support for fullNodeHttpEnable and solidityNodeHttpEnable in multiple classes to enable solidity configuration based on configuration
added property ` service ` to the ` GoogleCloudFirestoreTicketDocument ` and modified the ` GoogleCloudFirestoreTicketRegistry ` to include a
refactor the Generate class to improve code readability to enhance maintainability and maintainability of the code
updated the ` @ ScalarFunction ` annotation in ` JsonFunctions ` , ` JsonFunctionsTest ` , and added unit tests for ` JsonFormat `
added a boolean flag ` DOTS _ ONLY ` to ` BadgeRenderer ` and updated alpha calculations in ` IconPalette ` and ` Notification
removed the final modifier from the getConfiguration method in FreemarkerManager . java to simplify the code and improve readability
added a new test method ` testInvalidExcludedPackageNamePatterns ` to ` OgnlUtilTest . java ` to verify that excluded package patterns are
updated device UDID retrieval logic in AppleTest and IdbRunTestsStep to include SDK names to ensure proper handling of device UDID
refactor DefaultHttpClientFilter to use ProduceProcessorManager instead of InvocationType and improve error handling in TestDefaultHttpClientFilter to enhance code clarity and
added a null check for mScript before calling contextBindRootScript ( null ) to avoid potential NullPointerExceptions when mScript is null
added a static final boolean variable ` TEXT _ BURN ` and updated lineCount checks in ` Utilities . java ` to ensure text paint is only
added ` Teardown ` and ` onetimeTeardown ` methods to ` TestColumnAccess ` , ` TestReadEntityDirect ` ,
added a method to retrieve the parser from the SecurityNamespaceHandler to ensure proper parser retrieval for security namespaces
updated conditional checks in BoundedLocalCache and added a new fastpath method in BoundedLocalCacheTest to improve code readability and maintainability
replaced ` IOException ` with ` flush ` in ` FrameBytes ` , ` WebSocketAsyncConnection ` , and ` WebSocketAsyncConnection ` to enhance connection
added tests for all _ assertions _ should _ pass2 and all _ assertions _ should _ pass3 in SoftAssertionsPerfTest . java to
added TEST _ FAILURES _ EXIT _ CODE constant and modified the ` assertExitCode ` method in ` PythonRunTestsStep ` to improve
added a conditional check for markupEnabled in GlyphLayout . java to ensure that subsequent run runs are enabled when markupEnabled is enabled
updated test assertions in TestBooleanRewrites . java to use Arrays for better performance to improve test accuracy and maintainability of test coverage
updated the assignment of enumClass from getEnclosingClass ( ) to getSuperclass ( ) in TypeHandlerRegistry . java to improve clarity and consistency in class
replaced ` PlayerSocketConnection ` with ` PlayerSocketConnection ` , ` PlayerSocketConnection ` , and ` PlayerSocketConnection ` , and ` Player
added a boolean variable ` mStarted ` and modified ` LauncherAnimUtils ` to use ` ViewTreeObserver ` instead of ` observer ` to
updated multiple Java files related to CheckIndex , BlockTreeTermsReader , and FuzzyTermsEnum to improve code clarity and maintainability
updated import statements for NODE _ CAN _ BE _ ASSIGNED and NODE _ CAN _ BE _ ASSIGNED in ReplicaAssigner .
changed the return value of MEDIAPARSERV2 from false to true to ensure proper handling of media information parsing
added a method ` isAcceptable ( Element element ) ` to the ` BeanDefinitionInjectProcessor ` class to ensure proper handling of ROUND _ TYPE
added assertions to verify the existence of a warehouse directory and partition in FolderPermissionBase . java to ensure proper handling of partition permissions in database operations
updated the ` handleProviderRegistered ` method to include a ` PresenceStatus ` parameter and modified the ` publishStatusInternal ` method to include a
updated the random calculation in PastelColor . java to use the correct color base value to improve code readability and maintainability by using a
refactor ScriptEngineFactory to improve code readability to enhance maintainability and maintainability of the code
refactor image creation in HolographicViewHelper to use a new method ` createOriginalImage ` to improve code readability and maintainability by central
updated request handling logic in CloudClient . java to handle null request body to improve robustness by preventing potential NullPointerExceptions
added a ` containingPhrase ` parameter to the ` getTag ` method and modified the ` inferPOS ` method to include a ` containingPhrase ` parameter
removed unused import of IOException in IOChannelUtilsTest . java to streamline code by eliminating unnecessary dependencies
added a check for HIVE _ PASSTHROUGH _ OF _ CLASSNAME before using it in Table . java to ensure proper handling of
refactor ChunkListener , AfterChunk , BeforeChunk , and AfterChunk classes to improve code organization and maintainability
updated the condition for checking the length of the ch in DOMBuilder . java to ensure that the length is greater than the length before proceeding
refactor graph retrieval methods to use HierarchicalUndirectedGraph instead of NetworkBigenvectorCentrality to improve code clarity and maintainability
camel - 14299 : camel - translate2 - add error message if the service be not supported in this region
added a new file ` PublicStaticInterfaceMethodHandling . java ` implementing ` InterfaceWithStaticAndDefaultMethods ` and ` PublicStaticInterfaceMethodHandling
camel - 14263 : camel - defaultkeyselector : use defaultkeyselector instead of defaultkeyselector
refactor catch statements in LogResolverBean . java for clarity to improve code readability and maintainability
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
updated JGit version from " JGit 1 . 0 . 0 " to " JGit 1 . 1 . 0 ( 2011151100 )
refactor path retrieval logic in HttpClientIntroductionAdvice . java to improve code readability and maintainability
added TransformerParser and TestBean classes for transforming transformers to enhance testing capabilities for transformer processing
updated BACK _ FACTOR and REWIND _ TIME constants from 30000 to REWIND _ TIME and modified condition checks to
added a method ` isScrollWheeling ( ) ` to ` CodenameOneImplementation ` , ` CodenameOneImplementation ` , and ` Java
updated usage string formatting in UtilityCommands and DocumentationPrinter classes to improve code readability and maintainability
updated the attribute name from " collection . map " to " collections . map " in CommunityListServlet . java to ensure consistency in attribute naming convention
refactor ` setSeqFiles ` and ` setUnseqFiles ` methods in ` CrossSpaceCompactionResource ` and ` RewriteCrossSpaceCompaction
removed the @ Override annotation from the Observation class to streamline the code by eliminating unnecessary overrides
refactor rule update logic in ProjectPropertiesModelImpl . java to improve clarity and consistency to enhance code readability and maintainability by centralizing rule
refactor thread safety checks in AbstractSootFieldRef . java to improve code readability and maintainability
updated ElasticMeterRegistry to use a new ElasticNamingConvention class and added a new ElasticNamingConvention class to enhance elastic measurement capabilities and
added new methods for handling Units in IController , TinyGController , and BackendAPI classes to enhance functionality for handling Units in the
added a new test method ` hugeHorizontalRule ` in ` PathologicalTest . java ` to verify rendering rendering behavior to ensure proper rendering of large
replaced System . out . toString ( ) with TTY . print ( ) in TypeSystemTest . java and PartialEscapeAnalysisPhase . java
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
updated conditional check for frameLength in LogInspector . java to ensure proper handling of frame lengths
added a variable ` zeroValue ` and updated return statements in ` IntFloatMap ` , ` IntIntMap ` , and ` IntIntMap
refactor ImageDownloadService to use Display . getInstance ( ) instead of Display . getInstance ( ) to improve code readability and maintainability by central
added a null check for the registered variable in HandlerRegistration . java to prevent potential NullPointerExceptions when demand is null
removed the ` hasNextSibling ( ) ` method from multiple classes to simplify the method signature and improve code readability
added null check for results in RedisDistributedMapCacheClientService . java to ensure robustness by preventing potential NullPointerExceptions
added logging statements for MobFileCache enabled and evicted the cache size in MobFileCache . java to improve logging clarity and ensure proper
refactor ColConvCCMTest class to improve code readability to enhance maintainability and maintainability of the code
replaced the ` target ` variable with ` allowCovariantReturns ` and added ` allowCovariantReturns ` in ` Check . java ` to improve
PDFTextStripperByArea and PDFTextStripperByArea classes to improve code readability and maintainability by using a more descriptive
replaced Float . toString ( ) with String . asString ( ) and added a new X class for JSON serialization to improve type safety and maintainability
added a return statement to the GenericFileConsumer class to improve code readability and maintainability
added a Runnable to run the delegate in bug6638195 . java to ensure the delegate is only invoked when the delegate is not invoked
updated the calculation of maxTextMessageSize from getMaxTextMessageBufferSize ( ) to getMaxBinaryMessageSize ( ) in CompressExtension . java to
updated the calculation of ` steeringValue ` to use ` . 5f ` instead of ` - . 5f ` and ` - . 5f
replaced Arrays . equals ( encryptedPassword , encryptedAttemptedPassword ) with MessageDigest . isEqual ( encryptedPassword , encryptedAttemptedPassword ) to improve
replaced ` value . toString ( ) ` with ` LocalDate ` and ` LocalDateTime ` in ` JdbcSerDe . java ` to improve clarity and
updated version from 2 to 3 and modified metadata handling logic in ParseData . java to improve performance and ensure proper metadata handling when version < 3
updated FlywayAutoConfiguration to include ConditionalOnClass and ConditionalOnBean in FlywayAutoConfiguration and FlywayAutoConfigurationTests to
added sorted ( ) method to ClassesImpl . java to ensure proper sorting of classes in the code
added a method ` getCurrentStableState ( ) ` to ` LauncherStateManager ` and updated related methods in ` AbstractLauncherUiTest `
refactor SharedInformer class to improve code organization to enhance maintainability and readability of the code
refactor testCloseScope0 to use ScopedMemoryAccess instead of ScopedMemoryAccess to improve code readability and maintainability by centralizing
updated test timeout from 500 to 5000 in AdaptServerSocket . java to improve test reliability by allowing more time for test failures
refactor CaptchaChannelProcessorTests to improve code readability to enhance maintainability and maintainability of the code
added a check for the owner collection in MetadataImport . java to ensure proper handling of collection selections based on the owner ' s ID
added retry times for registry cache file failures in AbstractRegistry . java to ensure that registry cache file failures do not exceed the maximum retry time
updated the initialization of TrackingDirectoryWrapper to use the directory instead of mergeDirectory to ensure the correct directory is used for tracking directories
added test methods for handling loop and non - loop bugs in UnusedImportsRuleTest and RuleTst classes to ensure correct handling of
added validation for insert overwrite queries in HiveIcebergStorageHandler and updated test cases in TestHiveIcebergInserts to ensure that
updated assertions in BootstrapTests . java to use IdentityZoneProvisioning . class instead of zoneConfiguration . getSamlConfig ( ) . getKeys ( )
updated method names from ` isAnonymousOrLocal ` to ` isAnonymousOrNonStaticLocal ` in ` Excluder . java ` to improve
changed the access modifier of the getAddressVector method from ` theAddressie ` to ` addressees ` in ` MailerModel . java ` to
removed unused comments from CommentsParser . java to streamline code and improve maintainability
added IOException handling to the ` release ` method in ` IndexWriter ` , ` Lock ` , and ` NativeFSLockFactory ` classes to improve
changed the package of DataSourceInitializer from ` jdbc . datasource ` to ` org . springframework . batch . test ` to align the package structure with
added a conditional check for ` currentNode . getRight ( ) ` in ` SpelExpressionTransformer ` and updated related imports in ` OperatorNode `
updated ByteBuddy initialization to use TypeValidation instead of TypeValidation to ensure that the byteBuddy is not initialized with a default type validation
replaced DeclaredType with TypeElement in JavacRoundEnvironment . java to simplify type handling and improve code readability
refactor LockModePessimisticReadWriteIntegrationTest and MySQLTableLockTest to handle PessimisticEntityLockException to improve error handling and
removed the ` setSystemProperties ` method from ` LoggingApplicationListener ` and added a new test in ` LoggingApplicationListenerTests ` to simplify the
added a method to check if a redirect status code is sent in ServiceApiRequest . java and modified request handling in ServiceApiRequest . java to
added environment configurations for SERVICE _ MAPPING and APP _ MAPPING in ServiceCombConstants . java and MicroserviceFactory . java to improve code
updated method call from ` getName ( ) ` to ` getBeanName ( ) ` in ` setStep ( Step . ABOUT _ TO _ 
updated DB PATH _ REGEX and DB _ PREFIX in BaseAndroidTestCase and GeocodeHelperTest classes to ensure proper handling of database paths and
updated the return statement from numberNew to getUnreadCount in HomeFragment . java to ensure accurate retrieval of read counts from the current account
added a new test method ` testVirtualThreadPoolPreview ` to ` TestVirtualThreadPoolPreview ` and updated the ` testVirtualThreadPoolPreview ` method to
added a limit parameter to the getAllOrder method in MarketOrderIdListCapsule , MarketPriceListCapsule , and Wallet classes
updated user retrieval logic in HomePage . java to check for null user before returning null to improve robustness by preventing potential NullPointerExceptions
updated file path handling in LocalFileSystem and added a new test for matching relative wildcard path to ensure correct handling of wildcard paths and ensure correct handling of
added MAX _ WIDTH and MAX _ HEIGHT constants and adjusted bounds calculations in ComponentBuilders . java to ensure consistent width and height calculations for
refactor CommonsHttpSolrServer to use slf4j instead of BinaryResponseParser to improve code readability and maintainability by encapsulating
added exception handling for document creation in PrintController . java to ensure proper handling of document creation errors
replaced ` Optional . of ` with ` map ` in ` CrateType . java ` and ` RustBinaryIntegrationTest . java ` to improve
added checks for numbers with separators in SpellChecker . java to ensure correct handling of numbers with separators
updated the message string from " HelloWorld . message " to " HelloWorld . message " in HelloWorld . java to improve clarity and consistency in
refactor file action handling in FileDisplayActivity to improve code readability and maintainability to enhance maintainability and maintainability of the code
added error handling in ReplicationHandler and updated logReplicationTimeAndConfFiles calls in SnapPuller to improve error handling and ensure proper logging of
updated the method call from ` e . update ( ) ` to ` e . update ( ) ` in ` StoreCachedTest . java ` to
replaced the constructor of StreamerLoader with a list of material columns to improve clarity and maintainability of the constructor
added new modules " Core Library " and " Core Library for Gamepad API " to the DependencyBank class to enhance the application ' s functionality for
added device profile handling in AppsContainerRecyclerView . java to improve user experience by allowing dynamic grid sizes
added a new test method ` testBuildingBinariesSeparately ` to ` AndroidBinaryCrossCellIntegrationTest . java ` to ensure that the build
fix example baritone control not work when mining tag be not find .
added imports for ParsedNode , ParsedNodeException , and ResourceAccessor in CreateProcedureChange . java to ensure proper handling of ParsedNode and Resource
added null handling for null values in FilterOperatorUtils and a test for rangeFiltering in NullHandlingEnabledQueries to ensure proper handling of null values
updated parameter handling logic in JDynamicInvokeExpr . java to improve clarity and consistency to enhance code readability and maintainability
updated the http address from " jms : in " to " localhost : 9000 " in JmsHttpJmsTest . java to ensure
removed unnecessary calls to runtimeOptions . getFormatters ( ) . clear ( ) in CucumberInstrumentation . java to streamline the code by
changed the type of ` contacts ` from ` RegisteredServiceContact ` to ` DefaultRegisteredServiceContact ` and added a new ` PrincipalAttributeRegistered
updated workspace label calculation logic in DeviceProfile . java to adjust workspace labels based on cell size and text size to ensure workspace labels are correctly adjusted for
updated assertion messages in ReplicationFactorTest . java to use assertRf instead of assertRf to improve readability and maintainability of test assertions
refactor context handling in LLVMContext and LLVMLanguage classes to improve clarity and consistency to enhance code readability and maintainability by
removed the ` @ Ignore ` annotation from ` ChaosMonkeyNothingIsSafeTest ` and ` ChaosMonkeySafeLeaderTest ` to
updated exception handling in Gson . java to use JsonIOException instead of RuntimeException to improve clarity and maintainability of exception handling
replaced ` Integer . valueOf ( values [ 0 ] ) ` with ` Integer . parseInt ( values [ 1 ] ) ` in ` VisualScoreTag
updated error messages in Copy . java for clarity and consistency to improve readability and maintainability of error messages
refactor segment name handling in HLCSegmentName , LLCSegmentName , and SegmentName classes to use isHighLevelConsumerSegmentName instead of
added methods to startActivity and startActivityForResult in ShadowFragment and FragmentTest classes to ensure proper exception handling when the fragment is not attached
updated the return statement in DueDateBusinessCalendar . java to use clockReader . getCurrentTime ( ) instead of clockReader . now ( ) to
updated the return statement from " - target " to " - x86 _ 64 - none - linux - android " in TargetCpuType .
added a method to delete all files in FileDataStorageManager and updated ManageAccountsActivity to delete all files to improve user experience by ensuring
updated string formatting in SchemaCrawlerCommandLine . java to improve clarity to enhance readability and maintainability of the code
added a ` createSuiteDescription ` method to ` Description ` and updated its usage in ` TestDescriptionTest ` to ensure that unique IDs are
replaced the use of ` hints ` with ` decodeBarcode ` in ` SnapshotThread . java ` to improve code readability and maintainability by using
removed the ` sources ` parameter from the ` BuckTarget ` constructor and updated its usage in multiple classes to streamline the code and eliminate unnecessary dependencies
added unit tests for RangePastEnd and RangePStart tests in GWCZoomContextFinderTest . java to ensure correct handling of range
added a method to enable dependency tracking in JRubyScriptEngineConfiguration and modified dependency tracking logic in JRubyScriptEngineFactory to enhance dependency tracking capabilities
updated request URI check from getRequestURI ( ) to getServletPath ( ) in PromptFilter . java to ensure proper handling of request URIs
updated import statements in StorageService . java and added a maybeAddKeyspace method in MigrationManager . java to improve code readability and maintainability by
replaced bgImage with cache and cache in WelcomeWindow . java to improve image management and prevent potential NullPointerExceptions
refactor tuner configuration handling in multiple classes to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
added HasTests interface to AbstractShBinaryDescriptionArg and implemented a new test method in ShBinaryRuleIntegrationTest to enhance test coverage for sh binary execution
added support for the " db : hsqldb " field in TestFilter . java to enhance the functionality of the TestFilter class
updated the return statement in JavabinLoader . java to improve clarity to enhance readability and maintainability of the code
added a check for empty stack traces in TruffleStackTrace . java to ensure proper handling of empty stack traces
refactor GraalServices to use ServiceLoader for loading and exporting services to improve code readability and maintainability by centralizing service loading logic
added a new test method ` duplicateCommandHandlerResolution ` to ` AggregateAnnotationCommandHandlerTest ` and implemented a new ` handleUpdateDuplicate ` method to ensure
[ flink - 20865 ] [ flink - 20865 ] [ flink - 20865 ] [ flink -
refactor block calculations in EntityFishHook and EntityFishHook to use Blocks . field _ 70158 _ i to improve code
refactor multiple classes to improve code organization to enhance maintainability and readability of the codebase
refactor ` getCommandRunner ` and ` setStepRunner ` methods to use ` getStepRunner ` instead of ` getCommandRunner ` to improve clarity
changed the ` useShortNames ` parameter from ` useShortNames ` to ` compressPackageNames ` in the ` GangliaReporter ` class to
added a check for empty items in AppsContainerRecyclerView . java to prevent potential NullPointerExceptions when items are empty
added a conditional annotation for the REPORTER _ BEAN _ NAME in ZipkinAutoConfiguration . java to enable configuration of the reporter bean
refactor XMLLayout to use StringBuilder instead of StringBuffer and StringBuilder to improve performance and maintainability of XML layout configurations
added a ` remove ` method to ` NamedList ` , ` NamedList ` , and ` XMLResponseWriter ` , and ` XMLWriter `
updated property retrieval from ` _ id ` to ` getPropertyNumber ( ) ` in ` EscherProperty ` and added a new test class for
updated the method call from ` getBuildRuleType ( key . getSimpleName ( ) ` to ` getBuildRuleType ( key . getSimpleName ( )
refactor scene removal logic in FastHierarchy . java to improve code readability and maintainability
added null checks for disputesPerTradeId and disputesPerDepositTxId in TradeDataValidation . java to improve robustness by preventing potential NullPointerException
added a method ` getObjectHash ( ) ` to ` AbstractNamedObject ` and updated related methods in ` TableRetriever ` and ` TableRetriever `
added confidence handling for sendTx in Wallet . java and updated test assertions in WalletTest . java to improve transaction confidence handling and ensure correct
refactor HttpClientIntroductionAdvice to simplify parameter handling and improve code readability to enhance maintainability and maintainability of the code
updated condition checks for JSON files in CraftingHelper . java to ensure proper handling of conditions in JSON processing
hbase - 14364 hregion . close ( ) do not throw exception when close region
refactor length checks in Credential . java to improve code readability and maintainability to enhance readability and maintainability of the code
updated condition in ClientConductor . java to check for correlationId instead of correlationId to improve code readability and maintainability
removed the ` destroy ` method from the ` destroy ` method in ` TestJvmProcess . java ` to simplify the method ' s purpose and improve
added a check for Oracle in the isMySql ( ) method in TestDefaults . java to ensure compatibility with Oracle versions
added error handling for the connected state in MailConsumer . java to improve robustness by handling exception cases when the store is not connected
added handling for more tokens in the query in the parser to ensure that more tokens are consumed only when they have been consumed
added GREEK , GREEK , GREEK , GREEK , GREEK , GREEK , GREEK ,
added a method ` getDataFileName ( ) ` to ` Model ` and modified the ` Voice ` class to return the ` getDataFileName ( ) `
added email domain management methods to LdapIdentityProviderDefinition and IdentityProviderDefinition classes to enhance user experience by allowing users to set the email domain
added REQUEST _ READ _ TIMEOUT and REQUEST _ CONNECT _ TIMEOUT constants to Configuration . java and updated request timeout handling in ViewRegistry .
added a condition to check if the myDeferredConcepts is empty before processing deferred concepts to ensure that deferred concepts are processed only when the
added RedisCategory annotation to RedisServiceRegistryTests . java to enhance test coverage for Redis service registry tests
updated the ` FindDeprecatedMethodsTest ` and ` FindDeprecatedUses ` methods to use ` NullAndEmptySource ` instead of ` Test `
added a call to super . paintComponent ( g ) in OverlayPanel . java to ensure that the component paints the correct component
removed unused imports from multiple configuration files to streamline code and improve maintainability
updated event signature handling in ContractEventTriggerCapsule , ContractEventTriggerCapsule , ContractEventTriggerCapsule , and LogEvent
updated the filter method to check if the sessionId is endsWith " _ " instead of " _ " to ensure compatibility with the latest version of the sessionId
updated rectangle handling in MapView . java to use getBackground ( ) instead of clearRect ( x , y , y , y , y , y
refactor code to improve code readability and maintainability to enhance maintainability and maintainability of the code
removed unnecessary print statements in multiple Java files to streamline code and improve maintainability
added a condition to check if scoreDocs is null before comparing scoreDocs to prevent potential NullPointerExceptions when scoreDocs are null
updated the initialization of oldKeys from ` Set . copyOf ( ) ` to ` Set . copyOf ( Set . copyOf ( Set . copyOf ( )
added checks for zero - time string values in ColumnSnapshotGenerator and MySQLIntegrationTest to ensure correct handling of date values in database operations
replaced ` offererMultiSigPubKey ` with ` takerBtcPubKey ` and ` takerBtcPubKey ` in ` Contract . java
updated ` vsContext ` and ` vsContext ` parameters from ` vsContext ` to ` Map < ? , ? > ` to
[ drools - 117 ] use clocktype instead of clocktype instead of clocktype instead of clocktype .
updated the initialization of HiveMetaStoreClient from conf to this . conf to ensure compatibility with the latest HiveMetaStoreClient initialization
added a condition to return if modalness is not equal to modalness to ensure proper handling of modalness when modalness is present
added a test for codec capabilities in ShadowMediaCodecListTest and implemented a native _ getGlobalSettings method in ShadowMediaCodecList to ensure proper
added a call to confirmButton . requestFocus ( ) in EditOfferView . java to fix issue # 5460 ( issue # 5460 )
added error handling for width and height in SunVolatileImage and XRPMBlitLoops to improve robustness by throwing an exception if width and
updated the separator string from " . " to " \ u00a0 " in FormatData _ uk . java to ensure consistent formatting of the
refactor AsyncStressTest and StressTest to use AtomicInteger instead of int array to improve thread management and ensure thread safety during test execution
added menu visibility settings to AchievementsFragment and LeaderboardFragment classes to enhance user experience by providing user feedback during achievements
added access , name , and description variables in Search . java and SearchMethodVisitor . java to enhance the functionality of the Search class
added sleep handling for InterruptedException in IoTDBInsertWithoutTimeIT . java to improve error handling and ensure proper exception handling
refactor dur handling in DLNAResource . java to improve clarity and consistency to enhance readability and maintainability of the code
updated the XmlRootElement annotation from " batch - config " to " stream - config " in multiple files to improve clarity and consistency in naming conventions
refactor txn release methods in TableReader to improve code readability and maintainability to enhance maintainability and maintainability of the transaction management process
refactor key manager algorithm retrieval in ThriftSource and ThriftRpcClient to improve code clarity and maintainability by using a standardized method
replaced ` JavaIsoVisitor ` with ` TreeVisitor ` in ` PrimitiveWrapperClassConstructorToValueOf . java ` and added a new ` Tree
added handling for repeat event events in Blockmania . java to ensure proper handling of repeat events for repeat events
updated AccessSpecifier . PACKAGE _ PRIVATE and AccessSpecifier . NONE from PACKAGE _ PRIVATE to PACKAGE _ PRIVATE in multiple classes
refactor ` unHandled ` methods to use ` erasure ` and ` erasure ` instead of ` unHandled ` to improve code clarity and
refactor stripe retrieval logic in OrcInputFormat to use orcTail instead of orcReader to improve code readability and maintainability
added null check for ` ex ` in ` JCache . java ` to prevent potential NullPointerExceptions when ` ex ` is not null
updated the nextUrl variable from " http : / / myhentaicomics . com " to " https : / / myhenta
added a command line option to show the current version in the App . java file to ensure that the application correctly displays the current version information
updated the method call from ` split ( ) ` to ` splitTokens ( ) ` in ` Sketch . java ` to ensure proper handling of
refactor rotation handling in ConsoleActivity and TerminalView classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated the type of ` hq ` from ` HitQueue ` to ` ScoreDoc ` in ` ParallelMultiSearcher . java ` to improve type
added a null check for ownerConnectionAddress in ClientSmartListenerService . java to prevent potential NullPointerExceptions when ownerConnectionAddress is null
camel - 14279 : camel - core - add headersmapfactory class name to camel - core
updated formatting in JavaCompiler . java and Diagnostic . java to improve code readability and maintainability
refactor JmsOutboundGateway and JmsNamespaceHandler to extend AbstractReplyProducingMessageConsumer and introduce a new JmsOutboundGatewayParser
updated the condition from i + 1 to i2 in ArrayFunctions . java to ensure correct handling of array types
added null checks for additionalClasspathURLs and adjusted script engine initialization logic to improve robustness by preventing potential NullPointerExceptions
refactor PooledConnectionImpl to include org . postgresql . PGStatement and add a new test for PGStatement to improve code readability and ensure
change flushMemTables ( ) to flushMemTablesAndRefreshSizeEstimates ( ) and mBeanProxy . refreshSizeEstimates ( ) to
updated logging level from error to warn in AtomicRemainder . java to improve clarity and maintainability of logging messages
updated sorting logic in CompactionController . java and added a new test for fully expired in TTLExpiryTest . java to improve performance and
replace unit . toseconds ( ) with toseconds ( ) in RedissonBlockingDeque , RedissonBlockingQueue , and RedissonQueue classes to
updated string formatting in JobInspectCommand . java to improve clarity and consistency to enhance readability and maintainability of the code
refactor Engine class to improve code readability to enhance maintainability and maintainability of the code
updated the return statement in ChildHolder . java to use entrySet ( ) instead of Stream . of to improve clarity and maintainability of the code
added JUnit @ Ignore annotation to BrokerControllerTest and AclClient classes and updated AclRPCHook to use SessionCredentials to improve test
updated variable name from ` numIndexDims ` to ` numDataDims ` in ` BKDWriter . java ` to improve clarity
replaced printStackTrace ( ) with warn ( ) for exception handling in NotebookServer . java to improve error handling and prevent potential NullPointerExceptions
changed the type of the ExpressionNode from funN to lt in the ExpressionNodeEvaluator class to improve type safety and maintainability of the code
changed access modifiers of ` verifyIdsAreStable ` to ` getNodeId ` in ` NodeIdAccessor . java ` to enhance encaps
updated error messages in SnapshotManagerImpl . java to improve clarity and consistency to enhance code readability and maintainability
changed access modifiers of ` write ` and ` flush ` methods from public to public in ` ItemWriter . java ` to enhance encapsulation
added " test " to the ` thing ` instance in ` RoombaHandlerTest . java ` to improve test clarity by using a more descript
added a ` toString ( ) ` method to ` ImageNameSubstitutor ` and a corresponding test in ` ImageNameSubstitutor
replaced FSDirectory with RAMDirectory in TestNorms . java to streamline directory handling by using RAMDirectory instead of FSDirectory for improved
added a static variable ` mLineHeight ` and modified the calculation of ` mLineHeight ` in ` Utils . java ` to ensure proper height
refactor WalletAppKit class to improve code readability to enhance maintainability and maintainability of the code
refactored the initialization stream retrieval logic in OQLEngineImpl . java to improve code readability and maintainability
added JCheckBoxMenuItem to the menu and button group in ChatTransportSelectorBox . java to improve user experience by ensuring the menu and button group are removed
added ` resolve ` and ` replaceTokens ` methods to ` AbstractDataImportHandlerTest ` , ` Context ` , and ` ContextImpl ` classes
updated BlockChainExplorer handling in PreferencesPayload to use Optional . ofNullable for optional bsqBlockChainExplorer to ensure proper handling of BlockChainExplorer
added attributes handling in StandardSession and Session classes to ensure proper handling of session attributes in the session
added assertions for plain bean names and Along in TestDbJson _ List . java to ensure proper handling of JSON objects in the database
updated the calculation of averages from pageSize to initialPageCount in MonotonicAppendingLongBuffer . java to ensure accurate calculation of averages
refactor BatchCommandLineLauncher class for improved readability to enhance maintainability and maintainability of the code
added dataSource and transaction management methods to the BatchMetricsApplication class to enhance the functionality of the BatchMetrics application
changed the type of GlowrootLogHttpService from UnauthenticatedHttpService to HttpService to improve code readability and maintainability
refactor ` drawImage ` method to use ` setStrokeJavaComposite ` instead of ` getNonStrokeJavaComposite ` to improve code readability and maintain
added a check for null segment before closing the close method in DocumentsWriter and IndexWriterPerThread to ensure thread safety and prevent potential NullPointerExceptions
added methods to retrieve and set properties for multiple choice options in UiBinding to enhance validation functionality for multiple choice options in the UI binding
updated method calls to use ` toString ( ) ` instead of ` name ( ) ` for clarity to improve code readability and maintainability by standard
added a boolean variable ` fullSave ` and updated error logging in ` Save . java ` to ensure that the save tree is only updated when the
replaced ` condition ` with ` seenPatterns ` in multiple classes to improve clarity and maintainability of the code
updated the ` krakenMakerFees ` list from ` ArrayList < KrakenFee > ` to ` ArrayList < > ` for consistency to
removed unused import of CharTermAttribute in DefaultIndexingChain . java to streamline code by eliminating unnecessary imports
refactor NBJavacTrees class to improve code readability to enhance maintainability and maintainability of the code
added a check for unsupported data encoding in VectorizedPrimitiveColumnReader . java to ensure proper handling of unsupported data encodings
updated conditional checks in HttpSolrCall . java to use MarkerFactory . getMarker ( ) instead of MarkerFactory . getMarker ( ) to improve
added a call to destroyMetadataServiceProxy in ServiceInstancesChangedListener . java to ensure metadata service proxy is properly managed
updated DefaultEntityQueryRepository to use a maximum MAX _ LEVEL _ DEFAULT constant and added a new DefaultEntityQueryRepositoryTest class to ensure infinite recursion
added null check for databaseChangeLogId in HubChangeExecListener . java to avoid potential NullPointerExceptions when the change log ID is null
added a static Hashtable for TRY _ HARDER _ HINT and improved error handling in AbstractBlackBoxTestCase . java to enhance code clarity
refactor ` executeCompilation ` method to return ` ProcessExecutor . Result ` and improve error handling in ` CxxPreprocessAndCompileStep `
updated maxEvents handling in ObjectStore . java to use a range of events to improve code readability and maintainability by eliminating unnecessary logic
refactor validation validation logic in ValidatedLocalValidatorFactoryBean to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
refactor temporaryBlockEntities handling in EntityAwareWorldProvider . java to ensure proper clearing of temporaryBlockEntities to improve code readability and maintainability
removed unnecessary check for exact types in IntrinsifyArrayCopyPhase . java to simplify code and improve readability
updated logging level setting in TestCoyoteAdapter . java to ensure proper logging behavior for better debugging
replaced ` WantedAnywhereAfterFollowingInteraction ` with ` assertContains ` in multiple files to improve clarity and maintainability of the codebase
added null checks for ownerAddress and key addresses in AccountPermissionUpdateActuator , PermissionAddKeyActuator , and PermissionAddKeyAct
replaced ` CommandComparator ` with ` TreeMap < String , Element > ` for sorting commands to improve code readability and maintainability by using a TreeMap
updated etas in WorkflowsProto . java to include Google . Cloud . LifeSciences to ensure compatibility with the latest eta
updated metadata properties from ` _ metadataProperties ` to ` _ metadataProperties ` in ` BaseSingleTreeBuilder . java ` to improve code readability
updated AsmLoader to use interfaceClass . getClassLoader ( ) instead of interfaceClass . getClassLoader ( ) to ensure compatibility with the latest interface class loader
pdfbox - 2471 : add null check for path . lineTo ( x , y , x , y , x , y )
updated print statements in Java2TypeScriptTranslator . java to include a check for definition scope to ensure proper handling of definition scope in the code
refactor HttpClientTest to use AbstractHandler instead of EmptyServerHandler to improve code clarity and ensure proper handling of server requests
replaced new String [ ] { " Pause " } with new String [ ] { " Rotate " } in HelloInput . java to improve
added a check for null SqmPath before accessing the lhs to avoid potential NullPointerExceptions when the lhs is null
updated package names from ` com . owncloud . android . oc _ framework _ test _ project . test ` to ` com . owncloud .
added a null check for the BufferedImage instance in AwtCanvas . java to ensure proper resource management and prevent potential NullPointerExceptions
added functionality to retrieve and set native image location qualifiers in CompilerConfigurationFactory and LibGraalFeature classes to enhance the functionality of native image
removed the ` DataflowPortabilityApiUnsupported ` and ` UsesTimersInParDo ` classes from ` ParDoTest . java `
updated the method call from remove ( ) to poll ( ) in MockPhishingProtectionServiceV1Beta1Impl . java to ensure
added serialVersionUID field to JumboEnumSet , RegularEnumSet , and RegularEnumSet classes to ensure compatibility with Jumbo and 
refactor CallStack class to improve code readability to enhance maintainability and maintainability of the code
added a warning log when max size configuration does not allow any data in the map to ensure that the max size configuration does not allow any data in
updated return statements in multiple Java files to improve clarity and consistency to enhance readability and maintainability of the code
refactor scoreable calculation logic in ThreadedAcousticScorer . java to improve code readability and maintainability
updated the return statement in NetHooks . java to return null instead of throwing an AssertionError to improve robustness by preventing potential NullPointerExceptions
updated method calls from getServerAddress ( ) to window ( ) in ApplicationControllerFluentLeniumTest . java to improve code readability and maintainability
added ` makeString ` methods to multiple Iterable classes , ` RichIterable ` , and ` AbstractSynchronizedRichIterable ` , and ` RichIterable
updated order setting from HIGHEST _ PRECEDENCE + 1 to DEFAULT _ ORDER in OidcServicesManagerRegisteredServiceLocator . java to
added a new Predicate < ProposedWeakAssociation > to the WeakAssociationsAnalyzer class and updated the WeakAssociationsCatalogLoader to include a
refactor Deflater class to improve code readability to enhance maintainability and maintainability of the code
added error handling for IOException in Font . java to ensure proper resource management and prevent resource leaks
added null check for content and length in VersionTypeBinding . java to ensure proper handling of null content and prevent potential NullPointerExceptions
replaced ` places ` with ` return ` in ` NearbyListFragment . java ` to simplify code and improve readability by using a more
updated getContentType ( ) method to convert MIME content type to lowercase to ensure consistent handling of MIME content type
changed access modifier of AUTH _ MAGIC from private to public in OpenSSHPrivateKeyUtil and updated its usage in OpenSSHPrivateKeySpecTests to
updated ` updateItemLocationsInDatabaseBatch ` and ` updateItemLocationsInDatabaseBatch ` methods in ` Folder ` and ` FolderNameInfo `
updated import statements and added a doInJPA method in InheritanceCacheTest . java to improve code readability and maintainability by utilizing
updated import statements in ConnectOAuth2RequestFactory , TofuUserApprovalHandler , and added user approval request handling in TofuUserApprovalHandler to
refactor InfluxNamingConvention to use delegate . tagKey ( key ) instead of delegate . tagKey ( key ) in InfluxNamingConvention
updated debug output for OMG FOO and TwoProblemsHere classes to improve clarity and consistency to enhance code readability and maintainability by
updated cookie handling in HttpURLConnection . java to use " Cookie2 " instead of " Cookie " to ensure compatibility with the latest Cookie API
added a static method ` classMetadataUnsupported ` to ` Platform ` , ` Platform ` , and ` Platform ` classes to improve code readability and
added functionality to display clear all button and space in OverviewActionsView and RecentsView to enhance user experience by allowing users to clear all items
updated the timeout setting for ` desiredRepoVersion ` in ` ClusterStackVersionResourceProvider ` and added null check for ` existingCSVer ` to
deleted the MemoryLeakTest . java file to remove unused test classes to streamline the codebase
http : / / 127 . 0 . 1 : localhost : localhost : localhost : localhost : localhost : localhost
added a conditional check for MVDWPlaceholderAPI in ServerListener . java and added a comment for USE _ MVDWAPI in
updated method call to assert cluster size events in AbstractPartitionAssignmentsCorrectnessTest and added a new method for assertClusterSizeEventually to
updated FFIProvider to return SingletonHolder instead of UnsupportedOperationException to improve compatibility with JNA and JNA providers
added a new test method ` testHierarchicalWFileList ` to ` BatchProcessTest . java ` to ensure proper handling of hierarchical file lists in
added null checks and modified null checks in MongoTemplate and MongoTemplateTests to improve robustness and ensure proper handling of null objects
updated position handling in NodeClass . java to use NODE _ LIST instead of 0 to improve clarity and consistency in position handling
added a private field ` accTradeValue ` and modified ` BithumbTradeServiceRaw ` to return ` CURRENCY _ PAIR
refactor logging statements in RealtimeSegmentDataManager . java to improve clarity and consistency to enhance readability and maintainability of logging messages
changed the maxParallelThreads constant from 10 to a static final constant and modified the loop logic in OverseerTaskProcessor . java to improve code
replaced ArrayList with CopyOnWriteArrayList for headerReaders and dataReaders in multiple classes to ensure thread safety during concurrent operations
refactor multiple dict implementations to improve code organization to enhance maintainability and readability of the codebase
added a null check for destBuffer in FlipTransition . java to prevent potential NullPointerExceptions when destBuffer is null
camel - 14263 : camel - jbang - camel - jbang - camel - jbang - camel - jbang
added a condition to check if accountCapsule is greater than the currentCycle to ensure that accountCapsule is greater than the currentCycle
updated RandomValueStringGenerator from 6 to 10 in JdbcExpiringCodeStore and updated test assertions in CodeStoreEndpointsTests to improve code clarity
added a check for UniqueConstraint in StandardObjectChangeFilter . java to check if the object is a UniqueConstraint object to ensure proper handling of Unique
refactor description handling in MediaDetailFragment to improve code readability and maintainability to enhance maintainability and maintainability of the code
added exception handling for ArrayIndexOutOfBoundsException and ClassCastException in FindBugs2 . java to improve error handling for array and ClassCastException
added ` withReferenceFilter ` method to ` ListImagesCmd ` , ` ListImagesCmdImpl ` , and ` ListImagesCmdImpl ` to
added exclusion for BridgeErrorHandler in JmsEndpoint and related classes to ensure that the BridgeErrorHandler is not supported on JMS endpoints
added conditional checks for " # ifndef " and " # endif " lines in OpExclusionUtils . java to ensure that all ops are
added return statements in DatabaseCommand . java to ensure proper handling of database commands
updated Politician examples to use President of Umpa Lumpa Lumpa and Prime Minster of Umpa Lumpa
removed null check for initFile in BeanShellInterpreter . java to simplify code and improve readability
updated port assignment from 0 to this . getPort ( ) in RestletComponent . java to ensure proper port handling for RESTlet URLs
updated import statements in SchematicFormat . java for consistency to improve code readability and maintainability
added a configuration property for the Hive query max length in QTestUtil . java and modified overridden configurations in SessionState . java to ensure the
refactor WebServer to use baseHttpConfig instead of ConstraintMapping to improve code readability and maintainability by reducing redundancy
updated HadoopSinks and KafkaSinks to use " hdfsSource " instead of " writeHdfs " to improve clarity and consistency in
updated the result variable from true to false and added a null check for the appName key in HiveSparkClientFactory to ensure that the app name
replace whiteName with includedName for clarity to improve readability and maintainability of the code
refactor WindowTest and DriverServlet classes to use MaximiseWindow instead of restore and restore to improve window management and ensure proper handling of maximize
updated method names from ` getEmbeddedCellsBuckOutBaseDir ` to ` getMainCellRoot ` and ` getMainCellBuckOut
added a null check for the exception message in TestXMLEntityExpansion . java to ensure that the exception is valid for entity expansions
updated table offset and length calculations for offset and length in TrueTypeFont . java to ensure correct calculation of table offset and length values
removed the customize method from DirectMethodHandle . java to streamline the code by eliminating unnecessary assertions
refactor coordinate handling in LineChartRenderer to improve code readability and maintainability to enhance readability and maintainability of the code
refactor flavor handling logic in AndroidBinaryDescription . java to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
updated glGenBuffers method call from offset to i in LwjglGL11 . java to ensure correct buffer generation for better performance
added new classes ` Property ` , ` PropertySuper ` , ` PropertySuper ` , and ` TestClassResolutionFail ` , and ` TestClassResolutionFail
added a condition to check if the group property is completely shutdown before removing the shutdown hook to ensure that the shutdown hook is only terminated when the group
updated the method name from ` url ` to ` FilterChjainProxy ` in ` VirtualFilterChainProxy . java ` to improve clarity and
replaced Collections with Arrays for intermediateResult and adjusted return values in PercentileAggregationFunction . java to improve performance and maintainability of the code
added checks for schema loading in MetaDataBasedSQLCompletionProvider and QueryTypeAnalyser to ensure proper loading of tables from the database
updated the initialization of ` baseType ` in ` DatabaseInfoRetriever . java ` and added literal prefix and localizedTypeName in ` MutableColumnDataType `
updated link tags in multiple Java files to improve clarity and consistency to enhance code readability and maintainability
replaced instances of ` ObjectEqualEvaluator . getInstance ( ) ` with ` ObjectContainsEvaluator . INSTANCE ( ) ` in ` EvaluatorFactory . java
updated ` BuildCommandIntegrationTest ` to use ` osx _ x86 _ 64 ` instead of ` osx _ x86 _ 64 ` to
added a method to play and play sound effects in AllAppsView to enable playback of sound effects in the application
updated the main method signature from Exception to IOException in RemoveFirstPage . java to improve error handling and ensure proper resource management
added Granularity enabled in BarChartActivitySinus . java to enable Granularity in the right axis
refactor version comparison logic in GdxSetup . java to use a static method ` compareVersions ` to improve code readability and maintainability by
updated file handling in ContextHandlerGetResourceTest to use MavenTestingUtils to improve test reliability and ensure proper handling of test paths
added ` close ( ) ` method to ` Connection ` , ` JsonAsyncHttpPinotClientTransport ` , ` JsonAsyncHttpPinotClient
refactor SocketRemoteTest and MockAppender to use BlockingQueue for better event handling to improve thread safety and maintainability of event handling logic
added a check for the existence of a directory in HadoopResourceId . java and removed the @ Ignore annotation in HadoopResourceIdTest .
removed unused import statements from IsometricStaggeredTiledMapRenderer . java to streamline code and improve readability
replaced the unbindHandle method call with a call to unbindHandle to improve code readability and maintainability
refactor Config and Attribute classes for improved clarity to enhance maintainability and readability of the codebase
removed unnecessary check for mDownHitTarget in OtherActivityTouchConsumer . java to simplify code and improve readability
refactor navigation button handling in NavbarButtonsViewController . java to improve code readability and maintainability
updated the abort method from ` abort ` to ` throw ` in ` PolyBenchLauncher . java ` to improve error handling by throwing an exception when
replaced bootstrapMethodIndex with memberIndex in ClassWriter . java to improve clarity and maintainability of the code
added BlockFormattingContext parameter to the findBox methods in BasicPanel . java and modified method signatures in BasicPanel . java to enhance rendering capabilities by
added an ` getStdErrorOutput ( ) ` method to ` WorkerProcess ` and updated its usage in ` WorkerShellStep ` to improve error
added null check for the operator in CheckedListReplaceAll and updated exception handling in CheckedListReplaceAll to ensure proper handling of null operators and improve
added a boolean flag ` _ testFill ` and ` _ writeCallback ` to ` SslConnectionTest . java ` to ensure proper handling of
refactor DeviceFlag and FeatureFlags classes to use a final boolean value to improve code readability and maintainability by centralizing listener registration logic
added JUnit Ignore annotation to GatewayRSocketIntegrationTests . java to temporarily disable test coverage
removed unused import of MalformedURIException in StandardRequestHandler . java to streamline code by eliminating unnecessary dependencies
added a script to focus the endDateBox in InstructorFeedbackEditPage to improve user experience by allowing the browser to focus the endDateBox
refactor synchronization logic in KrakenStreamingTradeService . java to improve code readability and maintainability
updated print statement in ChangeableUrls . java to use System . out instead of System . err to improve clarity and maintainability of the code
added a boolean parameter ` randomAccessRows ` and updated constructors in ` SparseRowMatrix ` and ` SparseRowMatrix ` constructors to enhance
added a null check for the poolId before persisting usage event in StorageManagerImpl . java to prevent potential NullPointerExceptions when the volume is
refactor file handling in Utilities . java for improved readability to enhance maintainability and maintainability of the code
updated the import statement from com . google . common . collect . ImmutableMap to com . google . common . collect . ImmutableMap to ensure compatibility with the
added resetInternalState ( ) method to MemoryCallGraphBuilder to ensure proper state management for the profiler client
added a null check for multiUserChatOpSet in ConferenceChatManager . java to ensure proper handling of multi - user chat operations
added a check to ensure the file is not written before adding it to the GuiPackage to ensure that the file is not written to the GuiPackage
added a new ` FolderSyncActivity ` class and created a new ` FolderSyncActivity ` class to manage folder sync functionality to enhance user experience by
[ hotfix ] [ test ] fix test in parallelchannelstatereaderimpltest
added support for numeric words in SpanishTreeNormalizer and updated test cases in SpanishTreeNormalizerTest to enhance word normalization functionality and ensure correct handling of numeric
replaced the usage of ` reader . pointValue ( ) ` with ` getPackedValueSlice ( i ) ` in ` SimpleTextBKD
added LocaleRandomizer class and modified InternalRandomizerRegistry and InternalRandomizerRegistry classes to utilize LocaleRandomizer and LocaleRandomizerTest to enhance randomization functionality and
added assertions for the " x - font - printer - metric " type in TestMimeTypes . java to ensure correctness of font type tests for
added support for " 10 . 0 " and " 9 . 2 " in multiple Java files to ensure compatibility with different operating systems
replace direct calls to ` run0 ( ) ` with ` run0 ( ) ` in ` TCPTransport . java ` to improve code readability
updated socket read timeout handling in Http2AsyncParser . java to improve readability and maintainability of the code
updated the default WATCHER _ INITIAL _ DELAY from 120 to 600 in TimelineMetricConfiguration . java to allow for more flexible
updated the column name from " previous " to " previous . name " in the SelectStatement class to improve clarity and consistency in naming conventions
added imports for DateTime and DateTimeFormatter in ThirdEyeJiraClient . java to ensure proper handling of dates in the application
refactor priority generation in HeadersGenerator and PriorityGenerator classes to use a new PriorityGenerator class to improve code clarity and maintainability by centralizing priority
added a constant MAX _ SCALAR _ REPLACE _ CODE _ SIZE to check if the entire class is empty to ensure that the scalar replace
updated the format of the projectionTest and fileSortOrder from " DESC " to " DATE _ TAKEN " in MediaProvider . java to
refactor image rendering in TexturePacker2 . java to improve code readability and maintainability
refactor WebSocket upgrade filter handling in JettyWebSocketServerContainer and JettyWebSocketServletContainerInitializer to use ServletContextHandler instead of FilterHolder to improve
added validateSignService . shutdown ( ) and TransactionsMsgHandler . java and nodePersistTaskTimer in NodePersistService . java to ensure proper
added RawJsonRequestBodyAnnotationProcessor to JaxrsSwaggerGeneratorContext and Echo classes to support raw JSON parameters in the jaxrs generator
added a new method ` newTarget ` in ` LoggerUtils . java ` to create a new target with a specific target extension to enhance functionality by
updated the return statement from ` new ArrayList ` to ` new ArrayList ` in ` BeanContainer ` and added a new ` BeanContainerTests ` class
updated the gauge name from " blockCountHitPercent " to " blockCacheCountHitPercent " in TestMetricsRegionServer . java to ensure accurate
camel - 14263 : camel - cache - do n ' t close file if exchange oncompleted .
added a call to set the device ID in TeltonikaProtocolDecoder to ensure proper handling of device IDs
updated the initialization of the first line from ` Files . readFirstLine ( ) ` to ` Files . asCharSource ( ) `
added a new method ` visitAssignop ` to ` Attr ` and created a new ` Test ` class ` Test ` in ` FailOver15
added a boolean flag ` enableAccountHandling ` to ` BaseActivity ` and modified onCreate method in ` BaseActivity ` to enable account handling based on
refactored import statements in IsochroneResource . java to use heuristicallyFindMainConnectedComponent to improve code readability and maintainability
updated DrillViewTable and WorkspaceSchemaFactory to accept a List < String > parameter and added a new TestViewSupport class to enhance functionality by
added default values for PooledByteBufAllocatorL constructor in PooledByteBufAllocatorL . java to enable the use of cache for all threads
updated ` ObjectInputStream ` and ` CloneArray ` classes to use ` short [ ] ` instead of ` double [ ] ` and ` short [
added LLAP _ IO _ THREADPOOL _ SIZE setting to LLAP _ IO _ THREADPOOL _ SIZE and updated executor initialization
added support for SSL logging and SSLLogger in SecurityServicesFeature . java to ensure compatibility with Java 1.1 and 11 .
added validation for latitude , longitude , and latitude range in LatLonGrid and updated test cases in TestLatLonGrid to improve accuracy of latitude and longitude
refactor ` ExpectedConditions ` class to use ` driver . getText ( ) ` instead of ` from ` driver . getText ( ) ` to improve
added a new parameter ` isInsertOverwrite ` to the ` replaceFiles ` method and modified the ` replaceFiles ` method to include ` isInsert
added a new test method ` reflector _ getOuterClass ` to ` ReflectorTest . java ` and modified ` SomeInnerClassReflector `
updated configuration settings in ConfigIgnoredByDaemon and IjProjectBuckConfig to use INTELLIJ _ BUCK _ CONFIG _ 
updated logging messages in HubChangeExecListener . java to improve clarity and consistency to enhance code readability and maintainability
added properties property getter and setter methods in Link . java and implemented a test for resolveOverrideProperties method in QuickLinksConfigurationModuleTest . java to
replaced @ EqualsAndHashCode annotations with ` toString ( ) ` in ` InitialConfig ` , ` YamlConfigFileDTO ` , and ` YamlConfigFileDTO
updated the ` startCall ` method from ` < > ` to ` < ReqT , RespT , ReqT , Req
refactor forName methods to include caller - sensitive adapters in Class . java to improve code readability and maintainability by centralizing caller - sensitive
replaced Matchers . isEmptyOrNullString with IsEmptyString . is ( is ( emptyOrNullString ( ) ) in RequestItemRepositoryIT . java
replaced ` ThreadPoolExecutor ` with ` ThreadPoolExecutorEx ` in ` GroupExecutor . java ` to simplify the code and improve readability by using a
changed the visibility of the ` setSecurityContextAccessor ` method from public to public to allow access to the ` setSecurityContextAccessor ` method
replaced ` HumanTime ` class with ` Calendar ` and updated imports in ` TimeStepdefs ` and ` TimeStepdefs ` to
updated the pattern pattern in ModBanners . java for clarity to improve code readability and maintainability
updated proxy creation methods to include a URL parameter instead of a ExchangeSpecification parameter to enhance flexibility in proxy creation by allowing URL parameters
updated print statements in RecordGenerator . java for clarity to improve code readability and maintainability
updated auto - commit behavior in KafkaConsumer and modified test assertions in KafkaConsumerOffsetRepositoryResumeTest to improve flexibility in auto - commit behavior based on
added outputStatement ( sql ) and outputStatement ( sql ) in Liquibase . java and set hasDatabaseChangeLogLockTable in StandardLock
added @ SuppressWarnings ( " rawtypes " ) annotations to AbstractAuthorizeTag and AuthorizeTagCustomGrantedAuthorityTests classes to suppress warnings related to
refactored the ` closeFiles ` method to ` synchronized ` and improve thread safety to enhance thread safety and maintainability of the code
refactor property handling in SpringBootAutoConfigurationMojo . java to improve clarity and consistency to enhance code readability and maintainability by centralizing property
updated the method call from ` baseSymbol ` to ` counterSymbol ` in ` VirtExMarketDataService . java ` to ensure consistency in method
updated the import statement for MessageDump from ` org . apache . support . MessageDump ` to ` org . apache . support . dump ` to
updated the field name from ` UUID . randomUUID ( ) . toString ( ) ` to ` System . getProperty ( " testId " ) ` to
added synchronization to date parsing logic in DefaultJobParametersConverter . java to ensure thread safety during parsing
refactor package - info . java files for improved readability to enhance maintainability and maintainability of the code
updated the height scale setting in FractalHeightMapGrid . java to ensure proper scaling of the heightmap
updated assertion logic in SecurityConfig and added a assertNotSame method in SecurityConfigTests to improve code readability and maintainability
set the default value of ` dump - partition - id ` in ` StdoutSink . java ` to false to ensure that the default value is set
added test cases for TronTXOutput and TronTXOutputs in UTXOSetTest . java to ensure correct handling of Tron
added JavaRuleUtil class and refactored conditional checks in UnusedAssignmentRule , UnusedLocalVariableRule , and UnusedLocalVariableRule classes to
added a null check for the array before adding it to the array to avoid potential NullPointerExceptions when the array is null
updated condition in JsrJobOperator and added a new test for new job parameters overriding previous restart parameters in JsrJobOperatorTests to
added a method ` isDisallowBatchOnCascade ` to the ` DatabasePlatform ` class to allow the ` disallowBatchOnCascade ` property
refactored principal initialization in JaasAuthenticationHandler to simplify principal creation logic to improve code readability and maintainability by reducing redundancy
refactor SolrCores to use ExecutorUtil for coreCloseExecutor to improve thread management and ensure proper resource management during core shutdown
added a null check for mActionsView before setting fullscreenProgress to prevent potential NullPointerExceptions when mActionsView is not initialized
replaced null checks with a null check for JobParameters in RunIdIncrementer . java to improve code readability and prevent potential NullPointerExceptions
updated BasicEntity and TestUtil classes for consistency to improve code readability and maintainability
added tests for matching schema regions in SchemaRegionBasicTest . java to ensure correct handling of matched devices in the test
refactor MetricsEventBus to use tryInvoke for better exception handling to improve code readability and maintainability by centralizing exception handling logic
updated the calculation of mCentralities in EigenvectorCentrality . java and added a new EigenvectorC
updated registry port handling in multiple Java files to improve clarity and consistency to enhance code readability and maintainability by using a more descriptive port
refactor geometry data handling to use UnsignedBytes for improved readability and maintainability to enhance code readability and maintainability by centralizing geometry
updated the Amplifier setting from 2 to 0 in BlockEntityBeacon . java to ensure proper handling of Amplification values
refactor TubeCalc class to improve code readability to enhance maintainability and maintainability of the code
changed the default value of ` enabled ` from true to false in ` HttpClientConfiguration ` and updated its usage in ` ServiceHttpClientFactory ` to improve
updated the ` DEFAULT _ GROUPS ` list to accept a ` List < Class < ? > > ` instead of ` List < Class > `
updated bug implementations in bug8057791 . java to use @ key headful instead of @ key headful to improve clarity and maintain
make the thread daemon to allow speedment applications to exit via main method completion fix # 322
updated the version string from " GRADLE " to " GRADLE " in ItemLexicon . java to improve clarity and consistency in
added ReflectionCheckLinker . checkReflectionAccess ( type ) to JavaAdapterFactory . java to ensure proper access check for reflection access
changed test method names from ` testJmsRouteWithObjectMessage ` to ` xtestJmsRouteWithObjectMessage ` in multiple test files
updated constructors in CombineHiveRecordReader , HiveContextAwareRecordReader , and RCFileRecordReader to include a recordReader parameter to
deleted the ` ClassLoaderHolder ` and ` LoaderManager ` classes in ` VerticleManager ` and ` VerticleManager ` to simplify the
added configuration changes to FileStore and JavaLanguageServer classes to ensure proper handling of workspace roots in the file store
added exception handling for registerSessionCallback and unregisterSessionCallback in PackageInstallerCompatVL . java to improve robustness by preventing potential runtime exceptions during
updated index creation from " org / apache / lucene / index / index . cfs " to " org / apache / lucene / index . no
added a new method ` createAndStart ` to ` AkkaRpcServiceUtils ` to create and start a ` AkkaRpcService ` instance to enhance
added retry handling in TestExportSnapshot . java to set maximum attempts to 3 to ensure maximum attempts are set when retry is enabled
pdfont : use metrics . getsymbolic ( ) instead of afmstandard14 , not afmstandard14
added a new test class ` SslConnectionTest ` for SSL connection handling in ` MavenTestingUtils . java ` to ensure proper handling of
added validation for IPv4 and IPv6 addresses in InetAddress and NetworkInterface classes to ensure proper handling of IPv4 addresses and improve error handling for invalid
added a new test method ` testDateSerializationInCollection ` in ` DefaultTypeAdaptersTest . java ` to validate dates to ensure proper serialization
refactor Message class for improved readability to enhance maintainability and maintainability of the code
added debug logging for the first update key in PutDatabaseRecord . java to improve clarity and maintainability of SQL processing logic
updated the loop condition in TableOutput . java to correct the calculation of the running width to ensure consistency and correctness in the loop logic
refactor predictor retrieval logic in Filter , FlateFilter , and LZWFilter classes to improve code readability and maintainability
updated the priority assignment in FormatStringChecker to include a conditional priority parameter to improve clarity and maintainability of the code
added a new property ` ignoreForEachDecl ` to the ` LocalVariableCouldBeFinalRule ` class to handle non - final loop variables in
updated PDFExporter and PDFExporterTest to use full compression for PDF version 1 . x to ensure compatibility with the newer PDF version and improve test
added a new test class ` LdapUserDetailsMapperTests ` to verify the functionality of ` LdapUserDetails ` and ` NonRetrievedAttribute `
added Configurable interface to ` LdapConfiguration ` and updated the ` LdapContextFactory ` class to use ` Configurable ` instead of ` 500 `
refactor TestDescription classes to improve code organization to enhance maintainability and readability of the codebase
refactor Pixmap , ManifoldPoint , ManifoldPoint , TextureRegion , and TextureRegion classes to improve code organization and maintain
replaced ` shouldCacheIterator ` with ` shouldAvoidAllocation ` in multiple classes to improve clarity and maintainability of the code
added a condition to check if the handler is INVALIDATED in LauncherSwipeHandler . java to ensure proper handling of handler states when the handler is
updated the calculation of mMaxDistanceForFolderCreation and mOldRotationYs in Workspace . java to improve code readability and maintainability by
updated configuration handling in OciConfigConfigSource to use ConfigProviderResolver instead of ConfigProvider for improved clarity to enhance code readability and maintainability
refactor Testjsig class to improve code readability to enhance maintainability and maintainability of the code
updated method calls in multiple classes to use ` getCount ( ) ` instead of ` Math . min ( stack ) ` instead of ` Math . min
chore ( deps ) : upgrade gapic - generator - java to 2.1 . 0 and update gax - java to 2.16 . 0 (
added @ SuppressWarnings ( " serial " ) annotation to the P11TlsPrfGenerator class to suppress warnings and improve code clarity
refactor tsFile validation logic in DataRegion . java to improve code readability and maintainability by centralizing file management logic
added new classes Switch21 , Switch19 , and Switch19 , and Switch19 classes to handle case - related patterns to improve code readability and
updated error message formatting in ComparableSubjectTest . java to improve clarity to enhance readability and maintainability of error messages
updated StreamHelper to use Internal and added a new TestStreamHelper class for handling standalone elements to enhance XML parsing capabilities and ensure proper handling of standalone
updated size checks and added equals method in Int2ObjectCache . java to improve code clarity and maintainability by reducing complexity
removed unnecessary sorting of securityFilterChains in WebSecurityConfiguration and added a new test class for handling security filter chains to improve code clarity and ensure
updated the order type from TimeInForce . GTC to TimeInForce . GTC in BinanceTradeService . java to improve order handling
replaced ` LongRangeRandomizer ` with ` AbstractRangeRandomizer ` and updated the ` FloatRangeRandomizer ` class to extend ` AbstractRangeRandomizer ` to
updated the key _ SEP constant from ' 0 ' to ' \ t ' in RocksDBBuildInfoStore . java to ensure compatibility with
camel - 14263 : camel - core - add support for configuration parameter json schema for jms component
added exception handling for NoSuchFieldError in SourceUtils and created a new TestGetBound class in SourceUtilsTest to improve error handling and ensure correct
refactor LeafFilterFactory to use a method to getLeafFilterBuilderByParquetType to improve code readability and maintainability by centralizing
added a check to close the original artifact name in BatchPropertyBeanPostProcessor , JobContextFactoryBeanTests , and StepContextFactoryBeanTests to
http : / / issues . apache . org / jira / browse / amq - 2632 - add log when read certificate
refactor default value retrieval in Config . java and add DnsFallback . java for better readability to improve code clarity and maintainability by centralizing
updated logging statements in DefaultTheme . java to include an exception message to improve error handling and provide clearer error messages for better debugging
changed the ` success ` and ` url ` property from ` boolean success ` to ` String ` in ` DepositAddress . java ` to allow dynamic
replaced the return statement with a try - finally block in WindowsSecurity . java to ensure proper resource management and avoid potential memory leaks
updated scope parameters from " address " to " email " in CommonOAuth2Provider . java and modified assertions in CommonOAuth2ProviderTests . java
replaced the submit method with a await method in ManagedSelector . java to improve readability and maintainability of the code
added a new BigDecimal constant for hue65535 and saturation255 in WLedHandler . java and updated the WLedHandler . java
replaced the method ` isValidCaller ` with ` VALID _ CALLERS ` in ` VectorizationProvider . java ` to simplify the code
added a new method ` caseJSRInst ` to the ` InstSwitch ` class to provide functionality for handling JSRInst instances
added transaction manager parameter to the SubscriptionActivatingSubscriber constructor and updated related methods accordingly to enhance transaction management capabilities and improve transaction management
refactor SQL query handling in DBMSProcessor . java to improve clarity and consistency to enhance code readability and maintainability
removed the elevation variable from ContactItemInflater . java to streamline the code by eliminating unnecessary elevation setting
replaced typeInformation with IdentifierFlyweight and IdentifierFlyweight in J . java to improve clarity and maintainability of the code
refactor file handling in SandboxFileManager . java to use AccessController for byte array access to improve code readability and maintainability by central
refactor expression handling in GroovyParserVisitor and GroovyPrinter to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated warning messages in MetaDataFetcher to use class name instead of class name to improve clarity and consistency in error reporting
updated byte handling in RecordInputStream , UnicodeString , and UnicodeString classes to use byte values instead of byte to improve code clarity and maintainability by
added a new test method ` downloadsFileWithNorwayCharactersInName ` to ` FileDownloadViaProxyTest . java ` to ensure
added cancellation exception handling in ` FingerprintScannerSample ` and ` FingerprintScannerSample ` classes to handle cancellation cancellation errors to improve error handling and
added a null check for statistics before processing the cache to avoid potential NullPointerExceptions when statistics is null
added a new test method ` removeObjectFromExplicitCollection ` to ` MongoTemplateTests ` and modified ` MongoDbFactory ` to use ` String
updated copyright dates from 2015 - 2015 to 2015 - 2022 in multiple Java files to ensure consistency in copyright dates and improve code organization
updated string formatting in Coder . java to improve clarity to enhance readability and maintainability of the code
added a boolean flag ` mIsClearAllButtonFullyRevealed ` to ` RecentsView ` and modified scrolling logic in ` Paged
added support for COMMON _ HMS _ PROPERTIES in HiveIcebergMetaHook and HiveIcebergSerDe to enhance
added a method to check if the address already in use in the Server class to enhance error handling and ensure proper handling of address already in use
added a command line argument for " test . class . path " in TestNestmateAttr . java to ensure proper handling of test class path
updated logging level from VERBOSE to verbose _ schema in Grep . java to improve clarity and maintainability of the logging functionality
replace ` org . apache . catalina . util . LifecycleBase ` with ` @ Override ` in multiple classes to improve code readability and
added nestedUseSavepoint property and related methods to ScopeTrans , ScopedTransaction , and ScopedTransaction classes to enable handling of nested nested transactions
replaced the ` fetchSize ` variable with ` ThreadLocal < Integer > ` for fetchSize and updated related logic in multiple classes to improve thread safety and
removed redundant calls to ` BackoffIdleStrategy ` in ` EmbeddedPingPong . java ` to simplify the code and improve readability by
refactor HttpClientIntroductionAdvice to use a separate ` handleBlockingCall ` method and improve error handling to enhance code readability and maintainability
added support for HDP version setting in SliderAppsViewControllerImpl . java to ensure proper handling of HDP version configurations
refactor JavacProcessingEnvironment to use a boolean variable and improve error handling to enhance code readability and ensure proper resource management
added DeepCloner to ParameterizedRobolectricTestRunner and created a new DeepCloner class in RobolectricTestRunner to enhance functionality by
added support for JETTY _ SHOW _ STACKTRACE in ResourceBase . java to ensure compatibility with JETTY _ SHOW _
added null checks for the object type in NativeObject . java to ensure proper handling of object types
replaced static imports for OopField with OopField in SystemDictionary . java to improve code readability and maintainability by consolidating
added support for RSAPublicKey and ECPublicKey in JwkKeyListView and JsonWebKeyEndpoint classes to enhance security by ensuring proper serialization of RSAPublicKey
added a boolean variable ` roDataWritable ` and updated its usage in ` NativeBootImage ` , ` NativeImageHeap ` , and ` Native
refactor MBeanServerMXBeanUnsupportedTest class for improved readability to enhance maintainability and maintainability of the test cases
removed the import of OrderClassLoaders in MavenPluginCollector . java to streamline the code by eliminating unnecessary dependencies
replaced ` Validator ` with ` validator ` and added ` getOwnerAddress ` methods in multiple classes to provide a way to retrieve the owner address in the
added a new file ` Main . java ` with a new class ` Main . java ` that implements a broker service to provide a simple mechanism for
refactor byte array handling in BinaryClient . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
added empty index handling and updated edge handling in ProtobufAnnotationSerializer and CoreNLPProtos . DependencyGraph to improve error handling and ensure accurate edge
removed unnecessary calls to ` remove ( correlationId ) ` in ` ClientConductor . java ` and ` DriverEventsAdapter . java ` to simplify
added saveConflict method to FileDataStorageManager , FileDownloader , and FileUploader classes to ensure conflicts are saved correctly when the file is down
refactor ` ExecutionContext ` to use ` Map < Object , Object > ` instead of ` Iterator ` in multiple classes to improve type safety and
replaced ` StrUtils . splitFileNames ` with ` StrUtils . splitFileNames ` across multiple files to improve code clarity and maintainability by
added handling for " Oracle " and " mysql " driver properties in DatabaseFactory . java to ensure proper handling of database schema configurations
updated the constructor of MockMethodInterceptor in SignedSupportingClassProxyFactory and added a serialVersionUID in PartialMockingWithConstructorUsingEasyMock
updated time calculation in FileChangedExclusiveReadLockStrategy to use System . currentTimeMillis ( ) instead of Date for minFileTriggerTime to improve accuracy in
replaced ` getOrCreateExecutionContext ( ) ` with ` wrapClassLoader ( ) ` in ` ExecutionContext ` , ` LocalExecutor ` , and ` TableEnvironment
added a Runnable to handle buffer changes in TerminalView and TerminalTextViewOverlay classes to ensure proper handling of buffer changes in the terminal view
refactor processConfigFile method to improve readability and maintainability of the code to enhance maintainability and maintainability of the code
refactor freeze operation handling in OperationActions and OperationRegistry to improve code readability and maintainability
added a boolean flag ` _ insecure ` to ` TlsConfig ` and its getter / setter methods in ` TlsUtils ` to enable
refactor the searchSubPackages method to use a new class T7091528 to improve code readability and maintainability by centralizing path
refactor ExporterGDF to use EdgeIdColumn instead of nodeColumns to improve code readability and maintainability
added cascade annotations to DefaultUserInfo . java to ensure proper handling of default address types in the user interface
refactor the hashCode method to use Arrays . equals for consistency to improve code readability and maintainability
updated test cases for ISO - 8859 - 1 and ISO - 8859 - 1 in AsyncProvidersBasicTest . java to ensure correct handling of
removed the ` isKeySerializerTypeVariableSized ` method from the ` RocksDBSerializedCompositeKeyBuilder ` class to streamline the code
added a method ` getStaticPermissionsField ` to ` ProtectionDomain ` and updated subjectPd initialization in ` SubjectDomainCombiner ` and ` Subject
add null check for recipe in RecipeHandlerBrewery , RecipeHandlerElvenTrade , and RecipeHandlerElvenTrade classes to
refactor parsing logic in Parser . java to improve readability and maintainability to enhance code readability and maintainability
added a new method ` showConnectionErrorPopup ( ) ` to ` UploadMediaDetailFragment ` , ` UploadMediaDetailsContract ` , and `
added a new test class ` Issue596 ` and implemented a test for handling 404 requests in ` HttpHandlerImpl ` to ensure proper handling of
updated bit index calculation from 1 to 1L in NodeBitMap . java to ensure correct handling of bit indices
refactor ImportLayoutStyle class for improved readability to enhance maintainability and maintainability of the code
replaced ` gitBashConfigValue ` with ` MINTTY ` in ` ConsoleUIService . java ` and updated ` ConsoleWrapper ` to
replaced ` mock ` with ` TestAccountManagerCallback ` in ` ShadowAccountManagerTest . java ` to simplify the code and improve readability by
removed the ` enclosingType ` field from the ` getEnclosingType ( ) ` method in ` AnalysisType . java ` to simplify the code by
updated method names from ` getProperty0 ( ) ` to ` concatSuffix ( ) ` across multiple classes to improve clarity and consistency in naming conventions
updated the set method call from 0 to 0 in PutAllCallable . java to improve code readability and maintainability
added null check for mqConsumerInner in MQClientInstance . java and a corresponding test in MQClientInstanceTest . java to ensure
[ java ] generate source identity for udp channel
added a new file ` TopTabAction . java ` that implements a Presenter interface to provide a simple layout for the top tab in the application
camel - 14263 : camel - dynamicrouter : add support for reactive filter
replaced ` TestCase ` with ` @ Before ` and added ` @ Test ` annotations in ` AggregateItemReaderTests . java ` to enhance test coverage
changed the type of the Procedure class from ` Procedure ` to ` Procedure < T > ` in ` AbstractObjectValueTypeMap `
refactor wiki data edit handling in AchievementsActivity and NetworkingModule to improve code readability and maintainability by centralizing wiki data edit
added a check to ensure that the length of the OfflineSorter class does not exceed the maximum value to improve error handling by throwing an IllegalArgumentException
added a ` absoluteValueAccumulator ` variable and modified accumulator handling in ` DumbMethods . java ` to improve code clarity and ensure correct handling of
refactor CategoryDataset , CategoryRangeInfo , DefaultCategoryDataset , and IntervalCategoryDataset classes to improve code organization and maintainability
[ ambari - 11717 ] fix invalidtopologytemplateexception in provisionclusterrequest
updated the iteration logic in TestVectorUtil . java to use nextFloat ( ) instead of nextFloat ( ) to improve performance by reducing the number
refactor compareBy method to return a long instead of int to improve code readability and maintainability
added SSL handling in TestUtil . java and modified SSL property retrieval in PGPropertyTest . java to improve SSL handling and ensure proper SSL property retrieval
added safebrowsing configurations for Windows and Unix files in ChromeDriverFactory and FileDownloadViaProxyTest to enable safebrowsing functionality
added null checks for oldConfig before calling setFlightConfiguration ( ) in BaseMotorMount , RecoveryDevice , and RecoveryDevice classes to prevent potential
added a condition to disable transcoding in the DLNAResource class to ensure transitive processing is disabled when transcoding is disabled
updated column retrieval logic in DataTable and TableDiffer classes to use isEmpty ( ) instead of getCells ( ) and Collections . emptyList ( ) to
added a static variable ` CustomIgnoreTag ` to handle custom ignore tags in ` RobustJavaMethodParser . java ` to ensure proper handling of
camel - 14263 : camel - jdbc - jdbc - improve error handling for stale record .
added a new class ` ParentConfigProperties ` and modified ` BeanDefinitionInjectProcessor ` to use ` requiresReflection ` and added a new ` ParentConfig
refactor PreferencesActivity to extend LimitlessIDEActivity instead of IDEActivity to improve code clarity and maintainability by using a more descript
deleted the ClusterNodeInfo . java file to remove unused code to streamline the codebase
modified the return statement in ShieldedTransferActuator . java to improve code readability and maintainability
added debug logging for Standard and Legacy ciphersuites in ServerHandshaker . java to enhance debugging capabilities for ciphersuites
added onTemplateChosen method to ChooseRichDocumentsTemplateDialogFragment , ChooseTemplateDialogFragment , and ChooseTemplateDialogFragment classes to improve
added a hash map for duplicate nodes in ImportContainerImpl and updated related logic in ImportContainerParameters to ensure that duplicate nodes are processed correctly and improve
added a new file R2303044ListSelection . java to handle list selection functionality to improve user experience by ensuring the list item is selected
added a check for the correlation ID before adding it to the publicationRegistrations to ensure that the correlation ID is already in use while ensuring that the
added a null check for mWorkspace in Launcher . java to prevent potential NullPointerExceptions when mWorkspace is null
added a new test method ` testCompoundPropertyTwice ` to ` StepScopePlaceholderIntegrationTests ` to ensure that compound property Twice
replaced Lists . newArrayList with Lists . newArrayList for rowCounts in StatsRulesProcFactory . java to improve code readability and maintainability
refactor path handling in SpringBootDocBuildTemplate . java to improve clarity and consistency to enhance code readability and maintainability by centralizing path
refactor logger initialization to use a final constant for better readability and maintainability to improve code clarity and maintainability by reducing redundancy
updated the ` createBuildEngineDelegate ` method to use ` LocalCachingBuildEngineDelegate ` instead of ` DistBuildCachingEngineDelegate ` to
updated error handling in Response . java to improve clarity and consistency to enhance code readability and maintainability
added a conditional check for DEBUG state before logging the widget tray to ensure that the widget is only added to the widget tray
refactor Console and Scanner classes for improved readability to enhance maintainability and maintainability of the code
updated the calculation of numTerms from ` state . getBoost ( ) ` to ` state . getLength ( ) ` in ` SimilarityBase `
added null checks for ` ReflectionUtils . findMethod ` in ` SimpleMailMessageItemWriterTests ` and ` MimeMessageItemWriterTests `
added ` exit ` and ` quit ` properties to ` Global ` , ` ScriptingFunctions ` , and ` ScriptingFunctions ` to enhance exit handling and
refactor LoanBrokerSharkDetectorDemo to use ConfigurableApplicationContext instead of ApplicationContext to improve code readability and maintainability by centralizing
updated method names from ` getFirstUnverified ` to ` findLastUnverified ` in multiple classes to improve clarity and consistency in method naming conventions
added null checks for the service cookie in VmwareContext . java to improve robustness by preventing potential NullPointerExceptions
updated assertion statements in ResinAcegiAuthenticatorTests . java for consistency to improve code readability and maintainability
updated ByteUtil to include 32 - bit byte arrays in ECKey . java to ensure proper handling of 32 - bit byte values
updated the property name from " disabledMods " to " modStates " in the Loader class to improve clarity and consistency in the application
removed the boolean variable ` mAccountSelected ` and ` mAccountSelectionShowing ` from the ` ReceiveExternalFilesActivity ` class to simplify the
updated exception message in CollectSink . java to include hostIp . toString ( ) instead of send back to the client to improve clarity of error messages
added checks for empty result types in ValidatorContractController to ensure proper handling of empty results from validator smart contract calls
added null check for the root field in TexturePackerFileProcessor . java to prevent potential NullPointerExceptions when reading fields
added a check for dataSource JNDI in the PooledConnection class to ensure proper handling of DataSource JNDI configurations
updated TARGET _ MB and WINDOW values from 10 _ 000 to 1 _ 000 in TestRefprocSanity . java
added null checks for currentConsole in EditorConsole . java to prevent potential NullPointerExceptions when writing the currentConsole
set the credentials refresh delay to 100 in KinesisConfigUtil . java to ensure credentials are refreshed based on the current state
refactor dialog creation to use ` showInfoAlert ` instead of ` show ( ) ` in ` SingleUploadFragment . java ` to improve code
added a pack parameter to the test method in T4501661 . java to ensure proper handling of the pack parameter in the test
updated jetty version from 1 . 7 . 0 _ 60 to 1 . 8 . 0 _ 31 in ModulesTest and TestBadUseCases
updated import statements and added a check for dependency provided checks in PluginBundleManager . java to improve code readability and maintainability by ensuring dependencies are
added stream handling to the ZipFile class to ensure proper resource management and prevent potential resource leaks
rename ` DATAMATRIX ` to ` DATA _ MATRIX ` in multiple test files to improve clarity and consistency in naming conventions
added methods to run active and idle threads in SequenceGeneratorSource . java to improve thread safety and ensure thread safety during execution
updated method name from ` getCurrentyActiveConnections ( ) ` to ` getCurrentActiveConnections ( ) ` in BlobServer and BlobServerGetTest to
replaced ` findAny ( ) ` with ` findFirst ( ) ` in ` AnnotatedDelegate ` , ` SyntheticAnnotated ` , and ` Synthetic
added " ppc64 " and " ppc64le " architectures in Bits . java and ByteArrayAccess . java to ensure compatibility with the latest architecture
added a link to the RuntimeException message in RoboMonitoringInstrumentation . java to provide a link to the RuntimeException message for improved readability
updated waitWithDeadline method to use Long . MAX _ VALUE instead of MINUTES to improve flexibility in timeout handling
replaced occurrences of ` Date ` with ` Instant ` and ` Instant ` in ` DateUtilTest . java ` to improve code readability and maintain
refactor BytesRef class for improved readability to enhance maintainability and maintainability of the code
added a Toast message to indicate if YouTube Player doesn ' t work on Lollipop yet to ensure that YouTube Player does not work on Lo
added validation methods for dollar quotes in the parser and StatementTest classes to ensure proper handling of dollar quotes in SQL statements
added a null check for mVibrator before checking if mVibrationDuration is non - null to prevent potential NullPointerExceptions when m
refactor ` DotRenderer ` to improve color handling for foreign key columns in ` DotRenderer . java ` to enhance code readability and maintainability
added a method to check for encoded parameters in HiveConf and modified logging statements in SetProcessor to ensure proper handling of encoded parameters in the configuration
pdfbox - 4072 : catch StringIndexOutOfBoundsException instead of StringIndexOutOfBoundsException in PDFParser . java to improve error handling for StringIndexOutOfBoundsException
refactor X509Certificate class for improved readability to enhance maintainability and maintainability of the code
added validation for URIs in WavefrontConfig and added a new test class WavefrontConfigTest to validate URI configurations to ensure proper validation of
added support for loading image images in NetworkedCacheableImageView to enhance image loading capabilities for improved performance
updated method signatures in CellLayout , LauncherAnimUtils , and FolderIcon classes to improve code readability and maintainability
added a static variable ` controllersVersion ` to the ` DependencyBank ` class and updated its usage in ` DependencyBank ` and ` DependencyBank `
refactored LaunchedURLClassLoader to improve code readability to enhance maintainability and maintainability of the code
updated DataSourceHealthIndicator to utilize DataAccessUtils for retrieving ResultSet values to improve data access handling and ensure proper error handling during query operations
refactor authentication handling in AdminOnlyFilter and LayoutTag classes to use HttpServletResponse instead of ServletResponse to improve code clarity and maintainability by central
updated warnMsg to use Locale . ENGLISH instead of Locale . ENGLISH to improve clarity and consistency in message formatting
added a Analyzer parameter to the SolrQueryParser constructor in SolrQueryParser to enhance the flexibility of the SolrQueryParser constructor
updated copyright year in Settings and AutoLevelerTopComponent , AutoLevelerTopComponent , and AutoLevelerTopComponent classes to ensure compatibility with
removed unnecessary semicolon in MainTest . java to simplify code and improve readability
refactor TypeContributions class for improved readability to enhance maintainability and maintainability of the code
added handling for VoidColumnVector in VectorizedBatchUtil . java to ensure proper handling of VoidColumnVector instances
updated the method call from ` templateName ` to ` req . getName ( ) ` in ` StatementGenerator . java ` to improve clarity and consistency in
removed unnecessary check for boolean type matches in AbstractConfig . java to simplify code and improve readability
added a ` offer ` method to the ` SessionDecorator ` class and implemented a ` offer ` method in ` Offer ` to provide a way to
updated method names from ` trustAll ` to ` maxTrustedIndex ` in ` XForwardedRemoteAddressResolver ` and ` XForwardedRemote
added a new annotation interface ` NoBootstrap ` and updated the ` BootstrapInserter ` to check for no bootstrap annotations to ensure that no bootstrap annotations
hbase - 14299 fix npe in tabledescriptorchecker . getmaxfilesize ( )
updated the calculation of requestedCommits from ` maxCommits ` to ` requestedCommits ` in ` BranchGraphServlet . java ` to improve
added InvocationTargetException to main methods in bug6794831 . java to enhance exception handling for invocation invocations
added a constant ` BUILD _ ID ` to ` CachingBuildEngine ` and updated related metadata handling in ` CachingBuildEngine ` to
removed unused imports for TxInputUtil and TxOutputUtil in TransactionCapsule . java to streamline code by eliminating unnecessary dependencies
added a call to markAsDone ( future , channel ) in HttpProtocol . java to improve code readability and maintainability
added TezConfiguration initialization and modified copyInto method in TezConfigurationFactory . java to ensure proper handling of Tez configurations in the application
added null check for keyPurposes in TimestampedSigner . java to prevent potential NullPointerException when keyPurposes is null
removed the conditional check for mIsVisible in CustomPlaybackOverlayFragment . java to improve code readability and maintainability
added a null check for recent sounds in OpenALAudio . java and added a forget method in OpenALSound . java to prevent potential NullPointerException
updated state handling in SimpleBasePlayer and added a new listener call in SimpleBasePlayerTest to improve state management and ensure proper handling of discont
added DecimalFormat formats for NumberTickUnits in NumberAxis . java to ensure correct ticking for different tick units
refactor TargetsCommand and TargetGraphAndBuildTargets methods to streamline target graph handling to improve code readability and maintainability by centralizing
removed IndexFileNameFilter . INSTANCE . accept ( null , fileName ) and removed IndexFileNameFilter . INSTANCE . accept ( null , fileName ) from Index
added a new boolean flag ` fullBoundingBoxLadders ` and updated related logic in ` ForgeDummyContainer ` and ` ForgeHooks `
added a default compression level parameter to the ApkBuilderStep and updated constructor parameters in SignedJarBuilder and SignedJarBuilder to enhance flexibility in compression
added a new test method ` shouldIncludeStaticFields ` in ` MirrorTest . java ` to verify the inclusion of static fields in the class
updated UNDEFINED _ FIELD _ SIZE and UNDEFINED _ METRIC _ SIZE from private to protected in multiple classes to enhance encapsulation and
updated StringBuilder initialization to use EOL instead of EOL for clarity to improve readability and maintainability of the code
replaced ` super ( ) ` with ` Objects . hashCode ( ) ` in ` Trade . java ` and ` KucoinDealOrder .
added cache management functionality to SpringDataJPAJoinFetchPaginationTest , ForumService , and ForumService classes to enhance cache management functionality and ensure proper
updated locale handling in PronunciationModel . java to use locale prefix instead of german . pronunciation . featuredefinition to ensure
added null post body handling in SimpleHttp and updated test cases in TestHttpPlugin to ensure proper handling of null post body and improve test coverage for
added a Dispatcher to the ClientSideSlb class and updated ClientSideSlbTest to use shutdownNow ( ) instead of shutdownNow ( ) to ensure
added a conditional check forFlipY ( ) in TextureRegion . java to ensure proper rendering of texture coordinates whenFlipY ( ) is enabled
replaced HazelcastException with InvalidConfigurationException in DefaultDiscoveryService . java to improve error handling and provide clearer error messages for unknown properties
added null check for contextPath in MetricsPublisher . java to avoid potential NullPointerExceptions when contextPath is null
do n ' t reload the class if it ' s not null
added a check for B _ TREE _ MAP _ ROOT _ HEADER in BTreeMap . java and modified the BTreeMap . java to
added precompiled header handling in AppleDescriptions . java and modified conditional checks in AbstractCxxSourceRuleFactory . java to ensure precompiled header
updated ImageWatched . java to use AccessControlContext instead of WeakReference to improve security and prevent potential NullPointerExceptions
updated the ` findNextIndex ` method from ` ObjectMap ` to ` private ` in ` ObjectSet ` , ` OrderedMap ` ,
changed the default value of isDirect from true to false in VertexBufferObject . java to ensure proper initialization of the isDirect variable
removed redundant return statement in audioEffectHelpTextsMap to streamline code by eliminating unnecessary casting
changed the return type of ` localToAscendantCoordinates ` from ` void ` to ` Vector2 ` in ` Actor . java `
updated chunkSize assignment from capacity ( ) to limit ( ) in RandomAccessReadBuffer . java and added a new test for PDFBOX5764
added a null check for the context before removing the close hook to prevent potential NullPointerExceptions when context is null
refactor border spacing calculations in CellLayout and DeviceProfile classes to improve code readability and maintainability by centralizing border spacing calculations
refactor valueNumeric parsing to use ValueNumeric . of ( String , String ) instead of NumberFormat . parse to improve code clarity and maintainability by
added a condition to check if the login or error page is not deferred to ensure that the login or error page is not marked as deferred
updated command line arguments to include " -- add - to - start " instead of " -- module - start - ini " to enhance command line
added a new variable ` HIVE _ DEFAULT _ PARTITION _ VALUE ` to ` DynamicPartitionFileRecordWriterContainer ` to handle null partition values
[ hotfix ] [ stream ] fix nullpointerexception in streamgraph and streamnode
updated the ` getConflictId ( ) ` method to use ` hasClassifier ( ) ` instead of ` hasClassifier ( ) ` to improve code
added a new ` this ` parameter to the consumer subscribe method in ` KafkaConsumer ` and created a new ` KafkaConsumerRebalanceTest ` for
added error handling for NoClassDefFoundError in AnnotationSubstitutionProcessor . java to improve error handling for missing classes in the classpath
updated the plugin name from " GMAIL _ NOTIFICATIONS _ ENABLED " to " ENABLE _ GMAIL _ NOTIFICATIONS " to
refactor CryptoKey and CryptoKeyOrBuilder classes for improved clarity to enhance maintainability and readability of the codebase
updated the expected message count from 125 to 25 * concurrencyLevel in LumberjackMultiThreadTest . java to improve test reliability by reducing the number
updated health checks in GlowPlayer and PlayerUpdateHandler to check if the player is dead to ensure proper handling of dead players when the player is
refactor Exchange class to improve code readability to enhance maintainability and maintainability of the code
updated API _ KEY parameter description from " api key " to " secret key " in UpdateUserCmd . java to improve clarity and consistency in API
updated switch logic in MfaProvider and related classes to use MfaProviderType instead of GOOGLE _ AUTHENTICATOR to improve
refactor AbstractMetaDataExportMojo class to improve code readability to enhance maintainability and maintainability of the code
added exception handling for SQLIntegrityConstraintViolationException in Hive . java to ensure proper handling of table drops when the table is not used
updated the property name from " githubAccessToken " to " gitHubAccessToken " in GitHubMilestonePlugin . java to ensure consistency with the new property name
added a new file RoboExecutorService . java that extends RoboExecutorService to facilitate the use of RoboExecutorService in the application
added a condition to check if the group is root before adding items to the menu to ensure that the menu is only added when the root group is
updated method names from ` buildServiceNameAndSpanName ` to ` buildServiceAndSpanName ` for consistency to improve code readability and maintainability
updated the test execution logic in TestDynamicNumberOfGCThreads . java to improve clarity and maintainability of the test execution process
refactor ` getHostFlavorMap ` and ` getAllPossibleHostFlavorMap ` methods to return ` ImmutableSet < Flavor > ` instead of ` Immutable
updated SQL query handling in CreateTable and CreateTableDeParser to include additional parameters to ensure proper handling of SQL queries and improve code readability
added alpha setting for the background color in ChatViewerFragment . java to improve color handling for the chat background
updated import statements in CtIteratorTest . java to use JUnit ' s JUnit jupiter . api . Assertions . assertEquals to ensure
added ` token ` and ` result . clear ( ) ` methods to multiple tokenizer classes to improve code readability and maintainability
added a new file ` ASTInitializerTest . java ` that tests the behavior of ` ASTInitializerTest . java ` to provide a test case for
refactor StateMachineConfiguration and StateMachineFactoryConfiguration to use BeanDefinitionConfigurerAdapter instead of Enums to improve error handling and provide clearer error messages
added import statement for TestLocators in WebDriverSeleniumTestSuite . java and added TestLocators . java to ensure proper handling of locators
updated rounding logic in StringConverter to use Integer . MAX _ VALUE instead of Integer . MIN _ VALUE and added a new test for Float conversion to
removed unnecessary imports and simplified the return statement in AggregateLifecycle . java to streamline code and improve readability
updated touchableInsets setting in TaskbarDragLayerController to use TOUCHABLE _ INSETS _ REGION instead of false to
updated parsing logic in FencedCodeBlockParser . java for better readability to improve code clarity and maintainability
added socket timeout handling and improved socket timeout handling in multiple classes to enhance socket timeout handling and provide clearer feedback on timeouts
added exception handling for InterruptedException in ElementAttributeTest . java to ensure proper handling of InterruptedExceptions
added UTF - 8 character encoding to the BufferedReader instance in HttpUtils . java to ensure compatibility with UTF - 8 encoding
refactor List class to improve code readability to enhance maintainability and maintainability of the code
added constructors for AsyncFileImpl and created a new test class AsyncFileImplTest to improve error handling and ensure proper handling of write stream errors
added API annotation to CucumberEngineExecutionContext and modified CucumberTestEngine to be final in CucumberEngineExecutionContext and Cucumber
added null checks for physicalNetworkId and hostId in NuageVspManagerImpl . java to improve robustness by preventing potential NullPointerExceptions
rename ` retryUploads ` method to ` retryFailedUploads ` and update related logic in ` FileUploader ` and ` UploadListActivity
removed the ` getJavaVersion ( ) ` variable from the ` ConstantPoolTagTests ` class to simplify the code and improve readability by eliminating unnecessary
refactor compile method to improve clarity and readability to enhance maintainability and maintainability of the code
added a method ` removeAllHeaders ( ) ` to ` AsyncHttpClient ` to clear the client header map to ensure the client header map is cleared before
replaced Vector with List < String > for inputFileName and outputFileName initialization to improve performance and maintainability of the code
updated the DEFAULT _ GRID _ COLUMN value from 4 . 0f to 3f in AppPreferencesImpl . java to align with the new
added a condition to check for view creation in CalcitePlanner . java to ensure proper handling of view creation during view creation
refactor date pattern handling in TestHS2HttpServer . java to improve clarity and consistency to enhance readability and maintainability of the code
added error handling for ` Throwable ` in ` GraphPrinter . java ` to ensure proper initialization of ` Object ` in ` GraphPrinter . java `
updated the driver variable from IE to FIREFOX and added a new method for PageLoadingTest to improve code readability and maintainability
updated byteOffset calculation in ByteBlockPool . java and added a test for TooManyAllocs method in TestByteBlockPool . java to ensure
changed the visibility of ` firstEncoder ` and ` secondEncoder ` from static to Locale . ENGLISH in ` InteractionValueEncoder . java ` to
added exception handling for unexpected exceptions in TcpTransport . java to ensure proper handling of unexpected exceptions
added @ SuppressWarnings ( " serial " ) annotation to PApplet . java to suppress warnings in the application
replaced ` AbstractBuildRuleWithResolver ` with ` AbstractBuildRule ` in multiple files to simplify the class structure and improve code readability
updated error message handling in JabRefFrame . java to improve clarity and maintainability of the code
updated OAuth20DeviceCodeResponseTypeRequestValidator and NexmoSmsSender to check if the response type is not allowed to improve error handling and
added a call to ` chk ( index , 1 ) ` in ` DrillBuf . java ` to ensure proper handling of index data
added a new method ` initTableMapperJob ` to ` TableMapReduceUtil ` and modified the ` initTableMapperJob ` method to include
removed redundant call to append ( jrubyClasspath , testClasspathElements ) in AbstractJRubyMojo . java to improve code readability and maintainability
added language handling in LLVMPolyglotEval . java and implemented a new test class TestEvalNoLang in PolyglotBuiltinTest
added support for the ` deprecatedReserveCommitDuration ` variable in ` ReplicationHandler . java ` and updated log messages in ` ReplicationHandler . java
changed cacheVariableName and cacheForeignKey from cacheVariableName to cacheForeignKey in multiple classes to improve clarity and consistency in handling foreign key and foreign key
updated ECKeyPairGenerator to use byte [ ] instead of long arrays to improve performance by using byte arrays instead of long arrays
added suspend methods to Restarting and StateWithExecutionGraph classes , and updated state handling in StateWithExecutionGraph to enhance state management and ensure
replaced ` INSTANCE . get ( context ) ` with ` RotationTouchHelper ` in ` RecentsAnimationDeviceState ` and ` RotationTouch
refactor UniFiControllerCache to improve code readability and maintainability to enhance maintainability and maintainability of the code
rename ` lwp _ id ` to ` unique _ thread _ id ` and update related methods to use ` unique _ thread _ id ` to
refactor the logic for adding and removing candidates in the OfferBook class to improve code readability and maintainability by reducing duplication
refactor SSL protocol handling to use Constants . PROTO _ TLS v1 _ 3 instead of SSL version to improve code clarity and maintainability by
refactor MockitoMethodInvocationControl and SystemClassUserTest to use a direct method call for handling Class instances to improve code readability and maintainability by
replaced instances of ` NotLoadedException ( ) ` with ` PartialDatabaseObject ` in multiple exception classes to simplify exception handling and improve code clarity
removed import of DisplayUtils from FileDisplayActivity . java to streamline code by eliminating unnecessary imports
added exception handling for compaction files in StoreDirect and StoreWAL classes to ensure proper resource management and prevent potential memory leaks
added screenshot task handling in AbsSwipeUpHandler and SystemUiProxy classes to improve task management and ensure proper content overlay management
added hidden field to LiquibaseCommandLine and a method to check if the command argument is hidden in CommandArgumentDefinition to enhance command argument handling by
updated the IP address from 8090 to 9092 in LoggingKafkaPluginTest . java to ensure the correct IP address is used for better
do n ' t parse sld from style group
added permission checks for launcher activity in InstallShortcutReceiver and updated intent handling in Launcher to ensure proper handling of malicious intents based on user permission
added ` getId ( ) ` and ` getId ( ) ` methods to multiple TiledMapTile and AnimatedTiledMapTile classes to enhance
refactor Manager class for improved readability to enhance maintainability and maintainability of the code
updated JDBCExample and SessionExample to include version = V _ 0 _ 13 to ensure compatibility with the latest version requirements
added schemas and includeSchema in LiquibaseGenerateChangeLogMojo . java to ensure correct handling of schemas in the Liquibase generate
updated registry cache retrieval to use registryCache . put instead of registryCache . putIfAbsent to ensure proper cache management and avoid potential memory leaks
added logging for ` singleBenchmarkRunnerException ` and ` singleBenchmarkRunnerExceptionLogger ` in ` PlannerBenchmarkRunner . java ` to improve logging
removed the final modifier from the doPutRecord method in AbstractCacheRecordStore . java to simplify the method signature and improve readability
updated path handling in Tools . java and FileSelectorFragment . java to use ` / ' ' instead of ` / ' / ' to ensure proper
added unit tests for response content handling in FastCGIProxyServletTest . java to ensure proper handling of response content in the HTTP client
added a startService for ReadInteractionsService in MarkReadService . java to enhance the functionality of the ReadInteractionsService
added a conditional check for lintClassfile before logging warnings in ClassReader . java and T6214965 . java to ensure proper logging
added configuration for the " mail . server . port " property in the Email class to ensure the correct smtp port is used for the application
added retry logic for SSL factory reloading retry attempts and improved error logging in TlsUtils . java to enhance SSL factory management and ensure proper retry
updated the date format from " yyyy - MM - dd " to " yyyy - MM - dd : ss ' Z ' " to
updated the assertion message in SpyingOnRealObjectsTest . java to include a due to mocking a private class that is not visible to Mockito
added a boolean variable ` _ isEndsOnNL ` to ` InlineBoxing ` and updated related logic in ` LineBox ` to improve
added null check for filePath . getParent ( ) in UnpackContent . java to prevent potential NullPointerException when filePath is null
removed the import of DocCollection in TopicStream . java to streamline the code by eliminating unnecessary dependencies
updated NinjaServletContextTest to use UTF - 8 encoding and added a new test method for Windows1250ParameterInMultipart to enhance test coverage
added property " management . endpoints . web . exposure . include " = * " to the AbstractCasEndpointTests class to enhance test coverage for exposure
added a check to ensure the current graph is not a dynamic graph to ensure that the current graph is not a dynamic graph
added a new ` EagerInitFactory ` annotation and modified ` DefaultBeanContext ` to use ` ElementType . METHOD ` instead of ` ElementType .
added ` suppressExceptions ` parameter to ` JsonPathExpression ` , ` JsonPathExpression ` , and ` JsonPath ` classes to enhance exception
replaced ControllerLeaderLocator . create ( _ helixManager ) with ControllerLeaderLocator . create ( _ helixManager ) in HelixServerStart
updated usage messages from ` CLHSDB ` to ` HSDB ` in ` CLHSDB ` and ` HSDB ` to improve
added ` configureChunkProvider ` method to ` FaultTolerantStepFactoryBean ` and ` FaultTolerantChunkProvider ` to
[ beam - 14136 ] remove deprecate ` Write ` class and remove ` Write ` class from ` SinkOutputFormat ` and `
updated the ` ShadowAccessibilityManagerTest ` to use ` RuntimeEnvironment . application . getSystemService ( ACCESSIBILITY _ SERVICE ) ` instead of
updated import statements and added a new notification configuration for GROUP _ DISPLAY _ ID in FlutterInitializer . java and Analytics . java to enhance
replaced ` AbstractBuildRuleWithResolver ` with ` AbstractBuildRule ` across multiple classes to simplify code and improve maintainability by eliminating unnecessary dependencies
replaced ` enumDataTypeHelper ` with ` PostgreSQLEnumDataTypeHelper ` and added a new ` PostgreSQLEnumDataTypeHelper `
updated the comparison logic in LogFileTests to use File . separatorChar instead of File . separatorChar to improve code readability and maintainability by
updated method names from ` getMapLocalLocalWork ( ) ` to ` getMapRedLocalWork ( ) ` in multiple Java files to improve
added exception handling for UnsupportedOperationException in HiveMetaStoreClient . java to ensure proper handling of UnsupportedOperationException when index tables are not available
added a condition to update disabled flags in RecentsView . java to ensure disabled actions are only updated when the visibility is visible
added a conditional check for SH - REPL in Repl . java to ensure the highlighter is only displayed when running on Windows
added a method ` addOptionalLocalVariable ` to ` BugInstance ` and updated its usage in ` CrossSiteScripting ` and ` CrossSiteScript
updated file path handling in HadoopPinotFS . java to use toString ( ) instead of getRawPath ( ) to ensure consistency in file path
updated the method call from removeCaptureListener to removeCaptureListener to improve code readability and maintainability
changed the flag ` _ metaDataComplete ` from true to false in ` MetaData . java ` to ensure proper initialization of ` _ metaDataComplete `
updated the ` removeTaskTarget ` method and modified bitmap creation logic in ` RecentsAnimationController ` , ` ThumbnailSearchResultView ` , and
updated JS _ BUNDLE _ NAME and added tests for release flavor handling in JsBundleGenrule to ensure proper handling of release flavors in
updated variable assignment logic in Lower . java and added a new class T6500701 . java with a new class T6500701
added tests for ` crlfNewLinesInComments ` , ` crlfNewLinesInComments ` , and ` crlfNewLinesInJavadoc
added a check for the hubMode property in AbstractLiquibaseChangeLogMojo and modified AbstractLiquibaseMojo to use it to ensure the
removed unnecessary check for ` skipPolicy ` in ` JsrFaultTolerantStepBuilder ` and ` JsrChunkProcessor ` to
added error handling for no linkDb files in IndexerMapReduce . java to ensure that the indexing directory does not exist in the job
refactor setIndexerThreadPoolMethod initialization in LuceneTestCase . java to use a forName method to improve code readability and maintainability by centralizing method
updated the string format from " sms : / / " to " sms : / / " in GameCanvasImplementation . java to improve code clarity and
refactor MapJobExecutionDao to use SerializationUtils for serialization and serialization to improve code readability and maintainability by centralizing serialization logic
added a new file DownloadTest . java to test the DownloadTest class for downloading screenshots to enhance testing capabilities for downloading screenshots
updated language handling in multiple files to use Util . normalizeLanguageCode ( language ) instead of Util . normalizeLanguageCode ( language ) to improve code
hive - 14257 : hive - 14410 : hive - 14410 : hive - 14410 : hive - 141
added null check for selectedVersion before proceeding to prevent potential NullPointerExceptions when selectedVersion is null
refactor matchers in SecurityConfig . java for improved readability to enhance maintainability and maintainability of the code
added JUnit Ignore annotation to TestConcurrentDppInserts . java to temporarily disable test executions
refactor BeanDefinitionInjectProcessor to handle non - java . lang . Object types and improve type handling to enhance code robustness and ensure proper handling of
added a @ Ignore annotation to HttpClientRedirectTest . java to temporarily disable the test until the test is complete
updated variable names from ` ENERGY _ MANAGEMENT _ SUPPORTED _ THING _ TYPES ` to ` ENERG
removed the conditional check for SocketStatus . STOP and SocketStatus . TIMEOUT in AprEndpoint . java to simplify code and improve readability
deleted the SunToolkitSubclass . java file to remove unused code to streamline the codebase
added a method ` hasRotationOrScaling ( ) ` to ` DefaultRenderableSorter ` and updated translation handling in ` Matrix4 ` to improve translation
added a new test method ` registerWrapperHandlerBeforePrimitive ` to ` TypeHandlerRegistryTest ` and updated import statements in ` TypeHandlerRegistryTest
added a method to convert the alternate color space in PDSeparation . java to make it easy to convert the alternate color space to the
updated library URLs to use BuildConfig . WIKIMEDIA _ HOST instead of CommonsApplication . HOME _ URL to ensure compatibility with
added a new class ` MainHttpFakeHealthCheck ` and a corresponding test class ` MainHttpServerTest ` to handle health health checks to enhance health
added a null check for the pos before retrieving the block state in EntityThornChakram . java to avoid potential NullPointerExceptions when the
added a new test method ` testAlterTableWithViewsIT ` to validate the functionality of ` AlterTableWithIndexesExtendPk ` to ensure
updated the variable ` offset ` and ` off ` in ` FileFloatSource . java ` and modified test assertions in ` TestFunctionQuery . java
added a call to remove DrillMongoConstants . ID in MongoRecordReader . java to ensure proper removal of DrillMongoConstants . ID
added disconnect ( ) method to YeelightHandlerBase and DeviceBase classes to improve connection management and ensure proper resource management
added checks for AUTO _ INCREMENT and improved error handling in Parser . java and TestCompatibility . java to ensure proper handling of integer values
added a list of existing shared indexInformers in SharedInformerFactory and updated related test cases in SharedInformerFactoryTest to improve the reliability of shared
updated null check for userVm before saving details to improve robustness by preventing potential NullPointerExceptions when userVm is null
replaced ` imageSizeFromStream ` with ` RobolectricBufferedImage ` and updated the initialization logic in ` ShadowBitmapFactory . java `
removed deprecated methods from LauncherProvider , LauncherSettings , and LauncherSettings classes to streamline code and improve maintainability
[ drools - 117 ] add broker rules / stocktickstream . dat file to the broker example .
updated legend right and bottom values from ` getFullHeight ` to ` legendTop ` in ` PieChart . java ` to improve accuracy of legend
added a check for world transforms in BaseShader . java to ensure proper rendering when world transforms are not zero
added a new file ` MaryScriptCreator . java ` with a new file ` MaryScriptCreator . java ` to create a file ` MaryScript
add restlistener . remote . source . host attribute to restlistener . remote . source . host
refactor CompactionLogger initialization in LevelCompactionTsFileManagement . java to improve code readability and maintainability
updated URL attributes from " xlink : href " to " href " in ComponentDescription . java to improve clarity and consistency in URL handling
added a constant for the TIMEOUT _ CHECKER _ EXECUTOR _ NAME in AWS2S3StreamUploadProducer . java to ensure
changed the visibility of the isClusterShutdown method from private to public in ServerManager and AssignmentManager classes to allow access to the cluster shutdown state
updated log messages in Slf4jSpanLogger and DefaultTracer classes to include null checks to improve robustness by preventing potential NullPointerExceptions
added a trim ( ) method call to the _ config . addActiveOption method to ensure the option is trimmed before adding it to the config
updated depth handling in DepthController . java to use PreferenceExtensionsKt instead of PreferenceExtensionsKt . firstBlocking to improve code clarity and
updated the assertion in OverseerTest . java to verify the success count of OverseerAction . STATE . toLower ( ) to ensure
removed the ` getKernelVersion ` method from the ` LinuxFileStore ` class to simplify the code and improve readability by eliminating unnecessary code
refactor ExecConstants class to improve code organization to enhance maintainability and readability of the code
removed the ScreenRecordRule annotation from ThemeIconsTest . java to streamline the code by eliminating unused imports
added a new method ` setScanAttributeForPaging ` to ` TableSnapshotResultIterator ` , ` ScanUtil ` , and ` ScanUtil `
added a check for ` lowRange ` before setting ` lowRange ` in ` Request . java ` and ` RequestV2 . java ` to
changed access modifiers of keySizeEstimator and valueSizeEstimator from private to protected and added debugCacheSize method to enhance encapsulation and improve
updated zoneId assignment from ` getUuid ( ) ` to ` getZoneUuid ( ) ` to ensure consistency in zone ID management
updated Content - Type headers to use MediaType . APPLICATION _ JSON _ UTF8 _ VALUE instead of application / json in BaseLivyInterpreter . java
replaced direct call to filesystems . remove ( zfpath ) with a direct call to filesystems . remove ( zfs ) to ensure proper
replaced ` Object ` with ` String ` and updated the ` toJson ` method to use ` String ` instead of ` Object ` to improve code
updated the poll method from ` 2 ` to ` 5 ` in ` SoftAutoCommitTest . java ` to use ` hardCommitWaitMillis `
added exception handling to the SelenideLogger class and updated event handling in SelenideLoggerTest to improve error handling and ensure proper logging of
refactor multiple Dial classes to improve code organization to enhance maintainability and readability of the codebase
updated logging statements in SyncQueue . java to improve clarity and consistency to enhance code readability and maintainability
updated the ryuk version from 0 . 4 . 0 to 0 . 5 . 1 in RyukContainer . java to ensure compatibility with
updated the return statement from ` getBootstrapPaths ( ) ` to ` getAdditionalBootstrapPaths ( ) ` in ` BootClassLoaderHook ` and added
replaced ` Files . exists ( ) ` with ` LegacyXMLLayout . class ` in ` FMLClientLaunchProvider . java ` to improve
replaced ` getYarnClient ` with ` createYarnClusterDescriptor ` in ` YARNITCase . java ` to simplify the code and improve
refactor LocalMapStatsProvider to improve code readability and maintainability to enhance maintainability and maintainability of the code
deleted the AllTests . java file to the test class is no longer needed to clean up the codebase
added constant UNICODECHAR _ NONBREAKING _ HYPHEN and UNICODECHAR _ ZERO _ WIDTH _ SPACE
added a new test class ` ShouldNotStarveMemoryOnLargeStackTraceInvocationsTest ` for testing large stack trace invocations to ensure that large
updated method call from ` createRowKeyForMappedProperties ` to ` getResultMappingsForRowKey ` in ` NestedResultSetHandler . java ` to
added eventHandled = true to UIText . java to ensure proper handling of UI text events
removed the ` Weldby ` annotation from the ` Weldby ` class and updated its usage in ` Weldby ` to simplify the
added a boolean variable ` monitorCaptureGroupsInEmptyCheck ` and modified conditional checks in ` TRegexBacktrackingNFAExecutorNode ` to
removed the ` liquibaseProLicenseKey ` variable from the ` AbstractLiquibaseMojo ` class to streamline the code by eliminating unnecessary logging
replaced ` setMeasuresHierarchy ` with ` setMeasuresHierarchyMemberReader ` in ` RolapCube . java ` to improve code clarity and
added a static variable ` debugInfoValueUpdateHandler ` to ` SubstrateOptions ` and modified the ` TrackNodeSourcePosition ` method to
refactor MondrianProperties class to improve code readability to enhance maintainability and maintainability of the code
added ` getFriendPaths ( ) ` method to ` KotlinConfiguredCompilerFactory ` , ` KotlincStep ` , and ` Ko
added aliases for BATK , BATK , BRAHMI , MAND , and MANDAIC in Character . java and CheckScript
updated assertions in ExecutionCommand and StageUtils to use equals for better readability to enhance code clarity and maintainability by centralizing equality checks
refactor Mockito class to improve code readability to enhance maintainability and maintainability of the code
refactor OCFile class to improve code readability to enhance maintainability and maintainability of the code
added a ` toString ( ) ` method to ` SystemScope ` to provide a string representation of the ` SystemScope ` object
updated CSSParser to handle percentage and PERCENTAGE parameters to improve error handling by throwing an exception if the parameter type is less than zero and
added a new test method ` testLocalIndexReverseScanShouldReturnAllRows ` to ` LocalIndexIT . java ` and a corresponding test for
updated test cases in BaseAndroidTestCase and BackupHelperTest to use ApplicationProvider instead of InstrumentationRegistry to improve clarity and maintainability of test assertions
updated message formatting in ItemListActivity , LiveTvGuideActivity , and LiveTvGuideActivity to use string concatenation instead of string concatenation to
updated loop conditions in RendererUtilities and added a new test for 3561093 in RendererUtilitiesTests to improve code readability and maintainability by
updated the ` ask ` and ` bid ` methods in ` KrakenStreamingAdapters ` to use ` ArrayNode ` instead of ` Iterator `
added error handling for adding a file system column twice when upgrading from 24 - > 30 to ensure proper handling of file system files during upgrade
removed sys . err . println ( line ) from AsyncServletIOTest . java to clean up the code and improve readability
updated ConvertJoinMapJoin to compute online data size based on hashTableLoadFactor and adjusted data size calculations to improve data size management and ensure accurate
updated ` buildView ` method to use ` Context ` instead of ` LayoutInflater ` in ` TrackSelectionHelper . java ` to enhance flexibility in handling
added a ` assertAuthentication ` parameter to ` SecurityMockMvcResultMatchers ` and a corresponding test in ` SecurityMockMvcResultMatchers `
change vpcid parameter from long to long in NetworkVO and VpcManagerImpl to avoid potential NullPointerExceptions when setting vpcId
[ flink - 10955 ] [ test ] disable test for flinksavepointtest
updated ` @ ResizeMode ` to ` @ Cue . AnchorType ` and ` @ CaptionStyleCompat . EdgeType ` to
updated the loop condition in Actor . java to include a check for the size of actions to ensure proper handling of action execution based on the size of
refactor BitmexStreamingExchange to use BitmexExchange instead of BaseExchange to improve code readability and maintainability by centralizing the
added MetadataFieldService and MetadataFieldService to RelationshipRestRepositoryIT . java to enhance metadata handling for relationships with virtual relationships
added null check for spatial in LodControl . java to avoid potential NullPointerExceptions when spatial is null
updated the ` ConditionalTokenFilter ` and ` TestRandomChains ` to use ` lastTokenFiltered ` and updated the ` ConditionalTokenFilter `
updated UnsafeStoreNode to use ` graph . unique ( ) ` instead of ` graph . unique ( ) ` in ` UnsafeStoreNode
replaced super . putAddress with io . putAddress in BoundedMemoryIO . java to improve code readability and maintainability
added a assertFalse check for casEventRepository . load ( ) . findAny ( ) . isEmpty ( ) in CasAuthenticationEventListenerTests . java
removed the ` attributeTemplateName ` parameter from ` AuthenticationAttrProcessor ` and ` AuthenticationAttrProcessor ` classes to streamline attribute processing by eliminating unnecessary
added a new class RemoveNullKeyCheck to handle null keys in MacOSXPreferences and created a new RemoveNullKeyCheck class to ensure that
added a method to set the typeface in CodenameOneTextPaint to improve error handling for typeface setting
added the ` open ` method to ` AzurePinotFS ` , ` LocalPinotFS ` , and ` HadoopPinotFS `
removed deprecated ` fail ( String message ) ` method in ` WebDriverRunner . java ` to eliminate deprecate ` fail ( String message ) `
updated the condition to check for the size of the item in SolrRequestParsers . java to improve code readability and maintainability
refactor DefaultResultSetHandler to use a boolean variable for useConstructorMappings to improve code readability and maintainability by reducing duplication
updated SQL statement in CreateTableGeneratorTest . java to include " generatedSql ( ) " to ensure consistency in SQL statements in the test
added conditional checks for PROJECTION and FILTER mode in VectorizationContext . java to improve code readability and maintainability by ensuring proper handling of
updated the inheritConfig method from ` ConfigUtils . inheritConfig ( ) ` to ` ConfigUtils . < MoveSelectorConfig > ` to ensure proper
replaced the creation of the ReorganizeTableStatement with a method call to modifyDataTypeStatement to improve code readability and maintainability
updated cluster name retrieval from 30 to 3 in SystemPropertiesUtils and DataNode classes to ensure consistency and consistency in cluster name handling
refactor connection handling in PeerGroup and PeerEventListener classes to improve clarity and consistency to enhance code readability and maintainability by utilizing a more
added style handling for blink , bold , and underline styles in Nano . java to enhance style handling for better user experience
replaced ` fixUp ` calls with ` AdventureNBTConverter ` across multiple files to improve code clarity and maintainability by using a more descriptive
updated the return statement from ` ` String ` to ` No # toString ( ) ` in ` NoToStringOnStringType . java ` to improve
updated Xmx64m from " - Xmx64m " to " - Xmx32m " in TestThreadFailure . java to ensure
updated ` retryFailed ` method to use ` FailureContext ` instead of ` int ` and added a new ` DataProviderRetryAnalyzer ` class to
updated the return type from ` 0 ` to ` bandwidth ` in ` BucketStateIEEE754 . java ` to ensure correct access to the
added methods to select and deselectPopUp and deselectPopUp in WebDriverBackedSelenium . java to enhance functionality for selecting and deselect
updated the ` doPrintEntry ` method to use ` KeyUtil . isWindowsKeyStore ( ) ` instead of ` boolean ` to improve security by
removed redundant call to task . cancelExecution ( ) in TaskAsyncCallTest . java to improve code readability and maintainability
added checks for dialog visibility and background color in Dialog and Frame classes to ensure proper handling of dialog visibility in the dialog
changed the ` state ` variable from private to private final in ` DefaultProjectFilesystem . java ` to allow dynamic access to the ` state ` variable
replaced ` potentiallyGetSentinelConfig ( redis ) ` with ` sendinelConfiguration ( redis ) ` in ` RedisObjectFactory . java ` to
added a new property ` lastSeenDelayedMessage ` and updated ` lastSeenDelayedMessage ` in ` ChatRoomJabberImpl . java `
updated the ` notifyContent ` method to use ` Callback . NOOP ` instead of ` Adapter ( ) ` in ` ResponseNotifier . java `
updated FileOperationsHelper and OperationsService to use OperationsService instead of CreateShareOperation to improve service management and enhance functionality for managing sharing operations
removed unnecessary check for isInjected in BeanDefinitionInjectProcessor . java and added @ Inject annotation in FieldPropertyInject . java to improve code readability and
updated the loop logic in ClassicPlotManager . java to use a new variable ` yStart ` for better readability to improve code clarity and maintain
added a check for NullPointerException in SmackIntegrationTestFramework . java to ensure proper handling of NullPointerException instances
added a boolean parameter ` readLinked ` to the ` readDirectory ` method in ` EXIFReader ` and ` EXIFReaderTest ` to
added support for ENABLED _ LS and ENABLED _ LS in VersionedTargetGraphMode and updated executor initialization logic in VersionedTarget
added conditional checks for video formats in DLNAResource . java to ensure proper handling of video formats
refactor AutoMlClient and AutoMlClient classes to improve code organization and maintainability
added a boolean flag ` load ` to ` LwjglNativesLoader ` and updated the ` load ` method in ` Lwj
added a new constant ` ESCAPE ` and updated ` CSVStrategy ` to use ` escape ` instead of ` escape ` to enhance flexibility in handling
updated grant type handling in ClientRegistrations and ClientRegistrationsTests to improve clarity and consistency to enhance code readability and maintainability
added exception handling for ` Throwable ` and ` initCausePlumbing ` in ` SuppressedExceptions ` and ` SuppressedException
added assertions in DerivedTableIT . java and updated OrderedResultIterator initialization in ClientAggregatePlan . java to ensure proper handling of result iterator
added RSquare handling in RegressionEvaluator and created a test for RSquare in StreamExpressionTest to ensure correct handling of RSquare in the regression
added handling for request headers in ThreadContextMDCServletFilter to ensure proper handling of request headers
updated SparkPlanGenerator to use MAPREDMINSPLITSIZEPERNODE and MAPREDMAXSPLITSIZEPERRACK instead of MAPREDMINSPLITSIZE
refactor image retrieval in PdfJndiReport and PdfSessionInformationsReport to use getFolderImage method to improve code readability and maintain
updated cache logic in JwtIssuerReactiveAuthenticationManagerResolver and added a test for resolving trusted issuers in JwtIssuerAuthenticationManagerResolverTests
updated resource check from exists to isReadable in AbstractScriptDatabaseInitializer and added a new test for database initialization in AbstractScriptDatabaseInitializerTests to ensure
added a boolean parameter ` isMethod ` to the ` Function ` constructor and modified the ` get ` method to include a ` isMethod ` parameter
removed the sleep method from AbstractBasicMockingIntegrationTest . java to improve code readability and maintainability
added a new file ` KernCrash . java ` to implement font rendering functionality to improve font rendering capabilities for Kerning Crash
added a call to fail ( ) in LinkedHashTreeMapTest . java to ensure that the test fails before proceeding
added a new method ` getInterfaceAddresses ` to retrieve interface IP addresses based on a prefix flag to enhance functionality to retrieve interface IP addresses based on
added a new ` HouseKeeperCleanupTest ` class and created a new ` HouseKeeperCleanupTest ` class in ` HikariPool ` and
removed client address comparison from syncStateSet to simplify the condition to improve code readability and maintainability
refactor Assert class for improved readability to enhance maintainability and maintainability of the code
added a new test file ` Issue247Test . java ` with a test class ` Issue247Test . java ` to verify the functionality
updated the ` doInBackground ` method to accept a ` ArrayList < String > ` instead of ` CategoryItem ` and ` String ` to improve
added validation for todayLeapYear and birthLeapYear in ValidatorTest . java to ensure correct validation of date and date validity during validation
added new GrblLookups for error handling and improved error handling in GrblController . java to enhance code readability and maintainability by using
added a conditional check for all apps in the workspace scroll format to ensure that all apps are not empty when no screens are available
removed the ` count ` parameter from multiple methods in ` BittrexTrades ` , ` BittrexMarketDataService ` , and ` Bit
replaced ` stripAnsi ` with ` stripAnsi ` in ` ConsoleReader ` , ` MemoryHistory ` , and ` MemoryHistory ` to
updated the path for the jdk path in JavaBuild . java to ensure compatibility with the latest Java build configuration
replaced ` getBuildRuleType ( ) . getBuildRuleType ( ) ` with ` get getType ( ) ` in multiple classes to improve code
added a logger parameter to the JFCModel constructor and updated related methods to include a logger parameter to improve logging clarity and ensure proper logging of warnings
added a check for tolerance in MaximumInscribedCircle . java to ensure tolerance is non - negative to prevent potential NullPointerExceptions when tolerance is not
added a new method ` createView ` and ` dropView ` to ` TestUtil ` and ` DatabaseMetaDataTest ` to handle view privileges
added support for Stable float and double tests in NaNTest . java to ensure proper handling of NaN tests based on platform X86
added a new file ` DesktopTaskbarUIController . java ` to create a new ` DesktopTaskbarUIController ` class to provide functionality for
added progress handling for task count events in SearchModFragment and ModItemAdapter classes to enhance user experience by ensuring task count updates are enabled
refactor Files class to improve code readability to enhance maintainability and maintainability of the code
refactor ` AnnotationGrpcServiceDiscoverer ` and ` GrpcServerAutoConfiguration ` to use ` Collection ` instead of ` Set ` to
updated ` DomainAwareServicesManager ` interface to extend ` ServicesManager ` instead of ` domainAwareServicesManager ` to improve clarity and maintainability of
refactor ResourcePackLoader to use LogManager for mod ID retrieval and logging to improve code clarity and maintainability by centralizing logging functionality
updated GoogleCredentialsProvider to use JWTAccessWithScope instead of GWTAccessWithScope to ensure compatibility with JWTAccess with JWTAccess
added new methods ` grow ` and ` growY ` to ` Cell ` class to enhance the functionality of ` grow ` and ` growY `
refactor DefaultInputHandler to use a new Map < KeyStroke , ActionListener > instead of a single map to improve code readability and maintainability by
added a try - catch block for exception handling in ActiveMQTestCase . java to improve robustness by preventing potential runtime exceptions
replaced long array with byte array for memory failures in MetricsMemoryTester . java and added a check for memory failure count in TestDockerMemoryMetrics .
deleted the JobParametersPrototype . java file to remove unused code to streamline the codebase
added securityEnabled parameter to ` MappingsTable ` and updated related methods in ` TableResolverImpl ` and ` TableResolverImpl ` to enhance security
updated the name of " swift - objc - headers " to " swift - objc - cxx - headers " in AppleLibraryDescription .
changed the DUMP _ TO _ FILE flag from true to false in TestMSPowerPointParser . java to ensure that the DUMP _ TO
updated codecNeedsEosPropagationWorkaround method to accept MediaCodecInfo instead of codecName to enhance clarity and maintainability of codec requirements
refactor producer position handling in NetworkPublication . java to improve code readability and maintainability
added a null check for dbInfo in BaseFormatter . java to ensure proper handling of no - info output options
updated SSL configuration in ConnectionProperties and added new test cases in PrestoDriverUri to improve SSL configuration and ensure proper handling of SSL configurations
added DOMOutputOptions and updated the buildDOMSubtree method call to include error output options to improve error handling and ensure proper processing of DOM elements
refactor Assert class for improved readability to enhance maintainability and maintainability of the code
added ` topic ` and ` retained ` parameter to the ` Event ` class and updated related methods in ` Event ` and ` Publish ` classes to
removed the ` @ JsonIgnore ` annotation from the ` EventSerializationTest ` class and modified the ` @ JsonIgnore ` annotation in ` EventSerializationTest `
added a new method ` getName ( ) ` to ` SqlGroupedWindowFunction ` and updated its implementation in ` SqlStdOperatorTable ` to
updated import statement from ` fastparse . core . Parsed ` to ` fastparse . Parsed ` in LatexToUnicodeAdapter . java to ensure
refactor SSL _ CTX _ CTX _ CTX _ CTX _ CTX _ CTX _ CTX _ CTX _ timeout
updated the handling of empty cps in AppModule and Watcher classes to ensure proper handling of empty cps and improve code clarity
rename CalciteSqlDialect to AnsiSqlDialect in SqlNodeConvertContext . java to improve clarity and consistency in naming conventions
updated logging level from debug to trace in FirmwareUpdateService . java to improve clarity and consistency in logging messages
added tests for handling null dates and timestamps in DateTest and GetObjectTest to ensure proper handling of null dates and timestamps in database operations
updated return statements in StringSubject , Subject , and Subject classes to improve clarity and consistency to enhance readability and maintainability of the code
added a new test method ` getRepositoryPermissionsMultipleTeams ` in ` UserModelTest . java ` to verify permission handling for multiple teams in the
added a new Java file ` Test7088020 . java ` with a method type check and a main method in ` MethodHandles . java
refactor audience handling in Saml2ResponseValidator to use a set of URIs instead of a list to improve code clarity and maintainability by
refactor afterAppAuthChanged and updateLocalCache methods in AbstractDataChangedListener and HttpLongPollingDataChangedListener to improve code readability and
replaced direct calls to ` _ stderr ` with ` null ` for ` System . err ` and ` System . err ` in ` StdErrLog
added a new constant ` SEPARATION _ ORDER ` in ` BasicEventSimulationEngine ` and modified conditional logic in ` BasicEventSimulationEngine `
updated the method call from offlineTableConfig to realtimeTableConfig in BaseBrokerRequestHandler . java to improve clarity and consistency in query optimization logic
added support for the AMS HBASE compression and split points in PhoenixHBaseAccessor and UpgradeCatalog240 classes to enhance performance by enabling
refactor SavepointV2 and FileStateHandle classes to improve code readability and maintainability
added bluetooth class handling in ShadowBluetoothDeviceTest and ShadowBluetoothDevice to ensure BluetoothClass is correctly retrieved and initialized with BluetoothClass
updated the method name from ` contains ( ) ` to ` containsProfile ( ) ` across multiple files to improve clarity and consistency in naming conventions
added null and empty check for the list in SumFunction . java and updated error handling in FEELFunctionsTest . java to ensure that the
updated method call from ` graphModel . getGraph ( ) . readUnlockAll ( ) ` to ` graph . readUnlockAll ( ) `
updated the ` coreNodeName ` variable to use ` getCoreName ( ) ` instead of ` getCoreName ( ) ` to improve code
replaced ` updateToolbar ` with ` UpdateBackpressure ` and updated ` UpdateBackpressure ` methods in ` ChatActivity . java ` to improve code
updated the TaggerParserPosTagITest class to improve clarity to enhance code readability and maintainability
added @ LuceneTestCase . SuppressCodecs ( " SimpleText " ) annotation to BaseVectorSimilarityQueryTestCase . java to enhance test coverage for
added a check for ` lastBaseTag ` and updated the ` elemtype ` check in ` Types . java ` to include ` lastBaseTag
updated ` superTriangle [ 0 ] ` and ` superTriangle [ 3 ] ` calculations in ` DelaunayTriangulatorTest `
added @ Override annotations to multiple classes to improve code clarity and maintainability
refactor AmbariJwtAuthenticationFilterTest to use JWTClaimsSet Builder instead of JWTClaimsSet to improve code maintainability
refactor state handling in StackOverflowCheckImpl . java to improve code readability and maintainability
added ShadowAbstractCursor , ShadowContentValues , and ShadowContentValues classes to the Robolectric class to enhance functionality and maintainability of the
updated the method call from ` initiateGLInstances ( ) ` to ` initiateGL ( ) ` in ` LwjglGraphics ` to improve
replaced ` bytesPerDim ` with ` comparator ` in ` BKDWriter . java ` to use ` ArrayUtil . getUnsignedComparator `
refactor locale handling in Locale . java to improve code readability and maintainability to enhance maintainability and prevent potential NullPointerExceptions
updated the return statement for mIconCurrentTextAlpha and mIconLastSetTextAlpha from mIconCurrentTextAlpha to mIconLastSetText
updated the warning message from " Confimap PropertySources does not match " to " ConfigMap PropertySources does not match " to improve clarity and
updated import statements in DefaultConfigurationTestSuite . java and TokenRevocationEndpointTest . java to use UaaJunitSuiteRunner . allSuite
replace nextToken ( ) calls with trim ( ) in GzipFilter and GzipFilterDefaultTest classes to improve code readability and maintainability by
updated the value of _ outputType from ` OutputType . WRITER ` to ` OutputType . WRITER ` to ensure consistency in
updated the default value of " nashorn . regexp . impl " to " nashorn . regexp . impl " in RegExpFactory . java
refactor ViewCapture to use FutureTask instead of LooperExecutor for better thread safety to improve thread safety and maintainability of the code
added support for handling styles in multiple classes to enhance code readability and maintainability by allowing customization of styles
added a check to ensure the parent folder does not exist before creating the parent folder to prevent potential errors when the parent folder does not exist
updated log level from 0 . 0 . 0 to 127 . 0 . 1 in the Args . java file to improve clarity and consistency in log messages
camel - 14263 : camel - jbpm - jbpm - jbpm : fix camel - jbpm - workitem
pdfbox - 218 : remove unused import and add a constructor to the JPEGUtil class to improve code clarity and maintainability
updated ` WorkModeToggleContainer ` and ` WorkFooterContainer ` classes to use ` putSameHeightFor ` instead of ` RelativeLayout ` to
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
refactor annotation writing logic in DefaultJavaPrettyPrinter . java to improve clarity and consistency to enhance code readability and maintainability by reducing duplication
added freeMemory method call in OperatorContext . java to ensure proper memory management during execution
updated string formatting in QueryByExamplePredicateBuilder , JpaPersistentPropertyImpl , and StringQuery classes to improve readability and maintainability of the
replaced ` evictionCounter ` with ` AtomicLong ` in ` ConcurrentLRUCache ` and updated ` FastLRUCache ` to use ` AtomicLong `
replaced ` runInJavaFXThread ` with ` runAndWaitInJavaFXThread ` and added a new method ` runAndWaitInJavaFXThread
replace localHost with intendedDestination in NetworkAddressManagerServiceImpl . java to simplify the code and improve readability
added imports for RuntimeEnvironment and set data root and source root in MainFrame . java to ensure proper handling of database data and source in the
added a ` MarkedClientEnabled ` constructor to the ` AdminClientBootstrapConfiguration ` and ` AdminServerBootstrapConfiguration ` classes to ensure that the
refactor TableEnvironment class to improve code readability to enhance maintainability and maintainability of the code
removed the ` setStatementTimeout ` method from ` MapperBuilderAssistant ` , ` MappedStatement ` , and ` MappedStatement ` classes to
removed the ` hangingTsTimeout ` parameter from ` JSweetTranspiler ` and ` TypeScript2JavaScriptWithTsserverTrans
added GeoLocationRequest , GeoLocationResponse , and GeoLocationRequest classes to CasCoreAuthenticationComponentSerializationConfiguration to ensure proper serialization of GeoLocation
updated assertions in ` ArtifactFilesystem ` and ` ArtifactFilesystemTest ` to use ` ArtifactFactory . createBuildArtifact ` instead of ` ImmutableSourceArtifact
added a new test method ` testJXL ` in ` ExcelParserTest ` and a corresponding test in ` ExcelParserTest ` to ensure
refactor GgbScriptTest and GeoBoolean to use a new test for concurrent modifications to improve code readability and ensure proper handling of
added a sleep condition to check if the channelInputStream is not available before returning null to ensure proper handling of input streams during connection execution
added a check for ` actual . toString ( ) ` in ` GuavaOptionalSubject ` and corresponding tests in ` GuavaOptionalSubject ` to
updated the visibility logic in BackgroundAppState and modified mMidProgress calculation in ShelfScrimView to improve accessibility and maintainability of the
added a null check for nav in MatDefEditorlElement . java to prevent potential NullPointerExceptions when nav is null
refactor drawing logic in DrawImage and GeoImage classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor ErrorOccuredInOnExceptionRoute to improve code readability to enhance maintainability and maintainability of the code
replace scheduleAtFixedRate with scheduleWithFixedDelay in AstroDiscoveryService . java to improve clarity and maintainability of the code
refactor irrUnit and pemUnit variables in SinglePassAndImageBasedLightingLogic . java to improve code readability and maintainability
added JUnit @ Ignore annotation to JmsJdbcXALoadTest and JmsJdbcXATest classes to temporarily disable the test hangs
updated import statements in GuiceFactoryTest . java for consistency to improve code readability and maintainability
added a ` systemFeatureList ` map and updated the ` hasSystemFeature ` method to return a ` boolean ` instead of a ` boolean `
refactor path handling in RCAFrameworkLoader and add a new test class RCAFrameworkLoaderTest to improve code readability and maintainability by
removed the logging statement for cancellation watch dogs in Task . java to improve code clarity and maintainability
added a null check for enumerationValues before setting it to null to prevent potential NullPointerExceptions when enumerationValues is null
refactor inline handling logic in BoxBuilder and InlineBoxing classes to improve clarity and consistency to enhance code readability and maintainability by centralizing
updated the ` collectAndSendTelemetryData ` method to use ` collectAndSendTelemetryDataAsynch ` instead of ` collectAndSendTelemetryData
updated database type handling in UpgradeCatalog260 . java for consistency to improve code readability and maintainability
updated error messages in BaseTableDataManager . java to improve clarity and consistency to enhance readability and maintainability of error messages
refactor DatasetUtilities class to improve code readability to enhance maintainability and maintainability of the code
added a key append method to the selector ID in the Matcher class to ensure proper handling of selector IDs
updated debug logging statements in GouraudShadingContext . java to improve clarity and consistency to enhance code readability and maintainability
added ALPHA _ INDEX _ HIDDEN _ WHILE _ DREAMING and ALPHA _ INDEX _ HIDDEN
refactor KeyExchange . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a check for JdbcConnection in CockroachDatabase . java to check if the connection is a JdbcConnection instance to ensure proper handling of
updated the indexing logic in ServerMainTest . java to include a conditional check for the index to ensure that the indexing logic correctly reflects the
added getMediaRecorderingMimeType ( ) method to CodenameOneImplementation , MediaManager , and Display classes to enhance media media handling capabilities for better
changed the visibility of the useShaders method from private to public in ShaderHelper and RenderTileEnchanter classes to allow external access to ShaderHelper
updated the condition for BindableFilter in DruidAdapterIT . java to include C = 13500 to ensure compatibility with C = 13500
updated the initialization of ZkStateReader from zkClientTimeout to zkConnectTimeout to improve code readability and maintainability
refactor XMPMetaParser to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a new interface ` ClientRegistrationIdentifierStrategy ` to implement the ` ClientRegistrationIdentifierStrategy ` interface to provide a mechanism to retrieve the client registration
updated the loop condition in UrlHelper . java to use a while loop to improve code readability and maintainability
updated varargsAccessDuringResolution to checkVarargsAccessAfterResolution and added a new test class VarargsAndWildcardParameterizedTypeTest to
replaced ` getTemplateProperty ` with ` borderIsNotSetOrBlank ` in ` BorderPropertyTemplate . java ` to improve code readability and maintainability
updated logging messages from info to debug in WatchConnectionManager , WatchHTTPManager , and WatchHTTPManager to improve clarity and consistency in logging messages
updated the ` attachProjectToConnection ` method to return ` HubRegisterResponse ` instead of ` Connection ` to improve code clarity and maintainability by
updated byte handling in multiple classes to use byte . toUnsignedInt instead of byte . toUnsignedInt to improve code readability and maintainability by
updated the string encoding from " Hello RocketMQ " to " Hello RocketMQ " in OpenTracingTransactionProducer . java to ensure consistency in
updated DepFiles usage from ENABLED to CACHE in AbstractCachingBuildEngineBuckConfig . java to ensure compatibility with the latest DepFiles
changed the default value of rangePannable from true to false in CategoryPlot . java to ensure that rangePannable is set to false
refactor view handling in AllAppsContainerView to use AdapterHolder . MAIN and AdapterHolder . WORK to improve code readability and
updated variable names from ` glCaps ` to ` glCaps ` in ` Visualizer2TopComponent . java ` to improve clarity and
added exception handling for CancellationException in FunctionTest . java to ensure proper handling of cancellation exceptions
changed methods from ` JarFileResource ` to ` JarResource ` in ` JarFileResource ` , ` JarResource ` , and ` JarResource ` to
refactor DefaultTrackSelector class to improve code readability to enhance maintainability and maintainability of the code
added a sleep loop for unseqMerging in LevelCompactionTsFileManagement . java to ensure thread safety when unseqMerging
updated currency comparison from AUD to BTC in BTCMarketsAdaptersTest . java to ensure consistency in currency comparisons
updated the ` Post ` and ` HibernateDTOProjectionTest ` classes to use ` PostDTO ` instead of ` Post ` to improve clarity and
refactor Unicode class for improved readability to enhance maintainability and maintainability of the code
added support for HIVE _  interactive mode in ViewRegistry . java and updated installAutoInstance method in ViewRegistry . java to enhance functionality by
updated the onComplete method call from ` delegate . onComplete ( ) ` to ` delegate . onComplete ( ) ` in ` SendHeadersFirstPublisher . java
refactor SSECustomerKey class to use JsonPOJOBuilder instead of SSECustomerKeyDeserializer to improve code readability and maintainability
added a case for BIG _ DECIMAL and updated exception handling in RangePredicateEvaluatorFactory . java to improve error handling and provide clearer error
replaced ` inner ` with ` javacProcessingEnvironment ` in ` TreeBackedProcessorWrapper . java ` and ` TreeBackedProcessorWrapper .
removed unnecessary print statements in ParameterInfo . java to clean up the code and improve readability
refactor playback state handling in PlaybackController and VideoManager classes to improve clarity and consistency to enhance code readability and maintainability by utilizing
added a Map < String , Object > to the HttpResponse object in LocalNode . java to ensure proper serialization and serialization of the HttpResponse object
added @ SuppressWarnings ( " deprecation " ) annotations to DelegatingStatement , RandomAccessFileItem , and DiskFileItem classes to suppress warnings
added a new test method ` testSelectInto ` in ` IoTDBExtendTemplateIT . java ` to verify the functionality of selecting data
refactor RTimerTree class to improve code readability to enhance maintainability and maintainability of the code
updated package names from ` com . facebook . buck . rules . graphbuilder ` to ` com . facebook . buck . core . rules . graph
updated gapX calculation from Math . round to Math . round in Letters . java and added a new TestIssue358 . java file
added client threads for the client pool and scheduler in ClientConnector . java to enhance the flexibility of the client pool and scheduler
replaced ` JScrollPane ` with ` JCheckBox ` in ` ViewResultsFullVisualizer . java ` to improve code readability and maintainability by centralizing layout
added ` phoneNumbersListDescription ` and ` phoneNumbersListDescription ` to the ` ScimUserEndpointDocs ` class to enhance user experience by
changed access modifiers of ` DeleteFiles ` , ` IndexFiles ` , and ` IndexHTML ` classes to private to enhance encapsulation and
added null checks for responseMap and improved error handling in JsonHttpPropertyRequest and URLStreamProvider to enhance robustness by preventing potential NullPointerExceptions
refactor SolrRequestHandler class to improve code readability to enhance maintainability and maintainability of the code
added a condition to check if the parallel parameter is not DEFAULT _ PARALLEL to ensure proper handling of parallel configurations
updated import statements in TestVmwareContextFactory , TestVmwareMO , and TestVMWare classes to improve code readability and maintainability
added a check for SCARD E _ NO _ SMARTCARD in the TerminalImpl class to ensure proper handling of SCARD exceptions
added import statement for LuceneTestCase . SuppressSysoutChecks in Test2BTerms . java to suppress sysout checks for debugging purposes
updated BindyKeyValuePairFactory to accept a Map < String , List < String > > > , Map < String , List < String > >
change default value of " useOwner " and " useTimeStamp " from TRUE to FALSE in JabRefPreferences . java to ensure default values are
updated the ` runAndCheckException ` method to accept ` ThrowingRunnable ` instead of ` Runnable ` to improve error handling by using a more
added null checks for via , viaContext , and pathFromSeedString in CrawlURI . java to prevent potential NullPointerExceptions during hashing
refactor SdbComponent instantiation to use ` aws - sdb ` instead of ` new ` SdbComponent ` to improve code readability and
updated version number from " 4 . 1 . 1 " to " 4 . 2 " in Jailer and LiquibaseXMLTransformer classes to
updated CERT _ VALIDITY from 7 to 90 in ProxyControl . java to increase cert validity from 7 to 90
added smoothDelta and lastDeltaUpdate variable and modified timing calculations in ThreadHandler . java to improve smooth delta calculations and ensure smooth deltas are correctly
added null checks for subScan tableSpec ( ) and tableName ( ) in HttpBatchReader and HttpScanBatchCreator classes to ensure proper handling of
added null check for the CompactionInfo client before marking the CompactionInfo client to prevent potential NullPointerExceptions when the CompactionInfo client is
updated fragment state handling in ShadowFragmentActivity and added onSaveInstanceState method in FragmentActivity to improve fragment state management and ensure proper handling of state changes
refactor job identifier retrieval in BatchResourceFactoryBean . java to improve code readability and maintainability
removed the test method ` shouldParseSimpleAndroidColorReferences ` from ` ColorResourceLoaderTest . java ` to improve code readability and maintainability by
added error handling for NoResultException in AbstractJPAQuery . java and added a test for unique result retrieval in AbstractStandardTest . java to
refactor Community initialization to use owner variable instead of cache to improve code readability and maintainability by reducing redundancy
updated the method call from ` l ` to ` LawnchairApp ` in ` DepthController . java ` to use ` Lawnchair
removed unnecessary imports for ProcessTools in LocalManagementTest . java to streamline code by eliminating unnecessary dependencies
updated method names from ` getTimeStamp ( ) ` to ` getWitnessController ( ) ` in ` EnergyProcessor ` and ` EnergyProcessorTest `
refactor ExtensionStack to handle null values and improve null checks for extensions to enhance robustness and prevent potential NullPointerExceptions
refactor FlowableFlatMap and ObservableFlatMap classes to handle cancelLED events to improve error handling and ensure proper handling of subscription cancellation logic
updated connection timeout setting in MultiGetRequest , ControllerStarter , and ServerTableSizeReader to set connection timeouts to ensure connection manager timeout is
updated the parameter name from ` AndroidPlatformTarget ` to ` AndroidPlatformTarget ` in ` AndroidPrebuiltAarDescription . java ` to improve
updated import statements for NewModelTest and ModelTest in LwjglDebugStarter . java to use ModelTest instead of NewModelTest
updated EdgeSyncCursor and BaseImageService to use TenantResourcesEdgeEventFetcher instead of SystemResourcesEdgeEventFetcher and TenantResourcesEdgeEventFetcher to
updated caching logic in CachingBuildEngine and added a new test for output hash calculation in CachingBuildEngineTest to ensure output hash is not
added a boolean parameter ` useByteBuf ` to the ` NettyConfiguration ` class and its getter / setter methods in ` NettyConfiguration `
updated the ` alterPartitions ` method to use ` Warehouse . getQualifiedName ( ) ` instead of ` oldName ( ) ` to ensure
added a message to indicate that the Vertx instance must be created with the preferNativeTransport option to ensure that domain sockets are created with the
updated the package structure of EnumTypeHandlerSerializerTest and added a new ColorTypeHandlerTest class for ColorTypeHandler to ensure proper serialization and serialization
refactor StreamEx class to improve code readability to enhance maintainability and maintainability of the code
updated the query hint for specLockTimeout in SessionImpl . java to ensure proper handling of spec lock timeouts
added a new file ` StaticLoggerBinder . java ` that implements ` LoggerFactoryBinder ` to implement the ` StaticLoggerBinder ` class to provide a
replaced direct calls to ` familyMap . put ` with ` familyMap . put ` for consistency to improve code readability and maintainability
added orientation checks for new and old orientation in TaskbarManager . java to ensure proper handling of orientations based on window configuration
replaced the use of ` getNick ( ) ` with ` unescapeXml ( ) ` in ` ChatRoomJabberImpl . java `
replaced ` store2 . longStackPut ` with ` store2 . longStackPut ` in ` StoreDirect . java ` and added a new
added @ SuppressWarnings ( " mutable " ) annotations to multiple classes to suppress warnings and improve code clarity
add a new Holder class and its getter / setter methods to the ExecutionFlowControlTest class to enhance testing capabilities for Holder functionality
refactor conditional statements in DLNAMediaInfo , FFMpegVideo , and FFMpegVideo classes to improve code
added unlimited parameter to NBWriteServlet initialization and modified the TestWriteListener constructor to accept a boolean parameter to allow dynamic access to the NB
replaced ` updateTotalDifficulty ( block ) ` with ` updateTotalDiff ( block ) ` in ` BlockchainImpl ` and added a
refactor the handling of current window seekable actions in DefaultPlaybackController . java to improve code readability and maintainability
replaced ArrayList with CopyOnWriteArrayList in NativeLibrarySupport and SecurityServicesFeature classes to improve thread safety and maintainability of the code
updated the calculation of uniform vectors in AllAppsView . java to improve accuracy of uniform allocation calculations
added a check for ` index1 ` in ` HttpURLConnection . java ` to ensure proper handling of ` key . indexOf ( ' : ' )
added PrincipalResolver annotation to CasSimpleMultifactorAuthenticationEventExecutionPlanConfiguration to enhance security by providing a specific principal resolver
replaced ObjectMapper with JSONParser and JSONParser in DelegationTokenResponse . java to streamline JSON parsing logic and improve error handling
added a method to remove trailing slashes in the builder to ensure proper handling of trailing slashes in the builder
added a ` matchesAny ` method to ` PatternsMatcher ` and its implementations in ` PatternsMatcher ` to enable matching of empty patterns
updated error message formatting in LoadIncrementalHFiles . java to improve clarity to enhance readability and maintainability of error messages
added potion handling in BlockFire . java to ensure the block is not destroyed when the potion ID is not WATER
updated the method call from ` beginOrAdjustReorderPreviewAnimations ` to ` ReorderPreviewAnimation . MODE _ HINT ` to improve clarity
updated the calculation of decreaseFactor in ContractStateCapsule , ReceiptCapsule , and ReceiptCapsule classes to improve accuracy
added handling for unread state in AsyncContentProducer , BlockingContentProducer , and BlockingContentProducer classes to ensure proper handling of unread state information
added a null check for weightField in DocumentDictionaryFactory . java to prevent potential NullPointerException when weightField is null
replaced ` FindAndReplaceStep ` with ` InfoPlistSubstitution ` in ` AppleBundle ` and added a new test in ` AppleTestIntegrationTest
updated TurretBullets , Damage , and LaserTurret classes and added a new LaserTurretEntity class to improve
updated method signatures in KucoinAdapters . java to use OrderCreateApiRequestBuilder instead of OrderCreateApiRequest . OrderCreateApiRequest . Order
added a new file ` PreParseGrammarTest . java ` to test XML grammar parsing to ensure correct grammar processing for XML grammars
added ` @ SuppressWarnings ( " doclint : missing " ) ` annotations to multiple Java files to suppress warnings and improve code clarity
added FontManager import and modified the overrideFont method call in ExtendedEditText . java to enhance font functionality by allowing customizable fonts
added null check for currentUser in AuthorizeTag . java and a test for request - no principal in AuthorizeTagTests . java to ensure
camel - 14286 : camel - cxf - jaxrs - test - cxf - cxf - cxf - jaxrs
added a method ` setUpData ( ) ` to ` JDBCGeometryTestSetup ` to ensure proper initialization of data in JDBCGeometryTestSetup
removed unused import of DumpHandler in MultipartFilterTest . java to streamline code by eliminating unnecessary dependencies
[ hotfix ] [ backend ] throw an exception if restore attempts are already cancelled in backendrestorerprocedure .
added a new flag ` createServer ` to ` RemoteJMeterEngineImpl ` and modified the ` main ` method in ` RemoteJMeterEngine
replaced String . join with StringUtils . join for anticompact ranges in CompactionManager . java to improve code readability and maintainability by using StringUtils
updated QualifiersTest and ResBundleTest to include displayMetrics in multiple classes to ensure proper handling of default qualifiers in the application
added memberId parameter to serviceHeartbeatCounters and updated method signatures in ClusteredServiceAgent and ClusteredServiceAgent to enhance cluster member ID retrieval
added a conditional check to set the total thread allocated bytes in TestThreadMXBean . java to ensure proper handling of the total thread allocated bytes in the
added conditional checks for NaN and NaN values in CustomExpression . java to ensure proper handling of NaN values and avoid potential NullPointerExceptions
refactor logging statements in AjaxListener . java to improve clarity and consistency to enhance code readability and maintainability
added methods to authenticate and authorized in the AuthenticityController and AuthenticityController classes to enhance authentication functionality by allowing users to authenticate and authorized
added assertion in LoweringPhase . java and updated next assignment logic in SnippetTemplate . java to ensure proper handling of the next node ' s
updated the logging level from ConnectionManager to HttpClientRequestImpl to improve clarity and consistency in logging behavior
replaced ` compareFalseFirst ` with ` compare ( this . localeLanguageMatchIndex , other . localeLanguageMatchIndex , and other . localeLanguage
refactor RuntimeSerialization class to improve code readability to enhance maintainability and maintainability of the code
updated geoimage handling logic in DrawImage . java to include crop dimensions for crop boxes to improve image rendering accuracy and ensure proper croping of image
refactor UnitOfWorkFactory class to improve code organization to enhance maintainability and readability of the code
added ` allAppsCellWidthPx ` and ` allAppsIconDrawablePaddingPx ` to ` DeviceProfile ` and ` Widget
[ tika - 167 ] fix tika - core - contentdisdisdisdisdisdisdisdisdisdisdisdisdisdisdis
updated URI handling in ThumbnailsCacheManager . java to use fileId instead of hardcoded url to improve code readability and maintainability by
added markSupported ( ) and reset ( ) methods in Source . java to ensure that the input input is reset before processing
added @ SuppressWarnings ( " deprecation " ) annotations to multiple classes to indicate that these classes are outdated and should not be used
added a configuration property ` server . show . error . stacks ` to ` Configuration ` and corresponding tests in ` AmbariHandlerList `
added warning logging for deleting domain IDs in ManagementServerImpl and updated account cleanup logic in AccountManagerImpl to improve error handling and provide clearer
removed unnecessary exception handling for foreign calls in SPARCArithmeticLIRGenerator . java to simplify code and improve readability
added imports for Resource , Resource , and RuleTemplateConfiguration in DecisionTableConfigurationAdapter . java to ensure compatibility with the latest Drools 5
updated the ` onRequestPurchaseResponse ` method to use ` final ` instead of ` final ` to improve code readability and maintainability by using
increased the default timeout value from 100 to 1000 in UnboundedSourceSystemTest . java to increase the test timeout time for better performance
updated import statements in ShadowAssetManager . java for consistency to improve code readability and maintainability
deleted the MrefStat . java file and MrefStat1 . java and MrefStat1 . java to clean up the codebase
updated scope handling in DependencyInsight and DependencyInsight classes to use StringUtils instead of StringUtils to improve code readability and maintainability
added error handling for no trades and bad status in BTCETradeServiceRaw . java to improve error handling and provide clearer error handling for
updated assertions in EmitterTest , UnwrapProcessorTest , UnwrapProcessorTest , and UnwrapProcessorTest to use assertThat instead of Assertions to
added a method to retrieve payment request URLs in BitcoinURI to provide a way to retrieve payment request URLs for payment protocol requests
added support for ParameterizedType in AbstractFromPropertyValueRangeDescriptor . java to enhance type handling and ensure proper handling of ParameterizedType instances
replaced the method call to setFolderInfo with a method call to setFolderInfo to improve code readability and maintainability
updated JfrBufferNodeLinkedList and JfrChunkWriter to check if the lock owner can release the lock owner to ensure proper handling of lock
added null check for null values in BasicAbstractTuple . java to ensure proper handling of null values
refactor lint configuration handling in LintUtility . java to use InputResourceUtility instead of Files . newBufferedReader for improved resource management
replace ` updateBackgrounds ( ) ` with ` updatePaddings ( ) ` in ` AppsContainerView . java ` to improve thread safety
fix a bug where the player tick be not tick when the player be not a player .
added a case for OCELOT _ BABY in PlayerEvents . java to handle OCELOT _ BABY in PlayerEvents .
added @ PublicEvolving annotations to StateTtlConfig . java to improve code readability and maintainability
added null checks for ` x ` and ` null ` in ` PreparedStatement ` , ` Array ` , and ` ResultSet ` classes to ensure proper
updated descriptions for recording descriptions in ArchiveTool . java to improve clarity and consistency to enhance readability and maintainability of the code
updated the append0 method from " \ n " to " \ n " in StringBuilder . java to improve code readability and maintainability
added a new test method ` jsonSnapshot ` to ` SiteSnapshotVariationsTest ` to ensure proper serialization and serialization format for JSON snapshots
updated the ` removeTheTxAndBlock ` method to include a ` BlockCache ` parameter and modified the ` removeTheTxAndBlock ` method
http : / / code . google . com / p / mybatis / issues / detail . apache . org / activemq / browse /
removed ` throws NoSuchBuildTargetException ` from ` BuckConfig ` , ` BuildRuleFactoryParams ` , and ` resolveBuildTarget ` methods to simplify
refactor ChangeLogIterator constructor to accept a list of ChangeSetFilter instead of a list to improve flexibility and maintainability of the code
added exception handling for guest exceptions in PolyglotLauncher to ensure proper handling of guest exceptions during execution
updated environment variable name from " OPT _ OUT _ TRACKING " to " OPT _ OUT _ TRACKING " in Ec2
added a serialVersionUID variable to AuthCacheValue and AuthenticationInfo classes to ensure compatibility with the latest security features
replaced ` getPadding ( ) . getInitializer ( ) ` with ` dropParentUntil ( ) ` in ` SpacesVisitor . java ` to
added a ` copy ` method to ` ServerCacheOptions ` and updated the ` copy ` method in ` DefaultCacheHolder ` and ` DefaultCache
added a new test method ` testHiddenBorder ` to verify that a hidden border is not visible on a floated element with overflow hidden to ensure
updated method signatures in WorkspaceAndProjectGenerator and ProjectCommand classes to use TargetGraph instead of ActionGraph to improve code readability and maintainability by
refactor KucoinExchange to use PROD _ URI instead of LIVE _ URI and improve error logging to enhance clarity and maintainability of the
updated resource path handling in SpringResourceAccessor . java to improve clarity and consistency to enhance code readability and maintainability
updated assertions in SmartHomeUnitsTest . java and SmartHomeUnits . java to use ` getUnit ( ) . toString ( ) ` instead of
updated vertexMask assignment from getMask ( ) to getMaskWithSizePacked ( ) in DefaultShader . java to ensure that the vertexMask is
deleted the Tls12SocketFactory . java file to remove unused SSLSocketFactory class to streamline the codebase
refactor TexBibEntriesResolver to utilize a stream of new entries to improve code readability and maintainability by utilizing a stream
added a method ` isRobolectricLegacyMode ( ) ` to check for legacy mode in ResourcesTest . java to ensure proper handling of
added a check for FirebirdDatabase in DoubleType . java to ensure proper handling of double PRECISION data types
added null checks for dataSource and transactionManager in DefaultBatchConfigurer . java to ensure proper initialization of DataSourceTransactionManager when dataSource is null
added a new file ` @ API ` to the ` org . terasology . unittest . stubs ` package - info . java `
updated ping command from " www . google . com " to " ping - c 5 127 . 0 . 1 " in OutputStreamTest . java to
replace ` server . beginTransaction ( ) ` with ` try ( try ) ` in ` EbeanServer _ saveAllTest . java ` to
updated the return statement from FREQS to NONE in TermQuery . java to improve accuracy in postings based on score mode
updated DataflowMetrics to use firstNonNull instead of ImmutableList for MetricUpdate in DataflowMetrics to improve performance and prevent potential NullPointerExceptions
updated import statements and refactored search logic in UserVmDaoImpl . java to improve code readability and maintainability by centralizing search builder
refactor DynamicPartitionPruner to use ExprNodeColumnDesc instead of ExprNodeColumnDesc to improve code readability and maintainability by centralizing
added a method to remove build artifacts in ArtifactFilesystem and its tests to ensure proper cleanup of build artifacts during execution
added logic to set row selection interval for the table in ThrustCurveMotorSelectionPanel . java to ensure proper handling of row selection intervals for
replaced ` assertThrows ` with ` assertThrowsArrayStoreException ` in ` Asserts ` and added a new method ` assertThrows
refactor PropertySource class to improve code readability to enhance maintainability and maintainability of the code
added a new ` name ` method to ` HttpClientBuilder ` and modified ` HttpClientConfiguration ` to accept a ` USER _ AGENT ` parameter to
refactor memory session restore method to use a computeIfAbsent method to improve code readability and maintainability by centralizing session restore functionality
updated assertions in ` IssueTest ` and ` Reporter ` classes to use ` Collections . newHashSetFromMap ` instead of ` HashSet ` to improve
added a null check for file . getContentType ( ) before creating ByteArrayDataSource to prevent potential NullPointerExceptions when content type is null
updated activation ID retrieval to use activationId instead of actiationId and added a new event class for handling activation IDs to improve user experience by
updated the calculation of the ` getAppletInfo ` method from ` Math . sin ( x ) ` to ` Math . sin ( x )
added ` updateTaskViewsSnapshotRadius ( ) ` method to ` RecentsView ` , ` TaskView ` , and ` TaskView ` to
added logging for swagger schema and revision in StaticMicroserviceVersions . java to improve clarity and maintainability of swagger schema generation
changed the return type of ` put ` method from ` void ` to ` int ` in ` ArrayMap . java ` to improve type safety and
refactor KafkaContainerCluster to use Duration instead of Stream for startables to improve readability and maintainability of the code
added retry flag and improved error handling in DefaultMQPushConsumerImpl . java to enhance error handling and improve error handling during message sending
updated headers handling in StaticServerHttpHeadersWriter and added a new test for header written with different case to improve header handling and ensure proper handling of
added ReflectUtil . checkPackageAccess ( name ) method to EventListenerList . java to ensure proper access check for package access
added custom adapter for application list in ApplicationsFragment and created a new CustomAdapter class to enhance user experience by allowing customization of applications in the
updated the applyIcon method to include a new parameter for mIcon1 , mIcon2 , mIcon1 , mIcon2 , and task
refactor DownloadTracker , DownloadManager , DownloadManager , DownloadManager , DownloadManager , DownloadManager , DownloadStateCursor , and DownloadStateCursor to
refactor insert statement handling in BaseSqmToSqlAstConverter . java to improve clarity and consistency to enhance code readability and maintainability by
updated HibernateCursorItemReaderIntegrationTests , HibernateCursorItemReaderStatefulIntegrationTests , and HibernateCursorProjectionItemReaderIntegrationTests to
added a new ` Poller ` class and modified ` SLIP _ PROT ` handling in ` DataInputStreamWithTimeout . java ` to improve
added support for ENABLED _ TS in VersionedTargetGraphMode and updated VersionedTargetGraphCache to return ToposortBasedDepsAware
refactor UpgradeCatalog150 . java to improve code organization to enhance maintainability and readability of the code
rename networkparameters . testnet3 ( ) to networkparameters . oldtestnet ( )
added a check for the list of geo elements in PropertiesViewD . java to ensure proper functionality of the selected geos list
updated OnboardingPrefs handling in AppsDividerView . java and added null check for onboardingPrefs in ActivityContext . java
replaced Apache Commons IOUtils with BufferedIndexOutput and modified HdfsIndexOutput to use BufferedIndexOutput instead of IndexOutput to improve error handling and
added a check to ensure clippingPath is not done before setting graphics to avoid potential NullPointerExceptions when clippingPath is not done
refactor local address retrieval logic in SocketChannelImpl . java to improve code readability and maintainability
updated the ` addToRow ` method to include a ` addToRow ` method and added a new ` addToRow ` method in ` TemplateTransformer `
added a new method ` isWindows ( ) ` in ` Utils . java ` and updated file rename logic in ` Wallet . java ` to
updated ALPHABET and ASTERISK _ ENCODING values from ALPHABET to CHECK _ DIGIT _ CHARACTER _ 
added a condition to check if the executed type is non - generic and non - generic and non - non - generic and non - generic to ensure
refactor error handling in IndexingChain . java to improve clarity and consistency to enhance code readability and maintainability
updated timestamp handling logic in IntervalUtils . java and added a new test for timestamp parsing in SqlCompilerImplTest . java to ensure correct handling of
updated the variable name from ` stacktrace ` to ` null ` in ` LwjglCanvas . java ` to improve clarity and consistency in
updated descriptions in AbstractGCSProcessor . java to improve clarity to enhance readability and maintainability of the code
updated the ` assertInitialized ` method to ` waitUntilInitialized ` and added a ` waitUntilInitialized ` method in ` ConnectionPoolTest . java
updated directory initialization to use " single " instead of null in CachingDirectoryFactoryTest . java and RAMDirectoryFactoryTest . java to ensure
replaced ` size ( ) ` with ` incrementFilterCount ( ) ` in ` FaultTolerantChunkProcessor ` , ` UserData `
updated ` tabbedMethod ` and ` tabbedMethod ` methods in ` FileWithTabs ` , ` T4994049 ` , and ` T
removed unnecessary check for ` TerminalFactory . get ( ) ` in ` ConsoleReaderTest . java ` to simplify code and improve readability
updated conditional checks in GetFeedbackSessionsAction . java for consistency to improve code readability and maintainability
updated condition checks in AllAppsView . java for consistency to improve code readability and maintainability
removed the ` true ` parameter from the ` initialize ( ) ` method calls in multiple classes to simplify the initialization process and improve code readability
added loadModelList ( ) and refresh ( ) methods in DataModelManagerDialog , DbConnectionDialog , and ExportPanel classes to improve user experience
replaced direct calls to ` WriteBuffer ` with a constant ` WRITE _ BUFFER _ SIZE ` in multiple classes to improve code readability and
replaced ` segmentSize ` with ` SegmentInfo ` in ` DocumentsWriter ` and added a test for noDocsIndex in ` TestIndexWriter `
refactor ArmatureModifier to use DeformVERTices for data retrieval to improve code readability and maintainability by centralizing dvert
refactor FileDisplayActivity to improve code readability to enhance maintainability and maintainability of the code
added an UnsupportedOperationException to the ApplySpecialization class to avoid filling in stack traces to improve error handling and avoid filling in stack traces
updated the calculation of line height in LabelPainter to use a mapToDouble ( ) method to ensure accurate calculation of line heights based on the
replaced ` MainThreadInitializedObject ` with ` DisplayHolder ` in ` RecentsAnimationDeviceState ` and ` RotationTouchHelper ` to simplify
added quotes handling for quoted strings in AVA . java to ensure proper handling of quotes in quotes
replaced ` Long . valueOf ( s , 16 ) ` with ` IdConversion . convertToLong ( s ) ` in ` ServletHandlerInterceptor ` and
added tests for server data processing in ServerDatagramConnectorTest . java to ensure proper handling of server data processing
updated the assertion in TestSqlEntityProcessorDelta . java to use the correct substring for the country code to improve clarity and maintainability of the code
refactor Cache class to improve code readability to enhance maintainability and maintainability of the code
replace e . setName ( " email _ verified " with " ev " in ResourceSetRegistrationEndpoint . java to improve clarity and maintainability of the
replaced ` ParallelLeafReader ` with ` ParallelLeafReader ` and updated the ` doBefore ` method in ` TestUnifiedHighlighterTermVec `
added GcodeTable imports and modified the main method in GcodeTable . java to enhance the functionality of the GcodeTable class for better
changed WEBAPP _ CONNECT _ TIMEOUT from WEBAPP _ CONNECT _ TIMEOUT to cfg . getConnectTimeout ( ) to ensure
refactored error handling in multiple classes to improve clarity and consistency to enhance code readability and maintainability
refactor TestMediaService class for improved readability to enhance maintainability and maintainability of the code
removed the static String HELP _ ABOUT _ DIALOG _ USER _ GUIDE _ LINK constant from Messages . java to streamline the
added a new file MarketsPrintTool . java with a new file MarketsPrintTool . java to facilitate tracking of market currencies in the application
refactor EndpointAddressInterceptor to utilize a regex pattern for hostname compliant components to improve code readability and maintainability by utilizing a
added ` registerSecurityKeyStart ` and ` registerSecurityKeyComplete ` methods to ` AccountProxy ` , ` HttpAccount ` , and ` Http
refactor ServerSpanThreadBinder to improve code readability to enhance maintainability and maintainability of the code
updated user objects from userPointer ( ) to userData in BulletPhysics , BlockItemSystem , and BlockItemSystem classes to ensure proper handling of
added " the _ geom " and " number " to the builder builder in Csv2Shape . java to enhance the functionality of the Csv2Shape
replaced callGasWord . longValueSafe ( ) with gasCost in VM . java and removed unused imports in Program . java to streamline
refactor Parameters class for improved readability to enhance maintainability and maintainability of the code
added a call to setIgnoreNullValues ( true ) in MultiplePiePlot . java to ensure proper handling of null values in the pie plot
refactor bundle loading logic in ResourceBundle . java to simplify code and improve readability to enhance maintainability and maintainability of the code
updated the variable name from ' _ ' to ' - ' in TaggedPdfReaderTool . java to improve code readability and maintainability
added a method ` isAllowedDuringEditing ( ) ` to ` AFreeplaneAction ` , ` ExecuteScriptAction ` , and ` Execute
added userModified property to LoginSamlAuthenticationProvider to enable user - modified login credentials
added a new file TestSealedObjectNull . java that checks for null objects to ensure proper handling of null objects in the SealedObject class
changed method names from ` onOpen ` to ` setResponse ` and ` succeeded ` in ` ConnectPromise ` and ` WebSocketClientConnection ` to
added a static final Set < Material > SNOW and POWDER _ SNOW _ BLOCK in BlockEventListener . java to ensure compatibility with server
updated CryptsyAdapters and CryptsyPublicTrade classes to use a long id instead of a String to improve code clarity and
added error handling for closing HMS connection in HiveStreamingConnection . java to ensure proper resource management and prevent potential memory leaks
updated the seed retrieval logic in GlowServer . java to use a random seed to improve performance by ensuring seed is not empty before proceeding
updated device profile sizes in DynamicGrid . java to include a device profile for Nexus 5 to improve user experience by providing a clearer device profile
added null checks for connectionObject in FlowableRefCount , ObservableRefCount , and ObservableRefCount classes to prevent potential NullPointerExceptions when disconnect
updated the instantiation of SynthContext from type . newInstance ( type ) to ReflectUtil . newInstance ( type ) to ensure compatibility with the latest ReflectUtil
added WHITESPACE _ AROUND _ TEXTUAL _ OP and WHITESPACE _ AROUND _ TEXTUAL _ OP tokens to the FormatToken class to
updated file existence check and added test cases for empty and empty files in SaveTask and SaveAndLoadTaskTest to ensure proper handling of empty files
added synchronized access modifier to method signatures in MLogWriter . java to ensure thread safety during thread safety
updated the add method to accept MutableLogEvent instead of final to ensure proper serialization and serialization of MutableLogEvent instances
updated the PADDING value from LengthLike to NonNegativeLengthLike in PrimitivePropertyBuilders . java to ensure the PADDING is non - negative
replaced user calls to ` createContext ( ) ` with ` createContext ( ) ` in multiple resource classes to improve code readability and maintainability
refactor ` buildExceptionEntries ` method to use ` Body ` instead of ` Chain ` to improve code readability and maintainability by centralizing
updated test method calls to use System . getProperty ( " line . separator " ) instead of System . getProperty ( " line . separator " ) to
updated the cache size calculation from 16 to 8 in OmniNotes . java to increase memory allocation for improved performance
added a condition to check if the finish is 0 and start is 0 in InvocationStageTrace . java to ensure proper handling of the start condition in
added a try - catch block for NullPointerException in ProvKeyManagerFactorySpi . java to ensure proper handling of NullPointerExceptions
updated ServerSocket initialization and modified port handling in UpstreamCheckUtilsTest . java to improve thread safety and ensure proper port management
refactor DockSplitPaneW to use otherParent instead of panelDim to improve code readability and maintainability
added extension checks for ` GL _ ARB _ compute _ shader _ 4 ` and ` GL _ tessellation _ shader _ 4 ` to
refactor PopulatorContext class for improved readability to enhance maintainability and maintainability of the code
added a check for the project before processing the SaveAllNotification method in FlutterReloadManager . java to prevent potential NullPointerExceptions when the project
added a method to retrieve the charset name in ZQLJobManager to ensure proper encoding handling for JSON output
added a condition to check if the argument length is zero before proceeding to prevent potential NullPointerExceptions during execution
added a constant for the fake - prefix in the FakeOSSOHeaderDecoder class to improve code readability and maintainability by encapsulating
added @ Deprecated annotation to the ` GenerateJavaSources ` and ` Config ` classes in ` GenerateJavaSources ` and ` JavaGeneratorMojo ` to
removed debug logging statements in DerbyDatabase . java to clean up the code and improve readability
updated test timeouts in CepEspTest and CepJavaTypeTest to improve test reliability and maintainability
replaced parallelStream ( ) method with stream ( ) method in PersonNameSuggestionProvider . java to improve code readability and maintainability
updated HubUpdater to check if the operation type is already set to " already set " to " already set to " already set to " already set
added support for Eclipse OpenJ9 VM versions in Constants . java and implemented a test for version information validation in TestDDRExtensionGeneral .
updated font handling in FontFamily . java and added a new DebugFonts class in DebugFonts . java to improve font handling and ensure proper
updated SSLEngineResult import and added a conditional check for HTTP version in NegotiatingServerConnectionFactory . java to ensure proper handling of HTTP version
added RateControl functionality to the MaxConcurrentStreamsTest class to ensure correct rate control behavior for concurrent stream processing
added a new file Test6741426 . java with a class Test6741426 . java that implements a BufferedImage class to implement image
updated the assertion message in CsrfAwareEntryPointAndDeniedHandlerTest to include an exception message to improve clarity of error messages for better
added null checks for dbMgdPath in HMSHandler . java to avoid potential NullPointerExceptions when dbMgdPath is not
added package declaration for S3CopyObjectRequest in S3CopyObjectRequest . java to improve code readability and maintainability
replaced ` accentColor ` with ` viewThemeUtils . files . themePreferenceCategory ` and ` accentColor ` in ` SettingsActivity . java `
updated the error message from " / temp1 " to " fileAtRoot " in TemporaryFolderUsageTest . java to improve clarity of error
removed unnecessary ` MAP _ TYPE _ INFORMATION ` and ` COLLECTION _ TYPE _ INFORMATION ` classes from ` MappingMongoConverter . java `
added validation for the " addresses " member in ClientNetworkConfig . java and corresponding test cases in ClientConnectionTest . java to ensure that the address
added a new keynectisrootca certificate to VerifyCACerts . java to enhance cert verification functionality for keynectisrootca
refactor compute methods in CompiledPipeline and WorkerLoop classes to return a int instead of void to improve performance and maintainability of the compute method
added a conditional check for popup triangle clicks in ModeToggleMenu . java to ensure that the menu is displayed only when the popup is clicked
refactor memory ttf data stream handling in MemoryTTFDataStream . java and add a new TestMemoryTTFDataStream . java file
added a new file ` FinalizerInfoTest . java ` to test GC . finalizer _ info tests for GC . finalizer _ info
updated the ` subscribe ( ) ` method in ` CachingRouteDefinitionLocator ` and ` CachingRouteLocator ` to use ` doOnNext
refactor compensation receipt handling in BurningManService to use Optional for custom address handling to improve code readability and maintainability by reducing duplication
refactor StringSubject class to improve code readability to enhance maintainability and maintainability of the code
added JUnit @ Ignore annotation to the byte array in BatchValidateSignContractTest . java to temporarily disable tests for better test coverage
updated the method name from ` setmaxInboundMetadataSize ` to ` setMaxInboundMetadataSize ` to improve clarity and consistency in method naming
updated SQL query handling in RetweetActivity . java to use replace ( " @ " , " from : " , " from : " , "
removed the conditional check for rebalance in SimulatorDiscoverer . java to simplify the code and improve readability
added a new import account method to YubiKeyAccountRegistryEndpoint and updated test cases in YubiKeyAccountRegistryEndpointTests to enhance account management
updated shader methods to use " tex " instead of " materialName " and " tex " in multiple classes to improve code clarity and maintainability by
added null checks for ` cnt ` and ` cnt ` in ` Container ` , ` SideMenuBar ` , and ` Toolbar ` classes to ensure
refactor AbiWriterProtocol class to improve code readability to enhance maintainability and maintainability of the code
added a null check for subName before setting caption to avoid potential NullPointerExceptions when subName is null
changed DATA _ FLAG _ IMMOBIBIBIBIBIBIBIBIBIBIBIBIBIBIBIBIBIBIBIBIBIBI
added null checks for sim and name in CustomExpression . java to prevent potential NullPointerExceptions when sim is not present
refactor requestBlindVoteListFromNetwork method to use missingDataRequestService . sendRepublishRequest ( ) to improve code readability and
added a new test method ` testCase4 ( ) ` in ` PostgresTest . java ` to test HikariDataSource . java ` to
updated substring logic in SubtitleUtils . java and RemoteUtil . java to use ' ' instead of ' ' to improve code readability and maintain
replaced ` LINE _ SEPARATOR ` with ` LINE _ SEPARATORS _ RE ` in ` DefaultJavaPrettyPrinter . java ` to
refactor ` currentSnapshot ` to use ` AtomicReferenceFieldUpdater ` and use ` SNAPSHOT _ UPDATER ` instead of ` AtomicReference ` to improve code
added null checks for query filters in SimpleFacets . java and added a null check for excludeSet in SimpleFacetsTest . java to
refactor ThingHelper to use GenericThingBuilder instead of ThingBuilder to improve type safety and maintainability of the builder process
updated error handling in Ktab . java to use error messages instead of printHelp ( ) to improve clarity of error messages for unknown commands
added a check for the existence of the outFile in ANGLELoader . java to ensure that the output file exists before proceeding
added support for parsing date strings in DateConverter to enhance date parsing capabilities for better user experience
added tests to validate post slug retrieval in SpringDataJPALockTest and PostRepository to ensure proper handling of post slugs in the persistence process
modified the ` canAccessDbaRecycleBin ` variable to be ` Boolean ` and added a check for ` OfflineConnection ` to improve
added a static instance of SimpleClientHttpRequestFactory in ClientRegistrations . java to set connection timeout and timeout timeout and timeout timeouts to enhance client
updated file path handling in SourceTest . java and added assertions in Source . fromFileName ( ) to improve code clarity and ensure proper handling of file
removed the ` ALT _ GRAALVM _ VERSION _ PROPERTY ` and updated the ` GRAALVM _ VERSION ` variable to simplify
added null checks for access token validity and refresh token validity in ClientAdminBootstrap . java to improve robustness by preventing potential NullPointerExceptions
updated the return statement to include a conditional check for android api version to ensure compatibility with the newer Android API versions
replaced occurrences of ` this . placeholderPrefix ` with ` placeholderPrefix ` and ` placeholderSuffix ` in ` PropertyPlaceholderHelper . java ` to improve
updated string format in Resources . java for consistency to improve readability and maintainability of the code
refactor ZkSolrClientTest to utilize CountDownLatch and AtomicInteger for collection processing to improve thread safety and maintainability of collection processing logic
removed the import of BigInteger . class in MongoMappingContext . java to streamline the code by eliminating unnecessary imports
added a condition to check if the button text is not equal to the button text to ensure that the button text is only displayed when the button is
added a conditional check for MencoderNoOutOfSync in MEncoderVideo . java to ensure proper handling of M encoder no synchronization
updated default event loop thread count from 10 to 15 in ConfigurationProperties . java and ConfigurationPropertiesTest . java to ensure proper handling of event loop threads
changed access modifiers of CountMin4 and PeriodicResetCountMin4 classes from protected to protected in multiple classes to enhance encapsulation and
updated ExternalFileField to use getFileFloatSource instead of throw UnsupportedOperationException and added a new ExternalFileFieldSortTest class for external file handling to
updated the error message from " Invalid URL " to " Connection error " in the FetcherException constructor to improve clarity and consistency in error reporting
updated event handling in OpenRocketSaver , OpenRocketSaver , and FlightDataBranchHandler to handle source IDs correctly to improve
changed the visibility of the check method from private to protected to allow subclassing of the check method
added synchronization handling for SynchronizeFileOperation in FileActivity . java to improve user experience by allowing synchronization of conflicting files
updated URL handling in ThumbnailsCacheManager to use URLEncoder for preview images to ensure proper URL encoding for preview images
added a check for the " cn1 $ infinite " property in InfiniteContainer . java to prevent potential NullPointerExceptions when the infinite container is
updated the total variable from 0 to 1 and adjusted the calculation of the total value in IntHashSet . java to improve code readability and maintainability
added a condition to check if the lock timeout is set before updating the entry to ensure that the entry updates are only updated if the lock timeout is
refactor conditional checks in SolarisAclFileAttributeView and Misc classes to improve code readability and maintainability
refactor LatLonTree to use a new array of Edge array instead of a list to improve code readability and maintainability by reducing redundancy
added exception handling for IOUtils in ZkCLI . java to ensure proper resource management and prevent potential memory leaks
updated comment string formatting in BibtexParser . java to improve readability and maintainability of the code
added strict flag handling to the Main class and its corresponding tests in MainTest . java to ensure proper handling of unknown parameters and ensure proper handling of
added a new annotation class ` pojoConstraints ` and updated the ` DefaultValidator ` and ` CustomConstraintsValidatorFactory ` classes to enhance validation capabilities for
updated the constructor call from " http " to " http4 " in HttpComponentVerifier . java to ensure compatibility with the latest http implementation
added a call to waitForThingsToLevelOut ( 30000 ) in TestCloudPivotFacet . java to ensure that the test does not wait for
removed unnecessary check for Integer . MAX _ VALUE in UBJsonWriter . java to simplify code and improve readability
refactor ApplicationTest class to improve code readability to enhance maintainability and maintainability of the code
replaced string concatenation with StringBuffer in ConnectionFactoryImpl . java to improve code readability and maintainability
replaced Type . find ( Type ) with RoboType . find ( RoboType ) for clarity to improve code readability and maintainability by
added checks for dispatch completion in RecordingDescriptorPoller , RecordingSubscriptionDescriptorPoller , and RecordingSubscriptionDescriptorPoller classes to ensure
added null checks for ` where ` and ` lookupKey ` in ` EntityProcessorBase ` and updated related methods in ` TestCachedSqlEntityProcessor
added a new file PutfieldError . java that throws IncompatibleClassChangeError to improve error handling by throwing IncompatibleClassChangeError
refactor authentication handling in ClientConnectionManagerImpl and AwsAddressTranslator to use a HashMap instead of Collections to improve code readability and maintainability
added logging statements for memtable flushing after mins and memtable operations in ColumnFamilyStore . java and Memtable . java to improve logging
updated ` Space . build ` method calls to use ` Space . SINGLE _ SPACE ` instead of ` Space . SINGLE _ SPACE
replaced the method ` encodedLength ( ) ` with ` encodedLength ( ) ` in ` Flyweight . java ` to improve code readability
refactor TestMethodResultMapBuilder to improve code readability to enhance maintainability and maintainability of the code
added imports and improved exception handling logic in FindNullDeref . java to enhance code clarity and ensure proper exception handling in the code
removed the ` lock ` field from the ` TaskLocalStateStoreImpl ` class to simplify the initialization process and improve code readability
updated return statements in Utils . java for clarity to improve readability and maintainability of the code
updated conditional checks in Utilities . java and FloatingIconView . java to use DeepShortcutView instead of ImageView . getDescendantRectRelativeToSelf
updated ` JwtIssuerValidator ` to accept ` Object ` instead of ` String ` and modified ` JwtClaimValidator ` to use ` Predicate
replaced ` buyQuickRate ` and ` sellQuickRate ` methods with ` getSellQuickRate ` and ` getSellQuickRate ` methods to
added a new ` CoverageConfig . java ` class and modified ` CoverageController . java ` to use ` CoverageConfig . java `
added a check to check if the EventBus is unregistered before registering it to ensure that the EventBus is only registered when it is not
added handling for ASCII and NFKC characters in NormalizerBase . java to ensure correct normalization behavior for non - ASCII characters
updated the condition for checking migration tasks in JobCoordinationService . java to ensure proper handling of migration tasks during migration operations
added exception handling in SpillableGroupByIT and modified SQL execution in NoOpStatsCollectorIT to improve error reporting and ensure proper error reporting
camel - 14263 : camel - CometdProducer consumer should not use contexttestsupport .
updated attribute names from ` USE _ CSS ` to ` OK ` in ` HtmlTag . java ` and ` TableTagsTest . java ` to
added a write statement to the HtmlCoreReport class to improve code readability and maintainability
updated the calculation of the ramBytesUsed assignment in DocSlice . java to ensure proper handling of scores before setting the ramBytesUsed variable
added a new ` StringHolder ` class and modified ` CustomTypeAdaptersTest ` to use ` StringHolder ` instead of ` JsonNull `
added a method to set the extra data in the MergeCoordinator class and a corresponding test in MergeCoordinatorTest to ensure proper handling of extra data in
added a static final map for parseFile and outFile in DependencyParser . java to ensure proper handling of file arguments in the DependencyParser class
refactor PathParamServerEndpointConfig class to improve code readability to enhance maintainability and maintainability of the code
refactor configuration threshold handling in DefaultMigrationAddressComparator and MigrationRuleListener classes to improve clarity and consistency to enhance code readability and maintainability by
updated method signatures in RestClientRequest , RestClientRequestImpl , and OperationGenerator classes to use partOrList instead of part to improve clarity and
updated resource paths in TwitterBootstrapUtils to use ` bootstrap . css ` instead of ` jquery . js ` instead of ` jquery . js
refactor SpanishTreebankLanguagePack to utilize a regex for category handling to improve code readability and maintainability by reducing redundancy
added a ` load ` method to ` AbstractEntityLoader ` and updated related classes to use ` UniqueEntityLoader ` instead of ` EntityLoader `
regionserverflushtableproceduremanager : use poll ( ) instead of remove ( ) instead of remove ( )
added a check for width and height in the super class in PGraphicsJava2D . java to ensure proper resize behavior when width and height are
updated the method call from ` fillPool ( ) ` to ` fillPool ( ) ` in HikariPool . java and Hikari
updated assureMatchVersion method calls to use Version . LATEST in multiple classes to ensure compatibility with the latest Lucene version requirements
added a new interface ` DefaultMethodClient ` in ` AopProxyWriter ` , ` AopProxyWriter ` , and ` ExecutableMethodWriter ` to
added a conditional check for the LA character in DRLParser . java to ensure proper handling of separator characters in the parser
updated multiple Java files related to GuavaOptionalSubject , IterableOfProtosSubject , MapWithProtoValuesSubject , and ProtoSubject classes to improve
added a check for empty payload length in WsFrameBase . java to ensure proper error handling for invalid payload lengths
updated package names from ` channel ` to ` dispatcher ` in multiple files to improve clarity and consistency in package structure
updated method names from String to Long in multiple classes to improve clarity and consistency to enhance code readability and maintainability by using a more descript
added byte arrays for width , height , and width in ImageProcessor . java to ensure proper handling of image sizes and improve readability
updated logging statement in SolrConfig and added imports in SolrConfigHandler to improve logging clarity and maintainability of the code
updated delayUntil calculation in FileSyncAdapter . java to increase delay time for automatic synchronization
updated method call from ` getLastModifiedTime ` to ` getLastModifiedTime ` in ` SegmentV1V2ToV3FormatConverterTest .
refactor path handling in QueryProcessExecutor to use a new method for adding paths to improve code readability and maintainability by centralizing path creation
updated URL handling and improved error handling in DefaultPackageScanClassResolver . java and added a test for FindByFilterTest . java to enhance URL
[ hotfix ] [ table ] add a new file ` TimestampExtractorUtils . java ` for handling accessed fields in ` tsextractors
added a new file ` SpringSecurityAuthenticationSource . java ` that implements ` LdapUserDetails ` and updated the ` getPrincipal ( ) ` method
refactor AbstractConcurrentArrayQueue , ManyToOneRingBuffer , and ManyToOneRingBuffer classes to improve code organization and maintainability
updated the minSdk annotation from LOLLIPOP to KITKAT in ShadowAlarmManager . java to ensure compatibility with newer Android versions
replaced the autoSuggestDialog method with a cached list of custom filenames in GenericViewFragment . java to improve code readability and maintainability by
added a new test method ` testNewput ` to ` TxInputUtilTest ` and updated related assertions in ` StoreAPITest ` to ensure
updated method name from ` stream ` to ` stream ` in ` MongoTemplate . java ` to improve clarity and consistency in method naming
updated zoom calculations in MapOverviewImageMouseHandler to use float precision instead of double precision to improve accuracy and accuracy of zoom calculations
added similarity parameter to KNearestNeighborClassifier constructor and updated classification tests accordingly to improve accuracy of classification checks and enhance accuracy in classification tests
replaced SolrQueryParser with ConstantScoreRangeQuery in LukeRequestHandler . java to simplify query parsing and improve code clarity
updated variable name from ` toString ( ) ` to ` getReason ( ) ` in ` LowResourceMonitor . java ` to ensure proper handling of
refactor package - info . java files for improved readability to enhance maintainability and maintainability of the code
removed the requestMtu request methods from ShadowBluetoothGattTest and ShadowBluetoothGatt classes to streamline the request process
fix testpayloadnamerequestwrapper . testpayloadnamerequestwrapper . testpayloadnamerequestwrapper . testpayloadnamerequestwrapper . testpayloadnamerequest
added logging for UnsatisfiedLinkError in VoskSTTService . java to improve error handling for UnsatisfiedLinkError
replaced HashMap with ConcurrentHashMap for mProcessingChains in ChannelProcessingManager . java to ensure thread safety during processing
updated resource names in Resources _ ja . java for consistency to improve code readability and maintainability
updated comparisons in JDBCTypeMapping and JDBCTypeMappingTest to use 1 instead of 0 to improve code readability and maintainability
added synchronization to the addPlayer and removePlayer methods in GenshinScene . java to ensure thread safety during player removal
refactor TerminalView to utilize AccessibilityStateTester and improve accessibility handling to enhance code readability and maintainability by utilizing AccessibilityState
refactor command behavior checks in MenuBar and SideMenuBar classes to improve code readability and maintainability to enhance maintainability and maintainability of command
replaced Disposable with Disposable in PoloniexManualExample . java and added disconnect reason handling in WampStreamingService . java to improve code clarity
added error handling for unexpected contract type errors in UpdateSettingForEnergyLimitContractActuator . java and updated assertions in UpdateSettingForEnergyLimit
refactor URL handling in PostmanJsonBuilder to use JavaUrl instead of url1 to improve code readability and maintainability by centralizing URL
added methods to retrieve and set the namespace prefix ref in SoapJaxbDataFormat to provide a way to retrieve and set the namespace prefix reference
added a static final long ONE _ MINUTE _ MILLIS and modified assertions in TestRange . java to improve code readability and maintainability by
added security handling in BasicAuthIntegrationTest and ZkStateReader classes to ensure proper handling of HTTP servers in the Solr client
added a PriceFeed parameter to the TradesChartsViewModel constructor and updated its constructor to include it to enhance the functionality of the TradesChart
updated configuration handling in PhoenixHBaseLoaderIT , PhoenixHBaseStorerIT , and PhoenixHBaseStorerIT to ensure consistency in configuration
replaced ` from ` to ` end ` with ` length ` in ` NativeString . java ` to improve code readability and maintainability by using
added a new file downloading functionality to the FileDownloader class to enhance file downloading functionality for better user experience
added a setLength ( logLength ) method to the RandomAccessFile in MappedRawLog . java to ensure proper resource management and prevent potential memory leak
added a method ` checkIfRegistryRunning ` to ` TestLibrary ` and implemented a ` deleteFileIfExistsWithRetry ` method in ` FileUtils `
removed unused imports from EditTest , Quick3dMain , and TextureTest classes to streamline code and improve readability
added @ SuppressWarnings ( " rawtypes " ) and @ SuppressWarnings ( " rawtypes " ) annotations to multiple Java files to suppress warnings and
added a null check for instances in TraceFeignContext . java to prevent potential NullPointerExceptions when instances are null
added support for setting isolation level to TRANSACTION _ READ _ COMMITTED and TRANSACTION _ SERIALIZABLE in multiple connection classes to
added a ` getTransactionAttribute ` method to ` AbstractStepFactoryBean ` and modified ` SkipLimitStepFactoryBean ` to use ` DefaultTransactionAttribute
refactor CasManagementWebAppConfiguration to use DirectCasClient instead of CasClient to improve code readability and maintainability by centralizing
removed menu items from ListFragment , NavigationDrawerFragment , and NavigationDrawerFragment to streamline menu functionality and improve user experience
updated method names from ` cancel ` to ` cancelMatchingOperation ` in ` DownloadFileOperation ` , ` cancelMatchingOperation ` , and ` observe
pdfbox - 142 : fix bug in pdfbox - 143 , pdfbox - 143 , pdfbox - 143 , pdfbox
updated the ` onFontSizeChanged ` method to use ` TypedValue . COMPLEX _ UNIT _ PX ` instead of ` size ` to
added a condition to check if the fact is valid before modifying the flow flow to ensure that the flow flow is only modified when the fact is
refactor DistBuildTargetGraphCodec , ConvertingPipeline , and VisibilityPatternParser classes to improve code organization and maintainability
updated the return statement in ArrayListSpanAccumulator to use a new ArrayList < > instance to improve performance by using a new ArrayList < > instance
refactor LockService initialization to simplify lock management and improve code readability to enhance maintainability and maintainability of the code
added a setter method ` setRevision ` to ` MicroserviceVersions ` and modified the ` TestInstanceCacheChecker ` to set the revision to ensure
refactor foreignKey handling in TableRetriever and TableRetriever classes to improve code readability and maintainability
added a new test class ` S3ComponentConfigurationTest ` to test the configuration of ` aws2S3Component ` to ensure that the configuration
removed the trade history parameter from the getBitstampUserTransactions method and added a method to retrieve user transactions in BitstampAccountServiceRaw to
added error handling for NoSuchComponentException in BlueprintContainerRegistry . java to ensure proper handling of NoSuchComponentException during component creation
changed the ` push ` method from ` void ` to ` boolean ` and updated the ` push ` method to return a boolean instead of void to
refactor LegacyAddressTest to use BufferedReader for reading LegacyAddress to improve readability and maintainability of legacy address parsing logic
changed the access modifier of ` findDropTargetAt ` method from public to public to allow access to ` findDropTargetAt ` method
refactor notification handling in NotificationsActivity to improve code readability and maintainability to enhance maintainability and maintainability of the code
http : / / issues . apache . org / activemq / browse / amq - 2632 - close the channel when close the channel
refactor LDAP password policy handling to use StringUtils . isEmpty ( ) instead of null to improve code readability and maintainability by reducing redundancy
refactor DefaultAnnotationEngine and Stubber classes for improved clarity to enhance maintainability and readability of the codebase
added a @ Ignore annotation to the MemoryManagerTest class to temporarily disable the test for the PHOENIX - 2840 test
nifi - 132 : add timezone property to about dto .
updated assertions in Splitter . java and StorageService . java for consistency to improve code readability and maintainability by using a more descriptive
refactored the initialization of child and bscc in BeanContextSupport . java to improve code readability and maintainability
added synchronization for the active circuit list in CircuitManagerImpl and ConnectionCacheImpl classes to ensure thread safety during circuit management
updated exception handling in ShaderProgram . java to use IllegalStateException instead of GdxRuntimeException to improve clarity and maintainability of exception handling
[ flume ] add getter and setter methods for sink and source in pollablesourcerunner and pollablesourcerunner
updated logging level from ' this ' to ' info ' in FastBindLdapAuthenticationHandler . java to improve clarity and consistency in logging messages
refactor ContainerOrderFocusTraversalPolicy class for improved readability to enhance maintainability and maintainability of the code
updated method names from double to int in multiple classes to improve clarity and consistency in method naming
updated the constructor name from ` CasRiskBasedAuthenticationEvaluationStartedEvent ` to ` CasRiskBasedAuthenticationStartedEvent ` to improve clarity and
refactor connection handling in SchemaCrawlerMain and Executable classes to improve code readability and maintainability to ensure proper resource management and prevent potential resource leak
refactor SSL protocol handling to use PREFERED _ TLS _ PROTOCOL and add a new ConnectionFactoryDefaultTlsVersion class to improve compatibility
updated exception messages from " labels " to " metadata buffer " in CountersManager . java to improve clarity and consistency in error reporting
refactor audio queue handling logic in MediaManager . java to improve code readability and maintainability
removed unnecessary conditional check for debug logging in HttpConnection . java to simplify logging and improve code readability
added a ` isTransient ( ) ` method to ` JpaPersistentPropertyImpl ` and modified ` JpaPersistentPropertyImplUnitTests ` to
updated stack version handling in UpgradeResourceProviderTest to include stack IDs for HDP - 2 . 0 and HDP - 2 . 0
updated ` eval ` methods to return ` Object ` instead of ` Symbol ` and ` String ` in ` TruffleVM . java ` to improve
changed the visibility of the isBinaryType method from private to public in SampleResult and Proxy classes to allow access to the method from other classes
updated TEZ _ DYNAMIC _ PARTITION _ PRUNING _ MAX _ DATA _ SIZE from parition to partition to
removed the ` findProblem ` method from ` JavaEditor ` and modified priority handling in ` JavaProblem ` to streamline the code by eliminating unnecessary
updated the return type of ` DEFAULT _ OFFHEAP ` to ` DEFAULT ` instead of ` DEFAULT _ OFFHEAP ` to ensure
updated line separators in TableWriterTest . java to use System . getProperty ( " line . separator " ) instead of System . getProperty ( "
refactor DebugHelper class to improve code readability to enhance maintainability and maintainability of the code
added ` ownsTexture ` property to ` ParticleEffect ` and ` ParticleEffect ` classes to ensure proper handling of texture ownership
added LDAP credentials to the HiveConf . java file to enhance authentication capabilities by providing additional LDAP queries
updated import statements in DatacatalogGetEntry , DatacatalogLookupEntrySqlResource , and DatacatalogSearch classes to improve code clarity and maintainability by
refactor InputMethodManager handling in DetailActivity to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a test to validate data table type conversion in DataTableTypeRegistryTableConverterTest to ensure correct type conversion for primitive and object types
updated the size calculation in TestFileSystem . java to increase the size of the memFS file to ensure proper resource management and prevent potential memory leaks
updated error messages in ContentTypeManager . java to improve clarity and consistency to enhance code readability and maintainability
refactor dropSequences method implementations in multiple database classes to improve code readability and maintainability
added a null check for status in MainWindow . java to prevent potential NullPointerExceptions when status is null
added a variable ` f ` to the ` createField ` method in ` DocumentBuilder . java ` to ensure proper initialization of the ` binaryField `
added imports for MapModel and LogicalStyleModel in HierarchicalIcons . java and updated property checks in HierarchicalIcons . java to
added a test method ` findOneAfterUpsertForNonExistingObjectReturnsTheInsertedObjectReturnsTheInsertedObject ` to ` MongoTemplateTests `
replaced direct calls to ` ( high + high ) > > 1 ` with ` ( high + high ) > > 1 ) > > 1 `
added a method ` recordLaunch ` to ` AppsCustomizePagedView ` , ` Launcher ` , and ` Stats ` classes to
added Graphics2D createGraphics ( ) and dispose ( ) in JavaSEPort . java to ensure proper resource management and prevent potential memory leaks
refactor code for consistency and clarity in InstructorFeedbackResultsPageData . java to improve readability and maintainability of the code
added a check for zero inventory IDs in Inventory . java and added a new test for inventory ID generation in InventoryTest . java to ensure that
added a conditional check for the found state before proceeding to avoid potential NullPointerExceptions when the found state is not found
added null checks for returnType in multiple parser visitor classes to improve code readability and maintainability
added null check for blended tiles in TileMapRenderer and TiledLoader to avoid potential NullPointerExceptions when blended tiles are not available
removed multiple java . util . concurrent classes from Probe . java to streamline code and improve maintainability
updated the ` getArea ` method to include a null check for ` last ` and added null checks for ` last ` in ` IfcTools
replaced the initialization of ` lockOnSync ` with ` this ` in ` Throttler . java ` to simplify the code and improve readability
replaced ` PipeEventHandler ` with ` super . addActions ( ) ` in multiple classes to improve code readability and maintainability by reducing duplication
updated the timeout value from 1000ms to 1000ms in ZkControllerTest . java to allow for more time for the ZkController initialization
added unit tests for client parameters in TokenMvcMockTests to ensure correct handling of client parameters in the authentication process
added brokenOffsetsConstructors and brokenOffsetsConstructors to TestRandomChains . java to ensure proper handling of broken offset checks
removed junit . Ignore import from RandomPlaneTest . java to clean up the code and improve readability
updated memory handling in LLVMX86 _ 64BitVAStart . java to use Integer . toUnsignedLong instead of Integer . toUnsignedLong
updated the implementation of ` btCollisionObjectArray ` and ` btRigidBody ` to use ` btCollisionObject . getInstance
added a new property ` BUILD _ COPYRIGHT ` and updated related methods in ` AboutDialog . java ` and ` AboutDialog . java
added a method ` getDistributedObjects ` to ` JetClientInstanceImpl ` and created a new test class ` JetClientInstanceImplTest ` to
added logging statements for component and inertia and inertia in FinSet . java and MassCalculatorTest . java to enhance debugging capabilities and
updated memory pool size from TOTAL _ MEMORY to MAX _ MEMORY in SmartDexingStep . java to improve memory management by using
updated catch block from MetadataException to Exception in StandaloneSchemaFetcher and CreateAlignedTimeSeriesPlan classes to improve error handling and ensure proper handling of
updated the name of the GENESIS _ OUTPUT _ PREFIX from " Co - founder - " to " Bisq co - founder "
refactor JsonLoaderTest to use ` json ( string ) ` instead of ` json ( string ) ` to improve code readability and maintainability
added a conditional check for tableSize in ObjectSet . java to ensure proper handling of required table sizes
updated import statements and added null checks for dataScale in ColumnSnapshotGenerator . java to improve code clarity and ensure proper handling of data scale values
updated ` xctool ` and ` xctest ` annotations to ` Optional < String > ` instead of ` @ AddToRuleKey `
refactor content handling in FileHelper and TextHelper classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a new constant ` StyleWithMultipleAttributes ` in ` ShadowThemeTest . java ` and updated related tests in ` ShadowThemeTest . java
updated condition checks in HSSFWorkbook and TestHSSFWorkbook to use size ( ) instead of - 1 in HSSFWorkbook to ensure
replaced primary color reference from ` primaryColor ` to ` elementColor ` in ` ManageAccountsActivity . java ` to improve code readability
added null check for replyHandler in DefaultEventBus and updated path resolution logic in DefaultPlatformManager to improve robustness by preventing potential NullPointerExceptions
added configurations for ` binaryCollationName ` and ` SQLPredicateFragment ` in multiple database types to enhance database handling capabilities for SQL queries
added a default method ` whenType ` to return a Optional < T > in ` Tree . java ` to ensure that the ` whenType `
refactor navigation handling in ItemLauncher to use a new method for obtaining the user view destination to improve code readability and maintainability by centralizing
refactor Response . temporaryRedirect method to use temporaryRedirect method to improve code readability and maintainability by using a temporaryRedirect method
[ hotfix ] [ kinesis ] add check for non - serializable deserialization schema in flink kinesisconsumer
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
replace sleep with try - finally blocks for resource management to ensure proper resource management and prevent resource leaks
updated method names from ` setIconAndDimTransitionProgress ` to ` setIconsAndBannersTransitionProgress ` in multiple files to improve clarity and consistency
added a method ` read ( EndPoint endPoint , Buffer buffer ) ` to ` read ( EndPoint endPoint , Buffer buffer ) ` to
replaced ` BufferUtil . allocate ( 32 ) ` with ` ByteBuffer . allocate ( length 11 ) ` in ` ABCase1 _ 2 . java
refactor prepareStreamsToUpload method to return a boolean instead of void to improve code clarity and prevent potential NullPointerExceptions
updated order comparison logic in AbstractConfigLoader and TestMicroserviceConfigLoader to use Integer . compare for consistency to improve code readability and maintainability
added a new file ` PicOfDayAppWidget . java ` with a new class ` PicOfDayAppWidget . java ` to provide a
[ hotfix ] [ internallbvm ] set default offeringid to 0 in internallbvmmanagerimpl
updated HiveParserCalcitePlanner to use HiveRelOptUtil . splitHiveJoinCondition instead of RelOptUtil . splitJoinCondition to improve
added @ Deprecated annotations to multiple Java classes to indicate that these classes are outdated and should no longer be used
added credentials and password options for remote jmx in NodeToolCmd . java to enhance security by providing credentials for remote jmx
removed unnecessary initialization of BytesRef in Stemmer . java to streamline code by eliminating unnecessary initialization
updated widget handling logic in AppsCustomizePagedView . java to improve clarity and consistency to enhance code readability and maintainability by reducing
added a method ` getViewForThumbnail ( ) ` to return the ` EuclidianView3D ` instance in ` Ggb
updated rotation calculations in GcodeRenderer . java to use a minimum value of 180 instead of 180 to improve accuracy of rotation calculations
added workspace directory option to the DAEMON option and modified TerminalClient to set workspace directory based on configuration to enhance user experience by providing a workspace
updated the file path from " options . apt " to " options . html " in CLIManagerTest . java to ensure compatibility with the new
updated ScimUtilsTest to include PollutionPreventionExtension and ExtendWith in ScimUtilsTest . java to enhance test coverage and
updated the ` confimAccess ` method to use ` Map < String , Object > ` instead of ` AuthorizationRequest . class ` to improve clarity
refactor test assertions in HibernateIT . java to use assertTrueEventually to improve code readability and maintainability by centralizing test assertions
refactor EventBusHook class to improve code readability to enhance maintainability and maintainability of the code
refactor MultiPaintEventTest . java to improve code readability to enhance maintainability and maintainability of the code
removed the final modifier from the mNewScale assignment in WorkspaceStateTransitionAnimation . java to simplify the assignment of mNewScale
refactor SyncFactory class to improve code readability to enhance maintainability and maintainability of the code
added uniqueKey field handling in LukeRequestHandler . java to ensure uniqueKey fields are correctly added to the database
updated border color handling in BorderEditor , EditableResources , EditableResources , and Border classes to use roundBorderColor instead of strokeColor and
updated import statements in Assert . java and added CompilerAsserts . neverPartOfCompilation ( ) in BinaryParserException . java to ensure proper handling
[ hotfix ] [ test ] use declarativeslotpoolbridgebuilder instead of slotpoolimpl
added logging statements for pending request handling in GatewayRSocket , GatewaySocketAcceptor , and PingPongApp classes to improve logging clarity and ensure
updated RecentChatFragment to extend Toolbar . OnMenuItemClickListener for displaying recent chats to enhance user experience by allowing users to navigate from the Recent
updated InfoDropTarget and UninstallDropTarget to extend UninstallDropTarget instead of ButtonDropTarget and UninstallDropTarget to enhance functionality by
replaced calls to ` add ` with ` push ` in multiple classes to simplify scope handling and improve code readability
updated API URLs from " test . wikipedia . org / w / api . php " to " commons . wikimedia . org / wiki
updated the ` setIndex ` method to use ` setIndex ` instead of ` new Long ( start ) ` and ` end ` in ` 
updated method calls from ` Collections . sort ` to ` Collections . sort ` across multiple classes to improve code readability and maintainability by centralizing
added a new array of date formats to the FormatData _ HR . java file to enhance date formatting capabilities for better user experience
added a call to clearFocus ( ) in DetailFragment . java to ensure focus is cleared when the view is clicked
refactor spinner description selection logic in DescriptionsAdapter and SpinnerLanguagesAdapter to improve code readability and maintainability
updated timezone names from " Summer Time " to " WSDT " in various TimeZoneNames classes to improve clarity and consistency in naming conventions
added native methods to register global , weak , and accessFieldsViaHandle in FastGetField . java to enhance functionality for handling global and weak fields
added null checks for fieldSchema and defaultType in ReflectData and TestReflect classes to ensure proper handling of null values and prevent potential NullPointerExceptions
increased the amount of queue size in the blocking bar format in SedaBlockWhenFullTest . java to improve performance by reducing the amount of queue
added a null check for resourceResourceClass before remaping resource remapRClass to prevent potential NullPointerExceptions when resourceResourceClass is
added constructors for HapiFhirDerbyDialect , HapiFhirMariaDBDialect , HapiFhirMySQLDialect
added connection closing logic in HttpProducer . java and created a new HttpExplicitConnectionCloseTest . java file to ensure proper handling of connection closing logic
updated the timeout value from 60000 to 120000 in BasicDistributedZkTest . java to ensure consistent timeout values for better readability
added a assertion to verify the status of the count ( * ) ticket in BaseReservationFlowTest . java to ensure that the count ( * )
refactor Parser class for improved readability to enhance maintainability and readability of the code
refactor CasProcessingFilter class for improved readability to enhance maintainability and maintainability of the code
replaced occurrences of ` org . thymeleaf . dom . NestableNode ` with ` document . getFirstElementChild ( ) . getFirstElement
added a new enum ` TestdataObjectEnum ` and updated ` LookUpStrategyIdOrFailTest ` to use ` ImmutableLookUpStrategy `
updated metaPortStart and dataPortStart in ClusterEnvBase . java and added waitingToShutDown method in ClusterNode . java to improve
updated log level from warn to info for no such field in ELContextCleaner . java to improve clarity of log messages when cleaning cached beans
set the application / octet - stream content type to application / octet - stream to allow users to specify the application / octet - stream
added a method ` getQueueSize ( ) ` to ` LazyTraceThreadPoolTaskExecutor ` and created a new ` LazyTraceThreadPoolTaskExecutor `
[ flink - 14646 ] [ geometry ] fix distance calculation in distanceoperation ( )
changed the ` required ` variable from ` required ` to ` requiredLabel ` in ` AbstractUITag . java ` to improve clarity and consistency in
replaced the ` next ( ) ` method with ` updateProgress ( ) ` in ` PurgingPartitionIterator . java ` to streamline the iteration process
added a method ` getAsUnescapedPath ( ) ` to ` SchemaPath ` and modified ` VectorUtil ` to use ` getAs
added abstract methods for getHeight ( ) , getWidth ( ) , and getWidth ( ) in BaseMonochromeBitmapSource . java to enhance the functionality of
added a check for ` vertices . length ` before setting ` localVertices ` to ensure that ` vertices ` length is at least 3 points to avoid
replaced ` new ObjectMapper ( ) ` with ` newDefaultInstance ( ) ` in multiple test files to improve code clarity and maintainability by centralizing
added a null check for the ` coeff ` parameter in ` GeoImplicitCurve . java ` to avoid potential NullPointerExceptions when ` coeff ` is
updated Unicode character reading logic in ExternalNameRecord and added a new test for unicode name parsing in TestExternalNameRecord to ensure correct handling of Unicode
updated descriptions in AbstractJMSProcessor . java to improve clarity to enhance readability and maintainability of the code
added a boolean flag ` returnLoginPrompts ` to ` LoginInfoEndpoint ` and updated test cases in ` LoginInfoEndpointTests ` to ensure
added a condition to remove the listener in AbstractController . java to ensure proper removal of listeners when the listener is not in the controller
added actionToggleSpin action to the PieChartActivity to manage the spin effect of the chart
refactor error handling in CitrixResourceBase . java to improve clarity and consistency to enhance code readability and maintainability by centralizing error
added a check for namespace quotaManager before processing all enabled tables in HMaster and NamespaceAuditor classes to ensure that the table does not have quota
updated import statements and added a resize method in AndroidInput . java to improve code readability and maintainability by eliminating unnecessary imports
replaced ` @ VisibleForTesting ` with ` @ VisibleForTesting ` and added a new method ` propertyValuesOf ` in ` PropertySupport ` to improve
added JUnit @ Ignore annotation to ClientMapNearCacheTest . java to temporarily disable tests that are always failing and blocking
updated bounding box calculation in SubTileHopperhock . java to ensure consistent bounding box calculation for better performance
added support for saml authentication dialogs in SsoWebViewClient . java to enhance user experience by allowing users to login and passwords
refactor testStressIndexing2 to use TermQuery for better readability and maintainability to improve code readability and maintainability by central
added JUnit Ignore annotation to UpsertKafkaTableITCase . java to temporarily disable tests related to FLINK - 22559
updated the calculation of typeList from ` dtohl ` to ` computeIfAbsent ` in ` ResTable . java ` to improve code clarity
added objectMapper configure for ACCEPT _ SINGLE _ VALUE _ AS _ ARRAY in DefaultEntityMapper to enable serialization of SINGLE _ VALUE as
updated localization message in VersionChangeLogs . java to include UK , UK , and SL to enhance user experience by providing more detailed localization information
updated the SHORTCUT _ CATEGORIES array to use ResourceUtils . getString ( ConfigurationLogic . class , " CL . app
renamed ` visitExpressionInstanceOf ` method to ` visitRelExpressionInstanceOf ` and added a new ` visitRelExpressionInstanceOf ` method to improve clarity and
nifi - 118 add mime . type attribute to gethttp ( flowfile )
updated provenance assignment in BaseHapiFhirDao and ResourceHistoryTable to use historyEntry . toProvenance ( ) in ResourceHistory
replaced exit and done button with done button in HelpActivity and SearchBookContentsActivity to improve user experience by providing more informative feedback when searchable
refactor NatsConfiguration class to improve code readability to enhance maintainability and maintainability of the code
updated the ` invalidateStalePartition ` method to include a ` MetastoreContext ` parameter and modified the ` PartitionNameWithVersion ` method to enhance
replaced BoundedFifoBuffer with CircularFifoBuffer and updated Timer initialization in ViewResultsFullVisualizer . java to improve buffer handling and ensure
updated drawable drawable names from ` ic _ group ` to ` ic _ chat _ bubble ` in multiple classes to improve code clarity and maintainability by
updated variable names from ` getLong ` to ` getLongVolatile ` in ` BroadcastReceiver ` and ` BroadcastReceiverTest ` to improve clarity and consistency in
updated ` MocksCreationTest . java ` to use ` _ combine _ mock _ name _ and _ merge _ mock _ name _ and _
added a new constant DATA _ SOURCE _ NAME to CSVThirdEyeDataSource and updated the generateDetectionConfig method in YamlDetectionConfigTranslator to
updated awaiter timeouts from 10 seconds to 30 seconds in Basic . java to improve readability and maintainability of the awaiter method
removed the ` BuildSlaveFinishedStatusEvent ` class and updated the ` DistBuildRunCommand ` and ` DistBuildSlaveEventBusListener `
added UTF - 8 character encoding to the templateUuidName string in VmwareStorageManagerImpl . java to ensure compatibility with UTF - 8 encoding
added a new test method ` withSubmitterGroup ` in ` WorkflowItemRestRepositoryIT ` and a related test in ` CollectionBuilder ` to
updated classpath handling in ClassLoaderSupportImpl . java to use distinct methods to ensure compatibility with distinct classpath files
removed the method ` isBoxedPrimitive ` from the ` Unbox ` class to simplify the code by eliminating unnecessary code
updated arguments handling in ` SpecificCompilerTool ` and added a new test for ordering of flags in ` TestSpecificCompilerTool ` to ensure correct
added a null check for the tbl before deleting it in HiveMetaStore . java and updated related tests in TestHiveMetaStore . java to
updated async execution threads and thread pool sizes in HiveConf and SessionManager classes to improve error handling and provide clearer feedback when asynchronous threads are
added a try - catch block to dismiss the dialog with a try - catch block to prevent potential exceptions when dismissing the dialog
added EXECUTE _ TASK _ ROLE and EXECUTE _ TASK _ ROLE to UpgradeResourceProvider and updated
added a call to the currentConfInfo variable in OperationSetTelephonyConferencingSipImpl . java to ensure proper handling of
added a method ` clearEntries ( ) ` to ` FlutterLogTree ` and updated the ` clearEntries ( ) ` method in ` Flu
added check for output shutdown and input shutdown in ChannelEndPoint . java to ensure proper handling of shutdown sockets based on socket state
refactor SetNullableGenerator class to improve code organization to enhance maintainability and readability of the code
camel - 9080 : camel - example - reportincident : fix camel - example - reportincident and camel - example - reportincident
removed unused imports and updated HTTP request handling in NettyRoutingFilter . java and FormIntegrationTests . java to streamline imports and improve
added API operation annotations to multiple service classes to enhance the functionality of API operations in the service
updated lifecycle listeners handling in Lwjgl3Application and Lwjgl3Window classes to improve thread safety and ensure proper management of lifecycle
updated the FG _ FK color from 90 to 200 in UIUtil . java to ensure the FG _ FK color reflects the current
removed the JavaScriptObject import from SoundManager . java to set audioFormats . mp3 . required to false to ensure audioFormats are not
replace ` assertBuilt ( ) ` with ` getBuiltIndexes ( indexName ) ` in ` SecondaryIndexManagerTest . java ` to improve code
added support for the PMD version in the PMD plugin and its corresponding components in GeneralPreferencesPage to enhance the functionality of the PMD plugin
[ hotfix ] [ test ] fix checkstyle violation in testcase
refactor MediaFormatUtil class to improve code organization to enhance maintainability and readability of the code
added a method ` isCellEditable ( int rowIndex , int colIndex , int rowIndex , int colIndex ) ` to ` GeneralTab ` class
added a method ` isOnlyPrintCommands ( ) ` to ` AbstractUnusedDependenciesFinder ` and updated message formatting in ` DefaultJavaLibraryRules `
added a static int variable ` tmpCount ` to the ` VocalTractModifier ` and updated the ` VocalTractScalingProcessor `
updated import statements for BaseScalarUdfTest and TestGenericUdfTest to use BaseScalarUdfTest instead of BaseScalarUdfTest
added hashCode ( ) method to UaaAuthenticationDetails and its implementations in UaaAuthenticationDetails to improve code clarity and maintainability by centralizing
replaced ` SkeletonControl ` with ` SkinningControl ` and updated related imports in ` TestSkeletonControlRefresh . java ` to improve animation
updated method names from NodeFilter to NodeCountFilter in NodeUtil . java to improve clarity and consistency in naming conventions
updated the condition for checking sync block sizes in NodeImpl . java to ensure consistency in checking sync block sizes
replaced setState ( 365 ) with getFloatType ( 366 ) in DebugExpressionParser . java to improve code readability and maintainability by
updated dependency handling in ExcludeDependency . java to check if the scope is not empty to ensure that dependencies are only processed when the dependency scope is
replaced ` tmp ( ) ` with ` dst2 ( v ) ` in ` Vector . java ` to improve code readability and maintainability by
changed the ` args ` variable from ` null ` to ` empty ` { } ` in ` GridHubConfiguration . java ` to ensure proper initialization
updated the ` getLinkerArgs ` method to accept a ` ImmutableList < String > ` parameter and added a new ` ImmutableList < String > `
updated input groups from " xlxs " to " xlsx " and " appveyor " in multiple test files to improve clarity and
updated HiveConf and GenericUDTFGetSplits to include dagName and externalDagName in TaskExecutorService and GenericUDTFGet
removed unused import of File in TileAtlas . java to streamline code by eliminating unnecessary dependencies
refactor ` EscapeProcessingOutputStream ` to use ` AtomicBoolean ` instead of ` ByteBuffer ` and improve error handling in ` GradleDaemonExecutor ` to
updated the ` validateQuery ` method to accept ` Object . . . arguments ` instead of ` String . format ` to enhance error handling by providing
updated INDEX _ VERSION and INDEX _ VERSION from 1 to 2 and refactored getTree method calls in LuceneExecutor . java to improve code clarity
[ flink - 11 - kryo ] [ runtime ] add test for default kryoregisteredclassesdid not change
added a null check for configType in BlueprintConfigurationProcessor and updated test cases in BlueprintConfigurationProcessorTest to ensure proper handling of null values
refactor boolean handling in MetaStoreDirectSql to use BooleanUtils to improve code readability and maintainability
added a call to hideCustomizationDrawer ( ) in Launcher . java to ensure the drawer is properly displayed in the application
added a new constant TV _ KEY _ WARNINGS and modified conditional checks in TermVectorComponent . java to improve code readability and maintainability by
added a warning log when optimistic types are enabled and updated logging statements in Compiler . java to improve logging clarity and ensure proper logging behavior when optimistic types
refactor Expect class to improve code readability to enhance maintainability and maintainability of the code
added UnixSocketConfigurationStrategy to DockerClientFactory and created a new UnixSocketConfigurationStrategy class to enhance Docker client configuration management and ensure proper handling of
added test cases for flaky and flaky tests in CloseableDoSFilterTest . java and CloseableDoSFilterTest . java to
camel - 14499 : camel - reactive - add a new exception class ` ` ReactiveStreamsNoActiveSubscriptionsException ` to handle
refactor vectorizeMRTask and vectorizeMapWork methods to convert MapWork instead of mrTask to improve code clarity and maintainability by
updated constructor parameters in StringAppender , LogDivertAppender , and LogDivertAppender to include a boolean parameter to ensure proper initialization of the constructor
added a null check before updating the current node and update the gui object back to avoid potential NullPointerExceptions when the gui package is null
added a new method ` isWeak ` to ` BasicNodeFactory ` , ` LLVMParserRuntime ` , and ` Linkage ` classes
refactor XShareAuto , LoadClassNegative , LoadClassNegative , and ReadFromNoaccessArea classes to improve code organization and maintainability
added a new test class ` DefaultTransactionThreadLocalTest ` to test the behavior of ` DefaultTransactionThreadLocal ` to ensure proper testing of transaction management and
added a check for error handle checks in HiveStatement . java to ensure proper handling of error handles in the server side
updated ALTER _ TABLE _ ALTER _ TABLE _ ALTER _ TABLE _ ALTER _ TABLE _ ALTER _ COLUMN _ DROP _
camel - 16263 : camel - aws - secretsmanager : add unit test for aws - secretsmanager .
refactor SimpleTree class to improve code readability to enhance maintainability and maintainability of the code
updated error handling in Response . status ( Status . INTERNAL _ SERVER _ ERROR ) from . build ( ) to . build ( ) to improve
added a subTree parameter to the fromContent method and modified the fromContent method to accept a boolean parameter to enhance functionality by allowing sub - tree
updated column width calculation in Sheet . java and added a new test for column width calculations in TestHSSFSheet . java to improve column width
added configPath parameter to the Commands . less method calls in Builtins . java to enhance command execution by allowing configuration of config files
updated the ` print ` method to accept ` Collection < Table > ` instead of ` Set < Table > ` to improve type safety and maintainability
updated sshd image property from " sshd @ sha256 " to " sshd : 1 . 0 " in TestcontainersConfiguration . java
removed an assertion for the hostId value in AgentManagerImpl . java to improve code readability and maintainability
refactored the handling of the raw key in DefaultGroupKeyGenerator to use BlockSingleValIterator to improve code readability and maintainability by
updated test methods in TestMultiMMap to handle EOFExceptions instead of EOFExceptions to improve error handling and ensure correct handling of EOFException
updated the instantiation of ` IngredientStack ` to use ` NBTBC ` instead of ` IngredientStack . of ( ) ` to improve
updated method signature from ` put ` to ` putObject ` in ` GraphHopperConfigMixIn . java ` to improve clarity and consistency in
refactor drag exit logic in CellLayout , DragController , and Workspace classes to improve code readability and maintainability
updated ModifyRequestBodyGatewayFilterFactory to use originalBody instead of o and added a test for upstreamRequestBodyIsEmpty in ModifyRequestBodyGatewayFilterFactory to
added imports for ReflectUtil . isPackageAccessible in ConstructorFinder , FieldFinder , and MethodFinder classes to ensure proper handling of package accessibility checks
updated logger warnings and traces in LoggingHandler . java to use trace instead of warn and trace to improve logging clarity and maintainability of the logging
updated prefix retrieval logic in WhiteBlackList . java and added a new Issue348 . java file to improve prefix handling and ensure correct handling of
updated GalleryActivity to handle menu options for home and back pressed icons and updated the onPostCreate method to improve user experience by allowing users to navigate
added null check for MongoDBService in MongoDBServiceFactory . java to prevent potential NullPointerExceptions when instance is null
added a new test class ` HasBooleanICONST0 ` and ` HasBooleanICONST1 ` to ` InlineConstantMutatorTest ` to ensure
added Blackhole parameter to the decode method in RecordTest . java to allow for black holes in the decoding process
added imports for ` com . google . api . core . BetaApi ` and ` @ BetaApi ` to multiple Java files to
added a check for empty groups in DPTUnits and modified unit handling in DeviceThingHandler to improve handling of group addresses and ensure proper handling of
removed the call to ` dbManager . getWitnesses ( ) . clear ( ) . clear ( ) ` in ` ManagerTest . java `
updated exception handling in JdbcPageSink to use Logger instead of throw PrestoException to improve clarity and maintainability of exception handling
refactor stack handling in NativeError . java to use ScriptFunctionImpl instead of set to improve code clarity and maintainability by centralizing stack management
added a check for " . " path in DrillPathFilter . java to ensure proper handling of path names in the DrillPathFilter
refactor ` onboard ` and ` autoLoad ` methods in ` ThirdEyeAnomalyApplication ` and ` ThirdEyeAnomalyConfiguration
added a call to clearIndex ( ) in BasicFunctionalityTest . java to ensure the index is cleared before proceeding
updated the BOLDWEIGHT _ NORMAL constant from 190 to 0x190 in HSSFFont . java to reflect the new font weight
changed the visibility of the ` fThreadGroup ` variable to ` volatile ` and updated the ` fLookForStuckThread ` variable to improve
replaced the ` getValue ` method with ` setValue ` in ` ValueResultData ` and ` ValueResultData ` classes to improve code readability and
updated the result assignment logic in FuzzyQuery . java to use super . hashCode ( ) instead of zero to improve code readability and maintainability
removed unnecessary print statements in PushedResourcesTest . java to streamline code by eliminating unnecessary print statements
removed @ Nullable annotations from removeFile and removeDirectory methods in SharedOpenFilesCache . java to simplify code and improve readability
updated the version number from " 2 . 5 . 1 " to " 2 . 6 . 0 " in JdbcDriverInfoRetrieverTest and SchemaCrawler
updated the method call from ` retrievePersonAttributes ` to ` buildResolvedPrincipal ` in ` PersonDirectoryPrincipalResolver . java ` to ensure proper handling
updated log level from info to warn in OpenWebNetBridgeHandler . java to improve clarity and consistency in logging messages
updated method signatures in Hashing , Int2ObjectHashMap , Int2ObjectHashMap , Int2ObjectHashMap , Int2ObjectHashMap , and Int
added a new constructor ` ThumbnailGenerationTask ` to ` ThumbnailsCacheManager ` and updated its usage in ` FileUploader ` to ensure
added a condition to check if the number of attempts is less than 5 in GroupSelectionQuery . java to ensure that the loop does not exceed the
added a new file ` Bug1933922 . java ` with a class ` Bug1933922 . java ` that handles recursive compilation
updated comparison logic in multipleSeriesProvider , MultipleSeriesProvider , and AjaxDecoratorMapper classes to improve clarity and consistency to enhance code readability and maintain
added a check for control characters 0 - 31 and space character 32 in FileResolver . java to ensure correct handling of control characters in the file resolver
added requestFocus ( ) method call to Display . java to ensure proper handling of requestFocus ( ) method
refactor test data loading in InstructorHomePageUiTest . java to improve clarity and consistency to enhance code readability and maintainability by
rename JsonParserAsync to JsonStreamParser in multiple files to improve clarity and consistency in naming conventions
updated cancelAllCroutons ( ) method to handle empty msgs and added onPause ( ) method in DetailFragment and MainActivity
added a new test method ` testSchemaQueryAndFetchWithUnrelatedTemplate ` in ` IoTDBSchemaTemplateIT . java ` to ensure
refactor Dialog class for improved readability to enhance maintainability and readability of the code
updated the ProcessBuilder initialization to remove the JAVA _ TOOL _ OPTIONS environment variable to ensure proper handling of CLI CLI options
updated InetAddress . getLocalHost ( ) to use InetAddress . getByName ( " 127 . 0 . 1 " ) instead of InetAddress . getLocalHost ( ) to ensure
refactor metric handling in Metrics . java for consistency to improve code readability and maintainability
added ` AppleNativeIntegrationTestUtils ` and ` InstallCommandIntegrationTest ` to ` DaemonLifecycleManagerTest ` and ` InstallCommandIntegrationTest ` to ensure
replace ` JVMCIVersionCheckVendorTest ` with ` JVMCIVersionCheck ` in ` JVMCIVersionCheckVendorTest ` and
refactor Mockito class to improve code readability to enhance maintainability and maintainability of the code
refactor TestLargePageUseForAuxMemory . java to improve code organization to enhance maintainability and readability of the code
added charset handling in BinaryParser , PlainTextParser , PlainTextParser , and PlainTextParser classes to improve encoding handling and ensure proper handling of
added a new enum ` _ multiPartCompliance ` to ` HttpConfiguration ` and created a new ` MultiPartFormDataCompliance ` class in ` Request
added GradleVersion . version ( " 7 . 2 " ) to GradleDistributionManager . java to ensure compatibility with the latest Gradle version
added a method ` addType ` to ` DatabaseSnapshot ` and updated the ` addType ` method in ` SnapshotControl ` and ` SnapshotControl
refactor Term class to improve code readability to enhance maintainability and maintainability of the code
added null and empty check for runWith in ChangeSet . java to prevent potential NullPointerExceptions when runWith is null
added a new test method ` testIsSameRM ( ) ` to ` ActiveMQXAConnectionFactoryTest . java ` to verify that the
refactor AudioDeviceInfoBuilder , MediaCodecInfoBuilder , and ShadowTextUtils classes to improve code organization and maintainability
pdfbox - 417 : fix black box test failure
refactor tint handling in TaskView to use mTintAmount instead of mDimAlpha and mDigitalWellBeingToast
added a new file SumZeroFunctions . java that implements DrillAggFunc and implemented a new SumZeroFunctions class to implement DrillAggFunc
removed unnecessary spaces in the ` FirstValueFunctionIT ` , ` NthValueFunctionIT ` , and ` NthValueFunctionIT ` to
modified the ` getAllocationFailWarningMessage ` method to utilize a new ` static ` method to improve code readability and maintainability by reducing
added a null check for the propName before adding it to the role object to prevent potential NullPointerExceptions when propName is null
replaced private fields with @ VisibleForTesting for touch events in StatusBarTouchController and RecentsView classes to improve code readability and maintainability by
http : / / issues . apache . org / jira / browse / amq - 461 - add stream parameter to log container
added a new file ` TestMVStoreCachePerformance . java ` that tests MVStore and created a new ` TestMVStoreCache
added " J " to the LONG ( " Long " , " L " , " L " ) and " Long " in PrimitiveType . java
changed the ` delegatingApplicationListener ` method from ` delegatingApplicationListener ` to static in ` WebSecurityConfiguration . java ` to
added null values for the message body in RestBindingAdvice . java to ensure proper handling of null messages
added new classes ` FileDeletingTasklet ` , ` TaskletJobFunctionalTests ` , and ` TaskletJobFunctionalTests ` to
updated updateSizeKeepDrawables ( ) method in EuclidianView and EuclidianViewForPlaneCompanion to
updated byte handling in BitUtil and Int2IntCounterMap , Int2IntHashMap , Int2IntHashMap , and Int2IntHashMap to
updated ` sendEventToTest ` methods to include ` stateOrdinal ` and updated ` sendEventToTest ` methods to use ` StateOrdinal `
added support for video thumbnail requests in multiple classes to ensure proper handling of video thumbnail requests for video thumbnail requests
refactor error handling in ErrorCheckerService to improve code readability and maintainability to enhance maintainability and maintainability of error reporting logic
added conditional checks for menuButtonTopBool and menuButtonBottomBool in SideMenuBar . java to ensure titleArea is only added when the theme is
updated the value of " linux - x86 " to " linux - x86 " and added preload attribute in Skia . java to
added a new constant ID _ UNITTESTNET in NetworkParameters . java to support unit tests in the application
added exception handling for invalid format arguments in QueryCommand and implemented corresponding test cases in QueryCommandIntegrationTest to ensure proper error handling for invalid format arguments
updated the variable ` capacity ` and ` length ` from ` capacity ` to ` length ` for clarity to improve code readability and maintainability by
updated the walkRuleAndAdd method to include a srcRule parameter and added a check for dependencies to ensure proper handling of dependencies based on project configuration
updated the ` addModulePatches ` method to include a ` sourceOverride ` parameter and modified the ` addModulePatches ` method to enhance
remove the semantic version check from candidateTermId check to simplify the condition for better readability and maintainability
added a conditional check for SAML authentication in the OwnCloudClientManagerFactory to ensure compatibility with SAML authentication capabilities
added null checks for mapped table resources in ReadBatch and WriteBatch classes to ensure proper handling of null mapped table resources in ReadBatch and WriteBatch
added Utils . close ( ) methods to OnMessageSubscriber , ReceiveSubscriber , and JMSSampler classes to improve logging clarity and ensure proper resource management
refactor AnonymousAuthenticationFilter to use Supplier for deferred context handling to improve code readability and maintainability by centralizing context management
added a boolean parameter to the removeActor method and updated related methods to include a boolean parameter to enhance the functionality of the removeActor method and improve
updated prompt calls in SolrCLI . java to include valid configurations to improve code readability and maintainability by using a more descriptive variable
added logging functionality to NettyHttpServer , RoutingInBoundHandler , and RoutingInBoundHandler classes to enhance logging capabilities for better debugging
refactor DatumAliases , Formattable , and Parser classes for improved clarity to enhance maintainability and readability of the codebase
updated SwingUtilities method call in CodeDependenciesPanel . java to use SwingUtilities . invokeLater instead of SwingUtilities . invokeLater to improve code readability and maintainability by
camel - 18263 : camel - groovy : fix compile error in camel - groovy
replaced the use of ` ArtifactUtils . versionlessKey ( ) ` with ` Collections . EMPTY _ MAP ` in ` DefaultPluginManager . java
changed the visibility of ` ARGS _ OPTION ` from static to public in ` CliFrontendParser ` and ` ProgramOptionsUtils ` to allow
replaced ` ShadowSharedPreferencesEditor ` with ` TestSharedPreferencesEditor ` and added a new ` TestSharedPreferencesTest ` class with ` TestSharedPreference
removed storageAlias assignment from HttpsMessenger . java to simplify the code and improve readability
http : / / issues . apache . org / jira / browse / amq - 2632 - add error message when convert to text
changed the visibility of the updateImage method from private to protected in ImageButton . java and ImageTextButton . java to allow subclasses to access the
added methods to drop resources in the Block class to handle server level drops to ensure proper handling of resource drops based on server level
added native methods for SpatialLocationCalculatorConfig in DataOutputQueue , depthai , and SpatialLocationCalculatorConfig classes to enhance functionality for SpatialLocationCalculatorConfig
refactor multiple Java classes to improve code organization to enhance maintainability and readability of the codebase
added a ` isEmpty ( ) ` method to ` TreeTrie ` and implemented a new ` isEmpty ( ) ` method in ` TrieTest ` to
updated foreground and background methods from ` col ` to ` background ` in ` AttributedStringBuilder . java ` to ensure proper handling of foreground and background
added a condition to disable fingerprints based on system property to ensure fingerprints are disabled based on system property
changed the visibility of the moveFunds method from private to public in GDAXAccountService . java to allow access to the moveFun
replaced ` maybeEmitEvent ` with ` maybeEmitEvent ` and updated related methods in ` MongoTemplate ` and ` MongoTemplateTests ` to improve
refactor CollectionContainer and SetTransactionTest to use a logger variable for serialization and deserialization to improve code readability and maintainability by centralizing logger
added a null check for the input stream in TikaCLI . java to ensure proper resource management and prevent potential memory leaks
updated exception handling in TestCollectionAPIs . java to use ApiException instead of ApiBag . ExceptionWithErrObject to improve error handling and ensure proper
updated the method call from ` loadConfig ` to ` loadConfig ` in ` OptionsParser . java ` to improve code readability and maintainability
replace longFsName with longFsName in the InstructorFeedbackAddActionTest and InstructorFeedbackCopyActionTest classes to
replaced ` throws Exception ` with ` final ` for ` ExternalWorkerService ` , ` JobServicePipelineResult ` , and ` PortableRunnerTest
removed the step parameter from the DisplayTextVirtualDatapoint and HmDatapoint classes to simplify the code and improve readability by eliminating unnecessary step
added logging statements for acquire and release exclusive locks in PostgreSQLReadWriteAdvisoryLocksTest . java to improve debugging and ensure proper
removed redundant call to scheduleJobs ( ) in BaseSchedulerServiceImpl . java to improve code readability and maintainability
[ java ] fix checkstyle violation in testgettextcontent
refactor logger handling to use ThreadLocal for improved thread safety to enhance thread safety and maintainability of logger management
replaced ` @ VisibleForTesting ` with ` @ VisibleForTesting ` in ` FunctionInitializer ` and updated related imports in ` FunctionInitializerTest ` to
added a new method ` boxedTypeOrType ` to ` Types ` and created a new ` T6995200 ` class to improve type
added a null check for mFocusedTaskViewId and updated orientation state management in RecentsView . java and TaskView . java to ensure proper
removed multiple calls to ` getLiveRegionServerThread ` in ` TestFlushFromClient . java ` to simplify the code and improve readability by
added handling for contract details in TransactionExecutor . java to ensure proper cleanup of contract details in the cache
replace TOKEN _ ISSUE _ FEE with a dynamic property store for account balance calculations to improve code readability and maintainability by using
refactor RealisticRenderStrategy to use URLs instead of apMap and texCache to improve cache management and ensure proper resource management
updated Blit class to use Raster and WritableRaster instead of src and dst in Blit . java and added a new Bug7049339 .
added ` isUnselectedStyle ` and ` isUnselectedStyle ` to ` Component ` , ` Label ` , and ` Label ` classes to
updated the list of mappings in multiple webflow configurations to use a smaller size instead of a single instance to improve flexibility and maintainability of the
removed flags parameter from queryImplicitIntentServices and queryImplicitIntentActivities methods to simplify method signatures and improve code readability
refactor PingRequestHandler class to improve code readability to enhance maintainability and maintainability of the code
added a new constant ` MP4 _ ASSET _ WITH _ INCREASING _ TIMESTAMPS _ URI _ STRING ` and updated
added null checks for currentFirmware in TradfriGatewayHandler . java to improve robustness by preventing potential NullPointerExceptions
refactor AjaxElementLocator class to improve code organization to enhance maintainability and readability of the code
updated conditional checks in BoxLayout . java and DefaultLayout . java for consistency to improve code readability and maintainability by using a more descriptive
updated token handling in JsonDecoder to use JsonToken . START _ ARRAY instead of JsonToken . START _ ARRAY in JsonDecoder . java to ensure
replaced ` notification . getKey ( ) ` with ` removalCause ` in ` BlockCache . java ` to improve code clarity and maintainability by using
added JUnit Ignore annotation to SavepointTestBase . java to temporarily disable tests that are no longer needed
added @ Test annotation to DroolsMvelParserTest . java to ensure proper handling of test cases
changed fields from ` private ` to ` final ` in ` ContextRegisterListener . java ` and ` ContextRegisterListener . java ` to ensure proper
updated ` ObjectHashSet ` to include ` loadFactor ` parameter and modified ` iterator ` initialization in ` ObjectHashSet ` and ` ObjectHashSetIntegerTest
added a static final int for batch bytes in SparkReduceRecordHandler , ReduceRecordSource , and VectorizedRowBatch classes to improve performance and
updated MODE _ WORLD _ WRITEABLE and Context . MODE _ PRIVATE in AppSettings , UpdateUtils , and AppSettings classes to
updated logging statements in JdbcProxyGenerator . java to improve clarity and consistency to enhance code readability and maintainability
updated animation state handling in Workspace . java to set the important for accessibility to ensure proper import behavior based on accessibility state
change log level from warn to debug in ProtobufLogReader . java to improve clarity and consistency in logging messages
updated the scope string from ` substring ` to ` substring ` in ` UaaTokenServices ` and added a new test for persisting OAuth2
updated import statements in SchemaRetrievalOptionsBuilderTest , AvailableJDBCDrivers , and AvailablePlugins classes to improve code readability and
added a new interface ` ExecutableCommand ` to the ` org . kie . api . command ` package to implement the ` ExecutableCommand ` interface
deleted the JdbcTableService . java file to remove unused code to streamline the codebase
added padding methods to CellLayout and Launcher classes and updated bitmap creation logic in Launcher to improve padding handling and ensure consistent rendering of cell layout
added a condition to check if the sb length is zero before accessing the cands list to ensure that the cands list is only
updated SamlMetadataController , SamlMetadataUIParserAction , and SamlMetadataUIParserAction to use Action instead of SamlMetadata to
added a method to check for LDAP ports in LdapMockMvcTests to ensure proper handling of LDAP ports in tests
log4j2 - 132 fix log4j2 - 1 / log4j2 - log4j2 - log4j2
refactor URL handling in Fetcher , HTMLMetaProcessor , and HTMLMetaProcessor to improve clarity and consistency to enhance code readability and maintainability
updated SolrQuery initialization to use " name : ssang " instead of " * : * " to ensure consistency with Solr query naming conventions
refactor Console initialization logic in multiple classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
changed access modifier of ` getVerticesColors ` method from public to private and modified the initialization of ` getVerticesColors ` to improve encaps
added exclusion for EXCLUDE _ TIMESTAMPED _ REPORTS _ DIRECTORIES in HTMLReportGenerator and related test cases to
updated the ` testDeviceName ` and ` validateName ` methods in ` DataValidatorTest . java ` to use ` @ ParameterizedTest ` for
pdfbox - 2492 : remove the addmetadata method that be not need .
added null checks for bindStatus in FieldUtils to prevent potential NullPointerExceptions when bindStatus is null
removed system . out . println from JoglInput . java to clean up the code and improve readability
added a boolean flag ` allowExtractingPrivateFields ` to ` FieldSupport ` and modified ` FieldSupport ` to include ` allowExtractingPrivate
added a replacement for the device name in WebDataHandler . java to ensure proper handling of device names in the WebDataHandler
added support for MethodHandles for Java 8 types in Platform . java to enhance compatibility with Java 8 types in the application
added a deprecated ` weights ` method to ` ZParams ` and modified ` SortedSetCommandsTest ` to use ` weightsByDouble ` instead of `
updated ` writeCustomHTML ` methods to accept ` Database ` instead of ` List < Change > changes ` to enhance database handling by providing additional database
added a assertion to check if a value is null before retrieving keys in BTreeMap . java to ensure proper handling of null values and prevent potential
updated exception handling in CancelDeferredTransactionContractActuator , UpdateDeferredTransactionContractActuator , and UpdateDeferredTransactionContractActuator to
added a check for a boolean flag for zerofile in AbstractLongMap . java to ensure proper handling of zero file sizes based on profiler
refactor error handling in ChangeSet and Main classes to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
updated byte array initialization from 14 to 13 in HortonworksEncodedSchemaReferenceStrategy . java and HortonworksEncodedSchemaReferenceWriter . java to
added ItemReadListener imports and updated import statements in multiple Java files to ensure proper handling of ItemReadListener in the application
refactor methods in AbstractProviderModule to improve code readability and maintainability to enhance maintainability and maintainability of the code
replaced ` doc . get ( ' title ' ) ` with ` doc . get ( ' title ' ) ` in multiple files to improve clarity and
refactor Test7005594 . java to improve code organization to enhance maintainability and readability of the code
updated error message formatting in ResourcesValidationProcess . java to improve code readability and maintainability
refactor TopKRollupPhaseOneJob class to improve code organization to enhance maintainability and readability of the code
added a null check for IP4Address in the RulesManagerImpl class to prevent potential NullPointerException when accessing IP addresses
refactor Gamepad to utilize MCOptionUtils for handling AnalogTriggers to improve code readability and maintainability by utilizing MC
refactor ` iteratesOverSequence ` and ` iteratesOverAsList ` methods to use ` Iterable < T > ` instead of ` Object
added a check for ` pair [ 0 ] ` and ` pair [ 1 ] in ` DefaultHttpBinding ` and ` DefaultHttpBinding ` to
added unit tests for the ` doInJPA ` method in ` ActivityHistorySQLServerStoredProcedureTest . java ` to ensure correct handling of
added LargeValueFormatter to BarChartActivityMultiDataset , BarChartBase , Chart , BarLineChartBase , BarLineChartBase , and Chart
added a new constant INNOCUOS _ CHAR to the list of characters in CommentsParser . java to improve code readability and maintainability
removed unnecessary @ SuppressWarnings annotation from Platform . java to streamline code by eliminating unnecessary warnings
updated the formatting of the printLir call in TraceLinearScanLifetimeAnalysisPhase . java to improve readability and maintainability of the code
added a TODO comment to the NullAssertionValidator class to improve code readability and maintainability
added imports for RuleKeyAppendable and modified rule key handling in DefaultRuleKeyBuilderFactory . java to ensure proper handling of rule key appending
added system profile directory handling and modified test cases in PmsConfiguration and DLNAMediaInfoTest classes to ensure proper handling of network speed and
refactor ` createThreadFactory ( ) ` method to use ` createThreadFactory ( ) ` instead of ` DefaultThreadFactory ( ) ` to
replaced the ` inMessages ` with ` receiver . getMessagesIn ( ) ` in ` HttpChannelOverHTTP ` and ` HttpReceiverOverHTTP
added a new attribute for " accept " in ImageFileInputDialog . java to set the accept attribute for the image file input dialog
refactor ElasticIndexWriter and TestElasticIndexWriter to use PreBuiltTransportClient instead of NodeBuilder to improve code clarity and maintainability by
added support for witness class and class in ForkController . java to enhance code readability and maintainability
added a new test class ` NullPointerAndEmptyArrayTest ` to test NullPointerAndEmptyArrayTest to ensure proper handling of NullPointerAndEmptyArrayTest
removed the ` findConfiguredGeneratedSourcesUsingDeps ` method from ` BaseIjModuleRule ` and removed the ` Test ` class to streamline
updated the ` constructWildcards ` method to accept a ` Collection < String > ` parameter and added a new ` constructWildcards ` method to
refactored aliases handling in Vectorizer . java to improve clarity and consistency to enhance code readability and maintainability by reducing redundancy
updated MockitoJUnitRunner to use MockitoJUnitRunner instead of MockitoJUnitRunner to ensure proper exception handling for current location
added error handling for Firmware settings in TinyGFirmwareSettings . java to ensure proper setting of firmware settings
refactor ` getLangs ` method to use ` TreeSet < String > ` instead of ` List < String > ` to improve code clarity and
updated import statements in LazyTraceScheduledThreadPoolExecutorTests . java for consistency to improve code readability and maintainability
hbase - 13232 disabletablesnapshothandler should use tablelockmanager instead of tablelockmanager
added a method ` createPlatformIsNullCall ` to ` RuntimeMethods ` , ` RewriteReferenceEqualityOperations ` , and ` RewriteReferenceEquality
removed the ` OkHttpClient ` import and updated the ` explorerShouldHaveModifiedHttpRpcEndpoint ` method in ` DockerQuickstartTest . java `
added a boolean flag ` isSuspended ` to ` Thread ` and modified condition checks in ` Test _ Thread ` to handle IllegalThreadStateException
updated JavadocVisitor and ReloadableJava8JavadocVisitor to use SerialData instead of Author and SerialData to improve clarity and maintainability of
camel - 14136 : camel - spring - spring - spring - spring - spring - spring - spring - spring - spring - spring - spring
removed multiple @ Override annotations in multiple Java files to improve code clarity and maintainability by eliminating unnecessary overrides
added ModuleImportDescriptor to Java2TypeScriptAdapter and updated related tests in EnumTests to improve code clarity and ensure proper handling of static fields in
updated the language string from " W3C _ XML _ SCHEMA _ NS _ URI " to " W3C / 2001 / XMLSchema
added handling for badged app label content in BubbleTextView . java to enhance user experience by allowing badged app label content
added mouse wheel listener for mouse wheel events in TestMouseWheelScroll . java to ensure proper handling of mouse wheel events
pdfbox - 2452 : fix bug where positioning - absolute be not absolute
updated currency code formatting in KucoinAdapters and KucoinIntegrationTests to use XRB _ BTC instead of BTC _ ETH to
updated method signatures in VacuumController , VacuumFrame , VacuumFrame , VacuumFrame , and VacuumView
updated currency handling logic in BitfinexAdapters . java to improve code readability and maintainability
updated imports and modified fields handling in JsonFormat . java and JsonFormat . java to improve clarity and maintainability of the code
removed unnecessary check for isArray ( ) and isEnum ( ) methods in JacksonXmlFormatMapper . java to improve code readability and maintainability by
refactor VirtualThread class to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated ` DirectoryTaxonomyWriter ` and ` NameIntCacheLRU ` classes to use ` BytesRef ` instead of ` NoOpCache ` to
refactor VetoableChangeSupport class for improved readability to enhance maintainability and readability of the code
updated the calculation of the height calculation in BrowserContentPane . java to ensure correct calculation of the owner ' s height based on the owner ' s
pdfbox - 4072 : remove unnecessary throw statement in java . lang . exception
added unit tests for ` setShortSupportMessage ` and ` setLongSupportMessage ` methods in ` ShadowDevicePolicyManagerTest . java ` to ensure
refactor help button handling in InputBarHelpPanelW . java to improve code readability and maintainability
refactor LambdaBeanPropertyMemberAccessor and MemberAccessorFactory classes to improve code organization and maintainability
added ThreadHelper for handling controller states in BackendInitializerHelper , TerminalClient , and TerminalClient classes to improve thread management and ensure proper handling of controller
updated the handling of release status checks in SwingStartup . java to improve clarity and maintainability of the code
added a ` includeGeneratedFileComment ` property to ` DbMigrationConfig ` , ` MigrationXmlWriter ` , and ` MigrationXmlWriter ` to
updated usage descriptions from " / plot squared < player > " to " / plot trust < player | * > " to improve clarity and
deleted the BadHdfsThreadsFilter and BadZookeeperThreadsFilter classes to clean up the codebase and improve maintainability
updated variable names in ` OptionProcessor . java ` to use ` optionName ` instead of ` nameVariableName ` to improve clarity and consistency in
added a condition to check for parallel classes in XmlSuite . PARALLEL _ CLASSES to ensure proper handling of parallel configurations
updated broker data handling in RouteInfoManager to use StringUtils . isEmpty ( oldAddr ) instead of boolean to improve code readability and maintainability by
updated import statements in CtMethodImpl . java to use ModelElementContainerDefaultCapacities instead of ModelElementContainerDefaultCapacities to
added serialVersionUID values to multiple exception classes to ensure compatibility with the latest features and improve code clarity
updated DeadLetterEntry , JpaSequencedDeadLetterQueue , and JpaSequencedDeadLetterQueue classes to improve code clarity and maintainability
added a new method ` shaBase64 ` to ` ShibbolethCompatiblePersistentIdGenerator ` and implemented a new ` realTestofGenerator
added null check for systemActionsEnabled parameter in Parameters . java and adjusted condition checks in TestAction . java to ensure proper handling of null values and
added a new file ` Person . java ` with a name field to provide functionality for identifying the person ' s name
updated the start method from ` InetAddress ` to ` FBUtilities . getLocalAddress ( ) ` in multiple classes to improve code readability and maintain
updated the condition in ` AbstractClient . java ` to use ` toUpperCase ( ) . indexOf ( timeStr . toUpperCase ( ) ` instead of `
added assertions for timeColumn , timeUnit , and totalDocs in SegmentMetadataImplTest and SegmentMetadataImpl to ensure proper handling of metadata metadata for
updated the background color setting in SimulationPlotPanel . java to use DARK _ RED . toAWTColor ( ) instead of Color
added a call to disconnectEmitters . onNext ( new Object ( ) ) in NettyStreamingService . java to ensure proper handling of disconnect
replaced ` String ` with ` Class < ? extends Annotation > ` in ` DefaultBeanContext . java ` to simplify the code and improve readability
added a new test method ` testShouldBeAbleToClickOnAnElementHiddenByDoubleOverflow ` to ` ClickScrollingTest ` to
added a try - catch block to dismiss the dialog with a try - catch block to prevent potential exceptions when dismissing the dialog
added a custom JNDI location to the JNDI lookup method in JTATransactionManager . java to ensure proper handling of transaction synchronization registry
changed the visibility of the pickUri method from public to private to allow access to the method from other classes
removed the hasFunction method from the Library class to simplify the code by eliminating unnecessary functionality
refactor JSSESocketFactory to use a result array instead of enabledCiphers to improve code readability and maintainability by reducing redundancy
updated timestamp handling in multiple Java files to use ChronoUnit . MICROS instead of 1000 to improve clarity and consistency in timestamp handling logic
replaced IllegalArgumentException with requireNonNull in Identifiers . java and DatabaseConnector . java to simplify null checks and improve code readability
refactor ` coerceValueForInputObjectType ` to use ` inputMap ` instead of ` input ` to improve code readability and maintainability by
updated condition in FlightConfigurablePanel . java to check if the table getRowCount is greater than the minimum getRowCount ( ) method to ensure that the row
added a call to scrollSelectionVisible ( ) in ThrustCurveMotorSelectionPanel . java to ensure the scrollSelectionVisible ( ) method is
added import statement for ASTMemberSelector in UnnecessaryLocalBeforeReturnRule . java to check if the first descendant of ASTMemberSelector is
replaced the ` ScriptEngineManager ` with ` ScriptEngine ` in ` AbstractScriptExecutor . java ` to simplify the code and improve readability by eliminating unnecessary
updated correlation calculation logic in EuclideanDistanceSimilarity and EuclideanDistanceSimilarityTest to improve accuracy and accuracy of correlation calculations
added null check for sstable before executing incrementally backups to prevent potential NullPointerExceptions when sstable is null
updated the ` relativize ` method to accept a ` Path ` parameter and added a new ` relativize ` method to enhance
updated column size and decimal digits handling in ColumnSnapshotGenerator and DataType classes to improve code readability and maintainability
added a filter to skip the current writer head file in DeadLetterQueueWriterTest . java to skip the current writer head file 1 . log .
replace ` toHexString ` with ` toJsonHex ` in ` TronJsonRpcImpl . java ` to improve code readability and maintainability by
refactor ` ErrorHandlerController ` and ` Error403Controller ` classes to use ` Error403Controller ` instead of ` ErrorHandlerController
replaced ` resetTerminal ` with ` resetIf ` in ` UnixTerminal ` , ` WindowsTerminal ` , and ` TerminalFactory ` to improve code
updated Tiny . java to use ` @ TriggerPatterns ` instead of ` MethodInvocationTree ` and ` @ TriggerPattern ` to improve code clarity
refactor connection management logic in ConnectionPool . java to improve code readability and maintainability
updated timezone variable name from ` getDateConverter ( ) ` to ` getLdapDateConverter ( ) ` across multiple classes to improve clarity and consistency in
PDFMergerUtility . java : check if destNames is not null before proceeding to avoid potential NullPointerExceptions when destNames is null
updated error message formatting in JavassistUtils to use String . format for clarity to improve readability and maintainability of error messages
updated LargeStreamletTest to use ` readerException ` and ` writerException ` instead of ` readerException ` and ` writerException ` to improve
updated page type handling in HomeFragment to use shared preferences for page types to ensure proper handling of extra pages based on user settings
added error handling for brokenGaussian bitmaps in AndroidImplementation . java to improve robustness by preventing potential NullPointerExceptions
added @ SuppressSubnodes annotation and modified return statements in BaseParser and ImplicitActionsConverter classes to improve code readability and maintainability by
refactor FDFParser initialization to use try - with - resources for readBuffer to ensure proper resource management and prevent potential memory leaks
deleted the TestDocInverterPerFieldErrorInfo . java file to remove unused files to streamline the codebase
added a shell command to execute the keyevent 82 command in AbstractLauncherUiTest and updated the assertion in LauncherInstrumentation to ensure the keyguard
added JSON file handling in FileDumper . java to enhance file path handling by allowing JSON files to be processed
added a private method ` resetResultsNotifiedFlag ( ) ` to ` ProfilerServer . java ` to reset the resultsNotified flag before
refactor TextureHelper to use Texture2D instead of Texture2D for texture loading to improve code readability and maintainability by centralizing texture
updated ` context . getId ( ) ` to ` context . getId ( ) ` in ` SpringBootTestContextBootstrapperIntegrationTests ` and `
updated RandomizersTest to use " 9781797845005 " instead of " 9781797745008 " to ensure compatibility
updated the notification sound setting logic in AlarmReceiver . java to include a URI for the notification ringtone to ensure that the notification ringtone is
added a method ` reportLoopCount ( int count ) ` to ` RootNode . java ` to ensure proper handling of loop count reporting
added a conditional check for the repository type in FinalizeUpgradeAction . java and updated clusterEntity initialization in ClusterImpl . java to enhance version management
removed rangeId from listByRegionIDAndStateSearch in PortableIpDaoImpl . java to simplify the code and improve readability
updated method call from ` stepExecution . getExecutionContext ( ) ` to ` streamManager . open ( ) ` in ` ItemOrientedStep
added a new file CountedLoopProblem . java that implements a random function to generate a random string using a random string to provide a random string
updated method parameters from ` long ` to ` long ` for ` nativeMethod ` in multiple Java files to improve code readability and maintainability by
added error handling for pending failed speculation offset in GraalHotSpotVMConfig . java to ensure proper handling of potential JVMCI errors
refactor KafkaStreamsTracing to use ValueTransformerWithKeySupplier instead of TransformerSupplier for better clarity to improve code readability and maintainability by
added a ` toStringArray ` method to ` FeedbackConstantSumQuestionDetails ` and updated its usage in ` FeedbackSessionsLogicTest `
removed the call to DynamicColors . applyToActivitiesIfAvailable ( this ) in BaseApplication . java to streamline code by eliminating unnecessary calls to
refactor thread handling in CloseRace . java to utilize CountDownLatch for blocking gracefully to improve thread management and ensure proper handling of graceful graceful
updated the return value from ` val ` to ` val . intValue ( ) ` in ` IntPointField . java ` and added a loop for
updated the calculation of ` arcSize ` from 10 to ` arcSizefraction ` and updated the calculation of ` arcSize ` to improve accuracy of
updated width values from 768 to 640 in AddAndScaleMultiImage . java and ImageBorderCuttingWizard . java to ensure consistent width
rename ` minifySqlEnabled ` to ` shrinkWhitespacesInSql ` and update related methods to use ` shrinkWhitespacesInSql ` instead of
removed the ` waitForStateTransitionToEnd ` method and modified the ` waitForStateTransitionToEnd ` method in ` AbstractLauncherUiTest ` to
added ` CasCoreAuthenticationPrincipalConfiguration ` , ` CasCoreHttpConfiguration ` , and ` CasCoreHttpConfiguration ` to multiple test
updated the calculation of v1 , v2 , v3 , v3 , v3 , v4 , v3 , v4 , v
camel - 14263 : camel - http - http - http - http - http - http - http - http - http - http - http
refactor ClasspathInfo creation to use a Builder for the boot path to improve code readability and maintainability by centralizing boot path creation
added a new file ` MediaScriptScopeProvider . java ` that implements ScriptScopeProvider . java and modified ` DefaultScriptScopeProvider . java `
added methods to retrieve and set layer managers in AnimComposer , AnimEvent , and AnimEvent classes to enhance layer management functionality and ensure
added a check for empty queue in DeferredHandler . java and removed the showDefaultScreen method in Workspace . java to ensure proper handling of empty queue
added null checks for mapOp and mapWork in MapRecordProcessor and TezProcessor classes to improve robustness by preventing potential NullPointerExceptions
refactor CylinderRegion to use Vector2D instead of Vector2D to improve code readability and maintainability
refactor TestBadUseCases to use ExpectedException instead of Assert for improved error handling to enhance code clarity and maintainability by centralizing expected
added null checks for subqueries in QueryExecutorImpl . java and a new test for multi - execute in StatementTest . java to ensure proper handling
added a conditional check for customized security environments in Installer . java and SecurityModel . java to ensure proper handling of security environments based on
updated the ` rcprop ` parameter from ` android% 20app% 20edit ` to ` android% 20app% 20app% 20edit
refactor Test class for improved readability to enhance maintainability and maintainability of the codebase
updated the PBEKeySpec constructor to use keyLength instead of blkSize to improve clarity and maintainability of the code
remove beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta -
added a call to writeSectionDefinition ( ) in RtfDocumentHeader . java to ensure proper handling of section definition
added handling for location tracking in GpsLoggingService and updated accuracy checks in Maths . java to improve accuracy of location tracking and ensure accurate accuracy
updated text formatting in TableCellLayout , TableLayout2 , and TableLayout2 classes to improve code readability and maintainability
refactor DataLabelingServiceClient and DataLabelingServiceClient classes to improve code organization and maintainability
updated InsightFilter to use Reference < Object > instead of boolean for rootNameFn , sourceFilterFn , and sourceFilterFn to improve code
refactor code to simplify code and improve readability to enhance maintainability and maintainability of the code
replaced the ` ThemedPreferenceActivity ` class with ` PreferenceActivity ` and removed the ` ThemedPreferenceActivity ` class to streamline the code
updated the parameter name from " HostD " to " UsingUnresolvedD " in ValueTypeTests . java to improve clarity and consistency in naming convention
updated the assertion in the assertRootArcs method from ` assertRootArcs ( ) ` to ` assertRootArcs ( ) ` to
added a assertion to check if the Security policy does not exist and does not exist in JstatdTest . java to ensure that the security policy
added a method ` getConfiguration ( ) ` to ` Olingo2Component ` to provide a way to retrieve the configuration from the component
updated sleep duration from 1000ms to 5000ms in RecoveryZkTest . java to increase sleep time for improved performance
updated logging statement from ` e . getMessage ( ) ` to ` e . getMessage ( ) ` in ` MongoPersistentEntityIndexResolver . java `
added http file upload functionality to XMPPClient and XMPPActions to enhance user experience by providing feedback on HTTP images
camel - 14263 : camel - netty - fix nullpointerexception in camel - netty producer
updated JDBC URL patterns in BalancedClickhouseDataSource . java and added tests for valid and invalid host names in BalancedClickhouseDataSource
added a property to disable JSR 199 in FragmentActivator . java to ensure compatibility with JSR 199
added null string handling to CSVRecordReader and its configurations in CSVRecordReaderConfig to ensure proper handling of null values in CSV output
added LiquibaseService annotations to multiple connection classes to skip the Liquibase service in the database
updated variable name handling in VariableNameUtils . java to use JavaSourceFile instead of J . CompilationUnit to improve clarity and consistency in handling JavaSourceFile
refactor topic handling in ItemCommandTriggerHandler and ItemStateTriggerHandler to use a separate topic variable to improve code readability and maintainability by
replaced ` BeanCurrentlyInCreationException ` with ` BeanCreationException ` in ` TraceWebAutoConfiguration . java ` to improve code clarity and
updated SolrXmlConfig to include " zkCredientialsProvider " and " zkCredentialsProvider " in multiple files to improve clarity and maintainability
refactor itemManaTablet . java to use super . getDurabilityForDisplay method to improve code readability and maintainability by
added a method to set the identifier collection in P25P2DecoderState . java to ensure the current call event is properly initialized
removed unused imports for HyphenationCompoundWordTokenFilter and DictionaryCompoundWordTokenFilter in TestRandomChains . java to streamline code
replace ""% d " with " deriveKeyWithScrypt " in ScryptUtil . java to improve code readability and maintainability
refactor GeneratedCode class to improve code organization to enhance maintainability and readability of the code
added a null check for the definition parameter in TypeDefinitionRegistry to ensure that the definition is not null to prevent potential NullPointerExceptions
updated import statements from ` DisplayUtils ` to ` DisplayUtils ` for shareWithMeIcon ` in ` LocalFileListAdapter . java ` to
updated link paths in DefaultLogoutPageGeneratingFilter , LogoutPageGeneratingFilter , and LogoutPageGeneratingWebFilter to include the crossorigin link
updated import statements and modified headers handling in RouterFilter and RouterServerListFilter classes to ensure proper handling of null headers and improve code clarity
updated assertions in TestIndexWriterMergePolicy to include segmentCount and index in the segmentCount parameter to improve clarity and consistency in test assertions
added @ Deprecated annotations to multiple Java classes to indicate that these classes are outdated and should no longer be used
updated context handling in CrawlerSessionManagerValve and added a new test for multiple contexts context aware in TestCrawlerSessionManagerValve to
added security check for JspApplicationContext in JspFactoryImpl . java to ensure proper access control for JspApplicationContext instances
updated the calculation of ` l ` and ` maxL ` to ` minL ` and ` maxL ` in ` RocketComponentConfig `
updated NonceService and OpenIDAuthenticationProviderModule to include Scopes . SINGLETON in NonceService to ensure compatibility with SINGLETON
added a new method to update child links in FileWrapper . java to ensure child links are updated based on user context
removed the HttpMethod parameter from the doExecute method and updated the real URL handling in SpringCloudPlugin . java to improve code readability and maintainability
updated the publishWithDelay method parameters from 100 to 500 in RetrievalBlockingMessageStoreTests . java to improve clarity and maintainability of the publish
added a boolean variable ` mShiftCodesAlwaysOverride ` and modified the handling of ` mShiftCodesAlwaysOverride ` to improve code readability and
[ hotfix ] [ nodeclustercoordinator . isleader ( ) return true if the node be already the leader .
updated conditional statement in NearbyActivity . java to improve code readability and maintainability
updated the condition for filtering identity names in AbstractKerberosDescriptorContainer . java to ensure that the identity is not reference to avoid potential NullPointerExceptions
updated the ` newInstance ` method to accept a ` noop ` parameter instead of ` AbstractCommandOptions ` to enhance the flexibility of the ` noop `
added a sleep timeout for InterruptedException in TestListenTCPRecord . java to ensure proper handling of IOException and InterruptedExceptions
updated the initialization of ` methodCall . arguments ` to use ` originalArgs ` instead of ` arguments . toArray ( new Expression [ 0 ] )
replaced ` Map ` with ` Set ` in ` RawNativeLibraries ` and updated library loading logic in ` NativeLibrariesTest ` to improve code clarity
added support for " ignore - send - failures " in the ` DefaultRouterParser ` and ` AbstractChannelNameResolvingMessageRouter ` to
removed the ` x509PublishUrl ` field from ` ClientKeyPublisherMapping ` , ` ClientKeyPublisherMapping ` , and ` XwkView
refactor readers assignment logic in QueryComponent . java to use an array instead of a single reader variable to improve code readability and maintainability by
refactor ValueSourceParser to use Double2Parser for maximum and min values to improve code readability and maintainability
removed the conditional check for non - focused pointer events in the Container class to simplify the code and improve readability
removed unused variables from Highlighter , SpanGradientFormatter , and TokenSources classes to simplify code and improve readability
replace ` VlanDao _ vlanDao ` with ` UUID ( ) ` in ` ConfigurationServerImpl . java ` and ` INSERT INTO `
added ConditionalOnWebApplication annotation to CasMultifactorAuthenticationWebflowConfiguration and updated CompositeProviderSelectionMultifactorWebflowConfigurer to use ObjectProvider
updated ` WriteJdbcPTest ` to use ` ResultSetMetaData ` instead of ` tableCounter ` and ` tableCounter ` and ` listRemainingConnections
removed redundant code from DefaultPlatform . java to simplify code and improve readability by eliminating unnecessary code
replaced calls to ` getStateEntity ( ) . getDesiredState ( ) . getDesiredState ( ) . getDesiredState ( ) ` with `
refactor margins calculation in FloatingTaskView . java to improve code readability and maintainability
updated status line handling in RootFolder . java and updated setStatusLine method in NavigationShareTab . java to improve code readability and maintainability by
updated threadId assignment from 0 to threadId in CPUCallGraphBuilder . java to improve code readability and maintainability
updated the default perspectives from " 0 " to " defToolbar " in the Perspectives array to improve clarity and maintainability of the layout
added NetworkAddressChangeListener to HomekitImpl and updated log messages in HomekitImpl to enhance network address management and improve logging clarity
replace LeaseManager with long leaseRenewalTime in TestHDFSEventSinkOnMiniCluster . java to improve lease retrieval accuracy and ensure accurate
updated properties in CxxLibraryDescription to use ` Optional . absent ( ) ` instead of ` SourcePath > ` to improve clarity and maintainability
added null check for exception message in ExceptionHandlerRegistryFactory . java and added a new test for fatal IOException handling in ExceptionHandlerRegistryTest . java
refactor DirectoryTaxonomyWriter to use volatile int instead of synchronized to improve thread safety and maintainability of the code
updated JmsQueueCompositeSendReceiveTest and VmTransportNetworkBrokerTest to use a Wait condition to improve test reliability by ensuring all messages are
added a new interface ` HasSourcePath ` to ` AbstractThinArchiveArg ` , ` FileListableLinkerInputArg ` , and
replaced StringBuffer with string concatenation in Arrays . java to simplify error handling and improve code readability
added a default index field name to the OrdinalMappingAtomicReader and updated tests in TestOrdinalMappingAtomicReader to ensure that the index field is
updated millisecond calculation logic in Instant . java and added a new test for epoch millis calculation in TestInstant . java to improve accuracy of millisecond calculation and
updated variable names from ` getBufferType ( ) ` to ` getBufferType ( ) . name ( ) . name ( ) ` in multiple renderer classes
added a boolean variable ` scriptsBlocked ` to ` CopyPaste . java ` to enable block update scripts based on the app ' s state
added a new Java file ` TestCMoveLimitType . java ` that implements a new class ` TestCMoveLimitType . java ` to
added a method ` contains ` to ` ChannelState ` , ` RecordConfiguration ` , and ` AudioPacketWaveRecorder ` to ensure proper handling of
camel - 14263 : camel - sql - parser : fix bug in camel - sql - parser
updated vendor string from " Sun Microsystems " to " Oracle Corporation " in RealTimeSequencer . java and AudioSystem . java to reflect the
refactor color handling in ` Main . java ` and ` VersionCommand . java ` to use ` makeCustomConsole ` for VersionCommand to improve
refactor token validation logic in InputStreamBinder and NextcloudRequest classes to use EncryptionUtils to improve code readability and maintainability by centralizing
added EOFException handling for EOF input in Http11InputBuffer . java to ensure proper handling of EOF exceptions during input processing
added unit tests for deleting non - existent groups in DefaultGroupProviderTest . java to ensure correct behavior of deleting non - existent groups
replace new Object [ ] with new Object [ ] in multiple classes to improve code readability and maintainability by reducing redundancy
deleted the V2ReplicationProtocol . java file to remove unused code to streamline the codebase
replaced ` BuildRule ` with ` SourcePath ` for compileTimeClasspathDeps and ` compileTimeClasspathSourcePaths ` in multiple Java classes to simplify
added new classes ConstructorArgsDemo and FinalDemo classes and modified StupidFinal and StupidFinal classes to include a default secret variable to
refactor DirectTemplateFeatureCollectionFactory to use ThreadLocal for closing TemplateFeatureIterators and improve resource management to enhance performance and maintainability of the iterator
updated assertions in WriteResponseHandler to check if responseCount < = 2 * DatabaseDescriptor . getReplicationFactor ( ) is greater than 2 * DatabaseDescriptor
added null check for getIndexNumber ( ) in ItemRowAdapter . java to avoid potential NullPointerExceptions when getIndexNumber ( ) is null
replaced ` showAnchestorsShown ` with ` showAncestorsShown ` and ` showAncestorsShown ` in multiple classes to improve code
added a check for the width of the app in KBBase . java to prevent potential errors when the app is too far than 12
updated comparison logic in ChangeLogParameters . java and added a new test for value equality in ChangeLogParametersTest . java to ensure proper comparison of
changed the visibility of the loggers map from static to final to allow dynamic access to the loggers map
updated the return statement from ` p . getBasePlot ( false ) ` to ` p . getBasePlot ( false ) ` to ensure that the plot
updated createUploadDir method calls to include a boolean parameter for initial creation to enhance flexibility in upload directory creation based on configuration
added a boolean parameter ` sendStatus200 ` to the ` ServerGenerator ` and ` ServerFCGIConnection ` classes and updated related constructors to
added a check for the length of the comment in the space condition to ensure that the space is only processed when the comment length is zero
added imports for BuckFileType and modified file type management in BuckModule . java to enhance file type management and ensure proper association management in the
updated import statements in ComposedUtil . java for consistency to improve code readability and maintainability
added a new constant ` RTM _ OS _ ERROR ` and updated error messages in ` TestUseRTMLockingOptionTest ` to improve
refactor AccountsActivityTest to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor Player class to improve code readability to enhance maintainability and maintainability of the code
added a static import statement for ChannelTypeUID in AbstractModbusOSGiTest . java to ensure proper class loading of ChannelTypeUIDs
updated the loop condition from nextElementIndex to index in PolyglotExceptionImpl . java to improve code clarity and maintainability
added a reset method to AndroidTestEnvironment and ShadowFontsContract to reset the system context in AndroidTestEnvironment and ShadowFontsContract to ensure
added a method to convert timestamps to milliseconds in TimeGranularity and updated related logic in PinotDataSourceMaxTime to enhance time calculation
added null checks for ` tryBodyAnalysis ` and ` finallyAnalysisFromContinueFlow ` in ` ControlFlow . java ` to prevent potential NullPointerException
updated assertions in Assert and ArrayEqualityAssertTest to check if the expected array size does not match the expected array size to improve error handling and ensure
updated the ` WindowClickLogic ` to return ` default ` instead of ` slotItem ` in ` WindowClickLogic . java ` to improve code
updated the index calculation in MeshBuilder . java to ensure consistency in indexing logic
nifi - 132 : remove controllerserviceprovider from processcontext in standardprocessscheduler
added support for AP _ PROCESSORS _ ARG in KotlincToJarStepFactory and updated KotlincToJarStepFactory to
updated RESCROLL _ DELAY constant from 750 to PAGE _ SNAP _ DURATION 150 in DragController . java , PagedView . java ,
added a boolean variable ` mHasShortcutHostPermission ` and updated shortcut handling logic in ` LauncherModel ` and ` DeepShortcutManager ` to
added case statements for HISTORY _ SEARCH _ BACKWARD in ConsoleReader . java to improve code readability and maintainability
added null check for core name in CoreAdminHandler . java and improved error handling in CoreAdminHandlerTest . java to ensure proper handling of null
added marker selection functionality to the NearbyMapFragment class to ensure that the bottom sheet details are deselected when the marker is selected
added exception handling to the FileSyncAdapter class to ensure proper logging of stack traces when exception is thrown
refactor TestMemoryAwareness . java to use OutputAnalyzer for better error handling to improve code readability and maintainability by ensuring proper exception handling
updated the refill method from ` refill ( ) ` to ` refill ( ) ` in ` FeedQueues . java ` to ensure
updated DefaultDrmSession and DefaultDrmSessionManager classes to include playback thread handling to enhance session management capabilities for better debugging
updated ` PackageType ` to use ` Locale . US ` instead of ` toUpperCase ( ) ` in ` AndroidBinaryDescription ` and added a method
updated XML MIME variable names from " text / xml " to " application / xml " in multiple test files to ensure consistency and correctness in XML
updated the initialization of ` confFile ` to use ` INSTANCE . confFile ` instead of ` INSTANCE . confFile ` to improve code readability
removed sleep 5 from the waitUntilReadyAndTimeout call in HostPortWaitStrategyTest . java to improve code readability and maintainability
updated the ` getGroupingIdValue ` method to use ` longMath ` instead of ` intMath ` to improve clarity and maintainability of the
added checks for empty headless exceptions in Toolkit . java to ensure proper handling of headless exceptions
added a condition to check if the current recipe matches the world in ExoflameFurnaceHandler . java to ensure that the recipe matches
added a ` moveThreadCountDescription ` parameter to ` DefaultSolver ` and updated logging messages in ` DefaultSolverFactory ` and ` DefaultSolverFactory
updated path retrieval logic in SearchBuilder . java and added a new test in FhirResourceDaoR4SearchNoFtTest . java to
added a new test file ` Issue582Test . java ` with a new test class ` Issue582Test . java ` to verify the
added tests for Decimal overflow and Division by zero in AbstractTestNativeGeneralQueries . java to ensure proper handling of decimal overflows in the application
refactor LoadingCache class for improved readability to enhance maintainability and maintainability of the code
added a rule to ignore non - constructor methods with class names in NamingRulesTest . java to ensure proper handling of non - constructor methods with class
added error handling for StaleElementReferenceException in ExpectedConditions . java to improve robustness by handling StaleElementReferenceExceptions
added a method ` hasView ` to ` DatabaseSnapshotGenerator ` and updated related methods in ` JdbcDatabaseSnapshotGenerator ` and ` JdbcDatabaseSnapshot
refactor DOMUtil class to improve code readability to enhance maintainability and maintainability of the code
added a new method ` logMatrix ` in ` TaskViewUtils ` , ` Utilities ` , and ` LogMatrix ` in ` Utilities ` to
updated FLAG _ ENABLE _ FIXED _ ROTATION _ TRANSFORM from true to false in FeatureFlags . java and RotationHelper .
added a walk method to the TempFSTTermsReader and modified the TempTermOutputs classes to improve the handling of arcs in the Temp
added SolrQueryRequest parameter to DocIdAugmenterFactory , ShardAugmenterFactory , and ShardAugmenterFactory classes to enhance query request handling for
added SQL statement handling to SingleTableMySQLTriggerTest . java to ensure proper handling of null values in SQL queries
replaced the ` comparator ` variable with a ` setComparator ` method in ` FieldValueHitQueue ` and updated its usage in ` TopFieldCollector
updated SQL query prefix formatting in PhoenixQueryBuilderTest . java to improve clarity and consistency to enhance code readability and maintainability
added Spark . awaitInitialization ( ) method to the init method in RequesterTest . java to ensure proper initialization of the Spark instance
added methods to save and save total storage pools in DynamicPropertiesStore . java to ensure proper handling of total storage pools in the database
added an NinjaProperties parameter to AssetsController and updated AssetsControllerTest to include an NinjaProperties parameter to enhance file handling
updated the method call to use getMapMarkKey instead of getMapMarkKey to ensure the correct key is used for map marks
added token rewrite stream parameters to the getDefaultValue method in BaseSemanticAnalyzer and DDLSemanticAnalyzer classes to enhance token rewrite functionality by allowing token rewrite
updated the ` parse ` method to accept a ` List < String > ` instead of ` IOException ` to improve error handling and ensure proper error handling
updated file path handling in JxBrowserManager . java and added error handling in FileUtils . java to improve clarity and maintainability of file path handling
added a check for AppVersion in IOSImplementation . java to check if the key is " AppVersion " or " AppVersion " to ensure
updated logging level from 'BridgeUID ( ) ' to 'UID ( ) ' in SomfyTahomaBridgeHandler . java to improve
[ hotfix ] [ test ] disable flaky test on github
refactor OpenWireConnectionTimeoutTest and OpenWireConnectionTimeoutTest to use static constants for SSL configuration to improve code readability and maintainability by
updated WarnThenDebugLogger to use nanGaugeWarnThenDebugLogger instead of Stream < Meter > instead of Stream < Meter > to improve
added a call to remove the session id in the SessionManager class to ensure that the session id is removed from the session information
added host name setting for alerts in HeartBeatHandler and AlertReceivedListener to ensure alerts are set when the hostname is null
refactor the loop logic in ChannelEndPoint . java to return a boolean instead of a boolean to improve code readability and maintainability
updated URL reference from " org / kie / kmodule . xsd " to " org / kie / api / kmodule . 
added a new test method ` seekTo ` in ` ShadowMediaPlayerTest ` and implemented a ` seekTo ` method in ` ShadowMediaPlayer ` to
updated method signatures in DefaultGraphTransformationEngine , DepsAwareExecutor , and JavaExecutorBackedDefaultDepsAwareExecutor to use createThrowingTask
added a conditional check for AQUA _ LAF in CloseButtonTabbedPane . java to ensure proper rendering of the closing button
refactor TSPTimeStampService and TestSignatureInfo to utilize huc . setConnectTimeout ( 20000 ) and huc . setReadTimeout ( 2000
added a classloader parameter to the XStreamUtils class and modified the createXStream methods in XStreamUtils . java to enhance the flexibility of X
added error logging for unsupported types in Attr . java and added DiamondRaw class with a new DiamondRaw class to improve error handling and provide clearer
updated the method signature of RelOptUtil from ` targetType ` to ` targetType ` in ` RelOptUtil ` and ` RelOptUtilTest `
updated require assertions in Http2Settings . java for clarity to improve code readability and maintainability
deleted the MapInterfaceTest . java file to remove unused files to improve code clarity and maintainability
added a try - catch block for IllegalStateException in the SessionsPoolTest . java file to ensure proper handling of IllegalStateException during session creation
updated JSON object handling in GeoJsonWMSBuilder . java to include start and end root object to improve code readability and maintainability
removed the setIndex method from the PopupMenuButton class to simplify the code and improve readability
added a method ` canCurrentlyManuallyUnstash ( ) ` to check if the state is unstashed to ensure that the
camel - 14263 : camel - core - camel - http : / / issues . apache . org / jira / browse / amq
updated the ` getEventMismatchMessage ` method to accept a boolean parameter and modified the ` getEventMismatchMessage ` method to use ` waitForExpectedCount `
added a new file ` HeaderFixer . java ` with a file ` HeaderFixer . java ` that implements a FileProcessor for handling header
added support for the first load complete action in Launcher and updated related logic in LauncherProvider to enhance user experience by allowing the first load complete
deleted the SuperJumperAndroid . java file to remove unused code to streamline the codebase
updated return statements in SystemTableScan and TestStarQueries to use table . isDistributed ( ) instead of table . isDistributed ( ) to ensure
removed the KeyValuesProvider , ObservationConvention , and KeyValuesProviderAware interface to streamline the implementation of KeyValuesProvider and ObservationConvention
added a new parameter ` missingBlocks ` to the ` processIdRematches ` method in ` Loader . java ` and ` PersistentRegistryManager .
change return values from ` base ` to ` base ( long ) i * scale ` in multiple classes to improve performance by using long values instead of
added cache handling for the last format string cache in HSSFCellStyle . java to ensure proper cache management and prevent potential null pointer exceptions
added a filter parameter to the response in RemoteAuthenticationEndpointTests . java to ensure proper filtering of user credentials
changed the condition from needsInput ( ) to finished ( ) in DeflateCompressor . java to ensure proper handling of input in the compression process
updated logging statements in Launcher . java to include container info and page index to enhance debugging capabilities for better debugging
remove beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta - beta -
deleted the DeadlockTest . java file to remove unused code to streamline the codebase
added null checks for newInput and updated marker handling in BugContentProvider and BugGroup to improve robustness by preventing potential NullPointerExceptions
added a new JMenuItem for reopening the browser in JavaScriptEditor and updated its usage in JavaScriptServer to improve user experience by ensuring the browser is
added a new error message for output specified multi - time output in the SemanticAnalyzer and SemanticAnalyzer classes to improve error handling and provide clearer
removed unnecessary runnable instantiation in BasicTest . java to improve code clarity and maintainability
added a check for the length of the coord array in CoordinateArrays . java and updated related tests in CoordinateArraysTest . java to ensure
updated the method name from ` setOpen ( ) ` to ` setOpen ( ) ` in ` ToolbarPanel . java ` to improve clarity
added a new variable ` first ` in ` TestPayloads . java ` to reset the first value to ensure proper initialization of the first value
refactor overview mode handling in Launcher . java to improve code readability and maintainability
added a call to ` msgDispatch . getDestination ( ) ` in ` NetworkRouteTest . java ` to set the destination of the messageDispatch
change return type from Integer . MIN _ VALUE to Integer . MAX _ VALUE in MessageHandlerInterceptorDefinition . java to improve code clarity and maintainability
updated loop values in NestedArithmeticTest and AMD64FloatConvertNode classes to improve clarity and maintainability of the test code
updated HttpClientRequestImpl to use a boolean parameter and modified buffer handling in HttpTest to improve code readability and maintainability by centralizing buffer handling
updated verbose level from " solr - analysis - " to " solr - analysis - " in GetMavenDependenciesTask . java to ensure proper handling of
pdfbox - 2471 : fix npe in pdfbox / pdfbox / pdfbox / pdfbox / pdfbox / pdfbox / pdfbox
removed system . out . println ( ) from ReferenceUtil . java to simplify code and improve readability
updated FieldVisibilitySchemaTransformation and VisibleFieldPredicate classes to utilize VisibleFieldPredicateEnvironment for query type handling to improve type safety and maintainability by
added support for solidity json rpc configuration in multiple classes to enable dynamic configuration for solidity configurations
added a check for the folder instance before removing the drop target to ensure that the drag target is only removed when the folder is an instance of DropTarget
refactor stub jar generation logic in StubJarTest . java to improve clarity and consistency to enhance code readability and maintainability by centralizing the
updated feature descriptions in StartPageTopComponent . java and added a new Workflow helper feature in StartPageTopComponent . java to enhance user experience
updated the scheduleWithFixedDelay method call in CassandraDaemon . java to improve clarity and maintainability of the schedule process
removed unnecessary casting of ` Boolean ` to ` Boolean ` in ` OnlineTestCase . java ` to simplify code by eliminating unnecessary casting
updated ReturnAttributes . NONE . value ( ) from NONE to ALL _ USER in LdapUserGraphicalAuthenticationRepository . java to ensure proper handling of
refactor error handling in HttpChannelState and HttpChannelTest classes to improve code readability and maintainability
updated CreateEndPoint implementation to implement Invocable . NonBlocking interface to ensure proper implementation of the CreateEndPoint class
updated table header separator patterns in TableBlockParser . java and added a new test for oneColumnOneHeadNoBody in TablesTest . java
updated the return value from 32 . 0f to 31 . 5f to ensure compatibility with the latest Camera version
added a preference for startonbootup in GpsSettingsActivity , Utilities , and GeneralLocationListener classes to enable the startup of the pro version
updated the value of the client secret from 128 to 512 in DefaultOAuth2ClientDetailsEntityService . java to ensure the client secret is consistent with
updated assertion messages in MySQLStoredProcedureTest , PostgreSQLStoredProcedureTest , MySQLStoredProcedureTest , MySQLStoredProcedureTest , and Post
added JUnit Ignore annotation to ScheduledMethodMetricsTest . java to temporarily disable Race condition still in tests
refactor ` getInputPinotFS ` and ` getOutputPinotFS ` methods in ` SegmentGenerationAndPushTaskExecutor ` and ` getOutputPin
added locale handling in TimeLineCursorAdapter , TimelineArrayAdapter , and TimeLineCursorAdapter , and TimelineArrayAdapter to ensure correct date
added imports for MetalLookAndFeel and MetalLookAndFeel in bug8032878 . java to enable the use of MetalLookAndFeel for better user experience
added a PreDestroy annotation and modified the pingAtRegularIntervals method in Bot . java to ensure thread safety and prevent potential memory leaks
updated the error message from ` getMessage ( ) ` to ` getMessage ( ) ` in the ` ShenyuResultWrap . error ` method to
refactor ` addReads ` and ` addExports ` methods in ` ModuleTable ` , ` ModuleTable ` , and ` PackageTable
added exception handling for CmdLineException in PinotAdministrator . java to improve error logging for exception handling
refactor equals and hashCode methods in Subject and Subject classes to use deprecated methods to improve code readability and maintainability by reducing redundancy
refactorPlaybackOverlayFragment and ImageButton classes to improve code readability and maintainability to enhance maintainability and maintainability of the code
updated zoom level min and max values from 20 to 24 in BasicMapViewer . java to ensure correct zooming behavior for map zoom controls
added process user and group identities to the DrillRoot class to enhance user management and ensure proper process user and group identities are used
replaced AccessController . checkPermission ( perm ) with sm . checkPermission ( perm ) in multiple classes to improve code readability and maintainability by centralizing
added argumentExtractors parameter to DelegatedClientAuthenticationAction and updated related classes to utilize it to enhance security by allowing argument extractors in the
changed defaultGroup from " default _ group " to " final " in NacosServerRegisterRepository . java to ensure proper initialization of the default group
replace ` tileCache . destroy ( ) ` with ` createTileCaches ( ) ` in ` TileSizeChanger . java ` to improve
removed redundant calls to ` addInfoRow ` in ` CustomPlaybackOverlayFragment . java ` and removed unused views in ` InfoLayoutHelper . java
replaced ` cleanEntriesForFeedsWithoutSubscriptions ( ) ` with ` cleanEntriesForFeedsWithoutSubscriptions ( List < Feed > )
removed the ` CoreAuthenticationTestUtils . getAuthentication ( ) ` parameter from the ` auth ` parameter in ` ImmutableAssertionTests . java ` to
nifi - 132 : use temporary folder instead of system . getProperty ( ' java . io . tmpdir ' ) for test
replaced ` l ` and ` m ` with ` e1 ` and ` e2 ` in ` AlgoConicFivePoints . java
replaced ` isEOF ( ) ` with ` isEOF ( ) ` in ` RandomAccessReader . java ` to improve readability and maintainability
added @ SuppressWarnings ( " vararg " ) annotations to Fields . java and MockitoBeforeTestNGMethod . java to suppress unchecked warnings for unused
added native method ` imageToArray ` and ` imageToArray ` in ` CImage . java ` and updated method signatures in ` CImage . java
replaced WritableByteArrayComparable with ByteArrayComparable in MapRDBFilterBuilder . java to improve code readability and maintainability
rename ` runtimeVisibleMethodOfFieldAnnotations ` to ` runtimeVisibleFieldOrMethodAnnotations ` in multiple classes to improve clarity and consistency in naming convention
replaced null checks with Objects . equals for improved readability to enhance code clarity and maintainability by using a more descriptive method
added ` @ Nullable ` annotation to ` resolveClassFromCanonicalName ` methods in ` ClasspathSymbolResolver ` and ` ClasspathSymbolResolver `
added assertions for location and not found in NinjaProperties in NinjaDefaultTest . java to ensure proper handling of location and not found
refactor updateAllAppsWidth method to updateAllAppsContainerWidth and update allAppsCellSize calculations in DeviceProfile and Invariant
updated timestampsViewPaddingBottom and request _ CODE _ CATEGORY _ NOTES from 25 to 27 in DetailFragment and ListFragment classes to
updated exception handling in ZkStateReader to use thread . interrupt ( ) instead of thread . interrupt ( ) to improve code clarity and maintainability
updated condition checks in HttpFields . java and added a new test for empty headers in RequestTest . java to ensure proper handling of null values and
added a check for static nat rules in IpAddressManagerImpl . java to ensure that static nats are not supported in the specified network model
added resetHeaderScrollingState ( ) method calls to OCFileListFragment . java to ensure proper handling of header scrolling state
added a call to removeExtraEmptyScreen ( true ) in the Launcher class to improve user experience by preventing unnecessary empty screens
added a boolean variable ` fixedWidth ` and modified glyph handling logic in ` BitmapFont . java ` to improve font rendering efficiency and ensure correct width
removed the ` showTitle ` parameter from the ` createFragment ` method in ` ChangeLogFragment ` and updated its usage in ` ChangeLogFragment
added preEvent , postTransition , and error handling methods in AbstractStateMachineFactory . java to enhance statemachine processing capabilities for better error handling
refactor ConfigDescriptionProvider class to improve code readability to enhance maintainability and maintainability of the code
updated role creation methods to include " role1 " and " owner " in multiple files to enhance role management and ensure compatibility with Windows environments
updated sorting logic in FacetComponent . java and added a new query method in TestDistributedSearch . java to improve clarity and maintainability of the
updated the ` PropertiesExpander ` to use ` getConfiguration ( ) . getDirectory ( ) ` instead of ` createOverridingProperties (
refactor DeleteInactiveReplicaTest to use a dedicated method for stopping replicas to improve code readability and maintainability by reducing redundancy
added a new parameter ` fileName ` to the ` FileActionsDialogFragment ` constructor and updated the ` FileActionsDialogFragment ` to include a ` fileName `
added INVALID _ DIRECTION constant and modified condition checks in CellLayout . java to improve code readability and maintainability by reducing redundancy
updated variable names from ' payAccountId ' to ' from ' ' and ' to ' to ' from ' and ' to ' to ' to '
added a method ` getExecutionIdForJobId ` to ` JobExecutionService ` and updated the ` SinkStressTestUtil ` to
added a new annotation interface EnableAdminClient to manage admin client configuration to enable the admin client based on the configuration package
refactor import statements in FindTypes . java to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a text color setting for the action text color in AuthenticatorActivity . java to improve user experience by allowing the action text color to be displayed
added ComparableField to multiple classes and updated related methods in StreamSupplierComponent , StreamSupplierComponent , and MockManager to enhance the functionality of ComparableField
replaced ` addTestStepsForBeforeHooks ` with ` createTestStepsForPickleSteps ` for consistency to improve code readability and maintainability
refactor test methods in StaticHandlerMethodResolverTests to use validNoArgMethod instead of invalidNoArgMethod to improve code readability and maintain
added a cancelClient method to the startDriver method in RpcServer and added a cancelClient method in RpcServer to ensure proper handling of client termination
added ` getImplicitPreCoercionValue ( ) ` method to ` SkylarkParamInfo ` and ` ReflectionParamInfo ` to
changed the ` lastDisplayedUser ` field from ` Optional < User > ` to ` Optional . empty ( ) ` to ensure that ` lastDisplayed
added an ` findAll ` method to ` QueryDslMongoRepository ` and updated related tests in ` AbstractPersonRepositoryIntegrationTests ` to enhance query
added null checks for SchemaRegionConsensusImpl and DataRegionConsensusImpl in DataNode . java to prevent potential NullPointerException
updated the switch statement in DefaultPlannerBenchmark . java to exit the warm - up loop in case of a failure to improve code clarity and maintainability
added multiple ` xread ` methods to ` MultiKeyPipelineBase ` , ` MultiKeyBinaryRedisPipeline ` , and ` MultiKeyBinaryRedis
replaced ` FIXME # MN ` with ` nextAdvance ` in ` LinkedBufferInput ` , ` StreamInput ` , and ` StreamInput `
added WebSecurityCustomizer annotation to CasWebAppSecurityConfiguration and updated CasWebSecurityConfigurerAdapter to utilize WebSecurityCustomizer to enhance security
added a new file TestJdbcWithDBTokenStoreNoDoAs . java with a new class TestJdbcWithDBTokenStoreNoDoAs .
added a new method ` registerProviderInternal ` to ` ShadowContentResolver ` and updated ` ContentProviderController ` to use ` ContentProviderController ` to
updated AttributeReader constructor to use ClassFile . Version instead of Version to ensure compatibility with ClassFile . Version
added a call to setKeepAlive ( ) in SingleConnectionManager to ensure that the connection is kept in the connection configuration
replaced ` unicastSenderFlowControl ` and ` multicastSenderFlowControlSupplier ` with ` unicastSenderFlowControlSupplier ` in multiple classes to
added a null check for the current point in the DrawLocus and GBasicStrokeD classes to ensure proper handling of null points in 2D
added exception handling for IOException in ChannelEndPoint and updated WebSocketGeneratorD13Test to ensure proper resource management and prevent potential resource leaks
http : / / issues . apache . org / jira / browse / amq - 421 - add screenshot option to the web client
updated assertions in ` ShadowCornerPathEffectTest ` , ` ShadowCornerPathEffectTest ` , ` ShadowCornerPathEffectTest ` , ` Shadow
remove deprecate contextreference in trufflelanguage . getcontextreference ( )
replaced ` Throwable ` with ` null ` in ` StubberImpl . java ` and added a new ` StubbingWithBadThrowablesTest `
updated condition checks in Actor . java and Group . java to throw an IllegalArgumentException instead of an IllegalArgumentException to improve error handling and provide clearer
updated LocationPickerActivity to use LocationPermissionsHelper for location access dialogs and updated camera position handling to enhance user experience by allowing users to navigate location
added a new file ` CounterMDB . java ` to create a new ` CounterMDB ` class to provide a configuration for the CounterM
added CookieSpecs import and set cookie spec in GetHTTP . java to enable custom cookie configuration for HTTP requests
updated the comparison logic in Intersector . java to use the overlaps method to improve code readability and maintainability
replace DeemphasisFilter with NonClippingGain in P25AudioModule . java and updated audio handling in AirspyTun
added monitoringUrl parameter to the ScrollingPanel constructor and updated constructor parameters in SystemInformationsButtonsPanel to enhance user experience by allowing monitoring URLs
removed the ` SERVICE _ CREATE _ TIMEOUT ` option from the ` KubernetesConfigOptions ` class to simplify the configuration for timeout creation
added a switch statement for " landmark " and " city " in NearbyListFragment . java and updated icon settings in NearbyPlace
added a null check for the package before processing to avoid potential NullPointerExceptions when the package is null
added a new file PrintInlining . java that prints arguments in the PrintInlining class to provide debugging information for debugging purposes
updated closing index and added a new test for nested braces in Javadoc to improve code clarity and ensure proper handling of nested braces in javadoc
[ java ] remove unnecessary initialization of publicationinitialtermid and publicationstarttermid from archivetest
updated the method call from ` getEdges ( ) ` to ` getEdgesAndMetaEdges ( ) ` in ` EdgeDataTable . java `
removed unused imports for ClassPathResource , ClassPathResource , and ResourceLoader in SpringResourceProperties , and PasswordManagementConfiguration to streamline code
updated playback speed logging in VideoManager . java to improve clarity and accuracy of playback speed information
added a cluster task to remove the LocalMUCRoom in MUCRoomController . java to ensure the cluster is only removed when the cluster is
updated AutoScalingHandlerTest . java to include cores instead of replicas to ensure compatibility with cores in the AutoScalingHandlerTest
added key flipY andGenerateMips settings to TextureHelper . java to enable generating Mips for texture keys
replaced ` ProjectBuildFileParser ` with ` CloseRecordingProjectBuildFileParser ` and added ` CloseRecordingProjectBuildFileParserDecorator `
added LibraryNormalizationPass to the J2clTranspiler class and created a new LibraryNormalizationPass class to enhance the handling of Library normalization passes
updated the ` nextResponseBodyConverter ` method to use ` responseBodyConverter ` instead of ` nextResponseBodyConverter ` in ` GuavaOptionalConverterFactory
[ hotfix ] [ runtime ] add @ VisibleForTesting annotation to memorymanager
added Temporal annotation to ConsoleSessionVO . java to ensure proper Temporal handling for timestamps
added new classes ` Hbs ` and ` HbsTest ` and ` HbsTest ` to handlebars to enable handling of Handlebars views
updated text visibility logic in ChatMessageAdapter to improve clarity and consistency to enhance code readability and maintainability by reducing duplication
updated the loop condition in ImportCsv . java to use values instead of keySet to improve code readability and maintainability
added a new test method ` waitsUntilAlertDialogAppears ( ) ` to ` AlertTest ` and modified ` ConfirmTest ` to
added a check for distinct column indices in ReduceSinkDeDuplication . java to ensure proper handling of distinct column indices
refactor MiscUtils to improve code readability and maintainability to enhance maintainability and maintainability of the code
chore ( deps ) : upgrade gapic - generator - java to 2.1 . 0 and update gax - java to 2.16 . 0 (
updated maven bundle groupIds in TestOSGiUtil . java for consistency to improve code readability and maintainability
replace ` collect ( Collectors . toUnmodifiableMap ( ) ` with ` Collections . unmodifiableMap ( ) ` in ` SAMLAuthenticatedUser . java
added checks for modified sketch codes in Editor . java to ensure proper handling of modified sketch codes in the Editor class
replaced ` new Double ` with ` getDeclaredConstructor ( ) ` in multiple Java files to simplify code and improve readability by using a more descript
updated the method call from ` getDate ( colName ) ` to ` getTimestamp ( colName ) ` in ` JdbcDataSource . java ` to ensure
added a check for javax . naming . Context in HtmlJndiTreeReport . java to ensure compatibility with javax . naming . Context in the
updated the ` createDefaultDbOptions ( ) ` method to use ` Options ` instead of ` Options ` in ` StorageUtils . java ` to
updated edge type comparison from " double " to " mutual " in ImporterGEXF . java to ensure consistency in edge type comparisons
removed the FLAG _ SLIPPERY constant from StatusBarTouchController . java to simplify the code and improve readability
updated the calculation of stableDimensions and array dimensions in TruffleConstantFieldProvider . java to improve code readability and maintainability
added functionality to retrieve Google Drive folder path from preferences to enhance user experience by allowing users to specify the Google drive folder path in the application
add a shuffle suggestion to the radio tree item and add a new method ` shuffleSuggestions ` in ` DrawEquationWeb ` to allow users to
added @ Nullable annotation to the assertThat methods in Truth . java to enhance type safety by allowing null pointer exceptions
updated array size calculation in ArrayUtil . java for better performance to improve performance and maintainability of array size calculations
added a new file ` ApiExceptionTest . java ` and modified ` ClassInstrumentor . java ` and ` ClassInstrumentor . java ` to include
added a method ` waitingForAnticompaction ` to ` StreamInManager ` , ` StreamOutManager ` , and ` StreamOutManager
added ` isKeyguardSecure ` and ` setIsKeyguardSecure ` methods to ` ShadowKeyguardManager ` and ` ShadowKeyguardManager
updated the serialVersionUID value from 59985277998L to 440496478513748L to ensure compatibility with the latest
updated regex patterns in GrblUtils to replace ' > ' with ' > ' and added a conditional check for 3 parts to ensure proper handling of
rename ` assertEmptyThrowsMutipleFailureExceptionForManyThrowables ` to ` assertEmptyThrowsMultipleFailureExceptionForManyThrowables
modified the ` checkDrained ( ) ` method from ` checkDrained ( ) ` to ` checkDrained ( ) ` in ` FileSystem
updated LIGHTS _ NUM and LIGHT _ INTESITY and LIGHT _ INTESITY from 4 to 8 in HybridLightTest
replaced ` FakeProjectFilesystems . createProjectFilesystem ( ) ` with ` getProjectFileSystem ( ) ` in multiple test files to streamline filesystem initialization
replaced ` new ` String ` with ` PathWithLines ` in ` RuntimeOptions . java ` and ` CucumberFeature . java ` to
refactor Gson , JsonArray , JsonObject , and JsonObject classes to improve code organization and maintainability
updated TEST _ DIRS array to use a TODO 2022 . 1 to improve code readability and maintainability
added a call to Shadow . directlyOn ( realObject , ParcelFileDescriptor . class ) . close ( ) in ShadowParcelFileDescriptor . java
added a method call to reset the prefix index in Stylesheet . java and modified BasisLibrary . java to improve code readability and maintainability
added logging level annotation to TestDistributedStatsComponentCardinality . java to enable testing of server connection logging
added ` throwIfImmutable ( ) ` to ` throwIfImmutable ( ) ` method in ` IntList . java ` to ensure proper handling of
added @ NotNull annotations to ` GrpcServerRunner ` , ` GrpcClientBuilder ` , and ` UnitTestReadHelper ` classes to enhance
replaced ` Graal . java ` with ` Supplier < Path > ` in ` graal . java ` and replaced ` Graal . java
update InsightInstrument and InsightPerContext to use synchronized functionsArray and improve function handling in InsightObjectTest to enhance thread safety and
added handling for line endings in the manifest file in GenerateManifestStep . java to ensure proper handling of line endings of manifest files
updated priority assignment from low _ LOW _ PRIORITY to high _ LOW _ PRIORITY and added a new class RFE353116
added ` @ Nullable ` annotation to ` getConfigDescription ` methods in ` ConfigDescriptionRegistry ` , ` ThingResource ` , and ` Thing
replace Throwable with RuntimeException in MasterJobContext . java to simplify exception handling and improve code readability
added initialization of crop boxes in PageDrawer . java to ensure proper handling of crop boxes in the PageDrawer
refactor ManagerBase class to improve code readability to enhance maintainability and maintainability of the code
added a new boolean flag ENABLE _ ALL _ APPS _ IN _ TASKBAR to FeatureFlags to enable accessing all apps from the
refactor FragmentActivity initialization to use ActivityController for ActivityController to improve code maintainability and streamline activity management
replaced ` getFileCoordinates ` with ` processFileCoordinates ` and added ` getDecimalCoords ` method in ` FileProcessor ` and ` ShareActivity `
updated class names from ABCASE1 _ 1 to TestABCASE1 _ 2 and ABCASE1 _ 2 to ensure consistency in naming conventions
updated method names from ` num ` to ` value ` in ` saveEnergyPriceHistoryDone ` and added null check for ` value ` in `
added a call to doSimsChanged ( ) in OpenRocketViewer . java to ensure proper handling of Sims changes in the
added a new file ` ChangeDependencyGroupIdAndArtifactId . java ` that implements a recipe for changing Maven dependency groupId and artifactId to improve code clarity
added check for indexable segments in IndexingJob and SegmentChecker classes to ensure segments are only added when the input path is not a segment
updated the condition in GCObjectHeapIteratorAddressOrderedList _ V1 . java to use ` lte ( scanPtrTop ) ` instead of
replaced ImmutableMap . Builder with ImmutableMultimap for replacementPaths and pathToSourcePathMap in PreprocessorDelegate . java to improve error handling and ensure proper handling
rename JsonExamples class to Examples in JsonExamples . java and package - info . java to improve clarity and consistency in naming conventions
added debug logging statements and logging statements in ViewExtractor . java to enhance debugging capabilities for copying and copying jar files
refactor FindsByLinkText class to improve code readability to enhance maintainability and maintainability of the code
added a new file ` Main . java ` to handle oop entry point hit in ` com . facebook . buck . oop _ javac
added synchronization to the cSeqHeader variable and modified the retry handling logic in the SipRegistrarConnection to ensure thread safety and ensure thread safety during the
removed unnecessary calls to ` continue ` in ` NativeScanner . java ` to streamline code and improve readability
removed the test package from the RendererConfigurationTest . java to simplify the package structure and improve readability
replaced ` ImmutableSet . Builder ` with ` Supplier < ImmutableList < BuildRule > ` in ` AndroidLibraryDescription . java ` to improve code clarity and
updated the count method from stream ( ) to size ( ) in DistBuildArtifactCacheImpl . java to ensure correct size of remoteContainsResults
added charset handling for content encoding in ExtractingDocumentLoader to ensure proper encoding handling and prevent potential NullPointerExceptions
updated SQL queries in DatabaseConfig . java to use long values instead of string concatenation to improve clarity and consistency in SQL query execution
added a check for the slot in PlayerInventory . java and updated WindowListener . java to return if the slot is - 1 to ensure proper handling
added ` ignoreTransitiveRepositories ` option to ` DefaultMavenExecutionRequest ` , ` MavenExecutionRequest ` , and ` DefaultRepositorySystemSessionFactory `
removed the @ Inject BackgroundJobManager annotation from ContactsPreferenceActivity . java to simplify the code and improve readability
updated ColorsActivity to extend AppCompatActivity instead of Activity to ensure compatibility with the latest AppCompatActivity
added null check before closing the selection in NIOTransport . java to prevent potential NullPointerExceptions when closing the selection
added a check for the start and end of the string in NativeRegExp . java to ensure proper handling of regexp characters in the regexp
updated the @ IntegrationTest annotation in MvcITest . java to set the server port to 0 to ensure that the test uses the correct server port
added a new ` UDFReverse ` class and a new ` UDFReverse ` class in ` FunctionRegistry ` and created a ` UDF
replaced calls to ` getContextPathEncoded ( ) ` with ` getRequestContextPath ( ) ` in multiple classes to simplify code and improve readability by
refactor Tracer class to improve code organization to enhance maintainability and readability of the code
added JUnit @ Ignore annotation to RocksDBStateBackendReaderKeyedStateITcase . java to temporarily disable test cases
updated import statements in XMLChangeLogParserTest . java for consistency to improve code readability and maintainability
replace UnsupportedOperationException with synchronized synchronization in StarTreeRecordStoreCircularBufferImpl . java and add a new test method in TestStarTreeRecordStoreCircular
updated forecastMinutes and forecastDays from 6 to 60 and 48 in OpenWeatherMapOneCallHandler . java to improve accuracy of forecast minutes and hours
updated test cases in AbstractPageOperationTemplateTest . java to improve test coverage for previous fetch time and request times to enhance test accuracy and ensure accurate
added logging for splitTaskIds in RemoteTargetGluer and FloatingHeaderView to improve user experience by providing clearer feedback when splitTaskIds
updated the ` parseRerunFile ` method to use ` Stream ` instead of ` splitAndMap ` and ` splitAndThenFlatMap `
added new items for livingwood and livingwood blocks and biomes in BotaniaCreativeTab . java to enhance the functionality of the Botania creative
updated assertions in TestRadioButtons . java for consistency to improve code readability and maintainability
added support for number of file sizes in RCFileCat and RCFile classes to enhance file size handling and improve code clarity
refactor multiple clustering coefficient and TriangleListing , TriangleListing , and AdamicAdar classes to improve code organization and maintain
added tests for MXNet NDArray handling in JnaUtils . java to ensure proper handling of MXNet NDArrays
refactor BlobServer class to improve code readability to enhance maintainability and maintainability of the code
added a new test class ` Foo ` in ` UnusedPrivateMethodRuleTest ` and modified the ` UnusedPrivateMethodRule ` to include
refactor lexical scope assignment to use lexScope instead of lexicalScope to improve code readability and maintainability
added a new test method ` testAutoStartup ` to ` InboundChannelAdapterParserTests . java ` to ensure proper handling of auto - startup
added methods to retrieve and retrieve the current level and item boundables in multiple classes to enhance functionality and maintainability of the SpatialIndex constructor
updated version parsing logic in Version . java to check if the version is isDigit ( ) or isDigit ( ) to ensure proper handling of minor and minor
added a check to ensure tags are not empty before adding them to activeItem to prevent potential NullPointerExceptions when no tags are available
added a ` parseDateTimeStringToEpochMillis ` method to ` DateTimePatternHandler ` , ` DateTimeFunctions ` , and ` FromDateTime ` to
updated the ` disassemble ` method to use ` disassembleForCache ` instead of ` SharedSessionContractImplementor ` and added a new `
refactor Log4j2ConfiguratorServlet class to improve code readability to enhance maintainability and maintainability of the code
replace HiveException with AuthorizationException in StorageBasedAuthorizationProvider . java to simplify exception handling and improve code readability
updated CGoCompileStep to use String . join ( " CC " ) instead of string . get ( 0 ) and added a new test for
added a Buildable annotation to CustomResource . java to enable support for kubernetes builders
removed the @ Override annotation from the Only class to improve code readability and maintainability
added TIMEOUT _ THREE _ HOURS constant and modified HTTP connection timeout handling in HttpClientFactory . java to ensure proper timeout handling for HTTP connection
added " nonresolving _ raw _ target _ node _ parse _ pipeline " and " configured _ raw _ target _ node _ parse _
refactor ` SeleniumServer ` to use ` enableTrace ` and ` enableTraceMapping ` to improve code readability and maintainability by centralizing
removed the @ Singleton annotation from ApplicationController . java to simplify the code and improve maintainability
refactor username retrieval logic in ShareActivity to use a try - catch block to improve code readability and maintainability by centralizing username retrieval logic
added a new test method ` testResumePausedInstance ` in ` JobLauncher ` and a corresponding test in ` SimpleJobLauncherTests ` to ensure
added null check for cacheConfig before accessing it to avoid potential NullPointerExceptions when cacheConfig is null
refactor DockerSession class to public and improve import statements in LocalNode and LocalNode classes to enhance encapsulation and maintainability of the
refactor package name retrieval in CompilationUnitContext to use a constant for better readability to improve code clarity and maintainability by centralizing package name
pdfbox - 2892 : fix pdfparser to use nonsylylpdfparser instead of pdfparser
refactor DistributedLanczosSolverCLI to improve code readability and maintainability to enhance maintainability and maintainability of the code
refactor HttpServerTestBase class to improve code readability to enhance maintainability and maintainability of the code
refactor test assertions in PortletApplicationMapTest . java to improve code readability and maintainability
added unit tests for ` NestedBeanIgnoreNulls ` in ` BeanTableSchemaTest ` and ` NestedBeanIgnoreNulls ` to ensure proper
added a new interface ` RedissonAutoConfigurationCustomizer ` to ` RedissonAutoConfiguration ` and created a new ` RedissonAutoConfigurationCustomizer `
updated the loop logic in Indicator . java and added a new test class IndicatorTest . java to improve code readability and maintainability by
added ` execInContainerWithUser ` method to ` ContainerState ` , ` ExecInContainerPattern ` , and ` ExecInContainerPattern `
updated conditional checks for WebSocketByteListener and WebSocketTextListener in NettyWebSocket . java to ensure proper handling of WebSocketByteListener and WebSocketTextListener
added tests for attribute equality and negated attribute tests in SemgrexTest . java to ensure correct handling of attribute expressions in the Semgrex
added a broadcast message for the CLEAR _ PULL _ UNREAD activity in HomeFragment . java to improve user experience by providing a clear
removed the conditional check for PreGingerbread and overScroller initialization in TouchImageView . java to simplify the code and improve readability by
replace default profile validation support with default profile validation support
camel - 14263 : camel - core - camel - core - camel - spring - camel - core - camel - core - camel - core
added FloatingActionButton and FavoritesMenu functionality to ShareActivity to improve user experience by providing feedback when the street view is open
added a new InlineParslet class and updated the ToDateTokenizer to utilize a new InlineParslet for parsing format tokens to enhance
refactor TestAnonymousClassUnloading . java to improve code readability to enhance maintainability and maintainability of the code
updated error messages from " det " to " toppniv " to " toppniv " and " funktionstoken "
added a condition to check if the server is checked before binding to operations service to ensure proper handling of server connections when the server is checked
updated Position constructor to use ` getBeginColumn ( ) ` and ` getEndLine ( ) ` instead of ` getBeginColumn ( ) `
added waitFor ( ) method to CxxPreprocessAndCompileStep and ManagedThread classes to ensure proper resource management and prevent potential memory leaks
added a boolean flag ` requireAllRepositorySources ` to ` PrincipalAttributesProperties ` and created a new ` PrincipalAttributeRepositoryFetcherTests ` class to
changed access modifier of ` getApproximateMaxSizePerNode ( ) ` from ` checkIfLoaded ( ) ` to ` getApproximateMaxSize ( ) `
http : / / issues . apache . org / activemq / browse / amq - 261 - disable ssl protocol in webserver
replaced AtomicBoolean with AtomicReference in SetOnce . java and added a test for trySet method in TestSetOnce . java to improve thread safety and ensure
updated the return statement in QueryDslMongoRepository and added a new test for empty path expressions in SpringDataMongodbSerializerUnitTests to ensure
updated assertions in RoundRectBorderTest to improve clarity and consistency to enhance code readability and maintainability
added a check for empty cluster configurations before creating nodes to ensure that only empty cluster configurations are verified when there are no nodes in the cluster
deleted the ` ParallelTest . java ` file and added a new ` WebDriverTestThread ` class to streamline the test process and improve code clarity
updated latch and futures initialization in PrecompiledContracts . java and added a check for length < 65 to ensure correct handling of sign lengths and
modified the condition in ProcessInformationsPanel . java to check if the window is not empty to improve code readability and maintainability
replaced maxN and maxN methods with greatest methods in MoreCollectors . java to improve code readability and maintainability by reducing duplication
added null check for orderbook in BitmexStreamingExchange and refactored currency handling in BitmexManualExample to improve robustness by
added validation checks for lat , lon , and lat , and lon in GeoPointField . java to ensure proper handling of invalid lat and lon values
updated method signatures in OozieProxyImpersonator , WorkflowFilesService , and WorkflowFilesService classes to improve code readability and maintainability
refactor ResponderId class for improved readability to enhance maintainability and maintainability of the code
updated tableDocument instantiation to include a boolean parameter for dependent tables to enhance flexibility by allowing dependent tables to be added
added a check for ` COUNTER _ OF _ CONSECUTIVE _ UPLOADS _ WITHOUT _ COORDINATES `
added a new ` viewProfile ` method to handle profile data in the ` ProfileResources ` class to enhance the functionality of the ` viewProfile `
refactor property handling in JpaMetamodelEntityInformation to use DirectFieldAccessFallbackBeanWrapper instead of DirectFieldAccessFallbackBeanWrapper to improve
added tests for bootstrapLastDDLTimestampForTablesAndViews in ` UpgradeIT ` , ` ConnectionQueryServicesImpl ` , and ` 
added ` EarlyEofExceptionMapper ` and ` EarlyEofExceptionMapper ` to ` AbstractServerFactory ` and ` DropwizardResourceConfig `
added a new parameter ` false ` to the ` panel . metaData ` parameter in ` EntryEditor . java ` to set the default value to false
added owner pointer handling in nativeCreateNSWindow method to ensure proper handling of window creation when owner is null
updated SQL query for FILE _ REMOTE _ ID and FILE _ TABLE _ NAME in FileContentProvider . java to improve clarity and consistency in database
updated CIRCULAR _ PROGRESS from " CircularProgress " to " Stock " and added a new StockTileSkin class to enhance
replace null with String in readAsync and writeAsync methods in RedissonBucketsService and RedissonBucketsTest to enhance type safety and ensure
added the ` @ DetectorUnderTest ` annotation to multiple Java files and updated the ` @ DetectorUnderTest ` annotation in ` TypeFrameModeling
refactor back progress handling in LauncherBackAnimationController to use BackProgressAnimator for improved readability to enhance code maintainability and maintainability by
updated the ` _ initialPageNo ` variable and modified the ` _ initialPageNo ` variable in ` ContentLimitContainer . java ` to ensure
updated crc calculation in JedisClusterCRC16 . java and modified crc calculation in CRC16Benchmark . java to improve code readability and maintainability by
added comment handling in FormattedSqlChangeLogParser and updated related test cases in FormattedSqlChangeLogParserTest to improve comment parsing and ensure
replaced the instantiation of JarArchiver with a new instance of JarArchiver and added a method to set the archiver in AbstractJarMojo to
updated exception handling in DefaultClassUsageFileReader . java to use BuckUncheckedExecutionException instead of HumanReadableException to improve clarity and maintainability of exception
updated condition checks in TSServiceImpl . java and added multi - aggregation test in DaemonTest . java to improve code readability and ensure
added handling for UNSIGNED _ BYTE and UNSIGNED _ UNSIGNED _ BYTE in GwtGL20 . java to ensure proper handling of pixels
refactor test methods in OutputMemoryTest , PrintR , and VarDump classes to improve clarity and consistency to enhance code readability and maintainability
added exception handling for UnmodifiableClassException and modified exception handling in InlineBytecodeGenerator . java to improve error handling and ensure proper exception handling
updated TraceClassInitialization checks to replace ' / ' with ' . ' in multiple classes to improve clarity and maintainability of trace logging
updated the method call from ` queryLevelTimeoutMs ` to ` queryTimeoutMs ` in ` BaseBrokerRequestHandler . java ` to ensure consistency in
updated import statements and added Caffeine cache loading in TopicRouteService . java to enhance cache loading functionality and improve error handling for topic routes
added a readOnly parameter to the createDataSource method in MBTilesDataStoreFactory and updated DataSource initialization in MBTilesFile to ensure proper
updated regex patterns for invalid target release in FindBuildToolFailures . java and added Fatal error compiling in FailureLogAnalyzerTest . java to improve
added null checks for locationIntent in DetailFragment . java to ensure proper handling of location intents in the application
added null check for referencedIds in StandardParameterContextDAO . java to avoid potential NullPointerExceptions when referencedIds is null
refactor ClassLoader class to improve code readability to enhance maintainability and maintainability of the code
added a method to set the origin response header in the ProxyRequestHelper class to ensure proper handling of origin response headers
added a new ProfileSettingDrawerItem constructor to the GpsMainActivity to create a new ProfileSettingDrawerItem to enhance user experience by providing a
added support for XML validation in multiple classes to enhance XML parsing capabilities by allowing validation of XML attributes
added a new test method ` testJavascriptStringHandlingShouldWorkAsExpected ` to ` FileHandler ` and modified ` FirefoxDriverTestSuite ` to
added a ` maxRows ` variable and updated exception handling in ` IoTDBStatement . java ` to use ` int ` instead of ` int
refactor conditional checks in SqlStreamTerminator . java to use allActionsAreOptimizableFilters instead of isCountOptimizable to improve code
added event handling for node selection and mouse events in StandardVizEventManager . java to ensure proper event dispatching when selection mode is enabled
replaced Integer . valueOf with a zeroBuffer method in ManyToOneRingBuffer . java to improve code readability and maintainability by centralizing buffer
replaced ` xorGroup ` with ` memory ` in ` TerminalNodeMemory ` and added a method to retrieve the XorGroup to improve memory management
added getter methods for image height and width in LCDUIImageMonochromeBitmapSource . java to improve code readability and maintainability
refactor SourcePathResolver to use getPathPrivateImpl instead of PathSourcePath to improve code readability and maintainability by centralizing path retrieval logic
[ hotfix ] [ xml ] fix xmlparserencodeandparseidentifierdu2 ( ) method call in xmlparser
changed the visibility of the ` changeSchemeIfIsWebSocketUpgrade ` method from private to static in ` WebsocketRoutingFilter ` and added a new
updated file names from " suites - configs / " to " suites - configs - compile / " in LLVMPaths .
added a method ` getCxxPlatform ` to retrieve the CxxPlatform instance based on ` BuildTarget ` and ` arg ` to enhance platform handling
added import statements for IndexReader , IndexReader , and IndexReader in multiple Java files to improve code clarity and maintainability
added null checks for current and iterator bubbles in ConcurrentLinkedStack . java and updated related test cases in ConcurrentLinkedStackTest . java to improve
added ` isMatched ` and ` setMatched ` methods to ` BinaryHeapQueueTest ` , ` BaseQueueable ` , and ` BaseQueue
added a null check for mDirectories before initialization to prevent potential NullPointerExceptions when mDirectories is null
updated condition in RecentsView . java to check if the first layout is not enabled to ensure proper handling of overview state when the first layout is
added multiple package - info . java files for various lucene classes to ensure consistency and consistency in package structure
added a text field for the visible panel in AutoLevelerTopComponent to ensure the visible panel is displayed when the panel is visible
added function to call postOptimize callbacks in various update handler classes to ensure proper handling of post - optimized events in Solr
refactor decompressor initialization to use padded length instead of zero to improve code readability and maintainability
removed the check method call in Shaderc . java to streamline the code and improve readability
added a condition to check if the base isLocalMetaStore ( ) in RetryingMetaStoreClient . java to ensure proper handling of local meta
added null checks for hostStatus and ConnectionClosedException in HeliosSoloLogService . java to improve robustness by preventing potential NullPointerException
refactor Subject class to improve code readability to enhance maintainability and maintainability of the code
replace ConcurrentHashMap with ConcurrentReferenceHashMap for typeMap initialization to improve code clarity and maintainability by using a consistent reference type
updated color distance calculation in HSSFPalette . java and added a new test for findSimilar color in TestHSSFPalette . java
refactor multiple classes for consistency and clarity to improve code maintainability and maintainability
added unit tests for finding a single element by numeric ID in ElementFindingTest . java to ensure correct handling of numeric IDs in XPath library
added ` flags ` parameter to ` ShadowApplication ` and ` ShadowContextImpl ` classes and updated receiver registration methods to include ` flags ` parameter to
updated FFmpegTest to use InvocationOnMock instead of InvocationOnMock to improve test reliability and ensure correct versioning of ffmpeg tests
refactor Ogg and OggInputStream to use a previousInput parameter and improve input handling in OpenALMusic to enhance readability and maintainability
added a new constant ` RESPONSE _ WAS _ NULL ` to the ` AssertionResult ` class to ensure that the ` failureMessage ` is
updated condition in DetectionMigrationResource to check for anomalyFailureCount instead of anomalyWarningCount to ensure proper handling of anoma
replaced calls to ` Toast . makeText ` with ` Toast . showToast ` in ` BaseActivity ` and ` DetailActivity ` to
updated the method call from ` method ( ) ` to ` requestTemplate ( ) ` in ` TracingFeignClient . java ` to
refactor LDAPCertStore to use a separate checkName method and improve error handling to enhance robustness of LDAP certificate handling and ensure proper handling of
refactor the retain method in GatewayRSocket . java to simplify the code and improve readability to enhance maintainability and maintainability of the code
added a new test method ` ListViewTest ` and updated ` AdapterViewTest ` to use ` DroidSugarAndroidTestRunner ` to ensure
[ hotfix ] [ test ] remove unnecessary configuration from checkpointfailuremanageritcase
deleted the GenericItemUIProvider . java file to remove unused code to streamline the codebase
added a ` selectedObject ` field to the ` SIPCommSelectorBox ` class and modified the ` setSelected ` method to return the ` selectedObject
added @ Isolated annotation to MetaInfConfigurationTest . java to enable access - static method of FileSystemPool in tests
added a host setting to the serverConnector in HttpServer . java to ensure the server connects with a specific port
added conditional checks for client credentials and client credentials in DynamicClientRegistrationEndpoint . java to ensure correct validity checks for client credentials and client credentials
added CloverInstrumentationFilter to the TestInterfaceAudienceAnnotations class and modified conditional checks in SplitLogCounters to enhance test coverage for Clover instrumentation
added ZHIMI _ HUMIDIFIER _ CB2 support for Smartmi Evaporative Humidifier in Readme
updated the plausibleToBreak method to use CalculationContext instead of BlockStateInterface to improve code readability and maintainability by using a more de
changed the visibility of the setScrollRangeDelta method from public to public to allow access to the method from other classes
added error logging for empty repositories in ClusterStackVersionResourceProvider , HostStackVersionResourceProvider , ClusterStackVersionResourceProvider , and HostStackVersion
updated the condition to check for containsMissingValue in IntHashSet . java to improve code readability and maintainability
added java . io . Serializable to RuleAdministratorImpl . java to ensure proper serialization of RuleAdministrator
updated the ` allowedOrigins ` and ` allowedTimingOrigins ` to accept a ` Set < Pattern > ` and modified the ` allowedOrigin
added " g3d / cube _ anim . g3dj " and " g3d / knight . g3dj "
updated data retrieval logic in Manager . java and added error logging for updateLatestSolidifiedBlock error in WitnessService . java to improve error handling
updated value handling in ExecResult . java and added a new test for null values in TestServerCustomProtocol . java to ensure proper handling of null
added a method ` hasAccess ( ) ` to check if the ` response ` is not null before accessing the ` remoteUser ` parameter to
replaced the ` writeTo ` method with ` getStubClassBytes ` in ` ClassMirror ` , ` StubJar ` , and ` StubJar `
added a text field for the share internal link text in FileDetailSharingFragment . java to improve user experience by providing a more descriptive text
updated accuracy formatting in PredictionTest . java to use Locale . ENGLISH instead of Locale . ENGLISH to ensure accurate accuracy of accuracy in tests
updated condition in ModelZooTest . java to check for SATURDAY instead of SATURDAY to ensure that SATURDAY
added hideInput method and updated hideIme method in AllAppsContainerView and LauncherAllAppsContainerView to improve user experience by
added InMemoryEventStorageEngine configuration to EventHandlingConfigurationTest , SagaConfigurationTest , and SagaConfigurationTest classes to enhance event storage functionality by
refactor ` getmntonname ` method to use ` getmntonname0 ` in ` BsdNativeDispatcher ` to
added a new test class ` Issue1599Test . java ` to test the ` Issue1599Test . java ` to verify the behavior of
updated command usage in SpawnCommand . java to include x , y , z , and z parameters to improve command handling and ensure proper positioning
updated CONTENT _ DIMEN constant and adjusted content area width calculations in Folder . java to improve code clarity and maintainability by using a more de
refactor GraalCompilerTest and HotSpotCryptoSubstitutionTest to use final variable instead of variable variables to improve code readability and maintainability by
updated Directory initialization to use newMockDirectory ( ) instead of newDirectory ( ) to improve code readability and maintainability
updated UpgradeCheckRegistry and UpgradeCatalog280 to use pluginChecks . m _ failedChecks . addAll ( pluginCheckClassNames
refactor Environment class for improved readability to enhance maintainability and maintainability of the code
added import for LuceneTestCase and @ LuceneTestCase . BadApple annotation in RecoveryAfterSoftCommitTest . java to ensure compatibility with the latest Lucene
updated file system separator logic in CodenameOneImplementation . java and HashtableContent . java to ensure proper handling of file systems in the codebase
updated FLAG _ IGNORE _ HDMV _ DTS _ STREAM and FLAG _ ENABLE _ HDMV _ DTS _ AU
updated import statements in LiquibaseEntityResolver and XMLChangeLogSAXParser to use CompositeResourceAccessor instead of Scope . getCurrentScope ( ) to
added SSL disable algorithms in ComHostnameVerifier , JavaHostnameVerifier , and JavaxHostnameVerifier to enable SSL configuration based on configuration
updated the ` EMPTY ` annotation in ` AbstractCxxDeps ` , ` CxxLibraryDescription ` , and ` CxxLibraryDescription ` to
replaced ` expectedDirectory ` with ` actualDirectory ` and ` actualFullDirectory ` in ` StubJarTest . java ` to improve code clarity and
updated the ` resizeThreshold ` field from ` @ DoNotSub ` to ` @ DoNotSub ` in ` Int2ObjectHashMap . java
updated folder name hint logic to check if the title is empty before setting it to improve code readability and maintainability by reducing redundancy
added " uaa " to the list of client names in UaaResetPasswordServiceTests . java to enhance client loading functionality by allowing users to
changed access modifiers of ` isEmptyOrWhitespace ` and ` isSpecialCaseOrUnknown ` methods from public to private to enhance encapsulation by
updated variable names from ` get ( ) ` to ` get ( ) ` and ` getVolatile ( ) ` in multiple classes to improve clarity and
refactor MimetypeIconUtil class for improved readability to enhance maintainability and maintainability of the code
rename ` supportsViewFor ` to ` supportsViewsFor ` across multiple classes to improve clarity and consistency in naming conventions
added a new test method ` negatedInstanceOf ` in ` UnnecessaryParenthesesTest ` and updated its logic in ` Un
added a teleport method to the Location class to enhance the functionality of the Location class based on entity types
replaced ` new String ` with ` Base64Utils . encodeToUrlSafeString ` in multiple classes to improve code readability and maintainability by
updated import statements from ` OnGenerate ` to ` ProjectComponent ` and updated import statements in ` TranslatorManagerHelper . java ` to improve code
changed the interface ` ContainerAnnotation ` from ` ContainerAnnotation ` to ` ContainedBy ` to improve clarity of the interface ' s functionality
added a null check for the result in ObjectIdentityImpl . java to ensure that the result is non - null to prevent potential NullPointerExceptions
refactored the setUpRevampedTweet method to include a muffled flag to improve code readability and maintainability by centralizing re
added a conditional check for addonTheme and updated verified text display logic in UserProfileActivity . java to enhance user experience by allowing customizable verified text
refactor AbucoinsDigest to use a static instance variable and improve code readability to enhance encapsulation and maintainability of the code
camel - 16416 : camel - mongo - component - mongo : add autowired flag to mongoconnection
added a ` sourceIndex ` parameter to ` AttributeMapping ` and updated related constructors to include a ` sourceIndex ` parameter to enhance functionality by
refactor partition statistics retrieval in SemiTransactionalHiveMetastore to use getExistingPartitionStatistics method to improve code clarity and maintainability by
added a call to isSecurityEnabled ( ) in AuthParams . java to ensure security is enabled when security is enabled
refactor ConnectivityReceiver , TerminalKeyListener , TerminalKeyListener , and EastAsianWidth classes to improve code organization and maintainability
do n ' t escape email from contact email in geoserver home page
updated import statements in TerasologyEngine , ModuleManagerImpl , and ModuleManagerImpl classes to improve code clarity and maintainability by centralizing
added a assert for the number of features in JoinModeller . java to ensure correct handling of the number of features in the join process
added a check for the length of ` cmd ` in ` AlgebraProcessor . java ` to ensure that ` cmd . length ( ) `
added conditional checks for debug and trace logging in SingleNodeKafkaResumeStrategy . java to ensure proper logging behavior for debug and trace messages
replaced ` ACTION _ SET _ PLAYBACK _ SPEED ` with ` PlaybackStateCompat . ACTION _ SET _ PLAYBACK _ SP
refactor motor launch event handling in multiple classes to improve clarity and maintainability to enhance code readability and maintainability by reducing redundancy
added validation for ascii name length in MSOwnerFileParser and implemented a test for Ascii _ CHUNK _ LENGTH in TestMimeTypes to
added a @ Ignore annotation to JdbcFrontJdbcBackLinqMiddleTest . java to mark the test as non - deterministic on JDK
refactor lock file creation in MavenDependencyResolver to use a protected method to improve code readability and maintainability by centralizing lock file creation
updated version checks in UpdateUtils . java for consistency to enhance code readability and maintainability
added a check for FEDERATION _ USER in AuthenticationManager . java to ensure proper handling of FEDERATION _ USER
added a check for TruffleObject in ExecuteMethodNode . java to check if the value is an instance of TruffleObject to ensure that the
removed multiple @ Disabled annotations from JakartaClientShutdownWithServerWebAppTest and IndonesianClientShutdownWithServerWebAppTest to streamline the filter
added FilterAttachable and FilterAttachable imports and improved error handling in LogbackValve . java to enhance error handling and ensure proper handling
refactor Collection and Map classes to improve code organization to enhance maintainability and readability of the codebase
removed unused import of Version in CreateIndexTask . java to streamline code by eliminating unnecessary dependencies
added support for handling missing databases in OracleDatabase and updated schema handling in MissingPrimaryKeyChangeGenerator to enhance database handling and ensure proper handling of database
added MetastoreException handling for invalid partition names in MsckOperation and modified exception handling in TestMSCKRepairOnAcid to improve
refactor KafkaCommitter to use retryableCommittables instead of Collections to improve code clarity and maintainability by reducing redundancy
refactor ` ForwardMessageToDLQActivity ` and ` ForwardMessageToDLQActivity ` to use ` ReceiptHandleProcessor ` instead of
added services parameter to DockerComposeContainer and created a new DockerComposeServiceTest class to improve service management and ensure proper service management
replaced the ` for ( Map . Entry < String , byte [ ] > ` with ` copySet ` in multiple classes to improve code readability
removed unused imports and added printStackTrace ( ) in FeedParser . java to streamline code and improve readability by eliminating unnecessary code
removed unnecessary check for mAppsCustomizeContent in Launcher and Workspace classes to simplify code and improve readability
updated variable names from int to double in MeterRealtimeBodyDataDTO . java for consistency to improve code readability and maintainability
added a new file ` bug4150029 . java ` with a new class ` bug4150029 . java ` that implements JApplet
added a boolean flag ` isSparkConfigUpdated ` to ` HiveConf ` and ` SparkClient ` classes to manage spark configuration changes to enhance
added a new method ` getLongPressIndicator ( ) ` to ` AppIcon ` , ` AppIconMenuItem ` , and ` AppIconMenuItem `
added a check for empty polys in WKBWriter and updated test cases in WKBWriterTest to ensure proper handling of empty polys in
refactor ` NativeLibraryMergeEnhancer ` to use ` Interners . builder ( ) ` instead of ` baseUnflavoredBuild
added a new file ` MultiplyByMaxInt . java ` that implements a method to calculate the value of an integer to provide a way to
removed the logic for setting drawer indicators in the search view in OCFileListFragment . java to improve user experience by ensuring the drawer indicators are
removed unused imports from TestRAMDirectory . java to simplify code and improve readability
replaced FixedBitSet with BitSet in Automaton and Operations classes to simplify the code and improve readability
DMNEvaluatorCompiler : add a new Message2 for NO _ EXPR _ DEF _ FOR _ NAME _ ON _ NODE message to
removed unnecessary @ ContainedBy ( AC . class ) @ ContainedBy ( BC . class ) @ ContainedBy ( D . class
added a duration parameter to the messageForConsole method in AbstractController . java to improve code readability and maintainability by using a more descript
added a check for package access in OpenMBeanAttributeInfoSupport . java to ensure correct package access checks for package access
updated ReadResponseResolver and QuorumResponseHandler to include a parameter for response count validation to improve error handling and ensure correct response count validation
added a method to round the free size in StoreDirect . java to ensure proper handling of free sizes in the store
modified the ` areTouchesDisabled ( ) ` method to accept a ` MotionEvent ` parameter and modified the ` isTouchesDisabled ( ) ` method to
updated SslContextFactory to use SslContextFactory . Server instead of SslContextFactory from SslContextFactory to SslContextFactory
removed the PrivilegedExceptionAction class from the PG _ Stream class to simplify the code and improve readability
refactor InputTest class to improve code readability to enhance maintainability and maintainability of the code
refactor DepthController and AbsSwipeUpHandler to use QuickstepLauncher for better user experience to enhance user experience by allowing users to pause background
added a null check for the current location marker in NearbyMapFragment . java to prevent potential NullPointerExceptions when the current location marker is
replace ` client ` with ` clientDetailsService ` in ` ClientAdminEndpoints ` , ` ClientDetailsService ` , and ` clientDetailsService `
replaced XMLConfigBuilder with BeforeEach annotation in SqlSourceBuilderTest . java to improve code readability and maintainability by using a more descript
added a try - catch block for InterruptedException in ActiveMQMessageConsumer . java to improve error handling and ensure thread interruption during test execution
added a new test method ` testKeys ` in ` SlidingGanttCategoryDatasetTest . java ` to validate the handling of unknown column
refactor filter logic in ShenyuTrieRuleListener and ZookeeperSyncDataService to use Optional . ofNullable to improve null safety and prevent
refactor ControlDirection enum to improve code readability and maintainability to enhance maintainability and maintainability of the code
added @ SuppressWarnings ( " SuppressWarnings ( " SuppressWarnings ( " SuppressWarnings ( " SuppressWarnings ( " SuppressWarnings ( " ) ) )
added logging for context propagation in HttpSessionEventPublisher and implemented context checks in HttpSessionEventPublisherTests to ensure proper context management and prevent potential NullPointerExceptions
added a check for the FOR statement in the ASTVisitor class to ensure that the CREATE CQ statement does not change from v0 . 14 to
refactor FlinkIoTDBSink class to improve code organization to enhance maintainability and readability of the code
added a counter for custom simplified nodes in CanonicalizerPhase . java to improve code readability and maintainability by reducing duplication
updated method call from null to context in fileIcon . setImageDrawable to ensure proper context handling for file icons
updated the ` readIdentifierWithSchema ( ) ` method to use ` schema . getName ( ) ` instead of ` schema . getName ( ) `
added DateTimeFormat and DateTimeFormatter for timestamp handling in BigQueryTableRowIterator and created a test for read with time in BigQueryUtilTest to
added ` findViewWithTag ` method to ` ShadowView ` , ` ShadowViewGroup ` , and ` ViewGroupTest ` classes to enhance view
replaced direct casting of ` Enumeration ` with ` Enumeration < String > ` in multiple classes to simplify type casting and improve code readability
updated import statements in IndexToolForDeleteBeforeRebuildIT and MetaDataClient classes to improve code clarity and maintainability
added JSON _ VALUE and JSON _ CREATOR constant and modified enum handling logic in multiple classes to improve code readability and maintainability by using
updated classpath handling in ResourcesFeature . java to use ClasspathUtils . isJar ( classpathFile . toPath ( ) ) to ensure compatibility with
refactor CUDA _ R _ 16F , CUDA _ C _ 32F , and CUDA _ C _ 32F
updated the ResourceLoader class from ` ResourceLoader ` to ` StringResourceLoader ` in ` com . xtremelabs . droidsugar
refactor BlockRedstoneTorch to use SimpleAttachableMaterialData instead of RedstoneTorch to improve code readability and maintainability
added a case for VARBINARY in RelToStageConverter . java to handle the VARBINARY type in the RelToStageConverter class
removed the import of DateHelper in NoteAdapter . java to streamline the code by eliminating unnecessary dependencies
refactor backup handling in Backup . java to improve code readability and maintainability to enhance maintainability and maintainability of the backup management process
change the position from ABSOLUTE to RELATIVE in EuclidianSimplePanelW . java to ensure proper positioning for
refactor file deletion logic in ShadowParcelFileDescriptor . java to simplify file deletion logic to improve code readability and maintainability
replaced ` poll ( ) ` with ` removeFirst ( ) ` in ` StackBasedSecurityContextHolderStrategy ` and ` SecurityContextPropagatingHandler
updated the rule name from " optimizations " to " controversial " in the BooleanInversionTest . java file to improve clarity and maintainability of
added test methods for XorNeutral and XorNeutralSnippet in IntegerEqualsCanonicalizerTest and IntegerEqualsNode classes
removed the static final Type . STRING _ ARRAY constant from TypeFactory . java to simplify the code and improve readability
updated hideIme method to hide IME in AllAppsContainerView , LiveSearchManager , and StatsLogManager to improve logging clarity and
added a new file ` BlockStateContainer . java ` to set and set block states in ` BlockStateContainer . java ` to enhance block state
updated test assertions in TimelineMetricCacheSizingTest and TimelineMetricCacheTest classes to improve clarity and consistency to enhance test coverage and ensure
added a new method ` getGLMaximumTextureSize ( ) ` to determine the maximum texture size based on the max texture size to enhance texture size
updated the method call from tryStopLogRecording ( ) to tryStopLogRecording ( ) to improve code readability and maintainability by
added a conditional check to reset startPosn in the SemanticAnalyzer class to ensure proper initialization of startPosn when the transform is enabled
added ` _ skipStarTree ` method to ` AggregationGroupByOrderByPlanNode ` , ` QueryContext ` , and ` QueryContext `
added a boolean variable ` lockNearbyView ` and modified the method signature in ` NearbyActivity ` to improve code readability and maintain
added a new method ` of ` of ` to ` MapTransformer ` , ` MapTransformer ` , and ` BiMap ` in ` MapTransformer
refactor EmeddedObjects and EmbeddedObjects classes for improved clarity to enhance maintainability and readability of the codebase
added support for launcher widget span info in LauncherPreviewRenderer , PreviewSurfaceRenderer , and PreviewSurfaceRenderer classes to enhance user experience by
updated import statements in StageSelector . java and StageAction . java to use StateChangeListener instead of ChangeEvent to improve code clarity and maintainability by
added methods to retrieve and reset the calling pid in Robolectric and ShadowBinder classes to improve code clarity and ensure proper handling of calling
updated the ` Expect ` class to use ` Throwable ` instead of ` AutoValue ` and modified ` ExpectationFailure ` to use ` Objects
removed a warning log statement for deserializing message with name { } to improve code clarity and maintainability
updated the calculation of newW and H variables in ImageReplacedElement . java to improve clarity and consistency in the calculation logic
added handling for ` &# 9 ` and ` &# 32 ` characters in ` MarkdownWriter ` , ` MarkdownRendererTest ` , and `
refactor password handling in SharePasswordDialogFragment to use a new method for setting passwords to improve code readability and maintainability by centralizing password
replaced ` MAP _ ADDRESS ` with ` UNMAP _ ADDRESS ` and ` UNMAP _ BUFFER ` in ` IoUtil . java
updated the ` AbstractAssert _ describedAs _ printed _ to _ console _ Test ` to use ` randomAlphanumeric ` instead of ` random `
added descriptions for Slider AM keytab directory in LlapOptionsProcessor . java to enhance user experience by providing descriptions for slider keytab
refactor ExtractionModelFrame and GraphicalDataModelView classes to use a new constructor to improve code readability and maintainability by centralizing
added a boolean flag ` mHasLoaderCompletedOnce ` and modified ` findSpaceForItem ` methods in ` LauncherModel . java ` to
refactor NodeManageMemoryMergeOperator and NodePathsCountOperator to use a set instead of a boolean variable to improve code readability and maintainability
updated ` IssueInterface ` , ` ValidationReport ` , ` ValidationReport ` , ` ValidationReport ` , ` ValidationReport ` , and ` Validation
added a method to safe the SSL provider name in RSAClientKeyExchange . java to ensure proper handling of SSL errors and improve error reporting
rename ` dynamicConfiguration ` to ` flinkConfiguration ` in multiple classes to improve clarity and consistency in naming conventions
updated logging level from WARNING to OFF in CCJSqlParserUtil . java to ensure proper logging behavior for better debugging
removed unnecessary whitespace in AggregateLifeCycle . java to improve code readability and maintainability
changed BITMAP _ HEIGHT and WIDTH constants from private to public to allow access to the BITMAP _ HEIGHT and WIDTH
removed the @ Ignore annotation from CovariantOverrideTest . java to improve code clarity and maintainability
refactor ` curly ` method to use ` Qtype ` instead of ` Node ` for better type safety to improve code clarity and maintainability
camel - 14263 : camel - model - reload strategy should load the route definition from the root node .
added space min and maximum values in ScatterChart . java to ensure consistent space calculations for chart operations
updated whitespace in ExpressionStringBuilder . java for consistency to improve readability and maintainability of the code
added a method ` shouldPreserveDataStateOnReapply ( ) ` to ` SplitScreenSelectState ` , ` BaseState ` , and `
added a check for UTF - 8 encoding keys in CheckEncodingPropertiesFile . java to ensure proper handling of UTF - 8 encodings
replaced the call to ` super . prevSysOut ` with ` getSysOut ( ) ` in ` TestReproduceMessage ` and added
added a UiEvent annotation for long - pressed items in StatsLogManager and ItemLongClickListener to enable logging of user long - pressed items in the
added null check for log in StoreWAL . java and created a new test class Issue112Test . java to ensure proper handling of double commit
added a condition to check if the sector preset is not null and added a boolean flag for showSectorLandInfo in SectorPreset to ensure
updated type handling in multiple Java files to use < ? > instead of < ? > to improve type safety and maintainability of type handling
refactor Enum class for improved readability to enhance maintainability and readability of the code
updated NearbySelectionConfig and NearEntityNearbyValueSelector to include a boolean parameter for distribution parameters to enhance flexibility in distribution configurations
refactor cache handling in multiple classes to improve code readability and maintainability to enhance maintainability and maintainability of the cache management process
changed the visibility of the layersContainer variable from ` DataStoreInfo ` to ` createSQLViewContainer ` and ` layersWMSLayerImportContainer
changed the visibility of the ` _ availability ` variable from ` Availability . UNAVAILABLE ` to ` Availability . UNAVAILABLE ` to allow for
added synchronization checks for PBFT and PBFTCommitMessage in multiple classes to improve synchronization handling and provide clearer feedback for PBFT
updated retry configurations in PhishProtectionServiceV1Beta1StubSettings . java to use a new RetrySettings . newBuilder ( ) for
updated the ` _ freeSpaceReclaimDisabled ` and ` _ freeSpaceReclaimQ ` values from ` boolean ` to ` int ` to
updated KDC _ OPT _ PROXIABLE and KDC _ OPT _ FORWARDABLE constants and added a new KDCOptions
refactor JsonWriter initialization to use a new object instead of a new instance to improve code clarity and ensure proper initialization of JsonWriter
replaced multiple calls to ` mentions ` with ` mentionsQuery ` in ` ProfilePager . java ` to improve code readability and maintainability
changed the method signature of ` paintBackground ` from ` paintBackground ` to ` paintComponentBackground ` in ` Slider . java ` to ensure
added a new method ` valueFromClassConstant ` in ` Configuration . java ` to retrieve object value values from class constants to ensure proper handling of
added error handling for initializing Kafka service to improve robustness by providing more informative error messages during service initialization
updated the ` RESOURCES _ TO _ ALWAYS _ ACQUIRE ` variable to include ` usr / share / zoneinfo / tzdata
added configuration checks for the ' output ' channel in MessageBus and updated CHANNEL _ PROPERTY from RuntimeBeanReference to ChannelName in EndpointParser to
added keywords handling in HTMLDocument . java and a test for index keywords in TestDemo . java to ensure proper handling of index keywords in the document
updated SDK version check from S to R in FileUploader . java to ensure compatibility with newer Android versions
updated the initialization of the _ addresses list in MemcachedSessionDataMapFactory . java to include a conditional statement to improve code readability and maintainability
updated the instantiation of CorrespondenceSubclassToFactoryCall to use the class instead of a constructor call to improve code readability and maintainability by
refactor Builder class for improved readability to enhance maintainability and maintainability of the code
updated URL pattern patterns and improved error handling in ISBNtoBibTeXFetcher . java and ISBNtoBibTex
refactor exception handling in PolyglotImpl , PolyglotLanguageContext , and PolyglotLimits classes to improve error handling and ensure
added null check for the text before fireDataChanged ( ) method to prevent potential NullPointerExceptions when the text is null
added TreebankLanguagePack and TreebankLanguagePack imports and updated method signatures in SentimentModel and SentimentModel to improve code
added trim ( ) method to SuffixURLFilter . java to ensure line is trimmed before processing
added a condition to check if the player is in godmode before proceeding to ensure proper handling of god mode when the player is in
refactor popup registration logic in CheckboxCreationDialogW . java and TextInputDialogW . java to improve code readability and maintainability
updated the constructor of LinkedHashMapCache to accept a boolean parameter instead of a boolean parameter to improve code readability and maintainability by encapsulating
replaced the call to ` _ channel . close ( ) ` with ` _ channel . close ( ) ` in ` ChannelEndPoint . java ` to
updated KeyIndexBuilder initialization and added null checks for keyIndex in multiple classes to improve robustness and maintainability of key index validation logic
updated exception handling in DirectUpdateHandler2 . java to use Locale . ROOT instead of Locale . ROOT to improve clarity and maintainability of exception handling
added a ` storeCheckGuard ` field to ` Tool ` and modified ` DefaultJavaLoweringProvider ` to use ` SetStoreCheckGuard `
refactor BciBlockMapping to improve code readability and maintainability to enhance maintainability and maintainability of the code
added a method ` getClassificationDisagreement ` to ` AbstractCloud ` , ` DBCloud ` , and updated HIGH _ VARI
refactor ` AppleLibraryDescription ` to use ` BuildTarget ` instead of ` BuildTarget . copyOf ( unstrippedTarget ) ` to improve
refactor SqlRunner class to improve code readability to enhance maintainability and maintainability of the code
replaced ` String ` with ` long ` in ` InstantUploadBroadcastReceiver ` , ` FileStorageUtils ` , and ` FileStorageUtils ` to
refactor DefaultSdkProvider to use HashSet instead of TreeMap to improve performance and maintainability of the code
replaced ` ProgressIndicator ` with ` ConfidenceProgressIndicator ` in ` CreateOfferView . java ` to improve clarity and maintainability of the spinner
updated header handling in RequestHandler and RequestHandlerV2 classes to use " UMS / " instead of " Cling / " to ensure compatibility
refactor ` iterateBpt ` and ` iterateBpt ` methods in ` TileBuilder ` , ` BlockIndex ` , and ` BlockIndex
added new constants for VIEW _ TYPE _ MESSAGE and VIEW _ TYPE _ MESSAGE in the CrowdfundingChatAdapter class to enhance code
refactor memEncodeUTF16 to memEncodeASCII in LinuxLibrary and MacOSXLibraryDL to improve code readability and maintainability
updated the handling of SBAR and SINV symbols in EnglishGrammaticalRelations . java to ensure proper handling of SBAR and SBAR
refactor TexturePacker and TexturePacker to improve image insertion logic to enhance readability and maintainability of the texture packing process
replaced the ` getVisitors ( ) ` method with a default method ` apply ( ) ` in ` RefactorModule ` and ` AddGrad
added methods ` getChildByName ` and ` getChildByNameRecursive ` in ` Xml . java ` and ` getChildrenByName ` in ` Xml . java `
updated Content - Charset header handling in HttpSolrServer and BasicHttpSolrServerTest to ensure proper handling of UTF - 8 content - Charset headers
added ` @ SystemUiControllerFlags ` annotation to ` TaskThumbnailView ` , ` SystemUiController ` , and ` SystemUiController ` to
removed the clientService field from the IntrospectingTokenService class to simplify the code and improve readability
added error message for record reader creation in HiveRecordSet . java to improve error handling by providing clearer error messages for record reader creation
removed the ownerId field from NodeEntry . java to streamline the code by eliminating unnecessary initialization
updated BackupSnapshotAferTakingSnapshot methods to use BackupSnapshotAfterTakingSnapshot instead of BackupSnapshotAferTakingSnapshot
added score calculation to the merge method in TextFragment . java to ensure consistent score calculation for text fragment merging
removed the private Digester field from Md4PasswordEncoder . java to simplify the code and improve readability
added validation for maximumUnimprovedStepCount in UnimprovedStepCountFinish . java to ensure that the maximumUnimproved
added a check for empty editors in EditGcodeFile . java to ensure proper handling of empty editors before proceeding
updated the ` verify ` method to use ` Mockito . verify ` instead of ` verify ` in ` BDDMockito . java ` and added
updated the classloader assignment from ` currentThread ( ) . getContextClassLoader ( ) ` to ` PathScanner . class . getClassLoader ( ) ` to ensure proper
added a check for ` CodeFirstPojoClientIntf ` and updated the ` sayHi2 ` method in ` CodeFirstPojoClient ` and
added logging functionality to AbstractSplitBrainProtectionTest . java and updated related methods in AbstractSplitBrainProtectionTest . java to enhance debugging capabilities
added null check for logoutConfigurer in DefaultLoginPageConfigurer and updated related tests in ServerHttpSecurity to ensure proper handling of logout configurations and improve
updated string concatenation in CASgiac . java to improve clarity and consistency to enhance readability and maintainability of the code
added a new method ` withLogConsumer ` to ` DockerComposeContainer ` and created a new ` DockerComposeLogConsumerTest ` class to enhance
updated the ` testMapping ` method signature from ` expected ` to ` actual ` in ` StandardJavaTypeMappingTest . java ` to improve clarity and
removed unused imports from AmbariMetaInfoTest . java to simplify the code and improve readability
added a static method ` fromSupplier ( Supplier < T > supplier ) ` to ` ThrowingSupplier < T , E > ` to provide a
updated the return statement in ConsoleActivity . java to return a boolean value to improve code readability and maintainability
camel - 14264 : camel - Vertx : add a test for text / post in the framework
added platform separators to MorePaths and modified path handling in CopyStep to improve path handling and ensure proper handling of platform - specific path paths
added a null check for authorizationContext in AuditEvent . java to avoid potential NullPointerExceptions when authorizationContext is not initialized
added a throwExceptionIfFail method to the load method in NativeLibraries . java to ensure proper exception handling when load libraries only if present
updated VERSION _ CODES . O _ MR1 , " 4611349 " , " 4514284 " , and added tests
added a new ` TransactionLogKey ` class and modified ` QueueTransactionLog ` to accept a ` String ` parameter and added ` TransactionLogKey
added a boolean field ` enableSqlWithoutProfile ` and updated related methods in ` JdbcEnvironmentProperties ` and ` JdbcEnvironmentRepository ` to enable SQL
added a try - finally block to ensure the write method returns a try - finally block to ensure proper resource management and prevent potential resource leaks
updated the ` CREATE _ REGISTRIES ` method to use ` EventGenerator . fromFunction ` instead of ` Supplier ` to improve clarity and
updated date formatting in DateUtils . java and modified test assertions in FontParsersTest . java to ensure accurate formatting of date formats and ensure correct
updated method signatures in CachedThreadStatesGaugeSet and ThreadStatesGaugeSet to use STACK _ TRACE _ DEPTH constant to improve code clarity and
added a method ` prevTlogOnPrecommit ` to ` UpdateLog ` and updated related tests in ` LeaderTragicEventTest `
updated FastAsyncWorldEdit from " FastAsyncWorldEdit - P2 - V6 / " to " FastAsyncWorldEdit - 1 . 17
added null check for outputDirectory before accessing it to the SegmentGeneratorConfig to prevent potential NullPointerException when path is null
added methods to calculateNormalVector and calculateNormalNewell in ObjUtils . java and updated TriangulationHelper . java to improve normal vector
added IdentityZoneHolder to the find method in JdbcAuditService . java to enhance the management of identity zone IDs in the audit service
refactor SpanCollector class to improve code organization to enhance maintainability and readability of the code
added null check for SESSION _ MANAGER in AuthorizationFilter . java to ensure proper handling of null session information
refactor TransactionIsolationLevel class implementation to improve code readability and maintainability
updated method names from ` printLVgroups ` to ` printLogicalVolumeGroups ` in ` OshiController . java ` to improve clarity and consistency
added a call to ` Thread . currentThread ( ) . setName ( " Forwarding to " " ) ` in ` TestSession . java ` to
refactor CookieManager class to improve code organization to enhance maintainability and readability of the CookieManager class
removed unnecessary initialization of ComponentKey in LauncherExtension . java to simplify the code and improve readability
added a new OverviewToAllAppsTouchController to the list of OverviewToAllAppsTouchController to enhance user experience by providing
rename ` scaleHotseatWithWorkspace ` to ` getHotseatScaleAndTranslation ` and update related methods in ` WorkspaceStateTransitionAnimation ` to
updated the check for JUnitRule in DefaultStackTraceCleaner . java and added a new test for JUnitRule in StackTraceFilterTest . java
replaced ` dstnull ` with ` dstByteArray ` and ` dstByteArray ` in ` MappedResizeableBuffer . java ` to improve code clarity
added a new ` BalanceListener ` instance and modified the ` addBalanceListener ` method in ` DepositListItem . java ` to improve balance management
added null checks for t and tex in RealisticRenderer . java to ensure proper handling of color values based on edge mode
added a null check for HttpClientResponse in multiple test classes to prevent potential NullPointerExceptions when the httpClientResponse is null
removed the PatternUtil . checkPattern method from Gl200ProtocolDecoder . java to streamline the code by eliminating unnecessary code
updated playback timing logic in FullDetailsActivity . java to improve accuracy of playback events based on last playback time
refactor SpanishXMLTreeReader to utilize MWE _ PHRASAL and add isEllipticNode method to improve readability and
added a check to clear the language and language in the InstallItem class to ensure proper handling of language and language in the application
updated the ` ReactiveLoadBalancerClientFilter ` to use ` retrievedInstance . isSecure ( ) ` instead of ` response . getServer ( ) ` to
updated variable name from ` byteBuffer . duplicate ( ) ` to ` byteBuffer . duplicate ( ) ` in ` DefaultMessageStore . java ` to improve
removed the final modifier from the fullFilePathFromClassName method in NativeImageDebugInfoProvider . java to simplify the method signature and improve code readability
updated the return statement in ShadowBackupManagerTest to use Correspondence . from ( ) instead of a new Correspondence . from ( )
replaced ` isNonUSSupported ` with ` isNonENSupported ` for consistency to improve code readability and maintainability
added a null check for redeemData in LocalTransactionSigner . java to improve code readability and maintainability
added a new file ` MinecraftForgeClient . java ` that implements RenderBlocks and RenderBlocks in the ` MinecraftForgeClient ` class to
added a return statement to the TxCacheDB class to ensure proper handling of cached transactions
updated import statements from com . sun . xml to jdk . internal . org in BoundMethodHandle . java and InvokerBytecodeGenerator . java
refactor FastDictionary class to improve code readability to enhance maintainability and maintainability of the code
updated import statements and added session status handling in NIOConnection . java to improve code readability and maintainability by centralizing session status logic
updated FlightEvent types from 1200 to 1200 and 1200 in FlightEventsTest . java to ensure correct event types are used for better event
updated import statements in TextSource , ByteKey , and ByteKey classes to use v1p26p0 instead of com . google . protobuf
replaced target . addNamespaceDeclaration with newElement . addNamespaceDeclaration in SaajStaxWriter . java to improve code readability and maintainability
updated the ` profilePictureLink ` map to use ` displayableCourseId ` instead of ` getProfilePictureLink ` to enhance user experience by
added a short list of rules in DefaultPasswordValidator and implemented a test for alphabetic and numeric sequence validation in DefaultPasswordValidatorTests to ensure proper
added a new file ` Command . java ` and updated ` SeleniumDriverResourceHandler . java ` and ` SeleniumDriverResourceHandler . java ` to
removed the @ Test annotation from ProxyClassSerializationTest . java to simplify the code and improve readability
updated the ` scale ` argument in ` DLNAMediaInfo . java ` to use ` bgr24 ` instead of ` format ` to
[ gr - 14247 ] remove unneeded method in test .
updated authentication manager handling in AuthenticationManagerBeanDefinitionParser and added a test for multiple authentication managers in AuthenticationManagerBeanDefinitionParserTests to ensure proper handling of authentication
added handling for PortSetHostPort in ForwardedRequestCustomizer and updated host handling in ForwardedRequestCustomizerTest to ensure proper handling of port and host
added a call to setLength ( 0 ) in ConsoleReader . java to ensure proper initialization of output buffers
changed access modifiers of allowedRoles and disallowedRoles from private to protected to allow subclasses to access the allowedRoles list
updated OpenIDE - Module - Specification - Version from 1 . 54 to 1 . 55 in multiple manifest files to ensure compatibility with the latest
hbase - 13232 add tls . wrapsize to netty . tls . tls . wrapsize ( )
refactor multiple Java files to improve code organization to enhance maintainability and readability of the codebase
updated ` FixedLengthTokenizerTests ` to use ` Assert ` instead of ` TestCase ` and added unit tests for tokenization to ensure proper exception handling
added protocol binding handling in OpenSamlAuthenticationRequestFactory and created a new OpenSamlAuthenticationRequestFactoryTests class to improve authentication request handling and ensure proper
refactor DepthController to use AttachedSurfaceControl for managing root surface control to improve code readability and maintainability by centralizing transaction management
updated the version comparison from " main " to " 2 . 5 . x " in AsciidoctorConventions . java to ensure consistent version
updated method names from WRITE to CREATE in AccessController . java for consistency to improve code readability and maintainability
updated the size of unSeqMergeList from 0 to 0 in TsFileManagement . java and MergeMultiChunkTask . java to correct the
added file handling in GenericFileConverter and corresponding test cases in GenericFileConverterTest to ensure proper handling of file files in the file handling process
added a ` build ( boolean login ) ` method to ` DefaultShardManager ` and implemented login method in ` ShardManagerBuilder ` to enhance login
updated DeleteGlobalRef method call from ` DeleteGlobalRef ` to ` DeleteGlobalRef ` to improve code readability and maintainability
updated JoinTable name from " RegisteredServiceImpl _ Properties " to " RegisteredServiceImpl _ Props " to improve clarity and consistency in
added a condition to check if the completion is marked before termination the response to ensure that the response is terminated only when the completion is marked
added a check for user student in FeedbackResponseCommentsLogic . java to ensure that user students are only included in the
added functionality to disable linked profiles in BMPImageReader to enhance security by allowing users to disable linked profiles in the application
updated the ` setSimpleCuboid ` method calls in ` ClassicPlotManager . java ` to use ` byte ` instead of ` byte `
added a wait message for the PMD checks in PMDOpenTool . java to ensure that the PMD checks the files in the package
refactor grid size handling in StdGridFragment . java to improve code readability and maintainability
changed return values from false to true in ContributionsListFragment . java to improve code readability and maintainability
added a testSkipRange call in DistinctPrefixFilterIT . java and modified the filtering logic in BaseResultIterators . java to ensure that
added a new test method ` testAcrobatCheckBoxGroupProperties ` in ` PDButtonTest . java ` to verify the functionality of
added a method ` getFileLastModified ` to retrieve the last modified timestamp in ` BlackBerryImplementation . java ` to provide a way to retrieve the last modified
added a condition to check if the metadata table is valid in HiveIcebergStorageHandler to ensure proper handling of metadata table properties
refactor currency handling in CashDepositForm to use ComboBox < TradeCurrency > instead of TextField to improve code readability and maintainability by central
changed exception handling from IOException to Throwable in WriteFlusher . java to ensure proper handling of IOException and Throwable
added a boolean variable ` mStartedEnterAnimation ` and updated animation handling logic in ` IconRecentsView . java ` to improve animation handling and
added a new field ` activeKeyId ` to the ` UaaConfiguration ` class to provide access to the ` activeKeyId ` field
updated method names from " Send a " to " sendMessageActionDescription " in ` SendMailActions ` and ` sendMailWithAttachment ` to improve
changed the visibility of the isActive variable from private to volatile in SocketServer . java to ensure the visibility of the isActive variable
removed the ` isDesc ( ) ` method from ` OrderByExpressionContext ` and updated assertions in ` BrokerRequestToQueryContextConverterTest `
refactor ` buildImplicitEquation ` and ` buildImplicitVarPart ` to use ` CharSequence ` instead of ` toStringLHS ( ) ` to
added a new constant for OWNCLOUD _ APP _ NAME and modified condition checks in DisplayUtils . java to ensure that the app name
added security permission checks and updated directory creation logic in MasterFileSystem . java to ensure proper permissions are set based on user authentication
updated locale retrieval in JakartaServletWebExchange and JavaxServletWebExchange to use httpServletResponse instead of httpServletRequest to improve clarity and consistency in locale
refactor Instant class to improve code readability to enhance maintainability and maintainability of the code
added null check for ` props ` and updated state format handling in ` CollectionsHandler ` , ` ExternalCollectionsTest ` , and ` AbstractFull
updated log messages in CentralAuthenticationServiceImpl and AbstractTicket classes to improve clarity and consistency to enhance code readability and maintainability
added IllegalArgumentException for ProfileDataException and CMMException in PDICCBased . java to ensure proper handling of invalid exception types
updated the condition for checking file names in AbstractFileResourceSet . java to improve code readability and maintainability
added a pathTranslator parameter to the PluginParameterExpressionEvaluator constructor and modified its usage in PluginParameterExpressionEvaluator to enhance flexibility in handling path - based
refactor ByteStringCoder and ByteStringCoder classes to include a new ProtobufCoderRegistrar class and introduce a new ProtobufCoderRegistrar class to
updated the JpaQueryParsingToken constructor to include a boolean parameter and added a new test for querying with signed numeric literals to enhance query
updated LaunchLugHandler and RailGuideHandler to include a parent length parameter and updated related methods accordingly to enhance flexibility and maintainability of the l
removed the ` getNonceFactory ( ) ` method from ` BitmexStreamingExchange ` to streamline the code and improve readability
updated logging statements and logging statements in MailBinding . java to improve clarity and consistency to enhance logging clarity for better debugging
[ java ] use default value for clientLivenesstimeoutns and publicationconnectiontimeoutns in test .
changed the default value of ` initializeLoadedClasses ` from true to false in ` ScanSpec . java ` to ensure that ` initializeLoadedClasses `
added a call to grabFocus ( ) in FullTextSearchPanel . java to ensure that the search field focus is properly focused
refactor NioParams initialization in TlsConnectionLogging . java to improve code readability and maintainability
updated the assertion in StatementTest . java to check for random values to ensure correct behavior for random values
updated assertion message formatting in TestSolrConfigHandler . java to improve clarity to enhance readability and maintainability of the code
refactor CsrfWebFilterTests to use ServerHttpRequest and ServerWebExchange instead of MockServerHttpRequest to improve code readability and maintainability
refactor density handling in FilterResourcesStep . java to use an import for Density to improve code readability and maintainability by centralizing density
added a new ` buttonUIID ` variable and modified UI ID retrieval logic in ` ComponentGroup . java ` to improve UI ID management and ensure
removed unused imports from RecentsAnimationDeviceState . java to simplify code and improve readability
added new classes ` TestCloneArrayWithDifferentLengthConstness ` and ` TestArrayCopyWithLargeObjectAlignment ` and ` TestArrayCopyWith
added @ AwaitsFix annotation to ReplicationFactorTest . java to improve test coverage for test failures
added null checks for future and startDate in RedissonExecutorService and TasksRunnerService to prevent potential NullPointerExceptions when nextStartDate is null
refactor credentials checking logic in FileDownloader , FileUploader , and FileUploader classes to improve code readability and maintainability
added null check for scanner in Compactor . java to ensure proper resource management and prevent potential NullPointerExceptions
updated method calls from ` get ( iface ) ` to ` getOrDefault ( iface , 0L ) ` in ` NetMetrics . java ` to
added a nonce parameter to the ` getToken ` method in ` TokenMvcMockTests . java ` to ensure that the ` getClaimsForToken `
refactor ChartEditor and DefaultChartEditor classes to improve code organization to enhance maintainability and readability of the codebase
added width and height settings for formLayeredPane in Form . java to ensure proper layout behavior for formLayeredPane
updated import statements and added a maxY method in BrowserContentPane . java to improve code clarity and maintainability by using a more descriptive
refactored the ` openDatabase ` method to return a boolean instead of void to improve clarity and maintainability of the code
refactor Docker command handling in DockerTestUtils and Platform classes to use Platform . DOCKER _ COMMAND instead of DOCKER _ 
updated the ` initializeParameters ` method to throw ` Exception ` and added a null check for ` is ` in ` TestIsartorValidationFrom
updated the ` drawLeaveBehind ` method to include a color parameter in ` TaskbarView ` , ` CellLayout ` , and `
added a static method ` reportCanaryIncompatibility ( ) ` to ` FlutterStudioInitializer ` to indicate that the plugin does not work
added null check for identityproxy table name before retrieval to avoid potential NullPointerExceptions when invalid IdentityProxy table names are found
removed the ` modulePersistEnable ` and ` modulePersistDisable ` methods from the ` StartArgs ` class to streamline the code by eliminating unnecessary
updated conditional checks in GeminiMarketDataService . java to improve clarity and consistency to enhance code readability and maintainability
replaced HashSet with LinkedHashSet in VerifyPasswordResetRequestAction . java to improve clarity and maintainability of the code
added a new test class ` TesterResponse ` and ` TestRealmBase ` to implement the ` TesterResponse ` and ` TestRealmBase
added new jsp files for setup / setup - admin - settings and setup - profile - settings in AuthCheckFilter . java to ensure proper inclusion of
added a boolean flag ` isExecutingRunnable ` to ` Scheduler ` and modified the ` runOrQueueRunnable ` method in ` SchedulerTest ` to
updated ` runCommand ` methods to accept ` String . . . args ` instead of ` String [ ] ` to improve clarity and consistency in command
updated XMLParser to return END _ TAG instead of ASCII to ensure proper handling of non - ASCII characters in XML parsing
added a new test method ` testHorizPageOverflowHidden ` to ` TextVisualRegressionTest . java ` to ensure text appears on overflow
added pivot position based on arrow width and height in DeepShortcutsContainer . java to ensure correct alignment of arrow positions
replaced printStackTrace ( ) with ignored in JabRefExecutorService , JabRefExecutorService , and ACMPortalFetcher classes to simplify exception handling and improve
refactor gesture state handling in AbsSwipeUpHandler to include a refreshView parameter to improve code readability and maintainability by centralizing gesture state
pdfbox - 4072 : use class name instead of org . apache . pdfbox . ExtractTTFFonts . class . getName ( )
updated InternetAddress instantiation and added error handling for valid hostnames in EmailFormatSpecifier and HostnameFormatSpecifier to ensure correct handling of valid hostnames
replaced ` AuthenticatorActivity ` with ` this ` in multiple classes to simplify the code and improve readability by eliminating unnecessary method calls
refactor ` SizeBasedDocIdIterator ` and ` SizeBasedDocIdIterator ` classes to use ` _ currentDocId ` instead of `
refactor the promptToOpenFile method to include a new method ` promptToOpenFile ` to improve code readability and maintainability by central
refactor AppsCustomizePagedView and AppsCustomizeTabHost to use updatePageCounts method to improve code readability and
added handling for active instances and transformed components in FlightConfiguration . java to ensure proper handling of component coordinates in the FlightConfiguration class
updated method names from " seda : foo " to " direct : foo " in MicrometerMessageHistoryTest and SpringMicrometerMessageHistoryTest
updated DateTimeFormatter instantiation to use Locale . ROOT instead of Locale . ROOT to ensure compatibility with the latest locale locale
added permission filtering functionality in DSpaceObjectConverter . java and updated metadata handling in DSpaceObjectRest . java to improve metadata handling and ensure proper
added a new test method ` testMissingRequired ` in ` TestStarTreeConfig . java ` to validate required parameter names to ensure proper handling of
added a element parameter to the recipientList constructor in FromBuilder . java and updated related test cases in SpringRouteBuilderTest . java to enhance the
refactor inline layout handling in InlineLayoutBox and HoverListener classes to improve code readability and maintainability
refactor operation handling in AuthenticatorActivity to use OperationsService instead of DetectAuthenticationMethodOperation to improve code clarity and maintainability by centralizing service
